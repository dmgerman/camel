begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.crypto.cms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|common
operator|.
name|CryptoCmsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsInvalidKeyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsNoCertificateForSignerInfoException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsNoCertificateForSignerInfosException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsNoKeyOrCertificateForAliasException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|exception
operator|.
name|CryptoCmsSignatureInvalidContentHashException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|sig
operator|.
name|DefaultSignedDataVerifierConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|sig
operator|.
name|DefaultSignerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|sig
operator|.
name|SignedDataCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|sig
operator|.
name|SignedDataCreatorConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|sig
operator|.
name|SignedDataVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|sig
operator|.
name|SignedDataVerifierFromHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|sig
operator|.
name|SignerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|util
operator|.
name|ExchangeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|crypto
operator|.
name|cms
operator|.
name|util
operator|.
name|KeystoreUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|KeyStoreParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|SignedDataTest
specifier|public
class|class
name|SignedDataTest
block|{
annotation|@
name|BeforeClass
DECL|method|setUpProvider ()
specifier|public
specifier|static
name|void
name|setUpProvider
parameter_list|()
block|{
name|Security
operator|.
name|addProvider
argument_list|(
operator|new
name|BouncyCastleProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithCertificatesIncluded ()
specifier|public
name|void
name|testWithCertificatesIncluded
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerify
argument_list|(
literal|"Test Message"
argument_list|,
literal|"system.jks"
argument_list|,
literal|"SHA1withRSA"
argument_list|,
literal|"rsa"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithCertificatesIncludedNoSignedAttributes ()
specifier|public
name|void
name|testWithCertificatesIncludedNoSignedAttributes
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerify
argument_list|(
literal|"Test Message"
argument_list|,
literal|"system.jks"
argument_list|,
literal|"SHA1withRSA"
argument_list|,
literal|"rsa"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithCertificatesIncludedTimestampSignedAttribute ()
specifier|public
name|void
name|testWithCertificatesIncludedTimestampSignedAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerify
argument_list|(
literal|"Test Message"
argument_list|,
literal|"system.jks"
argument_list|,
literal|"SHA1withRSA"
argument_list|,
literal|"rsa"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithCertificatesIncludedCertificateSignedAttribute ()
specifier|public
name|void
name|testWithCertificatesIncludedCertificateSignedAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerify
argument_list|(
literal|"Test Message"
argument_list|,
literal|"system.jks"
argument_list|,
literal|"SHA1withRSA"
argument_list|,
literal|"rsa"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithoutCertificatesIncludedAndDigestAlgorithmSHA1andSignatureAlgorithm ()
specifier|public
name|void
name|testWithoutCertificatesIncludedAndDigestAlgorithmSHA1andSignatureAlgorithm
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerify
argument_list|(
literal|"Test Message"
argument_list|,
literal|"system.jks"
argument_list|,
literal|"SHA1withDSA"
argument_list|,
literal|"dsa"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|signAndVerify (String message, String keystoreName, String signatureAlgorithm, String alias, boolean includeContent, boolean includeCertificates)
specifier|private
name|void
name|signAndVerify
parameter_list|(
name|String
name|message
parameter_list|,
name|String
name|keystoreName
parameter_list|,
name|String
name|signatureAlgorithm
parameter_list|,
name|String
name|alias
parameter_list|,
name|boolean
name|includeContent
parameter_list|,
name|boolean
name|includeCertificates
parameter_list|)
throws|throws
name|UnsupportedEncodingException
throws|,
name|Exception
block|{
name|byte
index|[]
name|signed
init|=
name|sign
argument_list|(
name|message
argument_list|,
name|keystoreName
argument_list|,
name|signatureAlgorithm
argument_list|,
name|includeContent
argument_list|,
name|includeCertificates
argument_list|,
name|alias
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
name|verify
argument_list|(
name|keystoreName
argument_list|,
name|alias
argument_list|,
name|signed
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|message
argument_list|,
operator|new
name|String
argument_list|(
name|result
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sign (String message, String keystoreName, String signatureAlgorithm, boolean includeContent, boolean includeCertificates, String... aliases)
specifier|private
name|byte
index|[]
name|sign
parameter_list|(
name|String
name|message
parameter_list|,
name|String
name|keystoreName
parameter_list|,
name|String
name|signatureAlgorithm
parameter_list|,
name|boolean
name|includeContent
parameter_list|,
name|boolean
name|includeCertificates
parameter_list|,
name|String
modifier|...
name|aliases
parameter_list|)
throws|throws
name|UnsupportedEncodingException
throws|,
name|Exception
block|{
name|KeyStoreParameters
name|keystore
init|=
name|KeystoreUtil
operator|.
name|getKeyStoreParameters
argument_list|(
name|keystoreName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SignerInfo
argument_list|>
name|signers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|aliases
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|aliases
control|)
block|{
name|DefaultSignerInfo
name|signerInfo
init|=
operator|new
name|DefaultSignerInfo
argument_list|()
decl_stmt|;
name|signerInfo
operator|.
name|setIncludeCertificates
argument_list|(
name|includeCertificates
argument_list|)
expr_stmt|;
comment|// without
comment|// certificates,
comment|// optional
comment|// default
comment|// value is
comment|// true
name|signerInfo
operator|.
name|setSignatureAlgorithm
argument_list|(
name|signatureAlgorithm
argument_list|)
expr_stmt|;
comment|// mandatory
name|signerInfo
operator|.
name|setPrivateKeyAlias
argument_list|(
name|alias
argument_list|)
expr_stmt|;
name|signerInfo
operator|.
name|setKeyStoreParameters
argument_list|(
name|keystore
argument_list|)
expr_stmt|;
name|signers
operator|.
name|add
argument_list|(
name|signerInfo
argument_list|)
expr_stmt|;
block|}
name|SignedDataCreatorConfiguration
name|config
init|=
operator|new
name|SignedDataCreatorConfiguration
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SignerInfo
name|signer
range|:
name|signers
control|)
block|{
name|config
operator|.
name|setSigner
argument_list|(
name|signer
argument_list|)
expr_stmt|;
block|}
comment|// config.setBlockSize(blockSize); // optional
name|config
operator|.
name|setIncludeContent
argument_list|(
name|includeContent
argument_list|)
expr_stmt|;
comment|// optional default value is
comment|// true
name|config
operator|.
name|init
argument_list|()
expr_stmt|;
name|SignedDataCreator
name|signer
init|=
operator|new
name|SignedDataCreator
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|ExchangeUtil
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|message
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|signer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|byte
index|[]
name|signed
init|=
operator|(
name|byte
index|[]
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
return|return
name|signed
return|;
block|}
DECL|method|verify (String keystoreName, String alias, byte[] signed, boolean base64)
specifier|private
name|byte
index|[]
name|verify
parameter_list|(
name|String
name|keystoreName
parameter_list|,
name|String
name|alias
parameter_list|,
name|byte
index|[]
name|signed
parameter_list|,
name|boolean
name|base64
parameter_list|)
throws|throws
name|Exception
throws|,
name|UnsupportedEncodingException
block|{
name|DefaultSignedDataVerifierConfiguration
name|verifierConf
init|=
name|getCryptoCmsSignedDataVerifierConf
argument_list|(
name|keystoreName
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|alias
argument_list|)
argument_list|,
name|base64
argument_list|)
decl_stmt|;
name|SignedDataVerifier
name|verifier
init|=
operator|new
name|SignedDataVerifier
argument_list|(
name|verifierConf
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|signed
argument_list|)
argument_list|)
decl_stmt|;
name|Exchange
name|exchangeVeri
init|=
name|ExchangeUtil
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|exchangeVeri
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|verifier
operator|.
name|process
argument_list|(
name|exchangeVeri
argument_list|)
expr_stmt|;
name|byte
index|[]
name|result
init|=
operator|(
name|byte
index|[]
operator|)
name|exchangeVeri
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getCryptoCmsSignedDataVerifierConf (String keystoreName, Collection<String> aliases, boolean base64)
name|DefaultSignedDataVerifierConfiguration
name|getCryptoCmsSignedDataVerifierConf
parameter_list|(
name|String
name|keystoreName
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|aliases
parameter_list|,
name|boolean
name|base64
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
throws|,
name|KeyStoreException
throws|,
name|NoSuchAlgorithmException
throws|,
name|CertificateException
block|{
name|KeyStoreParameters
name|keystorePas
init|=
name|KeystoreUtil
operator|.
name|getKeyStoreParameters
argument_list|(
name|keystoreName
argument_list|)
decl_stmt|;
name|KeyStore
name|keystore
init|=
name|keystorePas
operator|.
name|createKeyStore
argument_list|()
decl_stmt|;
name|KeyStore
name|verifierKeystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"JCEKS"
argument_list|)
decl_stmt|;
name|verifierKeystore
operator|.
name|load
argument_list|(
literal|null
argument_list|,
literal|""
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// add only verifier certs
for|for
control|(
name|String
name|alias
range|:
name|aliases
control|)
block|{
name|Certificate
name|verifierCert
init|=
name|keystore
operator|.
name|getCertificate
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|verifierCert
operator|!=
literal|null
condition|)
block|{
name|verifierKeystore
operator|.
name|setCertificateEntry
argument_list|(
name|alias
argument_list|,
name|verifierCert
argument_list|)
expr_stmt|;
block|}
block|}
name|DefaultSignedDataVerifierConfiguration
name|verifierConf
init|=
operator|new
name|DefaultSignedDataVerifierConfiguration
argument_list|()
decl_stmt|;
name|verifierConf
operator|.
name|setKeyStore
argument_list|(
name|verifierKeystore
argument_list|)
expr_stmt|;
name|verifierConf
operator|.
name|setFromBase64
argument_list|(
name|base64
argument_list|)
expr_stmt|;
return|return
name|verifierConf
return|;
block|}
annotation|@
name|Test
DECL|method|signWithTwoAliases ()
specifier|public
name|void
name|signWithTwoAliases
parameter_list|()
throws|throws
name|Exception
block|{
name|sign
argument_list|(
literal|""
argument_list|,
literal|"system.jks"
argument_list|,
literal|"SHA1withRSA"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|"rsa"
argument_list|,
literal|"rsa2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CryptoCmsNoKeyOrCertificateForAliasException
operator|.
name|class
argument_list|)
DECL|method|signWithTwoAliasesOneWithNoPrivateKeyInKeystore ()
specifier|public
name|void
name|signWithTwoAliasesOneWithNoPrivateKeyInKeystore
parameter_list|()
throws|throws
name|Exception
block|{
name|sign
argument_list|(
literal|"Test Message"
argument_list|,
literal|"system.jks"
argument_list|,
literal|"SHA1withDSA"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|"dsa"
argument_list|,
literal|"noEntry"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CryptoCmsNoKeyOrCertificateForAliasException
operator|.
name|class
argument_list|)
DECL|method|signWrongAlias ()
specifier|public
name|void
name|signWrongAlias
parameter_list|()
throws|throws
name|Exception
block|{
name|sign
argument_list|(
literal|"Test Message"
argument_list|,
literal|"system.jks"
argument_list|,
literal|"SHA1withDSA"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|"wrong"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|signEmptyContent ()
specifier|public
name|void
name|signEmptyContent
parameter_list|()
throws|throws
name|Exception
block|{
name|sign
argument_list|(
literal|""
argument_list|,
literal|"system.jks"
argument_list|,
literal|"SHA1withDSA"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|"dsa"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CryptoCmsInvalidKeyException
operator|.
name|class
argument_list|)
DECL|method|signSignatureAlgorithmNotCorrespondingToPrivateKey ()
specifier|public
name|void
name|signSignatureAlgorithmNotCorrespondingToPrivateKey
parameter_list|()
throws|throws
name|Exception
block|{
name|sign
argument_list|(
literal|"testMessage"
argument_list|,
literal|"system.jks"
argument_list|,
literal|"MD5withRSA"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|"dsa"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|signWrongSignatureAlgorithm ()
specifier|public
name|void
name|signWrongSignatureAlgorithm
parameter_list|()
throws|throws
name|Exception
block|{
name|sign
argument_list|(
literal|"testMessage"
argument_list|,
literal|"system.jks"
argument_list|,
literal|"wrongRSA"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|"rsa"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifySignedDataWithoutSignedContent ()
specifier|public
name|void
name|verifySignedDataWithoutSignedContent
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|SignedDataTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"detached_signature.binary"
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOHelper
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|byte
index|[]
name|signed
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
name|verify
argument_list|(
literal|"system.jks"
argument_list|,
literal|"rsa"
argument_list|,
name|signed
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CryptoCmsException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"PKCS7/CMS signature validation not possible: The content for which the hash-value must be calculated is missing in the PKCS7/CMS signed data instance. "
operator|+
literal|"Please check the configuration of the sender of the PKCS7/CMS signature."
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CryptoCmsNoCertificateForSignerInfosException
operator|.
name|class
argument_list|)
DECL|method|verifyNoVerifierCerts ()
specifier|public
name|void
name|verifyNoVerifierCerts
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|signed
init|=
name|sign
argument_list|(
literal|"Test Message"
argument_list|,
literal|"system.jks"
argument_list|,
literal|"SHA1withRSA"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|"rsa"
argument_list|)
decl_stmt|;
name|verify
argument_list|(
literal|"system.jks"
argument_list|,
literal|"wrongAlias"
argument_list|,
name|signed
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// wrongAlias means
comment|// that no
comment|// certificates are
comment|// added to the
comment|// verifier keystore
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CryptoCmsFormatException
operator|.
name|class
argument_list|)
DECL|method|verifyWrongFormat ()
specifier|public
name|void
name|verifyWrongFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|verify
argument_list|(
literal|"system.jks"
argument_list|,
literal|"rsa"
argument_list|,
literal|"test"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CryptoCmsFormatException
operator|.
name|class
argument_list|)
DECL|method|verifyWrongFormatInHeader ()
specifier|public
name|void
name|verifyWrongFormatInHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyContentWithSeparateSignature
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"ABCDEFG1ABCDEFG1ABCDEFG1"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"ABCDEFG1ABCDEFG1ABCDEFG1"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
literal|"rsa"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyContentWithSeparateSignature ()
specifier|public
name|void
name|verifyContentWithSeparateSignature
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|message
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"Test Message"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|InputStream
name|signature
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"detached_signature.binary"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|signature
argument_list|)
expr_stmt|;
name|verifyContentWithSeparateSignature
argument_list|(
name|message
argument_list|,
name|signature
argument_list|,
literal|"rsa"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CryptoCmsSignatureInvalidContentHashException
operator|.
name|class
argument_list|)
DECL|method|verifyContentWithSeparateSignatureWrongContent ()
specifier|public
name|void
name|verifyContentWithSeparateSignatureWrongContent
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|message
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"Wrong Message"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|signature
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"detached_signature.binary"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|signature
argument_list|)
expr_stmt|;
name|verifyContentWithSeparateSignature
argument_list|(
name|message
argument_list|,
name|signature
argument_list|,
literal|"rsa"
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyContentWithSeparateSignature (InputStream content, InputStream signature, String alias)
specifier|private
name|void
name|verifyContentWithSeparateSignature
parameter_list|(
name|InputStream
name|content
parameter_list|,
name|InputStream
name|signature
parameter_list|,
name|String
name|alias
parameter_list|)
throws|throws
name|Exception
block|{
name|DefaultSignedDataVerifierConfiguration
name|verifierConf
init|=
name|getCryptoCmsSignedDataVerifierConf
argument_list|(
literal|"system.jks"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|alias
argument_list|)
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
decl_stmt|;
name|SignedDataVerifier
name|verifier
init|=
operator|new
name|SignedDataVerifierFromHeader
argument_list|(
name|verifierConf
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|ExchangeUtil
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|CryptoCmsConstants
operator|.
name|CAMEL_CRYPTO_CMS_SIGNED_DATA
argument_list|,
name|signature
argument_list|)
expr_stmt|;
name|verifier
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyWithServeralAliases ()
specifier|public
name|void
name|verifyWithServeralAliases
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyDetachedSignatureWithKeystore
argument_list|(
literal|"system.jks"
argument_list|,
literal|"rsa"
argument_list|,
literal|"rsa2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyWithServeralAliasesOneWithNoEntryInKeystore ()
specifier|public
name|void
name|verifyWithServeralAliasesOneWithNoEntryInKeystore
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyDetachedSignatureWithKeystore
argument_list|(
literal|"system.jks"
argument_list|,
literal|"noEntry"
argument_list|,
literal|"rsa"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CryptoCmsException
operator|.
name|class
argument_list|)
DECL|method|verifyWithEmptyAlias ()
specifier|public
name|void
name|verifyWithEmptyAlias
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyDetachedSignatureWithKeystore
argument_list|(
literal|"system.jks"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CryptoCmsNoCertificateForSignerInfoException
operator|.
name|class
argument_list|)
DECL|method|verifyDetachedSignatureWithAliasNotFittingToSigner ()
specifier|public
name|void
name|verifyDetachedSignatureWithAliasNotFittingToSigner
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyDetachedSignatureWithKeystore
argument_list|(
literal|"system.jks"
argument_list|,
literal|"rsa2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CryptoCmsNoCertificateForSignerInfosException
operator|.
name|class
argument_list|)
DECL|method|verifyDetachedSignatureWithAliasNotFittingToSignerWithVerifiyAllSignaturesFalse ()
specifier|public
name|void
name|verifyDetachedSignatureWithAliasNotFittingToSignerWithVerifiyAllSignaturesFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyDetachedSignatureWithKeystore
argument_list|(
literal|"system.jks"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|,
literal|"rsa2"
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyDetachedSignatureWithKeystore (String keystoreName, String... aliases)
specifier|private
name|void
name|verifyDetachedSignatureWithKeystore
parameter_list|(
name|String
name|keystoreName
parameter_list|,
name|String
modifier|...
name|aliases
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|CryptoCmsException
throws|,
name|Exception
block|{
name|verifyDetachedSignatureWithKeystore
argument_list|(
name|keystoreName
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|aliases
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyDetachedSignatureWithKeystore (String keystoreName, Boolean verifyAllSignatures, String... aliases)
specifier|private
name|void
name|verifyDetachedSignatureWithKeystore
parameter_list|(
name|String
name|keystoreName
parameter_list|,
name|Boolean
name|verifyAllSignatures
parameter_list|,
name|String
modifier|...
name|aliases
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|CryptoCmsException
throws|,
name|Exception
block|{
name|InputStream
name|message
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
literal|"Test Message"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|DefaultSignedDataVerifierConfiguration
name|verifierConf
init|=
name|getCryptoCmsSignedDataVerifierConf
argument_list|(
name|keystoreName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|aliases
argument_list|)
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
decl_stmt|;
name|verifierConf
operator|.
name|setVerifySignaturesOfAllSigners
argument_list|(
name|verifyAllSignatures
argument_list|)
expr_stmt|;
name|verifierConf
operator|.
name|setSignedDataHeaderBase64
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|SignedDataVerifier
name|verifier
init|=
operator|new
name|SignedDataVerifierFromHeader
argument_list|(
name|verifierConf
argument_list|)
decl_stmt|;
name|InputStream
name|signature
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"detached_signature.base64"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|signature
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|ExchangeUtil
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|CryptoCmsConstants
operator|.
name|CAMEL_CRYPTO_CMS_SIGNED_DATA
argument_list|,
name|signature
argument_list|)
expr_stmt|;
name|verifier
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|signatureAndContentSeparatedExplicitMode ()
specifier|public
name|void
name|signatureAndContentSeparatedExplicitMode
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|keystoreName
init|=
literal|"system.jks"
decl_stmt|;
name|String
name|alias
init|=
literal|"rsa"
decl_stmt|;
name|KeyStoreParameters
name|keystore
init|=
name|KeystoreUtil
operator|.
name|getKeyStoreParameters
argument_list|(
name|keystoreName
argument_list|)
decl_stmt|;
name|DefaultSignerInfo
name|signerInfo
init|=
operator|new
name|DefaultSignerInfo
argument_list|()
decl_stmt|;
name|signerInfo
operator|.
name|setIncludeCertificates
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// without certificates,
comment|// optional default value is
comment|// true
name|signerInfo
operator|.
name|setSignatureAlgorithm
argument_list|(
literal|"SHA1withRSA"
argument_list|)
expr_stmt|;
comment|// mandatory
name|signerInfo
operator|.
name|setPrivateKeyAlias
argument_list|(
name|alias
argument_list|)
expr_stmt|;
name|signerInfo
operator|.
name|setKeyStoreParameters
argument_list|(
name|keystore
argument_list|)
expr_stmt|;
name|SignedDataCreatorConfiguration
name|config
init|=
operator|new
name|SignedDataCreatorConfiguration
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
decl_stmt|;
name|config
operator|.
name|setSigner
argument_list|(
name|signerInfo
argument_list|)
expr_stmt|;
name|config
operator|.
name|setIncludeContent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// optional default value is true
name|config
operator|.
name|setToBase64
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|config
operator|.
name|init
argument_list|()
expr_stmt|;
name|SignedDataCreator
name|signer
init|=
operator|new
name|SignedDataCreator
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|String
name|message
init|=
literal|"Test Message"
decl_stmt|;
name|Exchange
name|exchange
init|=
name|ExchangeUtil
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|message
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|signer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|byte
index|[]
name|signature
init|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|CryptoCmsConstants
operator|.
name|CAMEL_CRYPTO_CMS_SIGNED_DATA
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|DefaultSignedDataVerifierConfiguration
name|verifierConf
init|=
name|getCryptoCmsSignedDataVerifierConf
argument_list|(
name|keystoreName
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|alias
argument_list|)
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
decl_stmt|;
name|verifierConf
operator|.
name|setSignedDataHeaderBase64
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|SignedDataVerifier
name|verifier
init|=
operator|new
name|SignedDataVerifierFromHeader
argument_list|(
name|verifierConf
argument_list|)
decl_stmt|;
name|exchange
operator|=
name|ExchangeUtil
operator|.
name|getExchange
argument_list|()
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|message
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|CryptoCmsConstants
operator|.
name|CAMEL_CRYPTO_CMS_SIGNED_DATA
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|signature
argument_list|)
argument_list|)
expr_stmt|;
name|verifier
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|signAndVerifyByDSASigAlgorithm (String sigAlgorithm)
specifier|private
name|void
name|signAndVerifyByDSASigAlgorithm
parameter_list|(
name|String
name|sigAlgorithm
parameter_list|)
throws|throws
name|UnsupportedEncodingException
throws|,
name|Exception
block|{
comment|// digest algorithm is calculated
name|signAndVerify
argument_list|(
literal|"Test Message"
argument_list|,
literal|"system.jks"
argument_list|,
name|sigAlgorithm
argument_list|,
literal|"dsa"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|signAndVerifyByRSASigAlgorithm (String sigAlgorithm)
specifier|private
name|void
name|signAndVerifyByRSASigAlgorithm
parameter_list|(
name|String
name|sigAlgorithm
parameter_list|)
throws|throws
name|UnsupportedEncodingException
throws|,
name|Exception
block|{
comment|// digest algorithm is calculated
name|signAndVerify
argument_list|(
literal|"Test Message"
argument_list|,
literal|"system.jks"
argument_list|,
name|sigAlgorithm
argument_list|,
literal|"rsa"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSigAlgorithmSHADSA ()
specifier|public
name|void
name|testSigAlgorithmSHADSA
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerifyByDSASigAlgorithm
argument_list|(
literal|"SHA1withDSA"
argument_list|)
expr_stmt|;
block|}
comment|// SHA224withDSA
annotation|@
name|Test
DECL|method|testSigAlgorithmSHA224withDSA ()
specifier|public
name|void
name|testSigAlgorithmSHA224withDSA
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerifyByDSASigAlgorithm
argument_list|(
literal|"SHA224withDSA"
argument_list|)
expr_stmt|;
block|}
comment|// SHA256withDSA
annotation|@
name|Test
DECL|method|testSigAlgorithmSHA256withDSA ()
specifier|public
name|void
name|testSigAlgorithmSHA256withDSA
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerifyByDSASigAlgorithm
argument_list|(
literal|"SHA256withDSA"
argument_list|)
expr_stmt|;
block|}
comment|// SHA1withECDSA // ECSDSA keys not supported
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CryptoCmsException
operator|.
name|class
argument_list|)
DECL|method|testSigAlgorithmSHA1withECDSA ()
specifier|public
name|void
name|testSigAlgorithmSHA1withECDSA
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerifyByDSASigAlgorithm
argument_list|(
literal|"SHA1withECDSA"
argument_list|)
expr_stmt|;
block|}
comment|// MD2withRSA
annotation|@
name|Test
DECL|method|testSigAlgorithmMD2withRSA ()
specifier|public
name|void
name|testSigAlgorithmMD2withRSA
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerifyByRSASigAlgorithm
argument_list|(
literal|"MD2withRSA"
argument_list|)
expr_stmt|;
block|}
comment|// MD5/RSA
comment|// MD2withRSA
annotation|@
name|Test
DECL|method|testSigAlgorithmMD5withRSA ()
specifier|public
name|void
name|testSigAlgorithmMD5withRSA
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerifyByRSASigAlgorithm
argument_list|(
literal|"MD5withRSA"
argument_list|)
expr_stmt|;
block|}
comment|// SHA/RSA
annotation|@
name|Test
DECL|method|testSigAlgorithmSHAwithRSA ()
specifier|public
name|void
name|testSigAlgorithmSHAwithRSA
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerifyByRSASigAlgorithm
argument_list|(
literal|"SHA1withRSA"
argument_list|)
expr_stmt|;
comment|// SHA/RSA");
block|}
comment|// SHA224/RSA
annotation|@
name|Test
DECL|method|testSigAlgorithmSHA224withRSA ()
specifier|public
name|void
name|testSigAlgorithmSHA224withRSA
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerifyByRSASigAlgorithm
argument_list|(
literal|"SHA224withRSA"
argument_list|)
expr_stmt|;
block|}
comment|// SHA256/RSA
annotation|@
name|Test
DECL|method|testSigAlgorithmSHA256withRSA ()
specifier|public
name|void
name|testSigAlgorithmSHA256withRSA
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerifyByRSASigAlgorithm
argument_list|(
literal|"SHA256withRSA"
argument_list|)
expr_stmt|;
block|}
comment|// SHA384/RSA
annotation|@
name|Test
DECL|method|testSigAlgorithmSHA384withRSA ()
specifier|public
name|void
name|testSigAlgorithmSHA384withRSA
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerifyByRSASigAlgorithm
argument_list|(
literal|"SHA384withRSA"
argument_list|)
expr_stmt|;
block|}
comment|// SHA512/RSA
annotation|@
name|Test
DECL|method|testSigAlgorithmSHA512withRSA ()
specifier|public
name|void
name|testSigAlgorithmSHA512withRSA
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerifyByRSASigAlgorithm
argument_list|(
literal|"SHA512withRSA"
argument_list|)
expr_stmt|;
block|}
comment|// RIPEMD160/RSA
annotation|@
name|Test
DECL|method|testSigAlgorithmRIPEMD160withRSA ()
specifier|public
name|void
name|testSigAlgorithmRIPEMD160withRSA
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerifyByRSASigAlgorithm
argument_list|(
literal|"RIPEMD160withRSA"
argument_list|)
expr_stmt|;
block|}
comment|// RIPEMD128/RSA
annotation|@
name|Test
DECL|method|testSigAlgorithmRIPEMD128withRSA ()
specifier|public
name|void
name|testSigAlgorithmRIPEMD128withRSA
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerifyByRSASigAlgorithm
argument_list|(
literal|"RIPEMD128withRSA"
argument_list|)
expr_stmt|;
block|}
comment|// RIPEMD256/RSA
annotation|@
name|Test
DECL|method|testSigAlgorithmRIPEMD256withRSA ()
specifier|public
name|void
name|testSigAlgorithmRIPEMD256withRSA
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerifyByRSASigAlgorithm
argument_list|(
literal|"RIPEMD256withRSA"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CryptoCmsInvalidKeyException
operator|.
name|class
argument_list|)
DECL|method|testSigAlgorithmDoesnotFitToDSAPrivateKey ()
specifier|public
name|void
name|testSigAlgorithmDoesnotFitToDSAPrivateKey
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerifyByDSASigAlgorithm
argument_list|(
literal|"RIPEMD128withRSA"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CryptoCmsInvalidKeyException
operator|.
name|class
argument_list|)
DECL|method|testSigAlgorithmDoesnotFitToRSAPrivateKey ()
specifier|public
name|void
name|testSigAlgorithmDoesnotFitToRSAPrivateKey
parameter_list|()
throws|throws
name|Exception
block|{
name|signAndVerifyByRSASigAlgorithm
argument_list|(
literal|"SHA224withDSA"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

