begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.schematron.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|schematron
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Templates
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|schematron
operator|.
name|constant
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|schematron
operator|.
name|exception
operator|.
name|SchematronConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class generating Templates for a given schematron rules  */
end_comment

begin_class
DECL|class|TemplatesFactory
specifier|public
specifier|final
class|class
name|TemplatesFactory
block|{
DECL|field|LINE_NUMBERING
specifier|private
specifier|static
specifier|final
name|String
name|LINE_NUMBERING
init|=
literal|"http://saxon.sf.net/feature/linenumbering"
decl_stmt|;
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|TemplatesFactory
name|INSTANCE
init|=
operator|new
name|TemplatesFactory
argument_list|()
decl_stmt|;
DECL|field|PIPELINE
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|PIPELINE
init|=
operator|new
name|String
index|[]
block|{
literal|"iso_dsdl_include.xsl"
block|,
literal|"iso_abstract_expand.xsl"
block|,
literal|"iso_svrl_for_xslt2.xsl"
block|}
decl_stmt|;
DECL|field|logger
specifier|private
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TemplatesFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Singleton constructor;      *      * @return      */
DECL|method|newInstance ()
specifier|public
specifier|static
name|TemplatesFactory
name|newInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
comment|/**      * Returns an instance of compiled schematron templates.      *      * @return      */
DECL|method|newTemplates (final InputStream rules)
specifier|public
name|Templates
name|newTemplates
parameter_list|(
specifier|final
name|InputStream
name|rules
parameter_list|)
block|{
name|TransformerFactory
name|fac
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|fac
operator|.
name|setURIResolver
argument_list|(
operator|new
name|ClassPathURIResolver
argument_list|(
name|Constants
operator|.
name|SCHEMATRON_TEMPLATES_ROOT_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|fac
operator|.
name|setAttribute
argument_list|(
name|LINE_NUMBERING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|getTemplates
argument_list|(
name|rules
argument_list|,
name|fac
argument_list|)
return|;
block|}
comment|/**      * Generate the schematron template for given rule.      *      * @param rules the schematron rules      * @param fac   the transformer factory.      * @return schematron template.      */
DECL|method|getTemplates (InputStream rules, TransformerFactory fac)
specifier|private
name|Templates
name|getTemplates
parameter_list|(
name|InputStream
name|rules
parameter_list|,
name|TransformerFactory
name|fac
parameter_list|)
block|{
name|Node
name|node
init|=
literal|null
decl_stmt|;
name|Source
name|source
init|=
operator|new
name|StreamSource
argument_list|(
name|rules
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|template
range|:
name|PIPELINE
control|)
block|{
name|Source
name|xsl
init|=
operator|new
name|StreamSource
argument_list|(
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
name|Constants
operator|.
name|SCHEMATRON_TEMPLATES_ROOT_DIR
operator|.
name|concat
argument_list|(
name|File
operator|.
name|separator
argument_list|)
operator|.
name|concat
argument_list|(
name|template
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Transformer
name|t
init|=
name|fac
operator|.
name|newTransformer
argument_list|(
name|xsl
argument_list|)
decl_stmt|;
name|DOMResult
name|result
init|=
operator|new
name|DOMResult
argument_list|()
decl_stmt|;
name|t
operator|.
name|transform
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|DOMSource
argument_list|(
name|node
operator|=
name|result
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|fac
operator|.
name|newTemplates
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|node
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SchematronConfigException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

