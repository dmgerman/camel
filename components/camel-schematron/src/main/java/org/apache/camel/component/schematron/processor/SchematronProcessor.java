begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.schematron.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|schematron
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Templates
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|schematron
operator|.
name|exception
operator|.
name|SchematronValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_comment
comment|/**  * The schematoron Engine. Validates an XML for given scheamtron rules using an XSLT implementation of the Schematron  * Engine.  *<p/>  */
end_comment

begin_class
DECL|class|SchematronProcessor
specifier|public
class|class
name|SchematronProcessor
block|{
DECL|field|logger
specifier|private
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SchematronProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|reader
specifier|private
name|XMLReader
name|reader
decl_stmt|;
DECL|field|templates
specifier|private
name|Templates
name|templates
decl_stmt|;
comment|/**      * Constructor setting the XSLT schematron templates.      *      * @param reader      * @param templates      */
DECL|method|SchematronProcessor (XMLReader reader, Templates templates)
specifier|public
name|SchematronProcessor
parameter_list|(
name|XMLReader
name|reader
parameter_list|,
name|Templates
name|templates
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|templates
operator|=
name|templates
expr_stmt|;
block|}
comment|/**      * Validates the given XML for given Rules.      *      * @param xml      * @return      */
DECL|method|validate (final String xml)
specifier|public
name|String
name|validate
parameter_list|(
specifier|final
name|String
name|xml
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Source
name|source
init|=
operator|new
name|SAXSource
argument_list|(
name|reader
argument_list|,
operator|new
name|InputSource
argument_list|(
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|xml
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|templates
operator|.
name|newTransformer
argument_list|()
operator|.
name|transform
argument_list|(
name|source
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|writer
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SchematronValidationException
argument_list|(
literal|"Failed to apply Schematron validation transform"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

