begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.schematron
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|schematron
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Templates
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|saxon
operator|.
name|TransformerFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|schematron
operator|.
name|constant
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|schematron
operator|.
name|processor
operator|.
name|ClassPathURIResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|schematron
operator|.
name|processor
operator|.
name|TemplatesFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Schematron Producer Unit Test.  */
end_comment

begin_class
DECL|class|SchematronProducerTest
specifier|public
class|class
name|SchematronProducerTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|producer
specifier|private
specifier|static
name|SchematronProducer
name|producer
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUP ()
specifier|public
specifier|static
name|void
name|setUP
parameter_list|()
block|{
name|SchematronEndpoint
name|endpoint
init|=
operator|new
name|SchematronEndpoint
argument_list|()
decl_stmt|;
name|TransformerFactory
name|fac
init|=
operator|new
name|TransformerFactoryImpl
argument_list|()
decl_stmt|;
name|fac
operator|.
name|setURIResolver
argument_list|(
operator|new
name|ClassPathURIResolver
argument_list|(
name|Constants
operator|.
name|SCHEMATRON_TEMPLATES_ROOT_DIR
argument_list|,
name|endpoint
operator|.
name|getUriResolver
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Templates
name|templates
init|=
name|TemplatesFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|getTemplates
argument_list|(
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
literal|"sch/schematron-1.sch"
argument_list|)
argument_list|,
name|fac
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setRules
argument_list|(
name|templates
argument_list|)
expr_stmt|;
name|producer
operator|=
operator|new
name|SchematronProducer
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessValidXML ()
specifier|public
name|void
name|testProcessValidXML
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exc
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|,
name|ExchangePattern
operator|.
name|InOut
argument_list|)
decl_stmt|;
name|exc
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
literal|"xml/article-1.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// process xml payload
name|producer
operator|.
name|process
argument_list|(
name|exc
argument_list|)
expr_stmt|;
comment|// assert
name|assertTrue
argument_list|(
name|exc
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Constants
operator|.
name|VALIDATION_STATUS
argument_list|)
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessInValidXML ()
specifier|public
name|void
name|testProcessInValidXML
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exc
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|,
name|ExchangePattern
operator|.
name|InOut
argument_list|)
decl_stmt|;
name|exc
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
literal|"xml/article-2.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// process xml payload
name|producer
operator|.
name|process
argument_list|(
name|exc
argument_list|)
expr_stmt|;
comment|// assert
name|assertTrue
argument_list|(
name|exc
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Constants
operator|.
name|VALIDATION_STATUS
argument_list|)
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|FAILED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessValidXMLAsSource ()
specifier|public
name|void
name|testProcessValidXMLAsSource
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exc
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|,
name|ExchangePattern
operator|.
name|InOut
argument_list|)
decl_stmt|;
name|exc
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
operator|new
name|SAXSource
argument_list|(
name|getXMLReader
argument_list|()
argument_list|,
operator|new
name|InputSource
argument_list|(
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
literal|"xml/article-1.xml"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// process xml payload
name|producer
operator|.
name|process
argument_list|(
name|exc
argument_list|)
expr_stmt|;
comment|// assert
name|assertTrue
argument_list|(
name|exc
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Constants
operator|.
name|VALIDATION_STATUS
argument_list|)
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessInValidXMLAsSource ()
specifier|public
name|void
name|testProcessInValidXMLAsSource
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exc
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|,
name|ExchangePattern
operator|.
name|InOut
argument_list|)
decl_stmt|;
name|exc
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
operator|new
name|SAXSource
argument_list|(
name|getXMLReader
argument_list|()
argument_list|,
operator|new
name|InputSource
argument_list|(
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
literal|"xml/article-2.xml"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// process xml payload
name|producer
operator|.
name|process
argument_list|(
name|exc
argument_list|)
expr_stmt|;
comment|// assert
name|assertTrue
argument_list|(
name|exc
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Constants
operator|.
name|VALIDATION_STATUS
argument_list|)
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|FAILED
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getXMLReader ()
specifier|private
specifier|static
name|XMLReader
name|getXMLReader
parameter_list|()
throws|throws
name|ParserConfigurationException
throws|,
name|SAXException
block|{
specifier|final
name|SAXParserFactory
name|fac
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|fac
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|SAXParser
name|parser
init|=
name|fac
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|XMLReader
name|reader
init|=
name|parser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
return|return
name|reader
return|;
block|}
block|}
end_class

end_unit

