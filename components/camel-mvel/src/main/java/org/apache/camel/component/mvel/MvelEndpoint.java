begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mvel
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mvel
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ResourceEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|IOConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mvel2
operator|.
name|ParserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mvel2
operator|.
name|templates
operator|.
name|CompiledTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mvel2
operator|.
name|templates
operator|.
name|TemplateCompiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mvel2
operator|.
name|templates
operator|.
name|TemplateRuntime
import|;
end_import

begin_comment
comment|/**  * Transforms the message using a MVEL template.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.12.0"
argument_list|,
name|scheme
operator|=
literal|"mvel"
argument_list|,
name|title
operator|=
literal|"MVEL"
argument_list|,
name|syntax
operator|=
literal|"mvel:resourceUri"
argument_list|,
name|producerOnly
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"transformation,script"
argument_list|)
DECL|class|MvelEndpoint
specifier|public
class|class
name|MvelEndpoint
extends|extends
name|ResourceEndpoint
block|{
annotation|@
name|UriParam
DECL|field|encoding
specifier|private
name|String
name|encoding
decl_stmt|;
DECL|field|template
specifier|private
specifier|volatile
name|String
name|template
decl_stmt|;
DECL|field|compiled
specifier|private
specifier|volatile
name|CompiledTemplate
name|compiled
decl_stmt|;
DECL|method|MvelEndpoint (String uri, MvelComponent component, String resourceUri)
specifier|public
name|MvelEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|MvelComponent
name|component
parameter_list|,
name|String
name|resourceUri
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|,
name|resourceUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getExchangePattern ()
specifier|public
name|ExchangePattern
name|getExchangePattern
parameter_list|()
block|{
return|return
name|ExchangePattern
operator|.
name|InOut
return|;
block|}
annotation|@
name|Override
DECL|method|createEndpointUri ()
specifier|protected
name|String
name|createEndpointUri
parameter_list|()
block|{
return|return
literal|"mvel:"
operator|+
name|getResourceUri
argument_list|()
return|;
block|}
DECL|method|getEncoding ()
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|encoding
return|;
block|}
comment|/**      * Character encoding of the resource content.      */
DECL|method|setEncoding (String encoding)
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onExchange (Exchange exchange)
specifier|protected
name|void
name|onExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|path
init|=
name|getResourceUri
argument_list|()
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|path
argument_list|,
literal|"resourceUri"
argument_list|)
expr_stmt|;
name|String
name|newResourceUri
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MvelConstants
operator|.
name|MVEL_RESOURCE_URI
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|newResourceUri
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|MvelConstants
operator|.
name|MVEL_RESOURCE_URI
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"{} set to {} creating new endpoint to handle exchange"
argument_list|,
name|MvelConstants
operator|.
name|MVEL_RESOURCE_URI
argument_list|,
name|newResourceUri
argument_list|)
expr_stmt|;
name|MvelEndpoint
name|newEndpoint
init|=
name|findOrCreateEndpoint
argument_list|(
name|getEndpointUri
argument_list|()
argument_list|,
name|newResourceUri
argument_list|)
decl_stmt|;
name|newEndpoint
operator|.
name|onExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
return|return;
block|}
name|CompiledTemplate
name|compiled
decl_stmt|;
name|ParserContext
name|mvelContext
init|=
name|ParserContext
operator|.
name|create
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|variableMap
init|=
name|ExchangeHelper
operator|.
name|createVariableMap
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MvelConstants
operator|.
name|MVEL_TEMPLATE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
comment|// use content from header
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Mvel content read from header {} for endpoint {}"
argument_list|,
name|MvelConstants
operator|.
name|MVEL_TEMPLATE
argument_list|,
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// remove the header to avoid it being propagated in the routing
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|MvelConstants
operator|.
name|MVEL_TEMPLATE
argument_list|)
expr_stmt|;
name|compiled
operator|=
name|TemplateCompiler
operator|.
name|compileTemplate
argument_list|(
name|content
argument_list|,
name|mvelContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Mvel content read from resource {} with resourceUri: {} for endpoint {}"
argument_list|,
name|getResourceUri
argument_list|()
argument_list|,
name|path
argument_list|,
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// getResourceAsInputStream also considers the content cache
name|Reader
name|reader
init|=
name|getEncoding
argument_list|()
operator|!=
literal|null
condition|?
operator|new
name|InputStreamReader
argument_list|(
name|getResourceAsInputStream
argument_list|()
argument_list|,
name|getEncoding
argument_list|()
argument_list|)
else|:
operator|new
name|InputStreamReader
argument_list|(
name|getResourceAsInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|template
init|=
name|IOConverter
operator|.
name|toString
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|template
operator|.
name|equals
argument_list|(
name|this
operator|.
name|template
argument_list|)
condition|)
block|{
name|this
operator|.
name|template
operator|=
name|template
expr_stmt|;
name|this
operator|.
name|compiled
operator|=
name|TemplateCompiler
operator|.
name|compileTemplate
argument_list|(
name|template
argument_list|,
name|mvelContext
argument_list|)
expr_stmt|;
block|}
name|compiled
operator|=
name|this
operator|.
name|compiled
expr_stmt|;
block|}
comment|// let mvel parse and execute the template
name|log
operator|.
name|debug
argument_list|(
literal|"Mvel is evaluating using mvel context: {}"
argument_list|,
name|variableMap
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|TemplateRuntime
operator|.
name|execute
argument_list|(
name|compiled
argument_list|,
name|mvelContext
argument_list|,
name|variableMap
argument_list|)
decl_stmt|;
comment|// now lets output the results to the exchange
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|out
operator|.
name|setBody
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setHeaders
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setAttachments
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getAttachments
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|findOrCreateEndpoint (String uri, String newResourceUri)
specifier|public
name|MvelEndpoint
name|findOrCreateEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|newResourceUri
parameter_list|)
block|{
name|String
name|newUri
init|=
name|uri
operator|.
name|replace
argument_list|(
name|getResourceUri
argument_list|()
argument_list|,
name|newResourceUri
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Getting endpoint with URI: {}"
argument_list|,
name|newUri
argument_list|)
expr_stmt|;
return|return
name|getCamelContext
argument_list|()
operator|.
name|getEndpoint
argument_list|(
name|newUri
argument_list|,
name|MvelEndpoint
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

