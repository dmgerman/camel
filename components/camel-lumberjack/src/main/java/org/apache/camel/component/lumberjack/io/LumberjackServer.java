begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.lumberjack.io
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lumberjack
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelOption
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DefaultEventExecutorGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EventExecutorGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class defines the Lumberjack server that will receive Lumberjack messages  */
end_comment

begin_class
DECL|class|LumberjackServer
specifier|public
specifier|final
class|class
name|LumberjackServer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LumberjackServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|WORKER_THREADS
specifier|private
specifier|static
specifier|final
name|int
name|WORKER_THREADS
init|=
literal|16
decl_stmt|;
DECL|field|host
specifier|private
specifier|final
name|String
name|host
decl_stmt|;
DECL|field|port
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
DECL|field|sslContext
specifier|private
specifier|final
name|SSLContext
name|sslContext
decl_stmt|;
DECL|field|threadFactory
specifier|private
specifier|final
name|ThreadFactory
name|threadFactory
decl_stmt|;
DECL|field|messageProcessor
specifier|private
specifier|final
name|LumberjackMessageProcessor
name|messageProcessor
decl_stmt|;
DECL|field|executorService
specifier|private
name|EventExecutorGroup
name|executorService
decl_stmt|;
DECL|field|bossGroup
specifier|private
name|EventLoopGroup
name|bossGroup
decl_stmt|;
DECL|field|workerGroup
specifier|private
name|EventLoopGroup
name|workerGroup
decl_stmt|;
DECL|field|channel
specifier|private
name|Channel
name|channel
decl_stmt|;
DECL|method|LumberjackServer (String host, int port, SSLContext sslContext, ThreadFactory threadFactory, LumberjackMessageProcessor messageProcessor)
specifier|public
name|LumberjackServer
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|SSLContext
name|sslContext
parameter_list|,
name|ThreadFactory
name|threadFactory
parameter_list|,
name|LumberjackMessageProcessor
name|messageProcessor
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|sslContext
operator|=
name|sslContext
expr_stmt|;
name|this
operator|.
name|threadFactory
operator|=
name|threadFactory
expr_stmt|;
name|this
operator|.
name|messageProcessor
operator|=
name|messageProcessor
expr_stmt|;
block|}
comment|/**      * Starts the server.      *      * @throws InterruptedException when interrupting while connecting the socket      */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting the LUMBERJACK server (host={}, port={})."
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
comment|// Create the group that will listen for incoming connections
name|bossGroup
operator|=
operator|new
name|NioEventLoopGroup
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Create the group that will process the connections
name|workerGroup
operator|=
operator|new
name|NioEventLoopGroup
argument_list|(
name|WORKER_THREADS
argument_list|)
expr_stmt|;
comment|// Create the executor service that will process the payloads without blocking netty threads
name|executorService
operator|=
operator|new
name|DefaultEventExecutorGroup
argument_list|(
name|WORKER_THREADS
argument_list|,
name|threadFactory
argument_list|)
expr_stmt|;
comment|// Create the channel initializer
name|ChannelHandler
name|initializer
init|=
operator|new
name|LumberjackChannelInitializer
argument_list|(
name|sslContext
argument_list|,
name|executorService
argument_list|,
name|messageProcessor
argument_list|)
decl_stmt|;
comment|// Bootstrap the netty server
name|ServerBootstrap
name|serverBootstrap
init|=
operator|new
name|ServerBootstrap
argument_list|()
comment|//
operator|.
name|group
argument_list|(
name|bossGroup
argument_list|,
name|workerGroup
argument_list|)
comment|//
operator|.
name|channel
argument_list|(
name|NioServerSocketChannel
operator|.
name|class
argument_list|)
comment|//
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_BACKLOG
argument_list|,
literal|100
argument_list|)
comment|//
operator|.
name|childHandler
argument_list|(
name|initializer
argument_list|)
decl_stmt|;
comment|//
comment|// Connect the socket
name|channel
operator|=
name|serverBootstrap
operator|.
name|bind
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
operator|.
name|sync
argument_list|()
operator|.
name|channel
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"LUMBERJACK server is started (host={}, port={})."
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
comment|/**      * Stops the server.      *      * @throws InterruptedException when interrupting while stopping the socket      */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping the LUMBERJACK server (host={}, port={})."
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Wait for the channel to be indeed closed before shutting the groups& service
name|channel
operator|.
name|close
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|bossGroup
operator|.
name|shutdownGracefully
argument_list|()
expr_stmt|;
name|workerGroup
operator|.
name|shutdownGracefully
argument_list|()
expr_stmt|;
name|executorService
operator|.
name|shutdownGracefully
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"LUMBERJACK server is stopped (host={}, port={})."
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

