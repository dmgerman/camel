begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.lumberjack.io
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lumberjack
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Inflater
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|ByteToMessageDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lumberjack
operator|.
name|io
operator|.
name|LumberjackConstants
operator|.
name|FRAME_COMPRESS_HEADER_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lumberjack
operator|.
name|io
operator|.
name|LumberjackConstants
operator|.
name|FRAME_DATA_HEADER_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lumberjack
operator|.
name|io
operator|.
name|LumberjackConstants
operator|.
name|FRAME_HEADER_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lumberjack
operator|.
name|io
operator|.
name|LumberjackConstants
operator|.
name|FRAME_JSON_HEADER_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lumberjack
operator|.
name|io
operator|.
name|LumberjackConstants
operator|.
name|FRAME_WINDOW_HEADER_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lumberjack
operator|.
name|io
operator|.
name|LumberjackConstants
operator|.
name|INT_LENGTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lumberjack
operator|.
name|io
operator|.
name|LumberjackConstants
operator|.
name|TYPE_COMPRESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lumberjack
operator|.
name|io
operator|.
name|LumberjackConstants
operator|.
name|TYPE_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lumberjack
operator|.
name|io
operator|.
name|LumberjackConstants
operator|.
name|TYPE_JSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lumberjack
operator|.
name|io
operator|.
name|LumberjackConstants
operator|.
name|TYPE_WINDOW
import|;
end_import

begin_comment
comment|/**  * Decode lumberjack protocol frames. Support protocol V1 and V2 and frame types D, J, W and C.<br/>  *<p>  * For more info, see:  *<ul>  *<li><a href="https://github.com/elastic/beats">https://github.com/elastic/beats</a></li>  *<li><a href="https://github.com/logstash-plugins/logstash-input-beats/blob/master/PROTOCOL.md">https://github.com/logstash-plugins/logstash-input-beats/blob/master/PROTOCOL.md</a></li>  *<li><a href="https://github.com/elastic/logstash-forwarder/blob/master/PROTOCOL.md">https://github.com/elastic/logstash-forwarder/blob/master/PROTOCOL.md</a></li>  *<li><a href="https://github.com/elastic/libbeat/issues/279">https://github.com/elastic/libbeat/issues/279</a></li>  *</ul>  */
end_comment

begin_class
DECL|class|LumberjackFrameDecoder
specifier|final
class|class
name|LumberjackFrameDecoder
extends|extends
name|ByteToMessageDecoder
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LumberjackFrameDecoder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|sessionHandler
specifier|private
specifier|final
name|LumberjackSessionHandler
name|sessionHandler
decl_stmt|;
DECL|field|jackson
specifier|private
specifier|final
name|ObjectMapper
name|jackson
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
DECL|method|LumberjackFrameDecoder (LumberjackSessionHandler sessionHandler)
name|LumberjackFrameDecoder
parameter_list|(
name|LumberjackSessionHandler
name|sessionHandler
parameter_list|)
block|{
name|this
operator|.
name|sessionHandler
operator|=
name|sessionHandler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|decode (ChannelHandlerContext ctx, ByteBuf in, List<Object> out)
specifier|protected
name|void
name|decode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ByteBuf
name|in
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|out
parameter_list|)
throws|throws
name|Exception
block|{
comment|// mark the reader index to be able to start decoding from the same position if there is not enough data to finish the frame decoding
name|in
operator|.
name|markReaderIndex
argument_list|()
expr_stmt|;
name|boolean
name|frameDecoded
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|in
operator|.
name|isReadable
argument_list|(
name|FRAME_HEADER_LENGTH
argument_list|)
condition|)
block|{
return|return;
block|}
name|int
name|frameVersion
init|=
name|in
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
name|sessionHandler
operator|.
name|versionRead
argument_list|(
name|frameVersion
argument_list|)
expr_stmt|;
name|int
name|frameType
init|=
name|in
operator|.
name|readUnsignedByte
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received a lumberjack frame of type {}"
argument_list|,
operator|(
name|char
operator|)
name|frameType
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|frameType
condition|)
block|{
case|case
name|TYPE_JSON
case|:
name|frameDecoded
operator|=
name|handleJsonFrame
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
break|break;
case|case
name|TYPE_DATA
case|:
name|frameDecoded
operator|=
name|handleDataFrame
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
break|break;
case|case
name|TYPE_WINDOW
case|:
name|frameDecoded
operator|=
name|handleWindowFrame
argument_list|(
name|in
argument_list|)
expr_stmt|;
break|break;
case|case
name|TYPE_COMPRESS
case|:
name|frameDecoded
operator|=
name|handleCompressedFrame
argument_list|(
name|ctx
argument_list|,
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported frame type="
operator|+
name|frameType
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|frameDecoded
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not enough data to decode a complete frame, retry when more data is available. Reader index was {}"
argument_list|,
name|in
operator|.
name|readerIndex
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|resetReaderIndex
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleJsonFrame (ByteBuf in, List<Object> out)
specifier|private
name|boolean
name|handleJsonFrame
parameter_list|(
name|ByteBuf
name|in
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|in
operator|.
name|isReadable
argument_list|(
name|FRAME_JSON_HEADER_LENGTH
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|sequenceNumber
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|// read message string and then decode it as JSON
name|String
name|jsonStr
init|=
name|readLengthPrefixedString
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonStr
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Object
name|jsonMessage
init|=
name|jackson
operator|.
name|readValue
argument_list|(
name|jsonStr
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// put message in the pipeline
name|out
operator|.
name|add
argument_list|(
operator|new
name|LumberjackMessage
argument_list|(
name|sequenceNumber
argument_list|,
name|jsonMessage
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|handleDataFrame (ByteBuf in, List<Object> out)
specifier|private
name|boolean
name|handleDataFrame
parameter_list|(
name|ByteBuf
name|in
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|out
parameter_list|)
block|{
if|if
condition|(
operator|!
name|in
operator|.
name|isReadable
argument_list|(
name|FRAME_DATA_HEADER_LENGTH
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|sequenceNumber
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|int
name|entriesCount
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dataMessage
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|entriesCount
operator|--
operator|>
literal|0
condition|)
block|{
name|String
name|key
init|=
name|readLengthPrefixedString
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|value
init|=
name|readLengthPrefixedString
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|dataMessage
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|add
argument_list|(
operator|new
name|LumberjackMessage
argument_list|(
name|sequenceNumber
argument_list|,
name|dataMessage
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|handleWindowFrame (ByteBuf in)
specifier|private
name|boolean
name|handleWindowFrame
parameter_list|(
name|ByteBuf
name|in
parameter_list|)
block|{
if|if
condition|(
operator|!
name|in
operator|.
name|isReadable
argument_list|(
name|FRAME_WINDOW_HEADER_LENGTH
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// update window size
name|sessionHandler
operator|.
name|windowSizeRead
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|handleCompressedFrame (ChannelHandlerContext ctx, ByteBuf in, List<Object> out)
specifier|private
name|boolean
name|handleCompressedFrame
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ByteBuf
name|in
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|out
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|in
operator|.
name|isReadable
argument_list|(
name|FRAME_COMPRESS_HEADER_LENGTH
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|compressedPayloadLength
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|in
operator|.
name|isReadable
argument_list|(
name|compressedPayloadLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// decompress payload
name|Inflater
name|inflater
init|=
operator|new
name|Inflater
argument_list|()
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|inflater
operator|.
name|setInput
argument_list|(
name|in
operator|.
name|array
argument_list|()
argument_list|,
name|in
operator|.
name|arrayOffset
argument_list|()
operator|+
name|in
operator|.
name|readerIndex
argument_list|()
argument_list|,
name|compressedPayloadLength
argument_list|)
expr_stmt|;
name|in
operator|.
name|skipBytes
argument_list|(
name|compressedPayloadLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|array
init|=
operator|new
name|byte
index|[
name|compressedPayloadLength
index|]
decl_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|inflater
operator|.
name|setInput
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|inflater
operator|.
name|finished
argument_list|()
condition|)
block|{
name|ByteBuf
name|decompressed
init|=
name|ctx
operator|.
name|alloc
argument_list|()
operator|.
name|heapBuffer
argument_list|(
literal|1024
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|byte
index|[]
name|outArray
init|=
name|decompressed
operator|.
name|array
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|inflater
operator|.
name|inflate
argument_list|(
name|outArray
argument_list|,
name|decompressed
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|decompressed
operator|.
name|writableBytes
argument_list|()
argument_list|)
decl_stmt|;
name|decompressed
operator|.
name|writerIndex
argument_list|(
name|count
argument_list|)
expr_stmt|;
comment|// put data in the pipeline
name|out
operator|.
name|add
argument_list|(
name|decompressed
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Read a string that is prefixed by its length encoded by a 4 bytes integer.      *      * @param in the buffer to consume      * @return the read string or {@code null} if not enough data available to read the whole string      */
DECL|method|readLengthPrefixedString (ByteBuf in)
specifier|private
name|String
name|readLengthPrefixedString
parameter_list|(
name|ByteBuf
name|in
parameter_list|)
block|{
if|if
condition|(
operator|!
name|in
operator|.
name|isReadable
argument_list|(
name|INT_LENGTH
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|length
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|in
operator|.
name|isReadable
argument_list|(
name|length
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|str
init|=
name|in
operator|.
name|toString
argument_list|(
name|in
operator|.
name|readerIndex
argument_list|()
argument_list|,
name|length
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|in
operator|.
name|skipBytes
argument_list|(
name|length
argument_list|)
expr_stmt|;
return|return
name|str
return|;
block|}
block|}
end_class

end_unit

