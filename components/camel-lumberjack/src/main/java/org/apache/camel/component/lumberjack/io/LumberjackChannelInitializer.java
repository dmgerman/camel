begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.lumberjack.io
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lumberjack
operator|.
name|io
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngine
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|ssl
operator|.
name|SslHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EventExecutorGroup
import|;
end_import

begin_class
DECL|class|LumberjackChannelInitializer
specifier|final
class|class
name|LumberjackChannelInitializer
extends|extends
name|ChannelInitializer
argument_list|<
name|Channel
argument_list|>
block|{
DECL|field|sslContext
specifier|private
specifier|final
name|SSLContext
name|sslContext
decl_stmt|;
DECL|field|messageExecutorService
specifier|private
specifier|final
name|EventExecutorGroup
name|messageExecutorService
decl_stmt|;
DECL|field|messageProcessor
specifier|private
specifier|final
name|LumberjackMessageProcessor
name|messageProcessor
decl_stmt|;
DECL|method|LumberjackChannelInitializer (SSLContext sslContext, EventExecutorGroup messageExecutorService, LumberjackMessageProcessor messageProcessor)
name|LumberjackChannelInitializer
parameter_list|(
name|SSLContext
name|sslContext
parameter_list|,
name|EventExecutorGroup
name|messageExecutorService
parameter_list|,
name|LumberjackMessageProcessor
name|messageProcessor
parameter_list|)
block|{
name|this
operator|.
name|sslContext
operator|=
name|sslContext
expr_stmt|;
name|this
operator|.
name|messageExecutorService
operator|=
name|messageExecutorService
expr_stmt|;
name|this
operator|.
name|messageProcessor
operator|=
name|messageProcessor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initChannel (Channel ch)
specifier|protected
name|void
name|initChannel
parameter_list|(
name|Channel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
name|ChannelPipeline
name|pipeline
init|=
name|ch
operator|.
name|pipeline
argument_list|()
decl_stmt|;
comment|// Add SSL support if configured
if|if
condition|(
name|sslContext
operator|!=
literal|null
condition|)
block|{
name|SSLEngine
name|sslEngine
init|=
name|sslContext
operator|.
name|createSSLEngine
argument_list|()
decl_stmt|;
name|sslEngine
operator|.
name|setUseClientMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
operator|new
name|SslHandler
argument_list|(
name|sslEngine
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LumberjackSessionHandler
name|sessionHandler
init|=
operator|new
name|LumberjackSessionHandler
argument_list|()
decl_stmt|;
comment|// Add the primary lumberjack frame decoder
name|pipeline
operator|.
name|addLast
argument_list|(
operator|new
name|LumberjackFrameDecoder
argument_list|(
name|sessionHandler
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add the secondary lumberjack frame decoder, used when the first one is processing compressed frames
name|pipeline
operator|.
name|addLast
argument_list|(
operator|new
name|LumberjackFrameDecoder
argument_list|(
name|sessionHandler
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add the bridge to Camel
name|pipeline
operator|.
name|addLast
argument_list|(
name|messageExecutorService
argument_list|,
operator|new
name|LumberjackMessageHandler
argument_list|(
name|sessionHandler
argument_list|,
name|messageProcessor
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

