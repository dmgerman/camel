begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.lumberjack.io
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lumberjack
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|embedded
operator|.
name|EmbeddedChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|Unpooled
operator|.
name|buffer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lumberjack
operator|.
name|io
operator|.
name|LumberjackConstants
operator|.
name|TYPE_ACKNOWLEDGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lumberjack
operator|.
name|io
operator|.
name|LumberjackConstants
operator|.
name|VERSION_V2
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|LumberjackChannelInitializerTest
specifier|public
class|class
name|LumberjackChannelInitializerTest
block|{
annotation|@
name|Test
DECL|method|shouldDecodeTwoWindowsWithCompressedMessages ()
specifier|public
name|void
name|shouldDecodeTwoWindowsWithCompressedMessages
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Given a properly configured netty channel
name|List
argument_list|<
name|Object
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|EmbeddedChannel
name|channel
init|=
operator|new
name|EmbeddedChannel
argument_list|(
operator|new
name|LumberjackChannelInitializer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
parameter_list|(
name|payload
parameter_list|,
name|callback
parameter_list|)
lambda|->
block|{
name|messages
operator|.
name|add
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|callback
operator|.
name|onComplete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
argument_list|)
decl_stmt|;
comment|// When writing the stream byte per byte in order to ensure that we support splits everywhere
comment|// It contains 2 windows with compressed messages
name|writeResourceBytePerByte
argument_list|(
name|channel
argument_list|,
literal|"window10"
argument_list|)
expr_stmt|;
name|writeResourceBytePerByte
argument_list|(
name|channel
argument_list|,
literal|"window15"
argument_list|)
expr_stmt|;
comment|// Then we must have 25 messages with only maps
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|messages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// And the first map should contains valid data (we're assuming it's also valid for the other ones)
name|Map
name|first
init|=
operator|(
name|Map
operator|)
name|messages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"log"
argument_list|,
name|first
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/home/qatest/collectNetwork/log/data-integration/00000000-f000-0000-1541-8da26f200001/absorption.log"
argument_list|,
name|first
operator|.
name|get
argument_list|(
literal|"source"
argument_list|)
argument_list|)
expr_stmt|;
comment|// And we should have replied twice (one per window)
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|channel
operator|.
name|outboundMessages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkAck
argument_list|(
operator|(
name|ByteBuf
operator|)
name|channel
operator|.
name|outboundMessages
argument_list|()
operator|.
name|poll
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|checkAck
argument_list|(
operator|(
name|ByteBuf
operator|)
name|channel
operator|.
name|outboundMessages
argument_list|()
operator|.
name|poll
argument_list|()
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
DECL|method|writeResourceBytePerByte (EmbeddedChannel channel, String resource)
specifier|private
name|void
name|writeResourceBytePerByte
parameter_list|(
name|EmbeddedChannel
name|channel
parameter_list|,
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStream
name|stream
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
init|)
block|{
name|int
name|input
decl_stmt|;
while|while
condition|(
operator|(
name|input
operator|=
name|stream
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|ByteBuf
name|buffer
init|=
name|buffer
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|writeByte
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|channel
operator|.
name|writeInbound
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkAck (ByteBuf buf, int sequence)
specifier|private
name|void
name|checkAck
parameter_list|(
name|ByteBuf
name|buf
parameter_list|,
name|int
name|sequence
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"version"
argument_list|,
operator|(
name|short
operator|)
name|VERSION_V2
argument_list|,
name|buf
operator|.
name|readUnsignedByte
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"frame"
argument_list|,
operator|(
name|short
operator|)
name|TYPE_ACKNOWLEDGE
argument_list|,
name|buf
operator|.
name|readUnsignedByte
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sequence"
argument_list|,
name|sequence
argument_list|,
name|buf
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remaining"
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|readableBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

