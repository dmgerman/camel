begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.lumberjack
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|lumberjack
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngine
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|Bootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelInboundHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|ssl
operator|.
name|SslHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|Unpooled
operator|.
name|wrappedBuffer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|LumberjackUtil
specifier|final
class|class
name|LumberjackUtil
block|{
DECL|method|LumberjackUtil ()
specifier|private
name|LumberjackUtil
parameter_list|()
block|{     }
DECL|method|sendMessages (int port, SSLContextParameters sslContextParameters)
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|sendMessages
parameter_list|(
name|int
name|port
parameter_list|,
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|NioEventLoopGroup
name|eventLoopGroup
init|=
operator|new
name|NioEventLoopGroup
argument_list|()
decl_stmt|;
try|try
block|{
comment|// This list will hold the acknowledgment response sequence numbers
name|List
argument_list|<
name|Integer
argument_list|>
name|responses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// This initializer configures the SSL and an acknowledgment recorder
name|ChannelInitializer
argument_list|<
name|Channel
argument_list|>
name|initializer
init|=
operator|new
name|ChannelInitializer
argument_list|<
name|Channel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|initChannel
parameter_list|(
name|Channel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
name|ChannelPipeline
name|pipeline
init|=
name|ch
operator|.
name|pipeline
argument_list|()
decl_stmt|;
if|if
condition|(
name|sslContextParameters
operator|!=
literal|null
condition|)
block|{
name|SSLEngine
name|sslEngine
init|=
name|sslContextParameters
operator|.
name|createSSLContext
argument_list|(
literal|null
argument_list|)
operator|.
name|createSSLEngine
argument_list|()
decl_stmt|;
name|sslEngine
operator|.
name|setUseClientMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
operator|new
name|SslHandler
argument_list|(
name|sslEngine
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add the response recorder
name|pipeline
operator|.
name|addLast
argument_list|(
operator|new
name|SimpleChannelInboundHandler
argument_list|<
name|ByteBuf
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|channelRead0
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ByteBuf
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|msg
operator|.
name|readUnsignedByte
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|'2'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|readUnsignedByte
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|'A'
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|responses
init|)
block|{
name|responses
operator|.
name|add
argument_list|(
name|msg
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// Connect to the server
name|Channel
name|channel
init|=
operator|new
name|Bootstrap
argument_list|()
comment|//
operator|.
name|group
argument_list|(
name|eventLoopGroup
argument_list|)
comment|//
operator|.
name|channel
argument_list|(
name|NioSocketChannel
operator|.
name|class
argument_list|)
comment|//
operator|.
name|handler
argument_list|(
name|initializer
argument_list|)
comment|//
operator|.
name|connect
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|port
argument_list|)
operator|.
name|sync
argument_list|()
operator|.
name|channel
argument_list|()
decl_stmt|;
comment|//
comment|// Send the 2 window frames
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|channel
operator|.
name|writeAndFlush
argument_list|(
name|readSample
argument_list|(
literal|"io/window10"
argument_list|)
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|channel
operator|.
name|writeAndFlush
argument_list|(
name|readSample
argument_list|(
literal|"io/window15"
argument_list|)
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|responses
init|)
block|{
return|return
name|responses
return|;
block|}
block|}
finally|finally
block|{
name|eventLoopGroup
operator|.
name|shutdownGracefully
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|readSample (String resource)
specifier|private
specifier|static
name|ByteBuf
name|readSample
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
try|try
init|(
name|InputStream
name|stream
init|=
name|LumberjackUtil
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
init|)
block|{
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|input
decl_stmt|;
while|while
condition|(
operator|(
name|input
operator|=
name|stream
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
return|return
name|wrappedBuffer
argument_list|(
name|output
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot read sample data"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

