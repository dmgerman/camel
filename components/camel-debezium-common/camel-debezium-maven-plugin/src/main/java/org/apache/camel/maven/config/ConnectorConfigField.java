begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.config
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|config
package|;
end_package

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|config
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|text
operator|.
name|CaseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|config
operator|.
name|ConfigDef
import|;
end_import

begin_comment
comment|// Proxy class for ConfigKey
end_comment

begin_class
DECL|class|ConnectorConfigField
specifier|public
class|class
name|ConnectorConfigField
block|{
DECL|field|fieldDef
specifier|private
specifier|final
name|ConfigDef
operator|.
name|ConfigKey
name|fieldDef
decl_stmt|;
DECL|field|isDeprecated
specifier|private
specifier|final
name|boolean
name|isDeprecated
decl_stmt|;
DECL|field|isRequired
specifier|private
specifier|final
name|boolean
name|isRequired
decl_stmt|;
DECL|field|overrideDefaultValue
specifier|private
specifier|final
name|Object
name|overrideDefaultValue
decl_stmt|;
DECL|method|ConnectorConfigField (final ConfigDef.ConfigKey configKey, final boolean isDeprecated, final boolean isRequired, final Object overrideDefaultValue)
specifier|public
name|ConnectorConfigField
parameter_list|(
specifier|final
name|ConfigDef
operator|.
name|ConfigKey
name|configKey
parameter_list|,
specifier|final
name|boolean
name|isDeprecated
parameter_list|,
specifier|final
name|boolean
name|isRequired
parameter_list|,
specifier|final
name|Object
name|overrideDefaultValue
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|configKey
argument_list|,
literal|"configKey"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|isDeprecated
argument_list|,
literal|"isDeprecated"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|isRequired
argument_list|,
literal|"isRequired"
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldDef
operator|=
name|configKey
expr_stmt|;
name|this
operator|.
name|isDeprecated
operator|=
name|isDeprecated
expr_stmt|;
name|this
operator|.
name|isRequired
operator|=
name|isRequired
expr_stmt|;
name|this
operator|.
name|overrideDefaultValue
operator|=
name|overrideDefaultValue
expr_stmt|;
block|}
DECL|method|getRawName ()
specifier|public
name|String
name|getRawName
parameter_list|()
block|{
return|return
name|fieldDef
operator|.
name|name
return|;
block|}
DECL|method|getFieldName ()
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|getCamelCase
argument_list|(
name|fieldDef
operator|.
name|name
argument_list|)
return|;
block|}
DECL|method|getFieldSetterMethodName ()
specifier|public
name|String
name|getFieldSetterMethodName
parameter_list|()
block|{
return|return
name|getSetterMethodName
argument_list|(
name|fieldDef
operator|.
name|name
argument_list|)
return|;
block|}
DECL|method|getFieldGetterMethodName ()
specifier|public
name|String
name|getFieldGetterMethodName
parameter_list|()
block|{
return|return
name|getGetterMethodName
argument_list|(
name|fieldDef
operator|.
name|name
argument_list|)
return|;
block|}
DECL|method|getRawType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getRawType
parameter_list|()
block|{
return|return
name|getType
argument_list|(
name|fieldDef
operator|.
name|type
argument_list|)
return|;
block|}
DECL|method|getDefaultValue ()
specifier|public
name|Object
name|getDefaultValue
parameter_list|()
block|{
if|if
condition|(
name|overrideDefaultValue
operator|!=
literal|null
condition|)
block|{
return|return
name|overrideDefaultValue
return|;
block|}
return|return
name|fieldDef
operator|.
name|defaultValue
return|;
block|}
DECL|method|getDefaultValueAsString ()
specifier|public
name|String
name|getDefaultValueAsString
parameter_list|()
block|{
return|return
name|getDefaultValueWrappedInString
argument_list|(
name|fieldDef
argument_list|)
return|;
block|}
DECL|method|isInternal ()
specifier|public
name|boolean
name|isInternal
parameter_list|()
block|{
return|return
name|fieldDef
operator|.
name|name
operator|.
name|startsWith
argument_list|(
name|Field
operator|.
name|INTERNAL_PREFIX
argument_list|)
return|;
block|}
DECL|method|isDeprecated ()
specifier|public
name|boolean
name|isDeprecated
parameter_list|()
block|{
return|return
name|isDeprecated
return|;
block|}
DECL|method|isRequired ()
specifier|public
name|boolean
name|isRequired
parameter_list|()
block|{
return|return
name|isRequired
return|;
block|}
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|fieldDef
operator|.
name|documentation
return|;
block|}
DECL|method|getSetterMethodName (final String name)
specifier|private
name|String
name|getSetterMethodName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|getCamelCase
argument_list|(
literal|"set."
operator|+
name|name
argument_list|)
return|;
block|}
DECL|method|getGetterMethodName (final String name)
specifier|private
name|String
name|getGetterMethodName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|getCamelCase
argument_list|(
literal|"get."
operator|+
name|name
argument_list|)
return|;
block|}
DECL|method|getCamelCase (final String name)
specifier|private
name|String
name|getCamelCase
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|CaseUtils
operator|.
name|toCamelCase
argument_list|(
name|name
argument_list|,
literal|false
argument_list|,
literal|'.'
argument_list|)
return|;
block|}
DECL|method|getType (final ConfigDef.Type type)
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|getType
parameter_list|(
specifier|final
name|ConfigDef
operator|.
name|Type
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INT
case|:
return|return
name|Integer
operator|.
name|TYPE
return|;
case|case
name|SHORT
case|:
return|return
name|Short
operator|.
name|TYPE
return|;
case|case
name|DOUBLE
case|:
return|return
name|Double
operator|.
name|TYPE
return|;
case|case
name|STRING
case|:
case|case
name|PASSWORD
case|:
case|case
name|CLASS
case|:
case|case
name|LIST
case|:
return|return
name|String
operator|.
name|class
return|;
case|case
name|BOOLEAN
case|:
return|return
name|Boolean
operator|.
name|TYPE
return|;
case|case
name|LONG
case|:
return|return
name|Long
operator|.
name|TYPE
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Type '%s' is not supported"
argument_list|,
name|type
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|getDefaultValueWrappedInString (final ConfigDef.ConfigKey field)
specifier|private
name|String
name|getDefaultValueWrappedInString
parameter_list|(
specifier|final
name|ConfigDef
operator|.
name|ConfigKey
name|field
parameter_list|)
block|{
if|if
condition|(
name|getDefaultValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|type
argument_list|()
operator|==
name|ConfigDef
operator|.
name|Type
operator|.
name|STRING
operator|||
name|field
operator|.
name|type
argument_list|()
operator|==
name|ConfigDef
operator|.
name|Type
operator|.
name|PASSWORD
operator|||
name|field
operator|.
name|type
argument_list|()
operator|==
name|ConfigDef
operator|.
name|Type
operator|.
name|CLASS
condition|)
block|{
if|if
condition|(
name|getDefaultValue
argument_list|()
operator|instanceof
name|Class
condition|)
block|{
return|return
literal|"\""
operator|+
operator|(
operator|(
name|Class
operator|)
name|getDefaultValue
argument_list|()
operator|)
operator|.
name|getName
argument_list|()
operator|+
literal|"\""
return|;
block|}
return|return
literal|"\""
operator|+
name|getDefaultValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
return|;
block|}
return|return
name|getDefaultValue
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

