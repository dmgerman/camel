begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.config
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|config
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|config
operator|.
name|ConfigDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|ConnectorConfigFieldsFactoryTest
specifier|public
class|class
name|ConnectorConfigFieldsFactoryTest
block|{
annotation|@
name|Test
DECL|method|testIfCreatesFieldsMapWithDeprecatedFields ()
specifier|public
name|void
name|testIfCreatesFieldsMapWithDeprecatedFields
parameter_list|()
block|{
specifier|final
name|ConfigDef
name|configDef
init|=
operator|new
name|ConfigDef
argument_list|()
operator|.
name|define
argument_list|(
literal|"test.field.1"
argument_list|,
name|ConfigDef
operator|.
name|Type
operator|.
name|STRING
argument_list|,
name|ConfigDef
operator|.
name|Importance
operator|.
name|MEDIUM
argument_list|,
literal|"docs1"
argument_list|)
operator|.
name|define
argument_list|(
literal|"test.field.2"
argument_list|,
name|ConfigDef
operator|.
name|Type
operator|.
name|CLASS
argument_list|,
name|ConfigDef
operator|.
name|Importance
operator|.
name|MEDIUM
argument_list|,
literal|"docs2"
argument_list|)
operator|.
name|define
argument_list|(
literal|"test.field.3"
argument_list|,
name|ConfigDef
operator|.
name|Type
operator|.
name|PASSWORD
argument_list|,
name|ConfigDef
operator|.
name|Importance
operator|.
name|MEDIUM
argument_list|,
literal|"doc3"
argument_list|)
operator|.
name|define
argument_list|(
literal|"test.field.4"
argument_list|,
name|ConfigDef
operator|.
name|Type
operator|.
name|INT
argument_list|,
name|ConfigDef
operator|.
name|Importance
operator|.
name|MEDIUM
argument_list|,
literal|"doc4"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|deprecatedFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"test.field.2"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|requiredFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"test.field.1"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|overridenFields
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"test.field.1"
argument_list|,
literal|"I am overriden"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ConnectorConfigField
argument_list|>
name|connectorConfigToField
init|=
name|ConnectorConfigFieldsFactory
operator|.
name|createConnectorFieldsAsMap
argument_list|(
name|configDef
argument_list|,
name|deprecatedFields
argument_list|,
name|requiredFields
argument_list|,
name|overridenFields
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|connectorConfigToField
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ConnectorConfigField
name|connectorConfigField1
init|=
name|connectorConfigToField
operator|.
name|get
argument_list|(
literal|"test.field.1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testField1"
argument_list|,
name|connectorConfigField1
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"I am overriden"
argument_list|,
name|connectorConfigField1
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|connectorConfigField1
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|connectorConfigField1
operator|.
name|isDeprecated
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ConnectorConfigField
name|connectorConfigField2
init|=
name|connectorConfigToField
operator|.
name|get
argument_list|(
literal|"test.field.2"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|connectorConfigField2
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|connectorConfigField2
operator|.
name|isDeprecated
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

