begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven.config
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|config
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|config
operator|.
name|CommonConnectorConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|connector
operator|.
name|mysql
operator|.
name|MySqlConnector
import|;
end_import

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|connector
operator|.
name|mysql
operator|.
name|MySqlConnectorConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|relational
operator|.
name|RelationalDatabaseConnectorConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|relational
operator|.
name|history
operator|.
name|FileDatabaseHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|connect
operator|.
name|source
operator|.
name|SourceConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|ConnectorConfigGeneratorTest
specifier|public
class|class
name|ConnectorConfigGeneratorTest
block|{
annotation|@
name|Test
DECL|method|testIfCorrectlyGeneratedMySQLFile ()
specifier|public
name|void
name|testIfCorrectlyGeneratedMySQLFile
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|requiredFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|MySqlConnectorConfig
operator|.
name|PASSWORD
operator|.
name|name
argument_list|()
argument_list|,
name|RelationalDatabaseConnectorConfig
operator|.
name|SERVER_NAME
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|overrideFields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|overrideFields
operator|.
name|put
argument_list|(
name|MySqlConnectorConfig
operator|.
name|DATABASE_HISTORY
operator|.
name|name
argument_list|()
argument_list|,
name|FileDatabaseHistory
operator|.
name|class
argument_list|)
expr_stmt|;
name|overrideFields
operator|.
name|put
argument_list|(
name|CommonConnectorConfig
operator|.
name|TOMBSTONES_ON_DELETE
operator|.
name|name
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|overrideFields
operator|.
name|put
argument_list|(
name|MySqlConnectorConfig
operator|.
name|SERVER_ID
operator|.
name|name
argument_list|()
argument_list|,
literal|1111
argument_list|)
expr_stmt|;
name|testIfCorrectlyGeneratedFile
argument_list|(
operator|new
name|MySqlConnector
argument_list|()
argument_list|,
name|MySqlConnectorConfig
operator|.
name|class
argument_list|,
name|requiredFields
argument_list|,
name|overrideFields
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testIfItHandlesWrongClassInput ()
specifier|public
name|void
name|testIfItHandlesWrongClassInput
parameter_list|()
block|{
specifier|final
name|ConnectorConfigGenerator
name|connectorConfigGenerator
init|=
name|ConnectorConfigGenerator
operator|.
name|create
argument_list|(
operator|new
name|MySqlConnector
argument_list|()
argument_list|,
name|getClass
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
block|}
DECL|method|testIfCorrectlyGeneratedFile (final SourceConnector connector, final Class<?> configClass, final Set<String> requiredFields, final Map<String, Object> overrideFields)
specifier|private
name|void
name|testIfCorrectlyGeneratedFile
parameter_list|(
specifier|final
name|SourceConnector
name|connector
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|configClass
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|requiredFields
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|overrideFields
parameter_list|)
block|{
specifier|final
name|ConnectorConfigGenerator
name|connectorConfigGenerator
init|=
name|ConnectorConfigGenerator
operator|.
name|create
argument_list|(
name|connector
argument_list|,
name|configClass
argument_list|,
name|requiredFields
argument_list|,
name|overrideFields
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ConnectorConfigField
argument_list|>
name|connectorConfigFields
init|=
name|ConnectorConfigFieldsFactory
operator|.
name|createConnectorFieldsAsMap
argument_list|(
name|connector
operator|.
name|config
argument_list|()
argument_list|,
name|configClass
argument_list|,
name|requiredFields
argument_list|,
name|overrideFields
argument_list|)
decl_stmt|;
specifier|final
name|String
name|connectorFieldsAsString
init|=
name|connectorConfigGenerator
operator|.
name|printClassAsString
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|connectorFieldsAsString
argument_list|)
expr_stmt|;
comment|// check if we have all fields
name|connectorConfigFields
operator|.
name|forEach
argument_list|(
parameter_list|(
name|name
parameter_list|,
name|field
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|field
operator|.
name|isDeprecated
argument_list|()
operator|&&
operator|!
name|field
operator|.
name|isInternal
argument_list|()
condition|)
block|{
comment|// check fields names
name|assertTrue
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|connectorFieldsAsString
operator|.
name|contains
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check setters
name|assertTrue
argument_list|(
name|field
operator|.
name|getFieldSetterMethodName
argument_list|()
argument_list|,
name|connectorFieldsAsString
operator|.
name|contains
argument_list|(
name|field
operator|.
name|getFieldSetterMethodName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check getters
name|assertTrue
argument_list|(
name|field
operator|.
name|getFieldGetterMethodName
argument_list|()
argument_list|,
name|connectorFieldsAsString
operator|.
name|contains
argument_list|(
name|field
operator|.
name|getFieldGetterMethodName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

