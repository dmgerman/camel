begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.debezium
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|connect
operator|.
name|data
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|connect
operator|.
name|data
operator|.
name|SchemaBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|connect
operator|.
name|data
operator|.
name|Struct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|DebeziumTypeConverterTest
specifier|public
class|class
name|DebeziumTypeConverterTest
block|{
annotation|@
name|Test
DECL|method|testToMapFromStruct ()
specifier|public
name|void
name|testToMapFromStruct
parameter_list|()
block|{
specifier|final
name|Struct
name|inputValue
init|=
name|createTestStruct
argument_list|(
literal|12
argument_list|,
literal|"test-name"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// convert toMap
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outputValue
init|=
name|DebeziumTypeConverter
operator|.
name|toMap
argument_list|(
name|inputValue
argument_list|)
decl_stmt|;
comment|// assert
name|assertNotNull
argument_list|(
name|outputValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|outputValue
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test-name"
argument_list|,
name|outputValue
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|outputValue
operator|.
name|get
argument_list|(
literal|"extra"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|boolean
operator|)
name|outputValue
operator|.
name|get
argument_list|(
literal|"valid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createTestStruct (final int id, final String name, final boolean valid)
specifier|private
name|Struct
name|createTestStruct
parameter_list|(
specifier|final
name|int
name|id
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|valid
parameter_list|)
block|{
specifier|final
name|Schema
name|schema
init|=
name|SchemaBuilder
operator|.
name|struct
argument_list|()
operator|.
name|field
argument_list|(
literal|"id"
argument_list|,
name|Schema
operator|.
name|INT32_SCHEMA
argument_list|)
operator|.
name|field
argument_list|(
literal|"name"
argument_list|,
name|Schema
operator|.
name|STRING_SCHEMA
argument_list|)
operator|.
name|field
argument_list|(
literal|"valid"
argument_list|,
name|Schema
operator|.
name|BOOLEAN_SCHEMA
argument_list|)
operator|.
name|field
argument_list|(
literal|"extra"
argument_list|,
name|Schema
operator|.
name|STRING_SCHEMA
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Struct
name|value
init|=
operator|new
name|Struct
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|value
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|value
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|value
operator|.
name|put
argument_list|(
literal|"valid"
argument_list|,
name|valid
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

