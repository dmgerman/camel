begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.debezium
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|util
operator|.
name|Collect
import|;
end_import

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|util
operator|.
name|IoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|configuration
operator|.
name|EmbeddedDebeziumConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|configuration
operator|.
name|FileConnectorEmbeddedDebeziumConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|DebeziumConsumerTest
specifier|public
class|class
name|DebeziumConsumerTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|NUMBER_OF_LINES
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_OF_LINES
init|=
literal|5
decl_stmt|;
DECL|field|DEFAULT_DATA_TESTING_FOLDER
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_DATA_TESTING_FOLDER
init|=
literal|"target/data"
decl_stmt|;
DECL|field|TEST_FILE_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_FILE_PATH
init|=
name|createTestingPath
argument_list|(
literal|"camel-debezium-test-file-input.txt"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|TEST_OFFSET_STORE_PATH
specifier|private
specifier|static
specifier|final
name|Path
name|TEST_OFFSET_STORE_PATH
init|=
name|createTestingPath
argument_list|(
literal|"camel-debezium-test-offset-store.txt"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_TOPIC_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_TOPIC_NAME
init|=
literal|"test_name_dummy"
decl_stmt|;
DECL|field|DEFAULT_ROUTE_ID
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_ROUTE_ID
init|=
literal|"foo"
decl_stmt|;
DECL|field|inputFile
specifier|private
name|File
name|inputFile
decl_stmt|;
DECL|field|offsetStore
specifier|private
name|File
name|offsetStore
decl_stmt|;
DECL|field|linesAdded
specifier|private
name|int
name|linesAdded
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
literal|"mock:result"
argument_list|)
DECL|field|to
specifier|private
name|MockEndpoint
name|to
decl_stmt|;
annotation|@
name|Before
DECL|method|beforeEach ()
specifier|public
name|void
name|beforeEach
parameter_list|()
block|{
name|linesAdded
operator|=
literal|0
expr_stmt|;
name|inputFile
operator|=
name|createTestingFile
argument_list|(
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
name|offsetStore
operator|=
name|createTestingFile
argument_list|(
name|TEST_OFFSET_STORE_PATH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|afterEach ()
specifier|public
name|void
name|afterEach
parameter_list|()
block|{
comment|// clean all data files
name|deletePath
argument_list|(
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
name|deletePath
argument_list|(
name|TEST_OFFSET_STORE_PATH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass ()
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
block|{
comment|// make sure to clean all data files
name|deletePath
argument_list|(
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
name|deletePath
argument_list|(
name|TEST_OFFSET_STORE_PATH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|camelShouldConsumeDebeziumMessages ()
specifier|public
name|void
name|camelShouldConsumeDebeziumMessages
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add initial lines to the file
name|appendLinesToSource
argument_list|(
name|NUMBER_OF_LINES
argument_list|)
expr_stmt|;
comment|// assert exchanges
name|to
operator|.
name|expectedMessageCount
argument_list|(
name|linesAdded
argument_list|)
expr_stmt|;
name|to
operator|.
name|expectedHeaderReceived
argument_list|(
name|DebeziumConstants
operator|.
name|HEADER_IDENTIFIER
argument_list|,
name|DEFAULT_TOPIC_NAME
argument_list|)
expr_stmt|;
name|to
operator|.
name|expectedBodiesReceivedInAnyOrder
argument_list|(
literal|"message-1"
argument_list|,
literal|"message-2"
argument_list|,
literal|"message-3"
argument_list|,
literal|"message-4"
argument_list|,
literal|"message-5"
argument_list|)
expr_stmt|;
comment|// verify the first records if they being consumed
name|to
operator|.
name|assertIsSatisfied
argument_list|(
literal|50
argument_list|)
expr_stmt|;
comment|// send another batch
name|appendLinesToSource
argument_list|(
name|NUMBER_OF_LINES
argument_list|)
expr_stmt|;
comment|// assert exchanges again
name|to
operator|.
name|expectedMessageCount
argument_list|(
name|linesAdded
argument_list|)
expr_stmt|;
name|to
operator|.
name|expectedHeaderReceived
argument_list|(
name|DebeziumConstants
operator|.
name|HEADER_IDENTIFIER
argument_list|,
name|DEFAULT_TOPIC_NAME
argument_list|)
expr_stmt|;
name|to
operator|.
name|assertIsSatisfied
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|camelShouldContinueConsumeDebeziumMessagesWhenRouteIsOffline ()
specifier|public
name|void
name|camelShouldContinueConsumeDebeziumMessagesWhenRouteIsOffline
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add initial lines to the file
name|appendLinesToSource
argument_list|(
name|NUMBER_OF_LINES
argument_list|)
expr_stmt|;
comment|// assert exchanges
name|to
operator|.
name|expectedMessageCount
argument_list|(
name|linesAdded
argument_list|)
expr_stmt|;
comment|// verify the first records if they being consumed
name|to
operator|.
name|assertIsSatisfied
argument_list|(
literal|50
argument_list|)
expr_stmt|;
comment|// assert when route if off
name|to
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// stop route
name|context
operator|.
name|getRouteController
argument_list|()
operator|.
name|stopRoute
argument_list|(
name|DEFAULT_ROUTE_ID
argument_list|)
expr_stmt|;
comment|// send a batch while the route is off
name|appendLinesToSource
argument_list|(
name|NUMBER_OF_LINES
argument_list|)
expr_stmt|;
comment|// start route again
name|context
operator|.
name|getRouteController
argument_list|()
operator|.
name|startRoute
argument_list|(
name|DEFAULT_ROUTE_ID
argument_list|)
expr_stmt|;
comment|// assert exchange messages after restarting, it should continue using the offset file
name|to
operator|.
name|expectedMessageCount
argument_list|(
name|NUMBER_OF_LINES
argument_list|)
expr_stmt|;
name|to
operator|.
name|expectedHeaderReceived
argument_list|(
name|DebeziumConstants
operator|.
name|HEADER_IDENTIFIER
argument_list|,
name|DEFAULT_TOPIC_NAME
argument_list|)
expr_stmt|;
name|to
operator|.
name|expectedBodiesReceivedInAnyOrder
argument_list|(
literal|"message-6"
argument_list|,
literal|"message-7"
argument_list|,
literal|"message-8"
argument_list|,
literal|"message-9"
argument_list|,
literal|"message-10"
argument_list|)
expr_stmt|;
name|to
operator|.
name|assertIsSatisfied
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CamelContext
name|context
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
specifier|final
name|DebeziumComponent
name|component
init|=
operator|new
name|DebeziumTestComponent
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|component
operator|.
name|setConfiguration
argument_list|(
name|initConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|addComponent
argument_list|(
literal|"debezium"
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|context
operator|.
name|disableJMX
argument_list|()
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"debezium"
argument_list|)
operator|.
name|to
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|createTestingPath (final String relativePath)
specifier|private
specifier|static
name|Path
name|createTestingPath
parameter_list|(
specifier|final
name|String
name|relativePath
parameter_list|)
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|DEFAULT_DATA_TESTING_FOLDER
argument_list|,
name|relativePath
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
return|;
block|}
DECL|method|createTestingFile (final Path relativePath)
specifier|private
specifier|static
name|File
name|createTestingFile
parameter_list|(
specifier|final
name|Path
name|relativePath
parameter_list|)
block|{
return|return
name|IoUtil
operator|.
name|createFile
argument_list|(
name|relativePath
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
return|;
block|}
DECL|method|deletePath (final Path path)
specifier|private
specifier|static
name|void
name|deletePath
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
name|IoUtil
operator|.
name|delete
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to delete %s"
argument_list|,
name|path
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initConfiguration ()
specifier|private
name|EmbeddedDebeziumConfiguration
name|initConfiguration
parameter_list|()
block|{
specifier|final
name|FileConnectorEmbeddedDebeziumConfiguration
name|configuration
init|=
operator|new
name|FileConnectorEmbeddedDebeziumConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setName
argument_list|(
literal|"test_name_dummy"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setTopicConfig
argument_list|(
name|DEFAULT_TOPIC_NAME
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setOffsetStorageFileName
argument_list|(
name|TEST_OFFSET_STORE_PATH
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setTestFilePath
argument_list|(
name|TEST_FILE_PATH
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setOffsetFlushIntervalMs
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|configuration
return|;
block|}
DECL|method|appendLinesToSource (int numberOfLines)
specifier|private
name|void
name|appendLinesToSource
parameter_list|(
name|int
name|numberOfLines
parameter_list|)
throws|throws
name|IOException
block|{
name|CharSequence
index|[]
name|lines
init|=
operator|new
name|CharSequence
index|[
name|numberOfLines
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|numberOfLines
condition|;
operator|++
name|i
control|)
block|{
name|lines
index|[
name|i
index|]
operator|=
name|generateLine
argument_list|(
name|linesAdded
operator|+
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
operator|.
name|write
argument_list|(
name|inputFile
operator|.
name|toPath
argument_list|()
argument_list|,
name|Collect
operator|.
name|arrayListOf
argument_list|(
name|lines
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|,
name|StandardOpenOption
operator|.
name|APPEND
argument_list|)
expr_stmt|;
name|linesAdded
operator|+=
name|numberOfLines
expr_stmt|;
block|}
DECL|method|generateLine (int lineNumber)
specifier|private
name|String
name|generateLine
parameter_list|(
name|int
name|lineNumber
parameter_list|)
block|{
return|return
literal|"message-"
operator|+
name|lineNumber
return|;
block|}
block|}
end_class

end_unit

