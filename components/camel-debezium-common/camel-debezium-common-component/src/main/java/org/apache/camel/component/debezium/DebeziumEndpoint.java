begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.debezium
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|data
operator|.
name|Envelope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|configuration
operator|.
name|EmbeddedDebeziumConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|connect
operator|.
name|data
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|connect
operator|.
name|data
operator|.
name|Struct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|connect
operator|.
name|errors
operator|.
name|DataException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|connect
operator|.
name|source
operator|.
name|SourceRecord
import|;
end_import

begin_comment
comment|/**  * Base class for debezium endpoint implementation  */
end_comment

begin_class
DECL|class|DebeziumEndpoint
specifier|public
specifier|abstract
class|class
name|DebeziumEndpoint
parameter_list|<
name|C
extends|extends
name|EmbeddedDebeziumConfiguration
parameter_list|>
extends|extends
name|DefaultEndpoint
block|{
DECL|method|DebeziumEndpoint (String uri, DebeziumComponent component)
specifier|protected
name|DebeziumEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|DebeziumComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
DECL|method|DebeziumEndpoint ()
specifier|protected
name|DebeziumEndpoint
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot produce from a DebeziumEndpoint: "
operator|+
name|getEndpointUri
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|DebeziumConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
block|}
DECL|method|createExecutor ()
specifier|public
name|ExecutorService
name|createExecutor
parameter_list|()
block|{
return|return
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newSingleThreadExecutor
argument_list|(
name|this
argument_list|,
literal|"DebeziumConsumer"
argument_list|)
return|;
block|}
DECL|method|createDbzExchange (final SourceRecord record)
specifier|public
name|Exchange
name|createDbzExchange
parameter_list|(
specifier|final
name|SourceRecord
name|record
parameter_list|)
block|{
specifier|final
name|Exchange
name|exchange
init|=
name|super
operator|.
name|createExchange
argument_list|()
decl_stmt|;
specifier|final
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|Schema
name|valueSchema
init|=
name|record
operator|.
name|valueSchema
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|record
operator|.
name|value
argument_list|()
decl_stmt|;
comment|// extract values from SourceRecord
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sourceMetadata
init|=
name|extractSourceMetadataValueFromValueStruct
argument_list|(
name|valueSchema
argument_list|,
name|value
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|operation
init|=
name|extractValueFromValueStruct
argument_list|(
name|valueSchema
argument_list|,
name|value
argument_list|,
name|Envelope
operator|.
name|FieldName
operator|.
name|OPERATION
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|before
init|=
name|extractValueFromValueStruct
argument_list|(
name|valueSchema
argument_list|,
name|value
argument_list|,
name|Envelope
operator|.
name|FieldName
operator|.
name|BEFORE
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|after
init|=
name|extractAfterValueFromValueStruct
argument_list|(
name|valueSchema
argument_list|,
name|value
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|timestamp
init|=
name|extractValueFromValueStruct
argument_list|(
name|valueSchema
argument_list|,
name|value
argument_list|,
name|Envelope
operator|.
name|FieldName
operator|.
name|TIMESTAMP
argument_list|)
decl_stmt|;
comment|// set message headers
name|message
operator|.
name|setHeader
argument_list|(
name|DebeziumConstants
operator|.
name|HEADER_IDENTIFIER
argument_list|,
name|record
operator|.
name|topic
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|DebeziumConstants
operator|.
name|HEADER_KEY
argument_list|,
name|record
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|DebeziumConstants
operator|.
name|HEADER_SOURCE_METADATA
argument_list|,
name|sourceMetadata
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|DebeziumConstants
operator|.
name|HEADER_OPERATION
argument_list|,
name|operation
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|DebeziumConstants
operator|.
name|HEADER_BEFORE
argument_list|,
name|before
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|DebeziumConstants
operator|.
name|HEADER_TIMESTAMP
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
comment|// set 'after' as message body
name|message
operator|.
name|setBody
argument_list|(
name|after
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
specifier|abstract
name|C
name|getConfiguration
parameter_list|()
function_decl|;
DECL|method|setConfiguration (C configuration)
specifier|public
specifier|abstract
name|void
name|setConfiguration
parameter_list|(
name|C
name|configuration
parameter_list|)
function_decl|;
DECL|method|extractSourceMetadataValueFromValueStruct (final Schema schema, final Object value)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|extractSourceMetadataValueFromValueStruct
parameter_list|(
specifier|final
name|Schema
name|schema
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
block|{
comment|// we want to convert metadata to map since it facilitate usage and also struct structure is not needed for the metadata
specifier|final
name|Object
name|valueExtracted
init|=
name|extractValueFromValueStruct
argument_list|(
name|schema
argument_list|,
name|value
argument_list|,
name|Envelope
operator|.
name|FieldName
operator|.
name|SOURCE
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueExtracted
operator|!=
literal|null
condition|)
block|{
return|return
name|DebeziumTypeConverter
operator|.
name|toMap
argument_list|(
operator|(
name|Struct
operator|)
name|valueExtracted
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|extractAfterValueFromValueStruct (final Schema schema, final Object value)
specifier|private
name|Object
name|extractAfterValueFromValueStruct
parameter_list|(
specifier|final
name|Schema
name|schema
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
block|{
comment|// first we try with normal extraction from value struct
specifier|final
name|Object
name|valueExtracted
init|=
name|extractValueFromValueStruct
argument_list|(
name|schema
argument_list|,
name|value
argument_list|,
name|Envelope
operator|.
name|FieldName
operator|.
name|AFTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueExtracted
operator|==
literal|null
operator|&&
operator|!
name|isSchemaAStructSchema
argument_list|(
name|schema
argument_list|)
condition|)
block|{
comment|// we could have anything other than struct, we just return that
return|return
name|value
return|;
block|}
return|return
name|valueExtracted
return|;
block|}
DECL|method|extractValueFromValueStruct (final Schema schema, final Object value, final String fieldName)
specifier|private
name|Object
name|extractValueFromValueStruct
parameter_list|(
specifier|final
name|Schema
name|schema
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|,
specifier|final
name|String
name|fieldName
parameter_list|)
block|{
comment|// first we check if we have a value and a schema of struct type
if|if
condition|(
name|isSchemaAStructSchema
argument_list|(
name|schema
argument_list|)
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
comment|// now we return our desired fieldName
try|try
block|{
specifier|final
name|Struct
name|valueStruct
init|=
operator|(
name|Struct
operator|)
name|value
decl_stmt|;
return|return
name|valueStruct
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DataException
name|e
parameter_list|)
block|{
comment|// we return null instead since this exception thrown when no value set or field doesn't exist
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|isSchemaAStructSchema (final Schema schema)
specifier|private
name|boolean
name|isSchemaAStructSchema
parameter_list|(
specifier|final
name|Schema
name|schema
parameter_list|)
block|{
return|return
name|schema
operator|!=
literal|null
operator|&&
name|schema
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|Schema
operator|.
name|Type
operator|.
name|STRUCT
argument_list|)
return|;
block|}
block|}
end_class

end_unit

