begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_class
DECL|class|SecurityConstraintMappingTest
specifier|public
class|class
name|SecurityConstraintMappingTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
DECL|method|testDefault ()
specifier|public
name|void
name|testDefault
parameter_list|()
block|{
name|SecurityConstraintMapping
name|matcher
init|=
operator|new
name|SecurityConstraintMapping
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFoo ()
specifier|public
name|void
name|testFoo
parameter_list|()
block|{
name|SecurityConstraintMapping
name|matcher
init|=
operator|new
name|SecurityConstraintMapping
argument_list|()
decl_stmt|;
name|matcher
operator|.
name|addInclusion
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFooWildcard ()
specifier|public
name|void
name|testFooWildcard
parameter_list|()
block|{
name|SecurityConstraintMapping
name|matcher
init|=
operator|new
name|SecurityConstraintMapping
argument_list|()
decl_stmt|;
name|matcher
operator|.
name|addInclusion
argument_list|(
literal|"/foo*"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFooBar ()
specifier|public
name|void
name|testFooBar
parameter_list|()
block|{
name|SecurityConstraintMapping
name|matcher
init|=
operator|new
name|SecurityConstraintMapping
argument_list|()
decl_stmt|;
name|matcher
operator|.
name|addInclusion
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|matcher
operator|.
name|addInclusion
argument_list|(
literal|"/bar"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/barbar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/bar/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFooBarWildcard ()
specifier|public
name|void
name|testFooBarWildcard
parameter_list|()
block|{
name|SecurityConstraintMapping
name|matcher
init|=
operator|new
name|SecurityConstraintMapping
argument_list|()
decl_stmt|;
name|matcher
operator|.
name|addInclusion
argument_list|(
literal|"/foo*"
argument_list|)
expr_stmt|;
name|matcher
operator|.
name|addInclusion
argument_list|(
literal|"/bar*"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/barbar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/bar/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFooExclusion ()
specifier|public
name|void
name|testFooExclusion
parameter_list|()
block|{
name|SecurityConstraintMapping
name|matcher
init|=
operator|new
name|SecurityConstraintMapping
argument_list|()
decl_stmt|;
name|matcher
operator|.
name|addInclusion
argument_list|(
literal|"/foo/*"
argument_list|)
expr_stmt|;
name|matcher
operator|.
name|addExclusion
argument_list|(
literal|"/foo/public/*"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foo/public"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foo/public/open"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultExclusion ()
specifier|public
name|void
name|testDefaultExclusion
parameter_list|()
block|{
comment|// everything is restricted unless its from the public
name|SecurityConstraintMapping
name|matcher
init|=
operator|new
name|SecurityConstraintMapping
argument_list|()
decl_stmt|;
name|matcher
operator|.
name|addExclusion
argument_list|(
literal|"/public/*"
argument_list|)
expr_stmt|;
name|matcher
operator|.
name|addExclusion
argument_list|(
literal|"/index"
argument_list|)
expr_stmt|;
name|matcher
operator|.
name|addExclusion
argument_list|(
literal|"/index.html"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/public"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/public/open"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|matcher
operator|.
name|restricted
argument_list|(
literal|"/index.html"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

