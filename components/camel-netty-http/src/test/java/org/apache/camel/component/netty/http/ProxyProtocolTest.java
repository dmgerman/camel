begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ShutdownStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|ProxyProtocolTest
specifier|public
class|class
name|ProxyProtocolTest
block|{
DECL|field|ORIGIN_PORT
specifier|private
specifier|static
specifier|final
name|int
name|ORIGIN_PORT
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|PROXY_PORT
specifier|private
specifier|static
specifier|final
name|int
name|PROXY_PORT
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|DefaultCamelContext
name|context
decl_stmt|;
DECL|field|url
specifier|private
specifier|final
name|String
name|url
decl_stmt|;
DECL|method|ProxyProtocolTest (final Function<RouteBuilder, RouteDefinition> variant, final String url)
specifier|public
name|ProxyProtocolTest
parameter_list|(
specifier|final
name|Function
argument_list|<
name|RouteBuilder
argument_list|,
name|RouteDefinition
argument_list|>
name|variant
parameter_list|,
specifier|final
name|String
name|url
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|context
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// route variation that proxies from http://localhost:port to
comment|// http://localhost:originPort/path
name|variant
operator|.
name|apply
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// origin service that serves `"origin server"` on
comment|// http://localhost:originPort/path
name|from
argument_list|(
literal|"netty-http:http://localhost:"
operator|+
name|ORIGIN_PORT
operator|+
literal|"/path"
argument_list|)
operator|.
name|process
argument_list|(
name|ProxyProtocolTest
operator|::
name|origin
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldProvideProxyProtocolSupport ()
specifier|public
name|void
name|shouldProvideProxyProtocolSupport
parameter_list|()
block|{
specifier|final
name|NettyHttpEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"netty-http:proxy://localhost"
argument_list|,
name|NettyHttpEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isHttpProxy
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldServeAsHttpProxy ()
specifier|public
name|void
name|shouldServeAsHttpProxy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// request for http://test/path will be proxied by http://localhost:port
comment|// and diverted to http://localhost:originPort/path
try|try
init|(
name|InputStream
name|stream
init|=
name|request
argument_list|(
name|url
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|IOUtils
operator|.
name|readLines
argument_list|(
name|stream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
operator|.
name|containsOnly
argument_list|(
literal|"ORIGIN SERVER"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|shouldSupportPostingFormEncodedPayloads ()
specifier|public
name|void
name|shouldSupportPostingFormEncodedPayloads
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|InputStream
name|stream
init|=
name|request
argument_list|(
name|url
argument_list|,
literal|"hello=world"
argument_list|,
name|NettyHttpConstants
operator|.
name|CONTENT_TYPE_WWW_FORM_URLENCODED
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|IOUtils
operator|.
name|readLines
argument_list|(
name|stream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
operator|.
name|containsOnly
argument_list|(
literal|"ORIGIN SERVER: HELLO=WORLD"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|shouldSupportPostingPlaintextPayloads ()
specifier|public
name|void
name|shouldSupportPostingPlaintextPayloads
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|InputStream
name|stream
init|=
name|request
argument_list|(
name|url
argument_list|,
literal|"hello"
argument_list|,
literal|"text/plain"
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|IOUtils
operator|.
name|readLines
argument_list|(
name|stream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
operator|.
name|containsOnly
argument_list|(
literal|"ORIGIN SERVER: HELLO"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|shouldSupportQueryParameters ()
specifier|public
name|void
name|shouldSupportQueryParameters
parameter_list|()
throws|throws
name|Exception
block|{
comment|// request for http://test/path?q=... will be proxied by
comment|// http://localhost:port
comment|// and diverted to http://localhost:originPort/path?q=...
try|try
init|(
name|InputStream
name|stream
init|=
name|request
argument_list|(
name|url
operator|+
literal|"?q=hello"
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|IOUtils
operator|.
name|readLines
argument_list|(
name|stream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
operator|.
name|containsOnly
argument_list|(
literal|"ORIGIN SERVER: HELLO"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|shutdownCamel ()
specifier|public
name|void
name|shutdownCamel
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ShutdownStrategy
name|shutdownStrategy
init|=
name|context
operator|.
name|getShutdownStrategy
argument_list|()
decl_stmt|;
name|shutdownStrategy
operator|.
name|setTimeout
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|shutdownStrategy
operator|.
name|setTimeUnit
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|shutdownStrategy
operator|.
name|shutdownForced
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|getRouteStartupOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameters
DECL|method|routeOptions ()
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|routeOptions
parameter_list|()
block|{
specifier|final
name|Function
argument_list|<
name|RouteBuilder
argument_list|,
name|RouteDefinition
argument_list|>
name|single
init|=
name|r
lambda|->
name|r
operator|.
name|from
argument_list|(
literal|"netty-http:proxy://localhost:"
operator|+
name|PROXY_PORT
argument_list|)
operator|.
name|to
argument_list|(
literal|"netty-http:http://localhost:"
operator|+
name|ORIGIN_PORT
argument_list|)
operator|.
name|process
argument_list|(
name|ProxyProtocolTest
operator|::
name|uppercase
argument_list|)
decl_stmt|;
specifier|final
name|Function
argument_list|<
name|RouteBuilder
argument_list|,
name|RouteDefinition
argument_list|>
name|dynamicPath
init|=
name|r
lambda|->
name|r
operator|.
name|from
argument_list|(
literal|"netty-http:proxy://localhost:"
operator|+
name|PROXY_PORT
argument_list|)
operator|.
name|toD
argument_list|(
literal|"netty-http:http://localhost:"
operator|+
name|ORIGIN_PORT
operator|+
literal|"/${headers."
operator|+
name|Exchange
operator|.
name|HTTP_PATH
operator|+
literal|"}"
argument_list|)
operator|.
name|process
argument_list|(
name|ProxyProtocolTest
operator|::
name|uppercase
argument_list|)
decl_stmt|;
specifier|final
name|Function
argument_list|<
name|RouteBuilder
argument_list|,
name|RouteDefinition
argument_list|>
name|dynamicUrl
init|=
name|r
lambda|->
name|r
operator|.
name|from
argument_list|(
literal|"netty-http:proxy://localhost:"
operator|+
name|PROXY_PORT
argument_list|)
operator|.
name|toD
argument_list|(
literal|"netty-http:"
operator|+
literal|"${headers."
operator|+
name|Exchange
operator|.
name|HTTP_SCHEME
operator|+
literal|"}://"
operator|+
literal|"${headers."
operator|+
name|Exchange
operator|.
name|HTTP_HOST
operator|+
literal|"}:"
operator|+
literal|"${headers."
operator|+
name|Exchange
operator|.
name|HTTP_PORT
operator|+
literal|"}/"
operator|+
literal|"${headers."
operator|+
name|Exchange
operator|.
name|HTTP_PATH
operator|+
literal|"}"
argument_list|)
operator|.
name|process
argument_list|(
name|ProxyProtocolTest
operator|::
name|uppercase
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|single
block|,
literal|"http://test/path"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|dynamicPath
block|,
literal|"http://test/path"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|dynamicUrl
block|,
literal|"http://localhost:"
operator|+
name|ORIGIN_PORT
operator|+
literal|"/path"
block|}
argument_list|)
return|;
block|}
DECL|method|origin (final Exchange exchange)
specifier|private
specifier|static
name|void
name|origin
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|Message
name|message
init|=
name|exchange
operator|.
name|getMessage
argument_list|()
decl_stmt|;
specifier|final
name|String
name|q
init|=
name|message
operator|.
name|getHeader
argument_list|(
literal|"q"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|body
init|=
name|message
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|q
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|body
argument_list|)
condition|)
block|{
name|message
operator|.
name|setBody
argument_list|(
literal|"origin server"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|body
argument_list|)
condition|)
block|{
name|message
operator|.
name|setBody
argument_list|(
literal|"origin server: "
operator|+
name|q
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|setBody
argument_list|(
literal|"origin server: "
operator|+
name|body
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|request (final String url)
specifier|private
specifier|static
name|InputStream
name|request
parameter_list|(
specifier|final
name|String
name|url
parameter_list|)
throws|throws
name|IOException
throws|,
name|MalformedURLException
block|{
specifier|final
name|Proxy
name|proxy
init|=
operator|new
name|Proxy
argument_list|(
name|Proxy
operator|.
name|Type
operator|.
name|HTTP
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|PROXY_PORT
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
operator|new
name|URL
argument_list|(
name|url
argument_list|)
operator|.
name|openConnection
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
comment|// when debugging comment out the following two lines otherwise
comment|// the test will terminate regardless of the execution being
comment|// paused at the breakpoint
name|connection
operator|.
name|setConnectTimeout
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setReadTimeout
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
return|return
name|connection
operator|.
name|getInputStream
argument_list|()
return|;
block|}
DECL|method|request (final String url, final String payload, final String contentType)
specifier|private
specifier|static
name|InputStream
name|request
parameter_list|(
specifier|final
name|String
name|url
parameter_list|,
specifier|final
name|String
name|payload
parameter_list|,
specifier|final
name|String
name|contentType
parameter_list|)
throws|throws
name|IOException
throws|,
name|MalformedURLException
block|{
specifier|final
name|Proxy
name|proxy
init|=
operator|new
name|Proxy
argument_list|(
name|Proxy
operator|.
name|Type
operator|.
name|HTTP
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|PROXY_PORT
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
operator|new
name|URL
argument_list|(
name|url
argument_list|)
operator|.
name|openConnection
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
name|connection
operator|.
name|addRequestProperty
argument_list|(
literal|"Content-Type"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// when debugging comment out the following two lines otherwise
comment|// the test will terminate regardless of the execution being
comment|// paused at the breakpoint
name|connection
operator|.
name|setConnectTimeout
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setReadTimeout
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
try|try
init|(
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|connection
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
init|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
return|return
name|connection
operator|.
name|getInputStream
argument_list|()
return|;
block|}
DECL|method|uppercase (final Exchange exchange)
specifier|private
specifier|static
name|void
name|uppercase
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|Message
name|message
init|=
name|exchange
operator|.
name|getMessage
argument_list|()
decl_stmt|;
specifier|final
name|String
name|body
init|=
name|message
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|body
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

