begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|NettyHttpStreamTest
specifier|public
class|class
name|NettyHttpStreamTest
extends|extends
name|BaseNettyTest
block|{
DECL|field|SIZE
specifier|public
specifier|static
specifier|final
name|long
name|SIZE
init|=
literal|10
operator|*
literal|256
decl_stmt|;
annotation|@
name|Test
DECL|method|testUploadStream ()
specifier|public
name|void
name|testUploadStream
parameter_list|()
block|{
comment|//prepare new request
name|DefaultExchange
name|request
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|request
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
comment|//trigger request
name|Exchange
name|response
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:upstream-call"
argument_list|,
name|request
argument_list|)
decl_stmt|;
comment|//validate response success
name|assertFalse
argument_list|(
literal|"ups"
argument_list|,
name|response
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
comment|//validate request stream at server
name|MockEndpoint
name|mock
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:stream-size"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Long
name|requestSize
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"request size not matching."
argument_list|,
name|SIZE
argument_list|,
name|requestSize
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDownloadStream ()
specifier|public
name|void
name|testDownloadStream
parameter_list|()
block|{
comment|//prepare new request
name|DefaultExchange
name|request
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|request
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
comment|//trigger request
name|Exchange
name|response
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:download-call"
argument_list|,
name|request
argument_list|)
decl_stmt|;
comment|//validate response success
name|assertFalse
argument_list|(
literal|"ups"
argument_list|,
name|response
operator|.
name|isFailed
argument_list|()
argument_list|)
expr_stmt|;
comment|//validate response stream at client
name|assertEquals
argument_list|(
literal|"response size not matching."
argument_list|,
name|SIZE
argument_list|,
name|response
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Long
operator|.
name|class
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:upstream-call"
argument_list|)
operator|.
name|bean
argument_list|(
name|Helper
operator|.
name|class
argument_list|,
literal|"prepareStream"
argument_list|)
operator|.
name|to
argument_list|(
literal|"netty-http:http://localhost:{{port}}/upstream?disableStreamCache=true"
argument_list|)
operator|.
name|log
argument_list|(
literal|"get ${body}"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:download-call"
argument_list|)
operator|.
name|to
argument_list|(
literal|"netty-http:http://localhost:{{port}}/downstream?disableStreamCache=true"
argument_list|)
operator|.
name|bean
argument_list|(
name|Helper
operator|.
name|class
argument_list|,
literal|"asyncProcessStream"
argument_list|)
operator|.
name|log
argument_list|(
literal|"get ${body}"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"netty-http:http://0.0.0.0:{{port}}/upstream?disableStreamCache=true"
argument_list|)
operator|.
name|bean
argument_list|(
name|Helper
operator|.
name|class
argument_list|,
literal|"processStream"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:stream-size"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"netty-http:http://0.0.0.0:{{port}}/downstream?disableStreamCache=true"
argument_list|)
operator|.
name|bean
argument_list|(
name|Helper
operator|.
name|class
argument_list|,
literal|"prepareStream"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

begin_class
DECL|class|Helper
specifier|final
class|class
name|Helper
block|{
DECL|method|Helper ()
specifier|private
name|Helper
parameter_list|()
block|{     }
DECL|method|processStream (Exchange exchange)
specifier|public
specifier|static
name|void
name|processStream
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|long
name|read
init|=
literal|0
decl_stmt|;
name|long
name|total
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|total
operator|+=
name|read
expr_stmt|;
block|}
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
operator|new
name|Long
argument_list|(
name|total
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|asyncProcessStream (Exchange exchange)
specifier|public
specifier|static
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|asyncProcessStream
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|CompletableFuture
operator|.
name|runAsync
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|processStream
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|prepareStream (Exchange exchange)
specifier|public
specifier|static
name|void
name|prepareStream
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|PipedOutputStream
name|pos
init|=
operator|new
name|PipedOutputStream
argument_list|()
decl_stmt|;
name|PipedInputStream
name|pis
init|=
operator|new
name|PipedInputStream
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|pis
argument_list|)
expr_stmt|;
name|StreamWriter
name|sw
init|=
operator|new
name|StreamWriter
argument_list|(
name|pos
argument_list|,
name|NettyHttpStreamTest
operator|.
name|SIZE
argument_list|)
decl_stmt|;
name|sw
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|StreamWriter
class|class
name|StreamWriter
extends|extends
name|Thread
block|{
DECL|field|pos
specifier|private
name|PipedOutputStream
name|pos
decl_stmt|;
DECL|field|limit
specifier|private
name|long
name|limit
decl_stmt|;
DECL|field|content
specifier|private
name|byte
index|[]
name|content
init|=
literal|"hello world stream"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
DECL|method|StreamWriter (PipedOutputStream pos, long limit)
specifier|public
name|StreamWriter
parameter_list|(
name|PipedOutputStream
name|pos
parameter_list|,
name|long
name|limit
parameter_list|)
block|{
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|count
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|count
operator|<
name|limit
condition|)
block|{
name|long
name|len
init|=
name|content
operator|.
name|length
operator|<
operator|(
name|limit
operator|-
name|count
operator|)
condition|?
name|content
operator|.
name|length
else|:
name|limit
operator|-
name|count
decl_stmt|;
name|pos
operator|.
name|write
argument_list|(
name|content
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|len
argument_list|)
expr_stmt|;
name|pos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|count
operator|+=
name|len
expr_stmt|;
block|}
name|pos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
block|}
block|}
end_class

end_unit

