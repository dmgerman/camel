begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|NettyServerBootstrapConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|NettyServerBootstrapFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|http
operator|.
name|handlers
operator|.
name|HttpServerMultiplexChannelHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipelineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A default {@link NettySharedHttpServer} to make sharing Netty server in Camel applications easier.  */
end_comment

begin_class
DECL|class|DefaultNettySharedHttpServer
specifier|public
class|class
name|DefaultNettySharedHttpServer
extends|extends
name|ServiceSupport
implements|implements
name|NettySharedHttpServer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultNettySharedHttpServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|configuration
specifier|private
name|NettyServerBootstrapConfiguration
name|configuration
decl_stmt|;
DECL|field|channelFactory
specifier|private
name|HttpServerConsumerChannelFactory
name|channelFactory
decl_stmt|;
DECL|field|bootstrapFactory
specifier|private
name|HttpServerBootstrapFactory
name|bootstrapFactory
decl_stmt|;
DECL|field|classResolver
specifier|private
name|ClassResolver
name|classResolver
decl_stmt|;
DECL|method|setNettyServerBootstrapConfiguration (NettyServerBootstrapConfiguration configuration)
specifier|public
name|void
name|setNettyServerBootstrapConfiguration
parameter_list|(
name|NettyServerBootstrapConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|setClassResolver (ClassResolver classResolver)
specifier|public
name|void
name|setClassResolver
parameter_list|(
name|ClassResolver
name|classResolver
parameter_list|)
block|{
name|this
operator|.
name|classResolver
operator|=
name|classResolver
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|configuration
operator|!=
literal|null
condition|?
name|configuration
operator|.
name|getPort
argument_list|()
else|:
operator|-
literal|1
return|;
block|}
DECL|method|getConsumerChannelFactory ()
specifier|public
name|HttpServerConsumerChannelFactory
name|getConsumerChannelFactory
parameter_list|()
block|{
return|return
name|channelFactory
return|;
block|}
DECL|method|getServerBootstrapFactory ()
specifier|public
name|NettyServerBootstrapFactory
name|getServerBootstrapFactory
parameter_list|()
block|{
return|return
name|bootstrapFactory
return|;
block|}
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|configuration
argument_list|,
literal|"setNettyServerBootstrapConfiguration() must be called with a NettyServerBootstrapConfiguration instance"
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// port must be set
if|if
condition|(
name|configuration
operator|.
name|getPort
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Port must be configured on NettyServerBootstrapConfiguration "
operator|+
name|configuration
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting NettySharedHttpServer using configuration: {} on port: {}"
argument_list|,
name|configuration
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// force using tcp as the underlying transport
name|configuration
operator|.
name|setProtocol
argument_list|(
literal|"tcp"
argument_list|)
expr_stmt|;
name|channelFactory
operator|=
operator|new
name|HttpServerMultiplexChannelHandler
argument_list|()
expr_stmt|;
name|channelFactory
operator|.
name|init
argument_list|(
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|ChannelPipelineFactory
name|pipelineFactory
init|=
operator|new
name|HttpServerSharedPipelineFactory
argument_list|(
name|configuration
argument_list|,
name|channelFactory
argument_list|,
name|classResolver
argument_list|)
decl_stmt|;
comment|// create bootstrap factory and disable compatible check as its shared among the consumers
name|bootstrapFactory
operator|=
operator|new
name|HttpServerBootstrapFactory
argument_list|(
name|channelFactory
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|bootstrapFactory
operator|.
name|init
argument_list|(
literal|null
argument_list|,
name|configuration
argument_list|,
name|pipelineFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping NettySharedHttpServer using configuration: {} on port: {}"
argument_list|,
name|configuration
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|stopServices
argument_list|(
name|bootstrapFactory
argument_list|,
name|channelFactory
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

