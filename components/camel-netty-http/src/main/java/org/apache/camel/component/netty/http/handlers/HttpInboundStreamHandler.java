begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty.http.handlers
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|http
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|MessageToMessageDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpContent
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMessage
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpObject
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|LastHttpContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|http
operator|.
name|InboundStreamHttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|http
operator|.
name|InboundStreamHttpResponse
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaderNames
operator|.
name|TRANSFER_ENCODING
import|;
end_import

begin_import
import|import static
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaderValues
operator|.
name|CHUNKED
import|;
end_import

begin_class
DECL|class|HttpInboundStreamHandler
specifier|public
class|class
name|HttpInboundStreamHandler
extends|extends
name|MessageToMessageDecoder
argument_list|<
name|HttpObject
argument_list|>
block|{
DECL|field|is
specifier|private
name|PipedInputStream
name|is
decl_stmt|;
DECL|field|os
specifier|private
name|PipedOutputStream
name|os
decl_stmt|;
DECL|field|isChunked
specifier|private
name|boolean
name|isChunked
decl_stmt|;
annotation|@
name|Override
DECL|method|handlerAdded (ChannelHandlerContext ctx)
specifier|public
name|void
name|handlerAdded
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|handlerAdded
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|PipedOutputStream
argument_list|()
expr_stmt|;
name|is
operator|=
operator|new
name|PipedInputStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|isChunked
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handlerRemoved (ChannelHandlerContext ctx)
specifier|public
name|void
name|handlerRemoved
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|handlerRemoved
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|acceptInboundMessage (Object msg)
specifier|public
name|boolean
name|acceptInboundMessage
parameter_list|(
name|Object
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|acceptInboundMessage
argument_list|(
name|msg
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|msg
operator|instanceof
name|HttpMessage
condition|)
block|{
name|HttpHeaders
name|headers
init|=
operator|(
operator|(
name|HttpMessage
operator|)
name|msg
operator|)
operator|.
name|headers
argument_list|()
decl_stmt|;
return|return
name|isChunked
operator|=
name|headers
operator|.
name|contains
argument_list|(
name|TRANSFER_ENCODING
argument_list|,
name|CHUNKED
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|msg
operator|instanceof
name|HttpContent
operator|)
operator|&&
name|isChunked
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|decode (ChannelHandlerContext ctx, HttpObject msg, List<Object> out)
specifier|protected
name|void
name|decode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpObject
name|msg
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|out
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|msg
operator|instanceof
name|HttpRequest
condition|)
block|{
name|InboundStreamHttpRequest
name|request
init|=
operator|new
name|InboundStreamHttpRequest
argument_list|(
operator|(
name|HttpRequest
operator|)
name|msg
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|out
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|msg
operator|instanceof
name|HttpResponse
condition|)
block|{
name|InboundStreamHttpResponse
name|response
init|=
operator|new
name|InboundStreamHttpResponse
argument_list|(
operator|(
name|HttpResponse
operator|)
name|msg
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|out
operator|.
name|add
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|msg
operator|instanceof
name|HttpContent
condition|)
block|{
name|ByteBuf
name|body
init|=
operator|(
operator|(
name|HttpContent
operator|)
name|msg
operator|)
operator|.
name|content
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|.
name|readableBytes
argument_list|()
operator|>
literal|0
condition|)
block|{
name|body
operator|.
name|readBytes
argument_list|(
name|os
argument_list|,
name|body
operator|.
name|readableBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|msg
operator|instanceof
name|LastHttpContent
condition|)
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

