begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_comment
comment|/**  * A {@link ContextPathMatcher} which can be used to define a set of mappings to  * as constraints.  *<p/>  * This matcher will match as<tt>true</tt> if no inclusions has been defined.  * First all the inclusions is check for matching. If a inclusion matches,  * then the exclusion is checked, and if any of them matches, then the exclusion  * will override the match and force returning<tt>false</tt>.  *<p/>  * Wildcards and regular expressions is supported as this implementation uses  * {@link EndpointHelper#matchPattern(String, String)} method for matching.  *<p/>  * This constraint matcher allows you to setup context path rules that will restrict  * access to paths, and then override and have exclusions that may allow access to  * public paths.  */
end_comment

begin_class
DECL|class|ConstraintMappingContextPathMatcher
specifier|public
class|class
name|ConstraintMappingContextPathMatcher
implements|implements
name|ContextPathMatcher
block|{
DECL|field|inclusions
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|inclusions
decl_stmt|;
DECL|field|exclusions
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|exclusions
decl_stmt|;
annotation|@
name|Override
DECL|method|matches (String target)
specifier|public
name|boolean
name|matches
parameter_list|(
name|String
name|target
parameter_list|)
block|{
name|boolean
name|matches
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|inclusions
operator|!=
literal|null
operator|&&
operator|!
name|inclusions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|constraint
range|:
name|inclusions
control|)
block|{
if|if
condition|(
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|target
argument_list|,
name|constraint
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|matches
operator|=
name|found
expr_stmt|;
block|}
comment|// if matches check for any exclusions
if|if
condition|(
name|matches
operator|&&
name|exclusions
operator|!=
literal|null
operator|&&
operator|!
name|exclusions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|constraint
range|:
name|exclusions
control|)
block|{
if|if
condition|(
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|target
argument_list|,
name|constraint
argument_list|)
condition|)
block|{
comment|// force false if this was an exclusion
name|matches
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|matches
return|;
block|}
DECL|method|addInclusion (String constraint)
specifier|public
name|void
name|addInclusion
parameter_list|(
name|String
name|constraint
parameter_list|)
block|{
if|if
condition|(
name|inclusions
operator|==
literal|null
condition|)
block|{
name|inclusions
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|inclusions
operator|.
name|add
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
block|}
DECL|method|addExclusion (String constraint)
specifier|public
name|void
name|addExclusion
parameter_list|(
name|String
name|constraint
parameter_list|)
block|{
if|if
condition|(
name|exclusions
operator|==
literal|null
condition|)
block|{
name|exclusions
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|exclusions
operator|.
name|add
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
block|}
DECL|method|getInclusions ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getInclusions
parameter_list|()
block|{
return|return
name|inclusions
return|;
block|}
DECL|method|setInclusions (Set<String> inclusions)
specifier|public
name|void
name|setInclusions
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|inclusions
parameter_list|)
block|{
name|this
operator|.
name|inclusions
operator|=
name|inclusions
expr_stmt|;
block|}
DECL|method|getExclusions ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getExclusions
parameter_list|()
block|{
return|return
name|exclusions
return|;
block|}
DECL|method|setExclusions (Set<String> exclusions)
specifier|public
name|void
name|setExclusions
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|exclusions
parameter_list|)
block|{
name|this
operator|.
name|exclusions
operator|=
name|exclusions
expr_stmt|;
block|}
block|}
end_class

end_unit

