begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|NettyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|NettyProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_comment
comment|/**  * HTTP based {@link NettyProducer}.  */
end_comment

begin_class
DECL|class|NettyHttpProducer
specifier|public
class|class
name|NettyHttpProducer
extends|extends
name|NettyProducer
block|{
DECL|method|NettyHttpProducer (NettyHttpEndpoint nettyEndpoint, NettyConfiguration configuration)
specifier|public
name|NettyHttpProducer
parameter_list|(
name|NettyHttpEndpoint
name|nettyEndpoint
parameter_list|,
name|NettyConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|nettyEndpoint
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|NettyHttpEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|NettyHttpEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getConfiguration ()
specifier|public
name|NettyHttpConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
operator|(
name|NettyHttpConfiguration
operator|)
name|super
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange, AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
return|return
name|super
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
operator|new
name|NettyHttpProducerCallback
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRequestBody (Exchange exchange)
specifier|protected
name|Object
name|getRequestBody
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// creating the url to use takes 2-steps
name|String
name|uri
init|=
name|NettyHttpHelper
operator|.
name|createURL
argument_list|(
name|exchange
argument_list|,
name|getEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|URI
name|u
init|=
name|NettyHttpHelper
operator|.
name|createURI
argument_list|(
name|exchange
argument_list|,
name|uri
argument_list|,
name|getEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|HttpRequest
name|request
init|=
name|getEndpoint
argument_list|()
operator|.
name|getNettyHttpBinding
argument_list|()
operator|.
name|toNettyRequest
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|u
operator|.
name|toString
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|actualUri
init|=
name|request
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_URL
argument_list|,
name|actualUri
argument_list|)
expr_stmt|;
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|isBridgeEndpoint
argument_list|()
condition|)
block|{
comment|// Need to remove the Host key as it should be not used when bridging/proxying
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
block|}
return|return
name|request
return|;
block|}
comment|/**      * Callback that ensures the channel is returned to the pool when we are done.      */
DECL|class|NettyHttpProducerCallback
specifier|private
specifier|final
class|class
name|NettyHttpProducerCallback
implements|implements
name|AsyncCallback
block|{
DECL|field|exchange
specifier|private
specifier|final
name|Exchange
name|exchange
decl_stmt|;
DECL|field|callback
specifier|private
specifier|final
name|AsyncCallback
name|callback
decl_stmt|;
DECL|method|NettyHttpProducerCallback (Exchange exchange, AsyncCallback callback)
specifier|private
name|NettyHttpProducerCallback
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|done (boolean doneSync)
specifier|public
name|void
name|done
parameter_list|(
name|boolean
name|doneSync
parameter_list|)
block|{
try|try
block|{
name|NettyHttpMessage
name|nettyMessage
init|=
name|exchange
operator|.
name|hasOut
argument_list|()
condition|?
name|exchange
operator|.
name|getOut
argument_list|(
name|NettyHttpMessage
operator|.
name|class
argument_list|)
else|:
name|exchange
operator|.
name|getIn
argument_list|(
name|NettyHttpMessage
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|nettyMessage
operator|!=
literal|null
condition|)
block|{
name|HttpResponse
name|response
init|=
name|nettyMessage
operator|.
name|getHttpResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
comment|// the actual url is stored on the IN message in the getRequestBody method as its accessed on-demand
name|String
name|actualUrl
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_URL
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|response
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
condition|?
name|response
operator|.
name|getStatus
argument_list|()
operator|.
name|getCode
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Http responseCode: {}"
argument_list|,
name|code
argument_list|)
expr_stmt|;
comment|// if there was a http error code (300 or higher) then check if we should throw an exception
if|if
condition|(
name|code
operator|>=
literal|300
operator|&&
name|getConfiguration
argument_list|()
operator|.
name|isThrowExceptionOnFailure
argument_list|()
condition|)
block|{
comment|// operation failed so populate exception to throw
name|Exception
name|cause
init|=
name|NettyHttpHelper
operator|.
name|populateNettyHttpOperationFailedException
argument_list|(
name|exchange
argument_list|,
name|actualUrl
argument_list|,
name|response
argument_list|,
name|code
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|isTransferException
argument_list|()
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
comment|// ensure we call the delegated callback
name|callback
operator|.
name|done
argument_list|(
name|doneSync
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

