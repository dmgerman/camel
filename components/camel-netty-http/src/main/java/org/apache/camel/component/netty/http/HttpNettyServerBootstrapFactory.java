begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|NettyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|NettyConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|SingleTCPNettyServerBootstrapFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipelineFactory
import|;
end_import

begin_class
DECL|class|HttpNettyServerBootstrapFactory
specifier|public
class|class
name|HttpNettyServerBootstrapFactory
extends|extends
name|SingleTCPNettyServerBootstrapFactory
block|{
DECL|field|component
specifier|private
specifier|final
name|NettyHttpComponent
name|component
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|method|HttpNettyServerBootstrapFactory (NettyHttpComponent component)
specifier|public
name|HttpNettyServerBootstrapFactory
parameter_list|(
name|NettyHttpComponent
name|component
parameter_list|)
block|{
name|this
operator|.
name|component
operator|=
name|component
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (CamelContext camelContext, NettyConfiguration configuration, ChannelPipelineFactory pipelineFactory)
specifier|public
name|void
name|init
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|NettyConfiguration
name|configuration
parameter_list|,
name|ChannelPipelineFactory
name|pipelineFactory
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|camelContext
argument_list|,
name|configuration
argument_list|,
name|pipelineFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|configuration
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
DECL|method|addConsumer (NettyConsumer consumer)
specifier|public
name|void
name|addConsumer
parameter_list|(
name|NettyConsumer
name|consumer
parameter_list|)
block|{
name|component
operator|.
name|getMultiplexChannelHandler
argument_list|(
name|port
argument_list|)
operator|.
name|addConsumer
argument_list|(
operator|(
name|NettyHttpConsumer
operator|)
name|consumer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeConsumer (NettyConsumer consumer)
specifier|public
name|void
name|removeConsumer
parameter_list|(
name|NettyConsumer
name|consumer
parameter_list|)
block|{
name|component
operator|.
name|getMultiplexChannelHandler
argument_list|(
name|port
argument_list|)
operator|.
name|removeConsumer
argument_list|(
operator|(
name|NettyHttpConsumer
operator|)
name|consumer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// only stop if no more active consumers
name|int
name|consumers
init|=
name|component
operator|.
name|getMultiplexChannelHandler
argument_list|(
name|port
argument_list|)
operator|.
name|consumers
argument_list|()
decl_stmt|;
if|if
condition|(
name|consumers
operator|==
literal|0
condition|)
block|{
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"There are {} active consumers, so cannot stop {} yet."
argument_list|,
name|consumers
argument_list|,
name|HttpNettyServerBootstrapFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

