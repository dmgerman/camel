begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|MessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultHttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default {@link NettyHttpBinding}.  */
end_comment

begin_class
DECL|class|DefaultNettyHttpBinding
specifier|public
class|class
name|DefaultNettyHttpBinding
implements|implements
name|NettyHttpBinding
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultNettyHttpBinding
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|headerFilterStrategy
specifier|private
name|HeaderFilterStrategy
name|headerFilterStrategy
decl_stmt|;
DECL|method|DefaultNettyHttpBinding ()
specifier|public
name|DefaultNettyHttpBinding
parameter_list|()
block|{     }
DECL|method|DefaultNettyHttpBinding (HeaderFilterStrategy headerFilterStrategy)
specifier|public
name|DefaultNettyHttpBinding
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|headerFilterStrategy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toCamelMessage (HttpRequest request, Exchange exchange)
specifier|public
name|Message
name|toCamelMessage
parameter_list|(
name|HttpRequest
name|request
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"toCamelMessage: {}"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|NettyHttpMessage
name|answer
init|=
operator|new
name|NettyHttpMessage
argument_list|(
name|request
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// force getting headers which will populate them
name|answer
operator|.
name|getHeaders
argument_list|()
expr_stmt|;
comment|// keep the body as is, and use type converters
name|answer
operator|.
name|setBody
argument_list|(
name|request
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|populateCamelHeaders (HttpRequest request, Map<String, Object> headers, Exchange exchange)
specifier|public
name|void
name|populateCamelHeaders
parameter_list|(
name|HttpRequest
name|request
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"populateCamelHeaders: {}"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_URI
argument_list|,
name|request
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-Method {}"
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-Uri {}"
argument_list|,
name|request
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|name
range|:
name|request
operator|.
name|getHeaderNames
argument_list|()
control|)
block|{
comment|// mapping the content-type
if|if
condition|(
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"content-type"
argument_list|)
condition|)
block|{
name|name
operator|=
name|Exchange
operator|.
name|CONTENT_TYPE
expr_stmt|;
block|}
comment|// add the headers one by one, and use the header filter strategy
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|request
operator|.
name|getHeaders
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|values
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|extracted
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-header: {}"
argument_list|,
name|extracted
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|name
argument_list|,
name|extracted
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|NettyHttpHelper
operator|.
name|appendHeader
argument_list|(
name|headers
argument_list|,
name|name
argument_list|,
name|extracted
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toCamelMessage (HttpResponse response, Exchange exchange)
specifier|public
name|Message
name|toCamelMessage
parameter_list|(
name|HttpResponse
name|response
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"toCamelMessage: {}"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|NettyHttpMessage
name|answer
init|=
operator|new
name|NettyHttpMessage
argument_list|(
literal|null
argument_list|,
name|response
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// force getting headers which will populate them
name|answer
operator|.
name|getHeaders
argument_list|()
expr_stmt|;
comment|// keep the body as is, and use type converters
name|answer
operator|.
name|setBody
argument_list|(
name|response
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|populateCamelHeaders (HttpResponse response, Map<String, Object> headers, Exchange exchange)
specifier|public
name|void
name|populateCamelHeaders
parameter_list|(
name|HttpResponse
name|response
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"populateCamelHeaders: {}"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: use another status header
name|headers
operator|.
name|put
argument_list|(
literal|"CamelHttpResponseText"
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
operator|.
name|getReasonPhrase
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|response
operator|.
name|getHeaderNames
argument_list|()
control|)
block|{
comment|// mapping the content-type
if|if
condition|(
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"content-type"
argument_list|)
condition|)
block|{
name|name
operator|=
name|Exchange
operator|.
name|CONTENT_TYPE
expr_stmt|;
block|}
comment|// add the headers one by one, and use the header filter strategy
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|response
operator|.
name|getHeaders
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|values
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|extracted
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-header: {}"
argument_list|,
name|extracted
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|name
argument_list|,
name|extracted
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|NettyHttpHelper
operator|.
name|appendHeader
argument_list|(
name|headers
argument_list|,
name|name
argument_list|,
name|extracted
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toNettyResponse (Message message)
specifier|public
name|HttpResponse
name|toNettyResponse
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"toNettyResponse: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// the message body may already be a Netty HTTP response
if|if
condition|(
name|message
operator|.
name|getBody
argument_list|()
operator|instanceof
name|HttpResponse
condition|)
block|{
return|return
operator|(
name|HttpResponse
operator|)
name|message
operator|.
name|getBody
argument_list|()
return|;
block|}
comment|// the status code is default 200, but a header can override that
name|Integer
name|code
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
literal|200
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpResponse
name|response
init|=
operator|new
name|DefaultHttpResponse
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpResponseStatus
operator|.
name|valueOf
argument_list|(
name|code
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP Status Code: {}"
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|TypeConverter
name|tc
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
decl_stmt|;
comment|// append headers
comment|// must use entrySet to ensure case of keys is preserved
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// use an iterator as there can be multiple values. (must not use a delimiter)
specifier|final
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|value
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|headerValue
init|=
name|tc
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerValue
operator|!=
literal|null
operator|&&
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|key
argument_list|,
name|headerValue
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-Header: {}={}"
argument_list|,
name|key
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
name|response
operator|.
name|addHeader
argument_list|(
name|key
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Object
name|body
init|=
name|message
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
comment|// support bodies as native Netty
name|ChannelBuffer
name|buffer
decl_stmt|;
if|if
condition|(
name|body
operator|instanceof
name|ChannelBuffer
condition|)
block|{
name|buffer
operator|=
operator|(
name|ChannelBuffer
operator|)
name|body
expr_stmt|;
block|}
else|else
block|{
comment|// try to convert to buffer first
name|buffer
operator|=
name|message
operator|.
name|getBody
argument_list|(
name|ChannelBuffer
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
comment|// fallback to byte array as last resort
name|byte
index|[]
name|data
init|=
name|message
operator|.
name|getMandatoryBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|buffer
operator|=
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setContent
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|buffer
operator|.
name|readableBytes
argument_list|()
decl_stmt|;
comment|// set content-length
name|response
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Content-Length: {}"
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the content type in the response.
name|String
name|contentType
init|=
name|MessageHelper
operator|.
name|getContentType
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
comment|// set content-type
name|response
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_TYPE
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Content-Type: {}"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
block|}
comment|// TODO: keep alive should be something we can control
name|String
name|keepAlive
init|=
name|HttpHeaders
operator|.
name|Values
operator|.
name|CLOSE
decl_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONNECTION
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connection: {}"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|toNettyRequest (Message message, String uri)
specifier|public
name|HttpRequest
name|toNettyRequest
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"toNettyRequest: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// the message body may already be a Netty HTTP response
if|if
condition|(
name|message
operator|.
name|getBody
argument_list|()
operator|instanceof
name|HttpRequest
condition|)
block|{
return|return
operator|(
name|HttpRequest
operator|)
name|message
operator|.
name|getBody
argument_list|()
return|;
block|}
comment|// TODO: Compute the method to use
name|HttpRequest
name|request
init|=
operator|new
name|DefaultHttpRequest
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpMethod
operator|.
name|POST
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|TypeConverter
name|tc
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
decl_stmt|;
comment|// append headers
comment|// must use entrySet to ensure case of keys is preserved
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// use an iterator as there can be multiple values. (must not use a delimiter)
specifier|final
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|value
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|headerValue
init|=
name|tc
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerValue
operator|!=
literal|null
operator|&&
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|key
argument_list|,
name|headerValue
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-Header: {}={}"
argument_list|,
name|key
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
name|request
operator|.
name|addHeader
argument_list|(
name|key
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Object
name|body
init|=
name|message
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
comment|// support bodies as native Netty
name|ChannelBuffer
name|buffer
decl_stmt|;
if|if
condition|(
name|body
operator|instanceof
name|ChannelBuffer
condition|)
block|{
name|buffer
operator|=
operator|(
name|ChannelBuffer
operator|)
name|body
expr_stmt|;
block|}
else|else
block|{
comment|// try to convert to buffer first
name|buffer
operator|=
name|message
operator|.
name|getBody
argument_list|(
name|ChannelBuffer
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
comment|// fallback to byte array as last resort
name|byte
index|[]
name|data
init|=
name|message
operator|.
name|getMandatoryBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|buffer
operator|=
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setContent
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|buffer
operator|.
name|readableBytes
argument_list|()
decl_stmt|;
comment|// set content-length
name|request
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Content-Length: {}"
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the content type in the response.
name|String
name|contentType
init|=
name|MessageHelper
operator|.
name|getContentType
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
comment|// set content-type
name|request
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_TYPE
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Content-Type: {}"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
block|}
comment|// TODO: keep alive should be something we can control
name|String
name|keepAlive
init|=
name|HttpHeaders
operator|.
name|Values
operator|.
name|CLOSE
decl_stmt|;
name|request
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONNECTION
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connection: {}"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
annotation|@
name|Override
DECL|method|getHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getHeaderFilterStrategy
parameter_list|()
block|{
return|return
name|headerFilterStrategy
return|;
block|}
annotation|@
name|Override
DECL|method|setHeaderFilterStrategy (HeaderFilterStrategy headerFilterStrategy)
specifier|public
name|void
name|setHeaderFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|headerFilterStrategy
expr_stmt|;
block|}
block|}
end_class

end_unit

