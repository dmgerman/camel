begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|NettyComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|NettyConfiguration
import|;
end_import

begin_class
DECL|class|NettyHttpComponent
specifier|public
class|class
name|NettyHttpComponent
extends|extends
name|NettyComponent
block|{
DECL|field|nettyHttpBinding
specifier|private
name|NettyHttpBinding
name|nettyHttpBinding
decl_stmt|;
DECL|method|NettyHttpComponent ()
specifier|public
name|NettyHttpComponent
parameter_list|()
block|{
comment|// use the http configuration
name|setConfiguration
argument_list|(
operator|new
name|NettyHttpConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: allow to turn mapMessage=true|false
comment|// TODO: netty http producer
comment|// TODO: make it easy to turn chunked on|off
comment|// TODO: make it easy to turn compression on|off
comment|// TODO: use HeaderFilterStrategy to filter headers
comment|// TODO: add logging
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|NettyConfiguration
name|config
decl_stmt|;
if|if
condition|(
name|getConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|config
operator|=
name|getConfiguration
argument_list|()
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|config
operator|=
operator|new
name|NettyHttpConfiguration
argument_list|()
expr_stmt|;
block|}
name|config
operator|=
name|parseConfiguration
argument_list|(
name|config
argument_list|,
name|remaining
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// validate config
name|config
operator|.
name|validateConfiguration
argument_list|()
expr_stmt|;
name|NettyHttpEndpoint
name|nettyEndpoint
init|=
operator|new
name|NettyHttpEndpoint
argument_list|(
name|remaining
argument_list|,
name|this
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|nettyEndpoint
operator|.
name|setTimer
argument_list|(
name|getTimer
argument_list|()
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|nettyEndpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|nettyEndpoint
return|;
block|}
annotation|@
name|Override
DECL|method|parseConfiguration (NettyConfiguration configuration, String remaining, Map<String, Object> parameters)
specifier|protected
name|NettyConfiguration
name|parseConfiguration
parameter_list|(
name|NettyConfiguration
name|configuration
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|configuration
operator|.
name|parseURI
argument_list|(
operator|new
name|URI
argument_list|(
name|remaining
argument_list|)
argument_list|,
name|parameters
argument_list|,
name|this
argument_list|,
literal|"http"
argument_list|,
literal|"https"
argument_list|)
expr_stmt|;
comment|// force using tcp as the underlying transport
name|configuration
operator|.
name|setProtocol
argument_list|(
literal|"tcp"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setTextline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|configuration
return|;
block|}
DECL|method|getNettyHttpBinding ()
specifier|public
name|NettyHttpBinding
name|getNettyHttpBinding
parameter_list|()
block|{
return|return
name|nettyHttpBinding
return|;
block|}
DECL|method|setNettyHttpBinding (NettyHttpBinding nettyHttpBinding)
specifier|public
name|void
name|setNettyHttpBinding
parameter_list|(
name|NettyHttpBinding
name|nettyHttpBinding
parameter_list|)
block|{
name|this
operator|.
name|nettyHttpBinding
operator|=
name|nettyHttpBinding
expr_stmt|;
block|}
block|}
end_class

end_unit

