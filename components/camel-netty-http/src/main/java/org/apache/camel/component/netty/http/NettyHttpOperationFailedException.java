begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_comment
comment|/**  * Exception when a Netty HTTP operation failed.  */
end_comment

begin_class
DECL|class|NettyHttpOperationFailedException
specifier|public
class|class
name|NettyHttpOperationFailedException
extends|extends
name|CamelException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|uri
specifier|private
specifier|final
name|String
name|uri
decl_stmt|;
DECL|field|redirectLocation
specifier|private
specifier|final
name|String
name|redirectLocation
decl_stmt|;
DECL|field|statusCode
specifier|private
specifier|final
name|int
name|statusCode
decl_stmt|;
DECL|field|statusText
specifier|private
specifier|final
name|String
name|statusText
decl_stmt|;
DECL|field|response
specifier|private
specifier|final
specifier|transient
name|HttpResponse
name|response
decl_stmt|;
DECL|method|NettyHttpOperationFailedException (String uri, int statusCode, String statusText, String location, HttpResponse response)
specifier|public
name|NettyHttpOperationFailedException
parameter_list|(
name|String
name|uri
parameter_list|,
name|int
name|statusCode
parameter_list|,
name|String
name|statusText
parameter_list|,
name|String
name|location
parameter_list|,
name|HttpResponse
name|response
parameter_list|)
block|{
comment|// sanitize uri so we do not show sensitive information such as passwords
name|super
argument_list|(
literal|"Netty HTTP operation failed invoking "
operator|+
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|uri
argument_list|)
operator|+
literal|" with statusCode: "
operator|+
name|statusCode
operator|+
operator|(
name|location
operator|!=
literal|null
condition|?
literal|", redirectLocation: "
operator|+
name|location
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|this
operator|.
name|statusCode
operator|=
name|statusCode
expr_stmt|;
name|this
operator|.
name|statusText
operator|=
name|statusText
expr_stmt|;
name|this
operator|.
name|redirectLocation
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
DECL|method|getUri ()
specifier|public
name|String
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
DECL|method|isRedirectError ()
specifier|public
name|boolean
name|isRedirectError
parameter_list|()
block|{
return|return
name|statusCode
operator|>=
literal|300
operator|&&
name|statusCode
operator|<
literal|400
return|;
block|}
DECL|method|hasRedirectLocation ()
specifier|public
name|boolean
name|hasRedirectLocation
parameter_list|()
block|{
return|return
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|redirectLocation
argument_list|)
return|;
block|}
DECL|method|getRedirectLocation ()
specifier|public
name|String
name|getRedirectLocation
parameter_list|()
block|{
return|return
name|redirectLocation
return|;
block|}
DECL|method|getStatusCode ()
specifier|public
name|int
name|getStatusCode
parameter_list|()
block|{
return|return
name|statusCode
return|;
block|}
DECL|method|getStatusText ()
specifier|public
name|String
name|getStatusText
parameter_list|()
block|{
return|return
name|statusText
return|;
block|}
comment|/**      * Gets the {@link HttpResponse}.      *<p/>      * Notice this may be<tt>null</tt> if this exception has been serialized,      * as the {@link HttpResponse} instance is marked as transient in this class.      */
DECL|method|getResponse ()
specifier|public
name|HttpResponse
name|getResponse
parameter_list|()
block|{
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

