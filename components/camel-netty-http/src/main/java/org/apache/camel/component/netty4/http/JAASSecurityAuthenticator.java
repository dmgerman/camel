begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty4.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A JAAS based {@link SecurityAuthenticator} implementation.  */
end_comment

begin_class
DECL|class|JAASSecurityAuthenticator
specifier|public
class|class
name|JAASSecurityAuthenticator
extends|extends
name|SecurityAuthenticatorSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JAASSecurityAuthenticator
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|login (HttpPrincipal principal)
specifier|public
name|Subject
name|login
parameter_list|(
name|HttpPrincipal
name|principal
parameter_list|)
throws|throws
name|LoginException
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Realm has not been configured on this SecurityAuthenticator: "
operator|+
name|this
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Login username: {} using realm: {}"
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LoginContext
name|context
init|=
operator|new
name|LoginContext
argument_list|(
name|getName
argument_list|()
argument_list|,
operator|new
name|HttpPrincipalCallbackHandler
argument_list|(
name|principal
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|login
argument_list|()
expr_stmt|;
name|Subject
name|subject
init|=
name|context
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Login username: {} successful returning Subject: {}"
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|subject
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Principal
name|p
range|:
name|subject
operator|.
name|getPrincipals
argument_list|()
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Principal on subject {} -> {}"
argument_list|,
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|subject
return|;
block|}
annotation|@
name|Override
DECL|method|logout (Subject subject)
specifier|public
name|void
name|logout
parameter_list|(
name|Subject
name|subject
parameter_list|)
throws|throws
name|LoginException
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Realm has not been configured on this SecurityAuthenticator: "
operator|+
name|this
argument_list|)
throw|;
block|}
name|String
name|username
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|username
operator|=
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Logging out username: {} using realm: {}"
argument_list|,
name|username
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LoginContext
name|context
init|=
operator|new
name|LoginContext
argument_list|(
name|getName
argument_list|()
argument_list|,
name|subject
argument_list|)
decl_stmt|;
name|context
operator|.
name|logout
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Logout username: {} successful"
argument_list|,
name|username
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

