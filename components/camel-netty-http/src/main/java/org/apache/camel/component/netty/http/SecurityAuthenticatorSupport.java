begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|PasswordCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A base class for {@link SecurityAuthenticator}.  */
end_comment

begin_class
DECL|class|SecurityAuthenticatorSupport
specifier|public
specifier|abstract
class|class
name|SecurityAuthenticatorSupport
implements|implements
name|SecurityAuthenticator
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|roleClassNames
specifier|private
name|String
name|roleClassNames
decl_stmt|;
DECL|method|SecurityAuthenticatorSupport ()
specifier|public
name|SecurityAuthenticatorSupport
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|setRoleClassNames (String roleClassNames)
specifier|public
name|void
name|setRoleClassNames
parameter_list|(
name|String
name|roleClassNames
parameter_list|)
block|{
name|this
operator|.
name|roleClassNames
operator|=
name|roleClassNames
expr_stmt|;
block|}
comment|/**      * Is the given principal a role class?      *      * @param principal the principal      * @return<tt>true</tt> if role class,<tt>false</tt> if not      */
DECL|method|isRoleClass (Principal principal)
specifier|protected
name|boolean
name|isRoleClass
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
if|if
condition|(
name|roleClassNames
operator|==
literal|null
condition|)
block|{
comment|// by default assume its a role when the classname has role in its name
return|return
name|principal
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|contains
argument_list|(
literal|"role"
argument_list|)
return|;
block|}
comment|// check each role class name if they match the principal class name
for|for
control|(
name|String
name|name
range|:
name|ObjectHelper
operator|.
name|createIterable
argument_list|(
name|roleClassNames
argument_list|)
control|)
block|{
if|if
condition|(
name|principal
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getUserRoles (Subject subject)
specifier|public
name|String
name|getUserRoles
parameter_list|(
name|Subject
name|subject
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Principal
name|p
range|:
name|subject
operator|.
name|getPrincipals
argument_list|()
control|)
block|{
if|if
condition|(
name|isRoleClass
argument_list|(
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * {@link javax.security.auth.callback.CallbackHandler} that provides the username and password.      */
DECL|class|HttpPrincipalCallbackHandler
specifier|public
specifier|static
specifier|final
class|class
name|HttpPrincipalCallbackHandler
implements|implements
name|CallbackHandler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HttpPrincipalCallbackHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|principal
specifier|private
specifier|final
name|HttpPrincipal
name|principal
decl_stmt|;
DECL|method|HttpPrincipalCallbackHandler (HttpPrincipal principal)
specifier|public
name|HttpPrincipalCallbackHandler
parameter_list|(
name|HttpPrincipal
name|principal
parameter_list|)
block|{
name|this
operator|.
name|principal
operator|=
name|principal
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (Callback[] callbacks)
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Callback {}"
argument_list|,
name|callback
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|instanceof
name|PasswordCallback
condition|)
block|{
name|PasswordCallback
name|pc
init|=
operator|(
name|PasswordCallback
operator|)
name|callback
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Setting password on callback {}"
argument_list|,
name|pc
argument_list|)
expr_stmt|;
name|pc
operator|.
name|setPassword
argument_list|(
name|principal
operator|.
name|getPassword
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|NameCallback
condition|)
block|{
name|NameCallback
name|nc
init|=
operator|(
name|NameCallback
operator|)
name|callback
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Setting username on callback {}"
argument_list|,
name|nc
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setName
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

