begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty4
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|BossPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|WorkerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|NettyUseSharedWorkerThreadPoolManyRoutesTest
specifier|public
class|class
name|NettyUseSharedWorkerThreadPoolManyRoutesTest
extends|extends
name|BaseNettyTest
block|{
DECL|field|jndi
specifier|private
name|JndiRegistry
name|jndi
decl_stmt|;
DECL|field|sharedBoos
specifier|private
name|BossPool
name|sharedBoos
decl_stmt|;
DECL|field|sharedWorker
specifier|private
name|WorkerPool
name|sharedWorker
decl_stmt|;
DECL|field|before
specifier|private
name|int
name|before
decl_stmt|;
annotation|@
name|Override
DECL|method|useJmx ()
specifier|protected
name|boolean
name|useJmx
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|before
operator|=
name|Thread
operator|.
name|activeCount
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|jndi
operator|=
name|super
operator|.
name|createRegistry
argument_list|()
expr_stmt|;
return|return
name|jndi
return|;
block|}
annotation|@
name|Test
DECL|method|testSharedThreadPool ()
specifier|public
name|void
name|testSharedThreadPool
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|delta
init|=
name|Thread
operator|.
name|activeCount
argument_list|()
operator|-
name|before
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Created threads {}"
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"There should not be created so many threads: "
operator|+
name|delta
argument_list|,
name|delta
operator|<
literal|50
argument_list|)
expr_stmt|;
name|sharedWorker
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|sharedBoos
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|sharedWorker
operator|=
operator|new
name|NettyWorkerPoolBuilder
argument_list|()
operator|.
name|withWorkerCount
argument_list|(
literal|10
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"sharedWorker"
argument_list|,
name|sharedWorker
argument_list|)
expr_stmt|;
name|sharedBoos
operator|=
operator|new
name|NettyServerBossPoolBuilder
argument_list|()
operator|.
name|withBossCount
argument_list|(
literal|20
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"sharedBoss"
argument_list|,
name|sharedBoos
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|from
argument_list|(
literal|"netty:tcp://localhost:"
operator|+
name|getNextPort
argument_list|()
operator|+
literal|"?textline=true&sync=true&orderedThreadPoolExecutor=false"
operator|+
literal|"&bossPool=#sharedBoss&workerPool=#sharedWorker"
argument_list|)
operator|.
name|validate
argument_list|(
name|body
argument_list|()
operator|.
name|isInstanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:result"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|transform
argument_list|(
name|body
argument_list|()
operator|.
name|regexReplaceAll
argument_list|(
literal|"Hello"
argument_list|,
literal|"Bye"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

