begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty4
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|NettyCustomCorrelationManagerTest
specifier|public
class|class
name|NettyCustomCorrelationManagerTest
extends|extends
name|BaseNettyTest
block|{
DECL|field|myManager
specifier|private
specifier|final
name|MyCorrelationManager
name|myManager
init|=
operator|new
name|MyCorrelationManager
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|jndi
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"myManager"
argument_list|,
name|myManager
argument_list|)
expr_stmt|;
return|return
name|jndi
return|;
block|}
annotation|@
name|Test
DECL|method|testCustomCorrelationManager ()
specifier|public
name|void
name|testCustomCorrelationManager
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
comment|// the messages can be processed in any order
name|mock
operator|.
name|expectedBodiesReceivedInAnyOrder
argument_list|(
literal|"Bye A"
argument_list|,
literal|"Bye B"
argument_list|,
literal|"Bye C"
argument_list|)
expr_stmt|;
comment|// the custom manager should be used
name|mock
operator|.
name|allMessages
argument_list|()
operator|.
name|header
argument_list|(
literal|"manager"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|myManager
argument_list|)
expr_stmt|;
comment|// check that the request and reply are correlated correctly
name|mock
operator|.
name|allMessages
argument_list|()
operator|.
name|predicate
argument_list|(
name|exchange
lambda|->
block|{
name|String
name|request
init|=
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"request"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|reply
init|=
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|reply
operator|.
name|endsWith
argument_list|(
name|request
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"seda:start"
argument_list|,
literal|"A"
argument_list|,
literal|"request"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"seda:start"
argument_list|,
literal|"B"
argument_list|,
literal|"request"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"seda:start"
argument_list|,
literal|"C"
argument_list|,
literal|"request"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"seda:start"
argument_list|)
operator|.
name|log
argument_list|(
literal|"before ${body}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"netty4:tcp://localhost:{{port}}?textline=true&sync=true&producerPoolEnabled=false&correlationManager=#myManager"
argument_list|)
operator|.
name|log
argument_list|(
literal|"after ${body}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"netty4:tcp://localhost:{{port}}?textline=true&sync=true"
argument_list|)
operator|.
name|transform
argument_list|(
name|body
argument_list|()
operator|.
name|prepend
argument_list|(
literal|"Bye "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|MyCorrelationManager
specifier|private
specifier|static
specifier|final
class|class
name|MyCorrelationManager
implements|implements
name|NettyCamelStateCorrelationManager
block|{
DECL|field|stateA
specifier|private
specifier|volatile
name|NettyCamelState
name|stateA
decl_stmt|;
DECL|field|stateB
specifier|private
specifier|volatile
name|NettyCamelState
name|stateB
decl_stmt|;
DECL|field|stateC
specifier|private
specifier|volatile
name|NettyCamelState
name|stateC
decl_stmt|;
DECL|field|channel
specifier|private
specifier|volatile
name|Channel
name|channel
decl_stmt|;
annotation|@
name|Override
DECL|method|putState (Channel channel, NettyCamelState state)
specifier|public
name|void
name|putState
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|NettyCamelState
name|state
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|channel
operator|!=
literal|null
operator|&&
name|this
operator|.
name|channel
operator|!=
name|channel
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Should use same channel as producer pool is disabled"
argument_list|)
throw|;
block|}
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|String
name|body
init|=
name|state
operator|.
name|getExchange
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"A"
operator|.
name|equals
argument_list|(
name|body
argument_list|)
condition|)
block|{
name|stateA
operator|=
name|state
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"B"
operator|.
name|equals
argument_list|(
name|body
argument_list|)
condition|)
block|{
name|stateB
operator|=
name|state
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"C"
operator|.
name|equals
argument_list|(
name|body
argument_list|)
condition|)
block|{
name|stateC
operator|=
name|state
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeState (ChannelHandlerContext ctx, Channel channel)
specifier|public
name|void
name|removeState
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|channel
parameter_list|)
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|getState (ChannelHandlerContext ctx, Channel channel, Object msg)
specifier|public
name|NettyCamelState
name|getState
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|Object
name|msg
parameter_list|)
block|{
name|String
name|body
init|=
name|msg
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|.
name|endsWith
argument_list|(
literal|"A"
argument_list|)
condition|)
block|{
name|stateA
operator|.
name|getExchange
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"manager"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|stateA
return|;
block|}
elseif|else
if|if
condition|(
name|body
operator|.
name|endsWith
argument_list|(
literal|"B"
argument_list|)
condition|)
block|{
name|stateB
operator|.
name|getExchange
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"manager"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|stateB
return|;
block|}
elseif|else
if|if
condition|(
name|body
operator|.
name|endsWith
argument_list|(
literal|"C"
argument_list|)
condition|)
block|{
name|stateC
operator|.
name|getExchange
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"manager"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|stateC
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getState (ChannelHandlerContext ctx, Channel channel, Throwable cause)
specifier|public
name|NettyCamelState
name|getState
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
comment|// noop
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

