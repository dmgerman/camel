begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty4
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBufAllocator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|Unpooled
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|MessageToMessageDecoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|MessageToMessageEncoder
import|;
end_import

begin_class
DECL|class|MyCustomCodec
specifier|public
specifier|final
class|class
name|MyCustomCodec
block|{
DECL|field|nullDelimiter
specifier|private
specifier|static
name|ByteBuf
name|nullDelimiter
init|=
name|Unpooled
operator|.
name|wrappedBuffer
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|)
decl_stmt|;
DECL|method|MyCustomCodec ()
specifier|private
name|MyCustomCodec
parameter_list|()
block|{
comment|// Helper class
block|}
DECL|method|createMyCustomDecoder ()
specifier|public
specifier|static
name|ChannelHandlerFactory
name|createMyCustomDecoder
parameter_list|()
block|{
name|ByteBuf
index|[]
name|delimiters
init|=
operator|new
name|ByteBuf
index|[]
block|{
name|nullDelimiter
block|,
name|nullDelimiter
block|}
decl_stmt|;
return|return
name|ChannelHandlerFactories
operator|.
name|newDelimiterBasedFrameDecoder
argument_list|(
literal|4096
argument_list|,
name|delimiters
argument_list|,
literal|"tcp"
argument_list|)
return|;
block|}
DECL|method|createMyCustomDecoder2 ()
specifier|public
specifier|static
name|ChannelHandler
name|createMyCustomDecoder2
parameter_list|()
block|{
return|return
operator|new
name|BytesDecoder
argument_list|()
return|;
block|}
DECL|method|createMyCustomEncoder ()
specifier|public
specifier|static
name|ChannelHandler
name|createMyCustomEncoder
parameter_list|()
block|{
return|return
operator|new
name|BytesEncoder
argument_list|()
return|;
block|}
annotation|@
name|ChannelHandler
operator|.
name|Sharable
DECL|class|BytesDecoder
specifier|public
specifier|static
class|class
name|BytesDecoder
extends|extends
name|MessageToMessageDecoder
argument_list|<
name|ByteBuf
argument_list|>
block|{
annotation|@
name|Override
DECL|method|decode (ChannelHandlerContext ctx, ByteBuf msg, List<Object> out)
specifier|protected
name|void
name|decode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ByteBuf
name|msg
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|out
parameter_list|)
throws|throws
name|Exception
block|{
comment|// it may be empty, then return null
if|if
condition|(
name|msg
operator|.
name|isReadable
argument_list|()
condition|)
block|{
comment|// ByteBuf may not expose array method for accessing the under layer bytes
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|msg
operator|.
name|readableBytes
argument_list|()
index|]
decl_stmt|;
name|int
name|readerIndex
init|=
name|msg
operator|.
name|readerIndex
argument_list|()
decl_stmt|;
name|msg
operator|.
name|getBytes
argument_list|(
name|readerIndex
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|add
argument_list|(
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|ChannelHandler
operator|.
name|Sharable
DECL|class|BytesEncoder
specifier|public
specifier|static
class|class
name|BytesEncoder
extends|extends
name|MessageToMessageEncoder
argument_list|<
name|byte
index|[]
argument_list|>
block|{
annotation|@
name|Override
DECL|method|encode (ChannelHandlerContext ctx, byte[] msg, List<Object> out)
specifier|protected
name|void
name|encode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|byte
index|[]
name|msg
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
name|msg
decl_stmt|;
name|ByteBuf
name|buf
init|=
name|ByteBufAllocator
operator|.
name|DEFAULT
operator|.
name|buffer
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|buf
operator|.
name|writeBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

