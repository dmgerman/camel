begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty4
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|Unpooled
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|AddressedEnvelope
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|DefaultAddressedEnvelope
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|embedded
operator|.
name|EmbeddedChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|DatagramPacketByteArrayCodecTest
specifier|public
class|class
name|DatagramPacketByteArrayCodecTest
block|{
DECL|field|VALUE
specifier|private
specifier|static
specifier|final
name|String
name|VALUE
init|=
literal|"~!Camel rocks@%"
decl_stmt|;
annotation|@
name|Test
DECL|method|testDecoder ()
specifier|public
name|void
name|testDecoder
parameter_list|()
block|{
name|ByteBuf
name|buf
init|=
name|Unpooled
operator|.
name|buffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|writeBytes
argument_list|(
name|VALUE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuf
name|input
init|=
name|buf
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|AddressedEnvelope
argument_list|<
name|Object
argument_list|,
name|InetSocketAddress
argument_list|>
name|addressedEnvelop
init|=
operator|new
name|DefaultAddressedEnvelope
argument_list|<>
argument_list|(
name|input
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|8888
argument_list|)
argument_list|)
decl_stmt|;
name|EmbeddedChannel
name|channel
init|=
operator|new
name|EmbeddedChannel
argument_list|(
name|ChannelHandlerFactories
operator|.
name|newByteArrayDecoder
argument_list|(
literal|"udp"
argument_list|)
operator|.
name|newChannelHandler
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|channel
operator|.
name|writeInbound
argument_list|(
name|addressedEnvelop
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|channel
operator|.
name|finish
argument_list|()
argument_list|)
expr_stmt|;
name|AddressedEnvelope
argument_list|<
name|Object
argument_list|,
name|InetSocketAddress
argument_list|>
name|result
init|=
operator|(
name|AddressedEnvelope
operator|)
name|channel
operator|.
name|readInbound
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|recipient
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
name|addressedEnvelop
operator|.
name|recipient
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|content
argument_list|()
operator|instanceof
name|byte
index|[]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VALUE
argument_list|,
operator|new
name|String
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|result
operator|.
name|content
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|channel
operator|.
name|readInbound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEncoder ()
specifier|public
name|void
name|testEncoder
parameter_list|()
block|{
name|ByteBuf
name|buf
init|=
name|Unpooled
operator|.
name|buffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|writeBytes
argument_list|(
name|VALUE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|AddressedEnvelope
argument_list|<
name|Object
argument_list|,
name|InetSocketAddress
argument_list|>
name|addressedEnvelop
init|=
operator|new
name|DefaultAddressedEnvelope
argument_list|<>
argument_list|(
name|VALUE
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|8888
argument_list|)
argument_list|)
decl_stmt|;
name|EmbeddedChannel
name|channel
init|=
operator|new
name|EmbeddedChannel
argument_list|(
name|ChannelHandlerFactories
operator|.
name|newByteArrayEncoder
argument_list|(
literal|"udp"
argument_list|)
operator|.
name|newChannelHandler
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|channel
operator|.
name|writeOutbound
argument_list|(
name|addressedEnvelop
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|channel
operator|.
name|finish
argument_list|()
argument_list|)
expr_stmt|;
name|AddressedEnvelope
name|output
init|=
operator|(
name|AddressedEnvelope
operator|)
name|channel
operator|.
name|readOutbound
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|output
operator|.
name|content
argument_list|()
operator|instanceof
name|ByteBuf
argument_list|)
expr_stmt|;
name|ByteBuf
name|resultContent
init|=
operator|(
name|ByteBuf
operator|)
name|output
operator|.
name|content
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VALUE
argument_list|,
operator|new
name|String
argument_list|(
name|resultContent
operator|.
name|array
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|channel
operator|.
name|readOutbound
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

