begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty4
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|Delimiters
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|CharsetUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|NettyManualEndpointTest
specifier|public
class|class
name|NettyManualEndpointTest
extends|extends
name|BaseNettyTest
block|{
DECL|field|endpoint
specifier|private
name|NettyEndpoint
name|endpoint
decl_stmt|;
annotation|@
name|Test
DECL|method|testNettyManaul ()
specifier|public
name|void
name|testNettyManaul
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|endpoint
argument_list|,
literal|"Hello World\n"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"netty4:tcp://localhost:"
operator|+
name|getPort
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|NettyConfiguration
name|nettyConfig
init|=
operator|new
name|NettyConfiguration
argument_list|()
decl_stmt|;
name|nettyConfig
operator|.
name|setProtocol
argument_list|(
literal|"tcp"
argument_list|)
expr_stmt|;
name|nettyConfig
operator|.
name|setHost
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|nettyConfig
operator|.
name|setPort
argument_list|(
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|nettyConfig
operator|.
name|setSync
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// need to add encoders and decoders manually
name|nettyConfig
operator|.
name|setEncoder
argument_list|(
name|ChannelHandlerFactories
operator|.
name|newStringEncoder
argument_list|(
name|CharsetUtil
operator|.
name|UTF_8
argument_list|,
literal|"tcp"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChannelHandler
argument_list|>
name|decoders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|decoders
operator|.
name|add
argument_list|(
name|ChannelHandlerFactories
operator|.
name|newDelimiterBasedFrameDecoder
argument_list|(
literal|1000
argument_list|,
name|Delimiters
operator|.
name|lineDelimiter
argument_list|()
argument_list|,
literal|"tcp"
argument_list|)
argument_list|)
expr_stmt|;
name|decoders
operator|.
name|add
argument_list|(
name|ChannelHandlerFactories
operator|.
name|newStringDecoder
argument_list|(
name|CharsetUtil
operator|.
name|UTF_8
argument_list|,
literal|"tcp"
argument_list|)
argument_list|)
expr_stmt|;
name|nettyConfig
operator|.
name|setDecoders
argument_list|(
name|decoders
argument_list|)
expr_stmt|;
comment|// create and start component
name|NettyComponent
name|component
init|=
operator|new
name|NettyComponent
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|component
operator|.
name|setConfiguration
argument_list|(
name|nettyConfig
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addComponent
argument_list|(
literal|"netty4"
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|component
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// create and start endpoint, pass in null as endpoint uri
comment|// as we create this endpoint manually
name|endpoint
operator|=
operator|new
name|NettyEndpoint
argument_list|(
literal|null
argument_list|,
name|component
argument_list|,
name|nettyConfig
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|start
argument_list|()
expr_stmt|;
name|from
argument_list|(
name|endpoint
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

