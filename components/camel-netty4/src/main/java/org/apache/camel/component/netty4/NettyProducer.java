begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty4
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|Bootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ChannelFactory
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelOption
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|ChannelGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|ChannelGroupFuture
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|DefaultChannelGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioDatagramChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|HashedWheelTimer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ImmediateEventExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultAsyncProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool
operator|.
name|ObjectPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool
operator|.
name|PoolableObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool
operator|.
name|impl
operator|.
name|GenericObjectPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|NettyProducer
specifier|public
class|class
name|NettyProducer
extends|extends
name|DefaultAsyncProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NettyProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|allChannels
specifier|private
specifier|final
name|ChannelGroup
name|allChannels
init|=
operator|new
name|DefaultChannelGroup
argument_list|(
literal|"NettyProducer"
argument_list|,
name|ImmediateEventExecutor
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
DECL|field|configuration
specifier|private
name|NettyConfiguration
name|configuration
decl_stmt|;
DECL|field|pipelineFactory
specifier|private
name|ClientPipelineFactory
name|pipelineFactory
decl_stmt|;
DECL|field|noReplyLogger
specifier|private
name|CamelLogger
name|noReplyLogger
decl_stmt|;
DECL|field|workerGroup
specifier|private
name|EventLoopGroup
name|workerGroup
decl_stmt|;
DECL|field|pool
specifier|private
name|ObjectPool
argument_list|<
name|Channel
argument_list|>
name|pool
decl_stmt|;
DECL|field|timer
specifier|private
name|Timer
name|timer
decl_stmt|;
DECL|field|nettyCamelStatesMap
specifier|private
name|Map
argument_list|<
name|Channel
argument_list|,
name|NettyCamelState
argument_list|>
name|nettyCamelStatesMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Channel
argument_list|,
name|NettyCamelState
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|NettyProducer (NettyEndpoint nettyEndpoint, NettyConfiguration configuration)
specifier|public
name|NettyProducer
parameter_list|(
name|NettyEndpoint
name|nettyEndpoint
parameter_list|,
name|NettyConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|nettyEndpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|this
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
expr_stmt|;
name|this
operator|.
name|noReplyLogger
operator|=
operator|new
name|CamelLogger
argument_list|(
name|LOG
argument_list|,
name|configuration
operator|.
name|getNoReplyLogLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|NettyEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|NettyEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getContext ()
specifier|public
name|CamelContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
DECL|method|isTcp ()
specifier|protected
name|boolean
name|isTcp
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getProtocol
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"tcp"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isProducerPoolEnabled
argument_list|()
condition|)
block|{
comment|// setup pool where we want an unbounded pool, which allows the pool to shrink on no demand
name|GenericObjectPool
operator|.
name|Config
name|config
init|=
operator|new
name|GenericObjectPool
operator|.
name|Config
argument_list|()
decl_stmt|;
name|config
operator|.
name|maxActive
operator|=
name|configuration
operator|.
name|getProducerPoolMaxActive
argument_list|()
expr_stmt|;
name|config
operator|.
name|minIdle
operator|=
name|configuration
operator|.
name|getProducerPoolMinIdle
argument_list|()
expr_stmt|;
name|config
operator|.
name|maxIdle
operator|=
name|configuration
operator|.
name|getProducerPoolMaxIdle
argument_list|()
expr_stmt|;
comment|// we should test on borrow to ensure the channel is still valid
name|config
operator|.
name|testOnBorrow
operator|=
literal|true
expr_stmt|;
comment|// only evict channels which are no longer valid
name|config
operator|.
name|testWhileIdle
operator|=
literal|true
expr_stmt|;
comment|// run eviction every 30th second
name|config
operator|.
name|timeBetweenEvictionRunsMillis
operator|=
literal|30
operator|*
literal|1000L
expr_stmt|;
name|config
operator|.
name|minEvictableIdleTimeMillis
operator|=
name|configuration
operator|.
name|getProducerPoolMinEvictableIdle
argument_list|()
expr_stmt|;
name|config
operator|.
name|whenExhaustedAction
operator|=
name|GenericObjectPool
operator|.
name|WHEN_EXHAUSTED_FAIL
expr_stmt|;
name|pool
operator|=
operator|new
name|GenericObjectPool
argument_list|<
name|Channel
argument_list|>
argument_list|(
operator|new
name|NettyProducerPoolableObjectFactory
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created NettyProducer pool[maxActive={}, minIdle={}, maxIdle={}, minEvictableIdleTimeMillis={}] -> {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|config
operator|.
name|maxActive
block|,
name|config
operator|.
name|minIdle
block|,
name|config
operator|.
name|maxIdle
block|,
name|config
operator|.
name|minEvictableIdleTimeMillis
block|,
name|pool
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|pool
operator|=
operator|new
name|SharedSingletonObjectPool
argument_list|<
name|Channel
argument_list|>
argument_list|(
operator|new
name|NettyProducerPoolableObjectFactory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Created NettyProducer shared singleton pool -> {}"
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
block|}
name|timer
operator|=
operator|new
name|HashedWheelTimer
argument_list|()
expr_stmt|;
comment|// setup pipeline factory
name|ClientPipelineFactory
name|factory
init|=
name|configuration
operator|.
name|getClientPipelineFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
name|pipelineFactory
operator|=
name|factory
operator|.
name|createPipelineFactory
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pipelineFactory
operator|=
operator|new
name|DefaultClientPipelineFactory
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|configuration
operator|.
name|isLazyChannelCreation
argument_list|()
condition|)
block|{
comment|// ensure the connection can be established when we start up
name|Channel
name|channel
init|=
name|pool
operator|.
name|borrowObject
argument_list|()
decl_stmt|;
name|pool
operator|.
name|returnObject
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopping producer at address: {}"
argument_list|,
name|configuration
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|// close all channels
name|LOG
operator|.
name|trace
argument_list|(
literal|"Closing {} channels"
argument_list|,
name|allChannels
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ChannelGroupFuture
name|future
init|=
name|allChannels
operator|.
name|close
argument_list|()
decl_stmt|;
name|future
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
comment|// and then shutdown the thread pools
if|if
condition|(
name|workerGroup
operator|!=
literal|null
condition|)
block|{
name|workerGroup
operator|.
name|shutdownGracefully
argument_list|()
expr_stmt|;
name|workerGroup
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopping producer with channel pool[active={}, idle={}]"
argument_list|,
name|pool
operator|.
name|getNumActive
argument_list|()
argument_list|,
name|pool
operator|.
name|getNumIdle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pool
operator|.
name|close
argument_list|()
expr_stmt|;
name|pool
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|timer
operator|!=
literal|null
condition|)
block|{
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|timer
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|process (final Exchange exchange, AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isRunAllowed
argument_list|()
condition|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|RejectedExecutionException
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|Object
name|body
decl_stmt|;
try|try
block|{
name|body
operator|=
name|getRequestBody
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
name|noReplyLogger
operator|.
name|log
argument_list|(
literal|"No payload to send for exchange: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// set the exchange encoding property
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|getCharsetName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
name|IOHelper
operator|.
name|normalizeCharset
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getCharsetName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Pool[active={}, idle={}]"
argument_list|,
name|pool
operator|.
name|getNumActive
argument_list|()
argument_list|,
name|pool
operator|.
name|getNumIdle
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// get a channel from the pool
name|Channel
name|existing
decl_stmt|;
try|try
block|{
name|existing
operator|=
name|pool
operator|.
name|borrowObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Got channel from pool {}"
argument_list|,
name|existing
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// we must have a channel
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|CamelExchangeException
argument_list|(
literal|"Cannot get channel from pool"
argument_list|,
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// need to declare as final
specifier|final
name|Channel
name|channel
init|=
name|existing
decl_stmt|;
specifier|final
name|AsyncCallback
name|producerCallback
init|=
operator|new
name|NettyProducerCallback
argument_list|(
name|channel
argument_list|,
name|callback
argument_list|)
decl_stmt|;
comment|// setup state as attachment on the channel, so we can access the state later when needed
name|putState
argument_list|(
name|channel
argument_list|,
operator|new
name|NettyCamelState
argument_list|(
name|producerCallback
argument_list|,
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
comment|// write body
name|NettyHelper
operator|.
name|writeBodyAsync
argument_list|(
name|LOG
argument_list|,
name|channel
argument_list|,
literal|null
argument_list|,
name|body
argument_list|,
name|exchange
argument_list|,
operator|new
name|ChannelFutureListener
argument_list|()
block|{
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|channelFuture
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Operation complete {}"
argument_list|,
name|channelFuture
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|channelFuture
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
comment|// no success the set the caused exception and signal callback and break
name|exchange
operator|.
name|setException
argument_list|(
name|channelFuture
operator|.
name|cause
argument_list|()
argument_list|)
expr_stmt|;
name|producerCallback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// if we do not expect any reply then signal callback to continue routing
if|if
condition|(
operator|!
name|configuration
operator|.
name|isSync
argument_list|()
condition|)
block|{
try|try
block|{
comment|// should channel be closed after complete?
name|Boolean
name|close
decl_stmt|;
if|if
condition|(
name|ExchangeHelper
operator|.
name|isOutCapable
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|close
operator|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|NettyConstants
operator|.
name|NETTY_CLOSE_CHANNEL_WHEN_COMPLETE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|close
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|NettyConstants
operator|.
name|NETTY_CLOSE_CHANNEL_WHEN_COMPLETE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// should we disconnect, the header can override the configuration
name|boolean
name|disconnect
init|=
name|getConfiguration
argument_list|()
operator|.
name|isDisconnect
argument_list|()
decl_stmt|;
if|if
condition|(
name|close
operator|!=
literal|null
condition|)
block|{
name|disconnect
operator|=
name|close
expr_stmt|;
block|}
if|if
condition|(
name|disconnect
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Closing channel when complete at address: {}"
argument_list|,
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|NettyHelper
operator|.
name|close
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// signal callback to continue routing
name|producerCallback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// continue routing asynchronously
return|return
literal|false
return|;
block|}
comment|/**      * Gets the object we want to use as the request object for sending to netty.      *      * @param exchange the exchange      * @return the object to use as request      * @throws Exception is thrown if error getting the request body      */
DECL|method|getRequestBody (Exchange exchange)
specifier|protected
name|Object
name|getRequestBody
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|body
init|=
name|NettyPayloadHelper
operator|.
name|getIn
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// if textline enabled then covert to a String which must be used for textline
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|isTextline
argument_list|()
condition|)
block|{
name|body
operator|=
name|NettyHelper
operator|.
name|getTextlineBody
argument_list|(
name|body
argument_list|,
name|exchange
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getDelimiter
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|isAutoAppendDelimiter
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|body
return|;
block|}
comment|/**      * To get the {@link NettyCamelState} from the given channel.      */
DECL|method|getState (Channel channel)
specifier|public
name|NettyCamelState
name|getState
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
return|return
name|nettyCamelStatesMap
operator|.
name|get
argument_list|(
name|channel
argument_list|)
return|;
block|}
comment|/**      * To remove the {@link NettyCamelState} stored on the channel,      * when no longer needed      */
DECL|method|removeState (Channel channel)
specifier|public
name|void
name|removeState
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
name|nettyCamelStatesMap
operator|.
name|remove
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
comment|/**      * Put the {@link NettyCamelState} into the map use the given channel as the key      */
DECL|method|putState (Channel channel, NettyCamelState state)
specifier|public
name|void
name|putState
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|NettyCamelState
name|state
parameter_list|)
block|{
name|nettyCamelStatesMap
operator|.
name|put
argument_list|(
name|channel
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
DECL|method|getWorkerGroup ()
specifier|protected
name|EventLoopGroup
name|getWorkerGroup
parameter_list|()
block|{
comment|// prefer using explicit configured thread pools
name|EventLoopGroup
name|wg
init|=
name|configuration
operator|.
name|getWorkerGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|wg
operator|==
literal|null
condition|)
block|{
comment|// create new pool which we should shutdown when stopping as its not
comment|// shared
name|workerGroup
operator|=
operator|new
name|NettyWorkerPoolBuilder
argument_list|()
operator|.
name|withWorkerCount
argument_list|(
name|configuration
operator|.
name|getWorkerCount
argument_list|()
argument_list|)
operator|.
name|withName
argument_list|(
literal|"NettyClientTCPWorker"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|wg
operator|=
name|workerGroup
expr_stmt|;
block|}
return|return
name|wg
return|;
block|}
DECL|method|openConnection ()
specifier|protected
name|ChannelFuture
name|openConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|ChannelFuture
name|answer
decl_stmt|;
if|if
condition|(
name|isTcp
argument_list|()
condition|)
block|{
comment|// its okay to create a new bootstrap for each new channel
name|Bootstrap
name|clientBootstrap
init|=
operator|new
name|Bootstrap
argument_list|()
decl_stmt|;
name|clientBootstrap
operator|.
name|channel
argument_list|(
name|NioSocketChannel
operator|.
name|class
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|group
argument_list|(
name|getWorkerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_KEEPALIVE
argument_list|,
name|configuration
operator|.
name|isKeepAlive
argument_list|()
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|TCP_NODELAY
argument_list|,
name|configuration
operator|.
name|isTcpNoDelay
argument_list|()
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_REUSEADDR
argument_list|,
name|configuration
operator|.
name|isReuseAddress
argument_list|()
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|CONNECT_TIMEOUT_MILLIS
argument_list|,
name|configuration
operator|.
name|getConnectTimeout
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO need to check it later
comment|// set any additional netty options
comment|/*             if (configuration.getOptions() != null) {                 for (Map.Entry<String, Object> entry : configuration.getOptions().entrySet()) {                     clientBootstrap.setOption(entry.getKey(), entry.getValue());                 }             }*/
comment|// set the pipeline factory, which creates the pipeline for each newly created channels
name|clientBootstrap
operator|.
name|handler
argument_list|(
name|pipelineFactory
argument_list|)
expr_stmt|;
name|answer
operator|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created new TCP client bootstrap connecting to {}:{} with options: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|configuration
operator|.
name|getHost
argument_list|()
block|,
name|configuration
operator|.
name|getPort
argument_list|()
block|,
name|clientBootstrap
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
else|else
block|{
comment|// its okay to create a new bootstrap for each new channel
name|Bootstrap
name|connectionlessClientBootstrap
init|=
operator|new
name|Bootstrap
argument_list|()
decl_stmt|;
name|connectionlessClientBootstrap
operator|.
name|channel
argument_list|(
name|NioDatagramChannel
operator|.
name|class
argument_list|)
expr_stmt|;
name|connectionlessClientBootstrap
operator|.
name|group
argument_list|(
name|getWorkerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|connectionlessClientBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_KEEPALIVE
argument_list|,
name|configuration
operator|.
name|isKeepAlive
argument_list|()
argument_list|)
expr_stmt|;
name|connectionlessClientBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_REUSEADDR
argument_list|,
name|configuration
operator|.
name|isReuseAddress
argument_list|()
argument_list|)
expr_stmt|;
name|connectionlessClientBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|CONNECT_TIMEOUT_MILLIS
argument_list|,
name|configuration
operator|.
name|getConnectTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|connectionlessClientBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_BROADCAST
argument_list|,
name|configuration
operator|.
name|isBroadcast
argument_list|()
argument_list|)
expr_stmt|;
name|connectionlessClientBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_SNDBUF
argument_list|,
name|configuration
operator|.
name|getSendBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|connectionlessClientBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_RCVBUF
argument_list|,
name|configuration
operator|.
name|getReceiveBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO need to check it later
comment|// set any additional netty options
comment|/*             if (configuration.getOptions() != null) {                 for (Map.Entry<String, Object> entry : configuration.getOptions().entrySet()) {                     connectionlessClientBootstrap.setOption(entry.getKey(), entry.getValue());                 }             }*/
comment|// set the pipeline factory, which creates the pipeline for each newly created channels
name|connectionlessClientBootstrap
operator|.
name|handler
argument_list|(
name|pipelineFactory
argument_list|)
expr_stmt|;
comment|// bind and store channel so we can close it when stopping
name|ChannelFuture
name|channelFuture
init|=
name|connectionlessClientBootstrap
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|channelFuture
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
name|Channel
name|channel
init|=
name|channelFuture
operator|.
name|channel
argument_list|()
decl_stmt|;
name|allChannels
operator|.
name|add
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|answer
operator|=
name|connectionlessClientBootstrap
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created new UDP client bootstrap connecting to {}:{} with options: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|configuration
operator|.
name|getHost
argument_list|()
block|,
name|configuration
operator|.
name|getPort
argument_list|()
block|,
name|connectionlessClientBootstrap
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
DECL|method|openChannel (ChannelFuture channelFuture)
specifier|protected
name|Channel
name|openChannel
parameter_list|(
name|ChannelFuture
name|channelFuture
parameter_list|)
throws|throws
name|Exception
block|{
comment|// blocking for channel to be done
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Waiting for operation to complete {} for {} millis"
argument_list|,
name|channelFuture
argument_list|,
name|configuration
operator|.
name|getConnectTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// here we need to wait it in other thread
specifier|final
name|CountDownLatch
name|channelLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|channelFuture
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelFutureListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|cf
parameter_list|)
throws|throws
name|Exception
block|{
name|channelLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|channelLatch
operator|.
name|await
argument_list|(
name|configuration
operator|.
name|getConnectTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CamelException
argument_list|(
literal|"Interrupted while waiting for "
operator|+
literal|"connection to "
operator|+
name|configuration
operator|.
name|getAddress
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|channelFuture
operator|.
name|isDone
argument_list|()
operator|||
operator|!
name|channelFuture
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|ConnectException
name|cause
init|=
operator|new
name|ConnectException
argument_list|(
literal|"Cannot connect to "
operator|+
name|configuration
operator|.
name|getAddress
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|channelFuture
operator|.
name|cause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cause
operator|.
name|initCause
argument_list|(
name|channelFuture
operator|.
name|cause
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|cause
throw|;
block|}
name|Channel
name|answer
init|=
name|channelFuture
operator|.
name|channel
argument_list|()
decl_stmt|;
comment|// to keep track of all channels in use
name|allChannels
operator|.
name|add
argument_list|(
name|answer
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating connector to address: {}"
argument_list|,
name|configuration
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|NettyConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (NettyConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|NettyConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getAllChannels ()
specifier|public
name|ChannelGroup
name|getAllChannels
parameter_list|()
block|{
return|return
name|allChannels
return|;
block|}
comment|/**      * Callback that ensures the channel is returned to the pool when we are done.      */
DECL|class|NettyProducerCallback
specifier|private
specifier|final
class|class
name|NettyProducerCallback
implements|implements
name|AsyncCallback
block|{
DECL|field|channel
specifier|private
specifier|final
name|Channel
name|channel
decl_stmt|;
DECL|field|callback
specifier|private
specifier|final
name|AsyncCallback
name|callback
decl_stmt|;
DECL|method|NettyProducerCallback (Channel channel, AsyncCallback callback)
specifier|private
name|NettyProducerCallback
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|done (boolean doneSync)
specifier|public
name|void
name|done
parameter_list|(
name|boolean
name|doneSync
parameter_list|)
block|{
comment|// put back in pool
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Putting channel back to pool {}"
argument_list|,
name|channel
argument_list|)
expr_stmt|;
name|pool
operator|.
name|returnObject
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error returning channel to pool {}. This exception will be ignored."
argument_list|,
name|channel
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// ensure we call the delegated callback
name|callback
operator|.
name|done
argument_list|(
name|doneSync
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Object factory to create {@link Channel} used by the pool.      */
DECL|class|NettyProducerPoolableObjectFactory
specifier|private
specifier|final
class|class
name|NettyProducerPoolableObjectFactory
implements|implements
name|PoolableObjectFactory
argument_list|<
name|Channel
argument_list|>
block|{
annotation|@
name|Override
DECL|method|makeObject ()
specifier|public
name|Channel
name|makeObject
parameter_list|()
throws|throws
name|Exception
block|{
name|ChannelFuture
name|channelFuture
init|=
name|openConnection
argument_list|()
decl_stmt|;
name|Channel
name|answer
init|=
name|openChannel
argument_list|(
name|channelFuture
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Created channel: {}"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|destroyObject (Channel channel)
specifier|public
name|void
name|destroyObject
parameter_list|(
name|Channel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Destroying channel: {}"
argument_list|,
name|channel
argument_list|)
expr_stmt|;
name|NettyHelper
operator|.
name|close
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|allChannels
operator|.
name|remove
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validateObject (Channel channel)
specifier|public
name|boolean
name|validateObject
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
comment|// we need a connected channel to be valid
name|boolean
name|answer
init|=
name|channel
operator|.
name|isActive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Validating channel: {} -> {}"
argument_list|,
name|channel
argument_list|,
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|activateObject (Channel channel)
specifier|public
name|void
name|activateObject
parameter_list|(
name|Channel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|passivateObject (Channel channel)
specifier|public
name|void
name|passivateObject
parameter_list|(
name|Channel
name|channel
parameter_list|)
throws|throws
name|Exception
block|{
comment|// noop
block|}
block|}
block|}
end_class

end_unit

