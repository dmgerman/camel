begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty4
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangeTimedOutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TimeoutMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultTimeoutMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A base class for using {@link NettyCamelStateCorrelationManager} that supports timeout.  */
end_comment

begin_class
DECL|class|TimeoutCorrelationManagerSupport
specifier|public
specifier|abstract
class|class
name|TimeoutCorrelationManagerSupport
extends|extends
name|ServiceSupport
implements|implements
name|CamelContextAware
implements|,
name|NettyCamelStateCorrelationManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimeoutCorrelationManagerSupport
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|scheduledExecutorService
specifier|private
specifier|volatile
name|ScheduledExecutorService
name|scheduledExecutorService
decl_stmt|;
DECL|field|stopScheduledExecutorService
specifier|private
specifier|volatile
name|boolean
name|stopScheduledExecutorService
decl_stmt|;
DECL|field|workerPool
specifier|private
specifier|volatile
name|ExecutorService
name|workerPool
decl_stmt|;
DECL|field|stopWorkerPool
specifier|private
specifier|volatile
name|boolean
name|stopWorkerPool
decl_stmt|;
DECL|field|map
specifier|private
specifier|volatile
name|TimeoutMap
argument_list|<
name|String
argument_list|,
name|NettyCamelState
argument_list|>
name|map
decl_stmt|;
DECL|field|timeoutLogger
specifier|private
specifier|volatile
name|CamelLogger
name|timeoutLogger
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|timeout
specifier|private
name|long
name|timeout
init|=
literal|30000
decl_stmt|;
DECL|field|timeoutChecker
specifier|private
name|long
name|timeoutChecker
init|=
literal|1000
decl_stmt|;
DECL|field|timeoutLoggingLevel
specifier|private
name|LoggingLevel
name|timeoutLoggingLevel
init|=
name|LoggingLevel
operator|.
name|DEBUG
decl_stmt|;
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|getTimeout ()
specifier|public
name|long
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
comment|/**      * Sets timeout value in millis seconds. The default value is 30000 (30 seconds).      */
DECL|method|setTimeout (long timeout)
specifier|public
name|void
name|setTimeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
DECL|method|getTimeoutChecker ()
specifier|public
name|long
name|getTimeoutChecker
parameter_list|()
block|{
return|return
name|timeoutChecker
return|;
block|}
comment|/**      * Time in millis how frequent to check for timeouts. Set this to a lower value if you want      * to react faster upon timeouts. The default value is 1000.      */
DECL|method|setTimeoutChecker (long timeoutChecker)
specifier|public
name|void
name|setTimeoutChecker
parameter_list|(
name|long
name|timeoutChecker
parameter_list|)
block|{
name|this
operator|.
name|timeoutChecker
operator|=
name|timeoutChecker
expr_stmt|;
block|}
DECL|method|getTimeoutLoggingLevel ()
specifier|public
name|LoggingLevel
name|getTimeoutLoggingLevel
parameter_list|()
block|{
return|return
name|timeoutLoggingLevel
return|;
block|}
comment|/**      * Sets the logging level to use when a timeout was hit.      */
DECL|method|setTimeoutLoggingLevel (LoggingLevel timeoutLoggingLevel)
specifier|public
name|void
name|setTimeoutLoggingLevel
parameter_list|(
name|LoggingLevel
name|timeoutLoggingLevel
parameter_list|)
block|{
name|this
operator|.
name|timeoutLoggingLevel
operator|=
name|timeoutLoggingLevel
expr_stmt|;
block|}
DECL|method|getWorkerPool ()
specifier|public
name|ExecutorService
name|getWorkerPool
parameter_list|()
block|{
return|return
name|workerPool
return|;
block|}
comment|/**      * To use a shared worker pool for processing timed out requests.      */
DECL|method|setWorkerPool (ExecutorService workerPool)
specifier|public
name|void
name|setWorkerPool
parameter_list|(
name|ExecutorService
name|workerPool
parameter_list|)
block|{
name|this
operator|.
name|workerPool
operator|=
name|workerPool
expr_stmt|;
block|}
comment|/**      * Implement this method to extract the correaltion id from the request message body.      */
DECL|method|getRequestCorrelationId (Object request)
specifier|public
specifier|abstract
name|String
name|getRequestCorrelationId
parameter_list|(
name|Object
name|request
parameter_list|)
function_decl|;
comment|/**      * Implement this method to extract the correaltion id from the response message body.      */
DECL|method|getResponseCorrelationId (Object response)
specifier|public
specifier|abstract
name|String
name|getResponseCorrelationId
parameter_list|(
name|Object
name|response
parameter_list|)
function_decl|;
comment|/**      * Override this to implement a custom timeout response message.      *      * @param correlationId  the correlation id      * @param request        the request message      * @return the response message or<tt>null</tt> to use an {@link ExchangeTimedOutException} exception.      */
DECL|method|getTimeoutResponse (String correlationId, Object request)
specifier|public
name|String
name|getTimeoutResponse
parameter_list|(
name|String
name|correlationId
parameter_list|,
name|Object
name|request
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|putState (Channel channel, NettyCamelState state)
specifier|public
name|void
name|putState
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|NettyCamelState
name|state
parameter_list|)
block|{
comment|// grab the correlation id
name|Object
name|body
init|=
name|state
operator|.
name|getExchange
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
comment|// the correlation id is the first part of the message
name|String
name|cid
init|=
name|getRequestCorrelationId
argument_list|(
name|body
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|cid
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"CorrelationID is missing"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"putState({}) on channel: {}"
argument_list|,
name|cid
argument_list|,
name|channel
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|cid
argument_list|,
name|state
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeState (ChannelHandlerContext ctx, Channel channel)
specifier|public
name|void
name|removeState
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|channel
parameter_list|)
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|getState (ChannelHandlerContext ctx, Channel channel, Object msg)
specifier|public
name|NettyCamelState
name|getState
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|Object
name|msg
parameter_list|)
block|{
name|String
name|cid
init|=
name|getResponseCorrelationId
argument_list|(
name|msg
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|cid
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"CorrelationID is missing from response message."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"getState({}) on channel: {}"
argument_list|,
name|cid
argument_list|,
name|channel
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
comment|// lets remove after use as its no longer needed
return|return
name|map
operator|.
name|remove
argument_list|(
name|cid
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getState (ChannelHandlerContext ctx, Channel channel, Throwable cause)
specifier|public
name|NettyCamelState
name|getState
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
comment|// noop
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"CamelContext"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|timeoutLogger
operator|=
operator|new
name|CamelLogger
argument_list|(
name|LOG
argument_list|,
name|timeoutLoggingLevel
argument_list|)
expr_stmt|;
if|if
condition|(
name|scheduledExecutorService
operator|==
literal|null
condition|)
block|{
name|scheduledExecutorService
operator|=
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
name|this
argument_list|,
literal|"NettyTimeoutCorrelationManager"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|workerPool
operator|==
literal|null
condition|)
block|{
name|workerPool
operator|=
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newDefaultThreadPool
argument_list|(
name|this
argument_list|,
literal|"NettyTimeoutWorkerPool"
argument_list|)
expr_stmt|;
block|}
name|map
operator|=
operator|new
name|NettyStateTimeoutMap
argument_list|(
name|scheduledExecutorService
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|map
argument_list|)
expr_stmt|;
if|if
condition|(
name|scheduledExecutorService
operator|!=
literal|null
operator|&&
name|stopScheduledExecutorService
condition|)
block|{
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdown
argument_list|(
name|scheduledExecutorService
argument_list|)
expr_stmt|;
name|scheduledExecutorService
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|workerPool
operator|!=
literal|null
operator|&&
name|stopWorkerPool
condition|)
block|{
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdown
argument_list|(
name|workerPool
argument_list|)
expr_stmt|;
name|workerPool
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|protected
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopAndShutdownService
argument_list|(
name|map
argument_list|)
expr_stmt|;
if|if
condition|(
name|scheduledExecutorService
operator|!=
literal|null
operator|&&
name|stopScheduledExecutorService
condition|)
block|{
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdown
argument_list|(
name|scheduledExecutorService
argument_list|)
expr_stmt|;
name|scheduledExecutorService
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|workerPool
operator|!=
literal|null
operator|&&
name|stopWorkerPool
condition|)
block|{
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdown
argument_list|(
name|workerPool
argument_list|)
expr_stmt|;
name|workerPool
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|class|NettyStateTimeoutMap
specifier|private
specifier|final
class|class
name|NettyStateTimeoutMap
extends|extends
name|DefaultTimeoutMap
argument_list|<
name|String
argument_list|,
name|NettyCamelState
argument_list|>
block|{
DECL|method|NettyStateTimeoutMap (ScheduledExecutorService executor)
name|NettyStateTimeoutMap
parameter_list|(
name|ScheduledExecutorService
name|executor
parameter_list|)
block|{
name|super
argument_list|(
name|executor
argument_list|,
name|timeoutChecker
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onEviction (String key, NettyCamelState value)
specifier|public
name|boolean
name|onEviction
parameter_list|(
name|String
name|key
parameter_list|,
name|NettyCamelState
name|value
parameter_list|)
block|{
name|timeoutLogger
operator|.
name|log
argument_list|(
literal|"Timeout of correlation id: "
operator|+
name|key
argument_list|)
expr_stmt|;
name|workerPool
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
name|Exchange
name|exchange
init|=
name|value
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|AsyncCallback
name|callback
init|=
name|value
operator|.
name|getCallback
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchange
operator|!=
literal|null
operator|&&
name|callback
operator|!=
literal|null
condition|)
block|{
name|Object
name|timeoutBody
init|=
name|getTimeoutResponse
argument_list|(
name|key
argument_list|,
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeoutBody
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|setBody
argument_list|(
name|timeoutBody
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|ExchangeTimedOutException
argument_list|(
name|exchange
argument_list|,
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

