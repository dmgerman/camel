begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty4
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|Bootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelOption
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoop
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioSocketChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A {@link NettyServerBootstrapFactory} which is used by a single consumer (not shared).  */
end_comment

begin_class
DECL|class|ClientModeTCPNettyServerBootstrapFactory
specifier|public
class|class
name|ClientModeTCPNettyServerBootstrapFactory
extends|extends
name|ServiceSupport
implements|implements
name|NettyServerBootstrapFactory
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClientModeTCPNettyServerBootstrapFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|threadFactory
specifier|private
name|ThreadFactory
name|threadFactory
decl_stmt|;
DECL|field|configuration
specifier|private
name|NettyServerBootstrapConfiguration
name|configuration
decl_stmt|;
DECL|field|pipelineFactory
specifier|private
name|ChannelInitializer
argument_list|<
name|Channel
argument_list|>
name|pipelineFactory
decl_stmt|;
DECL|field|clientBootstrap
specifier|private
name|Bootstrap
name|clientBootstrap
decl_stmt|;
DECL|field|channel
specifier|private
name|Channel
name|channel
decl_stmt|;
DECL|field|workerGroup
specifier|private
name|EventLoopGroup
name|workerGroup
decl_stmt|;
DECL|method|ClientModeTCPNettyServerBootstrapFactory ()
specifier|public
name|ClientModeTCPNettyServerBootstrapFactory
parameter_list|()
block|{     }
DECL|method|init (CamelContext camelContext, NettyServerBootstrapConfiguration configuration, ChannelInitializer<Channel> pipelineFactory)
specifier|public
name|void
name|init
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|NettyServerBootstrapConfiguration
name|configuration
parameter_list|,
name|ChannelInitializer
argument_list|<
name|Channel
argument_list|>
name|pipelineFactory
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|pipelineFactory
operator|=
name|pipelineFactory
expr_stmt|;
block|}
DECL|method|init (ThreadFactory threadFactory, NettyServerBootstrapConfiguration configuration, ChannelInitializer<Channel> pipelineFactory)
specifier|public
name|void
name|init
parameter_list|(
name|ThreadFactory
name|threadFactory
parameter_list|,
name|NettyServerBootstrapConfiguration
name|configuration
parameter_list|,
name|ChannelInitializer
argument_list|<
name|Channel
argument_list|>
name|pipelineFactory
parameter_list|)
block|{
name|this
operator|.
name|threadFactory
operator|=
name|threadFactory
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|pipelineFactory
operator|=
name|pipelineFactory
expr_stmt|;
block|}
DECL|method|addChannel (Channel channel)
specifier|public
name|void
name|addChannel
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
comment|// we don't need to track the channel in client mode
block|}
DECL|method|removeChannel (Channel channel)
specifier|public
name|void
name|removeChannel
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
comment|// we don't need to track the channel in client mode
block|}
DECL|method|addConsumer (NettyConsumer consumer)
specifier|public
name|void
name|addConsumer
parameter_list|(
name|NettyConsumer
name|consumer
parameter_list|)
block|{
comment|// does not allow sharing
block|}
DECL|method|removeConsumer (NettyConsumer consumer)
specifier|public
name|void
name|removeConsumer
parameter_list|(
name|NettyConsumer
name|consumer
parameter_list|)
block|{
comment|// does not allow sharing
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|camelContext
operator|==
literal|null
operator|&&
name|threadFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Either CamelContext or ThreadFactory must be set on "
operator|+
name|this
argument_list|)
throw|;
block|}
name|startServerBootstrap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|stopServerBootstrap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doResume ()
specifier|protected
name|void
name|doResume
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ClientModeServerBootstrap connect to {}:{}"
argument_list|,
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|ChannelFuture
name|connectFuture
init|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|channel
operator|=
name|openChannel
argument_list|(
name|connectFuture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doSuspend ()
specifier|protected
name|void
name|doSuspend
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ClientModeServerBootstrap unbinding from {}:{}"
argument_list|,
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|close
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
name|channel
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|startServerBootstrap ()
specifier|protected
name|void
name|startServerBootstrap
parameter_list|()
throws|throws
name|Exception
block|{
comment|// prefer using explicit configured thread pools
name|EventLoopGroup
name|wg
init|=
name|configuration
operator|.
name|getWorkerGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|wg
operator|==
literal|null
condition|)
block|{
comment|// create new pool which we should shutdown when stopping as its not shared
name|workerGroup
operator|=
operator|new
name|NettyWorkerPoolBuilder
argument_list|()
operator|.
name|withWorkerCount
argument_list|(
name|configuration
operator|.
name|getWorkerCount
argument_list|()
argument_list|)
operator|.
name|withName
argument_list|(
literal|"NettyServerTCPWorker"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|wg
operator|=
name|workerGroup
expr_stmt|;
block|}
name|clientBootstrap
operator|=
operator|new
name|Bootstrap
argument_list|()
expr_stmt|;
name|clientBootstrap
operator|.
name|channel
argument_list|(
name|NioSocketChannel
operator|.
name|class
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|group
argument_list|(
name|wg
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_KEEPALIVE
argument_list|,
name|configuration
operator|.
name|isKeepAlive
argument_list|()
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|TCP_NODELAY
argument_list|,
name|configuration
operator|.
name|isTcpNoDelay
argument_list|()
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_REUSEADDR
argument_list|,
name|configuration
operator|.
name|isReuseAddress
argument_list|()
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|CONNECT_TIMEOUT_MILLIS
argument_list|,
name|configuration
operator|.
name|getConnectTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created ClientBootstrap {}"
argument_list|,
name|clientBootstrap
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|handler
argument_list|(
name|pipelineFactory
argument_list|)
expr_stmt|;
name|ChannelFuture
name|channelFuture
init|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created new TCP client bootstrap connecting to {}:{} with options: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|configuration
operator|.
name|getHost
argument_list|()
block|,
name|configuration
operator|.
name|getPort
argument_list|()
block|,
name|clientBootstrap
block|}
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"ClientModeServerBootstrap binding to {}:{}"
argument_list|,
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|=
name|openChannel
argument_list|(
name|channelFuture
argument_list|)
expr_stmt|;
block|}
DECL|method|stopServerBootstrap ()
specifier|protected
name|void
name|stopServerBootstrap
parameter_list|()
block|{
comment|// close all channels
name|LOG
operator|.
name|info
argument_list|(
literal|"ClientModeServerBootstrap unbinding from {}:{}"
argument_list|,
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|workerGroup
operator|!=
literal|null
condition|)
block|{
name|workerGroup
operator|.
name|shutdownGracefully
argument_list|()
expr_stmt|;
name|workerGroup
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|doReconnectIfNeeded ()
specifier|protected
name|void
name|doReconnectIfNeeded
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|channel
operator|==
literal|null
operator|||
operator|!
name|channel
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ClientModeServerBootstrap re-connect to {}:{}"
argument_list|,
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|ChannelFuture
name|connectFuture
init|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|channel
operator|=
name|openChannel
argument_list|(
name|connectFuture
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|openChannel (final ChannelFuture channelFuture)
specifier|protected
name|Channel
name|openChannel
parameter_list|(
specifier|final
name|ChannelFuture
name|channelFuture
parameter_list|)
throws|throws
name|Exception
block|{
comment|// blocking for channel to be done
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Waiting for operation to complete {} for {} millis"
argument_list|,
name|channelFuture
argument_list|,
name|configuration
operator|.
name|getConnectTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// wait for the channel to be open (see io.netty.channel.ChannelFuture javadoc for example/recommendation)
name|channelFuture
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|channelFuture
operator|.
name|isDone
argument_list|()
operator|||
operator|!
name|channelFuture
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
comment|//check if reconnect is enabled and schedule a reconnect, if from handler then don't schedule a reconnect
if|if
condition|(
name|configuration
operator|.
name|isReconnect
argument_list|()
condition|)
block|{
name|scheduleReconnect
argument_list|(
name|channelFuture
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|ConnectException
name|cause
init|=
operator|new
name|ConnectException
argument_list|(
literal|"Cannot connect to "
operator|+
name|configuration
operator|.
name|getAddress
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|channelFuture
operator|.
name|cause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cause
operator|.
name|initCause
argument_list|(
name|channelFuture
operator|.
name|cause
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|cause
throw|;
block|}
block|}
name|Channel
name|answer
init|=
name|channelFuture
operator|.
name|channel
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating connector to address: {}"
argument_list|,
name|configuration
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// schedule a reconnect to happen when the channel closes
if|if
condition|(
name|configuration
operator|.
name|isReconnect
argument_list|()
condition|)
block|{
name|answer
operator|.
name|closeFuture
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelFutureListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
name|scheduleReconnect
argument_list|(
name|channelFuture
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|scheduleReconnect (final ChannelFuture channelFuture)
specifier|private
name|void
name|scheduleReconnect
parameter_list|(
specifier|final
name|ChannelFuture
name|channelFuture
parameter_list|)
block|{
specifier|final
name|EventLoop
name|loop
init|=
name|channelFuture
operator|.
name|channel
argument_list|()
operator|.
name|eventLoop
argument_list|()
decl_stmt|;
name|loop
operator|.
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Re-connecting to {} if needed"
argument_list|,
name|configuration
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|doReconnectIfNeeded
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error during re-connect to "
operator|+
name|configuration
operator|.
name|getAddress
argument_list|()
operator|+
literal|". Will attempt again in "
operator|+
name|configuration
operator|.
name|getReconnectInterval
argument_list|()
operator|+
literal|" millis. This exception is ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|configuration
operator|.
name|getReconnectInterval
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

