begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|NettyUDPLargeMessageInOnlyTest
specifier|public
class|class
name|NettyUDPLargeMessageInOnlyTest
extends|extends
name|BaseNettyTest
block|{
DECL|method|getMessageBytes (int messageSize)
specifier|private
name|byte
index|[]
name|getMessageBytes
parameter_list|(
name|int
name|messageSize
parameter_list|)
block|{
name|byte
index|[]
name|msgBytes
init|=
operator|new
name|byte
index|[
name|messageSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageSize
condition|;
name|i
operator|++
control|)
block|{
name|msgBytes
index|[
name|i
index|]
operator|=
literal|'A'
expr_stmt|;
block|}
return|return
name|msgBytes
return|;
block|}
DECL|method|sendMessage (int messageSize)
specifier|private
name|void
name|sendMessage
parameter_list|(
name|int
name|messageSize
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|msgBytes
init|=
name|getMessageBytes
argument_list|(
name|messageSize
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|msgBytes
operator|.
name|length
argument_list|,
name|messageSize
argument_list|)
expr_stmt|;
name|String
name|message
init|=
operator|new
name|String
argument_list|(
name|msgBytes
argument_list|)
decl_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"netty:udp://localhost:{{port}}?sync=false"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSend512Message ()
specifier|public
name|void
name|testSend512Message
parameter_list|()
throws|throws
name|Exception
block|{
name|sendMessage
argument_list|(
literal|512
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSend768Message ()
specifier|public
name|void
name|testSend768Message
parameter_list|()
throws|throws
name|Exception
block|{
name|sendMessage
argument_list|(
literal|768
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSend1024Message ()
specifier|public
name|void
name|testSend1024Message
parameter_list|()
throws|throws
name|Exception
block|{
name|sendMessage
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"netty:udp://localhost:{{port}}?receiveBufferSizePredictor=2048&sync=false"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

