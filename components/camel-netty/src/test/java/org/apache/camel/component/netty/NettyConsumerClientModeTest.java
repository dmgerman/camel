begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipelineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelStateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ExceptionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|frame
operator|.
name|Delimiters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|CharsetUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|NettyConsumerClientModeTest
specifier|public
class|class
name|NettyConsumerClientModeTest
extends|extends
name|BaseNettyTest
block|{
DECL|field|DATA
specifier|private
specifier|static
specifier|final
name|ChannelBuffer
name|DATA
init|=
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
literal|"Willem"
operator|.
name|getBytes
argument_list|(
name|CharsetUtil
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|server
specifier|private
name|MyServer
name|server
decl_stmt|;
DECL|method|startNettyServer ()
specifier|public
name|void
name|startNettyServer
parameter_list|()
block|{
name|server
operator|=
operator|new
name|MyServer
argument_list|(
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|shutdownServer ()
specifier|public
name|void
name|shutdownServer
parameter_list|()
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNettyRoute ()
specifier|public
name|void
name|testNettyRoute
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|startNettyServer
argument_list|()
expr_stmt|;
name|MockEndpoint
name|receive
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:receive"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|receive
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Bye Willem"
argument_list|)
expr_stmt|;
name|context
operator|.
name|startRoute
argument_list|(
literal|"client"
argument_list|)
expr_stmt|;
name|receive
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|shutdownServer
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"netty:tcp://localhost:{{port}}?textline=true&clientMode=true"
argument_list|)
operator|.
name|id
argument_list|(
literal|"client"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Bye "
operator|+
name|body
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:receive"
argument_list|)
operator|.
name|noAutoStartup
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|MyServer
specifier|private
specifier|static
class|class
name|MyServer
block|{
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|field|bootstrap
specifier|private
name|ServerBootstrap
name|bootstrap
decl_stmt|;
DECL|method|MyServer (int port)
specifier|public
name|MyServer
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
comment|// Configure the server.
name|bootstrap
operator|=
operator|new
name|ServerBootstrap
argument_list|(
operator|new
name|NioServerSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set up the event pipeline factory.
name|bootstrap
operator|.
name|setPipelineFactory
argument_list|(
operator|new
name|ServerPipelineFactory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Bind and start to accept incoming connections.
name|bootstrap
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|bootstrap
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ServerHandler
specifier|private
specifier|static
class|class
name|ServerHandler
extends|extends
name|SimpleChannelHandler
block|{
annotation|@
name|Override
DECL|method|channelConnected (ChannelHandlerContext ctx, ChannelStateEvent e)
specifier|public
name|void
name|channelConnected
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ChannelStateEvent
name|e
parameter_list|)
block|{
name|Channel
name|ch
init|=
name|e
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|ch
operator|.
name|write
argument_list|(
name|DATA
argument_list|)
expr_stmt|;
name|ChannelFuture
name|f
init|=
name|ch
operator|.
name|write
argument_list|(
name|Delimiters
operator|.
name|lineDelimiter
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|f
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelFutureListener
argument_list|()
block|{
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
block|{
name|Channel
name|ch
init|=
name|future
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|ch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|exceptionCaught (ChannelHandlerContext ctx, ExceptionEvent e)
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ExceptionEvent
name|e
parameter_list|)
block|{
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|e
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ServerPipelineFactory
specifier|private
specifier|static
class|class
name|ServerPipelineFactory
implements|implements
name|ChannelPipelineFactory
block|{
DECL|method|getPipeline ()
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
block|{
name|ChannelPipeline
name|p
init|=
name|Channels
operator|.
name|pipeline
argument_list|()
decl_stmt|;
name|Charset
name|charset
init|=
name|CharsetUtil
operator|.
name|UTF_8
decl_stmt|;
name|ChannelBuffer
index|[]
name|delimiters
init|=
name|Delimiters
operator|.
name|nulDelimiter
argument_list|()
decl_stmt|;
comment|// setup the textline encoding and decoding
name|p
operator|.
name|addLast
argument_list|(
literal|"decoder1"
argument_list|,
name|ChannelHandlerFactories
operator|.
name|newDelimiterBasedFrameDecoder
argument_list|(
literal|1024
operator|*
literal|8
argument_list|,
name|delimiters
argument_list|)
operator|.
name|newChannelHandler
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|addLast
argument_list|(
literal|"decoder2"
argument_list|,
name|ChannelHandlerFactories
operator|.
name|newStringDecoder
argument_list|(
name|charset
argument_list|)
operator|.
name|newChannelHandler
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|addLast
argument_list|(
literal|"encoder"
argument_list|,
name|ChannelHandlerFactories
operator|.
name|newStringEncoder
argument_list|(
name|charset
argument_list|)
operator|.
name|newChannelHandler
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|addLast
argument_list|(
literal|"handler"
argument_list|,
operator|new
name|ServerHandler
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
block|}
block|}
end_class

end_unit

