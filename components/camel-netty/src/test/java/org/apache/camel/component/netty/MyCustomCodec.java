begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|oneone
operator|.
name|OneToOneDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|oneone
operator|.
name|OneToOneEncoder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
operator|.
name|copiedBuffer
import|;
end_import

begin_class
DECL|class|MyCustomCodec
specifier|public
specifier|final
class|class
name|MyCustomCodec
block|{
DECL|field|nullDelimiter
specifier|private
specifier|static
name|ChannelBuffer
name|nullDelimiter
init|=
name|ChannelBuffers
operator|.
name|wrappedBuffer
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|)
decl_stmt|;
DECL|method|MyCustomCodec ()
specifier|private
name|MyCustomCodec
parameter_list|()
block|{
comment|// Helper class
block|}
DECL|method|createMyCustomDecoder ()
specifier|public
specifier|static
name|ChannelHandlerFactory
name|createMyCustomDecoder
parameter_list|()
block|{
name|ChannelBuffer
index|[]
name|delimiters
init|=
operator|new
name|ChannelBuffer
index|[]
block|{
name|nullDelimiter
block|,
name|nullDelimiter
block|}
decl_stmt|;
return|return
name|ChannelHandlerFactories
operator|.
name|newDelimiterBasedFrameDecoder
argument_list|(
literal|4096
argument_list|,
name|delimiters
argument_list|)
return|;
block|}
DECL|method|createMyCustomDecoder2 ()
specifier|public
specifier|static
name|ChannelHandler
name|createMyCustomDecoder2
parameter_list|()
block|{
return|return
operator|new
name|BytesDecoder
argument_list|()
return|;
block|}
DECL|method|createMyCustomEncoder ()
specifier|public
specifier|static
name|ChannelHandler
name|createMyCustomEncoder
parameter_list|()
block|{
return|return
operator|new
name|BytesEncoder
argument_list|()
return|;
block|}
annotation|@
name|ChannelHandler
operator|.
name|Sharable
DECL|class|BytesDecoder
specifier|public
specifier|static
class|class
name|BytesDecoder
extends|extends
name|OneToOneDecoder
block|{
annotation|@
name|Override
DECL|method|decode (ChannelHandlerContext ctx, Channel channel, Object msg)
specifier|protected
name|Object
name|decode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|Object
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
operator|(
name|msg
operator|instanceof
name|ChannelBuffer
operator|)
condition|)
block|{
return|return
name|msg
return|;
block|}
else|else
block|{
comment|// it may be empty, then return null
name|ChannelBuffer
name|cb
init|=
operator|(
name|ChannelBuffer
operator|)
name|msg
decl_stmt|;
if|if
condition|(
name|cb
operator|.
name|hasArray
argument_list|()
operator|&&
name|cb
operator|.
name|readable
argument_list|()
condition|)
block|{
return|return
name|cb
operator|.
name|array
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
annotation|@
name|ChannelHandler
operator|.
name|Sharable
DECL|class|BytesEncoder
specifier|public
specifier|static
class|class
name|BytesEncoder
extends|extends
name|OneToOneEncoder
block|{
annotation|@
name|Override
DECL|method|encode (ChannelHandlerContext ctx, Channel channel, Object msg)
specifier|protected
name|Object
name|encode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|Object
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|msg
operator|instanceof
name|byte
index|[]
condition|)
block|{
return|return
name|copiedBuffer
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|msg
argument_list|)
return|;
block|}
return|return
name|msg
return|;
block|}
block|}
block|}
end_class

end_unit

