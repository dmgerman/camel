begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|handlers
operator|.
name|ClientChannelHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|ssl
operator|.
name|SSLEngineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipelineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|ssl
operator|.
name|SslHandler
import|;
end_import

begin_class
DECL|class|ClientPipelineFactory
specifier|public
class|class
name|ClientPipelineFactory
implements|implements
name|ChannelPipelineFactory
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ClientPipelineFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|producer
specifier|private
name|NettyProducer
name|producer
decl_stmt|;
DECL|field|channelPipeline
specifier|private
name|ChannelPipeline
name|channelPipeline
decl_stmt|;
DECL|method|ClientPipelineFactory (NettyProducer producer)
specifier|public
name|ClientPipelineFactory
parameter_list|(
name|NettyProducer
name|producer
parameter_list|)
block|{
name|this
operator|.
name|producer
operator|=
name|producer
expr_stmt|;
block|}
DECL|method|getPipeline ()
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|channelPipeline
operator|!=
literal|null
condition|)
block|{
return|return
name|channelPipeline
return|;
block|}
name|channelPipeline
operator|=
name|Channels
operator|.
name|pipeline
argument_list|()
expr_stmt|;
name|SslHandler
name|sslHandler
init|=
name|configureClientSSLOnDemand
argument_list|()
decl_stmt|;
if|if
condition|(
name|sslHandler
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Client SSL handler configured and added as an interceptor against the ChannelPipeline"
argument_list|)
expr_stmt|;
block|}
name|channelPipeline
operator|.
name|addLast
argument_list|(
literal|"ssl"
argument_list|,
name|sslHandler
argument_list|)
expr_stmt|;
block|}
name|channelPipeline
operator|.
name|addLast
argument_list|(
literal|"decoder"
argument_list|,
name|producer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getDecoder
argument_list|()
argument_list|)
expr_stmt|;
name|channelPipeline
operator|.
name|addLast
argument_list|(
literal|"encoder"
argument_list|,
name|producer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEncoder
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|producer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|channelPipeline
operator|.
name|addLast
argument_list|(
literal|"handler"
argument_list|,
name|producer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|channelPipeline
operator|.
name|addLast
argument_list|(
literal|"handler"
argument_list|,
operator|new
name|ClientChannelHandler
argument_list|(
name|producer
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|channelPipeline
return|;
block|}
DECL|method|configureClientSSLOnDemand ()
specifier|private
name|SslHandler
name|configureClientSSLOnDemand
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|producer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isSsl
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|producer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getSslHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|producer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getSslHandler
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|producer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getKeyStoreFile
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"keystorefile is null"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|producer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getTrustStoreFile
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"truststorefile is null"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|producer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPassphrase
argument_list|()
operator|.
name|toCharArray
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"passphrase is null"
argument_list|)
expr_stmt|;
block|}
name|SSLEngineFactory
name|sslEngineFactory
init|=
operator|new
name|SSLEngineFactory
argument_list|(
name|producer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getKeyStoreFile
argument_list|()
argument_list|,
name|producer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getTrustStoreFile
argument_list|()
argument_list|,
name|producer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPassphrase
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|SSLEngine
name|sslEngine
init|=
name|sslEngineFactory
operator|.
name|createClientSSLEngine
argument_list|()
decl_stmt|;
return|return
operator|new
name|SslHandler
argument_list|(
name|sslEngine
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

