begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_class
DECL|class|DefaultNettyCamelStateCorrelationManager
specifier|public
class|class
name|DefaultNettyCamelStateCorrelationManager
implements|implements
name|NettyCamelStateCorrelationManager
block|{
DECL|field|cache
specifier|private
specifier|final
name|Map
argument_list|<
name|Channel
argument_list|,
name|NettyCamelState
argument_list|>
name|cache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|putState (Channel channel, NettyCamelState state)
specifier|public
name|void
name|putState
parameter_list|(
name|Channel
name|channel
parameter_list|,
name|NettyCamelState
name|state
parameter_list|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|channel
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeState (ChannelHandlerContext ctx, Channel channel)
specifier|public
name|void
name|removeState
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|channel
parameter_list|)
block|{
name|cache
operator|.
name|remove
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getState (ChannelHandlerContext ctx, Channel channel, Object msg)
specifier|public
name|NettyCamelState
name|getState
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|Object
name|msg
parameter_list|)
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|channel
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getState (ChannelHandlerContext ctx, Channel channel, Throwable cause)
specifier|public
name|NettyCamelState
name|getState
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|channel
argument_list|)
return|;
block|}
block|}
end_class

end_unit

