begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|BossPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioClientBossPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|ThreadNameDeterminer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|internal
operator|.
name|ExecutorUtil
import|;
end_import

begin_comment
comment|/**  * A builder to create Netty {@link org.jboss.netty.channel.socket.nio.BossPool} which can be used for sharing boss pools  * with multiple Netty {@link NettyServerBootstrapFactory} server bootstrap configurations.  */
end_comment

begin_class
DECL|class|NettyClientBossPoolBuilder
specifier|public
specifier|final
class|class
name|NettyClientBossPoolBuilder
block|{
DECL|field|name
specifier|private
name|String
name|name
init|=
literal|"NettyClientBoss"
decl_stmt|;
DECL|field|pattern
specifier|private
name|String
name|pattern
decl_stmt|;
DECL|field|bossCount
specifier|private
name|int
name|bossCount
init|=
literal|1
decl_stmt|;
DECL|field|timer
specifier|private
name|Timer
name|timer
decl_stmt|;
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|setPattern (String pattern)
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
DECL|method|setBossCount (int bossCount)
specifier|public
name|void
name|setBossCount
parameter_list|(
name|int
name|bossCount
parameter_list|)
block|{
name|this
operator|.
name|bossCount
operator|=
name|bossCount
expr_stmt|;
block|}
DECL|method|setTimer (Timer timer)
specifier|public
name|void
name|setTimer
parameter_list|(
name|Timer
name|timer
parameter_list|)
block|{
name|this
operator|.
name|timer
operator|=
name|timer
expr_stmt|;
block|}
DECL|method|withName (String name)
specifier|public
name|NettyClientBossPoolBuilder
name|withName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withPattern (String pattern)
specifier|public
name|NettyClientBossPoolBuilder
name|withPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withBossCount (int bossCount)
specifier|public
name|NettyClientBossPoolBuilder
name|withBossCount
parameter_list|(
name|int
name|bossCount
parameter_list|)
block|{
name|setBossCount
argument_list|(
name|bossCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withTimer (Timer timer)
specifier|public
name|NettyClientBossPoolBuilder
name|withTimer
parameter_list|(
name|Timer
name|timer
parameter_list|)
block|{
name|setTimer
argument_list|(
name|timer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Creates a new boss pool.      */
DECL|method|build ()
name|BossPool
name|build
parameter_list|()
block|{
return|return
operator|new
name|NioClientBossPool
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
argument_list|,
name|bossCount
argument_list|,
name|timer
argument_list|,
operator|new
name|CamelNettyThreadNameDeterminer
argument_list|(
name|pattern
argument_list|,
name|name
argument_list|)
argument_list|)
return|;
block|}
DECL|class|CamelNioClientBossPool
class|class
name|CamelNioClientBossPool
extends|extends
name|NioClientBossPool
block|{
DECL|field|executor
specifier|private
name|Executor
name|executor
decl_stmt|;
DECL|method|CamelNioClientBossPool (Executor bossExecutor, int bossCount, Timer timer, ThreadNameDeterminer determiner)
name|CamelNioClientBossPool
parameter_list|(
name|Executor
name|bossExecutor
parameter_list|,
name|int
name|bossCount
parameter_list|,
name|Timer
name|timer
parameter_list|,
name|ThreadNameDeterminer
name|determiner
parameter_list|)
block|{
name|super
argument_list|(
name|bossExecutor
argument_list|,
name|bossCount
argument_list|,
name|timer
argument_list|,
name|determiner
argument_list|)
expr_stmt|;
name|executor
operator|=
name|bossExecutor
expr_stmt|;
block|}
comment|// Just make sure we shutdown the executor;
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|ExecutorUtil
operator|.
name|shutdownNow
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

