begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBufferInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_comment
comment|/**  * A set of converter methods for working with Netty types  *  * @version   */
end_comment

begin_class
annotation|@
name|Converter
DECL|class|NettyConverter
specifier|public
specifier|final
class|class
name|NettyConverter
block|{
DECL|method|NettyConverter ()
specifier|private
name|NettyConverter
parameter_list|()
block|{
comment|//Utility Class
block|}
annotation|@
name|Converter
DECL|method|toByteArray (ChannelBuffer buffer)
specifier|public
specifier|static
name|byte
index|[]
name|toByteArray
parameter_list|(
name|ChannelBuffer
name|buffer
parameter_list|)
block|{
return|return
name|buffer
operator|.
name|array
argument_list|()
return|;
block|}
annotation|@
name|Converter
DECL|method|toString (ChannelBuffer buffer, Exchange exchange)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|ChannelBuffer
name|buffer
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|toByteArray
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
comment|// use type converter as it can handle encoding set on the Exchange
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|bytes
argument_list|)
return|;
block|}
return|return
operator|new
name|String
argument_list|(
name|bytes
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toInputStream (ChannelBuffer buffer)
specifier|public
specifier|static
name|InputStream
name|toInputStream
parameter_list|(
name|ChannelBuffer
name|buffer
parameter_list|)
block|{
return|return
operator|new
name|ChannelBufferInputStream
argument_list|(
name|buffer
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toObjectInput (ChannelBuffer buffer)
specifier|public
specifier|static
name|ObjectInput
name|toObjectInput
parameter_list|(
name|ChannelBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
name|toInputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
return|return
operator|new
name|ObjectInputStream
argument_list|(
name|is
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toByteBuffer (byte[] bytes)
specifier|public
specifier|static
name|ChannelBuffer
name|toByteBuffer
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|ChannelBuffer
name|buf
init|=
name|ChannelBuffers
operator|.
name|dynamicBuffer
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|buf
operator|.
name|writeBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
annotation|@
name|Converter
DECL|method|toByteBuffer (String s, Exchange exchange)
specifier|public
specifier|static
name|ChannelBuffer
name|toByteBuffer
parameter_list|(
name|String
name|s
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|byte
index|[]
name|bytes
decl_stmt|;
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
comment|// use type converter as it can handle encoding set on the Exchange
name|bytes
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|exchange
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bytes
operator|=
name|s
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
return|return
name|toByteBuffer
argument_list|(
name|bytes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

