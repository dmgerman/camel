begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|NettyConsumer
specifier|public
class|class
name|NettyConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NettyConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
DECL|field|configuration
specifier|private
name|NettyConfiguration
name|configuration
decl_stmt|;
DECL|field|nettyServerBootstrapFactory
specifier|private
name|NettyServerBootstrapFactory
name|nettyServerBootstrapFactory
decl_stmt|;
DECL|method|NettyConsumer (NettyEndpoint nettyEndpoint, Processor processor, NettyConfiguration configuration)
specifier|public
name|NettyConsumer
parameter_list|(
name|NettyEndpoint
name|nettyEndpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|NettyConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|nettyEndpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|this
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|setNettyServerBootstrapFactory
argument_list|(
name|configuration
operator|.
name|getNettyServerBootstrapFactory
argument_list|()
argument_list|)
expr_stmt|;
name|setExceptionHandler
argument_list|(
operator|new
name|NettyConsumerExceptionHandler
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|NettyEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|NettyEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Netty consumer binding to: {}"
argument_list|,
name|configuration
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nettyServerBootstrapFactory
operator|==
literal|null
condition|)
block|{
comment|// setup pipeline factory
name|ServerPipelineFactory
name|pipelineFactory
decl_stmt|;
name|ServerPipelineFactory
name|factory
init|=
name|configuration
operator|.
name|getServerPipelineFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
name|pipelineFactory
operator|=
name|factory
operator|.
name|createPipelineFactory
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pipelineFactory
operator|=
operator|new
name|DefaultServerPipelineFactory
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isTcp
argument_list|()
condition|)
block|{
if|if
condition|(
name|configuration
operator|.
name|isClientMode
argument_list|()
condition|)
block|{
name|nettyServerBootstrapFactory
operator|=
operator|new
name|ClientModeTCPNettyServerBootstrapFactory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nettyServerBootstrapFactory
operator|=
operator|new
name|SingleTCPNettyServerBootstrapFactory
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|nettyServerBootstrapFactory
operator|=
operator|new
name|SingleUDPNettyServerBootstrapFactory
argument_list|()
expr_stmt|;
block|}
name|nettyServerBootstrapFactory
operator|.
name|init
argument_list|(
name|context
argument_list|,
name|configuration
argument_list|,
name|pipelineFactory
argument_list|)
expr_stmt|;
block|}
name|ServiceHelper
operator|.
name|startServices
argument_list|(
name|nettyServerBootstrapFactory
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Netty consumer bound to: "
operator|+
name|configuration
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Netty consumer unbinding from: {}"
argument_list|,
name|configuration
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|nettyServerBootstrapFactory
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Netty consumer unbound from: "
operator|+
name|configuration
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doSuspend ()
specifier|protected
name|void
name|doSuspend
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|suspendService
argument_list|(
name|nettyServerBootstrapFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doResume ()
specifier|protected
name|void
name|doResume
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|resumeService
argument_list|(
name|nettyServerBootstrapFactory
argument_list|)
expr_stmt|;
block|}
DECL|method|getContext ()
specifier|public
name|CamelContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|NettyConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (NettyConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|NettyConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getNettyServerBootstrapFactory ()
specifier|public
name|NettyServerBootstrapFactory
name|getNettyServerBootstrapFactory
parameter_list|()
block|{
return|return
name|nettyServerBootstrapFactory
return|;
block|}
DECL|method|setNettyServerBootstrapFactory (NettyServerBootstrapFactory nettyServerBootstrapFactory)
specifier|public
name|void
name|setNettyServerBootstrapFactory
parameter_list|(
name|NettyServerBootstrapFactory
name|nettyServerBootstrapFactory
parameter_list|)
block|{
name|this
operator|.
name|nettyServerBootstrapFactory
operator|=
name|nettyServerBootstrapFactory
expr_stmt|;
block|}
DECL|method|isTcp ()
specifier|protected
name|boolean
name|isTcp
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getProtocol
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"tcp"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

