begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty.ssl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|ssl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngine
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|IOConverter
import|;
end_import

begin_class
DECL|class|SSLEngineFactory
specifier|public
class|class
name|SSLEngineFactory
block|{
DECL|field|SSL_PROTOCOL
specifier|private
specifier|static
specifier|final
name|String
name|SSL_PROTOCOL
init|=
literal|"TLS"
decl_stmt|;
DECL|field|sslContext
specifier|private
specifier|static
name|SSLContext
name|sslContext
decl_stmt|;
DECL|method|SSLEngineFactory (String keyStoreFormat, String securityProvider, File keyStoreFile, File trustStoreFile, char[] passphrase)
specifier|public
name|SSLEngineFactory
parameter_list|(
name|String
name|keyStoreFormat
parameter_list|,
name|String
name|securityProvider
parameter_list|,
name|File
name|keyStoreFile
parameter_list|,
name|File
name|trustStoreFile
parameter_list|,
name|char
index|[]
name|passphrase
parameter_list|)
throws|throws
name|Exception
block|{
name|KeyStore
name|ks
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|keyStoreFormat
argument_list|)
decl_stmt|;
name|ks
operator|.
name|load
argument_list|(
name|IOConverter
operator|.
name|toInputStream
argument_list|(
name|keyStoreFile
argument_list|)
argument_list|,
name|passphrase
argument_list|)
expr_stmt|;
name|KeyManagerFactory
name|kmf
init|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
name|securityProvider
argument_list|)
decl_stmt|;
name|kmf
operator|.
name|init
argument_list|(
name|ks
argument_list|,
name|passphrase
argument_list|)
expr_stmt|;
name|sslContext
operator|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
name|SSL_PROTOCOL
argument_list|)
expr_stmt|;
if|if
condition|(
name|trustStoreFile
operator|!=
literal|null
condition|)
block|{
name|KeyStore
name|ts
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|keyStoreFormat
argument_list|)
decl_stmt|;
name|ts
operator|.
name|load
argument_list|(
name|IOConverter
operator|.
name|toInputStream
argument_list|(
name|trustStoreFile
argument_list|)
argument_list|,
name|passphrase
argument_list|)
expr_stmt|;
name|TrustManagerFactory
name|tmf
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
name|securityProvider
argument_list|)
decl_stmt|;
name|tmf
operator|.
name|init
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|sslContext
operator|.
name|init
argument_list|(
name|kmf
operator|.
name|getKeyManagers
argument_list|()
argument_list|,
name|tmf
operator|.
name|getTrustManagers
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sslContext
operator|.
name|init
argument_list|(
name|kmf
operator|.
name|getKeyManagers
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createServerSSLEngine ()
specifier|public
name|SSLEngine
name|createServerSSLEngine
parameter_list|()
block|{
name|SSLEngine
name|serverEngine
init|=
name|sslContext
operator|.
name|createSSLEngine
argument_list|()
decl_stmt|;
name|serverEngine
operator|.
name|setUseClientMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|serverEngine
operator|.
name|setNeedClientAuth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|serverEngine
return|;
block|}
DECL|method|createClientSSLEngine ()
specifier|public
name|SSLEngine
name|createClientSSLEngine
parameter_list|()
block|{
name|SSLEngine
name|clientEngine
init|=
name|sslContext
operator|.
name|createSSLEngine
argument_list|()
decl_stmt|;
name|clientEngine
operator|.
name|setUseClientMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|clientEngine
return|;
block|}
block|}
end_class

end_unit

