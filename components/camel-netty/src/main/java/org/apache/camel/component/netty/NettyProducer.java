begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.netty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangeTimedOutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServicePoolAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty
operator|.
name|handlers
operator|.
name|ClientChannelHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ClientBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ConnectionlessBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|DatagramChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioClientSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioDatagramChannelFactory
import|;
end_import

begin_class
DECL|class|NettyProducer
specifier|public
class|class
name|NettyProducer
extends|extends
name|DefaultProducer
implements|implements
name|ServicePoolAware
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NettyProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
DECL|field|configuration
specifier|private
name|NettyConfiguration
name|configuration
decl_stmt|;
DECL|field|countdownLatch
specifier|private
name|CountDownLatch
name|countdownLatch
decl_stmt|;
DECL|field|channelFactory
specifier|private
name|ChannelFactory
name|channelFactory
decl_stmt|;
DECL|field|datagramChannelFactory
specifier|private
name|DatagramChannelFactory
name|datagramChannelFactory
decl_stmt|;
DECL|field|channelFuture
specifier|private
name|ChannelFuture
name|channelFuture
decl_stmt|;
DECL|field|clientBootstrap
specifier|private
name|ClientBootstrap
name|clientBootstrap
decl_stmt|;
DECL|field|connectionlessClientBootstrap
specifier|private
name|ConnectionlessBootstrap
name|connectionlessClientBootstrap
decl_stmt|;
DECL|field|clientPipelineFactory
specifier|private
name|ClientPipelineFactory
name|clientPipelineFactory
decl_stmt|;
DECL|field|clientPipeline
specifier|private
name|ChannelPipeline
name|clientPipeline
decl_stmt|;
DECL|method|NettyProducer (NettyEndpoint nettyEndpoint, NettyConfiguration configuration)
specifier|public
name|NettyProducer
parameter_list|(
name|NettyEndpoint
name|nettyEndpoint
parameter_list|,
name|NettyConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|nettyEndpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|this
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getProtocol
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"udp"
argument_list|)
condition|)
block|{
name|setupUDPCommunication
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setupTCPCommunication
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
comment|// the producer should not be singleton otherwise cannot use concurrent producers and safely
comment|// use request/reply with correct correlation
return|return
literal|false
return|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|configuration
operator|.
name|isSync
argument_list|()
condition|)
block|{
name|countdownLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// write the body
name|Channel
name|channel
init|=
name|channelFuture
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|NettyHelper
operator|.
name|writeBody
argument_list|(
name|channel
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isSync
argument_list|()
condition|)
block|{
name|boolean
name|success
init|=
name|countdownLatch
operator|.
name|await
argument_list|(
name|configuration
operator|.
name|getReceiveTimeoutMillis
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
throw|throw
operator|new
name|ExchangeTimedOutException
argument_list|(
name|exchange
argument_list|,
name|configuration
operator|.
name|getReceiveTimeoutMillis
argument_list|()
argument_list|)
throw|;
block|}
name|Object
name|response
init|=
operator|(
operator|(
name|ClientChannelHandler
operator|)
name|clientPipeline
operator|.
name|get
argument_list|(
literal|"handler"
argument_list|)
operator|)
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setupTCPCommunication ()
specifier|protected
name|void
name|setupTCPCommunication
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|channelFactory
operator|==
literal|null
condition|)
block|{
name|ExecutorService
name|bossExecutor
init|=
name|context
operator|.
name|getExecutorServiceStrategy
argument_list|()
operator|.
name|newThreadPool
argument_list|(
name|this
argument_list|,
literal|"NettyTCPBoss"
argument_list|,
name|configuration
operator|.
name|getCorePoolSize
argument_list|()
argument_list|,
name|configuration
operator|.
name|getMaxPoolSize
argument_list|()
argument_list|)
decl_stmt|;
name|ExecutorService
name|workerExecutor
init|=
name|context
operator|.
name|getExecutorServiceStrategy
argument_list|()
operator|.
name|newThreadPool
argument_list|(
name|this
argument_list|,
literal|"NettyTCPWorker"
argument_list|,
name|configuration
operator|.
name|getCorePoolSize
argument_list|()
argument_list|,
name|configuration
operator|.
name|getMaxPoolSize
argument_list|()
argument_list|)
decl_stmt|;
name|channelFactory
operator|=
operator|new
name|NioClientSocketChannelFactory
argument_list|(
name|bossExecutor
argument_list|,
name|workerExecutor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clientBootstrap
operator|==
literal|null
condition|)
block|{
name|clientBootstrap
operator|=
operator|new
name|ClientBootstrap
argument_list|(
name|channelFactory
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.keepAlive"
argument_list|,
name|configuration
operator|.
name|isKeepAlive
argument_list|()
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.tcpNoDelay"
argument_list|,
name|configuration
operator|.
name|isTcpNoDelay
argument_list|()
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.reuseAddress"
argument_list|,
name|configuration
operator|.
name|isReuseAddress
argument_list|()
argument_list|)
expr_stmt|;
name|clientBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.connectTimeoutMillis"
argument_list|,
name|configuration
operator|.
name|getConnectTimeoutMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clientPipelineFactory
operator|==
literal|null
condition|)
block|{
name|clientPipelineFactory
operator|=
operator|new
name|ClientPipelineFactory
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|clientPipeline
operator|=
name|clientPipelineFactory
operator|.
name|getPipeline
argument_list|()
expr_stmt|;
name|clientBootstrap
operator|.
name|setPipeline
argument_list|(
name|clientPipeline
argument_list|)
expr_stmt|;
block|}
name|channelFuture
operator|=
name|clientBootstrap
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|channelFuture
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Netty TCP Producer started and now listening on Host: "
operator|+
name|configuration
operator|.
name|getHost
argument_list|()
operator|+
literal|"Port : "
operator|+
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setupUDPCommunication ()
specifier|protected
name|void
name|setupUDPCommunication
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|datagramChannelFactory
operator|==
literal|null
condition|)
block|{
name|ExecutorService
name|workerExecutor
init|=
name|context
operator|.
name|getExecutorServiceStrategy
argument_list|()
operator|.
name|newThreadPool
argument_list|(
name|this
argument_list|,
literal|"NettyUDPWorker"
argument_list|,
name|configuration
operator|.
name|getCorePoolSize
argument_list|()
argument_list|,
name|configuration
operator|.
name|getMaxPoolSize
argument_list|()
argument_list|)
decl_stmt|;
name|datagramChannelFactory
operator|=
operator|new
name|NioDatagramChannelFactory
argument_list|(
name|workerExecutor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|connectionlessClientBootstrap
operator|==
literal|null
condition|)
block|{
name|connectionlessClientBootstrap
operator|=
operator|new
name|ConnectionlessBootstrap
argument_list|(
name|datagramChannelFactory
argument_list|)
expr_stmt|;
name|connectionlessClientBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.keepAlive"
argument_list|,
name|configuration
operator|.
name|isKeepAlive
argument_list|()
argument_list|)
expr_stmt|;
name|connectionlessClientBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.tcpNoDelay"
argument_list|,
name|configuration
operator|.
name|isTcpNoDelay
argument_list|()
argument_list|)
expr_stmt|;
name|connectionlessClientBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.reuseAddress"
argument_list|,
name|configuration
operator|.
name|isReuseAddress
argument_list|()
argument_list|)
expr_stmt|;
name|connectionlessClientBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.connectTimeoutMillis"
argument_list|,
name|configuration
operator|.
name|getConnectTimeoutMillis
argument_list|()
argument_list|)
expr_stmt|;
name|connectionlessClientBootstrap
operator|.
name|setOption
argument_list|(
literal|"child.broadcast"
argument_list|,
name|configuration
operator|.
name|isBroadcast
argument_list|()
argument_list|)
expr_stmt|;
name|connectionlessClientBootstrap
operator|.
name|setOption
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|configuration
operator|.
name|getSendBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|connectionlessClientBootstrap
operator|.
name|setOption
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|configuration
operator|.
name|getReceiveBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clientPipelineFactory
operator|==
literal|null
condition|)
block|{
name|clientPipelineFactory
operator|=
operator|new
name|ClientPipelineFactory
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|clientPipeline
operator|=
name|clientPipelineFactory
operator|.
name|getPipeline
argument_list|()
expr_stmt|;
name|connectionlessClientBootstrap
operator|.
name|setPipeline
argument_list|(
name|clientPipeline
argument_list|)
expr_stmt|;
block|}
name|connectionlessClientBootstrap
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|channelFuture
operator|=
name|connectionlessClientBootstrap
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|channelFuture
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Netty UDP Producer started and now listening on Host: "
operator|+
name|configuration
operator|.
name|getHost
argument_list|()
operator|+
literal|"Port : "
operator|+
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|NettyConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (NettyConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|NettyConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getCountdownLatch ()
specifier|public
name|CountDownLatch
name|getCountdownLatch
parameter_list|()
block|{
return|return
name|countdownLatch
return|;
block|}
DECL|method|setCountdownLatch (CountDownLatch countdownLatch)
specifier|public
name|void
name|setCountdownLatch
parameter_list|(
name|CountDownLatch
name|countdownLatch
parameter_list|)
block|{
name|this
operator|.
name|countdownLatch
operator|=
name|countdownLatch
expr_stmt|;
block|}
DECL|method|getChannelFactory ()
specifier|public
name|ChannelFactory
name|getChannelFactory
parameter_list|()
block|{
return|return
name|channelFactory
return|;
block|}
DECL|method|setChannelFactory (ChannelFactory channelFactory)
specifier|public
name|void
name|setChannelFactory
parameter_list|(
name|ChannelFactory
name|channelFactory
parameter_list|)
block|{
name|this
operator|.
name|channelFactory
operator|=
name|channelFactory
expr_stmt|;
block|}
DECL|method|getChannelFuture ()
specifier|public
name|ChannelFuture
name|getChannelFuture
parameter_list|()
block|{
return|return
name|channelFuture
return|;
block|}
DECL|method|setChannelFuture (ChannelFuture channelFuture)
specifier|public
name|void
name|setChannelFuture
parameter_list|(
name|ChannelFuture
name|channelFuture
parameter_list|)
block|{
name|this
operator|.
name|channelFuture
operator|=
name|channelFuture
expr_stmt|;
block|}
DECL|method|getClientBootstrap ()
specifier|public
name|ClientBootstrap
name|getClientBootstrap
parameter_list|()
block|{
return|return
name|clientBootstrap
return|;
block|}
DECL|method|setClientBootstrap (ClientBootstrap clientBootstrap)
specifier|public
name|void
name|setClientBootstrap
parameter_list|(
name|ClientBootstrap
name|clientBootstrap
parameter_list|)
block|{
name|this
operator|.
name|clientBootstrap
operator|=
name|clientBootstrap
expr_stmt|;
block|}
DECL|method|getClientPipelineFactory ()
specifier|public
name|ClientPipelineFactory
name|getClientPipelineFactory
parameter_list|()
block|{
return|return
name|clientPipelineFactory
return|;
block|}
DECL|method|setClientPipelineFactory (ClientPipelineFactory clientPipelineFactory)
specifier|public
name|void
name|setClientPipelineFactory
parameter_list|(
name|ClientPipelineFactory
name|clientPipelineFactory
parameter_list|)
block|{
name|this
operator|.
name|clientPipelineFactory
operator|=
name|clientPipelineFactory
expr_stmt|;
block|}
DECL|method|getClientPipeline ()
specifier|public
name|ChannelPipeline
name|getClientPipeline
parameter_list|()
block|{
return|return
name|clientPipeline
return|;
block|}
DECL|method|setClientPipeline (ChannelPipeline clientPipeline)
specifier|public
name|void
name|setClientPipeline
parameter_list|(
name|ChannelPipeline
name|clientPipeline
parameter_list|)
block|{
name|this
operator|.
name|clientPipeline
operator|=
name|clientPipeline
expr_stmt|;
block|}
block|}
end_class

end_unit

