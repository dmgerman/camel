begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hipchat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hipchat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|type
operator|.
name|MapType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|type
operator|.
name|TypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ScheduledPollConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|CloseableHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The Hipchat consumer consumes messages from a list of users.  */
end_comment

begin_class
DECL|class|HipchatConsumer
specifier|public
class|class
name|HipchatConsumer
extends|extends
name|ScheduledPollConsumer
block|{
DECL|field|DEFAULT_CONSUMER_DELAY
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_CONSUMER_DELAY
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HipchatConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAP_TYPE
specifier|private
specifier|static
specifier|final
name|MapType
name|MAP_TYPE
init|=
name|TypeFactory
operator|.
name|defaultInstance
argument_list|()
operator|.
name|constructMapType
argument_list|(
name|Map
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAPPER
specifier|private
specifier|static
specifier|final
name|ObjectMapper
name|MAPPER
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
DECL|field|HTTP_CLIENT
specifier|private
specifier|static
specifier|final
name|CloseableHttpClient
name|HTTP_CLIENT
init|=
name|HttpClients
operator|.
name|createDefault
argument_list|()
decl_stmt|;
DECL|method|HipchatConsumer (HipchatEndpoint endpoint, Processor processor)
specifier|public
name|HipchatConsumer
parameter_list|(
name|HipchatEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|poll ()
specifier|protected
name|int
name|poll
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|messageCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|user
range|:
name|getConfig
argument_list|()
operator|.
name|consumableUsers
argument_list|()
control|)
block|{
name|Exchange
name|exchange
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|processExchangeForUser
argument_list|(
name|user
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|messageCount
operator|++
expr_stmt|;
block|}
return|return
name|messageCount
return|;
block|}
DECL|method|processExchangeForUser (String user, Exchange exchange)
specifier|private
name|void
name|processExchangeForUser
parameter_list|(
name|String
name|user
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|urlPath
init|=
name|String
operator|.
name|format
argument_list|(
name|getMostRecentMessageUrl
argument_list|()
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Polling HipChat Api "
operator|+
name|urlPath
operator|+
literal|" for new messages at "
operator|+
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|HttpGet
name|httpGet
init|=
operator|new
name|HttpGet
argument_list|(
name|getConfig
argument_list|()
operator|.
name|hipChatUrl
argument_list|()
operator|+
name|urlPath
argument_list|)
decl_stmt|;
name|CloseableHttpResponse
name|response
init|=
name|executeGet
argument_list|(
name|httpGet
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HipchatConstants
operator|.
name|FROM_USER
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|processApiResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|processApiResponse (Exchange exchange, CloseableHttpResponse response)
specifier|private
name|void
name|processApiResponse
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|CloseableHttpResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonMap
init|=
name|MAPPER
operator|.
name|readValue
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|,
name|MAP_TYPE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Hipchat response "
operator|+
name|response
operator|+
literal|", json: "
operator|+
name|MAPPER
operator|.
name|writeValueAsString
argument_list|(
name|jsonMap
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|jsonMap
operator|!=
literal|null
operator|&&
name|jsonMap
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|items
init|=
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|jsonMap
operator|.
name|get
argument_list|(
name|HipchatApiConstants
operator|.
name|API_ITEMS
argument_list|)
decl_stmt|;
if|if
condition|(
name|items
operator|!=
literal|null
operator|&&
name|items
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|item
init|=
name|items
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|date
init|=
operator|(
name|String
operator|)
name|item
operator|.
name|get
argument_list|(
name|HipchatApiConstants
operator|.
name|API_DATE
argument_list|)
decl_stmt|;
name|String
name|message
init|=
operator|(
name|String
operator|)
name|item
operator|.
name|get
argument_list|(
name|HipchatApiConstants
operator|.
name|API_MESSAGE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting exchange body: "
operator|+
name|message
operator|+
literal|", header "
operator|+
name|HipchatConstants
operator|.
name|MESSAGE_DATE
operator|+
literal|": "
operator|+
name|date
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HipchatConstants
operator|.
name|FROM_USER_RESPONSE_STATUS
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HipchatConstants
operator|.
name|MESSAGE_DATE
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HipchatException
argument_list|(
literal|"Error parsing Json response from Hipchat API"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|response
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|executeGet (HttpGet httpGet)
specifier|protected
name|CloseableHttpResponse
name|executeGet
parameter_list|(
name|HttpGet
name|httpGet
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|HTTP_CLIENT
operator|.
name|execute
argument_list|(
name|httpGet
argument_list|)
return|;
block|}
DECL|method|getMostRecentMessageUrl ()
specifier|private
name|String
name|getMostRecentMessageUrl
parameter_list|()
block|{
return|return
name|getConfig
argument_list|()
operator|.
name|withAuthToken
argument_list|(
name|HipchatApiConstants
operator|.
name|URI_PATH_USER_LATEST_PRIVATE_CHAT
argument_list|)
operator|+
literal|"&"
operator|+
name|HipchatApiConstants
operator|.
name|DEFAULT_MAX_RESULT
return|;
block|}
DECL|method|getConfig ()
specifier|private
name|HipchatConfiguration
name|getConfig
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|HipchatEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|HipchatEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"HipchatConsumer["
operator|+
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

