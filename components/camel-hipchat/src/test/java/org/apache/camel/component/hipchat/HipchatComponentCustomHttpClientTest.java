begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hipchat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hipchat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BindToRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|ClientProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|CloseableHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ClientConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|HttpParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|HipchatComponentCustomHttpClientTest
specifier|public
class|class
name|HipchatComponentCustomHttpClientTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|EndpointInject
argument_list|(
literal|"hipchat:http://api.hipchat.com?httpClient=#myHttpClient&authToken=anything&consumeUsers=@AUser"
argument_list|)
DECL|field|hipchatEndpoint
specifier|private
name|HipchatEndpoint
name|hipchatEndpoint
decl_stmt|;
annotation|@
name|BindToRegistry
argument_list|(
literal|"myHttpClient"
argument_list|)
DECL|field|client
specifier|private
name|MyCustomHttpClient
name|client
init|=
operator|new
name|MyCustomHttpClient
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|ensureCustomHttpClientIsDefined ()
specifier|public
name|void
name|ensureCustomHttpClientIsDefined
parameter_list|()
block|{
name|HttpClient
name|httpClient
init|=
name|hipchatEndpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getHttpClient
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|httpClient
argument_list|)
expr_stmt|;
name|assertIsInstanceOf
argument_list|(
name|MyCustomHttpClient
operator|.
name|class
argument_list|,
name|httpClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hipchat:http://api.hipchat.com?httpClient=#myHttpClient&authToken=anything&consumeUsers=@AUser"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|MyCustomHttpClient
specifier|public
specifier|static
class|class
name|MyCustomHttpClient
extends|extends
name|CloseableHttpClient
block|{
DECL|field|innerHttpClient
specifier|private
specifier|final
name|CloseableHttpClient
name|innerHttpClient
decl_stmt|;
DECL|method|MyCustomHttpClient ()
specifier|public
name|MyCustomHttpClient
parameter_list|()
block|{
name|this
operator|.
name|innerHttpClient
operator|=
name|HttpClientBuilder
operator|.
name|create
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getParams ()
specifier|public
name|HttpParams
name|getParams
parameter_list|()
block|{
return|return
name|innerHttpClient
operator|.
name|getParams
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getConnectionManager ()
specifier|public
name|ClientConnectionManager
name|getConnectionManager
parameter_list|()
block|{
return|return
name|innerHttpClient
operator|.
name|getConnectionManager
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|innerHttpClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doExecute (HttpHost target, HttpRequest request, HttpContext context)
specifier|protected
name|CloseableHttpResponse
name|doExecute
parameter_list|(
name|HttpHost
name|target
parameter_list|,
name|HttpRequest
name|request
parameter_list|,
name|HttpContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClientProtocolException
block|{
return|return
name|innerHttpClient
operator|.
name|execute
argument_list|(
name|target
argument_list|,
name|request
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

