begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.openshift
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|openshift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|com
operator|.
name|openshift
operator|.
name|client
operator|.
name|IApplication
import|;
end_import

begin_import
import|import
name|com
operator|.
name|openshift
operator|.
name|client
operator|.
name|IDomain
import|;
end_import

begin_import
import|import
name|com
operator|.
name|openshift
operator|.
name|client
operator|.
name|IGear
import|;
end_import

begin_import
import|import
name|com
operator|.
name|openshift
operator|.
name|client
operator|.
name|IGearGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|openshift
operator|.
name|client
operator|.
name|IOpenShiftConnection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|openshift
operator|.
name|client
operator|.
name|IUser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|openshift
operator|.
name|client
operator|.
name|OpenShiftConnectionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|openshift
operator|.
name|client
operator|.
name|configuration
operator|.
name|OpenShiftConfiguration
import|;
end_import

begin_class
DECL|class|OpenShiftHelper
specifier|public
specifier|final
class|class
name|OpenShiftHelper
block|{
DECL|field|DEFAULT_OPENSHIFT_SERVER
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_OPENSHIFT_SERVER
init|=
literal|"openshift.redhat.com"
decl_stmt|;
DECL|method|OpenShiftHelper ()
specifier|private
name|OpenShiftHelper
parameter_list|()
block|{     }
DECL|method|getOpenShiftServer (OpenShiftEndpoint endpoint)
specifier|public
specifier|static
name|String
name|getOpenShiftServer
parameter_list|(
name|OpenShiftEndpoint
name|endpoint
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|answer
init|=
name|endpoint
operator|.
name|getServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
operator|new
name|OpenShiftConfiguration
argument_list|()
operator|.
name|getLibraServer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|DEFAULT_OPENSHIFT_SERVER
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|loginAndGetDomain (OpenShiftEndpoint endpoint, String openshiftServer)
specifier|public
specifier|static
name|IDomain
name|loginAndGetDomain
parameter_list|(
name|OpenShiftEndpoint
name|endpoint
parameter_list|,
name|String
name|openshiftServer
parameter_list|)
block|{
comment|// grab all applications
name|IOpenShiftConnection
name|connection
init|=
operator|new
name|OpenShiftConnectionFactory
argument_list|()
operator|.
name|getConnection
argument_list|(
name|endpoint
operator|.
name|getClientId
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getUsername
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPassword
argument_list|()
argument_list|,
name|openshiftServer
argument_list|)
decl_stmt|;
name|IUser
name|user
init|=
name|connection
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|IDomain
name|domain
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getDomain
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|domain
operator|=
name|user
operator|.
name|getDomain
argument_list|(
name|endpoint
operator|.
name|getDomain
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|domain
operator|=
name|user
operator|.
name|getDefaultDomain
argument_list|()
expr_stmt|;
block|}
return|return
name|domain
return|;
block|}
DECL|method|getStateForApplication (IApplication application)
specifier|public
specifier|static
name|String
name|getStateForApplication
parameter_list|(
name|IApplication
name|application
parameter_list|)
block|{
for|for
control|(
name|IGearGroup
name|group
range|:
name|application
operator|.
name|getGearGroups
argument_list|()
control|)
block|{
for|for
control|(
name|IGear
name|gear
range|:
name|group
operator|.
name|getGears
argument_list|()
control|)
block|{
name|String
name|state
init|=
name|gear
operator|.
name|getState
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
return|return
name|state
return|;
block|}
block|}
return|return
literal|"unknown"
return|;
block|}
block|}
end_class

end_unit

