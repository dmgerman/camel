begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.http.common
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|runtimecatalog
operator|.
name|RuntimeCamelCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|SendDynamicAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_comment
comment|/**  * HTTP based {@link SendDynamicAware} which allows to optimise HTTP components  * with the toD (dynamic to) DSL in Camel. This implementation optimises by allowing  * to provide dynamic parameters via {@link Exchange#HTTP_PATH} and {@link Exchange#HTTP_QUERY} headers  * instead of the endpoint uri. That allows to use a static endpoint and its producer to service  * dynamic requests.  */
end_comment

begin_class
DECL|class|HttpSendDynamicAware
specifier|public
class|class
name|HttpSendDynamicAware
implements|implements
name|SendDynamicAware
block|{
DECL|field|postProcessor
specifier|private
specifier|final
name|Processor
name|postProcessor
init|=
operator|new
name|HttpSendDynamicPostProcessor
argument_list|()
decl_stmt|;
DECL|field|scheme
specifier|private
name|String
name|scheme
decl_stmt|;
annotation|@
name|Override
DECL|method|setScheme (String scheme)
specifier|public
name|void
name|setScheme
parameter_list|(
name|String
name|scheme
parameter_list|)
block|{
name|this
operator|.
name|scheme
operator|=
name|scheme
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|scheme
return|;
block|}
annotation|@
name|Override
DECL|method|prepare (Exchange exchange, String uri, String originalUri)
specifier|public
name|DynamicAwareEntry
name|prepare
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|originalUri
parameter_list|)
throws|throws
name|Exception
block|{
name|RuntimeCamelCatalog
name|catalog
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getExtension
argument_list|(
name|RuntimeCamelCatalog
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|catalog
operator|.
name|endpointProperties
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|lenient
init|=
name|catalog
operator|.
name|endpointLenientProperties
argument_list|(
name|uri
argument_list|)
decl_stmt|;
return|return
operator|new
name|DynamicAwareEntry
argument_list|(
name|uri
argument_list|,
name|originalUri
argument_list|,
name|properties
argument_list|,
name|lenient
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|resolveStaticUri (Exchange exchange, DynamicAwareEntry entry)
specifier|public
name|String
name|resolveStaticUri
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|DynamicAwareEntry
name|entry
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|hostAndPath
init|=
name|parseUri
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|hostAndPath
index|[
literal|0
index|]
decl_stmt|;
name|String
name|path
init|=
name|hostAndPath
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
operator|||
operator|!
name|entry
operator|.
name|getLenientProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// the context path can be dynamic or any lenient properties
comment|// and therefore build a new static uri without path or lenient options
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|entry
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|k
range|:
name|entry
operator|.
name|getLenientProperties
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|params
operator|.
name|remove
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
comment|// httpUri/httpURI contains the host and path, so replace it with just the host as the context-path is dynamic
if|if
condition|(
name|params
operator|.
name|containsKey
argument_list|(
literal|"httpUri"
argument_list|)
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
literal|"httpUri"
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|params
operator|.
name|containsKey
argument_list|(
literal|"httpURI"
argument_list|)
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
literal|"httpURI"
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"netty-http"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
comment|// the netty-http stores host,port etc in other fields than httpURI so we can just remove the path parameter
name|params
operator|.
name|remove
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
block|}
block|}
name|RuntimeCamelCatalog
name|catalog
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getExtension
argument_list|(
name|RuntimeCamelCatalog
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|catalog
operator|.
name|asEndpointUri
argument_list|(
name|scheme
argument_list|,
name|params
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
comment|// no need for optimisation
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createPreProcessor (Exchange exchange, DynamicAwareEntry entry)
specifier|public
name|Processor
name|createPreProcessor
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|DynamicAwareEntry
name|entry
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|hostAndPath
init|=
name|parseUri
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|hostAndPath
index|[
literal|1
index|]
decl_stmt|;
name|String
name|query
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|getLenientProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// all lenient properties can be dynamic and provided in the HTTP_QUERY header
name|query
operator|=
name|URISupport
operator|.
name|createQueryString
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|entry
operator|.
name|getLenientProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|!=
literal|null
operator|||
name|query
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|HttpSendDynamicPreProcessor
argument_list|(
name|path
argument_list|,
name|query
argument_list|)
return|;
block|}
else|else
block|{
comment|// no optimisation
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createPostProcessor (Exchange exchange, DynamicAwareEntry entry)
specifier|public
name|Processor
name|createPostProcessor
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|DynamicAwareEntry
name|entry
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|postProcessor
return|;
block|}
DECL|method|parseUri (DynamicAwareEntry entry)
specifier|protected
name|String
index|[]
name|parseUri
parameter_list|(
name|DynamicAwareEntry
name|entry
parameter_list|)
block|{
name|String
name|u
init|=
name|entry
operator|.
name|getUri
argument_list|()
decl_stmt|;
comment|// remove scheme prefix (unless its camel-http or camel-http)
name|boolean
name|httpComponent
init|=
literal|"http"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
operator|||
literal|"https"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|httpComponent
condition|)
block|{
name|String
name|prefix
init|=
name|scheme
operator|+
literal|"://"
decl_stmt|;
name|String
name|prefix2
init|=
name|scheme
operator|+
literal|":"
decl_stmt|;
if|if
condition|(
name|u
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|u
operator|=
name|u
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|u
operator|.
name|startsWith
argument_list|(
name|prefix2
argument_list|)
condition|)
block|{
name|u
operator|=
name|u
operator|.
name|substring
argument_list|(
name|prefix2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// remove query parameters
if|if
condition|(
name|u
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|>
literal|0
condition|)
block|{
name|u
operator|=
name|StringHelper
operator|.
name|before
argument_list|(
name|u
argument_list|,
literal|"?"
argument_list|)
expr_stmt|;
block|}
comment|// favour using java.net.URI for parsing into host and context-path
try|try
block|{
name|URI
name|parse
init|=
operator|new
name|URI
argument_list|(
name|u
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|parse
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|parse
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// if the path is just a trailing slash then skip it (eg it must be longer than just the slash itself)
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|path
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|int
name|port
init|=
name|parse
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|>
literal|0
operator|&&
name|port
operator|!=
literal|80
operator|&&
name|port
operator|!=
literal|443
condition|)
block|{
name|host
operator|+=
literal|":"
operator|+
name|port
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|httpComponent
condition|)
block|{
comment|// include scheme for components that are not camel-http
name|String
name|scheme
init|=
name|parse
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheme
operator|!=
literal|null
condition|)
block|{
name|host
operator|=
name|scheme
operator|+
literal|"://"
operator|+
name|host
expr_stmt|;
block|}
block|}
return|return
operator|new
name|String
index|[]
block|{
name|host
block|,
name|path
block|}
return|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// ignore
return|return
operator|new
name|String
index|[]
block|{
name|u
block|,
literal|null
block|}
return|;
block|}
comment|// no context path
return|return
operator|new
name|String
index|[]
block|{
name|u
block|,
literal|null
block|}
return|;
block|}
block|}
end_class

end_unit

