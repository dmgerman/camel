begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.http.common
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|FileDataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|FileTypeMap
import|;
end_import

begin_class
DECL|class|CamelFileDataSource
specifier|public
class|class
name|CamelFileDataSource
extends|extends
name|FileDataSource
block|{
DECL|field|fileName
specifier|private
specifier|final
name|String
name|fileName
decl_stmt|;
DECL|field|typeMap
specifier|private
name|FileTypeMap
name|typeMap
decl_stmt|;
DECL|method|CamelFileDataSource (File file, String fileName)
specifier|public
name|CamelFileDataSource
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getContentType ()
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
if|if
condition|(
name|typeMap
operator|==
literal|null
condition|)
block|{
return|return
name|FileTypeMap
operator|.
name|getDefaultFileTypeMap
argument_list|()
operator|.
name|getContentType
argument_list|(
name|fileName
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|typeMap
operator|.
name|getContentType
argument_list|(
name|fileName
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setFileTypeMap (FileTypeMap map)
specifier|public
name|void
name|setFileTypeMap
parameter_list|(
name|FileTypeMap
name|map
parameter_list|)
block|{
name|typeMap
operator|=
name|map
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
if|if
condition|(
name|fileName
operator|!=
literal|null
condition|)
block|{
return|return
name|fileName
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

