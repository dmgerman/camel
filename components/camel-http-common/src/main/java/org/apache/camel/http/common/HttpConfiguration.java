begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.http.common
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_class
DECL|class|HttpConfiguration
specifier|public
class|class
name|HttpConfiguration
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer,security"
argument_list|,
name|description
operator|=
literal|"Authentication methods allowed to use as a comma separated list of values Basic, Digest or NTLM."
argument_list|)
DECL|field|authMethod
specifier|private
name|String
name|authMethod
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer,security"
argument_list|,
name|enums
operator|=
literal|"Basic,Digest,NTLM"
argument_list|,
name|description
operator|=
literal|"Which authentication method to prioritize to use, either as Basic, Digest or NTLM."
argument_list|)
DECL|field|authMethodPriority
specifier|private
name|String
name|authMethodPriority
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer,security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"Authentication username"
argument_list|)
DECL|field|authUsername
specifier|private
name|String
name|authUsername
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer,security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"Authentication password"
argument_list|)
DECL|field|authPassword
specifier|private
name|String
name|authPassword
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer,security"
argument_list|,
name|description
operator|=
literal|"Authentication domain to use with NTML"
argument_list|)
DECL|field|authDomain
specifier|private
name|String
name|authDomain
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer,security"
argument_list|,
name|description
operator|=
literal|"Authentication host to use with NTML"
argument_list|)
DECL|field|authHost
specifier|private
name|String
name|authHost
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|description
operator|=
literal|"Proxy hostname to use"
argument_list|)
DECL|field|proxyHost
specifier|private
name|String
name|proxyHost
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|description
operator|=
literal|"Proxy port to use"
argument_list|)
DECL|field|proxyPort
specifier|private
name|int
name|proxyPort
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|enums
operator|=
literal|"http,https"
argument_list|,
name|description
operator|=
literal|"Authentication scheme to use"
argument_list|)
DECL|field|proxyAuthScheme
specifier|private
name|String
name|proxyAuthScheme
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|enums
operator|=
literal|"Basic,Digest,NTLM"
argument_list|,
name|description
operator|=
literal|"Proxy authentication method to use"
argument_list|)
DECL|field|proxyAuthMethod
specifier|private
name|String
name|proxyAuthMethod
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|secret
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"Proxy authentication username"
argument_list|)
DECL|field|proxyAuthUsername
specifier|private
name|String
name|proxyAuthUsername
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|secret
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"Proxy authentication password"
argument_list|)
DECL|field|proxyAuthPassword
specifier|private
name|String
name|proxyAuthPassword
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|description
operator|=
literal|"Proxy authentication host"
argument_list|)
DECL|field|proxyAuthHost
specifier|private
name|String
name|proxyAuthHost
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|description
operator|=
literal|"Proxy authentication port"
argument_list|)
DECL|field|proxyAuthPort
specifier|private
name|int
name|proxyAuthPort
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|description
operator|=
literal|"Proxy authentication domain to use with NTML"
argument_list|)
DECL|field|proxyAuthDomain
specifier|private
name|String
name|proxyAuthDomain
decl_stmt|;
DECL|method|getAuthMethod ()
specifier|public
name|String
name|getAuthMethod
parameter_list|()
block|{
return|return
name|authMethod
return|;
block|}
comment|/**      * Authentication methods allowed to use as a comma separated list of values Basic, Digest or NTLM.      */
DECL|method|setAuthMethod (String authMethod)
specifier|public
name|void
name|setAuthMethod
parameter_list|(
name|String
name|authMethod
parameter_list|)
block|{
name|this
operator|.
name|authMethod
operator|=
name|authMethod
expr_stmt|;
block|}
DECL|method|getAuthMethodPriority ()
specifier|public
name|String
name|getAuthMethodPriority
parameter_list|()
block|{
return|return
name|authMethodPriority
return|;
block|}
comment|/**      * Which authentication method to prioritize to use, either as Basic, Digest or NTLM.      */
DECL|method|setAuthMethodPriority (String authMethodPriority)
specifier|public
name|void
name|setAuthMethodPriority
parameter_list|(
name|String
name|authMethodPriority
parameter_list|)
block|{
name|this
operator|.
name|authMethodPriority
operator|=
name|authMethodPriority
expr_stmt|;
block|}
DECL|method|getAuthUsername ()
specifier|public
name|String
name|getAuthUsername
parameter_list|()
block|{
return|return
name|authUsername
return|;
block|}
comment|/**      * Authentication username      */
DECL|method|setAuthUsername (String authUsername)
specifier|public
name|void
name|setAuthUsername
parameter_list|(
name|String
name|authUsername
parameter_list|)
block|{
name|this
operator|.
name|authUsername
operator|=
name|authUsername
expr_stmt|;
block|}
DECL|method|getAuthPassword ()
specifier|public
name|String
name|getAuthPassword
parameter_list|()
block|{
return|return
name|authPassword
return|;
block|}
comment|/**      * Authentication password      */
DECL|method|setAuthPassword (String authPassword)
specifier|public
name|void
name|setAuthPassword
parameter_list|(
name|String
name|authPassword
parameter_list|)
block|{
name|this
operator|.
name|authPassword
operator|=
name|authPassword
expr_stmt|;
block|}
DECL|method|getAuthDomain ()
specifier|public
name|String
name|getAuthDomain
parameter_list|()
block|{
return|return
name|authDomain
return|;
block|}
comment|/**      * Authentication domain to use with NTML      */
DECL|method|setAuthDomain (String authDomain)
specifier|public
name|void
name|setAuthDomain
parameter_list|(
name|String
name|authDomain
parameter_list|)
block|{
name|this
operator|.
name|authDomain
operator|=
name|authDomain
expr_stmt|;
block|}
DECL|method|getAuthHost ()
specifier|public
name|String
name|getAuthHost
parameter_list|()
block|{
return|return
name|authHost
return|;
block|}
comment|/**      * Authentication host to use with NTML      */
DECL|method|setAuthHost (String authHost)
specifier|public
name|void
name|setAuthHost
parameter_list|(
name|String
name|authHost
parameter_list|)
block|{
name|this
operator|.
name|authHost
operator|=
name|authHost
expr_stmt|;
block|}
DECL|method|getProxyAuthScheme ()
specifier|public
name|String
name|getProxyAuthScheme
parameter_list|()
block|{
return|return
name|proxyAuthScheme
return|;
block|}
comment|/**      * Proxy authentication scheme to use      */
DECL|method|setProxyAuthScheme (String proxyAuthScheme)
specifier|public
name|void
name|setProxyAuthScheme
parameter_list|(
name|String
name|proxyAuthScheme
parameter_list|)
block|{
name|this
operator|.
name|proxyAuthScheme
operator|=
name|proxyAuthScheme
expr_stmt|;
block|}
DECL|method|getProxyAuthMethod ()
specifier|public
name|String
name|getProxyAuthMethod
parameter_list|()
block|{
return|return
name|proxyAuthMethod
return|;
block|}
comment|/**      * Proxy authentication method to use      */
DECL|method|setProxyAuthMethod (String proxyAuthMethod)
specifier|public
name|void
name|setProxyAuthMethod
parameter_list|(
name|String
name|proxyAuthMethod
parameter_list|)
block|{
name|this
operator|.
name|proxyAuthMethod
operator|=
name|proxyAuthMethod
expr_stmt|;
block|}
DECL|method|getProxyAuthUsername ()
specifier|public
name|String
name|getProxyAuthUsername
parameter_list|()
block|{
return|return
name|proxyAuthUsername
return|;
block|}
comment|/**      * Proxy authentication username      */
DECL|method|setProxyAuthUsername (String proxyAuthUsername)
specifier|public
name|void
name|setProxyAuthUsername
parameter_list|(
name|String
name|proxyAuthUsername
parameter_list|)
block|{
name|this
operator|.
name|proxyAuthUsername
operator|=
name|proxyAuthUsername
expr_stmt|;
block|}
DECL|method|getProxyAuthPassword ()
specifier|public
name|String
name|getProxyAuthPassword
parameter_list|()
block|{
return|return
name|proxyAuthPassword
return|;
block|}
comment|/**      * Proxy authentication password      */
DECL|method|setProxyAuthPassword (String proxyAuthPassword)
specifier|public
name|void
name|setProxyAuthPassword
parameter_list|(
name|String
name|proxyAuthPassword
parameter_list|)
block|{
name|this
operator|.
name|proxyAuthPassword
operator|=
name|proxyAuthPassword
expr_stmt|;
block|}
DECL|method|getProxyAuthDomain ()
specifier|public
name|String
name|getProxyAuthDomain
parameter_list|()
block|{
return|return
name|proxyAuthDomain
return|;
block|}
comment|/**      * Proxy authentication domain to use with NTML      */
DECL|method|setProxyAuthDomain (String proxyAuthDomain)
specifier|public
name|void
name|setProxyAuthDomain
parameter_list|(
name|String
name|proxyAuthDomain
parameter_list|)
block|{
name|this
operator|.
name|proxyAuthDomain
operator|=
name|proxyAuthDomain
expr_stmt|;
block|}
DECL|method|getProxyAuthHost ()
specifier|public
name|String
name|getProxyAuthHost
parameter_list|()
block|{
return|return
name|proxyAuthHost
return|;
block|}
comment|/**      * Proxy authentication host      */
DECL|method|setProxyAuthHost (String proxyAuthHost)
specifier|public
name|void
name|setProxyAuthHost
parameter_list|(
name|String
name|proxyAuthHost
parameter_list|)
block|{
name|this
operator|.
name|proxyAuthHost
operator|=
name|proxyAuthHost
expr_stmt|;
block|}
DECL|method|getProxyAuthPort ()
specifier|public
name|int
name|getProxyAuthPort
parameter_list|()
block|{
return|return
name|proxyAuthPort
return|;
block|}
comment|/**      * Proxy authentication port      */
DECL|method|setProxyAuthPort (int proxyAuthPort)
specifier|public
name|void
name|setProxyAuthPort
parameter_list|(
name|int
name|proxyAuthPort
parameter_list|)
block|{
name|this
operator|.
name|proxyAuthPort
operator|=
name|proxyAuthPort
expr_stmt|;
block|}
DECL|method|getProxyHost ()
specifier|public
name|String
name|getProxyHost
parameter_list|()
block|{
return|return
name|proxyHost
return|;
block|}
comment|/**      * Proxy hostname to use      */
DECL|method|setProxyHost (String proxyHost)
specifier|public
name|void
name|setProxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|this
operator|.
name|proxyHost
operator|=
name|proxyHost
expr_stmt|;
block|}
DECL|method|getProxyPort ()
specifier|public
name|int
name|getProxyPort
parameter_list|()
block|{
return|return
name|proxyPort
return|;
block|}
comment|/**      * Proxy port to use      */
DECL|method|setProxyPort (int proxyPort)
specifier|public
name|void
name|setProxyPort
parameter_list|(
name|int
name|proxyPort
parameter_list|)
block|{
name|this
operator|.
name|proxyPort
operator|=
name|proxyPort
expr_stmt|;
block|}
block|}
end_class

end_unit

