begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.http.common
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|DiscoverableService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|cookie
operator|.
name|CookieHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategyAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CollectionHelper
import|;
end_import

begin_class
DECL|class|HttpCommonEndpoint
specifier|public
specifier|abstract
class|class
name|HttpCommonEndpoint
extends|extends
name|DefaultEndpoint
implements|implements
name|HeaderFilterStrategyAware
implements|,
name|DiscoverableService
block|{
comment|// Note: all options must be documented with description in annotations so extended components can access the documentation
DECL|field|component
name|HttpCommonComponent
name|component
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"The url of the HTTP endpoint to call."
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|httpUri
name|URI
name|httpUri
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|description
operator|=
literal|"To use a custom HeaderFilterStrategy to filter header to and from Camel message."
argument_list|)
DECL|field|headerFilterStrategy
name|HeaderFilterStrategy
name|headerFilterStrategy
init|=
operator|new
name|HttpHeaderFilterStrategy
argument_list|()
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common,advanced"
argument_list|,
name|description
operator|=
literal|"To use a custom HttpBinding to control the mapping between Camel message and HttpClient."
argument_list|)
DECL|field|httpBinding
name|HttpBinding
name|httpBinding
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server."
operator|+
literal|" This allows you to get all responses regardless of the HTTP status code."
argument_list|)
DECL|field|throwExceptionOnFailure
name|boolean
name|throwExceptionOnFailure
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"If the option is true, HttpProducer will ignore the Exchange.HTTP_URI header, and use the endpoint's URI for request."
operator|+
literal|" You may also set the option throwExceptionOnFailure to be false to let the HttpProducer send all the fault response back."
argument_list|)
DECL|field|bridgeEndpoint
name|boolean
name|bridgeEndpoint
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"If the option is true, HttpProducer will set the Host header to the value contained in the current exchange Host header, "
operator|+
literal|"useful in reverse proxy applications where you want the Host header received by the downstream server to reflect the URL called by the upstream client, "
operator|+
literal|"this allows applications which use the Host header to generate accurate URL's for a proxied service"
argument_list|)
DECL|field|preserveHostHeader
name|boolean
name|preserveHostHeader
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Whether or not the consumer should try to find a target consumer by matching the URI prefix if no exact match is found."
argument_list|)
DECL|field|matchOnUriPrefix
name|boolean
name|matchOnUriPrefix
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"If this option is false the Servlet will disable the HTTP streaming and set the content-length header on the response"
argument_list|)
DECL|field|chunked
name|boolean
name|chunked
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|description
operator|=
literal|"Determines whether or not the raw input stream from Servlet is cached or not"
operator|+
literal|" (Camel will read the stream into a in memory/overflow to file, Stream caching) cache."
operator|+
literal|" By default Camel will cache the Servlet input stream to support reading it multiple times to ensure it Camel"
operator|+
literal|" can retrieve all data from the stream. However you can set this option to true when you for example need"
operator|+
literal|" to access the raw stream, such as streaming it directly to a file or other persistent store."
operator|+
literal|" DefaultHttpBinding will copy the request input stream into a stream cache and put it into message body"
operator|+
literal|" if this option is false to support reading the stream multiple times."
operator|+
literal|" If you use Servlet to bridge/proxy an endpoint then consider enabling this option to improve performance,"
operator|+
literal|" in case you do not need to read the message payload multiple times."
operator|+
literal|" The http/http4 producer will by default cache the response body stream. If setting this option to true,"
operator|+
literal|" then the producers will not cache the response body stream but use the response stream as-is as the message body."
argument_list|)
DECL|field|disableStreamCache
name|boolean
name|disableStreamCache
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"If enabled and an Exchange failed processing on the consumer side, and if the caused Exception was send back serialized"
operator|+
literal|" in the response as a application/x-java-serialized-object content type."
operator|+
literal|" On the producer side the exception will be deserialized and thrown as is, instead of the HttpOperationFailedException."
operator|+
literal|" The caused exception is required to be serialized."
operator|+
literal|" This is by default turned off. If you enable this then be aware that Java will deserialize the incoming"
operator|+
literal|" data from the request to Java and that can be a potential security risk."
argument_list|)
DECL|field|transferException
name|boolean
name|transferException
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|,
name|description
operator|=
literal|"Specifies whether a Connection Close header must be added to HTTP Request. By default connectionClose is false."
argument_list|)
DECL|field|connectionClose
name|boolean
name|connectionClose
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|,
name|description
operator|=
literal|"Specifies whether to enable HTTP TRACE for this Servlet consumer. By default TRACE is turned off."
argument_list|)
DECL|field|traceEnabled
name|boolean
name|traceEnabled
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|,
name|description
operator|=
literal|"Specifies whether to enable HTTP OPTIONS for this Servlet consumer. By default OPTIONS is turned off."
argument_list|)
DECL|field|optionsEnabled
name|boolean
name|optionsEnabled
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Used to only allow consuming if the HttpMethod matches, such as GET/POST/PUT etc. Multiple methods can be specified separated by comma."
argument_list|)
DECL|field|httpMethodRestrict
name|String
name|httpMethodRestrict
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"To use a custom buffer size on the javax.servlet.ServletResponse."
argument_list|)
DECL|field|responseBufferSize
name|Integer
name|responseBufferSize
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"If this option is true, The http producer won't read response body and cache the input stream"
argument_list|)
DECL|field|ignoreResponseBody
name|boolean
name|ignoreResponseBody
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"If this option is true then IN exchange headers will be copied to OUT exchange headers according to copy strategy."
operator|+
literal|" Setting this to false, allows to only include the headers from the HTTP response (not propagating IN headers)."
argument_list|)
DECL|field|copyHeaders
name|boolean
name|copyHeaders
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|,
name|description
operator|=
literal|"Whether to eager check whether the HTTP requests has content if the content-length header is 0 or not present."
operator|+
literal|" This can be turned on in case HTTP clients do not send streamed data."
argument_list|)
DECL|field|eagerCheckContentAvailable
name|boolean
name|eagerCheckContentAvailable
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"If this option is true then IN exchange Body of the exchange will be mapped to HTTP body."
operator|+
literal|" Setting this to false will avoid the HTTP mapping."
argument_list|)
DECL|field|mapHttpMessageBody
name|boolean
name|mapHttpMessageBody
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"If this option is true then IN exchange Headers of the exchange will be mapped to HTTP headers."
operator|+
literal|" Setting this to false will avoid the HTTP Headers mapping."
argument_list|)
DECL|field|mapHttpMessageHeaders
name|boolean
name|mapHttpMessageHeaders
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"If this option is true then IN exchange Form Encoded body of the exchange will be mapped to HTTP."
operator|+
literal|" Setting this to false will avoid the HTTP Form Encoded body mapping."
argument_list|)
DECL|field|mapHttpMessageFormUrlEncodedBody
name|boolean
name|mapHttpMessageFormUrlEncodedBody
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|defaultValue
operator|=
literal|"200-299"
argument_list|,
name|description
operator|=
literal|"The status codes which are considered a success response. The values are inclusive. Multiple ranges can be"
operator|+
literal|" defined, separated by comma, e.g. 200-204,209,301-304. Each range must be a single number or from-to with the dash included."
argument_list|)
DECL|field|okStatusCodeRange
specifier|private
name|String
name|okStatusCodeRange
init|=
literal|"200-299"
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|description
operator|=
literal|"Refers to a custom org.apache.camel.component.http.UrlRewrite which allows you to rewrite urls when you bridge/proxy endpoints."
operator|+
literal|" See more details at http://camel.apache.org/urlrewrite.html"
argument_list|)
annotation|@
name|Deprecated
DECL|field|urlRewrite
specifier|private
name|UrlRewrite
name|urlRewrite
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|,
name|description
operator|=
literal|"Configure the consumer to work in async mode"
argument_list|)
DECL|field|async
specifier|private
name|boolean
name|async
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|description
operator|=
literal|"Configure a cookie handler to maintain a HTTP session"
argument_list|)
DECL|field|cookieHandler
specifier|private
name|CookieHandler
name|cookieHandler
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"Configure the HTTP method to use. The HttpMethod header cannot override this option if set."
argument_list|)
DECL|field|httpMethod
specifier|private
name|HttpMethods
name|httpMethod
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,security"
argument_list|,
name|description
operator|=
literal|"Authentication methods allowed to use as a comma separated list of values Basic, Digest or NTLM."
argument_list|)
DECL|field|authMethod
specifier|private
name|String
name|authMethod
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,security"
argument_list|,
name|enums
operator|=
literal|"Basic,Digest,NTLM"
argument_list|,
name|description
operator|=
literal|"Which authentication method to prioritize to use, either as Basic, Digest or NTLM."
argument_list|)
DECL|field|authMethodPriority
specifier|private
name|String
name|authMethodPriority
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"Authentication username"
argument_list|)
DECL|field|authUsername
specifier|private
name|String
name|authUsername
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"Authentication password"
argument_list|)
DECL|field|authPassword
specifier|private
name|String
name|authPassword
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,security"
argument_list|,
name|description
operator|=
literal|"Authentication domain to use with NTML"
argument_list|)
DECL|field|authDomain
specifier|private
name|String
name|authDomain
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,security"
argument_list|,
name|description
operator|=
literal|"Authentication host to use with NTML"
argument_list|)
DECL|field|authHost
specifier|private
name|String
name|authHost
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|description
operator|=
literal|"Proxy hostname to use"
argument_list|)
DECL|field|proxyHost
specifier|private
name|String
name|proxyHost
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|description
operator|=
literal|"Proxy port to use"
argument_list|)
DECL|field|proxyPort
specifier|private
name|int
name|proxyPort
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|enums
operator|=
literal|"http,https"
argument_list|,
name|description
operator|=
literal|"Proxy authentication scheme to use"
argument_list|)
DECL|field|proxyAuthScheme
specifier|private
name|String
name|proxyAuthScheme
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|enums
operator|=
literal|"Basic,Digest,NTLM"
argument_list|,
name|description
operator|=
literal|"Proxy authentication method to use"
argument_list|)
DECL|field|proxyAuthMethod
specifier|private
name|String
name|proxyAuthMethod
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|secret
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"Proxy authentication username"
argument_list|)
DECL|field|proxyAuthUsername
specifier|private
name|String
name|proxyAuthUsername
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|secret
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"Proxy authentication password"
argument_list|)
DECL|field|proxyAuthPassword
specifier|private
name|String
name|proxyAuthPassword
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|description
operator|=
literal|"Proxy authentication host"
argument_list|)
DECL|field|proxyAuthHost
specifier|private
name|String
name|proxyAuthHost
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|description
operator|=
literal|"Proxy authentication port"
argument_list|)
DECL|field|proxyAuthPort
specifier|private
name|int
name|proxyAuthPort
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,proxy"
argument_list|,
name|description
operator|=
literal|"Proxy authentication domain to use with NTML"
argument_list|)
DECL|field|proxyAuthDomain
specifier|private
name|String
name|proxyAuthDomain
decl_stmt|;
DECL|method|HttpCommonEndpoint ()
specifier|public
name|HttpCommonEndpoint
parameter_list|()
block|{     }
DECL|method|HttpCommonEndpoint (String endPointURI, HttpCommonComponent component, URI httpURI)
specifier|public
name|HttpCommonEndpoint
parameter_list|(
name|String
name|endPointURI
parameter_list|,
name|HttpCommonComponent
name|component
parameter_list|,
name|URI
name|httpURI
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|super
argument_list|(
name|endPointURI
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|component
operator|=
name|component
expr_stmt|;
name|this
operator|.
name|httpUri
operator|=
name|httpURI
expr_stmt|;
block|}
DECL|method|connect (HttpConsumer consumer)
specifier|public
name|void
name|connect
parameter_list|(
name|HttpConsumer
name|consumer
parameter_list|)
throws|throws
name|Exception
block|{
name|component
operator|.
name|connect
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
DECL|method|disconnect (HttpConsumer consumer)
specifier|public
name|void
name|disconnect
parameter_list|(
name|HttpConsumer
name|consumer
parameter_list|)
throws|throws
name|Exception
block|{
name|component
operator|.
name|disconnect
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
DECL|method|canConnect (HttpConsumer consumer)
specifier|public
name|boolean
name|canConnect
parameter_list|(
name|HttpConsumer
name|consumer
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|component
operator|.
name|canConnect
argument_list|(
name|consumer
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getComponent ()
specifier|public
name|HttpCommonComponent
name|getComponent
parameter_list|()
block|{
return|return
operator|(
name|HttpCommonComponent
operator|)
name|super
operator|.
name|getComponent
argument_list|()
return|;
block|}
DECL|method|isLenientProperties ()
specifier|public
name|boolean
name|isLenientProperties
parameter_list|()
block|{
comment|// true to allow dynamic URI options to be configured and passed to external system for eg. the HttpProducer
return|return
literal|true
return|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|// Service Registration
comment|//-------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|getServiceProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
return|return
name|CollectionHelper
operator|.
name|immutableMapOf
argument_list|(
name|ServiceDefinition
operator|.
name|SERVICE_META_PORT
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|getPort
argument_list|()
argument_list|)
argument_list|,
name|ServiceDefinition
operator|.
name|SERVICE_META_PATH
argument_list|,
name|getPath
argument_list|()
argument_list|,
name|ServiceDefinition
operator|.
name|SERVICE_META_PROTOCOL
argument_list|,
name|getProtocol
argument_list|()
argument_list|)
return|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
comment|/**      * @deprecated use {@link #getHttpBinding()}      */
annotation|@
name|Deprecated
DECL|method|getBinding ()
specifier|public
name|HttpBinding
name|getBinding
parameter_list|()
block|{
return|return
name|httpBinding
return|;
block|}
comment|/**      * @deprecated use {@link #setHttpBinding(HttpBinding)}      */
annotation|@
name|Deprecated
DECL|method|setBinding (HttpBinding httpBinding)
specifier|public
name|void
name|setBinding
parameter_list|(
name|HttpBinding
name|httpBinding
parameter_list|)
block|{
name|setHttpBinding
argument_list|(
name|httpBinding
argument_list|)
expr_stmt|;
block|}
DECL|method|getHttpBinding ()
specifier|public
name|HttpBinding
name|getHttpBinding
parameter_list|()
block|{
if|if
condition|(
name|httpBinding
operator|==
literal|null
condition|)
block|{
comment|// create a new binding and use the options from this endpoint
name|httpBinding
operator|=
operator|new
name|DefaultHttpBinding
argument_list|()
expr_stmt|;
name|httpBinding
operator|.
name|setHeaderFilterStrategy
argument_list|(
name|getHeaderFilterStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|httpBinding
operator|.
name|setTransferException
argument_list|(
name|isTransferException
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getComponent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|httpBinding
operator|.
name|setAllowJavaSerializedObject
argument_list|(
name|getComponent
argument_list|()
operator|.
name|isAllowJavaSerializedObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|httpBinding
operator|.
name|setEagerCheckContentAvailable
argument_list|(
name|isEagerCheckContentAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|httpBinding
operator|.
name|setMapHttpMessageBody
argument_list|(
name|isMapHttpMessageBody
argument_list|()
argument_list|)
expr_stmt|;
name|httpBinding
operator|.
name|setMapHttpMessageHeaders
argument_list|(
name|isMapHttpMessageHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|httpBinding
operator|.
name|setMapHttpMessageFormUrlEncodedBody
argument_list|(
name|isMapHttpMessageFormUrlEncodedBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|httpBinding
return|;
block|}
comment|/**      * To use a custom HttpBinding to control the mapping between Camel message and HttpClient.      */
DECL|method|setHttpBinding (HttpBinding httpBinding)
specifier|public
name|void
name|setHttpBinding
parameter_list|(
name|HttpBinding
name|httpBinding
parameter_list|)
block|{
name|this
operator|.
name|httpBinding
operator|=
name|httpBinding
expr_stmt|;
block|}
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
comment|//if the path is empty, we just return the default path here
return|return
name|httpUri
operator|.
name|getPath
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|"/"
else|:
name|httpUri
operator|.
name|getPath
argument_list|()
return|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
if|if
condition|(
name|httpUri
operator|.
name|getPort
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
literal|"https"
operator|.
name|equals
argument_list|(
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|443
return|;
block|}
else|else
block|{
return|return
literal|80
return|;
block|}
block|}
return|return
name|httpUri
operator|.
name|getPort
argument_list|()
return|;
block|}
DECL|method|getProtocol ()
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|httpUri
operator|.
name|getScheme
argument_list|()
return|;
block|}
DECL|method|getHttpUri ()
specifier|public
name|URI
name|getHttpUri
parameter_list|()
block|{
return|return
name|httpUri
return|;
block|}
comment|/**      * The url of the HTTP endpoint to call.      */
DECL|method|setHttpUri (URI httpUri)
specifier|public
name|void
name|setHttpUri
parameter_list|(
name|URI
name|httpUri
parameter_list|)
block|{
name|this
operator|.
name|httpUri
operator|=
name|httpUri
expr_stmt|;
block|}
DECL|method|getHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getHeaderFilterStrategy
parameter_list|()
block|{
return|return
name|headerFilterStrategy
return|;
block|}
comment|/**      * To use a custom HeaderFilterStrategy to filter header to and from Camel message.      */
DECL|method|setHeaderFilterStrategy (HeaderFilterStrategy headerFilterStrategy)
specifier|public
name|void
name|setHeaderFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|headerFilterStrategy
expr_stmt|;
block|}
DECL|method|isThrowExceptionOnFailure ()
specifier|public
name|boolean
name|isThrowExceptionOnFailure
parameter_list|()
block|{
return|return
name|throwExceptionOnFailure
return|;
block|}
comment|/**      * Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server.      * This allows you to get all responses regardless of the HTTP status code.      */
DECL|method|setThrowExceptionOnFailure (boolean throwExceptionOnFailure)
specifier|public
name|void
name|setThrowExceptionOnFailure
parameter_list|(
name|boolean
name|throwExceptionOnFailure
parameter_list|)
block|{
name|this
operator|.
name|throwExceptionOnFailure
operator|=
name|throwExceptionOnFailure
expr_stmt|;
block|}
DECL|method|isBridgeEndpoint ()
specifier|public
name|boolean
name|isBridgeEndpoint
parameter_list|()
block|{
return|return
name|bridgeEndpoint
return|;
block|}
comment|/**      * If the option is true, HttpProducer will ignore the Exchange.HTTP_URI header, and use the endpoint's URI for request.      * You may also set the option throwExceptionOnFailure to be false to let the HttpProducer send all the fault response back.      */
DECL|method|setBridgeEndpoint (boolean bridge)
specifier|public
name|void
name|setBridgeEndpoint
parameter_list|(
name|boolean
name|bridge
parameter_list|)
block|{
name|this
operator|.
name|bridgeEndpoint
operator|=
name|bridge
expr_stmt|;
block|}
DECL|method|isPreserveHostHeader ()
specifier|public
name|boolean
name|isPreserveHostHeader
parameter_list|()
block|{
return|return
name|preserveHostHeader
return|;
block|}
comment|/**      * If the option is true, HttpProducer will set the Host header to the value contained in the current exchange Host header,      * useful in reverse proxy applications where you want the Host header received by the downstream server to reflect the URL called by the upstream client,      * this allows applications which use the Host header to generate accurate URL's for a proxied service      */
DECL|method|setPreserveHostHeader (boolean preserveHostHeader)
specifier|public
name|void
name|setPreserveHostHeader
parameter_list|(
name|boolean
name|preserveHostHeader
parameter_list|)
block|{
name|this
operator|.
name|preserveHostHeader
operator|=
name|preserveHostHeader
expr_stmt|;
block|}
DECL|method|isMatchOnUriPrefix ()
specifier|public
name|boolean
name|isMatchOnUriPrefix
parameter_list|()
block|{
return|return
name|matchOnUriPrefix
return|;
block|}
comment|/**      * Whether or not the consumer should try to find a target consumer by matching the URI prefix if no exact match is found.      *<p/>      * See more details at: http://camel.apache.org/how-do-i-let-jetty-match-wildcards.html      */
DECL|method|setMatchOnUriPrefix (boolean match)
specifier|public
name|void
name|setMatchOnUriPrefix
parameter_list|(
name|boolean
name|match
parameter_list|)
block|{
name|this
operator|.
name|matchOnUriPrefix
operator|=
name|match
expr_stmt|;
block|}
DECL|method|isDisableStreamCache ()
specifier|public
name|boolean
name|isDisableStreamCache
parameter_list|()
block|{
return|return
name|this
operator|.
name|disableStreamCache
return|;
block|}
comment|/**      * Determines whether or not the raw input stream from Servlet is cached or not      * (Camel will read the stream into a in memory/overflow to file, Stream caching) cache.      * By default Camel will cache the Servlet input stream to support reading it multiple times to ensure it Camel      * can retrieve all data from the stream. However you can set this option to true when you for example need      * to access the raw stream, such as streaming it directly to a file or other persistent store.      * DefaultHttpBinding will copy the request input stream into a stream cache and put it into message body      * if this option is false to support reading the stream multiple times.      * If you use Servlet to bridge/proxy an endpoint then consider enabling this option to improve performance,      * in case you do not need to read the message payload multiple times.      + The http/http4 producer will by default cache the response body stream. If setting this option to true,      + then the producers will not cache the response body stream but use the response stream as-is as the message body.      */
DECL|method|setDisableStreamCache (boolean disable)
specifier|public
name|void
name|setDisableStreamCache
parameter_list|(
name|boolean
name|disable
parameter_list|)
block|{
name|this
operator|.
name|disableStreamCache
operator|=
name|disable
expr_stmt|;
block|}
DECL|method|isChunked ()
specifier|public
name|boolean
name|isChunked
parameter_list|()
block|{
return|return
name|this
operator|.
name|chunked
return|;
block|}
comment|/**      * If this option is false Servlet will disable the HTTP streaming and set the content-length header on the response      */
DECL|method|setChunked (boolean chunked)
specifier|public
name|void
name|setChunked
parameter_list|(
name|boolean
name|chunked
parameter_list|)
block|{
name|this
operator|.
name|chunked
operator|=
name|chunked
expr_stmt|;
block|}
DECL|method|isTransferException ()
specifier|public
name|boolean
name|isTransferException
parameter_list|()
block|{
return|return
name|transferException
return|;
block|}
DECL|method|isConnectionClose ()
specifier|public
name|boolean
name|isConnectionClose
parameter_list|()
block|{
return|return
name|connectionClose
return|;
block|}
comment|/**      * If this option is true, the producer will add a Connection Close header to HTTP Request      */
DECL|method|setConnectionClose (boolean connectionClose)
specifier|public
name|void
name|setConnectionClose
parameter_list|(
name|boolean
name|connectionClose
parameter_list|)
block|{
name|this
operator|.
name|connectionClose
operator|=
name|connectionClose
expr_stmt|;
block|}
comment|/**      * If enabled and an Exchange failed processing on the consumer side, and if the caused Exception was send back serialized      * in the response as a application/x-java-serialized-object content type.      * On the producer side the exception will be deserialized and thrown as is, instead of the HttpOperationFailedException.      * The caused exception is required to be serialized.      *<p/>      * This is by default turned off. If you enable this then be aware that Java will deserialize the incoming      * data from the request to Java and that can be a potential security risk.      */
DECL|method|setTransferException (boolean transferException)
specifier|public
name|void
name|setTransferException
parameter_list|(
name|boolean
name|transferException
parameter_list|)
block|{
name|this
operator|.
name|transferException
operator|=
name|transferException
expr_stmt|;
block|}
DECL|method|isTraceEnabled ()
specifier|public
name|boolean
name|isTraceEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
name|traceEnabled
return|;
block|}
comment|/**      * Specifies whether to enable HTTP TRACE for this Servlet consumer. By default TRACE is turned off.      */
DECL|method|setTraceEnabled (boolean traceEnabled)
specifier|public
name|void
name|setTraceEnabled
parameter_list|(
name|boolean
name|traceEnabled
parameter_list|)
block|{
name|this
operator|.
name|traceEnabled
operator|=
name|traceEnabled
expr_stmt|;
block|}
DECL|method|isOptionsEnabled ()
specifier|public
name|boolean
name|isOptionsEnabled
parameter_list|()
block|{
return|return
name|optionsEnabled
return|;
block|}
comment|/**      * Specifies whether to enable HTTP OPTIONS for this Servlet consumer. By default OPTIONS is turned off.      */
DECL|method|setOptionsEnabled (boolean optionsEnabled)
specifier|public
name|void
name|setOptionsEnabled
parameter_list|(
name|boolean
name|optionsEnabled
parameter_list|)
block|{
name|this
operator|.
name|optionsEnabled
operator|=
name|optionsEnabled
expr_stmt|;
block|}
DECL|method|getHttpMethodRestrict ()
specifier|public
name|String
name|getHttpMethodRestrict
parameter_list|()
block|{
return|return
name|httpMethodRestrict
return|;
block|}
comment|/**      * Used to only allow consuming if the HttpMethod matches, such as GET/POST/PUT etc.      * Multiple methods can be specified separated by comma.      */
DECL|method|setHttpMethodRestrict (String httpMethodRestrict)
specifier|public
name|void
name|setHttpMethodRestrict
parameter_list|(
name|String
name|httpMethodRestrict
parameter_list|)
block|{
name|this
operator|.
name|httpMethodRestrict
operator|=
name|httpMethodRestrict
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|getUrlRewrite ()
specifier|public
name|UrlRewrite
name|getUrlRewrite
parameter_list|()
block|{
return|return
name|urlRewrite
return|;
block|}
comment|/**      * Refers to a custom org.apache.camel.component.http.UrlRewrite which allows you to rewrite urls when you bridge/proxy endpoints.      * See more details at http://camel.apache.org/urlrewrite.html      */
annotation|@
name|Deprecated
DECL|method|setUrlRewrite (UrlRewrite urlRewrite)
specifier|public
name|void
name|setUrlRewrite
parameter_list|(
name|UrlRewrite
name|urlRewrite
parameter_list|)
block|{
name|this
operator|.
name|urlRewrite
operator|=
name|urlRewrite
expr_stmt|;
block|}
DECL|method|getResponseBufferSize ()
specifier|public
name|Integer
name|getResponseBufferSize
parameter_list|()
block|{
return|return
name|responseBufferSize
return|;
block|}
comment|/**      * To use a custom buffer size on the javax.servlet.ServletResponse.      */
DECL|method|setResponseBufferSize (Integer responseBufferSize)
specifier|public
name|void
name|setResponseBufferSize
parameter_list|(
name|Integer
name|responseBufferSize
parameter_list|)
block|{
name|this
operator|.
name|responseBufferSize
operator|=
name|responseBufferSize
expr_stmt|;
block|}
DECL|method|isIgnoreResponseBody ()
specifier|public
name|boolean
name|isIgnoreResponseBody
parameter_list|()
block|{
return|return
name|ignoreResponseBody
return|;
block|}
comment|/**      * If this option is true, The http producer won't read response body and cache the input stream.      */
DECL|method|setIgnoreResponseBody (boolean ignoreResponseBody)
specifier|public
name|void
name|setIgnoreResponseBody
parameter_list|(
name|boolean
name|ignoreResponseBody
parameter_list|)
block|{
name|this
operator|.
name|ignoreResponseBody
operator|=
name|ignoreResponseBody
expr_stmt|;
block|}
comment|/**      * If this option is true then IN exchange headers will be copied to OUT exchange headers according to copy strategy.      * Setting this to false, allows to only include the headers from the HTTP response (not propagating IN headers).      */
DECL|method|isCopyHeaders ()
specifier|public
name|boolean
name|isCopyHeaders
parameter_list|()
block|{
return|return
name|copyHeaders
return|;
block|}
DECL|method|setCopyHeaders (boolean copyHeaders)
specifier|public
name|void
name|setCopyHeaders
parameter_list|(
name|boolean
name|copyHeaders
parameter_list|)
block|{
name|this
operator|.
name|copyHeaders
operator|=
name|copyHeaders
expr_stmt|;
block|}
DECL|method|isEagerCheckContentAvailable ()
specifier|public
name|boolean
name|isEagerCheckContentAvailable
parameter_list|()
block|{
return|return
name|eagerCheckContentAvailable
return|;
block|}
comment|/**      * Whether to eager check whether the HTTP requests has content if the content-length header is 0 or not present.      * This can be turned on in case HTTP clients do not send streamed data.      */
DECL|method|setEagerCheckContentAvailable (boolean eagerCheckContentAvailable)
specifier|public
name|void
name|setEagerCheckContentAvailable
parameter_list|(
name|boolean
name|eagerCheckContentAvailable
parameter_list|)
block|{
name|this
operator|.
name|eagerCheckContentAvailable
operator|=
name|eagerCheckContentAvailable
expr_stmt|;
block|}
DECL|method|getOkStatusCodeRange ()
specifier|public
name|String
name|getOkStatusCodeRange
parameter_list|()
block|{
return|return
name|okStatusCodeRange
return|;
block|}
comment|/**      * The status codes which are considered a success response. The values are inclusive. Multiple ranges can be      * defined, separated by comma, e.g.<tt>200-204,209,301-304</tt>. Each range must be a single number or from-to with the      * dash included.      *<p/>      * The default range is<tt>200-299</tt>      */
DECL|method|setOkStatusCodeRange (String okStatusCodeRange)
specifier|public
name|void
name|setOkStatusCodeRange
parameter_list|(
name|String
name|okStatusCodeRange
parameter_list|)
block|{
name|this
operator|.
name|okStatusCodeRange
operator|=
name|okStatusCodeRange
expr_stmt|;
block|}
DECL|method|isMapHttpMessageBody ()
specifier|public
name|boolean
name|isMapHttpMessageBody
parameter_list|()
block|{
return|return
name|mapHttpMessageBody
return|;
block|}
comment|/**      * If this option is true, the IN exchange body will be mapped to HTTP      */
DECL|method|setMapHttpMessageBody (boolean mapHttpMessageBody)
specifier|public
name|void
name|setMapHttpMessageBody
parameter_list|(
name|boolean
name|mapHttpMessageBody
parameter_list|)
block|{
name|this
operator|.
name|mapHttpMessageBody
operator|=
name|mapHttpMessageBody
expr_stmt|;
block|}
DECL|method|isMapHttpMessageHeaders ()
specifier|public
name|boolean
name|isMapHttpMessageHeaders
parameter_list|()
block|{
return|return
name|mapHttpMessageHeaders
return|;
block|}
comment|/**      * If this option is true, the IN exchange headers will be mapped to HTTP Headers      */
DECL|method|setMapHttpMessageHeaders (boolean mapHttpMessageHeaders)
specifier|public
name|void
name|setMapHttpMessageHeaders
parameter_list|(
name|boolean
name|mapHttpMessageHeaders
parameter_list|)
block|{
name|this
operator|.
name|mapHttpMessageHeaders
operator|=
name|mapHttpMessageHeaders
expr_stmt|;
block|}
DECL|method|isMapHttpMessageFormUrlEncodedBody ()
specifier|public
name|boolean
name|isMapHttpMessageFormUrlEncodedBody
parameter_list|()
block|{
return|return
name|mapHttpMessageFormUrlEncodedBody
return|;
block|}
comment|/**      * If this option is true then IN exchange Form Encoded body will be mapped to HTTP      */
DECL|method|setMapHttpMessageFormUrlEncodedBody (boolean mapHttpMessageFormUrlEncodedBody)
specifier|public
name|void
name|setMapHttpMessageFormUrlEncodedBody
parameter_list|(
name|boolean
name|mapHttpMessageFormUrlEncodedBody
parameter_list|)
block|{
name|this
operator|.
name|mapHttpMessageFormUrlEncodedBody
operator|=
name|mapHttpMessageFormUrlEncodedBody
expr_stmt|;
block|}
DECL|method|isAsync ()
specifier|public
name|boolean
name|isAsync
parameter_list|()
block|{
return|return
name|async
return|;
block|}
comment|/**      * If this option is true, the consumer will work in async mode      */
DECL|method|setAsync (boolean async)
specifier|public
name|void
name|setAsync
parameter_list|(
name|boolean
name|async
parameter_list|)
block|{
name|this
operator|.
name|async
operator|=
name|async
expr_stmt|;
block|}
DECL|method|getCookieHandler ()
specifier|public
name|CookieHandler
name|getCookieHandler
parameter_list|()
block|{
return|return
name|cookieHandler
return|;
block|}
comment|/**      * Configure a cookie handler to maintain a HTTP session      */
DECL|method|setCookieHandler (CookieHandler cookieHandler)
specifier|public
name|void
name|setCookieHandler
parameter_list|(
name|CookieHandler
name|cookieHandler
parameter_list|)
block|{
name|this
operator|.
name|cookieHandler
operator|=
name|cookieHandler
expr_stmt|;
block|}
DECL|method|getHttpMethod ()
specifier|public
name|HttpMethods
name|getHttpMethod
parameter_list|()
block|{
return|return
name|httpMethod
return|;
block|}
comment|/**      * Configure the HTTP method to use. The HttpMethod header cannot override this option if set.      */
DECL|method|setHttpMethod (HttpMethods httpMethod)
specifier|public
name|void
name|setHttpMethod
parameter_list|(
name|HttpMethods
name|httpMethod
parameter_list|)
block|{
name|this
operator|.
name|httpMethod
operator|=
name|httpMethod
expr_stmt|;
block|}
DECL|method|getAuthMethod ()
specifier|public
name|String
name|getAuthMethod
parameter_list|()
block|{
return|return
name|authMethod
return|;
block|}
comment|/**      * Authentication methods allowed to use as a comma separated list of values Basic, Digest or NTLM.      */
DECL|method|setAuthMethod (String authMethod)
specifier|public
name|void
name|setAuthMethod
parameter_list|(
name|String
name|authMethod
parameter_list|)
block|{
name|this
operator|.
name|authMethod
operator|=
name|authMethod
expr_stmt|;
block|}
DECL|method|getAuthMethodPriority ()
specifier|public
name|String
name|getAuthMethodPriority
parameter_list|()
block|{
return|return
name|authMethodPriority
return|;
block|}
comment|/**      * Which authentication method to prioritize to use, either as Basic, Digest or NTLM.      */
DECL|method|setAuthMethodPriority (String authMethodPriority)
specifier|public
name|void
name|setAuthMethodPriority
parameter_list|(
name|String
name|authMethodPriority
parameter_list|)
block|{
name|this
operator|.
name|authMethodPriority
operator|=
name|authMethodPriority
expr_stmt|;
block|}
DECL|method|getAuthUsername ()
specifier|public
name|String
name|getAuthUsername
parameter_list|()
block|{
return|return
name|authUsername
return|;
block|}
comment|/**      * Authentication username      */
DECL|method|setAuthUsername (String authUsername)
specifier|public
name|void
name|setAuthUsername
parameter_list|(
name|String
name|authUsername
parameter_list|)
block|{
name|this
operator|.
name|authUsername
operator|=
name|authUsername
expr_stmt|;
block|}
DECL|method|getAuthPassword ()
specifier|public
name|String
name|getAuthPassword
parameter_list|()
block|{
return|return
name|authPassword
return|;
block|}
comment|/**      * Authentication password      */
DECL|method|setAuthPassword (String authPassword)
specifier|public
name|void
name|setAuthPassword
parameter_list|(
name|String
name|authPassword
parameter_list|)
block|{
name|this
operator|.
name|authPassword
operator|=
name|authPassword
expr_stmt|;
block|}
DECL|method|getAuthDomain ()
specifier|public
name|String
name|getAuthDomain
parameter_list|()
block|{
return|return
name|authDomain
return|;
block|}
comment|/**      * Authentication domain to use with NTML      */
DECL|method|setAuthDomain (String authDomain)
specifier|public
name|void
name|setAuthDomain
parameter_list|(
name|String
name|authDomain
parameter_list|)
block|{
name|this
operator|.
name|authDomain
operator|=
name|authDomain
expr_stmt|;
block|}
DECL|method|getAuthHost ()
specifier|public
name|String
name|getAuthHost
parameter_list|()
block|{
return|return
name|authHost
return|;
block|}
comment|/**      * Authentication host to use with NTML      */
DECL|method|setAuthHost (String authHost)
specifier|public
name|void
name|setAuthHost
parameter_list|(
name|String
name|authHost
parameter_list|)
block|{
name|this
operator|.
name|authHost
operator|=
name|authHost
expr_stmt|;
block|}
DECL|method|getProxyAuthScheme ()
specifier|public
name|String
name|getProxyAuthScheme
parameter_list|()
block|{
return|return
name|proxyAuthScheme
return|;
block|}
comment|/**      * Proxy authentication scheme to use      */
DECL|method|setProxyAuthScheme (String proxyAuthScheme)
specifier|public
name|void
name|setProxyAuthScheme
parameter_list|(
name|String
name|proxyAuthScheme
parameter_list|)
block|{
name|this
operator|.
name|proxyAuthScheme
operator|=
name|proxyAuthScheme
expr_stmt|;
block|}
DECL|method|getProxyAuthMethod ()
specifier|public
name|String
name|getProxyAuthMethod
parameter_list|()
block|{
return|return
name|proxyAuthMethod
return|;
block|}
comment|/**      * Proxy authentication method to use      */
DECL|method|setProxyAuthMethod (String proxyAuthMethod)
specifier|public
name|void
name|setProxyAuthMethod
parameter_list|(
name|String
name|proxyAuthMethod
parameter_list|)
block|{
name|this
operator|.
name|proxyAuthMethod
operator|=
name|proxyAuthMethod
expr_stmt|;
block|}
DECL|method|getProxyAuthUsername ()
specifier|public
name|String
name|getProxyAuthUsername
parameter_list|()
block|{
return|return
name|proxyAuthUsername
return|;
block|}
comment|/**      * Proxy authentication username      */
DECL|method|setProxyAuthUsername (String proxyAuthUsername)
specifier|public
name|void
name|setProxyAuthUsername
parameter_list|(
name|String
name|proxyAuthUsername
parameter_list|)
block|{
name|this
operator|.
name|proxyAuthUsername
operator|=
name|proxyAuthUsername
expr_stmt|;
block|}
DECL|method|getProxyAuthPassword ()
specifier|public
name|String
name|getProxyAuthPassword
parameter_list|()
block|{
return|return
name|proxyAuthPassword
return|;
block|}
comment|/**      * Proxy authentication password      */
DECL|method|setProxyAuthPassword (String proxyAuthPassword)
specifier|public
name|void
name|setProxyAuthPassword
parameter_list|(
name|String
name|proxyAuthPassword
parameter_list|)
block|{
name|this
operator|.
name|proxyAuthPassword
operator|=
name|proxyAuthPassword
expr_stmt|;
block|}
DECL|method|getProxyAuthDomain ()
specifier|public
name|String
name|getProxyAuthDomain
parameter_list|()
block|{
return|return
name|proxyAuthDomain
return|;
block|}
comment|/**      * Proxy authentication domain to use with NTML      */
DECL|method|setProxyAuthDomain (String proxyAuthDomain)
specifier|public
name|void
name|setProxyAuthDomain
parameter_list|(
name|String
name|proxyAuthDomain
parameter_list|)
block|{
name|this
operator|.
name|proxyAuthDomain
operator|=
name|proxyAuthDomain
expr_stmt|;
block|}
DECL|method|getProxyAuthHost ()
specifier|public
name|String
name|getProxyAuthHost
parameter_list|()
block|{
return|return
name|proxyAuthHost
return|;
block|}
comment|/**      * Proxy authentication host to use with NTML      */
DECL|method|setProxyAuthHost (String proxyAuthHost)
specifier|public
name|void
name|setProxyAuthHost
parameter_list|(
name|String
name|proxyAuthHost
parameter_list|)
block|{
name|this
operator|.
name|proxyAuthHost
operator|=
name|proxyAuthHost
expr_stmt|;
block|}
DECL|method|getProxyAuthPort ()
specifier|public
name|int
name|getProxyAuthPort
parameter_list|()
block|{
return|return
name|proxyAuthPort
return|;
block|}
comment|/**      * Proxy authentication port      */
DECL|method|setProxyAuthPort (int proxyAuthPort)
specifier|public
name|void
name|setProxyAuthPort
parameter_list|(
name|int
name|proxyAuthPort
parameter_list|)
block|{
name|this
operator|.
name|proxyAuthPort
operator|=
name|proxyAuthPort
expr_stmt|;
block|}
DECL|method|getProxyHost ()
specifier|public
name|String
name|getProxyHost
parameter_list|()
block|{
return|return
name|proxyHost
return|;
block|}
comment|/**      * Proxy hostname to use      */
DECL|method|setProxyHost (String proxyHost)
specifier|public
name|void
name|setProxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|this
operator|.
name|proxyHost
operator|=
name|proxyHost
expr_stmt|;
block|}
DECL|method|getProxyPort ()
specifier|public
name|int
name|getProxyPort
parameter_list|()
block|{
return|return
name|proxyPort
return|;
block|}
comment|/**      * Proxy port to use      */
DECL|method|setProxyPort (int proxyPort)
specifier|public
name|void
name|setProxyPort
parameter_list|(
name|int
name|proxyPort
parameter_list|)
block|{
name|this
operator|.
name|proxyPort
operator|=
name|proxyPort
expr_stmt|;
block|}
block|}
end_class

end_unit

