begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.http.common
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|RestConsumerContextPathMatcher
import|;
end_import

begin_comment
comment|/**  * A {@link org.apache.camel.http.common.HttpServletResolveConsumerStrategy} that supports the Rest DSL.  */
end_comment

begin_class
DECL|class|HttpRestServletResolveConsumerStrategy
specifier|public
class|class
name|HttpRestServletResolveConsumerStrategy
extends|extends
name|HttpServletResolveConsumerStrategy
block|{
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|resolve (HttpServletRequest request, Map<String, HttpConsumer> consumers)
specifier|public
name|HttpConsumer
name|resolve
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|HttpConsumer
argument_list|>
name|consumers
parameter_list|)
block|{
name|HttpConsumer
name|answer
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
name|request
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|method
init|=
name|request
operator|.
name|getMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|RestConsumerContextPathMatcher
operator|.
name|ConsumerPath
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|HttpConsumer
argument_list|>
name|entry
range|:
name|consumers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
operator|new
name|HttpRestConsumerPath
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RestConsumerContextPathMatcher
operator|.
name|ConsumerPath
argument_list|<
name|HttpConsumer
argument_list|>
name|best
init|=
name|RestConsumerContextPathMatcher
operator|.
name|matchBestPath
argument_list|(
name|method
argument_list|,
name|path
argument_list|,
name|paths
argument_list|)
decl_stmt|;
if|if
condition|(
name|best
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|best
operator|.
name|getConsumer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
comment|// fallback to default
name|answer
operator|=
name|super
operator|.
name|resolve
argument_list|(
name|request
argument_list|,
name|consumers
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

