begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.http.common
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StreamCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|stream
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|GZIPHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|MessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Binding between {@link HttpMessage} and {@link HttpServletResponse}.  *<p/>  * Uses by default the {@link org.apache.camel.http.common.HttpHeaderFilterStrategy}  */
end_comment

begin_class
DECL|class|DefaultHttpBinding
specifier|public
class|class
name|DefaultHttpBinding
implements|implements
name|HttpBinding
block|{
comment|/**      * Whether Date/Locale should be converted to String types (enabled by default)      */
DECL|field|DATE_LOCALE_CONVERSION
specifier|public
specifier|static
specifier|final
name|String
name|DATE_LOCALE_CONVERSION
init|=
literal|"CamelHttpBindingDateLocaleConversion"
decl_stmt|;
comment|/**      * The data format used for storing java.util.Date instances as a String value.      */
DECL|field|DATE_FORMAT
specifier|public
specifier|static
specifier|final
name|String
name|DATE_FORMAT
init|=
literal|"EEE, dd MMM yyyy HH:mm:ss zzz"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultHttpBinding
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TIME_ZONE_GMT
specifier|private
specifier|static
specifier|final
name|TimeZone
name|TIME_ZONE_GMT
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
argument_list|)
decl_stmt|;
DECL|field|useReaderForPayload
specifier|private
name|boolean
name|useReaderForPayload
decl_stmt|;
DECL|field|eagerCheckContentAvailable
specifier|private
name|boolean
name|eagerCheckContentAvailable
decl_stmt|;
DECL|field|transferException
specifier|private
name|boolean
name|transferException
decl_stmt|;
DECL|field|allowJavaSerializedObject
specifier|private
name|boolean
name|allowJavaSerializedObject
decl_stmt|;
DECL|field|mapHttpMessageBody
specifier|private
name|boolean
name|mapHttpMessageBody
init|=
literal|true
decl_stmt|;
DECL|field|mapHttpMessageHeaders
specifier|private
name|boolean
name|mapHttpMessageHeaders
init|=
literal|true
decl_stmt|;
DECL|field|mapHttpMessageFormUrlEncodedBody
specifier|private
name|boolean
name|mapHttpMessageFormUrlEncodedBody
init|=
literal|true
decl_stmt|;
DECL|field|headerFilterStrategy
specifier|private
name|HeaderFilterStrategy
name|headerFilterStrategy
init|=
operator|new
name|HttpHeaderFilterStrategy
argument_list|()
decl_stmt|;
DECL|field|fileNameExtWhitelist
specifier|private
name|String
name|fileNameExtWhitelist
decl_stmt|;
DECL|method|DefaultHttpBinding ()
specifier|public
name|DefaultHttpBinding
parameter_list|()
block|{     }
annotation|@
name|Deprecated
DECL|method|DefaultHttpBinding (HeaderFilterStrategy headerFilterStrategy)
specifier|public
name|DefaultHttpBinding
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|headerFilterStrategy
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|DefaultHttpBinding (HttpCommonEndpoint endpoint)
specifier|public
name|DefaultHttpBinding
parameter_list|(
name|HttpCommonEndpoint
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|endpoint
operator|.
name|getHeaderFilterStrategy
argument_list|()
expr_stmt|;
name|this
operator|.
name|transferException
operator|=
name|endpoint
operator|.
name|isTransferException
argument_list|()
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getComponent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|allowJavaSerializedObject
operator|=
name|endpoint
operator|.
name|getComponent
argument_list|()
operator|.
name|isAllowJavaSerializedObject
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|readRequest (HttpServletRequest request, HttpMessage message)
specifier|public
name|void
name|readRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpMessage
name|message
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"readRequest {}"
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// must read body before headers
if|if
condition|(
name|mapHttpMessageBody
condition|)
block|{
name|readBody
argument_list|(
name|request
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapHttpMessageHeaders
condition|)
block|{
name|readHeaders
argument_list|(
name|request
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapHttpMessageFormUrlEncodedBody
condition|)
block|{
try|try
block|{
name|readFormUrlEncodedBody
argument_list|(
name|request
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot read Form URL encoded body due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// populate the headers from the request
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|message
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
comment|// always store these standard headers
comment|// store the method and query and other info in headers as String types
name|String
name|rawPath
init|=
name|getRawPath
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_QUERY
argument_list|,
name|request
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_URL
argument_list|,
name|request
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_URI
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_PATH
argument_list|,
name|rawPath
argument_list|)
expr_stmt|;
comment|// only set content type if not already extracted
if|if
condition|(
operator|!
name|headers
operator|.
name|containsKey
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|)
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|request
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP method {}"
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP query {}"
argument_list|,
name|request
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP url {}"
argument_list|,
name|request
operator|.
name|getRequestURL
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP uri {}"
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP path {}"
argument_list|,
name|rawPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP content-type {}"
argument_list|,
name|headers
operator|.
name|get
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readHeaders (HttpServletRequest request, HttpMessage message)
specifier|protected
name|void
name|readHeaders
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpMessage
name|message
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"readHeaders {}"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|message
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
comment|//apply the headerFilterStrategy
name|Enumeration
argument_list|<
name|?
argument_list|>
name|names
init|=
name|request
operator|.
name|getHeaderNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// use http helper to extract parameter value as it may contain multiple values
name|Object
name|extracted
init|=
name|HttpHelper
operator|.
name|extractHttpParameterValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
comment|// mapping the content-type
if|if
condition|(
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"content-type"
argument_list|)
condition|)
block|{
name|name
operator|=
name|Exchange
operator|.
name|CONTENT_TYPE
expr_stmt|;
block|}
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|name
argument_list|,
name|extracted
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
condition|)
block|{
name|HttpHelper
operator|.
name|appendHeader
argument_list|(
name|headers
argument_list|,
name|name
argument_list|,
name|extracted
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getCharacterEncoding
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_CHARACTER_ENCODING
argument_list|,
name|request
operator|.
name|getCharacterEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
name|request
operator|.
name|getCharacterEncoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|populateRequestParameters
argument_list|(
name|request
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot read request parameters due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|readBody (HttpServletRequest request, HttpMessage message)
specifier|protected
name|void
name|readBody
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpMessage
name|message
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"readBody {}"
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// lets parse the body
name|Object
name|body
init|=
name|message
operator|.
name|getBody
argument_list|()
decl_stmt|;
comment|// reset the stream cache if the body is the instance of StreamCache
if|if
condition|(
name|body
operator|instanceof
name|StreamCache
condition|)
block|{
operator|(
operator|(
name|StreamCache
operator|)
name|body
operator|)
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|// if content type is serialized java object, then de-serialize it to a Java object
if|if
condition|(
name|request
operator|.
name|getContentType
argument_list|()
operator|!=
literal|null
operator|&&
name|HttpConstants
operator|.
name|CONTENT_TYPE_JAVA_SERIALIZED_OBJECT
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getContentType
argument_list|()
argument_list|)
condition|)
block|{
comment|// only deserialize java if allowed
if|if
condition|(
name|allowJavaSerializedObject
operator|||
name|isTransferException
argument_list|()
condition|)
block|{
try|try
block|{
name|InputStream
name|is
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|Object
name|object
init|=
name|HttpHelper
operator|.
name|deserializeJavaObjectFromStream
argument_list|(
name|is
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setBody
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot deserialize body to Java object"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// set empty body
name|message
operator|.
name|setBody
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|populateAttachments
argument_list|(
name|request
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|populateRequestParameters (HttpServletRequest request, HttpMessage message)
specifier|protected
name|void
name|populateRequestParameters
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpMessage
name|message
parameter_list|)
throws|throws
name|Exception
block|{
comment|//we populate the http request parameters without checking the request method
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|message
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|?
argument_list|>
name|names
init|=
name|request
operator|.
name|getParameterNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
comment|// there may be multiple values for the same name
name|String
index|[]
name|values
init|=
name|request
operator|.
name|getParameterValues
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP parameter {} = {}"
argument_list|,
name|name
argument_list|,
name|values
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
condition|)
block|{
name|HttpHelper
operator|.
name|appendHeader
argument_list|(
name|headers
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|readFormUrlEncodedBody (HttpServletRequest request, HttpMessage message)
specifier|protected
name|void
name|readFormUrlEncodedBody
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpMessage
name|message
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"readFormUrlEncodedBody {}"
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// should we extract key=value pairs from form bodies (application/x-www-form-urlencoded)
comment|// and map those to Camel headers
if|if
condition|(
name|mapHttpMessageBody
operator|&&
name|mapHttpMessageHeaders
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP method {} with Content-Type {}"
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
argument_list|,
name|request
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|message
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|Boolean
name|flag
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|SKIP_WWW_FORM_URLENCODED
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|skipWwwFormUrlEncoding
init|=
name|flag
operator|!=
literal|null
condition|?
name|flag
else|:
literal|false
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|equals
argument_list|(
literal|"POST"
argument_list|)
operator|&&
name|request
operator|.
name|getContentType
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getContentType
argument_list|()
operator|.
name|startsWith
argument_list|(
name|HttpConstants
operator|.
name|CONTENT_TYPE_WWW_FORM_URLENCODED
argument_list|)
operator|&&
operator|!
name|skipWwwFormUrlEncoding
condition|)
block|{
name|String
name|charset
init|=
name|request
operator|.
name|getCharacterEncoding
argument_list|()
decl_stmt|;
if|if
condition|(
name|charset
operator|==
literal|null
condition|)
block|{
name|charset
operator|=
literal|"UTF-8"
expr_stmt|;
block|}
comment|// lets parse the body
name|Object
name|body
init|=
name|message
operator|.
name|getBody
argument_list|()
decl_stmt|;
comment|// reset the stream cache if the body is the instance of StreamCache
if|if
condition|(
name|body
operator|instanceof
name|StreamCache
condition|)
block|{
operator|(
operator|(
name|StreamCache
operator|)
name|body
operator|)
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|// Push POST form params into the headers to retain compatibility with DefaultHttpBinding
name|String
name|text
init|=
name|message
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|text
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|param
range|:
name|text
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
control|)
block|{
name|String
index|[]
name|pair
init|=
name|param
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|String
name|name
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|pair
index|[
literal|1
index|]
argument_list|,
name|charset
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
condition|)
block|{
name|HttpHelper
operator|.
name|appendHeader
argument_list|(
name|headers
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid parameter, expected to be a pair but was "
operator|+
name|param
argument_list|)
throw|;
block|}
block|}
block|}
comment|// reset the stream cache if the body is the instance of StreamCache
if|if
condition|(
name|body
operator|instanceof
name|StreamCache
condition|)
block|{
operator|(
operator|(
name|StreamCache
operator|)
name|body
operator|)
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getRawPath (HttpServletRequest request)
specifier|private
name|String
name|getRawPath
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|String
name|uri
init|=
name|request
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
comment|/**          * In async case, it seems that request.getContextPath() can return null          * @see https://dev.eclipse.org/mhonarc/lists/jetty-users/msg04669.html          */
name|String
name|contextPath
init|=
name|request
operator|.
name|getContextPath
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|request
operator|.
name|getContextPath
argument_list|()
decl_stmt|;
name|String
name|servletPath
init|=
name|request
operator|.
name|getServletPath
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|request
operator|.
name|getServletPath
argument_list|()
decl_stmt|;
return|return
name|uri
operator|.
name|substring
argument_list|(
name|contextPath
operator|.
name|length
argument_list|()
operator|+
name|servletPath
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
DECL|method|populateAttachments (HttpServletRequest request, HttpMessage message)
specifier|protected
name|void
name|populateAttachments
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpMessage
name|message
parameter_list|)
block|{
comment|// check if there is multipart files, if so will put it into DataHandler
name|Enumeration
argument_list|<
name|?
argument_list|>
name|names
init|=
name|request
operator|.
name|getAttributeNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Object
name|object
init|=
name|request
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP attachment {} = {}"
argument_list|,
name|name
argument_list|,
name|object
argument_list|)
expr_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|File
condition|)
block|{
name|String
name|fileName
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// is the file name accepted
name|boolean
name|accepted
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|fileNameExtWhitelist
operator|!=
literal|null
condition|)
block|{
name|String
name|ext
init|=
name|FileUtil
operator|.
name|onlyExt
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ext
operator|!=
literal|null
condition|)
block|{
name|ext
operator|=
name|ext
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|fileNameExtWhitelist
operator|=
name|fileNameExtWhitelist
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fileNameExtWhitelist
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
operator|&&
operator|!
name|fileNameExtWhitelist
operator|.
name|contains
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|accepted
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|accepted
condition|)
block|{
name|message
operator|.
name|addAttachment
argument_list|(
name|fileName
argument_list|,
operator|new
name|DataHandler
argument_list|(
operator|new
name|CamelFileDataSource
argument_list|(
operator|(
name|File
operator|)
name|object
argument_list|,
name|fileName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot add file as attachment: {} because the file is not accepted according to fileNameExtWhitelist: {}"
argument_list|,
name|fileName
argument_list|,
name|fileNameExtWhitelist
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|writeResponse (Exchange exchange, HttpServletResponse response)
specifier|public
name|void
name|writeResponse
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|Message
name|target
init|=
name|exchange
operator|.
name|hasOut
argument_list|()
condition|?
name|exchange
operator|.
name|getOut
argument_list|()
else|:
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|isFailed
argument_list|()
condition|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|doWriteExceptionResponse
argument_list|(
name|exchange
operator|.
name|getException
argument_list|()
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// it must be a fault, no need to check for the fault flag on the message
name|doWriteFaultResponse
argument_list|(
name|target
argument_list|,
name|response
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|exchange
operator|.
name|hasOut
argument_list|()
condition|)
block|{
comment|// just copy the protocol relates header if we do not have them
name|copyProtocolHeaders
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|exchange
operator|.
name|getOut
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doWriteResponse
argument_list|(
name|target
argument_list|,
name|response
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|copyProtocolHeaders (Message request, Message response)
specifier|private
name|void
name|copyProtocolHeaders
parameter_list|(
name|Message
name|request
parameter_list|,
name|Message
name|response
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_ENCODING
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|contentEncoding
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_ENCODING
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_ENCODING
argument_list|,
name|contentEncoding
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkChunked
argument_list|(
name|response
argument_list|,
name|response
operator|.
name|getExchange
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|TRANSFER_ENCODING
argument_list|,
literal|"chunked"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doWriteExceptionResponse (Throwable exception, HttpServletResponse response)
specifier|public
name|void
name|doWriteExceptionResponse
parameter_list|(
name|Throwable
name|exception
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|exception
operator|instanceof
name|TimeoutException
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_GATEWAY_TIMEOUT
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/plain"
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"Timeout error"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTransferException
argument_list|()
condition|)
block|{
comment|// transfer the exception as a serialized java object
name|HttpHelper
operator|.
name|writeObjectToServletResponse
argument_list|(
name|response
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// write stacktrace as plain text
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/plain"
argument_list|)
expr_stmt|;
name|PrintWriter
name|pw
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|exception
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|doWriteFaultResponse (Message message, HttpServletResponse response, Exchange exchange)
specifier|public
name|void
name|doWriteFaultResponse
parameter_list|(
name|Message
name|message
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
name|doWriteResponse
argument_list|(
name|message
argument_list|,
name|response
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|doWriteResponse (Message message, HttpServletResponse response, Exchange exchange)
specifier|public
name|void
name|doWriteResponse
parameter_list|(
name|Message
name|message
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set the status code in the response. Default is 200.
if|if
condition|(
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|int
name|code
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
comment|// set the content type in the response.
name|String
name|contentType
init|=
name|MessageHelper
operator|.
name|getContentType
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
comment|// append headers
comment|// must use entrySet to ensure case of keys is preserved
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// use an iterator as there can be multiple values. (must not use a delimiter)
specifier|final
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|value
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|headerValue
init|=
name|convertHeaderValueToString
argument_list|(
name|exchange
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerValue
operator|!=
literal|null
operator|&&
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|key
argument_list|,
name|headerValue
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|response
operator|.
name|addHeader
argument_list|(
name|key
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// write the body.
if|if
condition|(
name|message
operator|.
name|getBody
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|GZIPHelper
operator|.
name|isGzip
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|doWriteGZIPResponse
argument_list|(
name|message
argument_list|,
name|response
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doWriteDirectResponse
argument_list|(
name|message
argument_list|,
name|response
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|convertHeaderValueToString (Exchange exchange, Object headerValue)
specifier|protected
name|String
name|convertHeaderValueToString
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|headerValue
parameter_list|)
block|{
if|if
condition|(
operator|(
name|headerValue
operator|instanceof
name|Date
operator|||
name|headerValue
operator|instanceof
name|Locale
operator|)
operator|&&
name|convertDateAndLocaleLocally
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
if|if
condition|(
name|headerValue
operator|instanceof
name|Date
condition|)
block|{
return|return
name|toHttpDate
argument_list|(
operator|(
name|Date
operator|)
name|headerValue
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|toHttpLanguage
argument_list|(
operator|(
name|Locale
operator|)
name|headerValue
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|headerValue
argument_list|)
return|;
block|}
block|}
DECL|method|convertDateAndLocaleLocally (Exchange exchange)
specifier|protected
name|boolean
name|convertDateAndLocaleLocally
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// This check is done only if a given header value is Date or Locale
return|return
name|exchange
operator|.
name|getProperty
argument_list|(
name|DATE_LOCALE_CONVERSION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|isText (String contentType)
specifier|protected
name|boolean
name|isText
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
name|String
name|temp
init|=
name|contentType
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|temp
operator|.
name|contains
argument_list|(
literal|"text"
argument_list|)
operator|||
name|temp
operator|.
name|contains
argument_list|(
literal|"html"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|copyStream (InputStream is, OutputStream os, int bufferSize)
specifier|protected
name|int
name|copyStream
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// copy stream, and must flush on each write as etc Jetty has better performance when
comment|// flushing after writing to its servlet output stream
return|return
name|IOHelper
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|os
argument_list|,
name|bufferSize
argument_list|,
literal|true
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|os
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doWriteDirectResponse (Message message, HttpServletResponse response, Exchange exchange)
specifier|protected
name|void
name|doWriteDirectResponse
parameter_list|(
name|Message
name|message
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if content type is serialized Java object, then serialize and write it to the response
name|String
name|contentType
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
operator|&&
name|HttpConstants
operator|.
name|CONTENT_TYPE_JAVA_SERIALIZED_OBJECT
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
condition|)
block|{
if|if
condition|(
name|allowJavaSerializedObject
operator|||
name|isTransferException
argument_list|()
condition|)
block|{
try|try
block|{
name|Object
name|object
init|=
name|message
operator|.
name|getMandatoryBody
argument_list|(
name|Serializable
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpHelper
operator|.
name|writeObjectToServletResponse
argument_list|(
name|response
argument_list|,
name|object
argument_list|)
expr_stmt|;
comment|// object is written so return
return|return;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Content-type "
operator|+
name|HttpConstants
operator|.
name|CONTENT_TYPE_JAVA_SERIALIZED_OBJECT
operator|+
literal|" is not allowed"
argument_list|)
throw|;
block|}
block|}
comment|// prefer streaming
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|checkChunked
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|is
operator|=
name|message
operator|.
name|getBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// try to use input stream first, so we can copy directly
if|if
condition|(
operator|!
name|isText
argument_list|(
name|contentType
argument_list|)
condition|)
block|{
name|is
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|message
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|ServletOutputStream
name|os
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|checkChunked
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|CachedOutputStream
name|stream
init|=
operator|new
name|CachedOutputStream
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
try|try
block|{
comment|// copy directly from input stream to the cached output stream to get the content length
name|int
name|len
init|=
name|copyStream
argument_list|(
name|is
argument_list|,
name|stream
argument_list|,
name|response
operator|.
name|getBufferSize
argument_list|()
argument_list|)
decl_stmt|;
comment|// we need to setup the length if message is not chucked
name|response
operator|.
name|setContentLength
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|OutputStream
name|current
init|=
name|stream
operator|.
name|getCurrentStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|instanceof
name|ByteArrayOutputStream
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Streaming (direct) response in non-chunked mode with content-length {}"
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|bos
init|=
operator|(
name|ByteArrayOutputStream
operator|)
name|current
decl_stmt|;
name|bos
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Streaming response in non-chunked mode with content-length {} and buffer size: {}"
argument_list|,
name|len
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|copyStream
argument_list|(
name|stream
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|os
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Streaming response in chunked mode with buffer size {}"
argument_list|,
name|response
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|copyStream
argument_list|(
name|is
argument_list|,
name|os
argument_list|,
name|response
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// not convertable as a stream so fallback as a String
name|String
name|data
init|=
name|message
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
comment|// set content length and encoding before we write data
name|String
name|charset
init|=
name|IOHelper
operator|.
name|getCharsetName
argument_list|(
name|exchange
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|int
name|dataByteLength
init|=
name|data
operator|.
name|getBytes
argument_list|(
name|charset
argument_list|)
operator|.
name|length
decl_stmt|;
name|response
operator|.
name|setCharacterEncoding
argument_list|(
name|charset
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentLength
argument_list|(
name|dataByteLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing response in non-chunked mode as plain text with content-length {} and buffer size: {}"
argument_list|,
name|dataByteLength
argument_list|,
name|response
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|print
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|checkChunked (Message message, Exchange exchange)
specifier|protected
name|boolean
name|checkChunked
parameter_list|(
name|Message
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|boolean
name|answer
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_CHUNKED
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// check the endpoint option
name|Endpoint
name|endpoint
init|=
name|exchange
operator|.
name|getFromEndpoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpoint
operator|instanceof
name|HttpCommonEndpoint
condition|)
block|{
name|answer
operator|=
operator|(
operator|(
name|HttpCommonEndpoint
operator|)
name|endpoint
operator|)
operator|.
name|isChunked
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|answer
operator|=
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_CHUNKED
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|doWriteGZIPResponse (Message message, HttpServletResponse response, Exchange exchange)
specifier|protected
name|void
name|doWriteGZIPResponse
parameter_list|(
name|Message
name|message
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
decl_stmt|;
try|try
block|{
name|bytes
operator|=
name|message
operator|.
name|getMandatoryBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|byte
index|[]
name|data
init|=
name|GZIPHelper
operator|.
name|compressGZIP
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|ServletOutputStream
name|os
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Streaming response as GZIP in non-chunked mode with content-length {} and buffer size: {}"
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|response
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setContentLength
argument_list|(
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseBody (HttpMessage httpMessage)
specifier|public
name|Object
name|parseBody
parameter_list|(
name|HttpMessage
name|httpMessage
parameter_list|)
throws|throws
name|IOException
block|{
comment|// lets assume the body is a reader
name|HttpServletRequest
name|request
init|=
name|httpMessage
operator|.
name|getRequest
argument_list|()
decl_stmt|;
comment|// there is only a body if we have a content length, or its -1 to indicate unknown length
name|int
name|len
init|=
name|request
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HttpServletRequest content-length: {}"
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|isUseReaderForPayload
argument_list|()
condition|)
block|{
comment|// use reader to read the response body
return|return
name|request
operator|.
name|getReader
argument_list|()
return|;
block|}
else|else
block|{
comment|// if we do not know if there is any data at all, then make sure to check the stream first
if|if
condition|(
name|len
operator|<
literal|0
operator|&&
name|isEagerCheckContentAvailable
argument_list|()
condition|)
block|{
name|InputStream
name|is
init|=
name|request
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|is
operator|.
name|available
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// no data so return null
return|return
literal|null
return|;
block|}
block|}
comment|// read the response body from servlet request
return|return
name|HttpHelper
operator|.
name|readRequestBodyFromServletRequest
argument_list|(
name|request
argument_list|,
name|httpMessage
operator|.
name|getExchange
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|isUseReaderForPayload ()
specifier|public
name|boolean
name|isUseReaderForPayload
parameter_list|()
block|{
return|return
name|useReaderForPayload
return|;
block|}
DECL|method|setUseReaderForPayload (boolean useReaderForPayload)
specifier|public
name|void
name|setUseReaderForPayload
parameter_list|(
name|boolean
name|useReaderForPayload
parameter_list|)
block|{
name|this
operator|.
name|useReaderForPayload
operator|=
name|useReaderForPayload
expr_stmt|;
block|}
DECL|method|isEagerCheckContentAvailable ()
specifier|public
name|boolean
name|isEagerCheckContentAvailable
parameter_list|()
block|{
return|return
name|eagerCheckContentAvailable
return|;
block|}
DECL|method|setEagerCheckContentAvailable (boolean eagerCheckContentAvailable)
specifier|public
name|void
name|setEagerCheckContentAvailable
parameter_list|(
name|boolean
name|eagerCheckContentAvailable
parameter_list|)
block|{
name|this
operator|.
name|eagerCheckContentAvailable
operator|=
name|eagerCheckContentAvailable
expr_stmt|;
block|}
DECL|method|isTransferException ()
specifier|public
name|boolean
name|isTransferException
parameter_list|()
block|{
return|return
name|transferException
return|;
block|}
DECL|method|setTransferException (boolean transferException)
specifier|public
name|void
name|setTransferException
parameter_list|(
name|boolean
name|transferException
parameter_list|)
block|{
name|this
operator|.
name|transferException
operator|=
name|transferException
expr_stmt|;
block|}
DECL|method|isAllowJavaSerializedObject ()
specifier|public
name|boolean
name|isAllowJavaSerializedObject
parameter_list|()
block|{
return|return
name|allowJavaSerializedObject
return|;
block|}
DECL|method|setAllowJavaSerializedObject (boolean allowJavaSerializedObject)
specifier|public
name|void
name|setAllowJavaSerializedObject
parameter_list|(
name|boolean
name|allowJavaSerializedObject
parameter_list|)
block|{
name|this
operator|.
name|allowJavaSerializedObject
operator|=
name|allowJavaSerializedObject
expr_stmt|;
block|}
DECL|method|getHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getHeaderFilterStrategy
parameter_list|()
block|{
return|return
name|headerFilterStrategy
return|;
block|}
DECL|method|setHeaderFilterStrategy (HeaderFilterStrategy headerFilterStrategy)
specifier|public
name|void
name|setHeaderFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|headerFilterStrategy
expr_stmt|;
block|}
DECL|method|isMapHttpMessageBody ()
specifier|public
name|boolean
name|isMapHttpMessageBody
parameter_list|()
block|{
return|return
name|mapHttpMessageBody
return|;
block|}
DECL|method|setMapHttpMessageBody (boolean mapHttpMessageBody)
specifier|public
name|void
name|setMapHttpMessageBody
parameter_list|(
name|boolean
name|mapHttpMessageBody
parameter_list|)
block|{
name|this
operator|.
name|mapHttpMessageBody
operator|=
name|mapHttpMessageBody
expr_stmt|;
block|}
DECL|method|isMapHttpMessageHeaders ()
specifier|public
name|boolean
name|isMapHttpMessageHeaders
parameter_list|()
block|{
return|return
name|mapHttpMessageHeaders
return|;
block|}
DECL|method|setMapHttpMessageHeaders (boolean mapHttpMessageHeaders)
specifier|public
name|void
name|setMapHttpMessageHeaders
parameter_list|(
name|boolean
name|mapHttpMessageHeaders
parameter_list|)
block|{
name|this
operator|.
name|mapHttpMessageHeaders
operator|=
name|mapHttpMessageHeaders
expr_stmt|;
block|}
DECL|method|isMapHttpMessageFormUrlEncodedBody ()
specifier|public
name|boolean
name|isMapHttpMessageFormUrlEncodedBody
parameter_list|()
block|{
return|return
name|mapHttpMessageFormUrlEncodedBody
return|;
block|}
DECL|method|setMapHttpMessageFormUrlEncodedBody (boolean mapHttpMessageFormUrlEncodedBody)
specifier|public
name|void
name|setMapHttpMessageFormUrlEncodedBody
parameter_list|(
name|boolean
name|mapHttpMessageFormUrlEncodedBody
parameter_list|)
block|{
name|this
operator|.
name|mapHttpMessageFormUrlEncodedBody
operator|=
name|mapHttpMessageFormUrlEncodedBody
expr_stmt|;
block|}
DECL|method|getFileNameExtWhitelist ()
specifier|public
name|String
name|getFileNameExtWhitelist
parameter_list|()
block|{
return|return
name|fileNameExtWhitelist
return|;
block|}
DECL|method|setFileNameExtWhitelist (String fileNameExtWhitelist)
specifier|public
name|void
name|setFileNameExtWhitelist
parameter_list|(
name|String
name|fileNameExtWhitelist
parameter_list|)
block|{
name|this
operator|.
name|fileNameExtWhitelist
operator|=
name|fileNameExtWhitelist
expr_stmt|;
block|}
DECL|method|getHttpDateFormat ()
specifier|protected
specifier|static
name|SimpleDateFormat
name|getHttpDateFormat
parameter_list|()
block|{
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|DATE_FORMAT
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|dateFormat
operator|.
name|setTimeZone
argument_list|(
name|TIME_ZONE_GMT
argument_list|)
expr_stmt|;
return|return
name|dateFormat
return|;
block|}
DECL|method|toHttpDate (Date date)
specifier|protected
specifier|static
name|String
name|toHttpDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|SimpleDateFormat
name|format
init|=
name|getHttpDateFormat
argument_list|()
decl_stmt|;
return|return
name|format
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
DECL|method|toHttpLanguage (Locale locale)
specifier|protected
specifier|static
name|String
name|toHttpLanguage
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|locale
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|locale
operator|.
name|getCountry
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Locale.toString() will use a "_" separator instead,
comment|// while '-' is expected in headers such as Content-Language, etc:
comment|// http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.10
name|sb
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
operator|.
name|append
argument_list|(
name|locale
operator|.
name|getCountry
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

