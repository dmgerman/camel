begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.google.sheets.server
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|sheets
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ReadListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|consol
operator|.
name|citrus
operator|.
name|Citrus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|consol
operator|.
name|citrus
operator|.
name|dsl
operator|.
name|runner
operator|.
name|DefaultTestRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|consol
operator|.
name|citrus
operator|.
name|dsl
operator|.
name|runner
operator|.
name|TestRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|consol
operator|.
name|citrus
operator|.
name|exceptions
operator|.
name|CitrusRuntimeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|consol
operator|.
name|citrus
operator|.
name|http
operator|.
name|server
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|consol
operator|.
name|citrus
operator|.
name|http
operator|.
name|server
operator|.
name|HttpServerBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|consol
operator|.
name|citrus
operator|.
name|http
operator|.
name|servlet
operator|.
name|GzipHttpServletResponseWrapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|consol
operator|.
name|citrus
operator|.
name|http
operator|.
name|servlet
operator|.
name|RequestCachingServletFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|SecureRequestCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ServerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|SslConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|core
operator|.
name|authority
operator|.
name|SimpleGrantedAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|DefaultOAuth2AccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|DefaultOAuth2RefreshToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|AuthorizationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|ClientDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|OAuth2Authentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|authentication
operator|.
name|OAuth2AuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|authentication
operator|.
name|OAuth2AuthenticationProcessingFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|client
operator|.
name|BaseClientDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|client
operator|.
name|InMemoryClientDetailsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|token
operator|.
name|DefaultTokenServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|oauth2
operator|.
name|provider
operator|.
name|token
operator|.
name|store
operator|.
name|InMemoryTokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|filter
operator|.
name|OncePerRequestFilter
import|;
end_import

begin_class
DECL|class|GoogleSheetsApiTestServer
specifier|public
specifier|final
class|class
name|GoogleSheetsApiTestServer
block|{
DECL|field|citrus
specifier|private
specifier|static
name|Citrus
name|citrus
init|=
name|Citrus
operator|.
name|newInstance
argument_list|()
decl_stmt|;
DECL|field|httpServer
specifier|private
specifier|final
name|HttpServer
name|httpServer
decl_stmt|;
DECL|field|runner
specifier|private
name|TestRunner
name|runner
decl_stmt|;
comment|/**      * Prevent direct instantiation.      */
DECL|method|GoogleSheetsApiTestServer (HttpServer httpServer)
specifier|private
name|GoogleSheetsApiTestServer
parameter_list|(
name|HttpServer
name|httpServer
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|httpServer
operator|=
name|httpServer
expr_stmt|;
block|}
comment|/**      * Initialize new test run.      */
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
name|runner
operator|=
operator|new
name|DefaultTestRunner
argument_list|(
name|citrus
operator|.
name|getApplicationContext
argument_list|()
argument_list|,
name|citrus
operator|.
name|createTestContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Stop and reset current test run if any.      */
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
if|if
condition|(
name|runner
operator|!=
literal|null
condition|)
block|{
name|runner
operator|.
name|purgeEndpoints
argument_list|(
name|action
lambda|->
name|action
operator|.
name|endpoint
argument_list|(
name|httpServer
argument_list|)
argument_list|)
expr_stmt|;
name|runner
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Obtains the httpServer.      *       * @return      */
DECL|method|getHttpServer ()
specifier|public
name|HttpServer
name|getHttpServer
parameter_list|()
block|{
return|return
name|httpServer
return|;
block|}
DECL|method|afterPropertiesSet ()
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
name|httpServer
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
block|}
DECL|method|getRunner ()
specifier|public
name|TestRunner
name|getRunner
parameter_list|()
block|{
return|return
name|runner
return|;
block|}
comment|/**      * Builder builds server instance from given http server builder adding more      * setting options in fluent builder pattern style.      */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|serverBuilder
specifier|private
specifier|final
name|HttpServerBuilder
name|serverBuilder
decl_stmt|;
DECL|field|keyStorePath
specifier|private
name|Path
name|keyStorePath
decl_stmt|;
DECL|field|keyStorePassword
specifier|private
name|String
name|keyStorePassword
decl_stmt|;
DECL|field|securePort
specifier|private
name|int
name|securePort
init|=
literal|8443
decl_stmt|;
DECL|field|basePath
specifier|private
name|String
name|basePath
init|=
literal|""
decl_stmt|;
DECL|field|clientId
specifier|private
name|String
name|clientId
decl_stmt|;
DECL|field|clientSecret
specifier|private
name|String
name|clientSecret
decl_stmt|;
DECL|field|accessToken
specifier|private
name|String
name|accessToken
decl_stmt|;
DECL|field|refreshToken
specifier|private
name|String
name|refreshToken
decl_stmt|;
DECL|method|Builder (HttpServerBuilder serverBuilder)
specifier|public
name|Builder
parameter_list|(
name|HttpServerBuilder
name|serverBuilder
parameter_list|)
block|{
name|this
operator|.
name|serverBuilder
operator|=
name|serverBuilder
expr_stmt|;
block|}
DECL|method|securePort (int securePort)
specifier|public
name|Builder
name|securePort
parameter_list|(
name|int
name|securePort
parameter_list|)
block|{
name|this
operator|.
name|securePort
operator|=
name|securePort
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|keyStorePath (Path keyStorePath)
specifier|public
name|Builder
name|keyStorePath
parameter_list|(
name|Path
name|keyStorePath
parameter_list|)
block|{
name|this
operator|.
name|keyStorePath
operator|=
name|keyStorePath
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|keyStorePassword (String keyStorePass)
specifier|public
name|Builder
name|keyStorePassword
parameter_list|(
name|String
name|keyStorePass
parameter_list|)
block|{
name|this
operator|.
name|keyStorePassword
operator|=
name|keyStorePass
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|basePath (String basePath)
specifier|public
name|Builder
name|basePath
parameter_list|(
name|String
name|basePath
parameter_list|)
block|{
name|this
operator|.
name|basePath
operator|=
name|basePath
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|clientId (String clientId)
specifier|public
name|Builder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|this
operator|.
name|clientId
operator|=
name|clientId
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|clientSecret (String clientSecret)
specifier|public
name|Builder
name|clientSecret
parameter_list|(
name|String
name|clientSecret
parameter_list|)
block|{
name|this
operator|.
name|clientSecret
operator|=
name|clientSecret
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|accessToken (String accessToken)
specifier|public
name|Builder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|this
operator|.
name|accessToken
operator|=
name|accessToken
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|refreshToken (String refreshToken)
specifier|public
name|Builder
name|refreshToken
parameter_list|(
name|String
name|refreshToken
parameter_list|)
block|{
name|this
operator|.
name|refreshToken
operator|=
name|refreshToken
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|GoogleSheetsApiTestServer
name|build
parameter_list|()
throws|throws
name|Exception
block|{
name|SslContextFactory
name|sslContextFactory
init|=
operator|new
name|SslContextFactory
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|sslContextFactory
operator|.
name|setKeyStorePath
argument_list|(
name|keyStorePath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sslContextFactory
operator|.
name|setKeyStorePassword
argument_list|(
name|keyStorePassword
argument_list|)
expr_stmt|;
name|HttpConfiguration
name|parent
init|=
operator|new
name|HttpConfiguration
argument_list|()
decl_stmt|;
name|parent
operator|.
name|setSecureScheme
argument_list|(
literal|"https"
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setSecurePort
argument_list|(
name|securePort
argument_list|)
expr_stmt|;
name|HttpConfiguration
name|httpConfiguration
init|=
operator|new
name|HttpConfiguration
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|httpConfiguration
operator|.
name|setCustomizers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|SecureRequestCustomizer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ServerConnector
name|sslConnector
init|=
operator|new
name|ServerConnector
argument_list|(
operator|new
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
argument_list|()
argument_list|,
operator|new
name|SslConnectionFactory
argument_list|(
name|sslContextFactory
argument_list|,
literal|"http/1.1"
argument_list|)
argument_list|,
operator|new
name|HttpConnectionFactory
argument_list|(
name|httpConfiguration
argument_list|)
argument_list|)
decl_stmt|;
name|sslConnector
operator|.
name|setPort
argument_list|(
name|securePort
argument_list|)
expr_stmt|;
name|serverBuilder
operator|.
name|connector
argument_list|(
name|sslConnector
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Filter
argument_list|>
name|filterMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|filterMap
operator|.
name|put
argument_list|(
literal|"request-caching-filter"
argument_list|,
operator|new
name|RequestCachingServletFilter
argument_list|()
argument_list|)
expr_stmt|;
name|filterMap
operator|.
name|put
argument_list|(
literal|"gzip-filter"
argument_list|,
operator|new
name|GzipServletFilter
argument_list|()
argument_list|)
expr_stmt|;
name|filterMap
operator|.
name|put
argument_list|(
literal|"oauth2-filter"
argument_list|,
name|oauth2Filter
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterMapings
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|filterMapings
operator|.
name|put
argument_list|(
literal|"oauth2-filter"
argument_list|,
literal|"/"
operator|+
name|Optional
operator|.
name|ofNullable
argument_list|(
name|basePath
argument_list|)
operator|.
name|map
argument_list|(
name|path
lambda|->
name|path
operator|+
literal|"/*"
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|serverBuilder
operator|.
name|filterMappings
argument_list|(
name|filterMapings
argument_list|)
expr_stmt|;
name|serverBuilder
operator|.
name|filters
argument_list|(
name|filterMap
argument_list|)
expr_stmt|;
name|serverBuilder
operator|.
name|applicationContext
argument_list|(
name|citrus
operator|.
name|getApplicationContext
argument_list|()
argument_list|)
expr_stmt|;
name|GoogleSheetsApiTestServer
name|server
init|=
operator|new
name|GoogleSheetsApiTestServer
argument_list|(
name|serverBuilder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|server
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
return|return
name|server
return|;
block|}
DECL|method|oauth2Filter ()
specifier|private
name|Filter
name|oauth2Filter
parameter_list|()
block|{
name|BaseClientDetails
name|clientDetails
init|=
operator|new
name|BaseClientDetails
argument_list|()
decl_stmt|;
name|clientDetails
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|clientDetails
operator|.
name|setClientSecret
argument_list|(
name|clientSecret
argument_list|)
expr_stmt|;
name|clientDetails
operator|.
name|setAccessTokenValiditySeconds
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|clientDetails
operator|.
name|setAutoApproveScopes
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"read"
argument_list|,
literal|"write"
argument_list|)
argument_list|)
expr_stmt|;
name|clientDetails
operator|.
name|setScope
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"read"
argument_list|,
literal|"write"
argument_list|)
argument_list|)
expr_stmt|;
name|clientDetails
operator|.
name|setAuthorities
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|SimpleGrantedAuthority
argument_list|(
literal|"client_credentials"
argument_list|)
argument_list|,
operator|new
name|SimpleGrantedAuthority
argument_list|(
literal|"authorization_code"
argument_list|)
argument_list|,
operator|new
name|SimpleGrantedAuthority
argument_list|(
literal|"password"
argument_list|)
argument_list|,
operator|new
name|SimpleGrantedAuthority
argument_list|(
literal|"refresh_token"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|OAuth2AuthenticationProcessingFilter
name|filter
init|=
operator|new
name|OAuth2AuthenticationProcessingFilter
argument_list|()
decl_stmt|;
name|OAuth2AuthenticationManager
name|oauth2AuthenticationManager
init|=
operator|new
name|OAuth2AuthenticationManager
argument_list|()
decl_stmt|;
name|InMemoryClientDetailsService
name|clientDetailsService
init|=
operator|new
name|InMemoryClientDetailsService
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ClientDetails
argument_list|>
name|clientDetailsStore
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|clientDetailsStore
operator|.
name|put
argument_list|(
name|clientId
argument_list|,
name|clientDetails
argument_list|)
expr_stmt|;
name|clientDetailsService
operator|.
name|setClientDetailsStore
argument_list|(
name|clientDetailsStore
argument_list|)
expr_stmt|;
name|oauth2AuthenticationManager
operator|.
name|setClientDetailsService
argument_list|(
name|clientDetailsService
argument_list|)
expr_stmt|;
name|InMemoryTokenStore
name|tokenStore
init|=
operator|new
name|InMemoryTokenStore
argument_list|()
decl_stmt|;
name|AuthorizationRequest
name|authorizationRequest
init|=
operator|new
name|AuthorizationRequest
argument_list|()
decl_stmt|;
name|authorizationRequest
operator|.
name|setClientId
argument_list|(
name|clientDetails
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|authorizationRequest
operator|.
name|setAuthorities
argument_list|(
name|clientDetails
operator|.
name|getAuthorities
argument_list|()
argument_list|)
expr_stmt|;
name|authorizationRequest
operator|.
name|setApproved
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OAuth2Authentication
name|authentication
init|=
operator|new
name|OAuth2Authentication
argument_list|(
name|authorizationRequest
operator|.
name|createOAuth2Request
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|tokenStore
operator|.
name|storeAccessToken
argument_list|(
operator|new
name|DefaultOAuth2AccessToken
argument_list|(
name|accessToken
argument_list|)
argument_list|,
name|authentication
argument_list|)
expr_stmt|;
name|tokenStore
operator|.
name|storeRefreshToken
argument_list|(
operator|new
name|DefaultOAuth2RefreshToken
argument_list|(
name|refreshToken
argument_list|)
argument_list|,
name|authentication
argument_list|)
expr_stmt|;
name|DefaultTokenServices
name|tokenServices
init|=
operator|new
name|DefaultTokenServices
argument_list|()
decl_stmt|;
name|tokenServices
operator|.
name|setTokenStore
argument_list|(
name|tokenStore
argument_list|)
expr_stmt|;
name|tokenServices
operator|.
name|setClientDetailsService
argument_list|(
name|clientDetailsService
argument_list|)
expr_stmt|;
name|tokenServices
operator|.
name|setSupportRefreshToken
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|oauth2AuthenticationManager
operator|.
name|setTokenServices
argument_list|(
name|tokenServices
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setAuthenticationManager
argument_list|(
name|oauth2AuthenticationManager
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
block|}
DECL|class|GzipServletFilter
specifier|private
specifier|static
class|class
name|GzipServletFilter
extends|extends
name|OncePerRequestFilter
block|{
annotation|@
name|Override
DECL|method|doFilterInternal (HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
specifier|protected
name|void
name|doFilterInternal
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|FilterChain
name|filterChain
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|HttpServletRequest
name|filteredRequest
init|=
name|request
decl_stmt|;
name|HttpServletResponse
name|filteredResponse
init|=
name|response
decl_stmt|;
name|String
name|contentEncoding
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentEncoding
operator|!=
literal|null
operator|&&
name|contentEncoding
operator|.
name|contains
argument_list|(
literal|"gzip"
argument_list|)
condition|)
block|{
name|filteredRequest
operator|=
operator|new
name|GzipHttpServletRequestWrapper
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
name|String
name|acceptEncoding
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT_ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
name|acceptEncoding
operator|!=
literal|null
operator|&&
name|acceptEncoding
operator|.
name|contains
argument_list|(
literal|"gzip"
argument_list|)
condition|)
block|{
name|filteredResponse
operator|=
operator|new
name|GzipHttpServletResponseWrapper
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
name|filterChain
operator|.
name|doFilter
argument_list|(
name|filteredRequest
argument_list|,
name|filteredResponse
argument_list|)
expr_stmt|;
if|if
condition|(
name|filteredResponse
operator|instanceof
name|GzipHttpServletResponseWrapper
condition|)
block|{
operator|(
operator|(
name|GzipHttpServletResponseWrapper
operator|)
name|filteredResponse
operator|)
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|GzipHttpServletRequestWrapper
specifier|private
specifier|static
class|class
name|GzipHttpServletRequestWrapper
extends|extends
name|HttpServletRequestWrapper
block|{
comment|/**          * Constructs a request adaptor wrapping the given request.          *          * @param request          * @throws IllegalArgumentException if the request is null          */
DECL|method|GzipHttpServletRequestWrapper (HttpServletRequest request)
specifier|public
name|GzipHttpServletRequestWrapper
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInputStream ()
specifier|public
name|ServletInputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|GzipServletInputStream
argument_list|(
name|getRequest
argument_list|()
argument_list|)
return|;
block|}
comment|/**          * Gzip enabled servlet input stream.          */
DECL|class|GzipServletInputStream
specifier|private
specifier|static
class|class
name|GzipServletInputStream
extends|extends
name|ServletInputStream
block|{
DECL|field|gzipStream
specifier|private
specifier|final
name|GZIPInputStream
name|gzipStream
decl_stmt|;
comment|/**              * Default constructor using wrapped input stream.              *              * @param request              * @throws IOException              */
DECL|method|GzipServletInputStream (ServletRequest request)
specifier|public
name|GzipServletInputStream
parameter_list|(
name|ServletRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|gzipStream
operator|=
operator|new
name|GZIPInputStream
argument_list|(
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isFinished ()
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
try|try
block|{
return|return
name|gzipStream
operator|.
name|available
argument_list|()
operator|==
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CitrusRuntimeException
argument_list|(
literal|"Failed to check gzip intput stream availability"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|isReady ()
specifier|public
name|boolean
name|isReady
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|setReadListener (final ReadListener readListener)
specifier|public
name|void
name|setReadListener
parameter_list|(
specifier|final
name|ReadListener
name|readListener
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unsupported operation"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
block|{
try|try
block|{
return|return
name|gzipStream
operator|.
name|read
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CitrusRuntimeException
argument_list|(
literal|"Failed to read gzip input stream"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|read (byte[] b)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|gzipStream
operator|.
name|read
argument_list|(
name|b
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|gzipStream
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

