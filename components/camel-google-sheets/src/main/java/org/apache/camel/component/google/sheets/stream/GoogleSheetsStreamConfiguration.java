begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.google.sheets.stream
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|sheets
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|sheets
operator|.
name|v4
operator|.
name|SheetsScopes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_comment
comment|/**  * Component configuration for GoogleSheets stream component.  */
end_comment

begin_class
annotation|@
name|UriParams
DECL|class|GoogleSheetsStreamConfiguration
specifier|public
class|class
name|GoogleSheetsStreamConfiguration
implements|implements
name|Cloneable
block|{
DECL|field|DEFAULT_SCOPES
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|DEFAULT_SCOPES
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|SheetsScopes
operator|.
name|SPREADSHEETS
argument_list|)
decl_stmt|;
annotation|@
name|UriPath
DECL|field|apiName
specifier|private
name|String
name|apiName
decl_stmt|;
annotation|@
name|UriParam
DECL|field|scopes
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|scopes
init|=
name|DEFAULT_SCOPES
decl_stmt|;
annotation|@
name|UriParam
DECL|field|clientId
specifier|private
name|String
name|clientId
decl_stmt|;
annotation|@
name|UriParam
DECL|field|clientSecret
specifier|private
name|String
name|clientSecret
decl_stmt|;
annotation|@
name|UriParam
DECL|field|accessToken
specifier|private
name|String
name|accessToken
decl_stmt|;
annotation|@
name|UriParam
DECL|field|refreshToken
specifier|private
name|String
name|refreshToken
decl_stmt|;
annotation|@
name|UriParam
DECL|field|applicationName
specifier|private
name|String
name|applicationName
decl_stmt|;
annotation|@
name|UriParam
DECL|field|spreadsheetId
specifier|private
name|String
name|spreadsheetId
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"10"
argument_list|)
DECL|field|maxResults
specifier|private
name|int
name|maxResults
init|=
literal|10
decl_stmt|;
annotation|@
name|UriParam
DECL|field|range
specifier|private
name|String
name|range
decl_stmt|;
annotation|@
name|UriParam
DECL|field|includeGridData
specifier|private
name|boolean
name|includeGridData
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|enums
operator|=
literal|"ROWS,COLUMNS,DIMENSION_UNSPECIFIED"
argument_list|,
name|defaultValue
operator|=
literal|"ROWS"
argument_list|)
DECL|field|majorDimension
specifier|private
name|String
name|majorDimension
init|=
literal|"ROWS"
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|enums
operator|=
literal|"FORMATTED_VALUE,UNFORMATTED_VALUE,FORMULA"
argument_list|,
name|defaultValue
operator|=
literal|"FORMATTED_VALUE"
argument_list|)
DECL|field|valueRenderOption
specifier|private
name|String
name|valueRenderOption
init|=
literal|"FORMATTED_VALUE"
decl_stmt|;
DECL|method|getClientId ()
specifier|public
name|String
name|getClientId
parameter_list|()
block|{
return|return
name|clientId
return|;
block|}
comment|/**      * Client ID of the sheets application      */
DECL|method|setClientId (String clientId)
specifier|public
name|void
name|setClientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|this
operator|.
name|clientId
operator|=
name|clientId
expr_stmt|;
block|}
DECL|method|getClientSecret ()
specifier|public
name|String
name|getClientSecret
parameter_list|()
block|{
return|return
name|clientSecret
return|;
block|}
comment|/**      * Client secret of the sheets application      */
DECL|method|setClientSecret (String clientSecret)
specifier|public
name|void
name|setClientSecret
parameter_list|(
name|String
name|clientSecret
parameter_list|)
block|{
name|this
operator|.
name|clientSecret
operator|=
name|clientSecret
expr_stmt|;
block|}
DECL|method|getAccessToken ()
specifier|public
name|String
name|getAccessToken
parameter_list|()
block|{
return|return
name|accessToken
return|;
block|}
comment|/**      * OAuth 2 access token. This typically expires after an hour so      * refreshToken is recommended for long term usage.      */
DECL|method|setAccessToken (String accessToken)
specifier|public
name|void
name|setAccessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|this
operator|.
name|accessToken
operator|=
name|accessToken
expr_stmt|;
block|}
DECL|method|getRefreshToken ()
specifier|public
name|String
name|getRefreshToken
parameter_list|()
block|{
return|return
name|refreshToken
return|;
block|}
comment|/**      * OAuth 2 refresh token. Using this, the Google Calendar component can      * obtain a new accessToken whenever the current one expires - a necessity      * if the application is long-lived.      */
DECL|method|setRefreshToken (String refreshToken)
specifier|public
name|void
name|setRefreshToken
parameter_list|(
name|String
name|refreshToken
parameter_list|)
block|{
name|this
operator|.
name|refreshToken
operator|=
name|refreshToken
expr_stmt|;
block|}
DECL|method|getApplicationName ()
specifier|public
name|String
name|getApplicationName
parameter_list|()
block|{
return|return
name|applicationName
return|;
block|}
comment|/**      * Google sheets application name. Example would be "camel-google-sheets/1.0"      */
DECL|method|setApplicationName (String applicationName)
specifier|public
name|void
name|setApplicationName
parameter_list|(
name|String
name|applicationName
parameter_list|)
block|{
name|this
operator|.
name|applicationName
operator|=
name|applicationName
expr_stmt|;
block|}
DECL|method|getScopes ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getScopes
parameter_list|()
block|{
return|return
name|scopes
return|;
block|}
comment|/**      * Specifies the level of permissions you want a sheets application to have to      * a user account. See https://developers.google.com/identity/protocols/googlescopes      * for more info.      */
DECL|method|setScopes (List<String> scopes)
specifier|public
name|void
name|setScopes
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|scopes
parameter_list|)
block|{
name|this
operator|.
name|scopes
operator|=
name|scopes
expr_stmt|;
block|}
comment|/**      * Gets the apiName.      *      * @return      */
DECL|method|getApiName ()
specifier|public
name|String
name|getApiName
parameter_list|()
block|{
return|return
name|apiName
return|;
block|}
comment|/**      * Sets the apiName.      *      * @param apiName      */
DECL|method|setApiName (String apiName)
specifier|public
name|void
name|setApiName
parameter_list|(
name|String
name|apiName
parameter_list|)
block|{
name|this
operator|.
name|apiName
operator|=
name|apiName
expr_stmt|;
block|}
DECL|method|getSpreadsheetId ()
specifier|public
name|String
name|getSpreadsheetId
parameter_list|()
block|{
return|return
name|spreadsheetId
return|;
block|}
comment|/**      * Specifies the spreadsheet identifier that is used to identify the target to obtain.      *      * @param spreadsheetId      */
DECL|method|setSpreadsheetId (String spreadsheetId)
specifier|public
name|void
name|setSpreadsheetId
parameter_list|(
name|String
name|spreadsheetId
parameter_list|)
block|{
name|this
operator|.
name|spreadsheetId
operator|=
name|spreadsheetId
expr_stmt|;
block|}
DECL|method|getMaxResults ()
specifier|public
name|int
name|getMaxResults
parameter_list|()
block|{
return|return
name|maxResults
return|;
block|}
comment|/**      * Specify the maximum number of returned results. This will limit the number of rows in a returned value range      * data set or the number of returned value ranges in a batch request.      *      * @param maxResults      */
DECL|method|setMaxResults (int maxResults)
specifier|public
name|void
name|setMaxResults
parameter_list|(
name|int
name|maxResults
parameter_list|)
block|{
name|this
operator|.
name|maxResults
operator|=
name|maxResults
expr_stmt|;
block|}
DECL|method|getRange ()
specifier|public
name|String
name|getRange
parameter_list|()
block|{
return|return
name|range
return|;
block|}
comment|/**      * Specifies the range of rows and columns in a sheet to get data from.      *      * @param range      */
DECL|method|setRange (String range)
specifier|public
name|void
name|setRange
parameter_list|(
name|String
name|range
parameter_list|)
block|{
name|this
operator|.
name|range
operator|=
name|range
expr_stmt|;
block|}
DECL|method|getMajorDimension ()
specifier|public
name|String
name|getMajorDimension
parameter_list|()
block|{
return|return
name|majorDimension
return|;
block|}
comment|/**      * Specifies the major dimension that results should use..      *      * @param majorDimension      */
DECL|method|setMajorDimension (String majorDimension)
specifier|public
name|void
name|setMajorDimension
parameter_list|(
name|String
name|majorDimension
parameter_list|)
block|{
name|this
operator|.
name|majorDimension
operator|=
name|majorDimension
expr_stmt|;
block|}
DECL|method|getValueRenderOption ()
specifier|public
name|String
name|getValueRenderOption
parameter_list|()
block|{
return|return
name|valueRenderOption
return|;
block|}
comment|/**      * Determines how values should be rendered in the output.      *      * @param valueRenderOption      */
DECL|method|setValueRenderOption (String valueRenderOption)
specifier|public
name|void
name|setValueRenderOption
parameter_list|(
name|String
name|valueRenderOption
parameter_list|)
block|{
name|this
operator|.
name|valueRenderOption
operator|=
name|valueRenderOption
expr_stmt|;
block|}
DECL|method|isIncludeGridData ()
specifier|public
name|boolean
name|isIncludeGridData
parameter_list|()
block|{
return|return
name|includeGridData
return|;
block|}
comment|/**      * True if grid data should be returned.      *      * @param includeGridData      */
DECL|method|setIncludeGridData (boolean includeGridData)
specifier|public
name|void
name|setIncludeGridData
parameter_list|(
name|boolean
name|includeGridData
parameter_list|)
block|{
name|this
operator|.
name|includeGridData
operator|=
name|includeGridData
expr_stmt|;
block|}
comment|// *************************************************
comment|//
comment|// *************************************************
DECL|method|copy ()
specifier|public
name|GoogleSheetsStreamConfiguration
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|GoogleSheetsStreamConfiguration
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

