begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.splunk
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|splunk
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_class
DECL|class|Helper
specifier|public
specifier|final
class|class
name|Helper
block|{
DECL|method|Helper ()
specifier|private
name|Helper
parameter_list|()
block|{     }
DECL|method|mockComponent (final Service service, final Socket socket)
specifier|public
specifier|static
name|DefaultSplunkConfigurationFactory
name|mockComponent
parameter_list|(
specifier|final
name|Service
name|service
parameter_list|,
specifier|final
name|Socket
name|socket
parameter_list|)
block|{
return|return
operator|new
name|DefaultSplunkConfigurationFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SplunkConfiguration
name|parseMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
return|return
operator|new
name|MockConnectionSettings
argument_list|(
name|service
argument_list|,
name|socket
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

begin_class
DECL|class|MockConnectionSettings
specifier|final
class|class
name|MockConnectionSettings
extends|extends
name|SplunkConfiguration
block|{
DECL|method|MockConnectionSettings (Service service, Socket socket)
name|MockConnectionSettings
parameter_list|(
name|Service
name|service
parameter_list|,
name|Socket
name|socket
parameter_list|)
block|{
name|setConnectionFactory
argument_list|(
operator|new
name|MockConnectionFactory
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|MockConnectionFactory
class|class
name|MockConnectionFactory
extends|extends
name|SplunkConnectionFactory
block|{
DECL|field|service
specifier|private
name|Service
name|service
decl_stmt|;
DECL|method|MockConnectionFactory (Service service)
name|MockConnectionFactory
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|super
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createService (CamelContext camelContext)
specifier|public
name|Service
name|createService
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
return|return
name|service
return|;
block|}
block|}
block|}
end_class

end_unit

