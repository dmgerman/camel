begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.splunk
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|splunk
package|;
end_package

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|SSLSecurityProtocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SplunkComponentConfigurationTest
specifier|public
class|class
name|SplunkComponentConfigurationTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|createProducerEndpointWithMinimalConfiguration ()
specifier|public
name|void
name|createProducerEndpointWithMinimalConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|SplunkComponent
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"splunk"
argument_list|,
name|SplunkComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|SplunkEndpoint
name|endpoint
init|=
operator|(
name|SplunkEndpoint
operator|)
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"splunk://test?username=test&password=pw"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|DEFAULT_HOST
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|DEFAULT_PORT
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pw"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|DEFAULT_SCHEME
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isUseSunHttpsHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isRaw
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SSLSecurityProtocol
operator|.
name|TLSv1_2
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getSslProtocol
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|createProducerWithoutUserAndPassword ()
specifier|public
name|void
name|createProducerWithoutUserAndPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|SplunkComponent
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"splunk"
argument_list|,
name|SplunkComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"splunk://test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createProducerEndpointWithMaximalConfiguration ()
specifier|public
name|void
name|createProducerEndpointWithMaximalConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|SplunkComponent
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"splunk"
argument_list|,
name|SplunkComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|SplunkEndpoint
name|endpoint
init|=
operator|(
name|SplunkEndpoint
operator|)
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"splunk://tcp?username=test&password=pw&host=myhost&port=3333&"
operator|+
literal|"tcpReceiverPort=4444&index=myindex&sourceType=testSource&"
operator|+
literal|"source=test&eventHost=original-host.com&owner=me&app=fantasticapp&useSunHttpsHandler=true&raw=true&sslProtocol=SSLv3"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"myhost"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3333
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pw"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4444
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getTcpReceiverPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myindex"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSource"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getSourceType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"original-host.com"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEventHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fantasticapp"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getApp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isUseSunHttpsHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isRaw
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SSLSecurityProtocol
operator|.
name|SSLv3
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getSslProtocol
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createConsumerEndpointWithMinimalConfiguration ()
specifier|public
name|void
name|createConsumerEndpointWithMinimalConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|SplunkComponent
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"splunk"
argument_list|,
name|SplunkComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|SplunkEndpoint
name|endpoint
init|=
operator|(
name|SplunkEndpoint
operator|)
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"splunk://realtime?username=test&"
operator|+
literal|"password=pw&search=Splunk search query goes here"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|DEFAULT_HOST
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|DEFAULT_PORT
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pw"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|DEFAULT_SCHEME
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Splunk search query goes here"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getSearch
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createConsumerEndpointWithMaximalConfiguration ()
specifier|public
name|void
name|createConsumerEndpointWithMaximalConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|SplunkComponent
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"splunk"
argument_list|,
name|SplunkComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|SplunkEndpoint
name|endpoint
init|=
operator|(
name|SplunkEndpoint
operator|)
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"splunk://normal?username=test&password=pw&host=myhost&port=3333&delay=10s&"
operator|+
literal|"search=Splunk search query goes here&initEarliestTime=-1d"
operator|+
literal|"&latestTime=now&count=10&"
operator|+
literal|"owner=me&app=fantasticapp"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"myhost"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3333
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pw"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-1d"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInitEarliestTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"now"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLatestTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fantasticapp"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getApp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|DEFAULT_SCHEME
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Splunk search query goes here"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getSearch
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

