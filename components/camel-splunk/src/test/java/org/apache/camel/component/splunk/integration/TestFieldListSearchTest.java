begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.splunk.integration
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|splunk
operator|.
name|integration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|splunk
operator|.
name|event
operator|.
name|SplunkEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"run manually since it requires a running local splunk server"
argument_list|)
DECL|class|TestFieldListSearchTest
specifier|public
class|class
name|TestFieldListSearchTest
extends|extends
name|SplunkTest
block|{
annotation|@
name|Test
DECL|method|testFieldListSearch ()
specifier|public
name|void
name|testFieldListSearch
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|searchMock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:search-result2"
argument_list|)
decl_stmt|;
name|searchMock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:submit-result"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|SplunkEvent
name|recieved
init|=
name|searchMock
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|SplunkEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|recieved
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
name|recieved
operator|.
name|getEventData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"value1"
argument_list|,
name|data
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:submit"
argument_list|)
operator|.
name|to
argument_list|(
literal|"splunk://submit?username="
operator|+
name|SPLUNK_USERNAME
operator|+
literal|"&password="
operator|+
name|SPLUNK_PASSWORD
operator|+
literal|"&index="
operator|+
name|INDEX
operator|+
literal|"&sourceType=testSource&source=test"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:submit-result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"splunk://normal?delay=5s&username="
operator|+
name|SPLUNK_USERNAME
operator|+
literal|"&password="
operator|+
name|SPLUNK_PASSWORD
operator|+
literal|"&initEarliestTime=-10s&latestTime=now"
operator|+
literal|"&search=search index="
operator|+
name|INDEX
operator|+
literal|" sourcetype=testSource&fieldList=key1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:search-result2"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

