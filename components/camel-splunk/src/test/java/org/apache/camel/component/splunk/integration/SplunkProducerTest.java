begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.splunk.integration
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|splunk
operator|.
name|integration
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|splunk
operator|.
name|event
operator|.
name|SplunkEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"run manually since it requires a running local splunk server"
argument_list|)
DECL|class|SplunkProducerTest
specifier|public
class|class
name|SplunkProducerTest
extends|extends
name|SplunkTest
block|{
comment|// Splunk tcp reciever port configured in Splunk
DECL|field|TCP_RECIEVER_PORT
specifier|private
specifier|static
specifier|final
name|String
name|TCP_RECIEVER_PORT
init|=
literal|"9997"
decl_stmt|;
annotation|@
name|Test
DECL|method|testStreamWriter ()
specifier|public
name|void
name|testStreamWriter
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:stream-result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|SplunkEvent
name|splunkEvent
init|=
operator|new
name|SplunkEvent
argument_list|()
decl_stmt|;
name|splunkEvent
operator|.
name|addPair
argument_list|(
literal|"key11"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|splunkEvent
operator|.
name|addPair
argument_list|(
literal|"key22"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|splunkEvent
operator|.
name|addPair
argument_list|(
literal|"key33"
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:stream"
argument_list|,
name|splunkEvent
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubmitWriter ()
specifier|public
name|void
name|testSubmitWriter
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:submitresult"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|SplunkEvent
name|splunkEvent
init|=
operator|new
name|SplunkEvent
argument_list|()
decl_stmt|;
name|splunkEvent
operator|.
name|addPair
argument_list|(
literal|"key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|splunkEvent
operator|.
name|addPair
argument_list|(
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|splunkEvent
operator|.
name|addPair
argument_list|(
literal|"key3"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:submit"
argument_list|,
name|splunkEvent
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTcpWriter ()
specifier|public
name|void
name|testTcpWriter
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:tcpresult"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|SplunkEvent
name|splunkEvent
init|=
operator|new
name|SplunkEvent
argument_list|()
decl_stmt|;
name|splunkEvent
operator|.
name|addPair
argument_list|(
literal|"key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|splunkEvent
operator|.
name|addPair
argument_list|(
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|splunkEvent
operator|.
name|addPair
argument_list|(
literal|"key3"
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:tcp"
argument_list|,
name|splunkEvent
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:stream"
argument_list|)
operator|.
name|to
argument_list|(
literal|"splunk://stream?username="
operator|+
name|SPLUNK_USERNAME
operator|+
literal|"&password="
operator|+
name|SPLUNK_PASSWORD
operator|+
literal|"&index="
operator|+
name|INDEX
operator|+
literal|"&sourceType=StreamSourceType&source=StreamSource"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:stream-result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:submit"
argument_list|)
operator|.
name|to
argument_list|(
literal|"splunk://submit?username="
operator|+
name|SPLUNK_USERNAME
operator|+
literal|"&password="
operator|+
name|SPLUNK_PASSWORD
operator|+
literal|"&index="
operator|+
name|INDEX
operator|+
literal|"&sourceType=testSource&source=test"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:submitresult"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:tcp"
argument_list|)
operator|.
name|to
argument_list|(
literal|"splunk://tcp?username="
operator|+
name|SPLUNK_USERNAME
operator|+
literal|"&password="
operator|+
name|SPLUNK_PASSWORD
operator|+
literal|"&tcpReceiverPort="
operator|+
name|TCP_RECIEVER_PORT
operator|+
literal|"&index="
operator|+
name|INDEX
operator|+
literal|"&sourceType=testSource&source=test"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:tcpresult"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

