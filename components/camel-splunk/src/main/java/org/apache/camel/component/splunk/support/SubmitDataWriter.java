begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.splunk.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|splunk
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|Args
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|splunk
operator|.
name|SplunkEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|splunk
operator|.
name|event
operator|.
name|SplunkEvent
import|;
end_import

begin_class
DECL|class|SubmitDataWriter
specifier|public
class|class
name|SubmitDataWriter
extends|extends
name|SplunkDataWriter
block|{
DECL|field|index
specifier|private
name|String
name|index
decl_stmt|;
DECL|method|SubmitDataWriter (SplunkEndpoint endpoint, Args args)
specifier|public
name|SubmitDataWriter
parameter_list|(
name|SplunkEndpoint
name|endpoint
parameter_list|,
name|Args
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|doWrite (SplunkEvent event, Socket socket)
specifier|protected
name|void
name|doWrite
parameter_list|(
name|SplunkEvent
name|event
parameter_list|,
name|Socket
name|socket
parameter_list|)
throws|throws
name|IOException
block|{
name|Index
name|index
init|=
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|index
operator|.
name|submit
argument_list|(
name|args
argument_list|,
name|event
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Receiver
name|receiver
init|=
name|endpoint
operator|.
name|getService
argument_list|()
operator|.
name|getReceiver
argument_list|()
decl_stmt|;
name|receiver
operator|.
name|submit
argument_list|(
name|args
argument_list|,
name|event
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createSocket (Service service)
specifier|protected
name|Socket
name|createSocket
parameter_list|(
name|Service
name|service
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
DECL|method|setIndex (String index)
specifier|public
name|void
name|setIndex
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
DECL|method|getIndex ()
specifier|private
name|Index
name|getIndex
parameter_list|()
block|{
return|return
operator|(
name|index
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|endpoint
operator|.
name|getService
argument_list|()
operator|.
name|getIndexes
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
end_class

end_unit

