begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.splunk.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|splunk
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|JobArgs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|JobArgs
operator|.
name|ExecutionMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|JobArgs
operator|.
name|SearchMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|JobResultsArgs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|JobResultsArgs
operator|.
name|OutputMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|ResultsReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|ResultsReaderJson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|SavedSearch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|SavedSearchCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|SavedSearchDispatchArgs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|ServiceArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|splunk
operator|.
name|ConsumerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|splunk
operator|.
name|SplunkEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|splunk
operator|.
name|event
operator|.
name|SplunkEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|SplunkDataReader
specifier|public
class|class
name|SplunkDataReader
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SplunkDataReader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DATE_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|DATE_FORMAT
init|=
literal|"MM/dd/yy HH:mm:ss:SSS"
decl_stmt|;
DECL|field|SPLUNK_TIME_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|SPLUNK_TIME_FORMAT
init|=
literal|"%m/%d/%y %H:%M:%S:%3N"
decl_stmt|;
DECL|field|lastSuccessfulReadTime
specifier|private
specifier|transient
name|Calendar
name|lastSuccessfulReadTime
decl_stmt|;
DECL|field|endpoint
specifier|private
name|SplunkEndpoint
name|endpoint
decl_stmt|;
DECL|field|consumerType
specifier|private
name|ConsumerType
name|consumerType
decl_stmt|;
DECL|method|SplunkDataReader (SplunkEndpoint endpoint, ConsumerType consumerType)
specifier|public
name|SplunkDataReader
parameter_list|(
name|SplunkEndpoint
name|endpoint
parameter_list|,
name|ConsumerType
name|consumerType
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|consumerType
operator|=
name|consumerType
expr_stmt|;
block|}
DECL|method|getCount ()
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
DECL|method|getSearch ()
specifier|public
name|String
name|getSearch
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getSearch
argument_list|()
return|;
block|}
DECL|method|getEarliestTime ()
specifier|public
name|String
name|getEarliestTime
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEarliestTime
argument_list|()
return|;
block|}
DECL|method|getLatestTime ()
specifier|public
name|String
name|getLatestTime
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLatestTime
argument_list|()
return|;
block|}
DECL|method|getInitEarliestTime ()
specifier|public
name|String
name|getInitEarliestTime
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInitEarliestTime
argument_list|()
return|;
block|}
DECL|method|getSavedSearch ()
specifier|private
name|String
name|getSavedSearch
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getSavedSearch
argument_list|()
return|;
block|}
DECL|method|read ()
specifier|public
name|List
argument_list|<
name|SplunkEvent
argument_list|>
name|read
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Read without callback
return|return
name|read
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|read (SplunkResultProcessor callback)
specifier|public
name|List
argument_list|<
name|SplunkEvent
argument_list|>
name|read
parameter_list|(
name|SplunkResultProcessor
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|consumerType
condition|)
block|{
case|case
name|NORMAL
case|:
block|{
return|return
name|nonBlockingSearch
argument_list|(
name|callback
argument_list|)
return|;
block|}
case|case
name|REALTIME
case|:
block|{
return|return
name|realtimeSearch
argument_list|(
name|callback
argument_list|)
return|;
block|}
case|case
name|SAVEDSEARCH
case|:
block|{
return|return
name|savedSearch
argument_list|(
name|callback
argument_list|)
return|;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown search mode "
operator|+
name|consumerType
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Get the earliestTime of range search.      *       * @param startTime the time where search start      * @param realtime if this is realtime search      * @return The time of last successful read if not realtime; Time difference      *         between last successful read and start time;      */
DECL|method|calculateEarliestTime (Calendar startTime, boolean realtime)
specifier|private
name|String
name|calculateEarliestTime
parameter_list|(
name|Calendar
name|startTime
parameter_list|,
name|boolean
name|realtime
parameter_list|)
block|{
name|String
name|result
decl_stmt|;
if|if
condition|(
name|realtime
condition|)
block|{
name|result
operator|=
name|calculateEarliestTimeForRealTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|DATE_FORMAT
argument_list|)
decl_stmt|;
name|result
operator|=
name|df
operator|.
name|format
argument_list|(
name|lastSuccessfulReadTime
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Gets earliest time for realtime search      */
DECL|method|calculateEarliestTimeForRealTime (Calendar startTime)
specifier|private
name|String
name|calculateEarliestTimeForRealTime
parameter_list|(
name|Calendar
name|startTime
parameter_list|)
block|{
name|String
name|result
decl_stmt|;
name|long
name|diff
init|=
name|startTime
operator|.
name|getTimeInMillis
argument_list|()
operator|-
name|lastSuccessfulReadTime
operator|.
name|getTimeInMillis
argument_list|()
decl_stmt|;
name|result
operator|=
literal|"-"
operator|+
name|diff
operator|/
literal|1000
operator|+
literal|"s"
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|populateArgs (JobArgs queryArgs, Calendar startTime, boolean realtime)
specifier|private
name|void
name|populateArgs
parameter_list|(
name|JobArgs
name|queryArgs
parameter_list|,
name|Calendar
name|startTime
parameter_list|,
name|boolean
name|realtime
parameter_list|)
block|{
name|String
name|earliestTime
init|=
name|getEarliestTime
argument_list|(
name|startTime
argument_list|,
name|realtime
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|earliestTime
argument_list|)
condition|)
block|{
name|queryArgs
operator|.
name|setEarliestTime
argument_list|(
name|earliestTime
argument_list|)
expr_stmt|;
block|}
name|String
name|latestTime
init|=
name|getLatestTime
argument_list|(
name|startTime
argument_list|,
name|realtime
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|latestTime
argument_list|)
condition|)
block|{
name|queryArgs
operator|.
name|setLatestTime
argument_list|(
name|latestTime
argument_list|)
expr_stmt|;
block|}
name|queryArgs
operator|.
name|setTimeFormat
argument_list|(
name|SPLUNK_TIME_FORMAT
argument_list|)
expr_stmt|;
block|}
DECL|method|getLatestTime (Calendar startTime, boolean realtime)
specifier|private
name|String
name|getLatestTime
parameter_list|(
name|Calendar
name|startTime
parameter_list|,
name|boolean
name|realtime
parameter_list|)
block|{
name|String
name|lTime
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|getLatestTime
argument_list|()
argument_list|)
condition|)
block|{
name|lTime
operator|=
name|getLatestTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|realtime
condition|)
block|{
name|lTime
operator|=
literal|"rt"
expr_stmt|;
block|}
else|else
block|{
name|DateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|DATE_FORMAT
argument_list|)
decl_stmt|;
name|lTime
operator|=
name|df
operator|.
name|format
argument_list|(
name|startTime
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lTime
return|;
block|}
DECL|method|getEarliestTime (Calendar startTime, boolean realtime)
specifier|private
name|String
name|getEarliestTime
parameter_list|(
name|Calendar
name|startTime
parameter_list|,
name|boolean
name|realtime
parameter_list|)
block|{
name|String
name|eTime
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|lastSuccessfulReadTime
operator|==
literal|null
condition|)
block|{
name|eTime
operator|=
name|getInitEarliestTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|getEarliestTime
argument_list|()
argument_list|)
condition|)
block|{
name|eTime
operator|=
name|getEarliestTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|calculatedEarliestTime
init|=
name|calculateEarliestTime
argument_list|(
name|startTime
argument_list|,
name|realtime
argument_list|)
decl_stmt|;
if|if
condition|(
name|calculatedEarliestTime
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|realtime
condition|)
block|{
name|eTime
operator|=
literal|"rt"
operator|+
name|calculatedEarliestTime
expr_stmt|;
block|}
else|else
block|{
name|eTime
operator|=
name|calculatedEarliestTime
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|eTime
return|;
block|}
DECL|method|savedSearch (SplunkResultProcessor callback)
specifier|private
name|List
argument_list|<
name|SplunkEvent
argument_list|>
name|savedSearch
parameter_list|(
name|SplunkResultProcessor
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"saved search start"
argument_list|)
expr_stmt|;
name|ServiceArgs
name|queryArgs
init|=
operator|new
name|ServiceArgs
argument_list|()
decl_stmt|;
name|queryArgs
operator|.
name|setApp
argument_list|(
literal|"search"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
block|{
name|queryArgs
operator|.
name|setOwner
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getApp
argument_list|()
argument_list|)
condition|)
block|{
name|queryArgs
operator|.
name|setApp
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getApp
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Calendar
name|startTime
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|SavedSearch
name|search
init|=
literal|null
decl_stmt|;
name|Job
name|job
init|=
literal|null
decl_stmt|;
name|String
name|latestTime
init|=
name|getLatestTime
argument_list|(
name|startTime
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|earliestTime
init|=
name|getEarliestTime
argument_list|(
name|startTime
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|endpoint
operator|.
name|getService
argument_list|()
decl_stmt|;
name|SavedSearchCollection
name|savedSearches
init|=
name|service
operator|.
name|getSavedSearches
argument_list|(
name|queryArgs
argument_list|)
decl_stmt|;
for|for
control|(
name|SavedSearch
name|s
range|:
name|savedSearches
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|getSavedSearch
argument_list|()
argument_list|)
condition|)
block|{
name|search
operator|=
name|s
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|search
operator|!=
literal|null
condition|)
block|{
name|SavedSearchDispatchArgs
name|args
init|=
operator|new
name|SavedSearchDispatchArgs
argument_list|()
decl_stmt|;
name|args
operator|.
name|setForceDispatch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|args
operator|.
name|setDispatchEarliestTime
argument_list|(
name|earliestTime
argument_list|)
expr_stmt|;
name|args
operator|.
name|setDispatchLatestTime
argument_list|(
name|latestTime
argument_list|)
expr_stmt|;
name|job
operator|=
name|search
operator|.
name|dispatch
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to find saved search '"
operator|+
name|getSavedSearch
argument_list|()
operator|+
literal|"'."
argument_list|)
throw|;
block|}
while|while
condition|(
operator|!
name|job
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|SplunkEvent
argument_list|>
name|data
init|=
name|extractData
argument_list|(
name|job
argument_list|,
literal|false
argument_list|,
name|callback
argument_list|)
decl_stmt|;
name|this
operator|.
name|lastSuccessfulReadTime
operator|=
name|startTime
expr_stmt|;
return|return
name|data
return|;
block|}
DECL|method|nonBlockingSearch (SplunkResultProcessor callback)
specifier|private
name|List
argument_list|<
name|SplunkEvent
argument_list|>
name|nonBlockingSearch
parameter_list|(
name|SplunkResultProcessor
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"non block search start"
argument_list|)
expr_stmt|;
name|JobArgs
name|queryArgs
init|=
operator|new
name|JobArgs
argument_list|()
decl_stmt|;
name|queryArgs
operator|.
name|setExecutionMode
argument_list|(
name|ExecutionMode
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|Calendar
name|startTime
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|populateArgs
argument_list|(
name|queryArgs
argument_list|,
name|startTime
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SplunkEvent
argument_list|>
name|data
init|=
name|runQuery
argument_list|(
name|queryArgs
argument_list|,
literal|false
argument_list|,
name|callback
argument_list|)
decl_stmt|;
name|lastSuccessfulReadTime
operator|=
name|startTime
expr_stmt|;
return|return
name|data
return|;
block|}
DECL|method|realtimeSearch (SplunkResultProcessor callback)
specifier|private
name|List
argument_list|<
name|SplunkEvent
argument_list|>
name|realtimeSearch
parameter_list|(
name|SplunkResultProcessor
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"realtime search start"
argument_list|)
expr_stmt|;
name|JobArgs
name|queryArgs
init|=
operator|new
name|JobArgs
argument_list|()
decl_stmt|;
name|queryArgs
operator|.
name|setExecutionMode
argument_list|(
name|ExecutionMode
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|queryArgs
operator|.
name|setSearchMode
argument_list|(
name|SearchMode
operator|.
name|REALTIME
argument_list|)
expr_stmt|;
name|Calendar
name|startTime
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|populateArgs
argument_list|(
name|queryArgs
argument_list|,
name|startTime
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SplunkEvent
argument_list|>
name|data
init|=
name|runQuery
argument_list|(
name|queryArgs
argument_list|,
literal|true
argument_list|,
name|callback
argument_list|)
decl_stmt|;
name|lastSuccessfulReadTime
operator|=
name|startTime
expr_stmt|;
return|return
name|data
return|;
block|}
DECL|method|runQuery (JobArgs queryArgs, boolean realtime, SplunkResultProcessor callback)
specifier|private
name|List
argument_list|<
name|SplunkEvent
argument_list|>
name|runQuery
parameter_list|(
name|JobArgs
name|queryArgs
parameter_list|,
name|boolean
name|realtime
parameter_list|,
name|SplunkResultProcessor
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
name|Service
name|service
init|=
name|endpoint
operator|.
name|getService
argument_list|()
decl_stmt|;
name|Job
name|job
init|=
name|service
operator|.
name|getJobs
argument_list|()
operator|.
name|create
argument_list|(
name|getSearch
argument_list|()
argument_list|,
name|queryArgs
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running search : {} with queryArgs : {}"
argument_list|,
name|getSearch
argument_list|()
argument_list|,
name|queryArgs
argument_list|)
expr_stmt|;
if|if
condition|(
name|realtime
condition|)
block|{
while|while
condition|(
operator|!
name|job
operator|.
name|isReady
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
comment|// Besides job.isReady there must be some delay before real time job
comment|// is ready
comment|// TODO seems that the realtime stream is not quite isReady to be
comment|// read
name|Thread
operator|.
name|sleep
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
operator|!
name|job
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|extractData
argument_list|(
name|job
argument_list|,
name|realtime
argument_list|,
name|callback
argument_list|)
return|;
block|}
DECL|method|extractData (Job job, boolean realtime, SplunkResultProcessor callback)
specifier|private
name|List
argument_list|<
name|SplunkEvent
argument_list|>
name|extractData
parameter_list|(
name|Job
name|job
parameter_list|,
name|boolean
name|realtime
parameter_list|,
name|SplunkResultProcessor
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|SplunkEvent
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|SplunkEvent
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
decl_stmt|;
name|SplunkEvent
name|splunkData
decl_stmt|;
name|ResultsReader
name|resultsReader
init|=
literal|null
decl_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|realtime
condition|)
block|{
name|total
operator|=
name|job
operator|.
name|getResultPreviewCount
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|total
operator|=
name|job
operator|.
name|getResultCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getCount
argument_list|()
operator|==
literal|0
operator|||
name|total
operator|<
name|getCount
argument_list|()
condition|)
block|{
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
name|JobResultsArgs
name|outputArgs
init|=
operator|new
name|JobResultsArgs
argument_list|()
decl_stmt|;
name|outputArgs
operator|.
name|setOutputMode
argument_list|(
name|OutputMode
operator|.
name|JSON
argument_list|)
expr_stmt|;
if|if
condition|(
name|realtime
condition|)
block|{
if|if
condition|(
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|outputArgs
operator|.
name|setCount
argument_list|(
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stream
operator|=
name|job
operator|.
name|getResultsPreview
argument_list|(
name|outputArgs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stream
operator|=
name|job
operator|.
name|getResults
argument_list|(
name|outputArgs
argument_list|)
expr_stmt|;
block|}
name|resultsReader
operator|=
operator|new
name|ResultsReaderJson
argument_list|(
name|stream
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|data
operator|=
name|resultsReader
operator|.
name|getNextEvent
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|splunkData
operator|=
operator|new
name|SplunkEvent
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|process
argument_list|(
name|splunkData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|splunkData
argument_list|)
expr_stmt|;
block|}
block|}
name|IOHelper
operator|.
name|close
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|total
condition|)
block|{
name|InputStream
name|stream
decl_stmt|;
name|JobResultsArgs
name|outputArgs
init|=
operator|new
name|JobResultsArgs
argument_list|()
decl_stmt|;
name|outputArgs
operator|.
name|setOutputMode
argument_list|(
name|OutputMode
operator|.
name|JSON
argument_list|)
expr_stmt|;
name|outputArgs
operator|.
name|setCount
argument_list|(
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|outputArgs
operator|.
name|setOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|realtime
condition|)
block|{
name|stream
operator|=
name|job
operator|.
name|getResultsPreview
argument_list|(
name|outputArgs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stream
operator|=
name|job
operator|.
name|getResults
argument_list|(
name|outputArgs
argument_list|)
expr_stmt|;
block|}
name|resultsReader
operator|=
operator|new
name|ResultsReaderJson
argument_list|(
name|stream
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|data
operator|=
name|resultsReader
operator|.
name|getNextEvent
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|splunkData
operator|=
operator|new
name|SplunkEvent
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|process
argument_list|(
name|splunkData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|splunkData
argument_list|)
expr_stmt|;
block|}
block|}
name|offset
operator|+=
name|getCount
argument_list|()
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resultsReader
operator|!=
literal|null
condition|)
block|{
name|resultsReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|job
operator|.
name|cancel
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

