begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.splunk.event
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|splunk
operator|.
name|event
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|SplunkEvent
specifier|public
class|class
name|SplunkEvent
implements|implements
name|Serializable
block|{
comment|// ----------------------------------
comment|// Common event fields
comment|// ----------------------------------
comment|/**      * A device-specific classification provided as part of the event.      */
DECL|field|COMMON_CATEGORY
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_CATEGORY
init|=
literal|"category"
decl_stmt|;
comment|/**      * A device-specific classification provided as part of the event.      */
DECL|field|COMMON_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_COUNT
init|=
literal|"count"
decl_stmt|;
comment|/**      * The free-form description of a particular event.      */
DECL|field|COMMON_DESC
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_DESC
init|=
literal|"desc"
decl_stmt|;
comment|/**      * The name of a given DHCP pool on a DHCP server.      */
DECL|field|COMMON_DHCP_POOL
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_DHCP_POOL
init|=
literal|"dhcp_pool"
decl_stmt|;
comment|/**      * The amount of time the event lasted.      */
DECL|field|COMMON_DURATION
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_DURATION
init|=
literal|"duration"
decl_stmt|;
comment|/**      * The fully qualified domain name of the device transmitting or recording      * the log record.      */
DECL|field|COMMON_DVC_HOST
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_DVC_HOST
init|=
literal|"dvc_host"
decl_stmt|;
comment|/**      * The IPv4 address of the device reporting the event.      */
DECL|field|COMMON_DVC_IP
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_DVC_IP
init|=
literal|"dvc_ip"
decl_stmt|;
comment|/**      * The IPv6 address of the device reporting the event.      */
DECL|field|COMMON_DVC_IP6
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_DVC_IP6
init|=
literal|"dvc_ip6"
decl_stmt|;
comment|/**      * The free-form description of the device's physical location.      */
DECL|field|COMMON_DVC_LOCATION
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_DVC_LOCATION
init|=
literal|"dvc_location"
decl_stmt|;
comment|/**      * The MAC (layer 2) address of the device reporting the event.      */
DECL|field|COMMON_DVC_MAC
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_DVC_MAC
init|=
literal|"dvc_mac"
decl_stmt|;
comment|/**      * The Windows NT domain of the device recording or transmitting the event.      */
DECL|field|COMMON_DVC_NT_DOMAIN
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_DVC_NT_DOMAIN
init|=
literal|"dvc_nt_domain"
decl_stmt|;
comment|/**      * The Windows NT host name of the device recording or transmitting the      * event.      */
DECL|field|COMMON_DVC_NT_HOST
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_DVC_NT_HOST
init|=
literal|"dvc_nt_host"
decl_stmt|;
comment|/**      * Time at which the device recorded the event.      */
DECL|field|COMMON_DVC_TIME
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_DVC_TIME
init|=
literal|"dvc_time"
decl_stmt|;
comment|/**      * The event's specified end time.      */
DECL|field|COMMON_END_TIME
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_END_TIME
init|=
literal|"end_time"
decl_stmt|;
comment|/**      * A unique identifier that identifies the event. This is unique to the      * reporting device.      */
DECL|field|COMMON_EVENT_ID
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_EVENT_ID
init|=
literal|"event_id"
decl_stmt|;
comment|/**      * The length of the datagram, event, message, or packet.      */
DECL|field|COMMON_LENGTH
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_LENGTH
init|=
literal|"length"
decl_stmt|;
comment|/**      * The log-level that was set on the device and recorded in the event.      */
DECL|field|COMMON_LOG_LEVEL
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_LOG_LEVEL
init|=
literal|"log_level"
decl_stmt|;
comment|/**      * The name of the event as reported by the device. The name should not      * contain information that's already being parsed into other fields from      * the event, such as IP addresses.      */
DECL|field|COMMON_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_NAME
init|=
literal|"name"
decl_stmt|;
comment|/**      * An integer assigned by the device operating system to the process      * creating the record.      */
DECL|field|COMMON_PID
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_PID
init|=
literal|"pid"
decl_stmt|;
comment|/**      * An environment-specific assessment of the event's importance, based on      * elements such as event severity, business function of the affected      * system, or other locally defined variables.      */
DECL|field|COMMON_PRIORITY
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_PRIORITY
init|=
literal|"priority"
decl_stmt|;
comment|/**      * The product that generated the event.      */
DECL|field|COMMON_PRODUCT
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_PRODUCT
init|=
literal|"product"
decl_stmt|;
comment|/**      * The version of the product that generated the event.      */
DECL|field|COMMON_PRODUCT_VERSION
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_PRODUCT_VERSION
init|=
literal|"product_version"
decl_stmt|;
comment|/**      * The result root cause, such as connection refused, timeout, crash, and so      * on.      */
DECL|field|COMMON_REASON
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_REASON
init|=
literal|"reason"
decl_stmt|;
comment|/**      * The action result. Often is a binary choice: succeeded and failed,      * allowed and denied, and so on.      */
DECL|field|COMMON_RESULT
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_RESULT
init|=
literal|"result"
decl_stmt|;
comment|/**      * The severity (or priority) of an event as reported by the originating      * device.      */
DECL|field|COMMON_SEVERITY
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_SEVERITY
init|=
literal|"severity"
decl_stmt|;
comment|/**      * The event's specified start time.      */
DECL|field|COMMON_START_TIME
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_START_TIME
init|=
literal|"start_time"
decl_stmt|;
comment|/**      * The transaction identifier.      */
DECL|field|COMMON_TRANSACTION_ID
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_TRANSACTION_ID
init|=
literal|"transaction_id"
decl_stmt|;
comment|/**      * A uniform record locator (a web address, in other words) included in a      * record.      */
DECL|field|COMMON_URL
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_URL
init|=
literal|"url"
decl_stmt|;
comment|/**      * The vendor who made the product that generated the event.      */
DECL|field|COMMON_VENDOR
specifier|public
specifier|static
specifier|final
name|String
name|COMMON_VENDOR
init|=
literal|"vendor"
decl_stmt|;
comment|// ----------------------------------
comment|// Update
comment|// ----------------------------------
comment|/**      * The name of the installed update.      */
DECL|field|UPDATE_PACKAGE
specifier|public
specifier|static
specifier|final
name|String
name|UPDATE_PACKAGE
init|=
literal|"package"
decl_stmt|;
comment|/**      * default key value delimiter      */
DECL|field|KVDELIM
specifier|private
specifier|static
specifier|final
name|String
name|KVDELIM
init|=
literal|"="
decl_stmt|;
comment|/**      * default pair delimiter      */
DECL|field|PAIRDELIM
specifier|private
specifier|static
specifier|final
name|String
name|PAIRDELIM
init|=
literal|" "
decl_stmt|;
comment|/**      * default quote char      */
DECL|field|QUOTE
specifier|private
specifier|static
specifier|final
name|char
name|QUOTE
init|=
literal|'"'
decl_stmt|;
comment|/**      * default date format is using internal generated date      */
DECL|field|DATEFORMATPATTERN
specifier|private
specifier|static
specifier|final
name|String
name|DATEFORMATPATTERN
init|=
literal|"yyyy-MM-dd\tHH:mm:ss:SSSZ"
decl_stmt|;
comment|/**      * Date Formatter      */
DECL|field|DATE_FORMATTER
specifier|private
specifier|static
specifier|final
name|DateTimeFormatter
name|DATE_FORMATTER
init|=
name|DateTimeFormat
operator|.
name|forPattern
argument_list|(
name|DATEFORMATPATTERN
argument_list|)
decl_stmt|;
comment|/**      * Event prefix fields      */
DECL|field|PREFIX_NAME
specifier|private
specifier|static
specifier|final
name|String
name|PREFIX_NAME
init|=
literal|"name"
decl_stmt|;
DECL|field|PREFIX_EVENT_ID
specifier|private
specifier|static
specifier|final
name|String
name|PREFIX_EVENT_ID
init|=
literal|"event_id"
decl_stmt|;
comment|/**      * Java Throwable type fields      */
DECL|field|THROWABLE_CLASS
specifier|private
specifier|static
specifier|final
name|String
name|THROWABLE_CLASS
init|=
literal|"throwable_class"
decl_stmt|;
DECL|field|THROWABLE_MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|THROWABLE_MESSAGE
init|=
literal|"throwable_message"
decl_stmt|;
DECL|field|THROWABLE_STACKTRACE_ELEMENTS
specifier|private
specifier|static
specifier|final
name|String
name|THROWABLE_STACKTRACE_ELEMENTS
init|=
literal|"stacktrace_elements"
decl_stmt|;
DECL|field|LINEBREAK
specifier|private
specifier|static
specifier|final
name|String
name|LINEBREAK
init|=
literal|"\n"
decl_stmt|;
comment|/**      * Whether or not to put quotes around values      */
DECL|field|quoteValues
specifier|private
name|boolean
name|quoteValues
init|=
literal|true
decl_stmt|;
comment|/**      * Whether or not to add a date to the event string      */
DECL|field|useInternalDate
specifier|private
name|boolean
name|useInternalDate
init|=
literal|true
decl_stmt|;
comment|/**      * Contents of the event message      */
DECL|field|eventMessage
specifier|private
name|StringBuffer
name|eventMessage
decl_stmt|;
comment|/**      * A Constructor to load data from a Map      *       * @param data the map      */
DECL|method|SplunkEvent (Map<String, String> data)
specifier|public
name|SplunkEvent
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
parameter_list|)
block|{
name|this
operator|.
name|eventMessage
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|data
operator|.
name|keySet
argument_list|()
control|)
block|{
name|this
operator|.
name|addPair
argument_list|(
name|key
argument_list|,
name|data
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * A Copy constructor      */
DECL|method|SplunkEvent (SplunkEvent splunkEvent)
specifier|public
name|SplunkEvent
parameter_list|(
name|SplunkEvent
name|splunkEvent
parameter_list|)
block|{
name|this
operator|.
name|eventMessage
operator|=
name|splunkEvent
operator|.
name|eventMessage
expr_stmt|;
name|this
operator|.
name|quoteValues
operator|=
name|splunkEvent
operator|.
name|quoteValues
expr_stmt|;
name|this
operator|.
name|useInternalDate
operator|=
name|splunkEvent
operator|.
name|useInternalDate
expr_stmt|;
block|}
comment|/**      * Constructor to create a generic event      *       * @param eventName the event name      * @param eventID the event id      * @param useInternalDate whether or not to add a date to the event string      * @param quoteValues whether or not to put quotes around values      */
DECL|method|SplunkEvent (String eventName, String eventID, boolean useInternalDate, boolean quoteValues)
specifier|public
name|SplunkEvent
parameter_list|(
name|String
name|eventName
parameter_list|,
name|String
name|eventID
parameter_list|,
name|boolean
name|useInternalDate
parameter_list|,
name|boolean
name|quoteValues
parameter_list|)
block|{
name|this
operator|.
name|eventMessage
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|this
operator|.
name|quoteValues
operator|=
name|quoteValues
expr_stmt|;
name|this
operator|.
name|useInternalDate
operator|=
name|useInternalDate
expr_stmt|;
name|addPair
argument_list|(
name|PREFIX_NAME
argument_list|,
name|eventName
argument_list|)
expr_stmt|;
if|if
condition|(
name|eventID
operator|!=
literal|null
condition|)
block|{
name|addPair
argument_list|(
name|PREFIX_EVENT_ID
argument_list|,
name|eventID
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Constructor to create a generic event with the default format      *       * @param eventName the event name      * @param eventID the event ID      */
DECL|method|SplunkEvent (String eventName, String eventID)
specifier|public
name|SplunkEvent
parameter_list|(
name|String
name|eventName
parameter_list|,
name|String
name|eventID
parameter_list|)
block|{
name|this
argument_list|(
name|eventName
argument_list|,
name|eventID
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Default constructor      */
DECL|method|SplunkEvent ()
specifier|public
name|SplunkEvent
parameter_list|()
block|{
name|this
operator|.
name|eventMessage
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
block|}
DECL|method|getEventData ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getEventData
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|eventData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|eventEntries
init|=
name|eventMessage
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
index|[]
name|entries
init|=
name|eventEntries
operator|.
name|split
argument_list|(
name|PAIRDELIM
argument_list|)
decl_stmt|;
name|String
name|quote
init|=
operator|new
name|String
argument_list|(
operator|new
name|char
index|[]
block|{
name|QUOTE
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|entry
range|:
name|entries
control|)
block|{
name|String
index|[]
name|pair
init|=
name|entry
operator|.
name|split
argument_list|(
name|KVDELIM
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"invalid event data [%s]"
argument_list|,
name|entry
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|key
init|=
name|pair
index|[
literal|0
index|]
operator|.
name|replaceAll
argument_list|(
name|quote
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|pair
index|[
literal|1
index|]
operator|.
name|replaceAll
argument_list|(
name|quote
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"null"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
name|eventData
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|eventData
return|;
block|}
comment|/**      * Add a key value pair      */
DECL|method|addPair (String key, char value)
specifier|public
name|void
name|addPair
parameter_list|(
name|String
name|key
parameter_list|,
name|char
name|value
parameter_list|)
block|{
name|addPair
argument_list|(
name|key
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a key value pair      */
DECL|method|addPair (String key, boolean value)
specifier|public
name|void
name|addPair
parameter_list|(
name|String
name|key
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|addPair
argument_list|(
name|key
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a key value pair      */
DECL|method|addPair (String key, double value)
specifier|public
name|void
name|addPair
parameter_list|(
name|String
name|key
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|addPair
argument_list|(
name|key
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a key value pair      */
DECL|method|addPair (String key, long value)
specifier|public
name|void
name|addPair
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|addPair
argument_list|(
name|key
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a key value pair      */
DECL|method|addPair (String key, int value)
specifier|public
name|void
name|addPair
parameter_list|(
name|String
name|key
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|addPair
argument_list|(
name|key
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a key value pair      */
DECL|method|addPair (String key, Object value)
specifier|public
name|void
name|addPair
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|addPair
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Utility method for formatting Throwable,Error,Exception objects in a more      * linear and Splunk friendly manner than printStackTrace      *       * @param throwable the Throwable object to add to the event      */
DECL|method|addThrowable (Throwable throwable)
specifier|public
name|void
name|addThrowable
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|addThrowableObject
argument_list|(
name|throwable
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Utility method for formatting Throwable,Error,Exception objects in a more      * linear and Splunk friendly manner than printStackTrace      *       * @param throwable the Throwable object to add to the event      * @param stackTraceDepth maximum number of stacktrace elements to log      */
DECL|method|addThrowable (Throwable throwable, int stackTraceDepth)
specifier|public
name|void
name|addThrowable
parameter_list|(
name|Throwable
name|throwable
parameter_list|,
name|int
name|stackTraceDepth
parameter_list|)
block|{
name|addThrowableObject
argument_list|(
name|throwable
argument_list|,
name|stackTraceDepth
argument_list|)
expr_stmt|;
block|}
comment|/**      * Internal private method for formatting Throwable,Error,Exception objects      * in a more linear and Splunk friendly manner than printStackTrace      *       * @param throwable the Throwable object to add to the event      * @param stackTraceDepth maximum number of stacktrace elements to log, -1      *            for all      */
DECL|method|addThrowableObject (Throwable throwable, int stackTraceDepth)
specifier|private
name|void
name|addThrowableObject
parameter_list|(
name|Throwable
name|throwable
parameter_list|,
name|int
name|stackTraceDepth
parameter_list|)
block|{
name|addPair
argument_list|(
name|THROWABLE_CLASS
argument_list|,
name|throwable
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|addPair
argument_list|(
name|THROWABLE_MESSAGE
argument_list|,
name|throwable
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|StackTraceElement
index|[]
name|elements
init|=
name|throwable
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|depth
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StackTraceElement
name|element
range|:
name|elements
control|)
block|{
name|depth
operator|++
expr_stmt|;
if|if
condition|(
name|stackTraceDepth
operator|==
operator|-
literal|1
operator|||
name|stackTraceDepth
operator|>=
name|depth
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|element
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|addPair
argument_list|(
name|THROWABLE_STACKTRACE_ELEMENTS
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a key value pair      */
DECL|method|addPair (String key, String value)
specifier|public
name|void
name|addPair
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|quoteValues
condition|)
block|{
name|this
operator|.
name|eventMessage
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
name|KVDELIM
argument_list|)
operator|.
name|append
argument_list|(
name|QUOTE
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
name|QUOTE
argument_list|)
operator|.
name|append
argument_list|(
name|PAIRDELIM
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|eventMessage
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
name|KVDELIM
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
name|PAIRDELIM
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * return the completed event message      */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|event
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|useInternalDate
condition|)
block|{
name|StringBuilder
name|clonedMessage
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|clonedMessage
operator|.
name|append
argument_list|(
name|DATE_FORMATTER
operator|.
name|print
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|PAIRDELIM
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|eventMessage
argument_list|)
expr_stmt|;
name|event
operator|=
name|clonedMessage
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|event
operator|=
name|eventMessage
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// trim off trailing pair delim char(s)
name|String
name|result
init|=
name|event
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|event
operator|.
name|length
argument_list|()
operator|-
name|PAIRDELIM
operator|.
name|length
argument_list|()
argument_list|)
operator|+
name|LINEBREAK
decl_stmt|;
return|return
name|result
return|;
block|}
DECL|method|setCommonCategory (String commonCategory)
specifier|public
name|void
name|setCommonCategory
parameter_list|(
name|String
name|commonCategory
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_CATEGORY
argument_list|,
name|commonCategory
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonCount (String commonCount)
specifier|public
name|void
name|setCommonCount
parameter_list|(
name|String
name|commonCount
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_COUNT
argument_list|,
name|commonCount
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonDesc (String commonDesc)
specifier|public
name|void
name|setCommonDesc
parameter_list|(
name|String
name|commonDesc
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_DESC
argument_list|,
name|commonDesc
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonDhcpPool (String commonDhcpPool)
specifier|public
name|void
name|setCommonDhcpPool
parameter_list|(
name|String
name|commonDhcpPool
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_DHCP_POOL
argument_list|,
name|commonDhcpPool
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonDuration (long commonDuration)
specifier|public
name|void
name|setCommonDuration
parameter_list|(
name|long
name|commonDuration
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_DURATION
argument_list|,
name|commonDuration
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonDvcHost (String commonDvcHost)
specifier|public
name|void
name|setCommonDvcHost
parameter_list|(
name|String
name|commonDvcHost
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_DVC_HOST
argument_list|,
name|commonDvcHost
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonDvcIp (String commonDvcIp)
specifier|public
name|void
name|setCommonDvcIp
parameter_list|(
name|String
name|commonDvcIp
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_DVC_IP
argument_list|,
name|commonDvcIp
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonDvcIp6 (String commonDvcIp6)
specifier|public
name|void
name|setCommonDvcIp6
parameter_list|(
name|String
name|commonDvcIp6
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_DVC_IP6
argument_list|,
name|commonDvcIp6
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonDvcLocation (String commonDvcLocation)
specifier|public
name|void
name|setCommonDvcLocation
parameter_list|(
name|String
name|commonDvcLocation
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_DVC_LOCATION
argument_list|,
name|commonDvcLocation
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonDvcMac (String commonDvcMac)
specifier|public
name|void
name|setCommonDvcMac
parameter_list|(
name|String
name|commonDvcMac
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_DVC_MAC
argument_list|,
name|commonDvcMac
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonDvcNtDomain (String commonDvcNtDomain)
specifier|public
name|void
name|setCommonDvcNtDomain
parameter_list|(
name|String
name|commonDvcNtDomain
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_DVC_NT_DOMAIN
argument_list|,
name|commonDvcNtDomain
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonDvcNtHost (String commonDvcNtHost)
specifier|public
name|void
name|setCommonDvcNtHost
parameter_list|(
name|String
name|commonDvcNtHost
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_DVC_NT_HOST
argument_list|,
name|commonDvcNtHost
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonDvcTime (long commonDvcTime)
specifier|public
name|void
name|setCommonDvcTime
parameter_list|(
name|long
name|commonDvcTime
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_DVC_TIME
argument_list|,
name|commonDvcTime
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonEndTime (long commonEndTime)
specifier|public
name|void
name|setCommonEndTime
parameter_list|(
name|long
name|commonEndTime
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_END_TIME
argument_list|,
name|commonEndTime
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonEventId (long commonEventId)
specifier|public
name|void
name|setCommonEventId
parameter_list|(
name|long
name|commonEventId
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_EVENT_ID
argument_list|,
name|commonEventId
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonLength (long commonLength)
specifier|public
name|void
name|setCommonLength
parameter_list|(
name|long
name|commonLength
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_LENGTH
argument_list|,
name|commonLength
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonLogLevel (String commonLogLevel)
specifier|public
name|void
name|setCommonLogLevel
parameter_list|(
name|String
name|commonLogLevel
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_LOG_LEVEL
argument_list|,
name|commonLogLevel
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonName (String commonName)
specifier|public
name|void
name|setCommonName
parameter_list|(
name|String
name|commonName
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_NAME
argument_list|,
name|commonName
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonPid (long commonPid)
specifier|public
name|void
name|setCommonPid
parameter_list|(
name|long
name|commonPid
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_PID
argument_list|,
name|commonPid
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonPriority (long commonPriority)
specifier|public
name|void
name|setCommonPriority
parameter_list|(
name|long
name|commonPriority
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_PRIORITY
argument_list|,
name|commonPriority
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonProduct (String commonProduct)
specifier|public
name|void
name|setCommonProduct
parameter_list|(
name|String
name|commonProduct
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_PRODUCT
argument_list|,
name|commonProduct
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonProductVersion (long commonProductVersion)
specifier|public
name|void
name|setCommonProductVersion
parameter_list|(
name|long
name|commonProductVersion
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_PRODUCT_VERSION
argument_list|,
name|commonProductVersion
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonReason (String commonReason)
specifier|public
name|void
name|setCommonReason
parameter_list|(
name|String
name|commonReason
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_REASON
argument_list|,
name|commonReason
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonResult (String commonResult)
specifier|public
name|void
name|setCommonResult
parameter_list|(
name|String
name|commonResult
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_RESULT
argument_list|,
name|commonResult
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonSeverity (String commonSeverity)
specifier|public
name|void
name|setCommonSeverity
parameter_list|(
name|String
name|commonSeverity
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_SEVERITY
argument_list|,
name|commonSeverity
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonStartTime (long commonStartTime)
specifier|public
name|void
name|setCommonStartTime
parameter_list|(
name|long
name|commonStartTime
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_START_TIME
argument_list|,
name|commonStartTime
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonTransactionId (String commonTransactionId)
specifier|public
name|void
name|setCommonTransactionId
parameter_list|(
name|String
name|commonTransactionId
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_TRANSACTION_ID
argument_list|,
name|commonTransactionId
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonUrl (String commonUrl)
specifier|public
name|void
name|setCommonUrl
parameter_list|(
name|String
name|commonUrl
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_URL
argument_list|,
name|commonUrl
argument_list|)
expr_stmt|;
block|}
DECL|method|setCommonVendor (String commonVendor)
specifier|public
name|void
name|setCommonVendor
parameter_list|(
name|String
name|commonVendor
parameter_list|)
block|{
name|addPair
argument_list|(
name|COMMON_VENDOR
argument_list|,
name|commonVendor
argument_list|)
expr_stmt|;
block|}
DECL|method|setUpdatePackage (String updatePackage)
specifier|public
name|void
name|setUpdatePackage
parameter_list|(
name|String
name|updatePackage
parameter_list|)
block|{
name|addPair
argument_list|(
name|UPDATE_PACKAGE
argument_list|,
name|updatePackage
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

