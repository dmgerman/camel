begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.splunk
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|splunk
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|splunk
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ScheduledPollEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The splunk component allows to publish or search for events in Splunk.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.13.0"
argument_list|,
name|scheme
operator|=
literal|"splunk"
argument_list|,
name|title
operator|=
literal|"Splunk"
argument_list|,
name|syntax
operator|=
literal|"splunk:name"
argument_list|,
name|consumerClass
operator|=
name|SplunkConsumer
operator|.
name|class
argument_list|,
name|label
operator|=
literal|"log,monitoring"
argument_list|)
DECL|class|SplunkEndpoint
specifier|public
class|class
name|SplunkEndpoint
extends|extends
name|ScheduledPollEndpoint
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SplunkEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SPLUNK_SCHEMA_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|SPLUNK_SCHEMA_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"splunk:(//)*"
argument_list|)
decl_stmt|;
DECL|field|SPLUNK_OPTIONS_PATTER
specifier|private
specifier|static
specifier|final
name|Pattern
name|SPLUNK_OPTIONS_PATTER
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\?.*"
argument_list|)
decl_stmt|;
DECL|field|service
specifier|private
name|Service
name|service
decl_stmt|;
annotation|@
name|UriParam
DECL|field|configuration
specifier|private
name|SplunkConfiguration
name|configuration
decl_stmt|;
DECL|method|SplunkEndpoint ()
specifier|public
name|SplunkEndpoint
parameter_list|()
block|{     }
DECL|method|SplunkEndpoint (String uri, SplunkComponent component, SplunkConfiguration configuration)
specifier|public
name|SplunkEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|SplunkComponent
name|component
parameter_list|,
name|SplunkConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|uriSplit
init|=
name|splitUri
argument_list|(
name|getEndpointUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|uriSplit
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|ProducerType
name|producerType
init|=
name|ProducerType
operator|.
name|fromUri
argument_list|(
name|uriSplit
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
return|return
operator|new
name|SplunkProducer
argument_list|(
name|this
argument_list|,
name|producerType
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot create any producer with uri "
operator|+
name|getEndpointUri
argument_list|()
operator|+
literal|". A producer type was not provided (or an incorrect pairing was used)."
argument_list|)
throw|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|configuration
operator|.
name|getInitEarliestTime
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Required initialEarliestTime option could not be found"
argument_list|)
throw|;
block|}
name|String
index|[]
name|uriSplit
init|=
name|splitUri
argument_list|(
name|getEndpointUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|uriSplit
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|ConsumerType
name|consumerType
init|=
name|ConsumerType
operator|.
name|fromUri
argument_list|(
name|uriSplit
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|SplunkConsumer
name|consumer
init|=
operator|new
name|SplunkConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|,
name|consumerType
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot create any consumer with uri "
operator|+
name|getEndpointUri
argument_list|()
operator|+
literal|". A consumer type was not provided (or an incorrect pairing was used)."
argument_list|)
throw|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|service
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|getService ()
specifier|public
name|Service
name|getService
parameter_list|()
block|{
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|service
operator|=
name|configuration
operator|.
name|getConnectionFactory
argument_list|()
operator|.
name|createService
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|service
return|;
block|}
DECL|method|splitUri (String uri)
specifier|private
specifier|static
name|String
index|[]
name|splitUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|uri
operator|=
name|SPLUNK_SCHEMA_PATTERN
operator|.
name|matcher
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|uri
operator|=
name|SPLUNK_OPTIONS_PATTER
operator|.
name|matcher
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|uri
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|SplunkConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|reset (Exception e)
specifier|public
specifier|synchronized
name|boolean
name|reset
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|boolean
name|answer
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|e
operator|instanceof
name|RuntimeException
operator|&&
operator|(
operator|(
name|RuntimeException
operator|)
name|e
operator|)
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ConnectException
operator|)
operator|||
operator|(
operator|(
name|e
operator|instanceof
name|SocketException
operator|)
operator|||
operator|(
name|e
operator|instanceof
name|SSLException
operator|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got exception from Splunk. Service will be reset."
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|=
literal|null
expr_stmt|;
name|answer
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

