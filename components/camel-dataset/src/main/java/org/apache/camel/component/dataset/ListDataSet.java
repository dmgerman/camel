begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.dataset
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dataset
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A DataSet that allows a list of static payloads to be used to create each message exchange  * along with using a pluggable transformer to customize the messages.  */
end_comment

begin_class
DECL|class|ListDataSet
specifier|public
class|class
name|ListDataSet
extends|extends
name|DataSetSupport
block|{
DECL|field|defaultBodies
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|defaultBodies
decl_stmt|;
DECL|method|ListDataSet ()
specifier|public
name|ListDataSet
parameter_list|()
block|{
name|super
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|ListDataSet (List<Object> defaultBodies)
specifier|public
name|ListDataSet
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|defaultBodies
parameter_list|)
block|{
name|this
operator|.
name|defaultBodies
operator|=
name|defaultBodies
expr_stmt|;
name|setSize
argument_list|(
name|defaultBodies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
DECL|method|getDefaultBodies ()
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getDefaultBodies
parameter_list|()
block|{
if|if
condition|(
name|defaultBodies
operator|==
literal|null
condition|)
block|{
name|defaultBodies
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
return|return
name|defaultBodies
return|;
block|}
DECL|method|setDefaultBodies (List<Object> defaultBodies)
specifier|public
name|void
name|setDefaultBodies
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|defaultBodies
parameter_list|)
block|{
name|this
operator|.
name|defaultBodies
operator|=
name|defaultBodies
expr_stmt|;
name|setSize
argument_list|(
name|defaultBodies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
comment|/**      * Creates the message body for a given message.  If the messageIndex is greater than the size      * of the list, use the modulus.      */
annotation|@
name|Override
DECL|method|createMessageBody (long messageIndex)
specifier|protected
name|Object
name|createMessageBody
parameter_list|(
name|long
name|messageIndex
parameter_list|)
block|{
name|int
name|listIndex
init|=
call|(
name|int
call|)
argument_list|(
name|messageIndex
operator|%
name|getDefaultBodies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getDefaultBodies
argument_list|()
operator|.
name|get
argument_list|(
name|listIndex
argument_list|)
return|;
block|}
block|}
end_class

end_unit

