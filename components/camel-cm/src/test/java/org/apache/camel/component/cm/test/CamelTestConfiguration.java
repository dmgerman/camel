begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cm.test
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cm
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|javaconfig
operator|.
name|SingleRouteCamelConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|PropertySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|validation
operator|.
name|beanvalidation
operator|.
name|LocalValidatorFactoryBean
import|;
end_import

begin_comment
comment|/**  * Builds a SimpleRoute to send a message to CM GW and CM Uri is built based on  * properties in a file.  */
end_comment

begin_class
annotation|@
name|Configuration
argument_list|(
literal|"cmConfig"
argument_list|)
annotation|@
name|PropertySource
argument_list|(
literal|"classpath:/cm-smsgw.properties"
argument_list|)
DECL|class|CamelTestConfiguration
specifier|public
class|class
name|CamelTestConfiguration
extends|extends
name|SingleRouteCamelConfiguration
block|{
DECL|field|SIMPLE_ROUTE_ID
specifier|public
specifier|static
specifier|final
name|String
name|SIMPLE_ROUTE_ID
init|=
literal|"simple-route"
decl_stmt|;
DECL|field|uri
specifier|private
name|String
name|uri
decl_stmt|;
annotation|@
name|Override
DECL|method|route ()
specifier|public
name|RouteBuilder
name|route
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|hasLength
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"\nCM Component is an URI based component\nCM URI: {}"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
comment|// Route definition
name|from
argument_list|(
literal|"direct:sms"
argument_list|)
operator|.
name|to
argument_list|(
name|uri
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:test"
argument_list|)
operator|.
name|routeId
argument_list|(
name|SIMPLE_ROUTE_ID
argument_list|)
operator|.
name|autoStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Bean
DECL|method|getValidatorFactory ()
specifier|public
name|LocalValidatorFactoryBean
name|getValidatorFactory
parameter_list|()
block|{
specifier|final
name|LocalValidatorFactoryBean
name|localValidatorFactoryBean
init|=
operator|new
name|LocalValidatorFactoryBean
argument_list|()
decl_stmt|;
name|localValidatorFactoryBean
operator|.
name|getValidationPropertyMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"hibernate.validator.fail_fast"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|localValidatorFactoryBean
return|;
block|}
comment|/**      * Build the URI of the CM Component based on Environmental properties      */
annotation|@
name|Override
DECL|method|setApplicationContext ( final ApplicationContext applicationContext)
specifier|public
specifier|final
name|void
name|setApplicationContext
parameter_list|(
specifier|final
name|ApplicationContext
name|applicationContext
parameter_list|)
block|{
name|super
operator|.
name|setApplicationContext
argument_list|(
name|applicationContext
argument_list|)
expr_stmt|;
specifier|final
name|Environment
name|env
init|=
name|applicationContext
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
specifier|final
name|String
name|host
init|=
name|env
operator|.
name|getRequiredProperty
argument_list|(
literal|"cm.url"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|productTokenString
init|=
name|env
operator|.
name|getRequiredProperty
argument_list|(
literal|"cm.product-token"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|sender
init|=
name|env
operator|.
name|getRequiredProperty
argument_list|(
literal|"cm.default-sender"
argument_list|)
decl_stmt|;
specifier|final
name|StringBuffer
name|cmUri
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"cm:"
operator|+
name|host
argument_list|)
operator|.
name|append
argument_list|(
literal|"?productToken="
argument_list|)
operator|.
name|append
argument_list|(
name|productTokenString
argument_list|)
decl_stmt|;
if|if
condition|(
name|sender
operator|!=
literal|null
operator|&&
operator|!
name|sender
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cmUri
operator|.
name|append
argument_list|(
literal|"&defaultFrom="
argument_list|)
operator|.
name|append
argument_list|(
name|sender
argument_list|)
expr_stmt|;
block|}
comment|// Defaults to false
specifier|final
name|Boolean
name|testConnectionOnStartup
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|env
operator|.
name|getProperty
argument_list|(
literal|"cm.testConnectionOnStartup"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|testConnectionOnStartup
condition|)
block|{
name|cmUri
operator|.
name|append
argument_list|(
literal|"&testConnectionOnStartup="
argument_list|)
operator|.
name|append
argument_list|(
name|testConnectionOnStartup
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Defaults to 8
specifier|final
name|Integer
name|defaultMaxNumberOfParts
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|env
operator|.
name|getProperty
argument_list|(
literal|"defaultMaxNumberOfParts"
argument_list|,
literal|"8"
argument_list|)
argument_list|)
decl_stmt|;
name|cmUri
operator|.
name|append
argument_list|(
literal|"&defaultMaxNumberOfParts="
argument_list|)
operator|.
name|append
argument_list|(
name|defaultMaxNumberOfParts
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
name|cmUri
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
DECL|method|getUri ()
specifier|public
name|String
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
block|}
end_class

end_unit

