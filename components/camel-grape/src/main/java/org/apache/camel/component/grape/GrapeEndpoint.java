begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.grape
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grape
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|groovy
operator|.
name|grape
operator|.
name|Grape
import|;
end_import

begin_import
import|import
name|groovy
operator|.
name|lang
operator|.
name|Closure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|groovy
operator|.
name|runtime
operator|.
name|DefaultGroovyMethods
import|;
end_import

begin_comment
comment|/**  * The grape component allows you to fetch, load and manage additional jars when  * CamelContext is running.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.16.0"
argument_list|,
name|scheme
operator|=
literal|"grape"
argument_list|,
name|syntax
operator|=
literal|"grape:defaultCoordinates"
argument_list|,
name|title
operator|=
literal|"Grape"
argument_list|,
name|producerOnly
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"management,deployment"
argument_list|)
DECL|class|GrapeEndpoint
specifier|public
class|class
name|GrapeEndpoint
extends|extends
name|DefaultEndpoint
block|{
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"Maven coordinates to use as default to grab if the message body is empty."
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|defaultCoordinates
specifier|private
specifier|final
name|String
name|defaultCoordinates
decl_stmt|;
DECL|method|GrapeEndpoint (String endpointUri, String defaultCoordinates, GrapeComponent component)
specifier|public
name|GrapeEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|String
name|defaultCoordinates
parameter_list|,
name|GrapeComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultCoordinates
operator|=
name|defaultCoordinates
expr_stmt|;
block|}
DECL|method|loadPatches (CamelContext camelContext)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|loadPatches
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
specifier|final
name|ClassLoader
name|classLoader
init|=
name|camelContext
operator|.
name|getApplicationContextClassLoader
argument_list|()
decl_stmt|;
name|PatchesRepository
name|patchesRepository
init|=
name|camelContext
operator|.
name|getComponent
argument_list|(
literal|"grape"
argument_list|,
name|GrapeComponent
operator|.
name|class
argument_list|)
operator|.
name|getPatchesRepository
argument_list|()
decl_stmt|;
return|return
name|DefaultGroovyMethods
operator|.
name|each
argument_list|(
name|patchesRepository
operator|.
name|listPatches
argument_list|()
argument_list|,
operator|new
name|Closure
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
block|{
specifier|public
name|void
name|doCall
parameter_list|(
name|String
name|it
parameter_list|)
block|{
name|MavenCoordinates
name|coordinates
init|=
name|MavenCoordinates
operator|.
name|parseMavenCoordinates
argument_list|(
name|it
argument_list|)
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"classLoader"
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|coordinates
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"module"
argument_list|,
name|coordinates
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|coordinates
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"classifier"
argument_list|,
name|coordinates
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|Grape
operator|.
name|grab
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doCall
parameter_list|()
block|{
name|doCall
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
block|{
return|return
operator|new
name|GrapeProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Grape component supports only the producer side of the route."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getDefaultCoordinates ()
specifier|public
name|String
name|getDefaultCoordinates
parameter_list|()
block|{
return|return
name|defaultCoordinates
return|;
block|}
annotation|@
name|Override
DECL|method|getComponent ()
specifier|public
name|GrapeComponent
name|getComponent
parameter_list|()
block|{
return|return
name|DefaultGroovyMethods
operator|.
name|asType
argument_list|(
name|super
operator|.
name|getComponent
argument_list|()
argument_list|,
name|GrapeComponent
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

