begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.grape
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grape
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOError
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|SystemUtils
import|;
end_import

begin_class
DECL|class|FilePatchesRepository
specifier|public
class|class
name|FilePatchesRepository
implements|implements
name|PatchesRepository
block|{
DECL|field|repository
specifier|private
specifier|final
name|File
name|repository
decl_stmt|;
DECL|method|FilePatchesRepository ()
specifier|public
name|FilePatchesRepository
parameter_list|()
block|{
name|this
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|SystemUtils
operator|.
name|getUserHome
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|".camel"
argument_list|,
literal|"patches"
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|FilePatchesRepository (File repository)
specifier|public
name|FilePatchesRepository
parameter_list|(
name|File
name|repository
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|repository
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|repository
operator|.
name|getParentFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|repository
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|repository
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|install (String coordinates)
specifier|public
name|void
name|install
parameter_list|(
name|String
name|coordinates
parameter_list|)
block|{
try|try
block|{
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|repository
argument_list|,
name|coordinates
operator|+
literal|"\n"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|listPatches ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPatches
parameter_list|()
block|{
try|try
block|{
return|return
name|IOUtils
operator|.
name|readLines
argument_list|(
operator|new
name|FileReader
argument_list|(
name|repository
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
try|try
block|{
name|repository
operator|.
name|delete
argument_list|()
expr_stmt|;
name|repository
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

