begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.grape
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grape
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|groovy
operator|.
name|grape
operator|.
name|Grape
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_class
DECL|class|GrapeProducer
specifier|public
class|class
name|GrapeProducer
extends|extends
name|DefaultProducer
block|{
DECL|method|GrapeProducer (GrapeEndpoint endpoint)
specifier|public
name|GrapeProducer
parameter_list|(
name|GrapeEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|GrapeCommand
name|command
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GrapeConstants
operator|.
name|GRAPE_COMMAND
argument_list|,
name|GrapeCommand
operator|.
name|grab
argument_list|,
name|GrapeCommand
operator|.
name|class
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|command
condition|)
block|{
case|case
name|grab
case|:
name|ClassLoader
name|classLoader
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getApplicationContextClassLoader
argument_list|()
decl_stmt|;
name|String
name|rawCoordinates
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
try|try
block|{
name|MavenCoordinates
name|coordinates
init|=
name|MavenCoordinates
operator|.
name|parseMavenCoordinates
argument_list|(
name|rawCoordinates
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"classLoader"
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|coordinates
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"module"
argument_list|,
name|coordinates
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|coordinates
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"classifier"
argument_list|,
name|coordinates
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|Grape
operator|.
name|grab
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|getComponent
argument_list|()
operator|.
name|getPatchesRepository
argument_list|()
operator|.
name|install
argument_list|(
name|rawCoordinates
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|MavenCoordinates
name|coordinates
init|=
name|MavenCoordinates
operator|.
name|parseMavenCoordinates
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getDefaultCoordinates
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"classLoader"
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|coordinates
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"module"
argument_list|,
name|coordinates
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|coordinates
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"classifier"
argument_list|,
name|coordinates
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|Grape
operator|.
name|grab
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|getComponent
argument_list|()
operator|.
name|getPatchesRepository
argument_list|()
operator|.
name|install
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getDefaultCoordinates
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|listPatches
case|:
name|List
argument_list|<
name|String
argument_list|>
name|patches
init|=
name|getEndpoint
argument_list|()
operator|.
name|getComponent
argument_list|()
operator|.
name|getPatchesRepository
argument_list|()
operator|.
name|listPatches
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|patches
argument_list|)
expr_stmt|;
break|break;
case|case
name|clearPatches
case|:
name|getEndpoint
argument_list|()
operator|.
name|getComponent
argument_list|()
operator|.
name|getPatchesRepository
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|GrapeEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|GrapeEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
block|}
end_class

end_unit

