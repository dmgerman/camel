begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.sdb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|sdb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpledb
operator|.
name|model
operator|.
name|NoSuchDomainException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpledb
operator|.
name|model
operator|.
name|ReplaceableAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SdbComponentTest
specifier|public
class|class
name|SdbComponentTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|amazonSdbClient
specifier|private
name|AmazonSDBClientMock
name|amazonSdbClient
decl_stmt|;
annotation|@
name|Test
DECL|method|domainCreatedOnStart ()
specifier|public
name|void
name|domainCreatedOnStart
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"TestDomain"
argument_list|,
name|amazonSdbClient
operator|.
name|getDomainNameToCreate
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|putItemFromMessageHeaders ()
specifier|public
name|void
name|putItemFromMessageHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|send
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|SdbConstants
operator|.
name|OPERATION
argument_list|,
name|SdbConstants
operator|.
name|OPERATION_PUT
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|SdbConstants
operator|.
name|ITEM_KEY
argument_list|,
literal|"ItemOne"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|SdbConstants
operator|.
name|ATTRIBUTE_PREFIX
operator|+
literal|"AttributeOne"
argument_list|,
literal|"Value One"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|SdbConstants
operator|.
name|ATTRIBUTE_PREFIX
operator|+
literal|"AttributeTwo"
argument_list|,
literal|"Value Two"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TestDomain"
argument_list|,
name|domainNameToBeCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ItemOne"
argument_list|,
name|itemNameToBeCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Value One"
argument_list|,
name|getAttributeValueFor
argument_list|(
literal|"AttributeOne"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Value Two"
argument_list|,
name|getAttributeValueFor
argument_list|(
literal|"AttributeTwo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getAttributesSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteItemByKey ()
specifier|public
name|void
name|deleteItemByKey
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|send
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|SdbConstants
operator|.
name|OPERATION
argument_list|,
name|SdbConstants
operator|.
name|OPERATION_DELETE
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|SdbConstants
operator|.
name|ITEM_KEY
argument_list|,
literal|"ItemOne"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ItemOne"
argument_list|,
name|amazonSdbClient
operator|.
name|getItemNameToDelete
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getItemByKey ()
specifier|public
name|void
name|getItemByKey
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|SdbConstants
operator|.
name|OPERATION
argument_list|,
name|SdbConstants
operator|.
name|OPERATION_GET
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|SdbConstants
operator|.
name|ITEM_KEY
argument_list|,
literal|"ItemOne"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Value One"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"AttributeOne"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Value Two"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"AttributeTwo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deletingItemOnNonExistingDomainCauseException ()
specifier|public
name|void
name|deletingItemOnNonExistingDomainCauseException
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|SdbConstants
operator|.
name|DOMAIN_NAME
argument_list|,
literal|"MissingDomain"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|SdbConstants
operator|.
name|OPERATION
argument_list|,
name|SdbConstants
operator|.
name|OPERATION_DELETE
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|SdbConstants
operator|.
name|ITEM_KEY
argument_list|,
literal|"ItemOne"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Exception
name|exception
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"NoSuchDomainException is missing"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|NoSuchDomainException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|itemKeyHeaderIsAlwaysRequired ()
specifier|public
name|void
name|itemKeyHeaderIsAlwaysRequired
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|SdbConstants
operator|.
name|OPERATION
argument_list|,
name|SdbConstants
operator|.
name|OPERATION_PUT
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|SdbConstants
operator|.
name|ATTRIBUTE_PREFIX
operator|+
literal|"AttributeOne"
argument_list|,
literal|"Value One"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Exception
name|exception
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"IllegalArgumentException is missing"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|IllegalArgumentException
argument_list|)
expr_stmt|;
block|}
DECL|method|getAttributesSize ()
specifier|private
name|int
name|getAttributesSize
parameter_list|()
block|{
return|return
name|amazonSdbClient
operator|.
name|getPutAttributesRequest
argument_list|()
operator|.
name|getAttributes
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getAttributeValueFor (String attributeName)
specifier|private
name|String
name|getAttributeValueFor
parameter_list|(
name|String
name|attributeName
parameter_list|)
block|{
name|List
argument_list|<
name|ReplaceableAttribute
argument_list|>
name|attributes
init|=
name|amazonSdbClient
operator|.
name|getPutAttributesRequest
argument_list|()
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|ReplaceableAttribute
name|attribute
range|:
name|attributes
control|)
block|{
if|if
condition|(
name|attribute
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|attributeName
argument_list|)
condition|)
block|{
return|return
name|attribute
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|"Attribute Not Found"
operator|+
name|attributeName
return|;
block|}
DECL|method|itemNameToBeCreated ()
specifier|private
name|String
name|itemNameToBeCreated
parameter_list|()
block|{
return|return
name|amazonSdbClient
operator|.
name|getPutAttributesRequest
argument_list|()
operator|.
name|getItemName
argument_list|()
return|;
block|}
DECL|method|domainNameToBeCreated ()
specifier|private
name|String
name|domainNameToBeCreated
parameter_list|()
block|{
return|return
name|amazonSdbClient
operator|.
name|getPutAttributesRequest
argument_list|()
operator|.
name|getDomainName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|registry
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|amazonSdbClient
operator|=
operator|new
name|AmazonSDBClientMock
argument_list|()
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"amazonSdbClient"
argument_list|,
name|amazonSdbClient
argument_list|)
expr_stmt|;
return|return
name|registry
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"aws-sdb://TestDomain?amazonSdbClient=#amazonSdbClient&operation=CamelAwsSdbGet"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

