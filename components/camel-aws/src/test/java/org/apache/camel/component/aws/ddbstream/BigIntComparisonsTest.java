begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.ddbstream
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|ddbstream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|BigIntComparisonsTest
specifier|public
class|class
name|BigIntComparisonsTest
block|{
DECL|field|condition
specifier|private
specifier|final
name|BigIntComparisons
name|condition
decl_stmt|;
DECL|field|smaller
specifier|private
specifier|final
name|int
name|smaller
decl_stmt|;
DECL|field|bigger
specifier|private
specifier|final
name|int
name|bigger
decl_stmt|;
DECL|field|result
specifier|private
specifier|final
name|boolean
name|result
decl_stmt|;
DECL|method|BigIntComparisonsTest (BigIntComparisons condition, int smaller, int bigger, boolean result)
specifier|public
name|BigIntComparisonsTest
parameter_list|(
name|BigIntComparisons
name|condition
parameter_list|,
name|int
name|smaller
parameter_list|,
name|int
name|bigger
parameter_list|,
name|boolean
name|result
parameter_list|)
block|{
name|this
operator|.
name|condition
operator|=
name|condition
expr_stmt|;
name|this
operator|.
name|smaller
operator|=
name|smaller
expr_stmt|;
name|this
operator|.
name|bigger
operator|=
name|bigger
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|parameters ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|BigIntComparisons
operator|.
name|Conditions
operator|.
name|LT
block|,
literal|1
block|,
literal|5
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|BigIntComparisons
operator|.
name|Conditions
operator|.
name|LTEQ
block|,
literal|1
block|,
literal|5
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|BigIntComparisons
operator|.
name|Conditions
operator|.
name|LT
block|,
literal|1
block|,
literal|1
block|,
literal|false
block|}
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|BigIntComparisons
operator|.
name|Conditions
operator|.
name|LTEQ
block|,
literal|1
block|,
literal|1
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|BigIntComparisons
operator|.
name|Conditions
operator|.
name|LT
block|,
literal|5
block|,
literal|1
block|,
literal|false
block|}
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|BigIntComparisons
operator|.
name|Conditions
operator|.
name|LTEQ
block|,
literal|5
block|,
literal|1
block|,
literal|false
block|}
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|condition
operator|.
name|matches
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|smaller
argument_list|)
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|bigger
argument_list|)
argument_list|)
argument_list|,
name|is
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

