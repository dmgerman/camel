begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.sqs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|sqs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|sqs
operator|.
name|model
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|SimpleRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
operator|.
name|assertIsSatisfied
import|;
end_import

begin_class
DECL|class|SqsFilterMessagesWithNoDeleteTest
specifier|public
class|class
name|SqsFilterMessagesWithNoDeleteTest
extends|extends
name|TestSupport
block|{
comment|// put some test messages onto the 'queue'
DECL|method|populateMessages (AmazonSQSClientMock clientMock)
specifier|private
name|void
name|populateMessages
parameter_list|(
name|AmazonSQSClientMock
name|clientMock
parameter_list|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
literal|"Message: hello, world!"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setMD5OfBody
argument_list|(
literal|"6a1559560f67c5e7a7d5d838bf0272ee"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setMessageId
argument_list|(
literal|"f6fb6f99-5eb2-4be4-9b15-144774141458"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setReceiptHandle
argument_list|(
literal|"0NNAq8PwvXsyZkR6yu4nQ07FGxNmOBWi5"
argument_list|)
expr_stmt|;
name|clientMock
operator|.
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoesNotGetThroughFilter ()
specifier|public
name|void
name|testDoesNotGetThroughFilter
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|sqsURI
init|=
name|String
operator|.
name|format
argument_list|(
literal|"aws-sqs://MyQueue?amazonSQSClient=#amazonSQSClient"
comment|// note we will NOT delete if this message gets filtered out
operator|+
literal|"&deleteIfFiltered=false"
operator|+
literal|"&defaultVisibilityTimeout=1"
argument_list|)
decl_stmt|;
name|AmazonSQSClientMock
name|clientMock
init|=
operator|new
name|AmazonSQSClientMock
argument_list|()
decl_stmt|;
name|populateMessages
argument_list|(
name|clientMock
argument_list|)
expr_stmt|;
name|SimpleRegistry
name|registry
init|=
operator|new
name|SimpleRegistry
argument_list|()
decl_stmt|;
name|DefaultCamelContext
name|ctx
init|=
operator|new
name|DefaultCamelContext
argument_list|(
name|registry
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|sqsURI
argument_list|)
comment|// try to filter using a non-existent header... should not go through
operator|.
name|filter
argument_list|(
name|simple
argument_list|(
literal|"${header.login} == true"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|MockEndpoint
name|result
init|=
name|MockEndpoint
operator|.
name|resolve
argument_list|(
name|ctx
argument_list|,
literal|"mock:result"
argument_list|)
decl_stmt|;
name|clientMock
operator|.
name|setScheduler
argument_list|(
name|ctx
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newScheduledThreadPool
argument_list|(
name|clientMock
argument_list|,
literal|"ClientMock Scheduler"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"amazonSQSClient"
argument_list|,
name|clientMock
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// we shouldn't get
name|assertIsSatisfied
argument_list|(
literal|2000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// however, the message should not be deleted, that is, it should be left on the queue
name|String
name|response
init|=
name|ctx
operator|.
name|createConsumerTemplate
argument_list|()
operator|.
name|receiveBody
argument_list|(
name|sqsURI
argument_list|,
literal|5000
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
argument_list|,
literal|"Message: hello, world!"
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|stop
argument_list|()
expr_stmt|;
name|clientMock
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Test fails occationally on CI servers"
argument_list|)
DECL|method|testGetThroughFilter ()
specifier|public
name|void
name|testGetThroughFilter
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|sqsURI
init|=
name|String
operator|.
name|format
argument_list|(
literal|"aws-sqs://MyQueue?amazonSQSClient=#amazonSQSClient"
comment|// note we will NOT delete if this message gets filtered out, but if it goes
comment|// through filter, it should be deleted!
operator|+
literal|"&deleteIfFiltered=false"
operator|+
literal|"&defaultVisibilityTimeout=1"
argument_list|)
decl_stmt|;
name|AmazonSQSClientMock
name|clientMock
init|=
operator|new
name|AmazonSQSClientMock
argument_list|()
decl_stmt|;
name|populateMessages
argument_list|(
name|clientMock
argument_list|)
expr_stmt|;
name|SimpleRegistry
name|registry
init|=
operator|new
name|SimpleRegistry
argument_list|()
decl_stmt|;
name|DefaultCamelContext
name|ctx
init|=
operator|new
name|DefaultCamelContext
argument_list|(
name|registry
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|sqsURI
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"login"
argument_list|,
name|constant
argument_list|(
literal|true
argument_list|)
argument_list|)
comment|// this filter should allow the message to pass..
operator|.
name|filter
argument_list|(
name|simple
argument_list|(
literal|"${header.login} == true"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|MockEndpoint
name|result
init|=
name|MockEndpoint
operator|.
name|resolve
argument_list|(
name|ctx
argument_list|,
literal|"mock:result"
argument_list|)
decl_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"amazonSQSClient"
argument_list|,
name|clientMock
argument_list|)
expr_stmt|;
name|clientMock
operator|.
name|setScheduler
argument_list|(
name|ctx
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newScheduledThreadPool
argument_list|(
name|clientMock
argument_list|,
literal|"ClientMock Scheduler"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// the message should get through filter and mock should assert this
name|assertIsSatisfied
argument_list|(
literal|2000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
comment|// however, the message should not be deleted, that is, it should be left on the queue
name|String
name|response
init|=
name|ctx
operator|.
name|createConsumerTemplate
argument_list|()
operator|.
name|receiveBody
argument_list|(
name|sqsURI
argument_list|,
literal|5000
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|stop
argument_list|()
expr_stmt|;
name|clientMock
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

