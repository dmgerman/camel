begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.ddbstream
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|ddbstream
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|SequenceNumberRange
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|Shard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_class
DECL|class|ShardListTest
specifier|public
class|class
name|ShardListTest
block|{
annotation|@
name|Test
DECL|method|nextReturnsShardWithParent ()
specifier|public
name|void
name|nextReturnsShardWithParent
parameter_list|()
throws|throws
name|Exception
block|{
name|Shard
name|first
init|=
operator|new
name|Shard
argument_list|()
operator|.
name|withShardId
argument_list|(
literal|"first_shard"
argument_list|)
operator|.
name|withParentShardId
argument_list|(
literal|"other_shard_id"
argument_list|)
decl_stmt|;
name|Shard
name|second
init|=
operator|new
name|Shard
argument_list|()
operator|.
name|withParentShardId
argument_list|(
literal|"first_shard"
argument_list|)
operator|.
name|withShardId
argument_list|(
literal|"second_shard"
argument_list|)
decl_stmt|;
name|ShardList
name|shards
init|=
operator|new
name|ShardList
argument_list|()
decl_stmt|;
name|shards
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|shards
operator|.
name|add
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shards
operator|.
name|nextAfter
argument_list|(
name|first
argument_list|)
argument_list|,
name|is
argument_list|(
name|second
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nextWithNullReturnsFirstKnownShard ()
specifier|public
name|void
name|nextWithNullReturnsFirstKnownShard
parameter_list|()
throws|throws
name|Exception
block|{
name|Shard
name|first
init|=
operator|new
name|Shard
argument_list|()
operator|.
name|withShardId
argument_list|(
literal|"first_shard"
argument_list|)
decl_stmt|;
name|Shard
name|second
init|=
operator|new
name|Shard
argument_list|()
operator|.
name|withParentShardId
argument_list|(
literal|"first_shard"
argument_list|)
operator|.
name|withShardId
argument_list|(
literal|"second_shard"
argument_list|)
decl_stmt|;
name|ShardList
name|shards
init|=
operator|new
name|ShardList
argument_list|()
decl_stmt|;
name|shards
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|shards
operator|.
name|add
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shards
operator|.
name|nextAfter
argument_list|(
name|first
argument_list|)
argument_list|,
name|is
argument_list|(
name|second
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|reAddingEntriesMaintainsOrder ()
specifier|public
name|void
name|reAddingEntriesMaintainsOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|Shard
name|first
init|=
operator|new
name|Shard
argument_list|()
operator|.
name|withShardId
argument_list|(
literal|"first_shard"
argument_list|)
decl_stmt|;
name|Shard
name|second
init|=
operator|new
name|Shard
argument_list|()
operator|.
name|withParentShardId
argument_list|(
literal|"first_shard"
argument_list|)
operator|.
name|withShardId
argument_list|(
literal|"second_shard"
argument_list|)
decl_stmt|;
name|ShardList
name|shards
init|=
operator|new
name|ShardList
argument_list|()
decl_stmt|;
name|shards
operator|.
name|add
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|shards
operator|.
name|add
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shards
operator|.
name|nextAfter
argument_list|(
name|first
argument_list|)
argument_list|,
name|is
argument_list|(
name|second
argument_list|)
argument_list|)
expr_stmt|;
name|Shard
name|second2
init|=
operator|new
name|Shard
argument_list|()
operator|.
name|withParentShardId
argument_list|(
literal|"first_shard"
argument_list|)
operator|.
name|withShardId
argument_list|(
literal|"second_shard"
argument_list|)
decl_stmt|;
name|Shard
name|third
init|=
operator|new
name|Shard
argument_list|()
operator|.
name|withParentShardId
argument_list|(
literal|"second_shard"
argument_list|)
operator|.
name|withShardId
argument_list|(
literal|"third_shard"
argument_list|)
decl_stmt|;
name|shards
operator|.
name|add
argument_list|(
name|second2
argument_list|)
expr_stmt|;
name|shards
operator|.
name|add
argument_list|(
name|third
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shards
operator|.
name|nextAfter
argument_list|(
name|first
argument_list|)
argument_list|,
name|is
argument_list|(
name|second
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shards
operator|.
name|nextAfter
argument_list|(
name|second
argument_list|)
argument_list|,
name|is
argument_list|(
name|third
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|firstShardGetsTheFirstWithoutAParent ()
specifier|public
name|void
name|firstShardGetsTheFirstWithoutAParent
parameter_list|()
throws|throws
name|Exception
block|{
name|ShardList
name|shards
init|=
operator|new
name|ShardList
argument_list|()
decl_stmt|;
name|shards
operator|.
name|addAll
argument_list|(
name|createShards
argument_list|(
literal|null
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shards
operator|.
name|first
argument_list|()
operator|.
name|getShardId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|firstShardGetsTheFirstWithAnUnknownParent ()
specifier|public
name|void
name|firstShardGetsTheFirstWithAnUnknownParent
parameter_list|()
throws|throws
name|Exception
block|{
name|ShardList
name|shards
init|=
operator|new
name|ShardList
argument_list|()
decl_stmt|;
name|shards
operator|.
name|addAll
argument_list|(
name|createShards
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shards
operator|.
name|first
argument_list|()
operator|.
name|getShardId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|lastShardGetsTheShardWithNoChildren ()
specifier|public
name|void
name|lastShardGetsTheShardWithNoChildren
parameter_list|()
throws|throws
name|Exception
block|{
name|ShardList
name|shards
init|=
operator|new
name|ShardList
argument_list|()
decl_stmt|;
name|shards
operator|.
name|addAll
argument_list|(
name|createShards
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shards
operator|.
name|last
argument_list|()
operator|.
name|getShardId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removingShards ()
specifier|public
name|void
name|removingShards
parameter_list|()
throws|throws
name|Exception
block|{
name|ShardList
name|shards
init|=
operator|new
name|ShardList
argument_list|()
decl_stmt|;
name|shards
operator|.
name|addAll
argument_list|(
name|createShards
argument_list|(
literal|null
argument_list|,
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|Shard
name|removeBefore
init|=
operator|new
name|Shard
argument_list|()
operator|.
name|withShardId
argument_list|(
literal|"c"
argument_list|)
operator|.
name|withParentShardId
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|shards
operator|.
name|removeOlderThan
argument_list|(
name|removeBefore
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shards
operator|.
name|first
argument_list|()
operator|.
name|getShardId
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createShardsWithSequenceNumbers (String initialParent, String... shardIdsAndSeqNos)
specifier|static
name|List
argument_list|<
name|Shard
argument_list|>
name|createShardsWithSequenceNumbers
parameter_list|(
name|String
name|initialParent
parameter_list|,
name|String
modifier|...
name|shardIdsAndSeqNos
parameter_list|)
block|{
name|String
name|previous
init|=
name|initialParent
decl_stmt|;
name|List
argument_list|<
name|Shard
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shardIdsAndSeqNos
operator|.
name|length
condition|;
name|i
operator|+=
literal|3
control|)
block|{
name|String
name|id
init|=
name|shardIdsAndSeqNos
index|[
name|i
index|]
decl_stmt|;
name|String
name|seqStart
init|=
name|shardIdsAndSeqNos
index|[
name|i
operator|+
literal|1
index|]
decl_stmt|;
name|String
name|seqEnd
init|=
name|shardIdsAndSeqNos
index|[
name|i
operator|+
literal|2
index|]
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Shard
argument_list|()
operator|.
name|withShardId
argument_list|(
name|id
argument_list|)
operator|.
name|withParentShardId
argument_list|(
name|previous
argument_list|)
operator|.
name|withSequenceNumberRange
argument_list|(
operator|new
name|SequenceNumberRange
argument_list|()
operator|.
name|withStartingSequenceNumber
argument_list|(
name|seqStart
argument_list|)
operator|.
name|withEndingSequenceNumber
argument_list|(
name|seqEnd
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|previous
operator|=
name|id
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|createShards (String initialParent, String... shardIds)
specifier|static
name|List
argument_list|<
name|Shard
argument_list|>
name|createShards
parameter_list|(
name|String
name|initialParent
parameter_list|,
name|String
modifier|...
name|shardIds
parameter_list|)
block|{
name|String
name|previous
init|=
name|initialParent
decl_stmt|;
name|List
argument_list|<
name|Shard
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|shardIds
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|Shard
argument_list|()
operator|.
name|withShardId
argument_list|(
name|s
argument_list|)
operator|.
name|withParentShardId
argument_list|(
name|previous
argument_list|)
argument_list|)
expr_stmt|;
name|previous
operator|=
name|s
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

