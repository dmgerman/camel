begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.swf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|swf
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpleworkflow
operator|.
name|flow
operator|.
name|DynamicActivitiesClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpleworkflow
operator|.
name|flow
operator|.
name|core
operator|.
name|Promise
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpleworkflow
operator|.
name|model
operator|.
name|ActivityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
DECL|class|CamelSWFActivityClientTest
specifier|public
class|class
name|CamelSWFActivityClientTest
block|{
DECL|field|actClient
specifier|private
name|DynamicActivitiesClient
name|actClient
decl_stmt|;
DECL|field|camelSWFActivityClient
specifier|private
name|CamelSWFActivityClient
name|camelSWFActivityClient
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|actClient
operator|=
name|mock
argument_list|(
name|DynamicActivitiesClient
operator|.
name|class
argument_list|)
expr_stmt|;
name|camelSWFActivityClient
operator|=
operator|new
name|CamelSWFActivityClient
argument_list|(
operator|new
name|SWFConfiguration
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|DynamicActivitiesClient
name|getDynamicActivitiesClient
parameter_list|()
block|{
return|return
name|actClient
return|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScheduleActivity ()
specifier|public
name|void
name|testScheduleActivity
parameter_list|()
throws|throws
name|Exception
block|{
name|camelSWFActivityClient
operator|.
name|scheduleActivity
argument_list|(
literal|"eventName"
argument_list|,
literal|"version"
argument_list|,
literal|"input"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|actClient
argument_list|)
operator|.
name|scheduleActivity
argument_list|(
name|any
argument_list|(
name|ActivityType
operator|.
name|class
argument_list|)
argument_list|,
name|ArgumentMatchers
operator|.
expr|<
name|Promise
argument_list|<
name|?
argument_list|>
index|[]
operator|>
name|any
argument_list|()
operator|,
name|ArgumentMatchers
operator|.
name|isNull
argument_list|()
operator|,
name|ArgumentMatchers
operator|.
expr|<
name|Class
argument_list|<
name|?
argument_list|>
operator|>
name|any
argument_list|()
operator|,
name|ArgumentMatchers
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

