begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.sdb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|sdb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpledb
operator|.
name|model
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpledb
operator|.
name|model
operator|.
name|DeleteAttributesRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpledb
operator|.
name|model
operator|.
name|GetAttributesRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpledb
operator|.
name|model
operator|.
name|GetAttributesResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpledb
operator|.
name|model
operator|.
name|PutAttributesRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|simpledb
operator|.
name|model
operator|.
name|ReplaceableAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|SdbProducer
specifier|public
class|class
name|SdbProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SdbProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|SdbProducer (Endpoint endpoint)
specifier|public
name|SdbProducer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|domainName
init|=
name|determineDomainName
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|String
name|itemName
init|=
name|determineItemName
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|String
name|operation
init|=
name|determineOperation
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|SdbConstants
operator|.
name|OPERATION_PUT
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|executePut
argument_list|(
name|exchange
argument_list|,
name|domainName
argument_list|,
name|itemName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SdbConstants
operator|.
name|OPERATION_GET
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|executeGet
argument_list|(
name|exchange
argument_list|,
name|domainName
argument_list|,
name|itemName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SdbConstants
operator|.
name|OPERATION_DELETE
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|executeDelete
argument_list|(
name|domainName
argument_list|,
name|itemName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported operation: "
operator|+
name|operation
argument_list|)
throw|;
block|}
block|}
DECL|method|executeDelete (String domainName, String itemName)
specifier|private
name|void
name|executeDelete
parameter_list|(
name|String
name|domainName
parameter_list|,
name|String
name|itemName
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Deleting item [{}] from domain [{}]..."
argument_list|,
name|itemName
argument_list|,
name|domainName
argument_list|)
expr_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|getSdbClient
argument_list|()
operator|.
name|deleteAttributes
argument_list|(
operator|new
name|DeleteAttributesRequest
argument_list|(
name|domainName
argument_list|,
name|itemName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|executeGet (Exchange exchange, String domainName, String itemName)
specifier|private
name|void
name|executeGet
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|domainName
parameter_list|,
name|String
name|itemName
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Getting item [{}] from domain [{}]..."
argument_list|,
name|itemName
argument_list|,
name|domainName
argument_list|)
expr_stmt|;
name|GetAttributesRequest
name|getAttributesRequest
init|=
operator|new
name|GetAttributesRequest
argument_list|(
name|domainName
argument_list|,
name|itemName
argument_list|)
decl_stmt|;
name|GetAttributesResult
name|result
init|=
name|getEndpoint
argument_list|()
operator|.
name|getSdbClient
argument_list|()
operator|.
name|getAttributes
argument_list|(
name|getAttributesRequest
argument_list|)
decl_stmt|;
name|populateExchangeWithResult
argument_list|(
name|exchange
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|populateExchangeWithResult (Exchange exchange, GetAttributesResult attributesResult)
specifier|private
name|void
name|populateExchangeWithResult
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|GetAttributesResult
name|attributesResult
parameter_list|)
block|{
for|for
control|(
name|Attribute
name|attribute
range|:
name|attributesResult
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|executePut (Exchange exchange, String domainName, String itemName)
specifier|private
name|void
name|executePut
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|domainName
parameter_list|,
name|String
name|itemName
parameter_list|)
block|{
name|List
argument_list|<
name|ReplaceableAttribute
argument_list|>
name|attributes
init|=
name|extractAttributesFrom
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|PutAttributesRequest
name|request
init|=
operator|new
name|PutAttributesRequest
argument_list|(
name|domainName
argument_list|,
name|itemName
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Put object [{}] from exchange [{}]..."
argument_list|,
name|request
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|getSdbClient
argument_list|()
operator|.
name|putAttributes
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
DECL|method|extractAttributesFrom (Exchange exchange)
specifier|private
name|List
argument_list|<
name|ReplaceableAttribute
argument_list|>
name|extractAttributesFrom
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|List
argument_list|<
name|ReplaceableAttribute
argument_list|>
name|attributes
init|=
operator|new
name|ArrayList
argument_list|<
name|ReplaceableAttribute
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|SdbConstants
operator|.
name|ATTRIBUTE_PREFIX
argument_list|)
condition|)
block|{
name|String
name|fieldName
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|SdbConstants
operator|.
name|ATTRIBUTE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|attributes
operator|.
name|add
argument_list|(
operator|new
name|ReplaceableAttribute
argument_list|(
name|fieldName
argument_list|,
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attributes
return|;
block|}
DECL|method|determineDomainName (Exchange exchange)
specifier|private
name|String
name|determineDomainName
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|domainName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|SdbConstants
operator|.
name|DOMAIN_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|domainName
operator|!=
literal|null
condition|?
name|domainName
else|:
name|getConfiguration
argument_list|()
operator|.
name|getDomainName
argument_list|()
return|;
block|}
DECL|method|determineOperation (Exchange exchange)
specifier|private
name|String
name|determineOperation
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|operation
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|SdbConstants
operator|.
name|OPERATION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
name|operation
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getOperation
argument_list|()
expr_stmt|;
block|}
return|return
name|operation
operator|!=
literal|null
condition|?
name|operation
else|:
name|SdbConstants
operator|.
name|OPERATION_PUT
return|;
block|}
DECL|method|determineItemName (Exchange exchange)
specifier|private
name|String
name|determineItemName
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|key
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|SdbConstants
operator|.
name|ITEM_KEY
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"AWS SDB Item Key header is missing."
argument_list|)
throw|;
block|}
return|return
name|key
return|;
block|}
DECL|method|getConfiguration ()
specifier|protected
name|SdbConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SdbProducer["
operator|+
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|SdbEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|SdbEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
block|}
end_class

end_unit

