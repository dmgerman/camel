begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.ddb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|ddb
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|AmazonDynamoDB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|DdbConfiguration
specifier|public
class|class
name|DdbConfiguration
block|{
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|tableName
specifier|private
name|String
name|tableName
decl_stmt|;
annotation|@
name|UriParam
DECL|field|accessKey
specifier|private
name|String
name|accessKey
decl_stmt|;
annotation|@
name|UriParam
DECL|field|secretKey
specifier|private
name|String
name|secretKey
decl_stmt|;
annotation|@
name|UriParam
DECL|field|amazonDDBClient
specifier|private
name|AmazonDynamoDB
name|amazonDDBClient
decl_stmt|;
annotation|@
name|UriParam
DECL|field|amazonDdbEndpoint
specifier|private
name|String
name|amazonDdbEndpoint
decl_stmt|;
annotation|@
name|UriParam
DECL|field|consistentRead
specifier|private
name|boolean
name|consistentRead
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"PutItem"
argument_list|)
DECL|field|operation
specifier|private
name|DdbOperations
name|operation
init|=
name|DdbOperations
operator|.
name|PutItem
decl_stmt|;
annotation|@
name|UriParam
DECL|field|readCapacity
specifier|private
name|Long
name|readCapacity
decl_stmt|;
annotation|@
name|UriParam
DECL|field|writeCapacity
specifier|private
name|Long
name|writeCapacity
decl_stmt|;
annotation|@
name|UriParam
DECL|field|keyAttributeName
specifier|private
name|String
name|keyAttributeName
decl_stmt|;
annotation|@
name|UriParam
DECL|field|keyAttributeType
specifier|private
name|String
name|keyAttributeType
decl_stmt|;
comment|/**      * The region with which the AWS-DDB client wants to work with.      */
DECL|method|setAmazonDdbEndpoint (String amazonDdbEndpoint)
specifier|public
name|void
name|setAmazonDdbEndpoint
parameter_list|(
name|String
name|amazonDdbEndpoint
parameter_list|)
block|{
name|this
operator|.
name|amazonDdbEndpoint
operator|=
name|amazonDdbEndpoint
expr_stmt|;
block|}
DECL|method|getAmazonDdbEndpoint ()
specifier|public
name|String
name|getAmazonDdbEndpoint
parameter_list|()
block|{
return|return
name|amazonDdbEndpoint
return|;
block|}
DECL|method|getAccessKey ()
specifier|public
name|String
name|getAccessKey
parameter_list|()
block|{
return|return
name|accessKey
return|;
block|}
comment|/**      * Amazon AWS Access Key      */
DECL|method|setAccessKey (String accessKey)
specifier|public
name|void
name|setAccessKey
parameter_list|(
name|String
name|accessKey
parameter_list|)
block|{
name|this
operator|.
name|accessKey
operator|=
name|accessKey
expr_stmt|;
block|}
DECL|method|getSecretKey ()
specifier|public
name|String
name|getSecretKey
parameter_list|()
block|{
return|return
name|secretKey
return|;
block|}
comment|/**      * Amazon AWS Secret Key      */
DECL|method|setSecretKey (String secretKey)
specifier|public
name|void
name|setSecretKey
parameter_list|(
name|String
name|secretKey
parameter_list|)
block|{
name|this
operator|.
name|secretKey
operator|=
name|secretKey
expr_stmt|;
block|}
DECL|method|getAmazonDDBClient ()
specifier|public
name|AmazonDynamoDB
name|getAmazonDDBClient
parameter_list|()
block|{
return|return
name|amazonDDBClient
return|;
block|}
comment|/**      * To use the AmazonDynamoDB as the client      */
DECL|method|setAmazonDDBClient (AmazonDynamoDB amazonDDBClient)
specifier|public
name|void
name|setAmazonDDBClient
parameter_list|(
name|AmazonDynamoDB
name|amazonDDBClient
parameter_list|)
block|{
name|this
operator|.
name|amazonDDBClient
operator|=
name|amazonDDBClient
expr_stmt|;
block|}
DECL|method|getTableName ()
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
comment|/**      * The name of the table currently worked with.      */
DECL|method|setTableName (String tableName)
specifier|public
name|void
name|setTableName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
DECL|method|getOperation ()
specifier|public
name|DdbOperations
name|getOperation
parameter_list|()
block|{
return|return
name|operation
return|;
block|}
comment|/**      * What operation to perform      */
DECL|method|setOperation (DdbOperations operation)
specifier|public
name|void
name|setOperation
parameter_list|(
name|DdbOperations
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
block|}
DECL|method|isConsistentRead ()
specifier|public
name|boolean
name|isConsistentRead
parameter_list|()
block|{
return|return
name|consistentRead
return|;
block|}
comment|/**      * Determines whether or not strong consistency should be enforced when data is read.      */
DECL|method|setConsistentRead (boolean consistentRead)
specifier|public
name|void
name|setConsistentRead
parameter_list|(
name|boolean
name|consistentRead
parameter_list|)
block|{
name|this
operator|.
name|consistentRead
operator|=
name|consistentRead
expr_stmt|;
block|}
DECL|method|getReadCapacity ()
specifier|public
name|Long
name|getReadCapacity
parameter_list|()
block|{
return|return
name|readCapacity
return|;
block|}
comment|/**      * The provisioned throughput to reserve for reading resources from your table      */
DECL|method|setReadCapacity (Long readCapacity)
specifier|public
name|void
name|setReadCapacity
parameter_list|(
name|Long
name|readCapacity
parameter_list|)
block|{
name|this
operator|.
name|readCapacity
operator|=
name|readCapacity
expr_stmt|;
block|}
DECL|method|getWriteCapacity ()
specifier|public
name|Long
name|getWriteCapacity
parameter_list|()
block|{
return|return
name|writeCapacity
return|;
block|}
comment|/**      * The provisioned throughput to reserved for writing resources to your table      */
DECL|method|setWriteCapacity (Long writeCapacity)
specifier|public
name|void
name|setWriteCapacity
parameter_list|(
name|Long
name|writeCapacity
parameter_list|)
block|{
name|this
operator|.
name|writeCapacity
operator|=
name|writeCapacity
expr_stmt|;
block|}
DECL|method|getKeyAttributeName ()
specifier|public
name|String
name|getKeyAttributeName
parameter_list|()
block|{
return|return
name|keyAttributeName
return|;
block|}
comment|/**      * Attribute name when creating table      */
DECL|method|setKeyAttributeName (String keyAttributeName)
specifier|public
name|void
name|setKeyAttributeName
parameter_list|(
name|String
name|keyAttributeName
parameter_list|)
block|{
name|this
operator|.
name|keyAttributeName
operator|=
name|keyAttributeName
expr_stmt|;
block|}
DECL|method|getKeyAttributeType ()
specifier|public
name|String
name|getKeyAttributeType
parameter_list|()
block|{
return|return
name|keyAttributeType
return|;
block|}
comment|/**      * Attribute type when creating table      */
DECL|method|setKeyAttributeType (String keyAttributeType)
specifier|public
name|void
name|setKeyAttributeType
parameter_list|(
name|String
name|keyAttributeType
parameter_list|)
block|{
name|this
operator|.
name|keyAttributeType
operator|=
name|keyAttributeType
expr_stmt|;
block|}
block|}
end_class

end_unit

