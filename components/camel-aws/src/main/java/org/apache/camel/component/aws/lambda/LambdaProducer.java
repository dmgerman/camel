begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.lambda
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|lambda
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|lambda
operator|.
name|AWSLambda
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|lambda
operator|.
name|model
operator|.
name|CreateFunctionRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|lambda
operator|.
name|model
operator|.
name|CreateFunctionResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|lambda
operator|.
name|model
operator|.
name|DeadLetterConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|lambda
operator|.
name|model
operator|.
name|DeleteFunctionRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|lambda
operator|.
name|model
operator|.
name|DeleteFunctionResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|lambda
operator|.
name|model
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|lambda
operator|.
name|model
operator|.
name|FunctionCode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|lambda
operator|.
name|model
operator|.
name|GetFunctionRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|lambda
operator|.
name|model
operator|.
name|GetFunctionResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|lambda
operator|.
name|model
operator|.
name|InvokeRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|lambda
operator|.
name|model
operator|.
name|InvokeResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|lambda
operator|.
name|model
operator|.
name|ListFunctionsResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|lambda
operator|.
name|model
operator|.
name|TracingConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|lambda
operator|.
name|model
operator|.
name|VpcConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|common
operator|.
name|AwsExchangeUtil
operator|.
name|getMessageForResponse
import|;
end_import

begin_comment
comment|/**  * A Producer which sends messages to the Amazon Web Service Lambda<a  * href="https://aws.amazon.com/lambda/">AWS Lambda</a>  */
end_comment

begin_class
DECL|class|LambdaProducer
specifier|public
class|class
name|LambdaProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LambdaProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|LambdaProducer (final Endpoint endpoint)
specifier|public
name|LambdaProducer
parameter_list|(
specifier|final
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (final Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|determineOperation
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
case|case
name|getFunction
case|:
name|getFunction
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getAwsLambdaClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|createFunction
case|:
name|createFunction
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getAwsLambdaClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|deleteFunction
case|:
name|deleteFunction
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getAwsLambdaClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|invokeFunction
case|:
name|invokeFunction
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getAwsLambdaClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|listFunctions
case|:
name|listFunctions
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getAwsLambdaClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported operation"
argument_list|)
throw|;
block|}
block|}
DECL|method|getFunction (AWSLambda lambdaClient, Exchange exchange)
specifier|private
name|void
name|getFunction
parameter_list|(
name|AWSLambda
name|lambdaClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|GetFunctionResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|lambdaClient
operator|.
name|getFunction
argument_list|(
operator|new
name|GetFunctionRequest
argument_list|()
operator|.
name|withFunctionName
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getFunction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getFunction command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteFunction (AWSLambda lambdaClient, Exchange exchange)
specifier|private
name|void
name|deleteFunction
parameter_list|(
name|AWSLambda
name|lambdaClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|DeleteFunctionResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|lambdaClient
operator|.
name|deleteFunction
argument_list|(
operator|new
name|DeleteFunctionRequest
argument_list|()
operator|.
name|withFunctionName
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getFunction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"deleteFunction command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|listFunctions (AWSLambda lambdaClient, Exchange exchange)
specifier|private
name|void
name|listFunctions
parameter_list|(
name|AWSLambda
name|lambdaClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|ListFunctionsResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|lambdaClient
operator|.
name|listFunctions
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"listFunctions command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|invokeFunction (AWSLambda lambdaClient, Exchange exchange)
specifier|private
name|void
name|invokeFunction
parameter_list|(
name|AWSLambda
name|lambdaClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|InvokeResult
name|result
decl_stmt|;
try|try
block|{
name|InvokeRequest
name|request
init|=
operator|new
name|InvokeRequest
argument_list|()
operator|.
name|withFunctionName
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getFunction
argument_list|()
argument_list|)
operator|.
name|withPayload
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|=
name|lambdaClient
operator|.
name|invoke
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"invokeFunction command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|decode
argument_list|(
name|result
operator|.
name|getPayload
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createFunction (AWSLambda lambdaClient, Exchange exchange)
specifier|private
name|void
name|createFunction
parameter_list|(
name|AWSLambda
name|lambdaClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|CreateFunctionResult
name|result
decl_stmt|;
try|try
block|{
name|CreateFunctionRequest
name|request
init|=
operator|new
name|CreateFunctionRequest
argument_list|()
operator|.
name|withFunctionName
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getFunction
argument_list|()
argument_list|)
decl_stmt|;
name|FunctionCode
name|functionCode
init|=
operator|new
name|FunctionCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|S3_BUCKET
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|s3Bucket
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|S3_BUCKET
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|functionCode
operator|.
name|withS3Bucket
argument_list|(
name|s3Bucket
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|S3_KEY
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|s3Key
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|S3_KEY
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|functionCode
operator|.
name|withS3Key
argument_list|(
name|s3Key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|S3_OBJECT_VERSION
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|s3ObjectVersion
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|S3_OBJECT_VERSION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|functionCode
operator|.
name|withS3ObjectVersion
argument_list|(
name|s3ObjectVersion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|ZIP_FILE
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|zipFile
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|ZIP_FILE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|fileLocalPath
init|=
operator|new
name|File
argument_list|(
name|zipFile
argument_list|)
decl_stmt|;
name|FileInputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|fileLocalPath
argument_list|)
decl_stmt|;
name|functionCode
operator|.
name|withZipFile
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|inputStream
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
condition|)
block|{
name|functionCode
operator|.
name|withZipFile
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|ByteBuffer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
operator|||
operator|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|S3_BUCKET
argument_list|)
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|S3_KEY
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|request
operator|.
name|withCode
argument_list|(
name|functionCode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"At least S3 bucket/S3 key or zip file must be specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|ROLE
argument_list|)
argument_list|)
condition|)
block|{
name|request
operator|.
name|withRole
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|ROLE
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Role must be specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|RUNTIME
argument_list|)
argument_list|)
condition|)
block|{
name|request
operator|.
name|withRuntime
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|RUNTIME
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Runtime must be specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|HANDLER
argument_list|)
argument_list|)
condition|)
block|{
name|request
operator|.
name|withHandler
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|HANDLER
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Handler must be specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|DESCRIPTION
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|description
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|DESCRIPTION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|TARGET_ARN
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|targetArn
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|TARGET_ARN
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withDeadLetterConfig
argument_list|(
operator|new
name|DeadLetterConfig
argument_list|()
operator|.
name|withTargetArn
argument_list|(
name|targetArn
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|MEMORY_SIZE
argument_list|)
argument_list|)
condition|)
block|{
name|Integer
name|memorySize
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|MEMORY_SIZE
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withMemorySize
argument_list|(
name|memorySize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|KMS_KEY_ARN
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|kmsKeyARN
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|KMS_KEY_ARN
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withKMSKeyArn
argument_list|(
name|kmsKeyARN
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|PUBLISH
argument_list|)
argument_list|)
condition|)
block|{
name|Boolean
name|publish
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|PUBLISH
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withPublish
argument_list|(
name|publish
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|TIMEOUT
argument_list|)
argument_list|)
condition|)
block|{
name|Integer
name|timeout
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|TIMEOUT
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|TRACING_CONFIG
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|tracingConfigMode
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|TRACING_CONFIG
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withTracingConfig
argument_list|(
operator|new
name|TracingConfig
argument_list|()
operator|.
name|withMode
argument_list|(
name|tracingConfigMode
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|SDK_CLIENT_EXECUTION_TIMEOUT
argument_list|)
argument_list|)
condition|)
block|{
name|Integer
name|timeout
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|SDK_CLIENT_EXECUTION_TIMEOUT
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withSdkClientExecutionTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|SDK_REQUEST_TIMEOUT
argument_list|)
argument_list|)
condition|)
block|{
name|Integer
name|timeout
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|SDK_REQUEST_TIMEOUT
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withSdkRequestTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environmentVariables
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|ENVIRONMENT_VARIABLES
argument_list|,
name|Map
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|environmentVariables
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|withEnvironment
argument_list|(
operator|new
name|Environment
argument_list|()
operator|.
name|withVariables
argument_list|(
name|environmentVariables
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tags
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|TAGS
argument_list|,
name|Map
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tags
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|withTags
argument_list|(
name|tags
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|securityGroupIds
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|SECURITY_GROUP_IDS
argument_list|,
call|(
name|Class
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
call|)
argument_list|(
name|Object
argument_list|)
name|List
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|subnetIds
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|SUBNET_IDS
argument_list|,
call|(
name|Class
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
call|)
argument_list|(
name|Object
argument_list|)
name|List
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|securityGroupIds
operator|!=
literal|null
operator|||
name|subnetIds
operator|!=
literal|null
condition|)
block|{
name|VpcConfig
name|vpcConfig
init|=
operator|new
name|VpcConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|securityGroupIds
operator|!=
literal|null
condition|)
block|{
name|vpcConfig
operator|.
name|withSecurityGroupIds
argument_list|(
name|securityGroupIds
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subnetIds
operator|!=
literal|null
condition|)
block|{
name|vpcConfig
operator|.
name|withSubnetIds
argument_list|(
name|subnetIds
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|withVpcConfig
argument_list|(
name|vpcConfig
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|lambdaClient
operator|.
name|createFunction
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ase
operator|.
name|getErrorCode
argument_list|()
operator|+
literal|" - "
operator|+
name|ase
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"invokeFunction command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|determineOperation (Exchange exchange)
specifier|private
name|LambdaOperations
name|determineOperation
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|LambdaOperations
name|operation
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|LambdaConstants
operator|.
name|OPERATION
argument_list|,
name|LambdaOperations
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
name|operation
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getOperation
argument_list|()
expr_stmt|;
block|}
return|return
name|operation
return|;
block|}
DECL|method|getConfiguration ()
specifier|protected
name|LambdaConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|LambdaEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|LambdaEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
block|}
end_class

end_unit

