begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.component.aws.ddbstream
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|ddbstream
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|dynamodbv2
operator|.
name|model
operator|.
name|Shard
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ShardList
class|class
name|ShardList
block|{
DECL|field|shards
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Shard
argument_list|>
name|shards
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|addAll (Collection<Shard> shards)
name|void
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|Shard
argument_list|>
name|shards
parameter_list|)
block|{
for|for
control|(
name|Shard
name|shard
range|:
name|shards
control|)
block|{
name|add
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|add (Shard shard)
name|void
name|add
parameter_list|(
name|Shard
name|shard
parameter_list|)
block|{
name|shards
operator|.
name|put
argument_list|(
name|shard
operator|.
name|getShardId
argument_list|()
argument_list|,
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|nextAfter (Shard previous)
name|Shard
name|nextAfter
parameter_list|(
name|Shard
name|previous
parameter_list|)
block|{
for|for
control|(
name|Shard
name|shard
range|:
name|shards
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|previous
operator|.
name|getShardId
argument_list|()
operator|.
name|equals
argument_list|(
name|shard
operator|.
name|getParentShardId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|shard
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to find the next shard for "
operator|+
name|previous
operator|+
literal|" in "
operator|+
name|shards
argument_list|)
throw|;
block|}
DECL|method|first ()
name|Shard
name|first
parameter_list|()
block|{
for|for
control|(
name|Shard
name|shard
range|:
name|shards
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|shards
operator|.
name|containsKey
argument_list|(
name|shard
operator|.
name|getParentShardId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|shard
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to find an unparented shard in "
operator|+
name|shards
argument_list|)
throw|;
block|}
comment|/**      * Removes shards that are older than the provided shard.      * Does not remove the provided shard.      * @param removeBefore      */
DECL|method|removeOlderThan (Shard removeBefore)
name|void
name|removeOlderThan
parameter_list|(
name|Shard
name|removeBefore
parameter_list|)
block|{
name|String
name|current
init|=
name|removeBefore
operator|.
name|getParentShardId
argument_list|()
decl_stmt|;
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|Shard
name|s
init|=
name|shards
operator|.
name|remove
argument_list|(
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|current
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
name|s
operator|.
name|getParentShardId
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

