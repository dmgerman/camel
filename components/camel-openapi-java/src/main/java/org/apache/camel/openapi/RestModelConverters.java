begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.openapi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|openapi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|core
operator|.
name|models
operator|.
name|Extension
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|models
operator|.
name|OasDocument
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|models
operator|.
name|OasSchema
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v2
operator|.
name|models
operator|.
name|Oas20Definitions
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v2
operator|.
name|models
operator|.
name|Oas20Document
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v2
operator|.
name|models
operator|.
name|Oas20SchemaDefinition
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v3
operator|.
name|models
operator|.
name|Oas30Document
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v3
operator|.
name|models
operator|.
name|Oas30SchemaDefinition
import|;
end_import

begin_comment
comment|/**  * A Camel extended {@link ModelConverters} where we appending vendor extensions to include the java class  * name of the model classes.  */
end_comment

begin_class
DECL|class|RestModelConverters
specifier|public
class|class
name|RestModelConverters
block|{
DECL|method|readClass (OasDocument oasDocument, Class<?> clazz)
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|OasSchema
argument_list|>
name|readClass
parameter_list|(
name|OasDocument
name|oasDocument
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|oasDocument
operator|instanceof
name|Oas20Document
condition|)
block|{
return|return
name|readClassOas20
argument_list|(
operator|(
name|Oas20Document
operator|)
name|oasDocument
argument_list|,
name|clazz
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|oasDocument
operator|instanceof
name|Oas30Document
condition|)
block|{
return|return
name|readClassOas30
argument_list|(
operator|(
name|Oas30Document
operator|)
name|oasDocument
argument_list|,
name|clazz
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|readClassOas30 (Oas30Document oasDocument, Class<?> clazz)
specifier|private
name|List
argument_list|<
name|?
extends|extends
name|OasSchema
argument_list|>
name|readClassOas30
parameter_list|(
name|Oas30Document
name|oasDocument
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|String
name|name
init|=
name|clazz
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|oasDocument
operator|.
name|components
operator|==
literal|null
condition|)
block|{
name|oasDocument
operator|.
name|components
operator|=
name|oasDocument
operator|.
name|createComponents
argument_list|()
expr_stmt|;
block|}
name|Oas30SchemaDefinition
name|model
init|=
name|oasDocument
operator|.
name|components
operator|.
name|createSchemaDefinition
argument_list|(
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|oasDocument
operator|.
name|components
operator|.
name|addSchemaDefinition
argument_list|(
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|model
operator|.
name|type
operator|=
name|clazz
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
name|Extension
name|extension
init|=
name|model
operator|.
name|createExtension
argument_list|()
decl_stmt|;
name|extension
operator|.
name|name
operator|=
literal|"x-className"
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|value
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|value
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|value
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|extension
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|model
operator|.
name|addExtension
argument_list|(
literal|"x-className"
argument_list|,
name|extension
argument_list|)
expr_stmt|;
return|return
name|oasDocument
operator|.
name|components
operator|.
name|getSchemaDefinitions
argument_list|()
return|;
block|}
DECL|method|readClassOas20 (Oas20Document oasDocument, Class<?> clazz)
specifier|private
name|List
argument_list|<
name|?
extends|extends
name|OasSchema
argument_list|>
name|readClassOas20
parameter_list|(
name|Oas20Document
name|oasDocument
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|String
name|name
init|=
name|clazz
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|oasDocument
operator|.
name|definitions
operator|==
literal|null
condition|)
block|{
name|oasDocument
operator|.
name|definitions
operator|=
name|oasDocument
operator|.
name|createDefinitions
argument_list|()
expr_stmt|;
block|}
name|Oas20Definitions
name|resolved
init|=
name|oasDocument
operator|.
name|definitions
decl_stmt|;
name|Oas20SchemaDefinition
name|model
init|=
name|resolved
operator|.
name|createSchemaDefinition
argument_list|(
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|resolved
operator|.
name|addDefinition
argument_list|(
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|model
operator|.
name|type
operator|=
name|clazz
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
name|Extension
name|extension
init|=
name|model
operator|.
name|createExtension
argument_list|()
decl_stmt|;
name|extension
operator|.
name|name
operator|=
literal|"x-className"
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|value
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|value
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|value
operator|.
name|put
argument_list|(
literal|"format"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|extension
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|model
operator|.
name|addExtension
argument_list|(
literal|"x-className"
argument_list|,
name|extension
argument_list|)
expr_stmt|;
return|return
name|resolved
operator|.
name|getDefinitions
argument_list|()
return|;
block|}
block|}
end_class

end_unit

