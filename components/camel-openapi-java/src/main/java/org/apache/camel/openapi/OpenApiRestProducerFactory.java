begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.openapi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|openapi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestProducerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CollectionStringBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|Library
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|models
operator|.
name|OasDocument
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|models
operator|.
name|OasOperation
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|models
operator|.
name|OasParameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|models
operator|.
name|OasPathItem
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|models
operator|.
name|OasResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v2
operator|.
name|models
operator|.
name|Oas20Document
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v2
operator|.
name|models
operator|.
name|Oas20Operation
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v3
operator|.
name|models
operator|.
name|Oas30Operation
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v3
operator|.
name|models
operator|.
name|Oas30Response
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
import|;
end_import

begin_class
DECL|class|OpenApiRestProducerFactory
specifier|public
class|class
name|OpenApiRestProducerFactory
implements|implements
name|RestProducerFactory
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OpenApiRestProducerFactory
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|createProducer (CamelContext camelContext, String host, String verb, String basePath, String uriTemplate, String queryParameters, String consumes, String produces, RestConfiguration configuration, Map<String, Object> parameters)
specifier|public
name|Producer
name|createProducer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|host
parameter_list|,
name|String
name|verb
parameter_list|,
name|String
name|basePath
parameter_list|,
name|String
name|uriTemplate
parameter_list|,
name|String
name|queryParameters
parameter_list|,
name|String
name|consumes
parameter_list|,
name|String
name|produces
parameter_list|,
name|RestConfiguration
name|configuration
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|apiDoc
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"apiDoc"
argument_list|)
decl_stmt|;
comment|// load json model
if|if
condition|(
name|apiDoc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"OpenApi api-doc must be configured using the apiDoc option"
argument_list|)
throw|;
block|}
name|String
name|path
init|=
name|uriTemplate
operator|!=
literal|null
condition|?
name|uriTemplate
else|:
name|basePath
decl_stmt|;
comment|// path must start with a leading slash
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
name|OasDocument
name|openApi
init|=
name|loadOpenApiModel
argument_list|(
name|camelContext
argument_list|,
name|apiDoc
argument_list|)
decl_stmt|;
name|OasOperation
name|operation
init|=
name|getOpenApiOperation
argument_list|(
name|openApi
argument_list|,
name|verb
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"OpenApi api-doc does not contain operation for "
operator|+
name|verb
operator|+
literal|":"
operator|+
name|path
argument_list|)
throw|;
block|}
comment|// validate if we have the query parameters also
if|if
condition|(
name|queryParameters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|OasParameter
name|param
range|:
name|operation
operator|.
name|parameters
control|)
block|{
if|if
condition|(
literal|"query"
operator|.
name|equals
argument_list|(
name|param
operator|.
name|in
argument_list|)
operator|&&
name|param
operator|.
name|required
condition|)
block|{
comment|// check if we have the required query parameter defined
name|String
name|key
init|=
name|param
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|token
init|=
name|key
operator|+
literal|"="
decl_stmt|;
name|boolean
name|hasQuery
init|=
name|queryParameters
operator|.
name|contains
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasQuery
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"OpenApi api-doc does not contain query parameter "
operator|+
name|key
operator|+
literal|" for "
operator|+
name|verb
operator|+
literal|":"
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|String
name|componentName
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"componentName"
argument_list|)
decl_stmt|;
name|Producer
name|producer
init|=
name|createHttpProducer
argument_list|(
name|camelContext
argument_list|,
name|openApi
argument_list|,
name|operation
argument_list|,
name|host
argument_list|,
name|verb
argument_list|,
name|path
argument_list|,
name|queryParameters
argument_list|,
name|produces
argument_list|,
name|consumes
argument_list|,
name|componentName
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
return|return
name|producer
return|;
block|}
DECL|method|loadOpenApiModel (CamelContext camelContext, String apiDoc)
name|OasDocument
name|loadOpenApiModel
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|apiDoc
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|camelContext
argument_list|,
name|apiDoc
argument_list|)
decl_stmt|;
specifier|final
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|JsonNode
name|node
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loaded openApi api-doc:\n{}"
argument_list|,
name|node
operator|.
name|toPrettyString
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|OasDocument
operator|)
name|Library
operator|.
name|readDocument
argument_list|(
name|node
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getOpenApiOperation (OasDocument openApi, String verb, String path)
specifier|private
name|OasOperation
name|getOpenApiOperation
parameter_list|(
name|OasDocument
name|openApi
parameter_list|,
name|String
name|verb
parameter_list|,
name|String
name|path
parameter_list|)
block|{
comment|// path may include base path so skip that
name|String
name|basePath
init|=
name|RestOpenApiSupport
operator|.
name|getBasePathFromOasDocument
argument_list|(
name|openApi
argument_list|)
decl_stmt|;
if|if
condition|(
name|basePath
operator|!=
literal|null
operator|&&
name|path
operator|.
name|startsWith
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|basePath
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|OasPathItem
name|modelPath
init|=
name|openApi
operator|.
name|paths
operator|.
name|getItem
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|modelPath
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// get,put,post,head,delete,patch,options
name|OasOperation
name|op
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"get"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|op
operator|=
name|modelPath
operator|.
name|get
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"put"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|op
operator|=
name|modelPath
operator|.
name|put
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"post"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|op
operator|=
name|modelPath
operator|.
name|post
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"head"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|op
operator|=
name|modelPath
operator|.
name|head
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"delete"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|op
operator|=
name|modelPath
operator|.
name|delete
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"patch"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|op
operator|=
name|modelPath
operator|.
name|patch
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"options"
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|op
operator|=
name|modelPath
operator|.
name|options
expr_stmt|;
block|}
return|return
name|op
return|;
block|}
DECL|method|createHttpProducer (CamelContext camelContext, OasDocument openApi, OasOperation operation, String host, String verb, String path, String queryParameters, String consumes, String produces, String componentName, Map<String, Object> parameters)
specifier|private
name|Producer
name|createHttpProducer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|OasDocument
name|openApi
parameter_list|,
name|OasOperation
name|operation
parameter_list|,
name|String
name|host
parameter_list|,
name|String
name|verb
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|queryParameters
parameter_list|,
name|String
name|consumes
parameter_list|,
name|String
name|produces
parameter_list|,
name|String
name|componentName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using OpenApi operation: {} with {} {}"
argument_list|,
name|operation
argument_list|,
name|verb
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|RestProducerFactory
name|factory
init|=
operator|(
name|RestProducerFactory
operator|)
name|parameters
operator|.
name|remove
argument_list|(
literal|"restProducerFactory"
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using RestProducerFactory: {}"
argument_list|,
name|factory
argument_list|)
expr_stmt|;
if|if
condition|(
name|produces
operator|==
literal|null
condition|)
block|{
name|CollectionStringBuffer
name|csb
init|=
operator|new
name|CollectionStringBuffer
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|operation
operator|instanceof
name|Oas20Operation
condition|)
block|{
name|list
operator|=
operator|(
operator|(
name|Oas20Operation
operator|)
name|operation
operator|)
operator|.
name|produces
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|instanceof
name|Oas30Operation
condition|)
block|{
name|Oas30Operation
name|oas30Operation
init|=
operator|(
name|Oas30Operation
operator|)
name|operation
decl_stmt|;
for|for
control|(
name|OasResponse
name|response
range|:
name|oas30Operation
operator|.
name|responses
operator|.
name|getResponses
argument_list|()
control|)
block|{
name|Oas30Response
name|oas30Response
init|=
operator|(
name|Oas30Response
operator|)
name|response
decl_stmt|;
for|for
control|(
name|String
name|ct
range|:
name|oas30Response
operator|.
name|content
operator|.
name|keySet
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|ct
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|openApi
operator|instanceof
name|Oas20Document
condition|)
block|{
name|list
operator|=
operator|(
operator|(
name|Oas20Document
operator|)
name|openApi
operator|)
operator|.
name|produces
expr_stmt|;
block|}
block|}
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|list
control|)
block|{
name|csb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|produces
operator|=
name|csb
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|csb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|consumes
operator|==
literal|null
condition|)
block|{
name|CollectionStringBuffer
name|csb
init|=
operator|new
name|CollectionStringBuffer
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|operation
operator|instanceof
name|Oas20Operation
condition|)
block|{
name|list
operator|=
operator|(
operator|(
name|Oas20Operation
operator|)
name|operation
operator|)
operator|.
name|consumes
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|instanceof
name|Oas30Operation
condition|)
block|{
name|Oas30Operation
name|oas30Operation
init|=
operator|(
name|Oas30Operation
operator|)
name|operation
decl_stmt|;
if|if
condition|(
name|oas30Operation
operator|.
name|requestBody
operator|!=
literal|null
operator|&&
name|oas30Operation
operator|.
name|requestBody
operator|.
name|content
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|ct
range|:
name|oas30Operation
operator|.
name|requestBody
operator|.
name|content
operator|.
name|keySet
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|ct
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|openApi
operator|instanceof
name|Oas20Document
condition|)
block|{
name|list
operator|=
operator|(
operator|(
name|Oas20Document
operator|)
name|openApi
operator|)
operator|.
name|consumes
expr_stmt|;
block|}
block|}
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|list
control|)
block|{
name|csb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|consumes
operator|=
name|csb
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|csb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|String
name|basePath
init|=
literal|null
decl_stmt|;
name|String
name|uriTemplate
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
comment|//if no explicit host has been configured then use host and base path from the openApi api-doc
name|host
operator|=
name|RestOpenApiSupport
operator|.
name|getHostFromOasDocument
argument_list|(
name|openApi
argument_list|)
expr_stmt|;
name|basePath
operator|=
name|RestOpenApiSupport
operator|.
name|getBasePathFromOasDocument
argument_list|(
name|openApi
argument_list|)
expr_stmt|;
name|uriTemplate
operator|=
name|path
expr_stmt|;
block|}
else|else
block|{
comment|// path includes also uri template
name|basePath
operator|=
name|path
expr_stmt|;
name|uriTemplate
operator|=
literal|null
expr_stmt|;
block|}
name|RestConfiguration
name|config
init|=
name|camelContext
operator|.
name|getRestConfiguration
argument_list|(
name|componentName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|factory
operator|.
name|createProducer
argument_list|(
name|camelContext
argument_list|,
name|host
argument_list|,
name|verb
argument_list|,
name|basePath
argument_list|,
name|uriTemplate
argument_list|,
name|queryParameters
argument_list|,
name|consumes
argument_list|,
name|produces
argument_list|,
name|config
argument_list|,
name|parameters
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot find RestProducerFactory in Registry or as a Component to use"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

