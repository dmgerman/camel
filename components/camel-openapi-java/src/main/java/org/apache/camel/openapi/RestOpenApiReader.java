begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.openapi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|openapi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|core
operator|.
name|models
operator|.
name|ExtensibleNode
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|core
operator|.
name|models
operator|.
name|Extension
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|core
operator|.
name|models
operator|.
name|common
operator|.
name|AuthorizationCodeOAuthFlow
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|core
operator|.
name|models
operator|.
name|common
operator|.
name|ImplicitOAuthFlow
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|core
operator|.
name|models
operator|.
name|common
operator|.
name|OAuthFlow
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|core
operator|.
name|models
operator|.
name|common
operator|.
name|SecurityRequirement
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|models
operator|.
name|OasDocument
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|models
operator|.
name|OasOperation
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|models
operator|.
name|OasParameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|models
operator|.
name|OasPathItem
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|models
operator|.
name|OasSchema
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v2
operator|.
name|models
operator|.
name|Oas20Document
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v2
operator|.
name|models
operator|.
name|Oas20Header
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v2
operator|.
name|models
operator|.
name|Oas20Items
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v2
operator|.
name|models
operator|.
name|Oas20Operation
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v2
operator|.
name|models
operator|.
name|Oas20Parameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v2
operator|.
name|models
operator|.
name|Oas20Response
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v2
operator|.
name|models
operator|.
name|Oas20Schema
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v2
operator|.
name|models
operator|.
name|Oas20SchemaDefinition
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v2
operator|.
name|models
operator|.
name|Oas20SecurityScheme
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v3
operator|.
name|models
operator|.
name|Oas30Document
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v3
operator|.
name|models
operator|.
name|Oas30Header
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v3
operator|.
name|models
operator|.
name|Oas30MediaType
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v3
operator|.
name|models
operator|.
name|Oas30Operation
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v3
operator|.
name|models
operator|.
name|Oas30Parameter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v3
operator|.
name|models
operator|.
name|Oas30Response
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v3
operator|.
name|models
operator|.
name|Oas30Schema
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v3
operator|.
name|models
operator|.
name|Oas30SchemaDefinition
import|;
end_import

begin_import
import|import
name|io
operator|.
name|apicurio
operator|.
name|datamodels
operator|.
name|openapi
operator|.
name|v3
operator|.
name|models
operator|.
name|Oas30SecurityScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestOperationParamDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestOperationResponseHeaderDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestOperationResponseMsgDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestParamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestPropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestSecuritiesDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestSecurityApiKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestSecurityBasicAuth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestSecurityDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestSecurityOAuth2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|SecurityDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|VerbDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
operator|.
name|publicLookup
import|;
end_import

begin_comment
comment|/**  * A Camel REST-DSL openApi reader that parse the rest-dsl into a openApi model representation.  *<p/>  * This reader supports the<a href="https://www.openapis.org/">OpenApi Specification 2.0 and 3.0</a>  */
end_comment

begin_class
DECL|class|RestOpenApiReader
specifier|public
class|class
name|RestOpenApiReader
block|{
comment|/**      * Read the REST-DSL definition's and parse that as a OpenApi model representation      *      * @param rests the rest-dsl      * @param route optional route path to filter the rest-dsl to only include from the chose route      * @param config the openApi configuration      * @param classResolver class resolver to use      * @return the openApi model      * @throws ClassNotFoundException      */
DECL|method|read (List<RestDefinition> rests, String route, BeanConfig config, String camelContextId, ClassResolver classResolver)
specifier|public
name|OasDocument
name|read
parameter_list|(
name|List
argument_list|<
name|RestDefinition
argument_list|>
name|rests
parameter_list|,
name|String
name|route
parameter_list|,
name|BeanConfig
name|config
parameter_list|,
name|String
name|camelContextId
parameter_list|,
name|ClassResolver
name|classResolver
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|OasDocument
name|openApi
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|isOpenApi3
argument_list|()
condition|)
block|{
name|openApi
operator|=
operator|new
name|Oas30Document
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|openApi
operator|=
operator|new
name|Oas20Document
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|RestDefinition
name|rest
range|:
name|rests
control|)
block|{
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|route
argument_list|)
operator|&&
operator|!
name|route
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// filter by route
if|if
condition|(
operator|!
name|rest
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|route
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|parse
argument_list|(
name|openApi
argument_list|,
name|rest
argument_list|,
name|camelContextId
argument_list|,
name|classResolver
argument_list|)
expr_stmt|;
block|}
comment|// configure before returning
name|openApi
operator|=
name|config
operator|.
name|configure
argument_list|(
name|openApi
argument_list|)
expr_stmt|;
return|return
name|openApi
return|;
block|}
DECL|method|parse (OasDocument openApi, RestDefinition rest, String camelContextId, ClassResolver classResolver)
specifier|private
name|void
name|parse
parameter_list|(
name|OasDocument
name|openApi
parameter_list|,
name|RestDefinition
name|rest
parameter_list|,
name|String
name|camelContextId
parameter_list|,
name|ClassResolver
name|classResolver
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|List
argument_list|<
name|VerbDefinition
argument_list|>
name|verbs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rest
operator|.
name|getVerbs
argument_list|()
argument_list|)
decl_stmt|;
comment|// must sort the verbs by uri so we group them together when an uri has multiple operations
name|Collections
operator|.
name|sort
argument_list|(
name|verbs
argument_list|,
operator|new
name|VerbOrdering
argument_list|()
argument_list|)
expr_stmt|;
comment|// we need to group the operations within the same tag, so use the path as default if not
comment|// configured
name|String
name|pathAsTag
init|=
name|rest
operator|.
name|getTag
argument_list|()
operator|!=
literal|null
condition|?
name|rest
operator|.
name|getTag
argument_list|()
else|:
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|rest
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|openApi
operator|instanceof
name|Oas20Document
condition|)
block|{
name|parseOas20
argument_list|(
operator|(
name|Oas20Document
operator|)
name|openApi
argument_list|,
name|rest
argument_list|,
name|pathAsTag
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|openApi
operator|instanceof
name|Oas30Document
condition|)
block|{
name|parseOas30
argument_list|(
operator|(
name|Oas30Document
operator|)
name|openApi
argument_list|,
name|rest
argument_list|,
name|pathAsTag
argument_list|)
expr_stmt|;
block|}
comment|// gather all types in use
name|Set
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|VerbDefinition
name|verb
range|:
name|verbs
control|)
block|{
comment|// check if the Verb Definition must be excluded from documentation
name|String
name|apiDocs
decl_stmt|;
if|if
condition|(
name|verb
operator|.
name|getApiDocs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|apiDocs
operator|=
name|verb
operator|.
name|getApiDocs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// fallback to option on rest
name|apiDocs
operator|=
name|rest
operator|.
name|getApiDocs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|apiDocs
operator|!=
literal|null
operator|&&
operator|!
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|apiDocs
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|type
init|=
name|verb
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|)
block|{
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|type
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|type
operator|=
name|verb
operator|.
name|getOutType
argument_list|()
expr_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|)
block|{
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|type
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
comment|// there can also be types in response messages
if|if
condition|(
name|verb
operator|.
name|getResponseMsgs
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RestOperationResponseMsgDefinition
name|def
range|:
name|verb
operator|.
name|getResponseMsgs
argument_list|()
control|)
block|{
name|type
operator|=
name|def
operator|.
name|getResponseModel
argument_list|()
expr_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|)
block|{
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|type
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// use annotation scanner to find models (annotated classes)
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|classResolver
operator|.
name|resolveMandatoryClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|appendModels
argument_list|(
name|clazz
argument_list|,
name|openApi
argument_list|)
expr_stmt|;
block|}
name|doParseVerbs
argument_list|(
name|openApi
argument_list|,
name|rest
argument_list|,
name|camelContextId
argument_list|,
name|verbs
argument_list|,
name|pathAsTag
argument_list|)
expr_stmt|;
block|}
DECL|method|parseOas30 (Oas30Document openApi, RestDefinition rest, String pathAsTag)
specifier|private
name|void
name|parseOas30
parameter_list|(
name|Oas30Document
name|openApi
parameter_list|,
name|RestDefinition
name|rest
parameter_list|,
name|String
name|pathAsTag
parameter_list|)
block|{
name|String
name|summary
init|=
name|rest
operator|.
name|getDescriptionText
argument_list|()
decl_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|pathAsTag
argument_list|)
condition|)
block|{
comment|// add rest as tag
name|openApi
operator|.
name|addTag
argument_list|(
name|pathAsTag
argument_list|,
name|summary
argument_list|)
expr_stmt|;
block|}
comment|// setup security definitions
name|RestSecuritiesDefinition
name|sd
init|=
name|rest
operator|.
name|getSecurityDefinitions
argument_list|()
decl_stmt|;
if|if
condition|(
name|sd
operator|!=
literal|null
operator|&&
name|sd
operator|.
name|getSecurityDefinitions
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|&&
name|openApi
operator|.
name|components
operator|==
literal|null
condition|)
block|{
name|openApi
operator|.
name|components
operator|=
name|openApi
operator|.
name|createComponents
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sd
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RestSecurityDefinition
name|def
range|:
name|sd
operator|.
name|getSecurityDefinitions
argument_list|()
control|)
block|{
if|if
condition|(
name|def
operator|instanceof
name|RestSecurityBasicAuth
condition|)
block|{
name|Oas30SecurityScheme
name|auth
init|=
name|openApi
operator|.
name|components
operator|.
name|createSecurityScheme
argument_list|(
name|def
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|auth
operator|.
name|type
operator|=
literal|"http"
expr_stmt|;
name|auth
operator|.
name|scheme
operator|=
literal|"basic"
expr_stmt|;
name|auth
operator|.
name|description
operator|=
name|def
operator|.
name|getDescription
argument_list|()
expr_stmt|;
name|openApi
operator|.
name|components
operator|.
name|addSecurityScheme
argument_list|(
literal|"BasicAuth"
argument_list|,
name|auth
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|def
operator|instanceof
name|RestSecurityApiKey
condition|)
block|{
name|RestSecurityApiKey
name|rs
init|=
operator|(
name|RestSecurityApiKey
operator|)
name|def
decl_stmt|;
name|Oas30SecurityScheme
name|auth
init|=
name|openApi
operator|.
name|components
operator|.
name|createSecurityScheme
argument_list|(
name|def
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|auth
operator|.
name|type
operator|=
literal|"apiKey"
expr_stmt|;
name|auth
operator|.
name|description
operator|=
name|rs
operator|.
name|getDescription
argument_list|()
expr_stmt|;
name|auth
operator|.
name|name
operator|=
name|rs
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|getInHeader
argument_list|()
operator|!=
literal|null
operator|&&
name|rs
operator|.
name|getInHeader
argument_list|()
condition|)
block|{
name|auth
operator|.
name|in
operator|=
literal|"header"
expr_stmt|;
block|}
else|else
block|{
name|auth
operator|.
name|in
operator|=
literal|"query"
expr_stmt|;
block|}
name|openApi
operator|.
name|components
operator|.
name|addSecurityScheme
argument_list|(
name|def
operator|.
name|getKey
argument_list|()
argument_list|,
name|auth
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|def
operator|instanceof
name|RestSecurityOAuth2
condition|)
block|{
name|RestSecurityOAuth2
name|rs
init|=
operator|(
name|RestSecurityOAuth2
operator|)
name|def
decl_stmt|;
name|Oas30SecurityScheme
name|auth
init|=
name|openApi
operator|.
name|components
operator|.
name|createSecurityScheme
argument_list|(
name|def
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|auth
operator|.
name|type
operator|=
literal|"oauth2"
expr_stmt|;
name|auth
operator|.
name|description
operator|=
name|rs
operator|.
name|getDescription
argument_list|()
expr_stmt|;
name|String
name|flow
init|=
name|rs
operator|.
name|getFlow
argument_list|()
decl_stmt|;
if|if
condition|(
name|flow
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|rs
operator|.
name|getAuthorizationUrl
argument_list|()
operator|!=
literal|null
operator|&&
name|rs
operator|.
name|getTokenUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|flow
operator|=
literal|"accessCode"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rs
operator|.
name|getTokenUrl
argument_list|()
operator|==
literal|null
operator|&&
name|rs
operator|.
name|getAuthorizationUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|flow
operator|=
literal|"implicit"
expr_stmt|;
block|}
block|}
name|OAuthFlow
name|oauthFlow
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|auth
operator|.
name|flows
operator|==
literal|null
condition|)
block|{
name|auth
operator|.
name|flows
operator|=
name|auth
operator|.
name|createOAuthFlows
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|flow
operator|.
name|equals
argument_list|(
literal|"accessCode"
argument_list|)
condition|)
block|{
name|oauthFlow
operator|=
name|auth
operator|.
name|flows
operator|.
name|createAuthorizationCodeOAuthFlow
argument_list|()
expr_stmt|;
name|auth
operator|.
name|flows
operator|.
name|authorizationCode
operator|=
operator|(
name|AuthorizationCodeOAuthFlow
operator|)
name|oauthFlow
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flow
operator|.
name|equals
argument_list|(
literal|"implicit"
argument_list|)
condition|)
block|{
name|oauthFlow
operator|=
name|auth
operator|.
name|flows
operator|.
name|createImplicitOAuthFlow
argument_list|()
expr_stmt|;
name|auth
operator|.
name|flows
operator|.
name|implicit
operator|=
operator|(
name|ImplicitOAuthFlow
operator|)
name|oauthFlow
expr_stmt|;
block|}
name|oauthFlow
operator|.
name|authorizationUrl
operator|=
name|rs
operator|.
name|getAuthorizationUrl
argument_list|()
expr_stmt|;
name|oauthFlow
operator|.
name|tokenUrl
operator|=
name|rs
operator|.
name|getTokenUrl
argument_list|()
expr_stmt|;
for|for
control|(
name|RestPropertyDefinition
name|scope
range|:
name|rs
operator|.
name|getScopes
argument_list|()
control|)
block|{
name|oauthFlow
operator|.
name|addScope
argument_list|(
name|scope
operator|.
name|getKey
argument_list|()
argument_list|,
name|scope
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|openApi
operator|.
name|components
operator|.
name|addSecurityScheme
argument_list|(
name|def
operator|.
name|getKey
argument_list|()
argument_list|,
name|auth
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|parseOas20 (Oas20Document openApi, RestDefinition rest, String pathAsTag)
specifier|private
name|void
name|parseOas20
parameter_list|(
name|Oas20Document
name|openApi
parameter_list|,
name|RestDefinition
name|rest
parameter_list|,
name|String
name|pathAsTag
parameter_list|)
block|{
name|String
name|summary
init|=
name|rest
operator|.
name|getDescriptionText
argument_list|()
decl_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|pathAsTag
argument_list|)
condition|)
block|{
comment|// add rest as tag
name|openApi
operator|.
name|addTag
argument_list|(
name|pathAsTag
argument_list|,
name|summary
argument_list|)
expr_stmt|;
block|}
comment|// setup security definitions
name|RestSecuritiesDefinition
name|sd
init|=
name|rest
operator|.
name|getSecurityDefinitions
argument_list|()
decl_stmt|;
if|if
condition|(
name|sd
operator|!=
literal|null
operator|&&
name|sd
operator|.
name|getSecurityDefinitions
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|&&
name|openApi
operator|.
name|securityDefinitions
operator|==
literal|null
condition|)
block|{
name|openApi
operator|.
name|securityDefinitions
operator|=
name|openApi
operator|.
name|createSecurityDefinitions
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sd
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RestSecurityDefinition
name|def
range|:
name|sd
operator|.
name|getSecurityDefinitions
argument_list|()
control|)
block|{
if|if
condition|(
name|def
operator|instanceof
name|RestSecurityBasicAuth
condition|)
block|{
name|Oas20SecurityScheme
name|auth
init|=
name|openApi
operator|.
name|securityDefinitions
operator|.
name|createSecurityScheme
argument_list|(
name|def
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|auth
operator|.
name|type
operator|=
literal|"basicAuth"
expr_stmt|;
name|auth
operator|.
name|description
operator|=
name|def
operator|.
name|getDescription
argument_list|()
expr_stmt|;
name|openApi
operator|.
name|securityDefinitions
operator|.
name|addSecurityScheme
argument_list|(
literal|"BasicAuth"
argument_list|,
name|auth
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|def
operator|instanceof
name|RestSecurityApiKey
condition|)
block|{
name|RestSecurityApiKey
name|rs
init|=
operator|(
name|RestSecurityApiKey
operator|)
name|def
decl_stmt|;
name|Oas20SecurityScheme
name|auth
init|=
name|openApi
operator|.
name|securityDefinitions
operator|.
name|createSecurityScheme
argument_list|(
name|def
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|auth
operator|.
name|type
operator|=
literal|"apiKey"
expr_stmt|;
name|auth
operator|.
name|description
operator|=
name|rs
operator|.
name|getDescription
argument_list|()
expr_stmt|;
name|auth
operator|.
name|name
operator|=
name|rs
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|getInHeader
argument_list|()
operator|!=
literal|null
operator|&&
name|rs
operator|.
name|getInHeader
argument_list|()
condition|)
block|{
name|auth
operator|.
name|in
operator|=
literal|"header"
expr_stmt|;
block|}
else|else
block|{
name|auth
operator|.
name|in
operator|=
literal|"query"
expr_stmt|;
block|}
name|openApi
operator|.
name|securityDefinitions
operator|.
name|addSecurityScheme
argument_list|(
name|def
operator|.
name|getKey
argument_list|()
argument_list|,
name|auth
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|def
operator|instanceof
name|RestSecurityOAuth2
condition|)
block|{
name|RestSecurityOAuth2
name|rs
init|=
operator|(
name|RestSecurityOAuth2
operator|)
name|def
decl_stmt|;
name|Oas20SecurityScheme
name|auth
init|=
name|openApi
operator|.
name|securityDefinitions
operator|.
name|createSecurityScheme
argument_list|(
name|def
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|auth
operator|.
name|type
operator|=
literal|"oauth2"
expr_stmt|;
name|auth
operator|.
name|description
operator|=
name|rs
operator|.
name|getDescription
argument_list|()
expr_stmt|;
name|String
name|flow
init|=
name|rs
operator|.
name|getFlow
argument_list|()
decl_stmt|;
if|if
condition|(
name|flow
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|rs
operator|.
name|getAuthorizationUrl
argument_list|()
operator|!=
literal|null
operator|&&
name|rs
operator|.
name|getTokenUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|flow
operator|=
literal|"accessCode"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rs
operator|.
name|getTokenUrl
argument_list|()
operator|==
literal|null
operator|&&
name|rs
operator|.
name|getAuthorizationUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|flow
operator|=
literal|"implicit"
expr_stmt|;
block|}
block|}
name|auth
operator|.
name|flow
operator|=
name|flow
expr_stmt|;
name|auth
operator|.
name|authorizationUrl
operator|=
name|rs
operator|.
name|getAuthorizationUrl
argument_list|()
expr_stmt|;
name|auth
operator|.
name|tokenUrl
operator|=
name|rs
operator|.
name|getTokenUrl
argument_list|()
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|getScopes
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|&&
name|auth
operator|.
name|scopes
operator|==
literal|null
condition|)
block|{
name|auth
operator|.
name|scopes
operator|=
name|auth
operator|.
name|createScopes
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|RestPropertyDefinition
name|scope
range|:
name|rs
operator|.
name|getScopes
argument_list|()
control|)
block|{
name|auth
operator|.
name|scopes
operator|.
name|addScope
argument_list|(
name|scope
operator|.
name|getKey
argument_list|()
argument_list|,
name|scope
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|openApi
operator|.
name|securityDefinitions
operator|==
literal|null
condition|)
block|{
name|openApi
operator|.
name|securityDefinitions
operator|=
name|openApi
operator|.
name|createSecurityDefinitions
argument_list|()
expr_stmt|;
block|}
name|openApi
operator|.
name|securityDefinitions
operator|.
name|addSecurityScheme
argument_list|(
name|def
operator|.
name|getKey
argument_list|()
argument_list|,
name|auth
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|doParseVerbs (OasDocument openApi, RestDefinition rest, String camelContextId, List<VerbDefinition> verbs, String pathAsTag)
specifier|private
name|void
name|doParseVerbs
parameter_list|(
name|OasDocument
name|openApi
parameter_list|,
name|RestDefinition
name|rest
parameter_list|,
name|String
name|camelContextId
parameter_list|,
name|List
argument_list|<
name|VerbDefinition
argument_list|>
name|verbs
parameter_list|,
name|String
name|pathAsTag
parameter_list|)
block|{
comment|// used during gathering of apis
name|String
name|basePath
init|=
name|rest
operator|.
name|getPath
argument_list|()
decl_stmt|;
for|for
control|(
name|VerbDefinition
name|verb
range|:
name|verbs
control|)
block|{
comment|// check if the Verb Definition must be excluded from documentation
name|String
name|apiDocs
decl_stmt|;
if|if
condition|(
name|verb
operator|.
name|getApiDocs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|apiDocs
operator|=
name|verb
operator|.
name|getApiDocs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// fallback to option on rest
name|apiDocs
operator|=
name|rest
operator|.
name|getApiDocs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|apiDocs
operator|!=
literal|null
operator|&&
operator|!
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|apiDocs
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// the method must be in lower case
name|String
name|method
init|=
name|verb
operator|.
name|asVerb
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
comment|// operation path is a key
name|String
name|opPath
init|=
name|OpenApiHelper
operator|.
name|buildUrl
argument_list|(
name|basePath
argument_list|,
name|verb
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|openApi
operator|.
name|paths
operator|==
literal|null
condition|)
block|{
name|openApi
operator|.
name|paths
operator|=
name|openApi
operator|.
name|createPaths
argument_list|()
expr_stmt|;
block|}
name|OasPathItem
name|path
init|=
name|openApi
operator|.
name|paths
operator|.
name|getPathItem
argument_list|(
name|opPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|openApi
operator|.
name|paths
operator|.
name|createPathItem
argument_list|(
name|opPath
argument_list|)
expr_stmt|;
block|}
name|OasOperation
name|op
init|=
operator|(
name|OasOperation
operator|)
name|path
operator|.
name|createOperation
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|pathAsTag
argument_list|)
condition|)
block|{
comment|// group in the same tag
if|if
condition|(
name|op
operator|.
name|tags
operator|==
literal|null
condition|)
block|{
name|op
operator|.
name|tags
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|op
operator|.
name|tags
operator|.
name|add
argument_list|(
name|pathAsTag
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|routeId
init|=
name|verb
operator|.
name|getRouteId
argument_list|()
decl_stmt|;
specifier|final
name|String
name|operationId
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|rest
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
name|op
operator|.
name|operationId
operator|=
name|operationId
expr_stmt|;
comment|// add id as vendor extensions
name|Extension
name|extension
init|=
name|op
operator|.
name|createExtension
argument_list|()
decl_stmt|;
name|extension
operator|.
name|name
operator|=
literal|"x-camelContextId"
expr_stmt|;
name|extension
operator|.
name|value
operator|=
name|camelContextId
expr_stmt|;
name|op
operator|.
name|addExtension
argument_list|(
name|extension
operator|.
name|name
argument_list|,
name|extension
argument_list|)
expr_stmt|;
name|extension
operator|=
name|op
operator|.
name|createExtension
argument_list|()
expr_stmt|;
name|extension
operator|.
name|name
operator|=
literal|"x-routeId"
expr_stmt|;
name|extension
operator|.
name|value
operator|=
name|routeId
expr_stmt|;
name|op
operator|.
name|addExtension
argument_list|(
name|extension
operator|.
name|name
argument_list|,
name|extension
argument_list|)
expr_stmt|;
name|path
operator|=
name|setPathOperation
argument_list|(
name|path
argument_list|,
name|op
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|String
name|consumes
init|=
name|verb
operator|.
name|getConsumes
argument_list|()
operator|!=
literal|null
condition|?
name|verb
operator|.
name|getConsumes
argument_list|()
else|:
name|rest
operator|.
name|getConsumes
argument_list|()
decl_stmt|;
name|String
name|produces
init|=
name|verb
operator|.
name|getProduces
argument_list|()
operator|!=
literal|null
condition|?
name|verb
operator|.
name|getProduces
argument_list|()
else|:
name|rest
operator|.
name|getProduces
argument_list|()
decl_stmt|;
if|if
condition|(
name|openApi
operator|instanceof
name|Oas20Document
condition|)
block|{
name|doParseVerbOas20
argument_list|(
operator|(
name|Oas20Document
operator|)
name|openApi
argument_list|,
name|verb
argument_list|,
operator|(
name|Oas20Operation
operator|)
name|op
argument_list|,
name|consumes
argument_list|,
name|produces
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|openApi
operator|instanceof
name|Oas30Document
condition|)
block|{
name|doParseVerbOas30
argument_list|(
operator|(
name|Oas30Document
operator|)
name|openApi
argument_list|,
name|verb
argument_list|,
operator|(
name|Oas30Operation
operator|)
name|op
argument_list|,
name|consumes
argument_list|,
name|produces
argument_list|)
expr_stmt|;
block|}
comment|// enrich with configured response messages from the rest-dsl
name|doParseResponseMessages
argument_list|(
name|openApi
argument_list|,
name|verb
argument_list|,
name|op
argument_list|,
name|produces
argument_list|)
expr_stmt|;
comment|// add path
name|openApi
operator|.
name|paths
operator|.
name|addPathItem
argument_list|(
name|opPath
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doParseVerbOas30 (Oas30Document openApi, VerbDefinition verb, Oas30Operation op, String consumes, String produces)
specifier|private
name|void
name|doParseVerbOas30
parameter_list|(
name|Oas30Document
name|openApi
parameter_list|,
name|VerbDefinition
name|verb
parameter_list|,
name|Oas30Operation
name|op
parameter_list|,
name|String
name|consumes
parameter_list|,
name|String
name|produces
parameter_list|)
block|{
if|if
condition|(
name|verb
operator|.
name|getDescriptionText
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|op
operator|.
name|summary
operator|=
name|verb
operator|.
name|getDescriptionText
argument_list|()
expr_stmt|;
block|}
comment|// security
for|for
control|(
name|SecurityDefinition
name|sd
range|:
name|verb
operator|.
name|getSecurity
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|scopes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|sd
operator|.
name|getScopes
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|scope
range|:
name|ObjectHelper
operator|.
name|createIterable
argument_list|(
name|sd
operator|.
name|getScopes
argument_list|()
argument_list|)
control|)
block|{
name|scopes
operator|.
name|add
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
block|}
name|SecurityRequirement
name|securityRequirement
init|=
name|op
operator|.
name|createSecurityRequirement
argument_list|()
decl_stmt|;
name|securityRequirement
operator|.
name|addSecurityRequirementItem
argument_list|(
name|sd
operator|.
name|getKey
argument_list|()
argument_list|,
name|scopes
argument_list|)
expr_stmt|;
name|op
operator|.
name|addSecurityRequirement
argument_list|(
name|securityRequirement
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RestOperationParamDefinition
name|param
range|:
name|verb
operator|.
name|getParams
argument_list|()
control|)
block|{
name|OasParameter
name|parameter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RestParamType
operator|.
name|body
argument_list|)
condition|)
block|{
name|parameter
operator|=
name|op
operator|.
name|createParameter
argument_list|()
expr_stmt|;
name|parameter
operator|.
name|in
operator|=
literal|"body"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RestParamType
operator|.
name|formData
argument_list|)
condition|)
block|{
name|parameter
operator|=
name|op
operator|.
name|createParameter
argument_list|()
expr_stmt|;
name|parameter
operator|.
name|in
operator|=
literal|"formData"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RestParamType
operator|.
name|header
argument_list|)
condition|)
block|{
name|parameter
operator|=
name|op
operator|.
name|createParameter
argument_list|()
expr_stmt|;
name|parameter
operator|.
name|in
operator|=
literal|"header"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RestParamType
operator|.
name|path
argument_list|)
condition|)
block|{
name|parameter
operator|=
name|op
operator|.
name|createParameter
argument_list|()
expr_stmt|;
name|parameter
operator|.
name|in
operator|=
literal|"path"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RestParamType
operator|.
name|query
argument_list|)
condition|)
block|{
name|parameter
operator|=
name|op
operator|.
name|createParameter
argument_list|()
expr_stmt|;
name|parameter
operator|.
name|in
operator|=
literal|"query"
expr_stmt|;
block|}
if|if
condition|(
name|parameter
operator|!=
literal|null
condition|)
block|{
name|parameter
operator|.
name|name
operator|=
name|param
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|param
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|parameter
operator|.
name|description
operator|=
name|param
operator|.
name|getDescription
argument_list|()
expr_stmt|;
block|}
name|parameter
operator|.
name|required
operator|=
name|param
operator|.
name|getRequired
argument_list|()
expr_stmt|;
comment|// set type on parameter
if|if
condition|(
operator|!
name|parameter
operator|.
name|in
operator|.
name|equals
argument_list|(
literal|"body"
argument_list|)
condition|)
block|{
name|Oas30Parameter
name|parameter30
init|=
operator|(
name|Oas30Parameter
operator|)
name|parameter
decl_stmt|;
name|Oas30Schema
name|oas30Schema
init|=
literal|null
decl_stmt|;
specifier|final
name|boolean
name|isArray
init|=
name|param
operator|.
name|getDataType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"array"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|allowableValues
init|=
name|param
operator|.
name|getAllowableValues
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|hasAllowableValues
init|=
name|allowableValues
operator|!=
literal|null
operator|&&
operator|!
name|allowableValues
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|getDataType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|parameter30
operator|.
name|schema
operator|=
name|parameter30
operator|.
name|createSchema
argument_list|()
expr_stmt|;
name|oas30Schema
operator|=
operator|(
name|Oas30Schema
operator|)
name|parameter30
operator|.
name|schema
expr_stmt|;
name|oas30Schema
operator|.
name|type
operator|=
name|param
operator|.
name|getDataType
argument_list|()
expr_stmt|;
if|if
condition|(
name|param
operator|.
name|getDataFormat
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|oas30Schema
operator|.
name|format
operator|=
name|param
operator|.
name|getDataFormat
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isArray
condition|)
block|{
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
name|defineSchemas
argument_list|(
name|parameter30
argument_list|,
name|allowableValues
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"int"
argument_list|)
operator|||
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"integer"
argument_list|)
condition|)
block|{
name|defineSchemas
argument_list|(
name|parameter30
argument_list|,
name|allowableValues
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|defineSchemas
argument_list|(
name|parameter30
argument_list|,
name|allowableValues
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"float"
argument_list|)
condition|)
block|{
name|defineSchemas
argument_list|(
name|parameter30
argument_list|,
name|allowableValues
argument_list|,
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
name|defineSchemas
argument_list|(
name|parameter30
argument_list|,
name|allowableValues
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|defineSchemas
argument_list|(
name|parameter30
argument_list|,
name|allowableValues
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|param
operator|.
name|getCollectionFormat
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|parameter30
operator|.
name|style
operator|=
name|param
operator|.
name|getCollectionFormat
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasAllowableValues
operator|&&
operator|!
name|isArray
condition|)
block|{
name|oas30Schema
operator|.
name|enum_
operator|=
name|allowableValues
expr_stmt|;
block|}
comment|// set default value on parameter
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|param
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
condition|)
block|{
name|oas30Schema
operator|.
name|default_
operator|=
name|param
operator|.
name|getDefaultValue
argument_list|()
expr_stmt|;
block|}
comment|// add examples
if|if
condition|(
name|param
operator|.
name|getExamples
argument_list|()
operator|!=
literal|null
operator|&&
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
comment|// we can only set one example on the parameter
name|Extension
name|exampleExtension
init|=
name|parameter30
operator|.
name|createExtension
argument_list|()
decl_stmt|;
name|boolean
name|emptyKey
init|=
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
decl_stmt|;
if|if
condition|(
name|emptyKey
condition|)
block|{
name|exampleExtension
operator|.
name|name
operator|=
literal|"x-example"
expr_stmt|;
name|exampleExtension
operator|.
name|value
operator|=
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|parameter30
operator|.
name|addExtension
argument_list|(
literal|"x-example"
argument_list|,
name|exampleExtension
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|exampleValue
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|exampleValue
operator|.
name|put
argument_list|(
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|exampleExtension
operator|.
name|name
operator|=
literal|"x-examples"
expr_stmt|;
name|exampleExtension
operator|.
name|value
operator|=
name|exampleValue
expr_stmt|;
name|parameter30
operator|.
name|addExtension
argument_list|(
literal|"x-examples"
argument_list|,
name|exampleExtension
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// set schema on body parameter
if|if
condition|(
name|parameter
operator|.
name|in
operator|.
name|equals
argument_list|(
literal|"body"
argument_list|)
condition|)
block|{
name|Oas30Parameter
name|bp
init|=
operator|(
name|Oas30Parameter
operator|)
name|parameter
decl_stmt|;
name|String
name|type
init|=
name|param
operator|.
name|getDataType
argument_list|()
operator|!=
literal|null
condition|?
name|param
operator|.
name|getDataType
argument_list|()
else|:
name|verb
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|)
block|{
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|type
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|OasSchema
name|arrayModel
init|=
operator|(
name|Oas30Schema
operator|)
name|bp
operator|.
name|createSchema
argument_list|()
decl_stmt|;
name|arrayModel
operator|=
name|modelTypeAsProperty
argument_list|(
name|type
argument_list|,
name|openApi
argument_list|,
name|arrayModel
argument_list|)
expr_stmt|;
name|bp
operator|.
name|schema
operator|=
name|arrayModel
expr_stmt|;
block|}
else|else
block|{
name|String
name|ref
init|=
name|modelTypeAsRef
argument_list|(
name|type
argument_list|,
name|openApi
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|Oas30Schema
name|refModel
init|=
operator|(
name|Oas30Schema
operator|)
name|bp
operator|.
name|createSchema
argument_list|()
decl_stmt|;
name|refModel
operator|.
name|$ref
operator|=
literal|"#/components/schemas/"
operator|+
name|ref
expr_stmt|;
name|bp
operator|.
name|schema
operator|=
name|refModel
expr_stmt|;
block|}
else|else
block|{
name|OasSchema
name|model
init|=
operator|(
name|Oas30Schema
operator|)
name|bp
operator|.
name|createSchema
argument_list|()
decl_stmt|;
name|model
operator|=
name|modelTypeAsProperty
argument_list|(
name|type
argument_list|,
name|openApi
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|bp
operator|.
name|schema
operator|=
name|model
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|consumes
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|consumes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|requestBody
operator|==
literal|null
condition|)
block|{
name|op
operator|.
name|requestBody
operator|=
name|op
operator|.
name|createRequestBody
argument_list|()
expr_stmt|;
name|op
operator|.
name|requestBody
operator|.
name|required
operator|=
name|param
operator|.
name|getRequired
argument_list|()
expr_stmt|;
name|op
operator|.
name|requestBody
operator|.
name|description
operator|=
name|param
operator|.
name|getDescription
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|Oas30MediaType
name|mediaType
init|=
name|op
operator|.
name|requestBody
operator|.
name|createMediaType
argument_list|(
name|part
argument_list|)
decl_stmt|;
name|mediaType
operator|.
name|schema
operator|=
name|mediaType
operator|.
name|createSchema
argument_list|()
expr_stmt|;
name|mediaType
operator|.
name|schema
operator|.
name|$ref
operator|=
name|bp
operator|.
name|schema
operator|.
name|$ref
expr_stmt|;
name|op
operator|.
name|requestBody
operator|.
name|addMediaType
argument_list|(
name|part
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add examples
if|if
condition|(
name|param
operator|.
name|getExamples
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Extension
name|exampleExtension
init|=
name|op
operator|.
name|requestBody
operator|.
name|createExtension
argument_list|()
decl_stmt|;
name|boolean
name|emptyKey
init|=
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
decl_stmt|;
if|if
condition|(
name|emptyKey
condition|)
block|{
name|exampleExtension
operator|.
name|name
operator|=
literal|"x-example"
expr_stmt|;
name|exampleExtension
operator|.
name|value
operator|=
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|op
operator|.
name|requestBody
operator|.
name|addExtension
argument_list|(
literal|"x-example"
argument_list|,
name|exampleExtension
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|exampleValue
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|exampleValue
operator|.
name|put
argument_list|(
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|exampleExtension
operator|.
name|name
operator|=
literal|"x-examples"
expr_stmt|;
name|exampleExtension
operator|.
name|value
operator|=
name|exampleValue
expr_stmt|;
name|op
operator|.
name|requestBody
operator|.
name|addExtension
argument_list|(
literal|"x-examples"
argument_list|,
name|exampleExtension
argument_list|)
expr_stmt|;
block|}
block|}
name|parameter
operator|=
literal|null
expr_stmt|;
block|}
name|op
operator|.
name|addParameter
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
block|}
comment|// clear parameters if its empty
if|if
condition|(
name|op
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
operator|&&
name|op
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|op
operator|.
name|parameters
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// if we have an out type then set that as response message
if|if
condition|(
name|verb
operator|.
name|getOutType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|op
operator|.
name|responses
operator|==
literal|null
condition|)
block|{
name|op
operator|.
name|responses
operator|=
name|op
operator|.
name|createResponses
argument_list|()
expr_stmt|;
block|}
name|Oas30Response
name|response
init|=
operator|(
name|Oas30Response
operator|)
name|op
operator|.
name|responses
operator|.
name|createResponse
argument_list|(
literal|"200"
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|produces
operator|!=
literal|null
condition|)
block|{
name|parts
operator|=
name|produces
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|produce
range|:
name|parts
control|)
block|{
name|Oas30MediaType
name|contentType
init|=
name|response
operator|.
name|createMediaType
argument_list|(
name|produce
argument_list|)
decl_stmt|;
name|response
operator|.
name|addMediaType
argument_list|(
name|produce
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|OasSchema
name|model
init|=
name|contentType
operator|.
name|createSchema
argument_list|()
decl_stmt|;
name|model
operator|=
name|modelTypeAsProperty
argument_list|(
name|verb
operator|.
name|getOutType
argument_list|()
argument_list|,
name|openApi
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|contentType
operator|.
name|schema
operator|=
operator|(
name|Oas30Schema
operator|)
name|model
expr_stmt|;
name|response
operator|.
name|description
operator|=
literal|"Output type"
expr_stmt|;
name|op
operator|.
name|responses
operator|.
name|addResponse
argument_list|(
literal|"200"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|doParseVerbOas20 (Oas20Document openApi, VerbDefinition verb, Oas20Operation op, String consumes, String produces)
specifier|private
name|void
name|doParseVerbOas20
parameter_list|(
name|Oas20Document
name|openApi
parameter_list|,
name|VerbDefinition
name|verb
parameter_list|,
name|Oas20Operation
name|op
parameter_list|,
name|String
name|consumes
parameter_list|,
name|String
name|produces
parameter_list|)
block|{
if|if
condition|(
name|consumes
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|consumes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|consumes
operator|==
literal|null
condition|)
block|{
name|op
operator|.
name|consumes
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|op
operator|.
name|consumes
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|produces
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|produces
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|produces
operator|==
literal|null
condition|)
block|{
name|op
operator|.
name|produces
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|op
operator|.
name|produces
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|verb
operator|.
name|getDescriptionText
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|op
operator|.
name|summary
operator|=
name|verb
operator|.
name|getDescriptionText
argument_list|()
expr_stmt|;
block|}
comment|// security
for|for
control|(
name|SecurityDefinition
name|sd
range|:
name|verb
operator|.
name|getSecurity
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|scopes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|sd
operator|.
name|getScopes
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|scope
range|:
name|ObjectHelper
operator|.
name|createIterable
argument_list|(
name|sd
operator|.
name|getScopes
argument_list|()
argument_list|)
control|)
block|{
name|scopes
operator|.
name|add
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
block|}
name|SecurityRequirement
name|securityRequirement
init|=
name|op
operator|.
name|createSecurityRequirement
argument_list|()
decl_stmt|;
name|securityRequirement
operator|.
name|addSecurityRequirementItem
argument_list|(
name|sd
operator|.
name|getKey
argument_list|()
argument_list|,
name|scopes
argument_list|)
expr_stmt|;
name|op
operator|.
name|addSecurityRequirement
argument_list|(
name|securityRequirement
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RestOperationParamDefinition
name|param
range|:
name|verb
operator|.
name|getParams
argument_list|()
control|)
block|{
name|OasParameter
name|parameter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RestParamType
operator|.
name|body
argument_list|)
condition|)
block|{
name|parameter
operator|=
name|op
operator|.
name|createParameter
argument_list|()
expr_stmt|;
name|parameter
operator|.
name|in
operator|=
literal|"body"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RestParamType
operator|.
name|formData
argument_list|)
condition|)
block|{
name|parameter
operator|=
name|op
operator|.
name|createParameter
argument_list|()
expr_stmt|;
name|parameter
operator|.
name|in
operator|=
literal|"formData"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RestParamType
operator|.
name|header
argument_list|)
condition|)
block|{
name|parameter
operator|=
name|op
operator|.
name|createParameter
argument_list|()
expr_stmt|;
name|parameter
operator|.
name|in
operator|=
literal|"header"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RestParamType
operator|.
name|path
argument_list|)
condition|)
block|{
name|parameter
operator|=
name|op
operator|.
name|createParameter
argument_list|()
expr_stmt|;
name|parameter
operator|.
name|in
operator|=
literal|"path"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|param
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RestParamType
operator|.
name|query
argument_list|)
condition|)
block|{
name|parameter
operator|=
name|op
operator|.
name|createParameter
argument_list|()
expr_stmt|;
name|parameter
operator|.
name|in
operator|=
literal|"query"
expr_stmt|;
block|}
if|if
condition|(
name|parameter
operator|!=
literal|null
condition|)
block|{
name|parameter
operator|.
name|name
operator|=
name|param
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|param
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|parameter
operator|.
name|description
operator|=
name|param
operator|.
name|getDescription
argument_list|()
expr_stmt|;
block|}
name|parameter
operator|.
name|required
operator|=
name|param
operator|.
name|getRequired
argument_list|()
expr_stmt|;
comment|// set type on parameter
if|if
condition|(
operator|!
name|parameter
operator|.
name|in
operator|.
name|equals
argument_list|(
literal|"body"
argument_list|)
condition|)
block|{
name|Oas20Parameter
name|serializableParameter
init|=
operator|(
name|Oas20Parameter
operator|)
name|parameter
decl_stmt|;
specifier|final
name|boolean
name|isArray
init|=
name|param
operator|.
name|getDataType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"array"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|allowableValues
init|=
name|param
operator|.
name|getAllowableValues
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|hasAllowableValues
init|=
name|allowableValues
operator|!=
literal|null
operator|&&
operator|!
name|allowableValues
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|param
operator|.
name|getDataType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|serializableParameter
operator|.
name|type
operator|=
name|param
operator|.
name|getDataType
argument_list|()
expr_stmt|;
if|if
condition|(
name|param
operator|.
name|getDataFormat
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|serializableParameter
operator|.
name|format
operator|=
name|param
operator|.
name|getDataFormat
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isArray
condition|)
block|{
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
name|defineItems
argument_list|(
name|serializableParameter
argument_list|,
name|allowableValues
argument_list|,
operator|new
name|Oas20Items
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"int"
argument_list|)
operator|||
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"integer"
argument_list|)
condition|)
block|{
name|defineItems
argument_list|(
name|serializableParameter
argument_list|,
name|allowableValues
argument_list|,
operator|new
name|Oas20Items
argument_list|()
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|defineItems
argument_list|(
name|serializableParameter
argument_list|,
name|allowableValues
argument_list|,
operator|new
name|Oas20Items
argument_list|()
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"float"
argument_list|)
condition|)
block|{
name|defineItems
argument_list|(
name|serializableParameter
argument_list|,
name|allowableValues
argument_list|,
operator|new
name|Oas20Items
argument_list|()
argument_list|,
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"double"
argument_list|)
condition|)
block|{
name|defineItems
argument_list|(
name|serializableParameter
argument_list|,
name|allowableValues
argument_list|,
operator|new
name|Oas20Items
argument_list|()
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|defineItems
argument_list|(
name|serializableParameter
argument_list|,
name|allowableValues
argument_list|,
operator|new
name|Oas20Items
argument_list|()
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|param
operator|.
name|getCollectionFormat
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|serializableParameter
operator|.
name|collectionFormat
operator|=
name|param
operator|.
name|getCollectionFormat
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasAllowableValues
operator|&&
operator|!
name|isArray
condition|)
block|{
name|serializableParameter
operator|.
name|enum_
operator|=
name|allowableValues
expr_stmt|;
block|}
comment|// set default value on parameter
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|param
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
condition|)
block|{
name|serializableParameter
operator|.
name|default_
operator|=
name|param
operator|.
name|getDefaultValue
argument_list|()
expr_stmt|;
block|}
comment|// add examples
if|if
condition|(
name|param
operator|.
name|getExamples
argument_list|()
operator|!=
literal|null
operator|&&
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
comment|// we can only set one example on the parameter
name|Extension
name|exampleExtension
init|=
name|serializableParameter
operator|.
name|createExtension
argument_list|()
decl_stmt|;
name|boolean
name|emptyKey
init|=
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
decl_stmt|;
if|if
condition|(
name|emptyKey
condition|)
block|{
name|exampleExtension
operator|.
name|name
operator|=
literal|"x-example"
expr_stmt|;
name|exampleExtension
operator|.
name|value
operator|=
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|serializableParameter
operator|.
name|addExtension
argument_list|(
literal|"x-example"
argument_list|,
name|exampleExtension
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|exampleValue
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|exampleValue
operator|.
name|put
argument_list|(
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|exampleExtension
operator|.
name|name
operator|=
literal|"x-examples"
expr_stmt|;
name|exampleExtension
operator|.
name|value
operator|=
name|exampleValue
expr_stmt|;
name|serializableParameter
operator|.
name|addExtension
argument_list|(
literal|"x-examples"
argument_list|,
name|exampleExtension
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// set schema on body parameter
if|if
condition|(
name|parameter
operator|.
name|in
operator|.
name|equals
argument_list|(
literal|"body"
argument_list|)
condition|)
block|{
name|Oas20Parameter
name|bp
init|=
operator|(
name|Oas20Parameter
operator|)
name|parameter
decl_stmt|;
name|String
name|type
init|=
name|param
operator|.
name|getDataType
argument_list|()
operator|!=
literal|null
condition|?
name|param
operator|.
name|getDataType
argument_list|()
else|:
name|verb
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
condition|)
block|{
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|type
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|OasSchema
name|arrayModel
init|=
operator|(
name|Oas20Schema
operator|)
name|bp
operator|.
name|createSchema
argument_list|()
decl_stmt|;
name|arrayModel
operator|=
name|modelTypeAsProperty
argument_list|(
name|type
argument_list|,
name|openApi
argument_list|,
name|arrayModel
argument_list|)
expr_stmt|;
name|bp
operator|.
name|schema
operator|=
name|arrayModel
expr_stmt|;
block|}
else|else
block|{
name|String
name|ref
init|=
name|modelTypeAsRef
argument_list|(
name|type
argument_list|,
name|openApi
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|Oas20Schema
name|refModel
init|=
operator|(
name|Oas20Schema
operator|)
name|bp
operator|.
name|createSchema
argument_list|()
decl_stmt|;
name|refModel
operator|.
name|$ref
operator|=
literal|"#/definitions/"
operator|+
name|ref
expr_stmt|;
name|bp
operator|.
name|schema
operator|=
name|refModel
expr_stmt|;
block|}
else|else
block|{
name|OasSchema
name|model
init|=
operator|(
name|Oas20Schema
operator|)
name|bp
operator|.
name|createSchema
argument_list|()
decl_stmt|;
name|model
operator|=
name|modelTypeAsProperty
argument_list|(
name|type
argument_list|,
name|openApi
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|bp
operator|.
name|schema
operator|=
name|model
expr_stmt|;
block|}
block|}
block|}
comment|// add examples
if|if
condition|(
name|param
operator|.
name|getExamples
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Extension
name|exampleExtension
init|=
name|bp
operator|.
name|createExtension
argument_list|()
decl_stmt|;
name|boolean
name|emptyKey
init|=
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
decl_stmt|;
if|if
condition|(
name|emptyKey
condition|)
block|{
name|exampleExtension
operator|.
name|name
operator|=
literal|"x-example"
expr_stmt|;
name|exampleExtension
operator|.
name|value
operator|=
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|bp
operator|.
name|addExtension
argument_list|(
literal|"x-example"
argument_list|,
name|exampleExtension
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|exampleValue
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|exampleValue
operator|.
name|put
argument_list|(
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getExamples
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|exampleExtension
operator|.
name|name
operator|=
literal|"x-examples"
expr_stmt|;
name|exampleExtension
operator|.
name|value
operator|=
name|exampleValue
expr_stmt|;
name|bp
operator|.
name|addExtension
argument_list|(
literal|"x-examples"
argument_list|,
name|exampleExtension
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|op
operator|.
name|addParameter
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
block|}
comment|// clear parameters if its empty
if|if
condition|(
name|op
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
operator|&&
name|op
operator|.
name|getParameters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|op
operator|.
name|parameters
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// if we have an out type then set that as response message
if|if
condition|(
name|verb
operator|.
name|getOutType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|op
operator|.
name|responses
operator|==
literal|null
condition|)
block|{
name|op
operator|.
name|responses
operator|=
name|op
operator|.
name|createResponses
argument_list|()
expr_stmt|;
block|}
name|Oas20Response
name|response
init|=
operator|(
name|Oas20Response
operator|)
name|op
operator|.
name|responses
operator|.
name|createResponse
argument_list|(
literal|"200"
argument_list|)
decl_stmt|;
name|OasSchema
name|model
init|=
name|response
operator|.
name|createSchema
argument_list|()
decl_stmt|;
name|model
operator|=
name|modelTypeAsProperty
argument_list|(
name|verb
operator|.
name|getOutType
argument_list|()
argument_list|,
name|openApi
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|response
operator|.
name|schema
operator|=
operator|(
name|Oas20Schema
operator|)
name|model
expr_stmt|;
name|response
operator|.
name|description
operator|=
literal|"Output type"
expr_stmt|;
name|op
operator|.
name|responses
operator|.
name|addResponse
argument_list|(
literal|"200"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setPathOperation (OasPathItem path, OasOperation operation, String method)
specifier|private
name|OasPathItem
name|setPathOperation
parameter_list|(
name|OasPathItem
name|path
parameter_list|,
name|OasOperation
name|operation
parameter_list|,
name|String
name|method
parameter_list|)
block|{
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
literal|"post"
argument_list|)
condition|)
block|{
name|path
operator|.
name|post
operator|=
name|operation
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
name|path
operator|.
name|get
operator|=
name|operation
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
literal|"put"
argument_list|)
condition|)
block|{
name|path
operator|.
name|put
operator|=
name|operation
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
literal|"patch"
argument_list|)
condition|)
block|{
name|path
operator|.
name|patch
operator|=
name|operation
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
literal|"delete"
argument_list|)
condition|)
block|{
name|path
operator|.
name|delete
operator|=
name|operation
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
literal|"head"
argument_list|)
condition|)
block|{
name|path
operator|.
name|head
operator|=
name|operation
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
literal|"options"
argument_list|)
condition|)
block|{
name|path
operator|.
name|options
operator|=
name|operation
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
DECL|method|defineItems (final Oas20Parameter serializableParameter, final List<String> allowableValues, final Oas20Items items, final Class<?> type)
specifier|private
specifier|static
name|void
name|defineItems
parameter_list|(
specifier|final
name|Oas20Parameter
name|serializableParameter
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|allowableValues
parameter_list|,
specifier|final
name|Oas20Items
name|items
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|serializableParameter
operator|.
name|items
operator|=
name|items
expr_stmt|;
if|if
condition|(
name|allowableValues
operator|!=
literal|null
operator|&&
operator|!
name|allowableValues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|String
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|items
operator|.
name|enum_
operator|=
name|allowableValues
expr_stmt|;
block|}
else|else
block|{
name|convertAndSetItemsEnum
argument_list|(
name|items
argument_list|,
name|allowableValues
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|defineSchemas (final Oas30Parameter serializableParameter, final List<String> allowableValues, final Class<?> type)
specifier|private
specifier|static
name|void
name|defineSchemas
parameter_list|(
specifier|final
name|Oas30Parameter
name|serializableParameter
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|allowableValues
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|allowableValues
operator|!=
literal|null
operator|&&
operator|!
name|allowableValues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|String
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
operator|(
operator|(
name|Oas30Schema
operator|)
name|serializableParameter
operator|.
name|schema
operator|)
operator|.
name|enum_
operator|=
name|allowableValues
expr_stmt|;
block|}
else|else
block|{
name|convertAndSetItemsEnum
argument_list|(
name|serializableParameter
operator|.
name|schema
argument_list|,
name|allowableValues
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|convertAndSetItemsEnum (final ExtensibleNode items, final List<String> allowableValues, final Class<?> type)
specifier|private
specifier|static
name|void
name|convertAndSetItemsEnum
parameter_list|(
specifier|final
name|ExtensibleNode
name|items
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|allowableValues
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
try|try
block|{
specifier|final
name|MethodHandle
name|valueOf
init|=
name|publicLookup
argument_list|()
operator|.
name|findStatic
argument_list|(
name|type
argument_list|,
literal|"valueOf"
argument_list|,
name|MethodType
operator|.
name|methodType
argument_list|(
name|type
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|MethodHandle
name|setEnum
init|=
name|publicLookup
argument_list|()
operator|.
name|bind
argument_list|(
name|items
argument_list|,
literal|"setEnum"
argument_list|,
name|MethodType
operator|.
name|methodType
argument_list|(
name|void
operator|.
name|class
argument_list|,
name|List
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|values
init|=
name|allowableValues
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|v
lambda|->
block|{
try|try
block|{
return|return
name|valueOf
operator|.
name|invoke
argument_list|(
name|v
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|setEnum
operator|.
name|invoke
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|doParseResponseMessages (OasDocument openApi, VerbDefinition verb, OasOperation op, String produces)
specifier|private
name|void
name|doParseResponseMessages
parameter_list|(
name|OasDocument
name|openApi
parameter_list|,
name|VerbDefinition
name|verb
parameter_list|,
name|OasOperation
name|op
parameter_list|,
name|String
name|produces
parameter_list|)
block|{
if|if
condition|(
name|op
operator|.
name|responses
operator|==
literal|null
condition|)
block|{
name|op
operator|.
name|responses
operator|=
name|op
operator|.
name|createResponses
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|RestOperationResponseMsgDefinition
name|msg
range|:
name|verb
operator|.
name|getResponseMsgs
argument_list|()
control|)
block|{
if|if
condition|(
name|openApi
operator|instanceof
name|Oas20Document
condition|)
block|{
name|doParseResponseOas20
argument_list|(
operator|(
name|Oas20Document
operator|)
name|openApi
argument_list|,
operator|(
name|Oas20Operation
operator|)
name|op
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|openApi
operator|instanceof
name|Oas30Document
condition|)
block|{
name|doParseResponseOas30
argument_list|(
operator|(
name|Oas30Document
operator|)
name|openApi
argument_list|,
operator|(
name|Oas30Operation
operator|)
name|op
argument_list|,
name|produces
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
comment|// must include an empty noop response if none exists
if|if
condition|(
name|op
operator|.
name|responses
operator|==
literal|null
operator|||
name|op
operator|.
name|responses
operator|.
name|getResponses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|op
operator|.
name|responses
operator|.
name|addResponse
argument_list|(
literal|"200"
argument_list|,
name|op
operator|.
name|responses
operator|.
name|createResponse
argument_list|(
literal|"200"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doParseResponseOas30 (Oas30Document openApi, Oas30Operation op, String produces, RestOperationResponseMsgDefinition msg)
specifier|private
name|void
name|doParseResponseOas30
parameter_list|(
name|Oas30Document
name|openApi
parameter_list|,
name|Oas30Operation
name|op
parameter_list|,
name|String
name|produces
parameter_list|,
name|RestOperationResponseMsgDefinition
name|msg
parameter_list|)
block|{
name|Oas30Response
name|response
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|responses
operator|!=
literal|null
operator|&&
name|op
operator|.
name|responses
operator|.
name|getResponses
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|response
operator|=
operator|(
name|Oas30Response
operator|)
name|op
operator|.
name|responses
operator|.
name|getResponse
argument_list|(
name|msg
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|==
literal|null
condition|)
block|{
name|response
operator|=
operator|(
name|Oas30Response
operator|)
name|op
operator|.
name|responses
operator|.
name|createResponse
argument_list|(
name|msg
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|responses
operator|.
name|addResponse
argument_list|(
name|msg
operator|.
name|getCode
argument_list|()
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|msg
operator|.
name|getResponseModel
argument_list|()
argument_list|)
condition|)
block|{
name|String
index|[]
name|parts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|produces
operator|!=
literal|null
condition|)
block|{
name|parts
operator|=
name|produces
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|produce
range|:
name|parts
control|)
block|{
name|Oas30MediaType
name|contentType
init|=
name|response
operator|.
name|createMediaType
argument_list|(
name|produce
argument_list|)
decl_stmt|;
name|response
operator|.
name|addMediaType
argument_list|(
name|produce
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|OasSchema
name|model
init|=
name|contentType
operator|.
name|createSchema
argument_list|()
decl_stmt|;
name|model
operator|=
name|modelTypeAsProperty
argument_list|(
name|msg
operator|.
name|getResponseModel
argument_list|()
argument_list|,
name|openApi
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|contentType
operator|.
name|schema
operator|=
operator|(
name|Oas30Schema
operator|)
name|model
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|msg
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|description
operator|=
name|msg
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|// add headers
if|if
condition|(
name|msg
operator|.
name|getHeaders
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RestOperationResponseHeaderDefinition
name|header
range|:
name|msg
operator|.
name|getHeaders
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|header
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|header
operator|.
name|getDataType
argument_list|()
decl_stmt|;
name|String
name|format
init|=
name|header
operator|.
name|getDataFormat
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"string"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
literal|"long"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
literal|"float"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
literal|"double"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
literal|"boolean"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|setResponseHeaderOas30
argument_list|(
name|response
argument_list|,
name|header
argument_list|,
name|name
argument_list|,
name|format
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"int"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
literal|"integer"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|setResponseHeaderOas30
argument_list|(
name|response
argument_list|,
name|header
argument_list|,
name|name
argument_list|,
name|format
argument_list|,
literal|"integer"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"array"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Oas30Header
name|ap
init|=
name|response
operator|.
name|createHeader
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|header
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|ap
operator|.
name|description
operator|=
name|header
operator|.
name|getDescription
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|header
operator|.
name|getArrayType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|arrayType
init|=
name|header
operator|.
name|getArrayType
argument_list|()
decl_stmt|;
if|if
condition|(
name|arrayType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"string"
argument_list|)
operator|||
name|arrayType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"long"
argument_list|)
operator|||
name|arrayType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"float"
argument_list|)
operator|||
name|arrayType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"double"
argument_list|)
operator|||
name|arrayType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|setHeaderSchemaOas30
argument_list|(
name|ap
argument_list|,
name|arrayType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|header
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"int"
argument_list|)
operator|||
name|header
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"integer"
argument_list|)
condition|)
block|{
name|setHeaderSchemaOas30
argument_list|(
name|ap
argument_list|,
literal|"integer"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add example
if|if
condition|(
name|header
operator|.
name|getExample
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Extension
name|exampleExtension
init|=
name|ap
operator|.
name|createExtension
argument_list|()
decl_stmt|;
name|exampleExtension
operator|.
name|name
operator|=
literal|"x-example"
expr_stmt|;
name|exampleExtension
operator|.
name|value
operator|=
name|header
operator|.
name|getExample
argument_list|()
expr_stmt|;
name|ap
operator|.
name|getExtensions
argument_list|()
operator|.
name|add
argument_list|(
name|exampleExtension
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addHeader
argument_list|(
name|name
argument_list|,
name|ap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// add examples
if|if
condition|(
name|msg
operator|.
name|getExamples
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Extension
name|exampleExtension
init|=
name|response
operator|.
name|createExtension
argument_list|()
decl_stmt|;
name|exampleExtension
operator|.
name|name
operator|=
literal|"x-examples"
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|examplesValue
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RestPropertyDefinition
name|prop
range|:
name|msg
operator|.
name|getExamples
argument_list|()
control|)
block|{
name|examplesValue
operator|.
name|put
argument_list|(
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|exampleExtension
operator|.
name|value
operator|=
name|examplesValue
expr_stmt|;
name|response
operator|.
name|addExtension
argument_list|(
name|exampleExtension
operator|.
name|name
argument_list|,
name|exampleExtension
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setHeaderSchemaOas30 (Oas30Header ap, String arrayType)
specifier|private
name|void
name|setHeaderSchemaOas30
parameter_list|(
name|Oas30Header
name|ap
parameter_list|,
name|String
name|arrayType
parameter_list|)
block|{
name|Oas30Schema
name|items
init|=
name|ap
operator|.
name|createSchema
argument_list|()
decl_stmt|;
name|items
operator|.
name|type
operator|=
name|arrayType
expr_stmt|;
name|ap
operator|.
name|schema
operator|=
name|items
expr_stmt|;
block|}
DECL|method|setResponseHeaderOas30 (Oas30Response response, RestOperationResponseHeaderDefinition header, String name, String format, String type)
specifier|private
name|void
name|setResponseHeaderOas30
parameter_list|(
name|Oas30Response
name|response
parameter_list|,
name|RestOperationResponseHeaderDefinition
name|header
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|format
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|Oas30Header
name|ip
init|=
name|response
operator|.
name|createHeader
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|response
operator|.
name|addHeader
argument_list|(
name|name
argument_list|,
name|ip
argument_list|)
expr_stmt|;
name|Oas30Schema
name|schema
init|=
name|ip
operator|.
name|createSchema
argument_list|()
decl_stmt|;
name|ip
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|schema
operator|.
name|type
operator|=
name|type
expr_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
name|schema
operator|.
name|format
operator|=
name|format
expr_stmt|;
block|}
name|ip
operator|.
name|description
operator|=
name|header
operator|.
name|getDescription
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
decl_stmt|;
if|if
condition|(
operator|!
name|header
operator|.
name|getAllowableValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|text
range|:
name|header
operator|.
name|getAllowableValues
argument_list|()
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|schema
operator|.
name|enum_
operator|=
name|values
expr_stmt|;
block|}
comment|// add example
if|if
condition|(
name|header
operator|.
name|getExample
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Extension
name|exampleExtension
init|=
name|ip
operator|.
name|createExtension
argument_list|()
decl_stmt|;
name|exampleExtension
operator|.
name|name
operator|=
literal|"x-example"
expr_stmt|;
name|exampleExtension
operator|.
name|value
operator|=
name|header
operator|.
name|getExample
argument_list|()
expr_stmt|;
name|ip
operator|.
name|getExtensions
argument_list|()
operator|.
name|add
argument_list|(
name|exampleExtension
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doParseResponseOas20 (Oas20Document openApi, Oas20Operation op, RestOperationResponseMsgDefinition msg)
specifier|private
name|void
name|doParseResponseOas20
parameter_list|(
name|Oas20Document
name|openApi
parameter_list|,
name|Oas20Operation
name|op
parameter_list|,
name|RestOperationResponseMsgDefinition
name|msg
parameter_list|)
block|{
name|Oas20Response
name|response
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|responses
operator|!=
literal|null
operator|&&
name|op
operator|.
name|responses
operator|.
name|getResponses
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|response
operator|=
operator|(
name|Oas20Response
operator|)
name|op
operator|.
name|responses
operator|.
name|getResponse
argument_list|(
name|msg
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|==
literal|null
condition|)
block|{
name|response
operator|=
operator|(
name|Oas20Response
operator|)
name|op
operator|.
name|responses
operator|.
name|createResponse
argument_list|(
name|msg
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|responses
operator|.
name|addResponse
argument_list|(
name|msg
operator|.
name|getCode
argument_list|()
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|msg
operator|.
name|getResponseModel
argument_list|()
argument_list|)
condition|)
block|{
name|OasSchema
name|model
init|=
name|response
operator|.
name|createSchema
argument_list|()
decl_stmt|;
name|model
operator|=
name|modelTypeAsProperty
argument_list|(
name|msg
operator|.
name|getResponseModel
argument_list|()
argument_list|,
name|openApi
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|response
operator|.
name|schema
operator|=
operator|(
name|Oas20Schema
operator|)
name|model
expr_stmt|;
block|}
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|msg
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|response
operator|.
name|description
operator|=
name|msg
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|// add headers
if|if
condition|(
name|msg
operator|.
name|getHeaders
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RestOperationResponseHeaderDefinition
name|header
range|:
name|msg
operator|.
name|getHeaders
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|header
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|header
operator|.
name|getDataType
argument_list|()
decl_stmt|;
name|String
name|format
init|=
name|header
operator|.
name|getDataFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|headers
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|headers
operator|=
name|response
operator|.
name|createHeaders
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"string"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
literal|"long"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
literal|"float"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
literal|"double"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
literal|"boolean"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|setResponseHeaderOas20
argument_list|(
name|response
argument_list|,
name|header
argument_list|,
name|name
argument_list|,
name|format
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"int"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
literal|"integer"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|setResponseHeaderOas20
argument_list|(
name|response
argument_list|,
name|header
argument_list|,
name|name
argument_list|,
name|format
argument_list|,
literal|"integer"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"array"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Oas20Header
name|ap
init|=
name|response
operator|.
name|headers
operator|.
name|createHeader
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|header
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
name|ap
operator|.
name|description
operator|=
name|header
operator|.
name|getDescription
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|header
operator|.
name|getArrayType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|arrayType
init|=
name|header
operator|.
name|getArrayType
argument_list|()
decl_stmt|;
if|if
condition|(
name|arrayType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"string"
argument_list|)
operator|||
name|arrayType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"long"
argument_list|)
operator|||
name|arrayType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"float"
argument_list|)
operator|||
name|arrayType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"double"
argument_list|)
operator|||
name|arrayType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|setHeaderSchemaOas20
argument_list|(
name|ap
argument_list|,
name|arrayType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|header
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"int"
argument_list|)
operator|||
name|header
operator|.
name|getArrayType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"integer"
argument_list|)
condition|)
block|{
name|setHeaderSchemaOas20
argument_list|(
name|ap
argument_list|,
literal|"integer"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add example
if|if
condition|(
name|header
operator|.
name|getExample
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Extension
name|exampleExtension
init|=
name|ap
operator|.
name|createExtension
argument_list|()
decl_stmt|;
name|exampleExtension
operator|.
name|name
operator|=
literal|"x-example"
expr_stmt|;
name|exampleExtension
operator|.
name|value
operator|=
name|header
operator|.
name|getExample
argument_list|()
expr_stmt|;
name|ap
operator|.
name|getExtensions
argument_list|()
operator|.
name|add
argument_list|(
name|exampleExtension
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|headers
operator|.
name|addHeader
argument_list|(
name|name
argument_list|,
name|ap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// add examples
if|if
condition|(
name|msg
operator|.
name|getExamples
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Extension
name|exampleExtension
init|=
name|response
operator|.
name|createExtension
argument_list|()
decl_stmt|;
name|exampleExtension
operator|.
name|name
operator|=
literal|"examples"
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|examplesValue
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RestPropertyDefinition
name|prop
range|:
name|msg
operator|.
name|getExamples
argument_list|()
control|)
block|{
name|examplesValue
operator|.
name|put
argument_list|(
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|exampleExtension
operator|.
name|value
operator|=
name|examplesValue
expr_stmt|;
name|response
operator|.
name|addExtension
argument_list|(
name|exampleExtension
operator|.
name|name
argument_list|,
name|exampleExtension
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setHeaderSchemaOas20 (Oas20Header ap, String arrayType)
specifier|private
name|void
name|setHeaderSchemaOas20
parameter_list|(
name|Oas20Header
name|ap
parameter_list|,
name|String
name|arrayType
parameter_list|)
block|{
name|Oas20Items
name|items
init|=
name|ap
operator|.
name|createItems
argument_list|()
decl_stmt|;
name|items
operator|.
name|type
operator|=
name|arrayType
expr_stmt|;
name|ap
operator|.
name|items
operator|=
name|items
expr_stmt|;
block|}
DECL|method|setResponseHeaderOas20 (Oas20Response response, RestOperationResponseHeaderDefinition header, String name, String format, String type)
specifier|private
name|void
name|setResponseHeaderOas20
parameter_list|(
name|Oas20Response
name|response
parameter_list|,
name|RestOperationResponseHeaderDefinition
name|header
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|format
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|Oas20Header
name|ip
init|=
name|response
operator|.
name|headers
operator|.
name|createHeader
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ip
operator|.
name|type
operator|=
name|type
expr_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
name|ip
operator|.
name|format
operator|=
name|format
expr_stmt|;
block|}
name|ip
operator|.
name|description
operator|=
name|header
operator|.
name|getDescription
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
decl_stmt|;
if|if
condition|(
operator|!
name|header
operator|.
name|getAllowableValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|text
range|:
name|header
operator|.
name|getAllowableValues
argument_list|()
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|ip
operator|.
name|enum_
operator|=
name|values
expr_stmt|;
block|}
comment|// add example
if|if
condition|(
name|header
operator|.
name|getExample
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Extension
name|exampleExtension
init|=
name|ip
operator|.
name|createExtension
argument_list|()
decl_stmt|;
name|exampleExtension
operator|.
name|name
operator|=
literal|"x-example"
expr_stmt|;
name|exampleExtension
operator|.
name|value
operator|=
name|header
operator|.
name|getExample
argument_list|()
expr_stmt|;
name|ip
operator|.
name|getExtensions
argument_list|()
operator|.
name|add
argument_list|(
name|exampleExtension
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|headers
operator|.
name|addHeader
argument_list|(
name|name
argument_list|,
name|ip
argument_list|)
expr_stmt|;
block|}
DECL|method|asModel (String typeName, OasDocument openApi)
specifier|private
name|OasSchema
name|asModel
parameter_list|(
name|String
name|typeName
parameter_list|,
name|OasDocument
name|openApi
parameter_list|)
block|{
if|if
condition|(
name|openApi
operator|instanceof
name|Oas20Document
condition|)
block|{
name|boolean
name|array
init|=
name|typeName
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
condition|)
block|{
name|typeName
operator|=
name|typeName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|typeName
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|Oas20Document
operator|)
name|openApi
operator|)
operator|.
name|definitions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Oas20SchemaDefinition
name|model
range|:
operator|(
operator|(
name|Oas20Document
operator|)
name|openApi
operator|)
operator|.
name|definitions
operator|.
name|getDefinitions
argument_list|()
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Map
name|modelType
init|=
operator|(
name|Map
operator|)
name|model
operator|.
name|getExtension
argument_list|(
literal|"x-className"
argument_list|)
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|modelType
operator|!=
literal|null
operator|&&
name|typeName
operator|.
name|equals
argument_list|(
name|modelType
operator|.
name|get
argument_list|(
literal|"format"
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|model
return|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|openApi
operator|instanceof
name|Oas30Document
condition|)
block|{
name|boolean
name|array
init|=
name|typeName
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
condition|)
block|{
name|typeName
operator|=
name|typeName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|typeName
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|Oas30Document
operator|)
name|openApi
operator|)
operator|.
name|components
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|Oas30Document
operator|)
name|openApi
operator|)
operator|.
name|components
operator|.
name|schemas
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Oas30SchemaDefinition
name|model
range|:
operator|(
operator|(
name|Oas30Document
operator|)
name|openApi
operator|)
operator|.
name|components
operator|.
name|schemas
operator|.
name|values
argument_list|()
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Map
name|modelType
init|=
operator|(
name|Map
operator|)
name|model
operator|.
name|getExtension
argument_list|(
literal|"x-className"
argument_list|)
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|modelType
operator|!=
literal|null
operator|&&
name|typeName
operator|.
name|equals
argument_list|(
name|modelType
operator|.
name|get
argument_list|(
literal|"format"
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|model
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|modelTypeAsRef (String typeName, OasDocument openApi)
specifier|private
name|String
name|modelTypeAsRef
parameter_list|(
name|String
name|typeName
parameter_list|,
name|OasDocument
name|openApi
parameter_list|)
block|{
name|boolean
name|array
init|=
name|typeName
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
condition|)
block|{
name|typeName
operator|=
name|typeName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|typeName
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|OasSchema
name|model
init|=
name|asModel
argument_list|(
name|typeName
argument_list|,
name|openApi
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
block|{
name|typeName
operator|=
name|model
operator|.
name|type
expr_stmt|;
return|return
name|typeName
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|modelTypeAsProperty (String typeName, OasDocument openApi, OasSchema prop)
specifier|private
name|OasSchema
name|modelTypeAsProperty
parameter_list|(
name|String
name|typeName
parameter_list|,
name|OasDocument
name|openApi
parameter_list|,
name|OasSchema
name|prop
parameter_list|)
block|{
name|boolean
name|array
init|=
name|typeName
operator|.
name|endsWith
argument_list|(
literal|"[]"
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
condition|)
block|{
name|typeName
operator|=
name|typeName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|typeName
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|String
name|ref
init|=
name|modelTypeAsRef
argument_list|(
name|typeName
argument_list|,
name|openApi
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|openApi
operator|instanceof
name|Oas20Document
condition|)
block|{
name|prop
operator|.
name|$ref
operator|=
literal|"#/definitions/"
operator|+
name|ref
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|openApi
operator|instanceof
name|Oas30Document
condition|)
block|{
name|prop
operator|.
name|$ref
operator|=
literal|"#/components/schemas/"
operator|+
name|ref
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// special for byte arrays
if|if
condition|(
name|array
operator|&&
operator|(
literal|"byte"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
operator|||
literal|"java.lang.Byte"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
operator|)
condition|)
block|{
name|prop
operator|.
name|format
operator|=
literal|"byte"
expr_stmt|;
name|prop
operator|.
name|type
operator|=
literal|"number"
expr_stmt|;
name|array
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"string"
operator|.
name|equalsIgnoreCase
argument_list|(
name|typeName
argument_list|)
operator|||
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|prop
operator|.
name|format
operator|=
literal|"string"
expr_stmt|;
name|prop
operator|.
name|type
operator|=
literal|"sting"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"int"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
operator|||
literal|"java.lang.Integer"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|prop
operator|.
name|format
operator|=
literal|"integer"
expr_stmt|;
name|prop
operator|.
name|type
operator|=
literal|"number"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
operator|||
literal|"java.lang.Long"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|prop
operator|.
name|format
operator|=
literal|"long"
expr_stmt|;
name|prop
operator|.
name|type
operator|=
literal|"number"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"float"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
operator|||
literal|"java.lang.Float"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|prop
operator|.
name|format
operator|=
literal|"float"
expr_stmt|;
name|prop
operator|.
name|type
operator|=
literal|"number"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"double"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
operator|||
literal|"java.lang.Double"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|prop
operator|.
name|format
operator|=
literal|"double"
expr_stmt|;
name|prop
operator|.
name|type
operator|=
literal|"number"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"boolean"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
operator|||
literal|"java.lang.Boolean"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|prop
operator|.
name|format
operator|=
literal|"boolean"
expr_stmt|;
name|prop
operator|.
name|type
operator|=
literal|"number"
expr_stmt|;
block|}
else|else
block|{
name|prop
operator|.
name|type
operator|=
literal|"string"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|array
condition|)
block|{
name|OasSchema
name|ret
init|=
name|prop
operator|.
name|createItemsSchema
argument_list|()
decl_stmt|;
name|ret
operator|.
name|$ref
operator|=
name|prop
operator|.
name|$ref
expr_stmt|;
name|prop
operator|.
name|$ref
operator|=
literal|null
expr_stmt|;
name|prop
operator|.
name|items
operator|=
name|ret
expr_stmt|;
name|prop
operator|.
name|type
operator|=
literal|"array"
expr_stmt|;
return|return
name|prop
return|;
block|}
else|else
block|{
return|return
name|prop
return|;
block|}
block|}
comment|/**      * If the class is annotated with openApi annotations its parsed into a OpenApi model representation which      * is added to openApi      *      * @param clazz the class such as pojo with openApi annotation      * @param openApi the openApi model      */
DECL|method|appendModels (Class<?> clazz, OasDocument openApi)
specifier|private
name|void
name|appendModels
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|OasDocument
name|openApi
parameter_list|)
block|{
name|RestModelConverters
name|converters
init|=
operator|new
name|RestModelConverters
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|OasSchema
argument_list|>
name|models
init|=
name|converters
operator|.
name|readClass
argument_list|(
name|openApi
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|models
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|OasSchema
name|entry
range|:
name|models
control|)
block|{
comment|// favor keeping any existing model that has the vendor extension in the model
if|if
condition|(
name|openApi
operator|instanceof
name|Oas20Document
condition|)
block|{
name|boolean
name|oldExt
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|Oas20Document
operator|)
name|openApi
operator|)
operator|.
name|definitions
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|Oas20Document
operator|)
name|openApi
operator|)
operator|.
name|definitions
operator|.
name|getDefinition
argument_list|(
operator|(
operator|(
name|Oas20SchemaDefinition
operator|)
name|entry
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Oas20SchemaDefinition
name|oldModel
init|=
operator|(
operator|(
name|Oas20Document
operator|)
name|openApi
operator|)
operator|.
name|definitions
operator|.
name|getDefinition
argument_list|(
operator|(
operator|(
name|Oas20SchemaDefinition
operator|)
name|entry
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldModel
operator|.
name|getExtensions
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|oldModel
operator|.
name|getExtensions
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|oldExt
operator|=
name|oldModel
operator|.
name|getExtension
argument_list|(
literal|"x-className"
argument_list|)
operator|!=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|oldExt
condition|)
block|{
operator|(
operator|(
name|Oas20Document
operator|)
name|openApi
operator|)
operator|.
name|definitions
operator|.
name|addDefinition
argument_list|(
operator|(
operator|(
name|Oas20SchemaDefinition
operator|)
name|entry
operator|)
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|Oas20SchemaDefinition
operator|)
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|openApi
operator|instanceof
name|Oas30Document
condition|)
block|{
name|boolean
name|oldExt
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|Oas30Document
operator|)
name|openApi
operator|)
operator|.
name|components
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|Oas30Document
operator|)
name|openApi
operator|)
operator|.
name|components
operator|.
name|getSchemaDefinition
argument_list|(
operator|(
operator|(
name|Oas30SchemaDefinition
operator|)
name|entry
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Oas30SchemaDefinition
name|oldModel
init|=
operator|(
operator|(
name|Oas30Document
operator|)
name|openApi
operator|)
operator|.
name|components
operator|.
name|getSchemaDefinition
argument_list|(
operator|(
operator|(
name|Oas30SchemaDefinition
operator|)
name|entry
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldModel
operator|.
name|getExtensions
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|oldModel
operator|.
name|getExtensions
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|oldExt
operator|=
name|oldModel
operator|.
name|getExtension
argument_list|(
literal|"x-className"
argument_list|)
operator|!=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|oldExt
condition|)
block|{
operator|(
operator|(
name|Oas30Document
operator|)
name|openApi
operator|)
operator|.
name|components
operator|.
name|addSchemaDefinition
argument_list|(
operator|(
operator|(
name|Oas30SchemaDefinition
operator|)
name|entry
operator|)
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|Oas30SchemaDefinition
operator|)
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * To sort the rest operations      */
DECL|class|VerbOrdering
specifier|private
specifier|static
class|class
name|VerbOrdering
implements|implements
name|Comparator
argument_list|<
name|VerbDefinition
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (VerbDefinition a, VerbDefinition b)
specifier|public
name|int
name|compare
parameter_list|(
name|VerbDefinition
name|a
parameter_list|,
name|VerbDefinition
name|b
parameter_list|)
block|{
name|String
name|u1
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// replace { with _ which comes before a when soring by char
name|u1
operator|=
name|a
operator|.
name|getUri
argument_list|()
operator|.
name|replace
argument_list|(
literal|"{"
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
block|}
name|String
name|u2
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|getUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// replace { with _ which comes before a when soring by char
name|u2
operator|=
name|b
operator|.
name|getUri
argument_list|()
operator|.
name|replace
argument_list|(
literal|"{"
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
block|}
name|int
name|num
init|=
name|u1
operator|.
name|compareTo
argument_list|(
name|u2
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|==
literal|0
condition|)
block|{
comment|// same uri, so use http method as sorting
name|num
operator|=
name|a
operator|.
name|asVerb
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|asVerb
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|num
return|;
block|}
block|}
block|}
end_class

end_unit

