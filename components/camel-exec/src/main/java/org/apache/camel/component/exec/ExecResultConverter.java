begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.exec
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Default converters for {@link ExecResult}. For details how to extend the  * converters check out<a  * href="http://camel.apache.org/type-converter.html">the Camel docs for type  * converters.</a>  */
end_comment

begin_class
annotation|@
name|Converter
DECL|class|ExecResultConverter
specifier|public
specifier|final
class|class
name|ExecResultConverter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ExecResultConverter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ExecResultConverter ()
specifier|private
name|ExecResultConverter
parameter_list|()
block|{     }
annotation|@
name|Converter
DECL|method|convertToInputStream (ExecResult result)
specifier|public
specifier|static
name|InputStream
name|convertToInputStream
parameter_list|(
name|ExecResult
name|result
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
return|return
name|toInputStream
argument_list|(
name|result
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|convertToString (ExecResult result, Exchange exchange)
specifier|public
specifier|static
name|String
name|convertToString
parameter_list|(
name|ExecResult
name|result
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
return|return
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|result
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|convertToDocument (ExecResult result, Exchange exchange)
specifier|public
specifier|static
name|Document
name|convertToDocument
parameter_list|(
name|ExecResult
name|result
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
return|return
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|result
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|convertToByteArray (ExecResult result, Exchange exchange)
specifier|public
specifier|static
name|byte
index|[]
name|convertToByteArray
parameter_list|(
name|ExecResult
name|result
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
return|return
name|convertTo
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|exchange
argument_list|,
name|result
argument_list|)
return|;
block|}
comment|/**      * Converts<code>ExecResult</code> to the type<code>T</code>.      *       * @param<T> The type to convert to      * @param type Class instance of the type to which to convert      * @param exchange a Camel exchange. If exchange is<code>null</code>, no      *            conversion will be made      * @param result      * @return the converted {@link ExecResult}      * @throws FileNotFoundException if theres is a file in the execResult, and      *             the file can not be found      */
DECL|method|convertTo (Class<T> type, Exchange exchange, ExecResult result)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|convertTo
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|ExecResult
name|result
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|exchange
argument_list|,
name|toInputStream
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|// should revert to fallback converter if we don't have an exchange
return|return
literal|null
return|;
block|}
block|}
comment|/**      * If the ExecResult contains out file,      *<code>InputStream<code> with the output of the<code>execResult</code>.      * If there is {@link ExecCommand#getOutFile()}, its content is preferred to      * {@link ExecResult#getStdout()}      *       * @param execResult ExecResult object.      * @return InputStream object      * @throws FileNotFoundException if the {@link ExecResult#getOutFile()} is      *             not<code>null</code>, but can not be found      */
DECL|method|toInputStream (ExecResult execResult)
specifier|public
specifier|static
name|InputStream
name|toInputStream
parameter_list|(
name|ExecResult
name|execResult
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
if|if
condition|(
name|execResult
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to convert a null exec result!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|InputStream
name|resultVal
init|=
name|execResult
operator|.
name|getStdout
argument_list|()
decl_stmt|;
comment|// prefer generic file conversion
if|if
condition|(
name|execResult
operator|.
name|getCommand
argument_list|()
operator|.
name|getOutFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|resultVal
operator|=
operator|new
name|FileInputStream
argument_list|(
name|execResult
operator|.
name|getCommand
argument_list|()
operator|.
name|getOutFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|resultVal
return|;
block|}
block|}
end_class

end_unit

