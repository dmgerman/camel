begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.exec.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
operator|.
name|ExecBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
operator|.
name|ExecCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
operator|.
name|ExecEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
operator|.
name|ExecResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
operator|.
name|impl
operator|.
name|ExecParseUtils
operator|.
name|splitToWhiteSpaceSeparatedTokens
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link ExecBinding}.  *   * @see DefaultExecBinding#writeOutputInMessage(Message, ExecResult)  */
end_comment

begin_class
DECL|class|DefaultExecBinding
specifier|public
class|class
name|DefaultExecBinding
implements|implements
name|ExecBinding
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultExecBinding
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|readInput (Exchange exchange, ExecEndpoint endpoint)
specifier|public
name|ExecCommand
name|readInput
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|ExecEndpoint
name|endpoint
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|exchange
argument_list|,
literal|"exchange"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|endpoint
argument_list|,
literal|"endpoint"
argument_list|)
expr_stmt|;
comment|// do not convert args as we do that manually later
name|Object
name|args
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|EXEC_COMMAND_ARGS
argument_list|)
decl_stmt|;
name|String
name|cmd
init|=
name|getAndRemoveHeader
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|EXEC_COMMAND_EXECUTABLE
argument_list|,
name|endpoint
operator|.
name|getExecutable
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|dir
init|=
name|getAndRemoveHeader
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|EXEC_COMMAND_WORKING_DIR
argument_list|,
name|endpoint
operator|.
name|getWorkingDir
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|timeout
init|=
name|getAndRemoveHeader
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|EXEC_COMMAND_TIMEOUT
argument_list|,
name|endpoint
operator|.
name|getTimeout
argument_list|()
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|outFilePath
init|=
name|getAndRemoveHeader
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|EXEC_COMMAND_OUT_FILE
argument_list|,
name|endpoint
operator|.
name|getOutFile
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|useStderrOnEmptyStdout
init|=
name|getAndRemoveHeader
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|EXEC_USE_STDERR_ON_EMPTY_STDOUT
argument_list|,
name|endpoint
operator|.
name|isUseStderrOnEmptyStdout
argument_list|()
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|InputStream
name|input
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// try to convert args to list at fist
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|argsList
operator|==
literal|null
condition|)
block|{
comment|// no we could not do that, then parse it as a string to a list
name|String
name|s
init|=
name|endpoint
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
comment|// use args from header instead from endpoint
name|s
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parsing argument String to a List: "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|argsList
operator|=
name|splitToWhiteSpaceSeparatedTokens
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|File
name|outFile
init|=
name|outFilePath
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|File
argument_list|(
name|outFilePath
argument_list|)
decl_stmt|;
return|return
operator|new
name|ExecCommand
argument_list|(
name|cmd
argument_list|,
name|argsList
argument_list|,
name|dir
argument_list|,
name|timeout
argument_list|,
name|input
argument_list|,
name|outFile
argument_list|,
name|useStderrOnEmptyStdout
argument_list|)
return|;
block|}
DECL|method|writeOutput (Exchange exchange, ExecResult result)
specifier|public
name|void
name|writeOutput
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|ExecResult
name|result
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|exchange
argument_list|,
literal|"exchange"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|result
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getPattern
argument_list|()
operator|.
name|isOutCapable
argument_list|()
condition|)
block|{
name|writeOutputInMessage
argument_list|(
name|exchange
operator|.
name|getOut
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|putAll
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeOutputInMessage
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Write the {@link ExecResult} in the message body. Write the stderr and      * the exit value for convenience in the message headers.<br>      * The stdout and/or resultFile should be accessible using a converter or      * using the result object directly.      *       * @param message a Camel message      * @param result an {@link ExecResult} instance      */
DECL|method|writeOutputInMessage (Message message, ExecResult result)
specifier|protected
name|void
name|writeOutputInMessage
parameter_list|(
name|Message
name|message
parameter_list|,
name|ExecResult
name|result
parameter_list|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|EXEC_STDERR
argument_list|,
name|result
operator|.
name|getStderr
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|EXEC_EXIT_VALUE
argument_list|,
name|result
operator|.
name|getExitValue
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets and removes the<code><code>headerName</code> header form the input      *<code>message</code> (the header will not be propagated)      */
DECL|method|getAndRemoveHeader (Message message, String headerName, T defaultValue, Class<T> headerType)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|getAndRemoveHeader
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|headerName
parameter_list|,
name|T
name|defaultValue
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|headerType
parameter_list|)
block|{
name|T
name|h
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|,
name|defaultValue
argument_list|,
name|headerType
argument_list|)
decl_stmt|;
name|message
operator|.
name|removeHeader
argument_list|(
name|headerName
argument_list|)
expr_stmt|;
return|return
name|h
return|;
block|}
block|}
end_class

end_unit

