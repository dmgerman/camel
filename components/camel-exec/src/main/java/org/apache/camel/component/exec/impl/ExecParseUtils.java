begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.exec.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  * Utility class for parsing, used by the Camel Exec component.  */
end_comment

begin_class
DECL|class|ExecParseUtils
specifier|public
specifier|final
class|class
name|ExecParseUtils
block|{
DECL|field|WHITESPACE
specifier|public
specifier|static
specifier|final
name|String
name|WHITESPACE
init|=
literal|" "
decl_stmt|;
DECL|field|QUOTE_CHAR
specifier|public
specifier|static
specifier|final
name|String
name|QUOTE_CHAR
init|=
literal|"\""
decl_stmt|;
DECL|method|ExecParseUtils ()
specifier|private
name|ExecParseUtils
parameter_list|()
block|{     }
comment|/**      * Splits the input line string by {@link #WHITESPACE}. Supports quoting the      * white-spaces with a {@link #QUOTE_CHAR}. A quote itself can also be      * quoted with another #{@link #QUOTE_CHAR}. More than two quotes in a      * sequence is not allowed<br>      * E.g. The string      *<code>"arg 1"  arg2<code> will return the tokens<code>arg 1</code>,      *<code>arg2</code><br>      * The string      *<code>""arg 1""  "arg2" arg 3<code> will return the tokens<code>"arg 1"</code>      * ,<code>arg2</code>,<code>arg</code> and<code>3</code><br>      *       * @param input      * @return a list of {@link #WHITESPACE} separated tokens      */
DECL|method|splitToWhiteSpaceSeparatedTokens (String input)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|splitToWhiteSpaceSeparatedTokens
parameter_list|(
name|String
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
block|}
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|input
operator|.
name|trim
argument_list|()
argument_list|,
name|QUOTE_CHAR
operator|+
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|quotedText
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|QUOTE_CHAR
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
comment|// if we have a quote, add the next tokens to the quoted text
comment|// until the quoting has finished
name|quotedText
operator|.
name|append
argument_list|(
name|QUOTE_CHAR
argument_list|)
expr_stmt|;
name|String
name|buffer
init|=
name|quotedText
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSingleQuoted
argument_list|(
name|buffer
argument_list|)
operator|||
name|isDoubleQuoted
argument_list|(
name|buffer
argument_list|)
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
name|buffer
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|buffer
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|quotedText
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|WHITESPACE
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
comment|// a white space, if in quote, add the white space, otherwise
comment|// skip it
if|if
condition|(
name|quotedText
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|quotedText
operator|.
name|append
argument_list|(
name|WHITESPACE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|quotedText
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|quotedText
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|args
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|quotedText
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid quoting found in args "
operator|+
name|quotedText
argument_list|)
throw|;
block|}
return|return
name|args
return|;
block|}
comment|/**      * Tests if the input is enclosed within {@link #QUOTE_CHAR} characters      *       * @param input a not null String      * @return      */
DECL|method|isSingleQuoted (String input)
specifier|protected
specifier|static
name|boolean
name|isSingleQuoted
parameter_list|(
name|String
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|==
literal|null
operator|||
name|input
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|input
operator|.
name|matches
argument_list|(
literal|"(^"
operator|+
name|QUOTE_CHAR
operator|+
literal|"{1}([^"
operator|+
name|QUOTE_CHAR
operator|+
literal|"]+)"
operator|+
name|QUOTE_CHAR
operator|+
literal|"{1})"
argument_list|)
return|;
block|}
comment|/**      * Tests if the input is enclosed within a double-{@link #QUOTE_CHAR} string      *       * @param input a not null String      * @return true if the regular expression is matched      */
DECL|method|isDoubleQuoted (String input)
specifier|protected
specifier|static
name|boolean
name|isDoubleQuoted
parameter_list|(
name|String
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|==
literal|null
operator|||
name|input
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|input
operator|.
name|matches
argument_list|(
literal|"(^"
operator|+
name|QUOTE_CHAR
operator|+
literal|"{2}([^"
operator|+
name|QUOTE_CHAR
operator|+
literal|"]+)"
operator|+
name|QUOTE_CHAR
operator|+
literal|"{2})"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

