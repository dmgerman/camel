begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.exec
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
import|;
end_import

begin_comment
comment|/**  * Value object that describes the command to be executed.  */
end_comment

begin_class
DECL|class|ExecCommand
specifier|public
class|class
name|ExecCommand
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1755094616849607573L
decl_stmt|;
comment|/**      * @see ExecBinding#EXEC_COMMAND_EXECUTABLE      */
DECL|field|executable
specifier|private
specifier|final
name|String
name|executable
decl_stmt|;
comment|/**      * @see ExecBinding#EXEC_COMMAND_ARGS      */
DECL|field|args
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
decl_stmt|;
comment|/**      * @see ExecBinding#EXEC_COMMAND_WORKING_DIR      */
DECL|field|workingDir
specifier|private
specifier|final
name|String
name|workingDir
decl_stmt|;
comment|/**      * @see ExecBinding#EXEC_COMMAND_TIMEOUT      */
DECL|field|timeout
specifier|private
specifier|final
name|long
name|timeout
decl_stmt|;
comment|/**      * @see ExecBinding#EXEC_COMMAND_OUT_FILE      */
DECL|field|outFile
specifier|private
specifier|final
name|File
name|outFile
decl_stmt|;
comment|/**      * The input of the executable      */
DECL|field|input
specifier|private
specifier|final
name|InputStream
name|input
decl_stmt|;
DECL|field|useStderrOnEmptyStdout
specifier|private
specifier|final
name|boolean
name|useStderrOnEmptyStdout
decl_stmt|;
DECL|method|ExecCommand (String executable, List<String> args, String workingDir, Long timeout, InputStream input, File outFile, boolean useStderrOnEmptyStdout)
specifier|public
name|ExecCommand
parameter_list|(
name|String
name|executable
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|,
name|String
name|workingDir
parameter_list|,
name|Long
name|timeout
parameter_list|,
name|InputStream
name|input
parameter_list|,
name|File
name|outFile
parameter_list|,
name|boolean
name|useStderrOnEmptyStdout
parameter_list|)
block|{
name|notNull
argument_list|(
name|executable
argument_list|,
literal|"command executable"
argument_list|)
expr_stmt|;
name|this
operator|.
name|executable
operator|=
name|executable
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|unmodifiableOrEmptyList
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|this
operator|.
name|workingDir
operator|=
name|workingDir
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|outFile
operator|=
name|outFile
expr_stmt|;
name|this
operator|.
name|useStderrOnEmptyStdout
operator|=
name|useStderrOnEmptyStdout
expr_stmt|;
block|}
DECL|method|getArgs ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getArgs
parameter_list|()
block|{
return|return
name|args
return|;
block|}
DECL|method|getExecutable ()
specifier|public
name|String
name|getExecutable
parameter_list|()
block|{
return|return
name|executable
return|;
block|}
DECL|method|getInput ()
specifier|public
name|InputStream
name|getInput
parameter_list|()
block|{
return|return
name|input
return|;
block|}
DECL|method|getOutFile ()
specifier|public
name|File
name|getOutFile
parameter_list|()
block|{
return|return
name|outFile
return|;
block|}
DECL|method|getTimeout ()
specifier|public
name|long
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
DECL|method|getWorkingDir ()
specifier|public
name|String
name|getWorkingDir
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
DECL|method|isUseStderrOnEmptyStdout ()
specifier|public
name|boolean
name|isUseStderrOnEmptyStdout
parameter_list|()
block|{
return|return
name|useStderrOnEmptyStdout
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|dirToPrint
init|=
name|workingDir
operator|==
literal|null
condition|?
literal|"null"
else|:
name|workingDir
decl_stmt|;
name|String
name|outFileToPrint
init|=
name|outFile
operator|==
literal|null
condition|?
literal|"null"
else|:
name|outFile
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
literal|"ExecCommand [args="
operator|+
name|args
operator|+
literal|", executable="
operator|+
name|executable
operator|+
literal|", timeout="
operator|+
name|timeout
operator|+
literal|", outFile="
operator|+
name|outFileToPrint
operator|+
literal|", workingDir="
operator|+
name|dirToPrint
operator|+
literal|", useStderrOnEmptyStdout="
operator|+
name|useStderrOnEmptyStdout
operator|+
literal|"]"
return|;
block|}
DECL|method|unmodifiableOrEmptyList (List<T> list)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|unmodifiableOrEmptyList
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|list
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
else|:
name|list
argument_list|)
return|;
block|}
block|}
end_class

end_unit

