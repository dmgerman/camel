begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.exec.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
operator|.
name|ExecResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
operator|.
name|ExecTestUtils
operator|.
name|buildJavaExecutablePath
import|;
end_import

begin_comment
comment|/**  * The tests are ignored by default, because they are OS-specific. On demand  * they can be run manually to validate the documentation examples for that OS.  */
end_comment

begin_class
DECL|class|ExecDocumentationExamplesTest
specifier|public
class|class
name|ExecDocumentationExamplesTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|ANT_BUILD_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ANT_BUILD_FILE_NAME
init|=
literal|"CamelExecTestAntBuildFile.xml"
decl_stmt|;
DECL|field|ANT_OUT_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ANT_OUT_FILE_NAME
init|=
literal|"CamelExecOutFile.txt"
decl_stmt|;
DECL|field|ANT_BUILD_FILE_CONTENT
specifier|private
specifier|static
specifier|final
name|String
name|ANT_BUILD_FILE_CONTENT
init|=
name|buildAntFileContent
argument_list|()
decl_stmt|;
DECL|field|TEST_MSG
specifier|private
specifier|static
specifier|final
name|String
name|TEST_MSG
init|=
literal|"Hello Camel Exec!"
decl_stmt|;
annotation|@
name|Produce
argument_list|(
literal|"direct:javaVersion"
argument_list|)
DECL|field|templateJavaVersion
specifier|protected
name|ProducerTemplate
name|templateJavaVersion
decl_stmt|;
annotation|@
name|Produce
argument_list|(
literal|"direct:javaVersionWorkingDir"
argument_list|)
DECL|field|templateJavaVersionWorkingDir
specifier|protected
name|ProducerTemplate
name|templateJavaVersionWorkingDir
decl_stmt|;
annotation|@
name|Produce
argument_list|(
literal|"direct:execAnt"
argument_list|)
DECL|field|templateExecAnt
specifier|protected
name|ProducerTemplate
name|templateExecAnt
decl_stmt|;
annotation|@
name|Produce
argument_list|(
literal|"direct:execAntWithOutFile"
argument_list|)
DECL|field|templateExecAntWithOutFile
specifier|protected
name|ProducerTemplate
name|templateExecAntWithOutFile
decl_stmt|;
annotation|@
name|Produce
argument_list|(
literal|"direct:wordCount"
argument_list|)
DECL|field|templateWordCount
specifier|protected
name|ProducerTemplate
name|templateWordCount
decl_stmt|;
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testExecLinuxWordCount ()
specifier|public
name|void
name|testExecLinuxWordCount
parameter_list|()
throws|throws
name|Exception
block|{
comment|// use type conversion here
name|ExecResult
name|body
init|=
name|templateWordCount
operator|.
name|requestBody
argument_list|(
operator|(
name|Object
operator|)
literal|"test"
argument_list|,
name|ExecResult
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
comment|/**      * The test assumes, that java is in the system path      */
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testJavaVersion ()
specifier|public
name|void
name|testJavaVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecResult
name|body
init|=
name|templateJavaVersion
operator|.
name|requestBody
argument_list|(
operator|(
name|Object
operator|)
literal|"test"
argument_list|,
name|ExecResult
operator|.
name|class
argument_list|)
decl_stmt|;
name|InputStream
name|out
init|=
name|body
operator|.
name|getStdout
argument_list|()
decl_stmt|;
name|InputStream
name|err
init|=
name|body
operator|.
name|getStderr
argument_list|()
decl_stmt|;
comment|// Strange that Sun Java 1.5 writes the -version in the syserr
name|assertNull
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|String
name|outString
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|err
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Received stdout: "
operator|+
name|outString
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outString
operator|.
name|contains
argument_list|(
literal|"java version"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testWinJavaVersionWorkingDir ()
specifier|public
name|void
name|testWinJavaVersionWorkingDir
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecResult
name|body
init|=
name|templateJavaVersionWorkingDir
operator|.
name|requestBody
argument_list|(
operator|(
name|Object
operator|)
literal|"test"
argument_list|,
name|ExecResult
operator|.
name|class
argument_list|)
decl_stmt|;
name|InputStream
name|out
init|=
name|body
operator|.
name|getStdout
argument_list|()
decl_stmt|;
name|InputStream
name|err
init|=
name|body
operator|.
name|getStderr
argument_list|()
decl_stmt|;
comment|// Strange that Sun Java 1.5 writes the -version in the syserr
name|assertNull
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|String
name|outerr
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|err
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Received stderr: "
operator|+
name|outerr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outerr
operator|.
name|contains
argument_list|(
literal|"java version"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * The test assumes that Apache ant is installed      */
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testExecWinAnt ()
specifier|public
name|void
name|testExecWinAnt
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|ANT_BUILD_FILE_NAME
argument_list|)
decl_stmt|;
name|f
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|f
argument_list|,
name|ANT_BUILD_FILE_CONTENT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"You must create a sample build file!"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|ExecResult
name|body
init|=
name|templateExecAnt
operator|.
name|requestBody
argument_list|(
operator|(
name|Object
operator|)
literal|"test"
argument_list|,
name|ExecResult
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|stdout
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|body
operator|.
name|getStdout
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|body
operator|.
name|getStderr
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The ant script should print"
operator|+
name|TEST_MSG
argument_list|,
name|stdout
operator|.
name|contains
argument_list|(
name|TEST_MSG
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/**      * The test assumes that Apache ant is installed      */
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testExecWinAntWithOutFile ()
specifier|public
name|void
name|testExecWinAntWithOutFile
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|ANT_BUILD_FILE_NAME
argument_list|)
decl_stmt|;
name|f
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|writeStringToFile
argument_list|(
name|f
argument_list|,
name|ANT_BUILD_FILE_CONTENT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"You must create a sample build file!"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// use type conversion here
name|InputStream
name|body
init|=
name|templateExecAntWithOutFile
operator|.
name|requestBody
argument_list|(
operator|(
name|Object
operator|)
literal|"test"
argument_list|,
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|bodyString
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|body
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The ant script should print"
operator|+
name|TEST_MSG
argument_list|,
name|bodyString
operator|.
name|contains
argument_list|(
name|TEST_MSG
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// word count
name|from
argument_list|(
literal|"direct:wordCount"
argument_list|)
operator|.
name|to
argument_list|(
literal|"exec:wc?args=--words /usr/share/dict/words"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// By default, the body is ExecResult instance
name|assertIsInstanceOf
argument_list|(
name|ExecResult
operator|.
name|class
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
comment|// Use the Camel Exec String type converter to
comment|// convert the ExecResult to String
comment|// In this case, the stdout is considered as output
name|String
name|wordCountOutput
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// do something with the output
name|log
operator|.
name|info
argument_list|(
name|wordCountOutput
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// example 1 in the component docs
name|from
argument_list|(
literal|"direct:javaVersion"
argument_list|)
operator|.
name|to
argument_list|(
literal|"exec:java?args=-version -server"
argument_list|)
expr_stmt|;
comment|// example 2 in the component docs
name|from
argument_list|(
literal|"direct:javaVersionWorkingDir"
argument_list|)
operator|.
name|to
argument_list|(
literal|"exec:"
operator|+
name|buildJavaExecutablePath
argument_list|()
operator|+
literal|"?args=-version -Duser.name=Camel&workingDir=C:/temp"
argument_list|)
expr_stmt|;
comment|// advanced, test ant
name|from
argument_list|(
literal|"direct:execAnt"
argument_list|)
operator|.
name|to
argument_list|(
literal|"exec:ant.bat?args=-f "
operator|+
name|ANT_BUILD_FILE_NAME
argument_list|)
expr_stmt|;
comment|// advanced, test ant with out file
name|from
argument_list|(
literal|"direct:execAntWithOutFile"
argument_list|)
operator|.
name|to
argument_list|(
literal|"exec:ant.bat?args=-f "
operator|+
name|ANT_BUILD_FILE_NAME
operator|+
literal|" -l "
operator|+
name|ANT_OUT_FILE_NAME
operator|+
literal|"&outFile="
operator|+
name|ANT_OUT_FILE_NAME
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|outFile
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// do something with the out file here
name|log
operator|.
name|info
argument_list|(
name|IOUtils
operator|.
name|toString
argument_list|(
name|outFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|buildAntFileContent ()
specifier|private
specifier|static
name|String
name|buildAntFileContent
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"<project name=\"TestExec\" default=\"test\" basedir=\".\">"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"<target name=\"test\">"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"<echo message=\""
operator|+
name|TEST_MSG
operator|+
literal|"\"/>"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"</target>"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"</project>"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

