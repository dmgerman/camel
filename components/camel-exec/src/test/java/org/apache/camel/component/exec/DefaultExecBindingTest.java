begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.exec
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
operator|.
name|impl
operator|.
name|DefaultExecBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|DefaultExecBindingTest
specifier|public
class|class
name|DefaultExecBindingTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testReadInput ()
specifier|public
name|void
name|testReadInput
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecCommand
name|command
init|=
name|readInput
argument_list|(
literal|"exec:test"
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Get a wrong args."
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|command
operator|.
name|getArgs
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"arg1"
argument_list|,
literal|"arg2"
argument_list|)
decl_stmt|;
name|command
operator|=
name|readInput
argument_list|(
literal|"exec:test"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong args."
argument_list|,
name|args
argument_list|,
name|command
operator|.
name|getArgs
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|=
name|readInput
argument_list|(
literal|"exec:test"
argument_list|,
literal|"arg1 arg2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong args."
argument_list|,
name|args
argument_list|,
name|command
operator|.
name|getArgs
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|=
name|readInput
argument_list|(
literal|"exec:test?args=arg1 arg2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong args."
argument_list|,
name|args
argument_list|,
name|command
operator|.
name|getArgs
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|readInput (String execEndpointUri, Object args)
specifier|private
name|ExecCommand
name|readInput
parameter_list|(
name|String
name|execEndpointUri
parameter_list|,
name|Object
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|DefaultExecBinding
name|binding
init|=
operator|new
name|DefaultExecBinding
argument_list|()
decl_stmt|;
name|ExecEndpoint
name|execEndpoint
init|=
name|createExecEndpoint
argument_list|(
name|execEndpointUri
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|execEndpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|ExecBinding
operator|.
name|EXEC_COMMAND_ARGS
argument_list|,
name|args
argument_list|)
expr_stmt|;
return|return
name|binding
operator|.
name|readInput
argument_list|(
name|exchange
argument_list|,
name|execEndpoint
argument_list|)
return|;
block|}
DECL|method|createExecEndpoint (String uri)
specifier|private
name|ExecEndpoint
name|createExecEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|Component
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"exec"
argument_list|)
decl_stmt|;
return|return
operator|(
name|ExecEndpoint
operator|)
name|component
operator|.
name|createEndpoint
argument_list|(
name|uri
argument_list|)
return|;
block|}
block|}
end_class

end_unit

