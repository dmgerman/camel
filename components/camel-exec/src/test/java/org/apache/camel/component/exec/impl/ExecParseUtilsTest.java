begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.exec.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
operator|.
name|impl
operator|.
name|ExecParseUtils
operator|.
name|isDoubleQuoted
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
operator|.
name|impl
operator|.
name|ExecParseUtils
operator|.
name|isSingleQuoted
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|exec
operator|.
name|impl
operator|.
name|ExecParseUtils
operator|.
name|splitToWhiteSpaceSeparatedTokens
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ExecParseUtils}  */
end_comment

begin_class
DECL|class|ExecParseUtilsTest
specifier|public
class|class
name|ExecParseUtilsTest
block|{
annotation|@
name|Test
DECL|method|testSingleQuoted ()
specifier|public
name|void
name|testSingleQuoted
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|isSingleQuoted
argument_list|(
literal|"\"c:\\program files\\test\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleQuoted2 ()
specifier|public
name|void
name|testSingleQuoted2
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|isSingleQuoted
argument_list|(
literal|"\"with space\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleQuotedNegative ()
specifier|public
name|void
name|testSingleQuotedNegative
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|isSingleQuoted
argument_list|(
literal|"arg 0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleQuotedNegative2 ()
specifier|public
name|void
name|testSingleQuotedNegative2
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|isSingleQuoted
argument_list|(
literal|"\" \" space not allowed between quotes \""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleQuotedNegative3 ()
specifier|public
name|void
name|testSingleQuotedNegative3
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|isSingleQuoted
argument_list|(
literal|"\"\"double quoted is not single quoted\"\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptySingleQuotedNegative ()
specifier|public
name|void
name|testEmptySingleQuotedNegative
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|isSingleQuoted
argument_list|(
literal|"\"\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptySingleQuotedNegative2 ()
specifier|public
name|void
name|testEmptySingleQuotedNegative2
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|isSingleQuoted
argument_list|(
literal|"\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoubleQuoted ()
specifier|public
name|void
name|testDoubleQuoted
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|isDoubleQuoted
argument_list|(
literal|"\"\"c:\\program files\\test\\\"\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyDoubleQuotedNegative ()
specifier|public
name|void
name|testEmptyDoubleQuotedNegative
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|isDoubleQuoted
argument_list|(
literal|"\"\"\"\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWhiteSpaceSeparatedArgs ()
specifier|public
name|void
name|testWhiteSpaceSeparatedArgs
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|splitToWhiteSpaceSeparatedTokens
argument_list|(
literal|"arg0 arg1 arg2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"arg0"
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"arg1"
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"arg2"
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWhiteSpaceQuoted ()
specifier|public
name|void
name|testWhiteSpaceQuoted
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|splitToWhiteSpaceSeparatedTokens
argument_list|(
literal|"\"arg 0\""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"arg 0"
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTwoQuotings ()
specifier|public
name|void
name|testTwoQuotings
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|splitToWhiteSpaceSeparatedTokens
argument_list|(
literal|"\"arg 0\" \"arg 1\""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"arg 0"
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"arg 1"
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWhitespaceSeparatedArgsWithSpaces ()
specifier|public
name|void
name|testWhitespaceSeparatedArgsWithSpaces
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|splitToWhiteSpaceSeparatedTokens
argument_list|(
literal|"\"arg 0 \"   arg1 \"arg 2\""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"arg 0 "
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"arg1"
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"arg 2"
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoubleQuote ()
specifier|public
name|void
name|testDoubleQuote
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|splitToWhiteSpaceSeparatedTokens
argument_list|(
literal|"\"\"arg0\"\""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"\"arg0\""
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoubleQuoteAndSpace ()
specifier|public
name|void
name|testDoubleQuoteAndSpace
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|splitToWhiteSpaceSeparatedTokens
argument_list|(
literal|"\"\"arg0\"\" arg1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"\"arg0\""
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"arg1"
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTwoDoubleQuotes ()
specifier|public
name|void
name|testTwoDoubleQuotes
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|splitToWhiteSpaceSeparatedTokens
argument_list|(
literal|"\"\"arg0\"\" \"\"arg1\"\""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"\"arg0\""
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\"arg1\""
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testWhiteSpaceSeparatedArgsNotClosed ()
specifier|public
name|void
name|testWhiteSpaceSeparatedArgsNotClosed
parameter_list|()
block|{
name|splitToWhiteSpaceSeparatedTokens
argument_list|(
literal|"arg 0 \" arg1 \"arg 2\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testInvalidQuotes ()
specifier|public
name|void
name|testInvalidQuotes
parameter_list|()
block|{
name|splitToWhiteSpaceSeparatedTokens
argument_list|(
literal|"\"\"arg 0 \" arg1 \"arg 2\""
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

