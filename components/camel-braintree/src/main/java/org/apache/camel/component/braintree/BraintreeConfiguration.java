begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.braintree
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|BraintreeGateway
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
operator|.
name|internal
operator|.
name|BraintreeApiName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
operator|.
name|internal
operator|.
name|BraintreeLogHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Component configuration for Braintree component.  */
end_comment

begin_class
annotation|@
name|UriParams
DECL|class|BraintreeConfiguration
specifier|public
class|class
name|BraintreeConfiguration
block|{
DECL|field|ENVIRONMENT
specifier|private
specifier|static
specifier|final
name|String
name|ENVIRONMENT
init|=
literal|"environment"
decl_stmt|;
DECL|field|MERCHANT_ID
specifier|private
specifier|static
specifier|final
name|String
name|MERCHANT_ID
init|=
literal|"merchant_id"
decl_stmt|;
DECL|field|PUBLIC_KEY
specifier|private
specifier|static
specifier|final
name|String
name|PUBLIC_KEY
init|=
literal|"public_key"
decl_stmt|;
DECL|field|PRIVATE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|PRIVATE_KEY
init|=
literal|"private_key"
decl_stmt|;
DECL|field|ACCESS_TOKEN
specifier|private
specifier|static
specifier|final
name|String
name|ACCESS_TOKEN
init|=
literal|"access_token"
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|apiName
specifier|private
name|BraintreeApiName
name|apiName
decl_stmt|;
annotation|@
name|UriPath
DECL|field|methodName
specifier|private
name|String
name|methodName
decl_stmt|;
annotation|@
name|UriParam
DECL|field|environment
specifier|private
name|String
name|environment
decl_stmt|;
annotation|@
name|UriParam
DECL|field|merchantId
specifier|private
name|String
name|merchantId
decl_stmt|;
annotation|@
name|UriParam
DECL|field|publicKey
specifier|private
name|String
name|publicKey
decl_stmt|;
annotation|@
name|UriParam
DECL|field|privateKey
specifier|private
name|String
name|privateKey
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|accessToken
specifier|private
name|String
name|accessToken
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"proxy"
argument_list|)
DECL|field|proxyHost
specifier|private
name|String
name|proxyHost
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"proxy"
argument_list|)
DECL|field|proxyPort
specifier|private
name|Integer
name|proxyPort
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|javaType
operator|=
literal|"java.lang.String"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced,logging"
argument_list|)
DECL|field|httpLogLevel
specifier|private
name|Level
name|httpLogLevel
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced,logging"
argument_list|)
DECL|field|httpLogName
specifier|private
name|String
name|httpLogName
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|httpReadTimeout
specifier|private
name|Integer
name|httpReadTimeout
decl_stmt|;
DECL|method|getApiName ()
specifier|public
name|BraintreeApiName
name|getApiName
parameter_list|()
block|{
return|return
name|apiName
return|;
block|}
comment|/**      * What kind of operation to perform      */
DECL|method|setApiName (BraintreeApiName apiName)
specifier|public
name|void
name|setApiName
parameter_list|(
name|BraintreeApiName
name|apiName
parameter_list|)
block|{
name|this
operator|.
name|apiName
operator|=
name|apiName
expr_stmt|;
block|}
DECL|method|getMethodName ()
specifier|public
name|String
name|getMethodName
parameter_list|()
block|{
return|return
name|methodName
return|;
block|}
comment|/**      * What sub operation to use for the selected operation      */
DECL|method|setMethodName (String methodName)
specifier|public
name|void
name|setMethodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
block|}
DECL|method|getEnvironment ()
specifier|public
name|String
name|getEnvironment
parameter_list|()
block|{
return|return
name|environment
return|;
block|}
comment|/**      * The environment Either SANDBOX or PRODUCTION      */
DECL|method|setEnvironment (String environment)
specifier|public
name|void
name|setEnvironment
parameter_list|(
name|String
name|environment
parameter_list|)
block|{
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
block|}
DECL|method|getMerchantId ()
specifier|public
name|String
name|getMerchantId
parameter_list|()
block|{
return|return
name|merchantId
return|;
block|}
comment|/**      * The merchant id provided by Braintree.      */
DECL|method|setMerchantId (String merchantId)
specifier|public
name|void
name|setMerchantId
parameter_list|(
name|String
name|merchantId
parameter_list|)
block|{
name|this
operator|.
name|merchantId
operator|=
name|merchantId
expr_stmt|;
block|}
DECL|method|getPublicKey ()
specifier|public
name|String
name|getPublicKey
parameter_list|()
block|{
return|return
name|publicKey
return|;
block|}
comment|/**      * The public key provided by Braintree.      */
DECL|method|setPublicKey (String publicKey)
specifier|public
name|void
name|setPublicKey
parameter_list|(
name|String
name|publicKey
parameter_list|)
block|{
name|this
operator|.
name|publicKey
operator|=
name|publicKey
expr_stmt|;
block|}
DECL|method|getPrivateKey ()
specifier|public
name|String
name|getPrivateKey
parameter_list|()
block|{
return|return
name|privateKey
return|;
block|}
comment|/**      * The private key provided by Braintree.      */
DECL|method|setPrivateKey (String privateKey)
specifier|public
name|void
name|setPrivateKey
parameter_list|(
name|String
name|privateKey
parameter_list|)
block|{
name|this
operator|.
name|privateKey
operator|=
name|privateKey
expr_stmt|;
block|}
DECL|method|getAccessToken ()
specifier|public
name|String
name|getAccessToken
parameter_list|()
block|{
return|return
name|accessToken
return|;
block|}
comment|/**      * The access token granted by a merchant to another in order to process transactions on their behalf.      * Used in place of environment, merchant id, public key and private key fields.      */
DECL|method|setAccessToken (String accessToken)
specifier|public
name|void
name|setAccessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|this
operator|.
name|accessToken
operator|=
name|accessToken
expr_stmt|;
block|}
DECL|method|getProxyHost ()
specifier|public
name|String
name|getProxyHost
parameter_list|()
block|{
return|return
name|proxyHost
return|;
block|}
comment|/**      * The proxy host      */
DECL|method|setProxyHost (String proxyHost)
specifier|public
name|void
name|setProxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|this
operator|.
name|proxyHost
operator|=
name|proxyHost
expr_stmt|;
block|}
DECL|method|getProxyPort ()
specifier|public
name|Integer
name|getProxyPort
parameter_list|()
block|{
return|return
name|proxyPort
return|;
block|}
comment|/**      * The proxy port      */
DECL|method|setProxyPort (Integer proxyPort)
specifier|public
name|void
name|setProxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|this
operator|.
name|proxyPort
operator|=
name|proxyPort
expr_stmt|;
block|}
DECL|method|getHttpLogLevel ()
specifier|public
name|Level
name|getHttpLogLevel
parameter_list|()
block|{
return|return
name|httpLogLevel
return|;
block|}
comment|/**      * Set logging level for http calls, @see java.util.logging.Level      */
DECL|method|setHttpLogLevel (String httpLogLevel)
specifier|public
name|void
name|setHttpLogLevel
parameter_list|(
name|String
name|httpLogLevel
parameter_list|)
block|{
name|this
operator|.
name|httpLogLevel
operator|=
name|Level
operator|.
name|parse
argument_list|(
name|httpLogLevel
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set logging level for http calls, @see java.util.logging.Level      */
DECL|method|setHttpLogLevel (Level httpLogLevel)
specifier|public
name|void
name|setHttpLogLevel
parameter_list|(
name|Level
name|httpLogLevel
parameter_list|)
block|{
name|this
operator|.
name|httpLogLevel
operator|=
name|httpLogLevel
expr_stmt|;
block|}
DECL|method|getHttpLogName ()
specifier|public
name|String
name|getHttpLogName
parameter_list|()
block|{
return|return
name|httpLogName
return|;
block|}
comment|/**      * Set log category to use to log http calls, default "Braintree"      */
DECL|method|setHttpLogName (String httpLogName)
specifier|public
name|void
name|setHttpLogName
parameter_list|(
name|String
name|httpLogName
parameter_list|)
block|{
name|this
operator|.
name|httpLogName
operator|=
name|httpLogName
expr_stmt|;
block|}
DECL|method|getHttpReadTimeout ()
specifier|public
name|Integer
name|getHttpReadTimeout
parameter_list|()
block|{
return|return
name|httpReadTimeout
return|;
block|}
comment|/**      * Set read timeout for http calls.      */
DECL|method|setHttpReadTimeout (Integer httpReadTimeout)
specifier|public
name|void
name|setHttpReadTimeout
parameter_list|(
name|Integer
name|httpReadTimeout
parameter_list|)
block|{
name|this
operator|.
name|httpReadTimeout
operator|=
name|httpReadTimeout
expr_stmt|;
block|}
comment|/**      * Helper method to get and Environment object from its name      */
DECL|method|getBraintreeEnvironment ()
specifier|private
name|Environment
name|getBraintreeEnvironment
parameter_list|()
block|{
name|String
name|name
init|=
name|getEnvironment
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|Environment
operator|.
name|DEVELOPMENT
operator|.
name|getEnvironmentName
argument_list|()
argument_list|,
name|name
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
name|Environment
operator|.
name|DEVELOPMENT
return|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|Environment
operator|.
name|SANDBOX
operator|.
name|getEnvironmentName
argument_list|()
argument_list|,
name|name
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
name|Environment
operator|.
name|SANDBOX
return|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|Environment
operator|.
name|PRODUCTION
operator|.
name|getEnvironmentName
argument_list|()
argument_list|,
name|name
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
name|Environment
operator|.
name|PRODUCTION
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Environment should be development, sandbox or production, got %s"
argument_list|,
name|name
argument_list|)
argument_list|)
throw|;
block|}
comment|/**      * Construct a BraintreeGateway from configuration      */
DECL|method|newBraintreeGateway ()
specifier|synchronized
name|BraintreeGateway
name|newBraintreeGateway
parameter_list|()
block|{
specifier|final
name|BraintreeGateway
name|gateway
decl_stmt|;
if|if
condition|(
name|accessToken
operator|!=
literal|null
condition|)
block|{
name|gateway
operator|=
operator|new
name|BraintreeGateway
argument_list|(
name|accessToken
argument_list|)
expr_stmt|;
name|setEnvironment
argument_list|(
name|gateway
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getEnvironmentName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gateway
operator|=
operator|new
name|BraintreeGateway
argument_list|(
name|getBraintreeEnvironment
argument_list|()
argument_list|,
name|getMerchantId
argument_list|()
argument_list|,
name|getPublicKey
argument_list|()
argument_list|,
name|getPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|proxyHost
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|proxyPort
argument_list|)
condition|)
block|{
name|gateway
operator|.
name|setProxy
argument_list|(
name|proxyHost
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpReadTimeout
operator|!=
literal|null
condition|)
block|{
name|gateway
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setTimeout
argument_list|(
name|httpReadTimeout
argument_list|)
expr_stmt|;
block|}
comment|// If custom log name is defined, a new logger wil be requested otherwise
comment|// the one supplied by Braintree' SDK will be used
specifier|final
name|Logger
name|logger
init|=
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|httpLogName
argument_list|)
condition|?
name|Logger
operator|.
name|getLogger
argument_list|(
name|httpLogName
argument_list|)
else|:
name|gateway
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getLogger
argument_list|()
decl_stmt|;
comment|// Cleanup handlers as by default braintree install a ConsoleHandler
for|for
control|(
name|Handler
name|handler
range|:
name|logger
operator|.
name|getHandlers
argument_list|()
control|)
block|{
name|logger
operator|.
name|removeHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|addHandler
argument_list|(
operator|new
name|BraintreeLogHandler
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpLogLevel
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|setLevel
argument_list|(
name|httpLogLevel
argument_list|)
expr_stmt|;
block|}
name|gateway
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLogger
argument_list|(
name|logger
argument_list|)
expr_stmt|;
return|return
name|gateway
return|;
block|}
block|}
end_class

end_unit

