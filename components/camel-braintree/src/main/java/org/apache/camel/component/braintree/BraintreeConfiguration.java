begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.braintree
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
package|;
end_package

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|BraintreeGateway
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Component configuration for Braintree component.  */
end_comment

begin_class
annotation|@
name|UriParams
DECL|class|BraintreeConfiguration
specifier|public
class|class
name|BraintreeConfiguration
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BraintreeConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ENVIRONMENT
specifier|private
specifier|static
specifier|final
name|String
name|ENVIRONMENT
init|=
literal|"environment"
decl_stmt|;
DECL|field|MERCHANT_ID
specifier|private
specifier|static
specifier|final
name|String
name|MERCHANT_ID
init|=
literal|"merchant_id"
decl_stmt|;
DECL|field|PUBLIC_KEY
specifier|private
specifier|static
specifier|final
name|String
name|PUBLIC_KEY
init|=
literal|"public_key"
decl_stmt|;
DECL|field|PRIVATE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|PRIVATE_KEY
init|=
literal|"private_key"
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|environment
specifier|private
name|String
name|environment
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|merchantId
specifier|private
name|String
name|merchantId
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|publicKey
specifier|private
name|String
name|publicKey
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|privateKey
specifier|private
name|String
name|privateKey
decl_stmt|;
DECL|method|getEnvironment ()
specifier|public
name|String
name|getEnvironment
parameter_list|()
block|{
return|return
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|environment
argument_list|,
name|ENVIRONMENT
argument_list|)
return|;
block|}
comment|/**      * The environment Either SANDBOX or PRODUCTION      */
DECL|method|setEnvironment (String environment)
specifier|public
name|void
name|setEnvironment
parameter_list|(
name|String
name|environment
parameter_list|)
block|{
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
block|}
DECL|method|getMerchantId ()
specifier|public
name|String
name|getMerchantId
parameter_list|()
block|{
return|return
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|merchantId
argument_list|,
name|MERCHANT_ID
argument_list|)
return|;
block|}
comment|/**      * The merchant id provided by Braintree.      */
DECL|method|setMerchantId (String merchantId)
specifier|public
name|void
name|setMerchantId
parameter_list|(
name|String
name|merchantId
parameter_list|)
block|{
name|this
operator|.
name|merchantId
operator|=
name|merchantId
expr_stmt|;
block|}
DECL|method|getPublicKey ()
specifier|public
name|String
name|getPublicKey
parameter_list|()
block|{
return|return
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|publicKey
argument_list|,
name|PUBLIC_KEY
argument_list|)
return|;
block|}
comment|/**      * The public key provided by Braintree.      */
DECL|method|setPublicKey (String publicKey)
specifier|public
name|void
name|setPublicKey
parameter_list|(
name|String
name|publicKey
parameter_list|)
block|{
name|this
operator|.
name|publicKey
operator|=
name|publicKey
expr_stmt|;
block|}
DECL|method|getPrivateKey ()
specifier|public
name|String
name|getPrivateKey
parameter_list|()
block|{
return|return
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|privateKey
argument_list|,
name|PRIVATE_KEY
argument_list|)
return|;
block|}
comment|/**      * The private key provided by Braintree.      */
DECL|method|setPrivateKey (String privateKey)
specifier|public
name|void
name|setPrivateKey
parameter_list|(
name|String
name|privateKey
parameter_list|)
block|{
name|this
operator|.
name|privateKey
operator|=
name|privateKey
expr_stmt|;
block|}
comment|/**      * Helper method to get and Environment object from its name      */
DECL|method|getBraintreeEnvironment ()
specifier|private
name|Environment
name|getBraintreeEnvironment
parameter_list|()
block|{
name|String
name|name
init|=
name|getEnvironment
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"development"
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
name|Environment
operator|.
name|DEVELOPMENT
return|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"sandbox"
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
name|Environment
operator|.
name|SANDBOX
return|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"production"
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
name|Environment
operator|.
name|PRODUCTION
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Environment should be  development, sandbox or production, got %s"
argument_list|,
name|name
argument_list|)
argument_list|)
throw|;
block|}
comment|/**      * Construct a BraintreeGateway from configuration      */
DECL|method|newBraintreeGateway ()
name|BraintreeGateway
name|newBraintreeGateway
parameter_list|()
block|{
return|return
operator|new
name|BraintreeGateway
argument_list|(
name|getBraintreeEnvironment
argument_list|()
argument_list|,
name|getMerchantId
argument_list|()
argument_list|,
name|getPublicKey
argument_list|()
argument_list|,
name|getPrivateKey
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

