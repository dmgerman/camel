begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.braintree
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|BraintreeGateway
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
operator|.
name|internal
operator|.
name|BraintreeApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
operator|.
name|internal
operator|.
name|BraintreeApiName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|AbstractApiComponent
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages {@link BraintreeEndpoint}.  */
end_comment

begin_class
DECL|class|BraintreeComponent
specifier|public
class|class
name|BraintreeComponent
extends|extends
name|AbstractApiComponent
argument_list|<
name|BraintreeApiName
argument_list|,
name|BraintreeConfiguration
argument_list|,
name|BraintreeApiCollection
argument_list|>
block|{
DECL|field|gateways
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|BraintreeGateway
argument_list|>
name|gateways
decl_stmt|;
DECL|method|BraintreeComponent ()
specifier|public
name|BraintreeComponent
parameter_list|()
block|{
name|super
argument_list|(
name|BraintreeEndpoint
operator|.
name|class
argument_list|,
name|BraintreeApiName
operator|.
name|class
argument_list|,
name|BraintreeApiCollection
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|gateways
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|BraintreeComponent (CamelContext context)
specifier|public
name|BraintreeComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|BraintreeEndpoint
operator|.
name|class
argument_list|,
name|BraintreeApiName
operator|.
name|class
argument_list|,
name|BraintreeApiCollection
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|gateways
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApiName (String apiNameStr)
specifier|protected
name|BraintreeApiName
name|getApiName
parameter_list|(
name|String
name|apiNameStr
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|BraintreeApiName
operator|.
name|fromValue
argument_list|(
name|apiNameStr
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String methodName, BraintreeApiName apiName, BraintreeConfiguration endpointConfiguration)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|methodName
parameter_list|,
name|BraintreeApiName
name|apiName
parameter_list|,
name|BraintreeConfiguration
name|endpointConfiguration
parameter_list|)
block|{
name|endpointConfiguration
operator|.
name|setApiName
argument_list|(
name|apiName
argument_list|)
expr_stmt|;
name|endpointConfiguration
operator|.
name|setMethodName
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
return|return
operator|new
name|BraintreeEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|apiName
argument_list|,
name|methodName
argument_list|,
name|endpointConfiguration
argument_list|,
name|getGateway
argument_list|(
name|endpointConfiguration
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * To use the shared configuration. Properties of the shared configuration can also be set individually.      */
annotation|@
name|Override
DECL|method|setConfiguration (BraintreeConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|BraintreeConfiguration
name|configuration
parameter_list|)
block|{
name|super
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConfiguration ()
specifier|public
name|BraintreeConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|super
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
DECL|method|getGateway (BraintreeConfiguration configuration)
specifier|private
specifier|synchronized
name|BraintreeGateway
name|getGateway
parameter_list|(
name|BraintreeConfiguration
name|configuration
parameter_list|)
block|{
name|BraintreeGateway
name|gateway
init|=
name|gateways
operator|.
name|get
argument_list|(
name|configuration
operator|.
name|getMerchantId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|gateway
operator|==
literal|null
condition|)
block|{
comment|//TODO: review the key used to track gateways
name|gateways
operator|.
name|put
argument_list|(
name|configuration
operator|.
name|getMerchantId
argument_list|()
argument_list|,
name|gateway
operator|=
name|configuration
operator|.
name|newBraintreeGateway
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|gateway
return|;
block|}
DECL|method|getConfigurationOrCreate ()
specifier|private
name|BraintreeConfiguration
name|getConfigurationOrCreate
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|getConfiguration
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setConfiguration
argument_list|(
operator|new
name|BraintreeConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
DECL|method|getApiName ()
specifier|public
name|BraintreeApiName
name|getApiName
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getApiName
argument_list|()
return|;
block|}
comment|/**      * What kind of operation to perform      * @param apiName      */
DECL|method|setApiName (BraintreeApiName apiName)
specifier|public
name|void
name|setApiName
parameter_list|(
name|BraintreeApiName
name|apiName
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setApiName
argument_list|(
name|apiName
argument_list|)
expr_stmt|;
block|}
DECL|method|getMethodName ()
specifier|public
name|String
name|getMethodName
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getMethodName
argument_list|()
return|;
block|}
comment|/**      * What sub operation to use for the selected operation      * @param methodName      */
DECL|method|setMethodName (String methodName)
specifier|public
name|void
name|setMethodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setMethodName
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
DECL|method|getEnvironment ()
specifier|public
name|String
name|getEnvironment
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getEnvironment
argument_list|()
return|;
block|}
comment|/**      * The environment Either SANDBOX or PRODUCTION      * @param environment      */
DECL|method|setEnvironment (String environment)
specifier|public
name|void
name|setEnvironment
parameter_list|(
name|String
name|environment
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setEnvironment
argument_list|(
name|environment
argument_list|)
expr_stmt|;
block|}
DECL|method|getMerchantId ()
specifier|public
name|String
name|getMerchantId
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getMerchantId
argument_list|()
return|;
block|}
comment|/**      * The merchant id provided by Braintree.      * @param merchantId      */
DECL|method|setMerchantId (String merchantId)
specifier|public
name|void
name|setMerchantId
parameter_list|(
name|String
name|merchantId
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setMerchantId
argument_list|(
name|merchantId
argument_list|)
expr_stmt|;
block|}
DECL|method|getPublicKey ()
specifier|public
name|String
name|getPublicKey
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getPublicKey
argument_list|()
return|;
block|}
comment|/**      * The public key provided by Braintree.      * @param publicKey      */
DECL|method|setPublicKey (String publicKey)
specifier|public
name|void
name|setPublicKey
parameter_list|(
name|String
name|publicKey
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setPublicKey
argument_list|(
name|publicKey
argument_list|)
expr_stmt|;
block|}
DECL|method|getPrivateKey ()
specifier|public
name|String
name|getPrivateKey
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getPrivateKey
argument_list|()
return|;
block|}
comment|/**      * The private key provided by Braintree.      * @param privateKey      */
DECL|method|setPrivateKey (String privateKey)
specifier|public
name|void
name|setPrivateKey
parameter_list|(
name|String
name|privateKey
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setPrivateKey
argument_list|(
name|privateKey
argument_list|)
expr_stmt|;
block|}
DECL|method|getProxyHost ()
specifier|public
name|String
name|getProxyHost
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getProxyHost
argument_list|()
return|;
block|}
comment|/**      * The proxy host      * @param proxyHost      */
DECL|method|setProxyHost (String proxyHost)
specifier|public
name|void
name|setProxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setProxyHost
argument_list|(
name|proxyHost
argument_list|)
expr_stmt|;
block|}
DECL|method|getProxyPort ()
specifier|public
name|Integer
name|getProxyPort
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getProxyPort
argument_list|()
return|;
block|}
comment|/**      * The proxy port      * @param proxyPort      */
DECL|method|setProxyPort (Integer proxyPort)
specifier|public
name|void
name|setProxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setProxyPort
argument_list|(
name|proxyPort
argument_list|)
expr_stmt|;
block|}
DECL|method|getHttpLogLevel ()
specifier|public
name|Level
name|getHttpLogLevel
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getHttpLogLevel
argument_list|()
return|;
block|}
comment|/**      * Set logging level for http calls, @see java.util.logging.Level      * @param httpLogLevel      */
DECL|method|setHttpLogLevel (String httpLogLevel)
specifier|public
name|void
name|setHttpLogLevel
parameter_list|(
name|String
name|httpLogLevel
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setHttpLogLevel
argument_list|(
name|httpLogLevel
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set logging level for http calls, @see java.util.logging.Level      * @param httpLogLevel      */
DECL|method|setHttpLogLevel (Level httpLogLevel)
specifier|public
name|void
name|setHttpLogLevel
parameter_list|(
name|Level
name|httpLogLevel
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setHttpLogLevel
argument_list|(
name|httpLogLevel
argument_list|)
expr_stmt|;
block|}
DECL|method|getHttpLogName ()
specifier|public
name|String
name|getHttpLogName
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getHttpLogName
argument_list|()
return|;
block|}
comment|/**      * Set log category to use to log http calls, default "Braintree"      * @param httpLogName      */
DECL|method|setHttpLogName (String httpLogName)
specifier|public
name|void
name|setHttpLogName
parameter_list|(
name|String
name|httpLogName
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setHttpLogName
argument_list|(
name|httpLogName
argument_list|)
expr_stmt|;
block|}
DECL|method|getHttpReadTimeout ()
specifier|public
name|Integer
name|getHttpReadTimeout
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getHttpReadTimeout
argument_list|()
return|;
block|}
comment|/**      * Set read timeout for http calls.      * @param httpReadTimeout      */
DECL|method|setHttpReadTimeout (Integer httpReadTimeout)
specifier|public
name|void
name|setHttpReadTimeout
parameter_list|(
name|Integer
name|httpReadTimeout
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setHttpReadTimeout
argument_list|(
name|httpReadTimeout
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

