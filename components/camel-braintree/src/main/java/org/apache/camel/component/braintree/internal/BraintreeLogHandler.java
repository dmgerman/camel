begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.braintree.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|MissingResourceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|LogRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/*  * Simplified version of org.slf4j.bridge.SLF4JBridgeHandler  */
end_comment

begin_class
DECL|class|BraintreeLogHandler
specifier|public
specifier|final
class|class
name|BraintreeLogHandler
extends|extends
name|Handler
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|Handler
name|INSTANCE
init|=
operator|new
name|BraintreeLogHandler
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_LOGGER_VERSION
specifier|public
specifier|static
specifier|final
name|Level
name|DEFAULT_LOGGER_VERSION
init|=
name|Level
operator|.
name|WARNING
decl_stmt|;
DECL|field|DEFAULT_LOGGER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_LOGGER_NAME
init|=
literal|"org.apache.camel.component.braintree.camel-braintree"
decl_stmt|;
DECL|field|TRACE_LEVEL_THRESHOLD
specifier|private
specifier|static
specifier|final
name|int
name|TRACE_LEVEL_THRESHOLD
init|=
name|Level
operator|.
name|FINEST
operator|.
name|intValue
argument_list|()
decl_stmt|;
DECL|field|DEBUG_LEVEL_THRESHOLD
specifier|private
specifier|static
specifier|final
name|int
name|DEBUG_LEVEL_THRESHOLD
init|=
name|Level
operator|.
name|FINE
operator|.
name|intValue
argument_list|()
decl_stmt|;
DECL|field|INFO_LEVEL_THRESHOLD
specifier|private
specifier|static
specifier|final
name|int
name|INFO_LEVEL_THRESHOLD
init|=
name|Level
operator|.
name|INFO
operator|.
name|intValue
argument_list|()
decl_stmt|;
DECL|field|WARN_LEVEL_THRESHOLD
specifier|private
specifier|static
specifier|final
name|int
name|WARN_LEVEL_THRESHOLD
init|=
name|Level
operator|.
name|WARNING
operator|.
name|intValue
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
block|{
comment|// no-op
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|SecurityException
block|{
comment|// no-op
block|}
annotation|@
name|Override
DECL|method|publish (LogRecord record)
specifier|public
name|void
name|publish
parameter_list|(
name|LogRecord
name|record
parameter_list|)
block|{
if|if
condition|(
name|record
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Logger
name|logger
init|=
name|getLogger
argument_list|(
name|record
argument_list|)
decl_stmt|;
specifier|final
name|String
name|message
init|=
name|formatMessage
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|int
name|level
init|=
name|record
operator|.
name|getLevel
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|level
operator|<=
name|TRACE_LEVEL_THRESHOLD
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
name|message
argument_list|,
name|record
operator|.
name|getThrown
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|level
operator|<=
name|DEBUG_LEVEL_THRESHOLD
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|message
argument_list|,
name|record
operator|.
name|getThrown
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|level
operator|<=
name|INFO_LEVEL_THRESHOLD
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|message
argument_list|,
name|record
operator|.
name|getThrown
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|level
operator|<=
name|WARN_LEVEL_THRESHOLD
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|message
argument_list|,
name|record
operator|.
name|getThrown
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|record
operator|.
name|getThrown
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getLogger (LogRecord record)
specifier|private
name|Logger
name|getLogger
parameter_list|(
name|LogRecord
name|record
parameter_list|)
block|{
name|String
name|name
init|=
name|record
operator|.
name|getLoggerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|DEFAULT_LOGGER_NAME
expr_stmt|;
block|}
return|return
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|formatMessage (LogRecord record)
specifier|private
name|String
name|formatMessage
parameter_list|(
name|LogRecord
name|record
parameter_list|)
block|{
name|String
name|message
init|=
name|record
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|ResourceBundle
name|bundle
init|=
name|record
operator|.
name|getResourceBundle
argument_list|()
decl_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|message
operator|=
name|bundle
operator|.
name|getString
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|e
parameter_list|)
block|{                 }
block|}
name|Object
index|[]
name|params
init|=
name|record
operator|.
name|getParameters
argument_list|()
decl_stmt|;
comment|// avoid formatting when there are no or 0 parameters. see also
comment|// http://jira.qos.ch/browse/SLF4J-203
if|if
condition|(
name|params
operator|!=
literal|null
operator|&&
name|params
operator|.
name|length
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|message
operator|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|message
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// default to the same behavior as in java.util.logging.Formatter.formatMessage(LogRecord)
comment|// see also http://jira.qos.ch/browse/SLF4J-337
return|return
name|message
return|;
block|}
block|}
block|}
else|else
block|{
name|message
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
block|}
end_class

end_unit

