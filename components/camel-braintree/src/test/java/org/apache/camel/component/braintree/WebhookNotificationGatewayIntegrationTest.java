begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.braintree
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|BraintreeGateway
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|ConnectedMerchantPayPalStatusChanged
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|ConnectedMerchantStatusTransitioned
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|WebhookNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
operator|.
name|internal
operator|.
name|BraintreeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|WebhookNotificationGatewayIntegrationTest
specifier|public
class|class
name|WebhookNotificationGatewayIntegrationTest
extends|extends
name|AbstractBraintreeTestSupport
block|{
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|BraintreeApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|WebhookNotificationGatewayApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|checkAuthenticationType ()
specifier|public
name|void
name|checkAuthenticationType
parameter_list|()
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|checkAuthenticationType
argument_list|(
name|AuthenticationType
operator|.
name|PUBLIC_PRIVATE_KEYS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseSubscription ()
specifier|public
name|void
name|testParseSubscription
parameter_list|()
throws|throws
name|Exception
block|{
name|runParseSubscriptionTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|SUBSCRIPTION_CANCELED
argument_list|)
expr_stmt|;
name|runParseSubscriptionTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|SUBSCRIPTION_CHARGED_SUCCESSFULLY
argument_list|)
expr_stmt|;
name|runParseSubscriptionTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|SUBSCRIPTION_CHARGED_UNSUCCESSFULLY
argument_list|)
expr_stmt|;
name|runParseSubscriptionTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|SUBSCRIPTION_TRIAL_ENDED
argument_list|)
expr_stmt|;
name|runParseSubscriptionTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|SUBSCRIPTION_WENT_ACTIVE
argument_list|)
expr_stmt|;
name|runParseSubscriptionTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|SUBSCRIPTION_WENT_PAST_DUE
argument_list|)
expr_stmt|;
block|}
DECL|method|runParseSubscriptionTest (WebhookNotification.Kind kind)
specifier|private
name|void
name|runParseSubscriptionTest
parameter_list|(
name|WebhookNotification
operator|.
name|Kind
name|kind
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|WebhookNotification
name|result
init|=
name|sendSampleNotification
argument_list|(
name|kind
argument_list|,
literal|"my_id"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"parse result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kind
argument_list|,
name|result
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"my_id"
argument_list|,
name|result
operator|.
name|getSubscription
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseMerchantAccount ()
specifier|public
name|void
name|testParseMerchantAccount
parameter_list|()
throws|throws
name|Exception
block|{
name|runParseMerchantAccountTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|SUB_MERCHANT_ACCOUNT_APPROVED
argument_list|)
expr_stmt|;
name|runParseMerchantAccountTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|SUB_MERCHANT_ACCOUNT_DECLINED
argument_list|)
expr_stmt|;
block|}
DECL|method|runParseMerchantAccountTest (WebhookNotification.Kind kind)
specifier|private
name|void
name|runParseMerchantAccountTest
parameter_list|(
name|WebhookNotification
operator|.
name|Kind
name|kind
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|WebhookNotification
name|result
init|=
name|sendSampleNotification
argument_list|(
name|kind
argument_list|,
literal|"my_id"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"parse result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kind
argument_list|,
name|result
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"my_id"
argument_list|,
name|result
operator|.
name|getMerchantAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseTransaction ()
specifier|public
name|void
name|testParseTransaction
parameter_list|()
throws|throws
name|Exception
block|{
name|runParseTransactionTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|TRANSACTION_DISBURSED
argument_list|)
expr_stmt|;
name|runParseTransactionTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|TRANSACTION_SETTLED
argument_list|)
expr_stmt|;
name|runParseTransactionTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|TRANSACTION_SETTLEMENT_DECLINED
argument_list|)
expr_stmt|;
block|}
DECL|method|runParseTransactionTest (WebhookNotification.Kind kind)
specifier|private
name|void
name|runParseTransactionTest
parameter_list|(
name|WebhookNotification
operator|.
name|Kind
name|kind
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|WebhookNotification
name|result
init|=
name|sendSampleNotification
argument_list|(
name|kind
argument_list|,
literal|"my_id"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"parse result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kind
argument_list|,
name|result
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"my_id"
argument_list|,
name|result
operator|.
name|getTransaction
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseDisbursement ()
specifier|public
name|void
name|testParseDisbursement
parameter_list|()
throws|throws
name|Exception
block|{
name|runParseDisbursementTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|DISBURSEMENT
argument_list|)
expr_stmt|;
name|runParseDisbursementTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|DISBURSEMENT_EXCEPTION
argument_list|)
expr_stmt|;
block|}
DECL|method|runParseDisbursementTest (WebhookNotification.Kind kind)
specifier|private
name|void
name|runParseDisbursementTest
parameter_list|(
name|WebhookNotification
operator|.
name|Kind
name|kind
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|WebhookNotification
name|result
init|=
name|sendSampleNotification
argument_list|(
name|kind
argument_list|,
literal|"my_id"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"parse result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kind
argument_list|,
name|result
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"my_id"
argument_list|,
name|result
operator|.
name|getDisbursement
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseDispute ()
specifier|public
name|void
name|testParseDispute
parameter_list|()
throws|throws
name|Exception
block|{
name|runParseDisputeTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|DISPUTE_OPENED
argument_list|)
expr_stmt|;
name|runParseDisputeTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|DISPUTE_LOST
argument_list|)
expr_stmt|;
name|runParseDisputeTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|DISPUTE_WON
argument_list|)
expr_stmt|;
block|}
DECL|method|runParseDisputeTest (WebhookNotification.Kind kind)
specifier|private
name|void
name|runParseDisputeTest
parameter_list|(
name|WebhookNotification
operator|.
name|Kind
name|kind
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|WebhookNotification
name|result
init|=
name|sendSampleNotification
argument_list|(
name|kind
argument_list|,
literal|"my_id"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"parse result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kind
argument_list|,
name|result
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"my_id"
argument_list|,
name|result
operator|.
name|getDispute
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParsePartnerMerchant ()
specifier|public
name|void
name|testParsePartnerMerchant
parameter_list|()
throws|throws
name|Exception
block|{
name|runParsePartnerMerchantTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|PARTNER_MERCHANT_CONNECTED
argument_list|)
expr_stmt|;
name|runParsePartnerMerchantTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|PARTNER_MERCHANT_DISCONNECTED
argument_list|)
expr_stmt|;
name|runParsePartnerMerchantTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|PARTNER_MERCHANT_DECLINED
argument_list|)
expr_stmt|;
block|}
DECL|method|runParsePartnerMerchantTest (WebhookNotification.Kind kind)
specifier|private
name|void
name|runParsePartnerMerchantTest
parameter_list|(
name|WebhookNotification
operator|.
name|Kind
name|kind
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|WebhookNotification
name|result
init|=
name|sendSampleNotification
argument_list|(
name|kind
argument_list|,
literal|"merchant_public_id"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"parse result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kind
argument_list|,
name|result
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc123"
argument_list|,
name|result
operator|.
name|getPartnerMerchant
argument_list|()
operator|.
name|getPartnerMerchantId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseConnectedMerchantStatusTransitioned ()
specifier|public
name|void
name|testParseConnectedMerchantStatusTransitioned
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|WebhookNotification
name|result
init|=
name|sendSampleNotification
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|CONNECTED_MERCHANT_STATUS_TRANSITIONED
argument_list|,
literal|"my_merchant_public_id"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"parse result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|CONNECTED_MERCHANT_STATUS_TRANSITIONED
argument_list|,
name|result
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|ConnectedMerchantStatusTransitioned
name|connectedMerchantStatusTransitioned
init|=
name|result
operator|.
name|getConnectedMerchantStatusTransitioned
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"my_merchant_public_id"
argument_list|,
name|connectedMerchantStatusTransitioned
operator|.
name|getMerchantPublicId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"oauth_application_client_id"
argument_list|,
name|connectedMerchantStatusTransitioned
operator|.
name|getOAuthApplicationClientId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"new_status"
argument_list|,
name|connectedMerchantStatusTransitioned
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseConnectedMerchantPayPalStatusChanged ()
specifier|public
name|void
name|testParseConnectedMerchantPayPalStatusChanged
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|WebhookNotification
name|result
init|=
name|sendSampleNotification
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|CONNECTED_MERCHANT_PAYPAL_STATUS_CHANGED
argument_list|,
literal|"my_merchant_public_id"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"parse result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|CONNECTED_MERCHANT_PAYPAL_STATUS_CHANGED
argument_list|,
name|result
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|ConnectedMerchantPayPalStatusChanged
name|connectedMerchantPayPalStatusChanged
init|=
name|result
operator|.
name|getConnectedMerchantPayPalStatusChanged
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"my_merchant_public_id"
argument_list|,
name|connectedMerchantPayPalStatusChanged
operator|.
name|getMerchantPublicId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"oauth_application_client_id"
argument_list|,
name|connectedMerchantPayPalStatusChanged
operator|.
name|getOAuthApplicationClientId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"link"
argument_list|,
name|connectedMerchantPayPalStatusChanged
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParseAccountUpdater ()
specifier|public
name|void
name|testParseAccountUpdater
parameter_list|()
throws|throws
name|Exception
block|{
name|runParsePAccountUpdaterTest
argument_list|(
name|WebhookNotification
operator|.
name|Kind
operator|.
name|ACCOUNT_UPDATER_DAILY_REPORT
argument_list|)
expr_stmt|;
block|}
DECL|method|runParsePAccountUpdaterTest (WebhookNotification.Kind kind)
specifier|private
name|void
name|runParsePAccountUpdaterTest
parameter_list|(
name|WebhookNotification
operator|.
name|Kind
name|kind
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|WebhookNotification
name|result
init|=
name|sendSampleNotification
argument_list|(
name|kind
argument_list|,
literal|"my_id"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"parse result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kind
argument_list|,
name|result
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"link-to-csv-report"
argument_list|,
name|result
operator|.
name|getAccountUpdaterDailyReport
argument_list|()
operator|.
name|getReportUrl
argument_list|()
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2016-01-14"
argument_list|,
name|sdf
operator|.
name|format
argument_list|(
name|result
operator|.
name|getAccountUpdaterDailyReport
argument_list|()
operator|.
name|getReportDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* see https://issues.apache.org/jira/browse/CAMEL-12180     @Test     public void testParseIdealPayment() throws Exception {         runParseIdealPaymentTest(WebhookNotification.Kind.IDEAL_PAYMENT_COMPLETE);         runParseIdealPaymentTest(WebhookNotification.Kind.IDEAL_PAYMENT_FAILED);     }      private void runParseIdealPaymentTest(WebhookNotification.Kind kind) throws Exception {         final WebhookNotification result = sendSampleNotification(kind, "my_id");         assertNotNull("parse result", result);         assertEquals(kind, result.getKind());         assertEquals("my_id", result.getIdealPayment().getId());     }      @Test     public void testParsePaymentInstrument() throws Exception {         runParsePaymentInstrumentTest(WebhookNotification.Kind.GRANTED_PAYMENT_INSTRUMENT_UPDATE);     }      private void runParsePaymentInstrumentTest(WebhookNotification.Kind kind) throws Exception {         final WebhookNotification result = sendSampleNotification(kind, "my_id");         assertNotNull("parse result", result);         assertEquals(kind, result.getKind());         assertEquals("abc123z", result.getGrantedPaymentInstrumentUpdate().getToken());     }*/
DECL|method|sendSampleNotification (WebhookNotification.Kind kind, String id)
specifier|private
name|WebhookNotification
name|sendSampleNotification
parameter_list|(
name|WebhookNotification
operator|.
name|Kind
name|kind
parameter_list|,
name|String
name|id
parameter_list|)
block|{
specifier|final
name|BraintreeGateway
name|gateway
init|=
name|getGateway
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|notification
init|=
name|gateway
operator|.
name|webhookTesting
argument_list|()
operator|.
name|sampleNotification
argument_list|(
name|kind
argument_list|,
name|id
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|BraintreeConstants
operator|.
name|PROPERTY_PREFIX
operator|+
literal|"signature"
argument_list|,
name|notification
operator|.
name|get
argument_list|(
literal|"bt_signature"
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|BraintreeConstants
operator|.
name|PROPERTY_PREFIX
operator|+
literal|"payload"
argument_list|,
name|notification
operator|.
name|get
argument_list|(
literal|"bt_payload"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|requestBodyAndHeaders
argument_list|(
literal|"direct://PARSE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test route for parse
name|from
argument_list|(
literal|"direct://PARSE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/parse"
argument_list|)
expr_stmt|;
comment|// test route for verify
name|from
argument_list|(
literal|"direct://VERIFY"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/verify?inBody=challenge"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

