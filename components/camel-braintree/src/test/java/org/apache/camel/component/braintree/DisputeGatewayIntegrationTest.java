begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.braintree
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|BraintreeGateway
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|Dispute
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|DisputeEvidence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|DisputeSearchRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|DocumentUpload
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|DocumentUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|FileEvidenceRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|PaginatedCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|TextEvidenceRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|TransactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
operator|.
name|internal
operator|.
name|BraintreeApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
operator|.
name|internal
operator|.
name|DisputeGatewayApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
operator|.
name|internal
operator|.
name|DocumentUploadGatewayApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
operator|.
name|internal
operator|.
name|TransactionGatewayApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|DisputeGatewayIntegrationTest
specifier|public
class|class
name|DisputeGatewayIntegrationTest
extends|extends
name|AbstractBraintreeTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DisputeGatewayIntegrationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|BraintreeApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|DisputeGatewayApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|TRANSACTION_PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|TRANSACTION_PATH_PREFIX
init|=
name|BraintreeApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|TransactionGatewayApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|DOCUMENT_UPLOAD_PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|DOCUMENT_UPLOAD_PATH_PREFIX
init|=
name|BraintreeApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|DocumentUploadGatewayApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|gateway
specifier|private
name|BraintreeGateway
name|gateway
decl_stmt|;
annotation|@
name|Override
DECL|method|doPostSetup ()
specifier|protected
name|void
name|doPostSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|gateway
operator|=
name|getGateway
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAccept ()
specifier|public
name|void
name|testAccept
parameter_list|()
throws|throws
name|Exception
block|{
name|Dispute
name|createdDispute
init|=
name|createDispute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Dispute
operator|.
name|Status
operator|.
name|OPEN
argument_list|,
name|createdDispute
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Result
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://ACCEPT"
argument_list|,
name|createdDispute
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"accept result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"accept result success"
argument_list|,
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Dispute
name|finalizedDispute
init|=
name|requestBody
argument_list|(
literal|"direct://FIND"
argument_list|,
name|createdDispute
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"accepted dispute"
argument_list|,
name|finalizedDispute
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Dispute
operator|.
name|Status
operator|.
name|ACCEPTED
argument_list|,
name|finalizedDispute
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddFileEvidence ()
specifier|public
name|void
name|testAddFileEvidence
parameter_list|()
throws|throws
name|Exception
block|{
name|Dispute
name|createdDispute
init|=
name|createDispute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Dispute
operator|.
name|Status
operator|.
name|OPEN
argument_list|,
name|createdDispute
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|DocumentUpload
name|uploadedDocument
init|=
name|uploadDocument
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBraintree.disputeId"
argument_list|,
name|createdDispute
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBraintree.documentId"
argument_list|,
name|uploadedDocument
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Result
argument_list|<
name|DisputeEvidence
argument_list|>
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://ADDFILEEVIDENCE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"addFileEvidence result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"addFileEvidence result success"
argument_list|,
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddFileEvidenceOne ()
specifier|public
name|void
name|testAddFileEvidenceOne
parameter_list|()
throws|throws
name|Exception
block|{
name|Dispute
name|createdDispute
init|=
name|createDispute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Dispute
operator|.
name|Status
operator|.
name|OPEN
argument_list|,
name|createdDispute
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|DocumentUpload
name|uploadedDocument
init|=
name|uploadDocument
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBraintree.disputeId"
argument_list|,
name|createdDispute
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|FileEvidenceRequest
name|fileEvidenceRequest
init|=
operator|new
name|FileEvidenceRequest
argument_list|()
operator|.
name|documentId
argument_list|(
name|uploadedDocument
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBraintree.fileEvidenceRequest"
argument_list|,
name|fileEvidenceRequest
argument_list|)
expr_stmt|;
specifier|final
name|Result
argument_list|<
name|DisputeEvidence
argument_list|>
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://ADDFILEEVIDENCE_1"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"addFileEvidence result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"addFileEvidence result success"
argument_list|,
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddTextEvidence ()
specifier|public
name|void
name|testAddTextEvidence
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|textEvidence
init|=
literal|"Text Evidence"
decl_stmt|;
name|Dispute
name|createdDispute
init|=
name|createDispute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Dispute
operator|.
name|Status
operator|.
name|OPEN
argument_list|,
name|createdDispute
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBraintree.id"
argument_list|,
name|createdDispute
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBraintree.content"
argument_list|,
name|textEvidence
argument_list|)
expr_stmt|;
specifier|final
name|Result
argument_list|<
name|DisputeEvidence
argument_list|>
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://ADDTEXTEVIDENCE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"addTextEvidence result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"addTextEvidence result success"
argument_list|,
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|DisputeEvidence
name|disputeEvidence
init|=
name|result
operator|.
name|getTarget
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|textEvidence
argument_list|,
name|disputeEvidence
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddTextEvidenceOne ()
specifier|public
name|void
name|testAddTextEvidenceOne
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|textEvidence
init|=
literal|"Text Evidence"
decl_stmt|;
name|Dispute
name|createdDispute
init|=
name|createDispute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Dispute
operator|.
name|Status
operator|.
name|OPEN
argument_list|,
name|createdDispute
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBraintree.id"
argument_list|,
name|createdDispute
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|TextEvidenceRequest
name|textEvidenceRequest
init|=
operator|new
name|TextEvidenceRequest
argument_list|()
operator|.
name|content
argument_list|(
name|textEvidence
argument_list|)
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBraintree.textEvidenceRequest"
argument_list|,
name|textEvidenceRequest
argument_list|)
expr_stmt|;
specifier|final
name|Result
argument_list|<
name|DisputeEvidence
argument_list|>
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://ADDTEXTEVIDENCE_1"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"addTextEvidence result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"addTextEvidence result success"
argument_list|,
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|DisputeEvidence
name|disputeEvidence
init|=
name|result
operator|.
name|getTarget
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|textEvidence
argument_list|,
name|disputeEvidence
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinalize ()
specifier|public
name|void
name|testFinalize
parameter_list|()
throws|throws
name|Exception
block|{
name|Dispute
name|createdDispute
init|=
name|createDispute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Dispute
operator|.
name|Status
operator|.
name|OPEN
argument_list|,
name|createdDispute
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Result
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://FINALIZE"
argument_list|,
name|createdDispute
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"finalize result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"finalize result success"
argument_list|,
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Dispute
name|finalizedDispute
init|=
name|requestBody
argument_list|(
literal|"direct://FIND"
argument_list|,
name|createdDispute
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"finalized dispute"
argument_list|,
name|finalizedDispute
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Dispute
operator|.
name|Status
operator|.
name|DISPUTED
argument_list|,
name|finalizedDispute
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFind ()
specifier|public
name|void
name|testFind
parameter_list|()
throws|throws
name|Exception
block|{
name|Dispute
name|createdDispute
init|=
name|createDispute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Dispute
operator|.
name|Status
operator|.
name|OPEN
argument_list|,
name|createdDispute
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Dispute
name|foundDispute
init|=
name|requestBody
argument_list|(
literal|"direct://FIND"
argument_list|,
name|createdDispute
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"found dispute"
argument_list|,
name|foundDispute
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Dispute
operator|.
name|Status
operator|.
name|OPEN
argument_list|,
name|foundDispute
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveEvidence ()
specifier|public
name|void
name|testRemoveEvidence
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|textEvidence
init|=
literal|"Text Evidence"
decl_stmt|;
name|Dispute
name|createdDispute
init|=
name|createDispute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Dispute
operator|.
name|Status
operator|.
name|OPEN
argument_list|,
name|createdDispute
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|addTextEvidenceHeaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|addTextEvidenceHeaders
operator|.
name|put
argument_list|(
literal|"CamelBraintree.id"
argument_list|,
name|createdDispute
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|addTextEvidenceHeaders
operator|.
name|put
argument_list|(
literal|"CamelBraintree.content"
argument_list|,
name|textEvidence
argument_list|)
expr_stmt|;
specifier|final
name|Result
argument_list|<
name|DisputeEvidence
argument_list|>
name|addTextEvidenceResult
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://ADDTEXTEVIDENCE"
argument_list|,
literal|null
argument_list|,
name|addTextEvidenceHeaders
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"addTextEvidence result"
argument_list|,
name|addTextEvidenceResult
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"addTextEvidence result success"
argument_list|,
name|addTextEvidenceResult
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|DisputeEvidence
name|disputeEvidence
init|=
name|addTextEvidenceResult
operator|.
name|getTarget
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|textEvidence
argument_list|,
name|disputeEvidence
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|removeTextEvidenceHeaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|removeTextEvidenceHeaders
operator|.
name|put
argument_list|(
literal|"CamelBraintree.disputeId"
argument_list|,
name|createdDispute
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|removeTextEvidenceHeaders
operator|.
name|put
argument_list|(
literal|"CamelBraintree.evidenceId"
argument_list|,
name|disputeEvidence
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Result
name|removeTextEvidenceResult
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://REMOVEEVIDENCE"
argument_list|,
literal|null
argument_list|,
name|removeTextEvidenceHeaders
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"removeEvidence result"
argument_list|,
name|removeTextEvidenceResult
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"removeEvidence result success"
argument_list|,
name|removeTextEvidenceResult
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSearch ()
specifier|public
name|void
name|testSearch
parameter_list|()
throws|throws
name|Exception
block|{
name|Dispute
name|createdDispute
init|=
name|createDispute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Dispute
operator|.
name|Status
operator|.
name|OPEN
argument_list|,
name|createdDispute
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|DisputeSearchRequest
name|query
init|=
operator|new
name|DisputeSearchRequest
argument_list|()
operator|.
name|id
argument_list|()
operator|.
name|is
argument_list|(
name|createdDispute
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|PaginatedCollection
argument_list|<
name|Dispute
argument_list|>
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://SEARCH"
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"search result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
for|for
control|(
name|Dispute
name|foundDispute
range|:
name|result
control|)
block|{
name|assertEquals
argument_list|(
name|createdDispute
operator|.
name|getId
argument_list|()
argument_list|,
name|foundDispute
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// route to create transaction
name|from
argument_list|(
literal|"direct://SALE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|TRANSACTION_PATH_PREFIX
operator|+
literal|"/sale?inBody=request"
argument_list|)
expr_stmt|;
comment|// route to create documents
name|from
argument_list|(
literal|"direct://CREATE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|DOCUMENT_UPLOAD_PATH_PREFIX
operator|+
literal|"/create?inBody=request"
argument_list|)
expr_stmt|;
comment|// test route for accept
name|from
argument_list|(
literal|"direct://ACCEPT"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/accept?inBody=id"
argument_list|)
expr_stmt|;
comment|// test route for addFileEvidence
name|from
argument_list|(
literal|"direct://ADDFILEEVIDENCE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/addFileEvidence"
argument_list|)
expr_stmt|;
comment|// test route for addFileEvidence
name|from
argument_list|(
literal|"direct://ADDFILEEVIDENCE_1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/addFileEvidence"
argument_list|)
expr_stmt|;
comment|// test route for addTextEvidence
name|from
argument_list|(
literal|"direct://ADDTEXTEVIDENCE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/addTextEvidence"
argument_list|)
expr_stmt|;
comment|// test route for addTextEvidence
name|from
argument_list|(
literal|"direct://ADDTEXTEVIDENCE_1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/addTextEvidence"
argument_list|)
expr_stmt|;
comment|// test route for finalize
name|from
argument_list|(
literal|"direct://FINALIZE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/finalize?inBody=id"
argument_list|)
expr_stmt|;
comment|// test route for find
name|from
argument_list|(
literal|"direct://FIND"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/find?inBody=id"
argument_list|)
expr_stmt|;
comment|// test route for removeEvidence
name|from
argument_list|(
literal|"direct://REMOVEEVIDENCE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/removeEvidence"
argument_list|)
expr_stmt|;
comment|// test route for search
name|from
argument_list|(
literal|"direct://SEARCH"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/search?inBody=query"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|createDispute ()
specifier|private
name|Dispute
name|createDispute
parameter_list|()
block|{
return|return
name|createDispute
argument_list|(
literal|100.00
argument_list|)
return|;
block|}
DECL|method|createDispute (double amount)
specifier|private
name|Dispute
name|createDispute
parameter_list|(
name|double
name|amount
parameter_list|)
block|{
specifier|final
name|Result
argument_list|<
name|Transaction
argument_list|>
name|transactionResult
init|=
name|requestBody
argument_list|(
literal|"direct://SALE"
argument_list|,
operator|new
name|TransactionRequest
argument_list|()
operator|.
name|amount
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|amount
argument_list|)
argument_list|)
operator|.
name|paymentMethodNonce
argument_list|(
literal|"fake-valid-nonce"
argument_list|)
operator|.
name|creditCard
argument_list|()
operator|.
name|number
argument_list|(
literal|"4023898493988028"
argument_list|)
operator|.
name|done
argument_list|()
operator|.
name|options
argument_list|()
operator|.
name|submitForSettlement
argument_list|(
literal|true
argument_list|)
operator|.
name|done
argument_list|()
argument_list|,
name|Result
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|transactionResult
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Dispute
argument_list|>
name|disputes
init|=
name|transactionResult
operator|.
name|getTarget
argument_list|()
operator|.
name|getDisputes
argument_list|()
decl_stmt|;
name|assertListSize
argument_list|(
name|disputes
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|disputes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|uploadDocument ()
specifier|private
name|DocumentUpload
name|uploadDocument
parameter_list|()
block|{
specifier|final
name|String
name|documentName
init|=
literal|"pdf-sample.pdf"
decl_stmt|;
name|File
name|evidenceDocument
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|documentName
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|DocumentUploadRequest
name|documentUploadRequest
init|=
operator|new
name|DocumentUploadRequest
argument_list|(
name|DocumentUpload
operator|.
name|Kind
operator|.
name|EVIDENCE_DOCUMENT
argument_list|,
name|evidenceDocument
argument_list|)
decl_stmt|;
specifier|final
name|Result
argument_list|<
name|DocumentUpload
argument_list|>
name|documentUploadResult
init|=
name|requestBody
argument_list|(
literal|"direct://CREATE"
argument_list|,
name|documentUploadRequest
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"create result"
argument_list|,
name|documentUploadResult
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"create result success"
argument_list|,
name|documentUploadResult
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|documentUploadResult
operator|.
name|getTarget
argument_list|()
return|;
block|}
block|}
end_class

end_unit

