begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.braintree
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|AddressRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|BraintreeGateway
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|Customer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|CustomerRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|braintreegateway
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
operator|.
name|internal
operator|.
name|AddressGatewayApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
operator|.
name|internal
operator|.
name|BraintreeApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|AddressGatewayIntegrationTest
specifier|public
class|class
name|AddressGatewayIntegrationTest
extends|extends
name|AbstractBraintreeTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AddressGatewayIntegrationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|BraintreeApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|AddressGatewayApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|gateway
specifier|private
name|BraintreeGateway
name|gateway
decl_stmt|;
DECL|field|customer
specifier|private
name|Customer
name|customer
decl_stmt|;
DECL|field|addressIds
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|addressIds
decl_stmt|;
comment|// *************************************************************************
comment|//
comment|// *************************************************************************
DECL|method|AddressGatewayIntegrationTest ()
specifier|public
name|AddressGatewayIntegrationTest
parameter_list|()
block|{
name|this
operator|.
name|customer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|gateway
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|addressIds
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doPostSetup ()
specifier|protected
name|void
name|doPostSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|gateway
operator|=
name|getGateway
argument_list|()
expr_stmt|;
name|this
operator|.
name|customer
operator|=
name|gateway
operator|.
name|customer
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|CustomerRequest
argument_list|()
operator|.
name|firstName
argument_list|(
literal|"user"
argument_list|)
operator|.
name|lastName
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getTarget
argument_list|()
expr_stmt|;
if|if
condition|(
name|customer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Customer created - id={}"
argument_list|,
name|this
operator|.
name|customer
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|gateway
operator|!=
literal|null
operator|&&
name|customer
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|id
range|:
name|this
operator|.
name|addressIds
control|)
block|{
if|if
condition|(
name|this
operator|.
name|gateway
operator|.
name|address
argument_list|()
operator|.
name|delete
argument_list|(
name|customer
operator|.
name|getId
argument_list|()
argument_list|,
name|id
argument_list|)
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Address deleted - customer={}, id={}"
argument_list|,
name|customer
operator|.
name|getId
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete address - customer={}, id={}"
argument_list|,
name|customer
operator|.
name|getId
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|addressIds
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|gateway
operator|.
name|customer
argument_list|()
operator|.
name|delete
argument_list|(
name|this
operator|.
name|customer
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Customer deleted - id={}"
argument_list|,
name|this
operator|.
name|customer
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to delete customer - id={}"
argument_list|,
name|this
operator|.
name|customer
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createAddress ()
specifier|private
name|Address
name|createAddress
parameter_list|()
block|{
comment|// Create address
specifier|final
name|Result
argument_list|<
name|Address
argument_list|>
name|result
init|=
name|gateway
operator|.
name|address
argument_list|()
operator|.
name|create
argument_list|(
name|this
operator|.
name|customer
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AddressRequest
argument_list|()
operator|.
name|company
argument_list|(
literal|"Apache"
argument_list|)
operator|.
name|streetAddress
argument_list|(
literal|"1901 Munsey Drive"
argument_list|)
operator|.
name|locality
argument_list|(
literal|"Forest Hill"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"create"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Address created - customer={}, id={}"
argument_list|,
name|this
operator|.
name|customer
operator|.
name|getId
argument_list|()
argument_list|,
name|result
operator|.
name|getTarget
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|getTarget
argument_list|()
return|;
block|}
comment|// *************************************************************************
comment|//
comment|// *************************************************************************
annotation|@
name|Test
DECL|method|testCreate ()
specifier|public
name|void
name|testCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
literal|"BraintreeGateway can't be null"
argument_list|,
name|this
operator|.
name|gateway
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Customer can't be null"
argument_list|,
name|this
operator|.
name|customer
argument_list|)
expr_stmt|;
specifier|final
name|Result
argument_list|<
name|Address
argument_list|>
name|address
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://CREATE"
argument_list|,
literal|null
argument_list|,
operator|new
name|BraintreeHeaderBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"customerId"
argument_list|,
name|customer
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"request"
argument_list|,
operator|new
name|AddressRequest
argument_list|()
operator|.
name|company
argument_list|(
literal|"Apache"
argument_list|)
operator|.
name|streetAddress
argument_list|(
literal|"1901 Munsey Drive"
argument_list|)
operator|.
name|locality
argument_list|(
literal|"Forest Hill"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Result
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"create"
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|address
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Address created - customer={}, id={}"
argument_list|,
name|customer
operator|.
name|getId
argument_list|()
argument_list|,
name|address
operator|.
name|getTarget
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|addressIds
operator|.
name|add
argument_list|(
name|address
operator|.
name|getTarget
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
literal|"BraintreeGateway can't be null"
argument_list|,
name|this
operator|.
name|gateway
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Customer can't be null"
argument_list|,
name|this
operator|.
name|customer
argument_list|)
expr_stmt|;
specifier|final
name|Address
name|address
init|=
name|createAddress
argument_list|()
decl_stmt|;
specifier|final
name|Result
argument_list|<
name|Address
argument_list|>
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://DELETE"
argument_list|,
literal|null
argument_list|,
operator|new
name|BraintreeHeaderBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"customerId"
argument_list|,
name|customer
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"id"
argument_list|,
name|address
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Result
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"delete"
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Address deleted - customer={}, id={}"
argument_list|,
name|customer
operator|.
name|getId
argument_list|()
argument_list|,
name|address
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFind ()
specifier|public
name|void
name|testFind
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
literal|"BraintreeGateway can't be null"
argument_list|,
name|this
operator|.
name|gateway
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Customer can't be null"
argument_list|,
name|this
operator|.
name|customer
argument_list|)
expr_stmt|;
specifier|final
name|Address
name|addressRef
init|=
name|createAddress
argument_list|()
decl_stmt|;
name|this
operator|.
name|addressIds
operator|.
name|add
argument_list|(
name|addressRef
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Address
name|address
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://FIND"
argument_list|,
literal|null
argument_list|,
operator|new
name|BraintreeHeaderBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"customerId"
argument_list|,
name|customer
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"id"
argument_list|,
name|addressRef
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Address
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"find"
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Address found - customer={}, id={}"
argument_list|,
name|customer
operator|.
name|getId
argument_list|()
argument_list|,
name|address
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdate ()
specifier|public
name|void
name|testUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
literal|"BraintreeGateway can't be null"
argument_list|,
name|this
operator|.
name|gateway
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Customer can't be null"
argument_list|,
name|this
operator|.
name|customer
argument_list|)
expr_stmt|;
specifier|final
name|Address
name|addressRef
init|=
name|createAddress
argument_list|()
decl_stmt|;
name|this
operator|.
name|addressIds
operator|.
name|add
argument_list|(
name|addressRef
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Result
argument_list|<
name|Address
argument_list|>
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://UPDATE"
argument_list|,
literal|null
argument_list|,
operator|new
name|BraintreeHeaderBuilder
argument_list|()
operator|.
name|add
argument_list|(
literal|"customerId"
argument_list|,
name|customer
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"id"
argument_list|,
name|addressRef
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|"request"
argument_list|,
operator|new
name|AddressRequest
argument_list|()
operator|.
name|company
argument_list|(
literal|"Apache"
argument_list|)
operator|.
name|streetAddress
argument_list|(
name|customer
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|locality
argument_list|(
name|customer
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Result
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"update"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Address updated - customer={}, id={}"
argument_list|,
name|customer
operator|.
name|getId
argument_list|()
argument_list|,
name|result
operator|.
name|getTarget
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// *************************************************************************
comment|// Routes
comment|// *************************************************************************
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test route for create
name|from
argument_list|(
literal|"direct://CREATE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/create"
argument_list|)
expr_stmt|;
comment|// test route for delete
name|from
argument_list|(
literal|"direct://DELETE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/delete"
argument_list|)
expr_stmt|;
comment|// test route for find
name|from
argument_list|(
literal|"direct://FIND"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/find"
argument_list|)
expr_stmt|;
comment|// test route for update
name|from
argument_list|(
literal|"direct://UPDATE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/update"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

