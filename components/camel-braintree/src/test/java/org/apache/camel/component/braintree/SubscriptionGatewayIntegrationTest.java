begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.braintree
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
operator|.
name|internal
operator|.
name|BraintreeApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|braintree
operator|.
name|internal
operator|.
name|SubscriptionGatewayApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|SubscriptionGatewayIntegrationTest
specifier|public
class|class
name|SubscriptionGatewayIntegrationTest
extends|extends
name|AbstractBraintreeTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SubscriptionGatewayIntegrationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|BraintreeApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|SubscriptionGatewayApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// TODO provide parameter values for cancel
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testCancel ()
specifier|public
name|void
name|testCancel
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using String message body for single parameter "id"
specifier|final
name|com
operator|.
name|braintreegateway
operator|.
name|Result
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://CANCEL"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"cancel result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"cancel: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
comment|// TODO provide parameter values for create
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testCreate ()
specifier|public
name|void
name|testCreate
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using com.braintreegateway.SubscriptionRequest message body for single parameter "request"
specifier|final
name|com
operator|.
name|braintreegateway
operator|.
name|Result
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://CREATE"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"create result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"create: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
comment|// TODO provide parameter values for delete
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testDelete ()
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBraintree.customerId"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBraintree.id"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|com
operator|.
name|braintreegateway
operator|.
name|Result
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://DELETE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"delete result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"delete: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
comment|// TODO provide parameter values for find
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testFind ()
specifier|public
name|void
name|testFind
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using String message body for single parameter "id"
specifier|final
name|com
operator|.
name|braintreegateway
operator|.
name|Subscription
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://FIND"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"find result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"find: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
comment|// TODO provide parameter values for retryCharge
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testRetryCharge ()
specifier|public
name|void
name|testRetryCharge
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using String message body for single parameter "subscriptionId"
specifier|final
name|com
operator|.
name|braintreegateway
operator|.
name|Result
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://RETRYCHARGE"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"retryCharge result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"retryCharge: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
comment|// TODO provide parameter values for retryCharge
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testRetryChargeWithAmount ()
specifier|public
name|void
name|testRetryChargeWithAmount
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBraintree.subscriptionId"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is java.math.BigDecimal
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBraintree.amount"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|com
operator|.
name|braintreegateway
operator|.
name|Result
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://RETRYCHARGE_1"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"retryCharge result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"retryCharge: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
comment|// TODO provide parameter values for search
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testSearch ()
specifier|public
name|void
name|testSearch
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using com.braintreegateway.SubscriptionSearchRequest message body for single parameter "searchRequest"
specifier|final
name|com
operator|.
name|braintreegateway
operator|.
name|ResourceCollection
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://SEARCH"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"search result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"search: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
comment|// TODO provide parameter values for update
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testUpdate ()
specifier|public
name|void
name|testUpdate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBraintree.id"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// parameter type is com.braintreegateway.SubscriptionRequest
name|headers
operator|.
name|put
argument_list|(
literal|"CamelBraintree.request"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|com
operator|.
name|braintreegateway
operator|.
name|Result
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://UPDATE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"update result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"update: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test route for cancel
name|from
argument_list|(
literal|"direct://CANCEL"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/cancel?inBody=id"
argument_list|)
expr_stmt|;
comment|// test route for create
name|from
argument_list|(
literal|"direct://CREATE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/create?inBody=request"
argument_list|)
expr_stmt|;
comment|// test route for delete
name|from
argument_list|(
literal|"direct://DELETE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/delete"
argument_list|)
expr_stmt|;
comment|// test route for find
name|from
argument_list|(
literal|"direct://FIND"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/find?inBody=id"
argument_list|)
expr_stmt|;
comment|// test route for retryCharge
name|from
argument_list|(
literal|"direct://RETRYCHARGE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/retryCharge?inBody=subscriptionId"
argument_list|)
expr_stmt|;
comment|// test route for retryCharge
name|from
argument_list|(
literal|"direct://RETRYCHARGE_1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/retryCharge"
argument_list|)
expr_stmt|;
comment|// test route for search
name|from
argument_list|(
literal|"direct://SEARCH"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/search?inBody=searchRequest"
argument_list|)
expr_stmt|;
comment|// test route for update
name|from
argument_list|(
literal|"direct://UPDATE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"braintree://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/update"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

