begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_comment
comment|/**  * Represents a HTTP based Endpoint  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|HttpEndpoint
specifier|public
class|class
name|HttpEndpoint
extends|extends
name|DefaultEndpoint
argument_list|<
name|HttpExchange
argument_list|>
block|{
DECL|field|binding
specifier|private
name|HttpBinding
name|binding
decl_stmt|;
DECL|method|HttpEndpoint (String uri, CamelContext camelContext)
specifier|protected
name|HttpEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
block|}
DECL|method|onExchange (HttpExchange exchange)
specifier|public
name|void
name|onExchange
parameter_list|(
name|HttpExchange
name|exchange
parameter_list|)
block|{
name|Processor
argument_list|<
name|HttpExchange
argument_list|>
name|processor
init|=
name|getInboundProcessor
argument_list|()
decl_stmt|;
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
comment|// lets route straight to our processor
name|processor
operator|.
name|onExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we need an external HTTP client such as commons-httpclient
comment|// TODO
block|}
block|}
DECL|method|createExchange ()
specifier|public
name|HttpExchange
name|createExchange
parameter_list|()
block|{
return|return
operator|new
name|HttpExchange
argument_list|(
name|getContext
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createExchange (HttpServletRequest request, HttpServletResponse response)
specifier|public
name|HttpExchange
name|createExchange
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
block|{
return|return
operator|new
name|HttpExchange
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
return|;
block|}
DECL|method|getBinding ()
specifier|public
name|HttpBinding
name|getBinding
parameter_list|()
block|{
if|if
condition|(
name|binding
operator|==
literal|null
condition|)
block|{
name|binding
operator|=
operator|new
name|HttpBinding
argument_list|()
expr_stmt|;
block|}
return|return
name|binding
return|;
block|}
DECL|method|setBinding (HttpBinding binding)
specifier|public
name|void
name|setBinding
parameter_list|(
name|HttpBinding
name|binding
parameter_list|)
block|{
name|this
operator|.
name|binding
operator|=
name|binding
expr_stmt|;
block|}
block|}
end_class

end_unit

