begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidHeaderTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|DefaultJmsExchange
specifier|public
class|class
name|DefaultJmsExchange
extends|extends
name|DefaultExchange
implements|implements
name|JmsExchange
block|{
DECL|method|DefaultJmsExchange (CamelContext container)
specifier|public
name|DefaultJmsExchange
parameter_list|(
name|CamelContext
name|container
parameter_list|)
block|{
name|super
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
DECL|method|DefaultJmsExchange (CamelContext container, Message message)
specifier|public
name|DefaultJmsExchange
parameter_list|(
name|CamelContext
name|container
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|setIn
argument_list|(
operator|new
name|DefaultJmsMessage
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newInstance ()
specifier|public
name|Exchange
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|DefaultJmsExchange
argument_list|(
name|getContext
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createMessage (Session session)
specifier|public
name|Message
name|createMessage
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
name|Message
name|request
init|=
name|getInMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
name|request
operator|=
name|session
operator|.
name|createMessage
argument_list|()
expr_stmt|;
comment|/** TODO             if (lazyHeaders != null) {                 // lets add any lazy headers                 for (Map.Entry<String, Object> entry : lazyHeaders.entrySet()) {                     request.setObjectProperty(entry.getKey(), entry.getValue());                 }             }              */
block|}
return|return
name|request
return|;
block|}
DECL|method|getInMessage ()
specifier|public
name|Message
name|getInMessage
parameter_list|()
block|{
name|JmsMessage
name|jmsMessage
init|=
operator|(
name|JmsMessage
operator|)
name|getIn
argument_list|()
decl_stmt|;
if|if
condition|(
name|jmsMessage
operator|!=
literal|null
condition|)
block|{
return|return
name|jmsMessage
operator|.
name|getJmsMessage
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|createInMessage ()
specifier|protected
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|createInMessage
parameter_list|()
block|{
return|return
operator|new
name|DefaultJmsMessage
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createOutMessage ()
specifier|protected
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|createOutMessage
parameter_list|()
block|{
return|return
operator|new
name|DefaultJmsMessage
argument_list|()
return|;
block|}
block|}
end_class

end_unit

