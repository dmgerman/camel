begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.karaf.converters
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|karaf
operator|.
name|converters
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jackson
operator|.
name|JacksonConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|karaf
operator|.
name|BaseKarafTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|karaf
operator|.
name|bean
operator|.
name|Pojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|junit
operator|.
name|PaxExam
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|PaxExam
operator|.
name|class
argument_list|)
DECL|class|CamelJacksonFallbackConverterTest
specifier|public
class|class
name|CamelJacksonFallbackConverterTest
extends|extends
name|BaseKarafTest
block|{
annotation|@
name|Configuration
DECL|method|configure ()
specifier|public
specifier|static
name|Option
index|[]
name|configure
parameter_list|()
block|{
return|return
name|BaseKarafTest
operator|.
name|configure
argument_list|(
literal|"camel-jackson"
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|getOsgiService
argument_list|(
name|bundleContext
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|,
literal|"(camel.context.name=myCamel)"
argument_list|,
name|SERVICE_TIMEOUT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot find CamelContext with name myCamel"
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|// enable Jackson json type converter
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|JacksonConstants
operator|.
name|ENABLE_TYPE_CONVERTER
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// allow Jackson json to convert to pojo types also (by default jackson only converts to String and other simple types)
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|JacksonConstants
operator|.
name|TYPE_CONVERTER_TO_POJO
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// test type conversion
specifier|final
name|Pojo
name|pojo
init|=
operator|new
name|Pojo
argument_list|(
literal|1337
argument_list|,
literal|"Constantine"
argument_list|)
decl_stmt|;
specifier|final
name|DefaultExchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
specifier|final
name|String
name|string
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|pojo
argument_list|)
decl_stmt|;
specifier|final
name|Pojo
name|copy
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|Pojo
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|string
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pojo
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

