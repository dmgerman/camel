begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.tests.performance
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tests
operator|.
name|performance
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|tests
operator|.
name|component
operator|.
name|PerformanceTestComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ProducerCacheHitsTest
specifier|public
class|class
name|ProducerCacheHitsTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|SMALL_MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|SMALL_MESSAGE
init|=
literal|"message"
decl_stmt|;
DECL|field|FORMAT
specifier|private
specifier|static
specifier|final
name|DecimalFormat
name|FORMAT
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"#.##"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testRepeatProcessing ()
specifier|public
name|void
name|testRepeatProcessing
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|data
init|=
name|getMandatoryEndpoint
argument_list|(
literal|"mock:results"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|data
operator|.
name|expectedMessageCount
argument_list|(
literal|4
operator|*
literal|7
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|10
init|;
name|iter
operator|<=
literal|10000
condition|;
name|iter
operator|*=
literal|10
control|)
block|{
for|for
control|(
name|int
name|t
init|=
literal|2
init|;
name|t
operator|<=
literal|128
condition|;
name|t
operator|*=
literal|2
control|)
block|{
name|runTest
argument_list|(
literal|"test-perf:endpoint"
argument_list|,
name|SMALL_MESSAGE
argument_list|,
name|iter
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|data
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
for|for
control|(
name|Exchange
name|ex
range|:
name|data
operator|.
name|getExchanges
argument_list|()
control|)
block|{
name|TestResult
name|r
init|=
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|TestResult
operator|.
name|class
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runTest (String uri, String body, int iterations, int threads)
specifier|protected
name|Object
name|runTest
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|body
parameter_list|,
name|int
name|iterations
parameter_list|,
name|int
name|threads
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|PerformanceTestComponent
operator|.
name|HEADER_ITERATIONS
argument_list|,
name|iterations
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|PerformanceTestComponent
operator|.
name|HEADER_THREADS
argument_list|,
name|threads
argument_list|)
expr_stmt|;
name|StopWatch
name|watch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|Object
name|result
init|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
name|uri
argument_list|,
name|body
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"mock:results"
argument_list|,
operator|new
name|TestResult
argument_list|(
name|uri
argument_list|,
name|iterations
argument_list|,
name|threads
argument_list|,
name|watch
operator|.
name|stop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"test-perf:endpoint"
argument_list|)
operator|.
name|to
argument_list|(
literal|"echo:echo"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|TestResult
specifier|public
specifier|final
class|class
name|TestResult
block|{
DECL|field|uri
specifier|public
name|String
name|uri
decl_stmt|;
DECL|field|iterations
specifier|public
name|int
name|iterations
decl_stmt|;
DECL|field|threads
specifier|public
name|int
name|threads
decl_stmt|;
DECL|field|time
specifier|public
name|long
name|time
decl_stmt|;
DECL|method|TestResult (String uri, int iterations, int threads, long time)
specifier|public
name|TestResult
parameter_list|(
name|String
name|uri
parameter_list|,
name|int
name|iterations
parameter_list|,
name|int
name|threads
parameter_list|,
name|long
name|time
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|iterations
operator|=
name|iterations
expr_stmt|;
name|this
operator|.
name|threads
operator|=
name|threads
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|time
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|FORMAT
operator|.
name|format
argument_list|(
literal|1000.0
operator|*
name|iterations
operator|/
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" /s], "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|iterations
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|threads
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|time
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

