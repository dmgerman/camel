begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.cxf.blueprint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|cxf
operator|.
name|blueprint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ProcessingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|common
operator|.
name|message
operator|.
name|CxfConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|CxfRsEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|blueprint
operator|.
name|CamelBlueprintTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|JAXRSServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|JAXRSClientFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CxfRsEndpointBeansTest
specifier|public
class|class
name|CxfRsEndpointBeansTest
extends|extends
name|CamelBlueprintTestSupport
block|{
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"direct:startURLOverride"
argument_list|)
DECL|field|pT
specifier|private
name|ProducerTemplate
name|pT
decl_stmt|;
annotation|@
name|Override
DECL|method|getBlueprintDescriptor ()
specifier|protected
name|String
name|getBlueprintDescriptor
parameter_list|()
block|{
return|return
literal|"org/apache/camel/test/cxf/blueprint/CxfRsEndpointBeans.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|getBundleDirectives ()
specifier|protected
name|String
name|getBundleDirectives
parameter_list|()
block|{
return|return
literal|"blueprint.aries.xml-validation:=false"
return|;
block|}
annotation|@
name|Test
DECL|method|testCxfBusInjection ()
specifier|public
name|void
name|testCxfBusInjection
parameter_list|()
block|{
name|CxfRsEndpoint
name|serviceEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"cxfrs:bean:serviceEndpoint"
argument_list|,
name|CxfRsEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|CxfRsEndpoint
name|routerEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"cxfrs:bean:routerEndpoint"
argument_list|,
name|CxfRsEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|JAXRSServerFactoryBean
name|server
init|=
name|routerEndpoint
operator|.
name|createJAXRSServerFactoryBean
argument_list|()
decl_stmt|;
name|JAXRSClientFactoryBean
name|client
init|=
name|serviceEndpoint
operator|.
name|createJAXRSClientFactoryBean
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"These cxfrs endpoints don't share the same bus"
argument_list|,
name|server
operator|.
name|getBus
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|client
operator|.
name|getBus
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDestinationOverrideURLHandling ()
specifier|public
name|void
name|testDestinationOverrideURLHandling
parameter_list|()
block|{
try|try
block|{
name|context
operator|.
name|getRouteController
argument_list|()
operator|.
name|startRoute
argument_list|(
literal|"url-override-route"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|expected
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo1"
argument_list|,
literal|"foo2"
argument_list|,
literal|"foo1"
argument_list|,
literal|"foo2"
argument_list|,
literal|"foo1"
argument_list|)
decl_stmt|;
name|expected
operator|.
name|forEach
argument_list|(
name|host
lambda|->
name|pT
operator|.
name|send
argument_list|(
name|exchange
lambda|->
block|{
name|Message
name|in
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|;
name|in
operator|.
name|setHeader
argument_list|(
name|CxfConstants
operator|.
name|CAMEL_CXF_RS_USING_HTTP_API
argument_list|,
literal|false
argument_list|)
argument_list|;
name|in
operator|.
name|setHeader
argument_list|(
name|CxfConstants
operator|.
name|OPERATION_NAME
argument_list|,
literal|"getCustomer"
argument_list|)
argument_list|;
name|in
operator|.
name|setBody
argument_list|(
literal|"Scott"
argument_list|)
argument_list|;
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|ACCEPT_CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
argument_list|;
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|DESTINATION_OVERRIDE_URL
argument_list|,
literal|"http://"
operator|+
name|host
argument_list|)
argument_list|;
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
literal|"GET"
argument_list|)
argument_list|;
block|}
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:resultURLOverride"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|expected
operator|.
name|toArray
argument_list|()
argument_list|,
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|exchange
lambda|->
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|ProcessingException
operator|.
name|class
argument_list|)
operator|.
name|getCause
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|exceptionMessage
lambda|->
name|exceptionMessage
operator|.
name|split
argument_list|(
literal|"\\: "
argument_list|)
index|[
literal|1
index|]
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

unit|}  }
end_unit

