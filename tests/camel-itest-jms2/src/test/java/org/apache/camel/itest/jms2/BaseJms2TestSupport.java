begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.jms2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|jms2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|api
operator|.
name|core
operator|.
name|SimpleString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|api
operator|.
name|core
operator|.
name|TransportConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|api
operator|.
name|jms
operator|.
name|ActiveMQJMSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|core
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|core
operator|.
name|config
operator|.
name|impl
operator|.
name|ConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|core
operator|.
name|remoting
operator|.
name|impl
operator|.
name|netty
operator|.
name|NettyConnectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|core
operator|.
name|server
operator|.
name|QueueQueryResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|jms
operator|.
name|server
operator|.
name|config
operator|.
name|ConnectionFactoryConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|jms
operator|.
name|server
operator|.
name|config
operator|.
name|JMSConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|jms
operator|.
name|server
operator|.
name|config
operator|.
name|JMSQueueConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|jms
operator|.
name|server
operator|.
name|config
operator|.
name|impl
operator|.
name|ConnectionFactoryConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|jms
operator|.
name|server
operator|.
name|config
operator|.
name|impl
operator|.
name|JMSConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|jms
operator|.
name|server
operator|.
name|config
operator|.
name|impl
operator|.
name|JMSQueueConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|jms
operator|.
name|server
operator|.
name|embedded
operator|.
name|EmbeddedJMS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_comment
comment|/**  * A support class that builds up and tears down an ActiveMQ Artemis instance to be used  * for unit testing.  */
end_comment

begin_class
DECL|class|BaseJms2TestSupport
specifier|public
class|class
name|BaseJms2TestSupport
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Produce
DECL|field|template
specifier|protected
name|ProducerTemplate
name|template
decl_stmt|;
DECL|field|brokerUri
specifier|protected
name|String
name|brokerUri
decl_stmt|;
DECL|field|port
specifier|protected
name|int
name|port
decl_stmt|;
DECL|field|broker
specifier|protected
name|EmbeddedJMS
name|broker
decl_stmt|;
DECL|field|connection
specifier|protected
name|Connection
name|connection
decl_stmt|;
DECL|field|session
specifier|protected
name|Session
name|session
decl_stmt|;
comment|/**      * Set up the Broker      *      * @see CamelTestSupport#doPreSetup()      *      * @throws Exception      */
annotation|@
name|Override
DECL|method|doPreSetup ()
specifier|protected
name|void
name|doPreSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|EmbeddedJMS
argument_list|()
expr_stmt|;
name|deleteDirectory
argument_list|(
literal|"target/data"
argument_list|)
expr_stmt|;
name|port
operator|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|(
literal|33333
argument_list|)
expr_stmt|;
name|brokerUri
operator|=
literal|"tcp://localhost:"
operator|+
name|port
expr_stmt|;
name|configureBroker
argument_list|(
name|this
operator|.
name|broker
argument_list|)
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
block|}
DECL|method|configureBroker (EmbeddedJMS broker)
specifier|protected
name|void
name|configureBroker
parameter_list|(
name|EmbeddedJMS
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
operator|new
name|ConfigurationImpl
argument_list|()
operator|.
name|setPersistenceEnabled
argument_list|(
literal|false
argument_list|)
operator|.
name|setJournalDirectory
argument_list|(
literal|"target/data/journal"
argument_list|)
operator|.
name|setSecurityEnabled
argument_list|(
literal|false
argument_list|)
operator|.
name|addAcceptorConfiguration
argument_list|(
literal|"connector"
argument_list|,
name|brokerUri
operator|+
literal|"?protocols=CORE,AMQP"
argument_list|)
operator|.
name|addAcceptorConfiguration
argument_list|(
literal|"vm"
argument_list|,
literal|"vm://123"
argument_list|)
operator|.
name|addConnectorConfiguration
argument_list|(
literal|"connector"
argument_list|,
operator|new
name|TransportConfiguration
argument_list|(
name|NettyConnectorFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|JMSConfiguration
name|jmsConfig
init|=
operator|new
name|JMSConfigurationImpl
argument_list|()
decl_stmt|;
name|ConnectionFactoryConfiguration
name|cfConfig
init|=
operator|new
name|ConnectionFactoryConfigurationImpl
argument_list|()
operator|.
name|setName
argument_list|(
literal|"cf"
argument_list|)
operator|.
name|setConnectorNames
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"connector"
argument_list|)
argument_list|)
operator|.
name|setBindings
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
name|jmsConfig
operator|.
name|getConnectionFactoryConfigurations
argument_list|()
operator|.
name|add
argument_list|(
name|cfConfig
argument_list|)
expr_stmt|;
name|JMSQueueConfiguration
name|queueConfig
init|=
operator|new
name|JMSQueueConfigurationImpl
argument_list|()
operator|.
name|setName
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|setDurable
argument_list|(
literal|false
argument_list|)
operator|.
name|setBindings
argument_list|(
literal|"queue/queue1"
argument_list|)
decl_stmt|;
name|jmsConfig
operator|.
name|getQueueConfigurations
argument_list|()
operator|.
name|add
argument_list|(
name|queueConfig
argument_list|)
expr_stmt|;
name|JMSQueueConfiguration
name|topicConfig
init|=
operator|new
name|JMSQueueConfigurationImpl
argument_list|()
operator|.
name|setName
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|setDurable
argument_list|(
literal|true
argument_list|)
operator|.
name|setBindings
argument_list|(
literal|"topic/foo"
argument_list|)
decl_stmt|;
name|jmsConfig
operator|.
name|getQueueConfigurations
argument_list|()
operator|.
name|add
argument_list|(
name|topicConfig
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
operator|.
name|setJmsConfiguration
argument_list|(
name|jmsConfig
argument_list|)
expr_stmt|;
block|}
DECL|method|startBroker ()
specifier|private
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Started Embedded JMS Server"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|DefaultCamelContext
name|dcc
init|=
operator|(
name|DefaultCamelContext
operator|)
name|context
decl_stmt|;
while|while
condition|(
operator|!
name|dcc
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Waiting on the Camel Context to stop"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Closing JMS Session"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSession
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getSession
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|setSession
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Closing JMS Connection"
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connection
operator|=
literal|null
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Stopping the ActiveMQ Broker"
argument_list|)
expr_stmt|;
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|ConnectionFactory
name|connectionFactory
init|=
name|getConnectionFactory
argument_list|()
decl_stmt|;
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|JmsComponent
name|component
init|=
operator|new
name|JmsComponent
argument_list|()
decl_stmt|;
name|component
operator|.
name|setConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|component
operator|.
name|setClientId
argument_list|(
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addComponent
argument_list|(
literal|"jms"
argument_list|,
name|component
argument_list|)
expr_stmt|;
return|return
name|camelContext
return|;
block|}
DECL|method|getClientId ()
specifier|protected
name|String
name|getClientId
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|getConnectionFactory ()
specifier|protected
name|ConnectionFactory
name|getConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ActiveMQJMSClient
operator|.
name|createConnectionFactory
argument_list|(
name|brokerUri
argument_list|,
literal|"test"
argument_list|)
return|;
block|}
DECL|method|getQueueQueryResult (String queueQuery)
specifier|public
name|QueueQueryResult
name|getQueueQueryResult
parameter_list|(
name|String
name|queueQuery
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|broker
operator|.
name|getActiveMQServer
argument_list|()
operator|.
name|queueQuery
argument_list|(
operator|new
name|SimpleString
argument_list|(
name|queueQuery
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setSession (Session session)
specifier|public
name|void
name|setSession
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
block|}
DECL|method|getSession ()
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
DECL|method|createQueueConsumer (String destination)
specifier|public
name|MessageConsumer
name|createQueueConsumer
parameter_list|(
name|String
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
name|Queue
name|queue
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|destination
argument_list|)
decl_stmt|;
return|return
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
return|;
block|}
DECL|method|createTopicConsumer (String destination, String messageSelector)
specifier|public
name|MessageConsumer
name|createTopicConsumer
parameter_list|(
name|String
name|destination
parameter_list|,
name|String
name|messageSelector
parameter_list|)
throws|throws
name|Exception
block|{
name|Topic
name|topic
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|destination
argument_list|)
decl_stmt|;
return|return
name|session
operator|.
name|createConsumer
argument_list|(
name|topic
argument_list|,
name|messageSelector
argument_list|)
return|;
block|}
block|}
end_class

end_unit

