begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.itest.osgi.blueprint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|osgi
operator|.
name|blueprint
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|TraceEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|TraceInterceptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|MyTraceEventHandler
specifier|public
class|class
name|MyTraceEventHandler
implements|implements
name|TraceEventHandler
block|{
DECL|field|eventMessages
specifier|private
name|List
argument_list|<
name|StringBuilder
argument_list|>
name|eventMessages
decl_stmt|;
DECL|method|MyTraceEventHandler ()
specifier|public
name|MyTraceEventHandler
parameter_list|()
block|{
name|this
operator|.
name|eventMessages
operator|=
operator|new
name|LinkedList
argument_list|<
name|StringBuilder
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|recordComplete (StringBuilder message, ProcessorDefinition<?> node, Exchange exchange)
specifier|public
specifier|static
name|void
name|recordComplete
parameter_list|(
name|StringBuilder
name|message
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"Complete: "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|node
operator|.
name|getLabel
argument_list|()
operator|+
literal|": "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|recordIn (StringBuilder message, ProcessorDefinition<?> node, Exchange exchange)
specifier|public
specifier|static
name|void
name|recordIn
parameter_list|(
name|StringBuilder
name|message
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"In: "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|node
operator|.
name|getLabel
argument_list|()
operator|+
literal|": "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|recordOut (StringBuilder message, ProcessorDefinition<?> node, Exchange exchange)
specifier|public
specifier|static
name|void
name|recordOut
parameter_list|(
name|StringBuilder
name|message
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"Out: "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|node
operator|.
name|getLabel
argument_list|()
operator|+
literal|": "
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|exchange
operator|.
name|getOut
argument_list|()
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|exchange
operator|.
name|getException
argument_list|()
condition|)
block|{
name|Exception
name|ex
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"Ex: "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|storeMessage (StringBuilder message)
specifier|private
specifier|synchronized
name|void
name|storeMessage
parameter_list|(
name|StringBuilder
name|message
parameter_list|)
block|{
name|eventMessages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|traceExchange (ProcessorDefinition<?> node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange)
specifier|public
name|void
name|traceExchange
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|recordComplete
argument_list|(
name|message
argument_list|,
name|node
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|storeMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|traceExchangeIn (ProcessorDefinition<?> node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange)
specifier|public
name|Object
name|traceExchangeIn
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|recordIn
argument_list|(
name|message
argument_list|,
name|node
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
DECL|method|traceExchangeOut (ProcessorDefinition<?> node, Processor target, TraceInterceptor traceInterceptor, Exchange exchange, Object traceState)
specifier|public
name|void
name|traceExchangeOut
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|node
parameter_list|,
name|Processor
name|target
parameter_list|,
name|TraceInterceptor
name|traceInterceptor
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Object
name|traceState
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|StringBuilder
operator|.
name|class
operator|.
name|equals
argument_list|(
name|traceState
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|StringBuilder
name|message
init|=
operator|(
name|StringBuilder
operator|)
name|traceState
decl_stmt|;
name|recordOut
argument_list|(
name|message
argument_list|,
name|node
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|storeMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

