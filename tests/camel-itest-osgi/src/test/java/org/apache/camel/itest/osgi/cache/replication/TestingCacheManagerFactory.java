begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.osgi.cache.replication
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|osgi
operator|.
name|cache
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicConnection
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|distribution
operator|.
name|jms
operator|.
name|AcknowledgementMode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|distribution
operator|.
name|jms
operator|.
name|JMSCacheManagerPeerProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cache
operator|.
name|CacheManagerFactory
import|;
end_import

begin_class
DECL|class|TestingCacheManagerFactory
specifier|public
class|class
name|TestingCacheManagerFactory
extends|extends
name|CacheManagerFactory
block|{
DECL|field|xmlName
specifier|private
name|String
name|xmlName
decl_stmt|;
comment|//Only for testing purpose, normally not needed
DECL|field|cacheManager
specifier|private
name|CacheManager
name|cacheManager
decl_stmt|;
DECL|field|replicationTopic
specifier|private
name|Topic
name|replicationTopic
decl_stmt|;
DECL|field|getQueue
specifier|private
name|Queue
name|getQueue
decl_stmt|;
DECL|field|replicationTopicConnection
specifier|private
name|TopicConnection
name|replicationTopicConnection
decl_stmt|;
DECL|field|getQueueConnection
specifier|private
name|QueueConnection
name|getQueueConnection
decl_stmt|;
DECL|method|TestingCacheManagerFactory (String xmlName, TopicConnection replicationTopicConnection, Topic replicationTopic, QueueConnection getQueueConnection, Queue getQueue)
specifier|public
name|TestingCacheManagerFactory
parameter_list|(
name|String
name|xmlName
parameter_list|,
name|TopicConnection
name|replicationTopicConnection
parameter_list|,
name|Topic
name|replicationTopic
parameter_list|,
name|QueueConnection
name|getQueueConnection
parameter_list|,
name|Queue
name|getQueue
parameter_list|)
block|{
name|this
operator|.
name|xmlName
operator|=
name|xmlName
expr_stmt|;
name|this
operator|.
name|replicationTopicConnection
operator|=
name|replicationTopicConnection
expr_stmt|;
name|this
operator|.
name|replicationTopic
operator|=
name|replicationTopic
expr_stmt|;
name|this
operator|.
name|getQueue
operator|=
name|getQueue
expr_stmt|;
name|this
operator|.
name|getQueueConnection
operator|=
name|getQueueConnection
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCacheManagerInstance ()
specifier|protected
specifier|synchronized
name|CacheManager
name|createCacheManagerInstance
parameter_list|()
block|{
comment|//Singleton- only for testing purpose, normally not needed
if|if
condition|(
name|cacheManager
operator|==
literal|null
condition|)
block|{
name|cacheManager
operator|=
operator|new
name|WrappedCacheManager
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|xmlName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|cacheManager
return|;
block|}
DECL|method|getCacheManager ()
specifier|public
name|CacheManager
name|getCacheManager
parameter_list|()
block|{
return|return
name|cacheManager
return|;
block|}
DECL|class|WrappedCacheManager
specifier|public
class|class
name|WrappedCacheManager
extends|extends
name|CacheManager
block|{
DECL|method|WrappedCacheManager (InputStream xmlConfig)
specifier|public
name|WrappedCacheManager
parameter_list|(
name|InputStream
name|xmlConfig
parameter_list|)
block|{
name|super
argument_list|(
name|xmlConfig
argument_list|)
expr_stmt|;
name|JMSCacheManagerPeerProvider
name|jmsCMPP
init|=
operator|new
name|JMSCacheManagerPeerProvider
argument_list|(
name|this
argument_list|,
name|replicationTopicConnection
argument_list|,
name|replicationTopic
argument_list|,
name|getQueueConnection
argument_list|,
name|getQueue
argument_list|,
name|AcknowledgementMode
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|cacheManagerPeerProviders
operator|.
name|put
argument_list|(
name|jmsCMPP
operator|.
name|getScheme
argument_list|()
argument_list|,
name|jmsCMPP
argument_list|)
expr_stmt|;
name|jmsCMPP
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

