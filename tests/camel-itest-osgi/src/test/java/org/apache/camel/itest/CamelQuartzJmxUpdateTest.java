begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|karaf
operator|.
name|AbstractFeatureTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|junit
operator|.
name|PaxExam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_comment
comment|/**  * CAMEL-11471: Unable to update the cron details from Quartz scheduler MBean  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|PaxExam
operator|.
name|class
argument_list|)
DECL|class|CamelQuartzJmxUpdateTest
specifier|public
class|class
name|CamelQuartzJmxUpdateTest
extends|extends
name|AbstractFeatureTest
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelQuartzJmxUpdateTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testUpdateCronDetails ()
specifier|public
name|void
name|testUpdateCronDetails
parameter_list|()
throws|throws
name|Exception
block|{
comment|// install camel-quartz here as 'wrap:' is not available at boot time
name|installCamelFeature
argument_list|(
literal|"camel-quartz"
argument_list|)
expr_stmt|;
comment|// install the camel blueprint xml file we use in this test
name|URL
name|url
init|=
name|ObjectHelper
operator|.
name|loadResourceAsURL
argument_list|(
literal|"org/apache/camel/itest/CamelQuartz2JmxUpdateTest.xml"
argument_list|,
name|CamelQuartzJmxUpdateTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|installBlueprintAsBundle
argument_list|(
literal|"CamelQuartzJmxUpdateTest"
argument_list|,
name|url
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// lookup Camel from OSGi
name|CamelContext
name|camel
init|=
name|getOsgiService
argument_list|(
name|bundleContext
argument_list|,
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// test camel
name|MockEndpoint
name|mock
init|=
name|camel
operator|.
name|getEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|doUpdateCronDetails
argument_list|()
expr_stmt|;
block|}
DECL|method|doUpdateCronDetails ()
specifier|private
name|void
name|doUpdateCronDetails
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|trigger
init|=
literal|"myTimer"
decl_stmt|;
name|String
name|group
init|=
literal|"myGroup"
decl_stmt|;
name|String
name|cronExpression
init|=
literal|"0 * * * * ?"
decl_stmt|;
name|MBeanServer
name|mBeanServer
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|objectNames
init|=
name|mBeanServer
operator|.
name|queryNames
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"quartz:type=QuartzScheduler,name=*,instance=NON_CLUSTERED"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"There should be a quartz scheduler MBean"
argument_list|,
name|objectNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectName
name|oName
init|=
name|objectNames
operator|.
name|stream
argument_list|()
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Scheduler MBean: {}"
argument_list|,
name|oName
argument_list|)
expr_stmt|;
name|CompositeData
name|triggerData
init|=
operator|(
name|CompositeData
operator|)
name|mBeanServer
operator|.
name|invoke
argument_list|(
name|oName
argument_list|,
literal|"getTrigger"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|trigger
block|,
name|group
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|}
argument_list|)
decl_stmt|;
name|String
name|jobName
init|=
operator|(
name|String
operator|)
name|triggerData
operator|.
name|get
argument_list|(
literal|"jobName"
argument_list|)
decl_stmt|;
name|String
name|jobGroup
init|=
operator|(
name|String
operator|)
name|triggerData
operator|.
name|get
argument_list|(
literal|"jobGroup"
argument_list|)
decl_stmt|;
name|CompositeData
name|jobData
init|=
operator|(
name|CompositeData
operator|)
name|mBeanServer
operator|.
name|invoke
argument_list|(
name|oName
argument_list|,
literal|"getJobDetail"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|jobName
block|,
name|jobGroup
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|}
argument_list|)
decl_stmt|;
name|String
name|original
init|=
name|getCronExpression
argument_list|(
name|jobData
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"make sure original cron is different"
argument_list|,
name|cronExpression
argument_list|,
name|original
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jobInfo
init|=
name|createJobInfo
argument_list|(
name|jobName
argument_list|,
name|jobGroup
argument_list|,
name|cronExpression
argument_list|,
name|jobData
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|triggerInfo
init|=
name|createTriggerInfo
argument_list|(
name|trigger
argument_list|,
name|group
argument_list|,
name|cronExpression
argument_list|,
name|jobName
argument_list|,
name|jobGroup
argument_list|)
decl_stmt|;
comment|// update trigger
name|mBeanServer
operator|.
name|invoke
argument_list|(
name|oName
argument_list|,
literal|"scheduleBasicJob"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|jobInfo
block|,
name|triggerInfo
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.util.Map"
block|,
literal|"java.util.Map"
block|}
argument_list|)
expr_stmt|;
comment|// assert job details updated
name|CompositeData
name|jobData2
init|=
operator|(
name|CompositeData
operator|)
name|mBeanServer
operator|.
name|invoke
argument_list|(
name|oName
argument_list|,
literal|"getJobDetail"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|jobName
block|,
name|jobGroup
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|}
argument_list|)
decl_stmt|;
name|String
name|updated
init|=
name|getCronExpression
argument_list|(
name|jobData2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cron should be updated"
argument_list|,
name|cronExpression
argument_list|,
name|updated
argument_list|)
expr_stmt|;
block|}
DECL|method|getCronExpression (CompositeData jobData)
specifier|private
name|String
name|getCronExpression
parameter_list|(
name|CompositeData
name|jobData
parameter_list|)
block|{
name|TabularData
name|jobDataMap
init|=
operator|(
name|TabularData
operator|)
name|jobData
operator|.
name|get
argument_list|(
literal|"jobDataMap"
argument_list|)
decl_stmt|;
name|CompositeData
name|cron
init|=
name|jobDataMap
operator|.
name|get
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"CamelQuartzTriggerCronExpression"
block|}
argument_list|)
decl_stmt|;
name|Iterator
name|it
init|=
name|cron
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
return|;
block|}
DECL|method|createJobInfo (String jobName, String jobGroup, String cronExpression, CompositeData jobData)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|createJobInfo
parameter_list|(
name|String
name|jobName
parameter_list|,
name|String
name|jobGroup
parameter_list|,
name|String
name|cronExpression
parameter_list|,
name|CompositeData
name|jobData
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jobInfo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|jobInfo
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|jobName
argument_list|)
expr_stmt|;
name|jobInfo
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|jobGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobData
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|jobInfo
operator|.
name|put
argument_list|(
literal|"description"
argument_list|,
name|jobData
operator|.
name|get
argument_list|(
literal|"description"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|jobInfo
operator|.
name|put
argument_list|(
literal|"jobClass"
argument_list|,
name|jobData
operator|.
name|get
argument_list|(
literal|"jobClass"
argument_list|)
argument_list|)
expr_stmt|;
name|jobInfo
operator|.
name|put
argument_list|(
literal|"durability"
argument_list|,
name|jobData
operator|.
name|get
argument_list|(
literal|"durability"
argument_list|)
argument_list|)
expr_stmt|;
name|jobInfo
operator|.
name|put
argument_list|(
literal|"shouldRecover"
argument_list|,
name|jobData
operator|.
name|get
argument_list|(
literal|"shouldRecover"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jobDataMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TabularData
name|tJobDataMap
init|=
operator|(
name|TabularData
operator|)
name|jobData
operator|.
name|get
argument_list|(
literal|"jobDataMap"
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|cKey
range|:
name|tJobDataMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
name|key
init|=
operator|(
operator|(
name|List
operator|)
name|cKey
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CompositeData
name|cd
init|=
name|tJobDataMap
operator|.
name|get
argument_list|(
operator|new
name|Object
index|[]
block|{
name|key
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|cd
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|it
init|=
name|cd
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|tKey
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|tValue
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|jobDataMap
operator|.
name|put
argument_list|(
name|tKey
argument_list|,
name|tValue
argument_list|)
expr_stmt|;
block|}
block|}
name|jobDataMap
operator|.
name|put
argument_list|(
literal|"CamelQuartzTriggerType"
argument_list|,
literal|"cron"
argument_list|)
expr_stmt|;
name|jobDataMap
operator|.
name|put
argument_list|(
literal|"CamelQuartzTriggerCronExpression"
argument_list|,
name|cronExpression
argument_list|)
expr_stmt|;
name|jobInfo
operator|.
name|put
argument_list|(
literal|"jobDataMap"
argument_list|,
name|jobDataMap
argument_list|)
expr_stmt|;
return|return
name|jobInfo
return|;
block|}
DECL|method|createTriggerInfo (String trigger, String group, String cronExpression, String jobName, String jobGroup)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|createTriggerInfo
parameter_list|(
name|String
name|trigger
parameter_list|,
name|String
name|group
parameter_list|,
name|String
name|cronExpression
parameter_list|,
name|String
name|jobName
parameter_list|,
name|String
name|jobGroup
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|triggerInfo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|triggerInfo
operator|.
name|put
argument_list|(
literal|"cronExpression"
argument_list|,
name|cronExpression
argument_list|)
expr_stmt|;
name|triggerInfo
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|trigger
argument_list|)
expr_stmt|;
name|triggerInfo
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|triggerInfo
operator|.
name|put
argument_list|(
literal|"jobName"
argument_list|,
name|jobName
argument_list|)
expr_stmt|;
name|triggerInfo
operator|.
name|put
argument_list|(
literal|"jobGroup"
argument_list|,
name|jobGroup
argument_list|)
expr_stmt|;
name|triggerInfo
operator|.
name|put
argument_list|(
literal|"misfireInstruction"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|triggerInfo
return|;
block|}
annotation|@
name|Configuration
DECL|method|configure ()
specifier|public
name|Option
index|[]
name|configure
parameter_list|()
block|{
return|return
name|configure
argument_list|(
literal|"camel-test-karaf"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

