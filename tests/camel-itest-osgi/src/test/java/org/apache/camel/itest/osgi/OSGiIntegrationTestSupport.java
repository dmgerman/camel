begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.osgi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|osgi
operator|.
name|CamelContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|testing
operator|.
name|Helper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|junit
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|options
operator|.
name|MavenArtifactProvisionOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|options
operator|.
name|UrlReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|CoreOptions
operator|.
name|mavenBundle
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|OptionUtils
operator|.
name|combine
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|container
operator|.
name|def
operator|.
name|PaxRunnerOptions
operator|.
name|scanFeatures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|container
operator|.
name|def
operator|.
name|PaxRunnerOptions
operator|.
name|workingDirectory
import|;
end_import

begin_class
DECL|class|OSGiIntegrationTestSupport
specifier|public
class|class
name|OSGiIntegrationTestSupport
extends|extends
name|CamelTestSupport
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OSGiIntegrationTestSupport
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|COUNTER
specifier|protected
specifier|static
specifier|final
name|AtomicInteger
name|COUNTER
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|workDir
specifier|protected
specifier|static
name|String
name|workDir
init|=
literal|"target/paxrunner/"
decl_stmt|;
annotation|@
name|Inject
DECL|field|bundleContext
specifier|protected
name|BundleContext
name|bundleContext
decl_stmt|;
DECL|method|getInstalledBundle (String symbolicName)
specifier|protected
name|Bundle
name|getInstalledBundle
parameter_list|(
name|String
name|symbolicName
parameter_list|)
block|{
for|for
control|(
name|Bundle
name|b
range|:
name|bundleContext
operator|.
name|getBundles
argument_list|()
control|)
block|{
if|if
condition|(
name|b
operator|.
name|getSymbolicName
argument_list|()
operator|.
name|equals
argument_list|(
name|symbolicName
argument_list|)
condition|)
block|{
return|return
name|b
return|;
block|}
block|}
for|for
control|(
name|Bundle
name|b
range|:
name|bundleContext
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Bundle: "
operator|+
name|b
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Bundle "
operator|+
name|symbolicName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Get the bundleContext is "
operator|+
name|bundleContext
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application installed as bundle id: "
operator|+
name|bundleContext
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
name|setThreadContextClassLoader
argument_list|()
expr_stmt|;
name|CamelContextFactory
name|factory
init|=
operator|new
name|CamelContextFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setBundleContext
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setRegistry
argument_list|(
name|createRegistry
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|factory
operator|.
name|createContext
argument_list|()
return|;
block|}
DECL|method|setThreadContextClassLoader ()
specifier|protected
name|void
name|setThreadContextClassLoader
parameter_list|()
block|{
comment|// set the thread context classloader current bundle classloader
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getCamelKarafFeatureUrl ()
specifier|public
specifier|static
name|UrlReference
name|getCamelKarafFeatureUrl
parameter_list|()
block|{
return|return
name|getCamelKarafFeatureUrl
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|getCamelKarafFeatureUrl (String version)
specifier|public
specifier|static
name|UrlReference
name|getCamelKarafFeatureUrl
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|String
name|type
init|=
literal|"xml/features"
decl_stmt|;
name|MavenArtifactProvisionOption
name|mavenOption
init|=
name|mavenBundle
argument_list|()
operator|.
name|groupId
argument_list|(
literal|"org.apache.camel.karaf"
argument_list|)
operator|.
name|artifactId
argument_list|(
literal|"apache-camel"
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
return|return
name|mavenOption
operator|.
name|versionAsInProject
argument_list|()
operator|.
name|type
argument_list|(
name|type
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|mavenOption
operator|.
name|version
argument_list|(
name|version
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
DECL|method|getKarafFeatureUrl ()
specifier|public
specifier|static
name|UrlReference
name|getKarafFeatureUrl
parameter_list|()
block|{
name|String
name|karafVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karafVersion"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*** The karaf version is "
operator|+
name|karafVersion
operator|+
literal|" ***"
argument_list|)
expr_stmt|;
name|String
name|type
init|=
literal|"xml/features"
decl_stmt|;
return|return
name|mavenBundle
argument_list|()
operator|.
name|groupId
argument_list|(
literal|"org.apache.karaf.assemblies.features"
argument_list|)
operator|.
name|artifactId
argument_list|(
literal|"standard"
argument_list|)
operator|.
name|version
argument_list|(
name|karafVersion
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|getKarafEnterpriseFeatureUrl ()
specifier|public
specifier|static
name|UrlReference
name|getKarafEnterpriseFeatureUrl
parameter_list|()
block|{
name|String
name|karafVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karafVersion"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*** The karaf version is "
operator|+
name|karafVersion
operator|+
literal|" ***"
argument_list|)
expr_stmt|;
name|String
name|type
init|=
literal|"xml/features"
decl_stmt|;
return|return
name|mavenBundle
argument_list|()
operator|.
name|groupId
argument_list|(
literal|"org.apache.karaf.assemblies.features"
argument_list|)
operator|.
name|artifactId
argument_list|(
literal|"enterprise"
argument_list|)
operator|.
name|version
argument_list|(
name|karafVersion
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|getResource (String location)
specifier|private
specifier|static
name|URL
name|getResource
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|URL
name|url
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|url
operator|=
name|Helper
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to find resource "
operator|+
name|location
argument_list|)
throw|;
block|}
return|return
name|url
return|;
block|}
DECL|method|getDefaultCamelKarafOptions ()
specifier|public
specifier|static
name|Option
index|[]
name|getDefaultCamelKarafOptions
parameter_list|()
block|{
comment|// create temporary working directory that is unique to avoid windows issues
comment|// lock files between tests, and causing tests to fail
name|deleteDirectory
argument_list|(
literal|"target/paxrunner"
argument_list|)
expr_stmt|;
comment|// check if file exists
name|int
name|failsafe
init|=
literal|1000
decl_stmt|;
name|workDir
operator|=
literal|"target/paxrunner/work-"
operator|+
name|COUNTER
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|)
decl_stmt|;
while|while
condition|(
name|dir
operator|.
name|exists
argument_list|()
operator|&&
name|failsafe
operator|--
operator|>
literal|0
condition|)
block|{
name|workDir
operator|=
literal|"target/paxrunner/work-"
operator|+
name|COUNTER
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
name|dir
operator|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
block|}
name|createDirectory
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*** Using working directory: "
operator|+
name|workDir
operator|+
literal|" ***"
argument_list|)
expr_stmt|;
name|Option
index|[]
name|options
init|=
name|combine
argument_list|(
comment|// Set the karaf environment with some customer configuration
name|combine
argument_list|(
name|Helper
operator|.
name|getDefaultConfigOptions
argument_list|(
name|Helper
operator|.
name|getDefaultSystemOptions
argument_list|()
argument_list|,
name|getResource
argument_list|(
literal|"/org/apache/camel/itest/karaf/config.properties"
argument_list|)
argument_list|,
comment|// this is how you set the default log level when using pax logging (logProfile)
name|Helper
operator|.
name|setLogLevel
argument_list|(
literal|"WARN"
argument_list|)
argument_list|)
argument_list|,
name|Helper
operator|.
name|getDefaultProvisioningOptions
argument_list|()
argument_list|)
argument_list|,
comment|// install the spring, http features first
name|scanFeatures
argument_list|(
name|getKarafFeatureUrl
argument_list|()
argument_list|,
literal|"spring"
argument_list|,
literal|"spring-dm"
argument_list|,
literal|"jetty"
argument_list|)
argument_list|,
comment|// install the cxf jaxb spec as the karaf doesn't provide it by default
name|scanFeatures
argument_list|(
name|getCamelKarafFeatureUrl
argument_list|()
argument_list|,
literal|"cxf-jaxb"
argument_list|)
argument_list|,
comment|// using the features to install the camel components
name|scanFeatures
argument_list|(
name|getCamelKarafFeatureUrl
argument_list|()
argument_list|,
literal|"camel-core"
argument_list|,
literal|"camel-spring"
argument_list|,
literal|"camel-test"
argument_list|)
argument_list|,
name|workingDirectory
argument_list|(
name|workDir
argument_list|)
argument_list|)
decl_stmt|;
comment|//equinox(),
comment|//felix());
return|return
name|options
return|;
block|}
annotation|@
name|Configuration
DECL|method|configure ()
specifier|public
specifier|static
name|Option
index|[]
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|Option
index|[]
name|options
init|=
name|combine
argument_list|(
name|getDefaultCamelKarafOptions
argument_list|()
argument_list|)
decl_stmt|;
comment|// for remote debugging
comment|// vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5008"),
return|return
name|options
return|;
block|}
block|}
end_class

end_unit

