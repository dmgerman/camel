begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.perf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|perf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SplitterPerformanceTest
specifier|public
class|class
name|SplitterPerformanceTest
extends|extends
name|AbstractBasePerformanceTest
block|{
DECL|field|HEADER
specifier|protected
specifier|static
specifier|final
name|String
name|HEADER
init|=
literal|"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">"
operator|+
literal|"<soapenv:Header><routing xmlns=\"http://someuri\">xadmin;server1;community#1.0##</routing></soapenv:Header>"
operator|+
literal|"<soapenv:Body>"
operator|+
literal|"<m:buyStocks xmlns:m=\"http://services.samples/xsd\">"
decl_stmt|;
DECL|field|BODY
specifier|protected
specifier|static
specifier|final
name|String
name|BODY
init|=
literal|"<order><symbol>IBM</symbol><buyerID>asankha</buyerID><price>140.34</price><volume>2000</volume></order>\n"
operator|+
literal|"<order><symbol>MSFT</symbol><buyerID>ruwan</buyerID><price>23.56</price><volume>8030</volume></order>\n"
operator|+
literal|"<order><symbol>SUN</symbol><buyerID>indika</buyerID><price>14.56</price><volume>500</volume></order>\n"
operator|+
literal|"<order><symbol>GOOG</symbol><buyerID>chathura</buyerID><price>60.24</price><volume>40000</volume></order>\n"
operator|+
literal|"<order><symbol>IBM</symbol><buyerID>asankha</buyerID><price>140.34</price><volume>2000</volume></order>\n"
operator|+
literal|"<order><symbol>MSFT</symbol><buyerID>ruwan</buyerID><price>23.56</price><volume>803000</volume></order>\n"
operator|+
literal|"<order><symbol>SUN</symbol><buyerID>indika</buyerID><price>14.56</price><volume>5000</volume></order>\n"
operator|+
literal|"<order><symbol>GOOG</symbol><buyerID>chathura</buyerID><price>60.24</price><volume>40000</volume></order>\n"
operator|+
literal|"<order><symbol>IBM</symbol><buyerID>asankha</buyerID><price>140.34</price><volume>2000</volume></order>\n"
operator|+
literal|"<order><symbol>MSFT</symbol><buyerID>ruwan</buyerID><price>23.56</price><volume>803000</volume></order>\n"
decl_stmt|;
DECL|field|TRAILER
specifier|protected
specifier|static
specifier|final
name|String
name|TRAILER
init|=
literal|"</m:buyStocks>"
operator|+
literal|"</soapenv:Body>"
operator|+
literal|"</soapenv:Envelope>"
decl_stmt|;
DECL|field|PAYLOAD
specifier|protected
specifier|static
name|String
name|PAYLOAD
init|=
literal|null
decl_stmt|;
static|static
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|HEADER
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|BODY
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|TRAILER
argument_list|)
expr_stmt|;
name|PAYLOAD
operator|=
name|builder
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
DECL|field|count
specifier|private
specifier|final
name|int
name|count
init|=
literal|20001
decl_stmt|;
annotation|@
name|Test
DECL|method|testTokenize ()
specifier|public
name|void
name|testTokenize
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|template
operator|.
name|setDefaultEndpointUri
argument_list|(
literal|"direct:tokenize"
argument_list|)
expr_stmt|;
comment|// warm up with 30.000 messages so that the JIT compiler kicks in
name|execute
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resetMock
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|execute
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Run "
operator|+
name|count
operator|+
literal|" tests in "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPayload ()
specifier|protected
name|String
name|getPayload
parameter_list|()
block|{
return|return
name|PAYLOAD
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:tokenize"
argument_list|)
operator|.
name|split
argument_list|(
name|body
argument_list|()
operator|.
name|tokenize
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:end"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

