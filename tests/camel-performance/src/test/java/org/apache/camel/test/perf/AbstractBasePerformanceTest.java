begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.perf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|perf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_class
DECL|class|AbstractBasePerformanceTest
specifier|public
specifier|abstract
class|class
name|AbstractBasePerformanceTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|BODY_1KB_PAYLOAD
specifier|protected
specifier|static
specifier|final
name|String
name|BODY_1KB_PAYLOAD
init|=
literal|"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">"
operator|+
literal|"<soapenv:Header><routing xmlns=\"http://someuri\">xadmin;server1;community#1.0##</routing></soapenv:Header>"
operator|+
literal|"<soapenv:Body>"
operator|+
literal|"<m:buyStocks xmlns:m=\"http://services.samples/xsd\">"
operator|+
literal|"<order><symbol>IBM</symbol><buyerID>asankha</buyerID><price>140.34</price><volume>2000</volume></order>"
operator|+
literal|"<order><symbol>MSFT</symbol><buyerID>ruwan</buyerID><price>23.56</price><volume>8030</volume></order>"
operator|+
literal|"<order><symbol>SUN</symbol><buyerID>indika</buyerID><price>14.56</price><volume>500</volume></order>"
operator|+
literal|"<order><symbol>GOOG</symbol><buyerID>chathura</buyerID><price>60.24</price><volume>40000</volume></order>"
operator|+
literal|"<order><symbol>IBM</symbol><buyerID>asankha</buyerID><price>140.34</price><volume>2000</volume></order>"
operator|+
literal|"<order><symbol>MSFT</symbol><buyerID>ruwan</buyerID><price>23.56</price><volume>803000</volume></order>"
operator|+
literal|"<order><symbol>SUN</symbol><buyerID>indika</buyerID><price>14.56</price><volume>5000</volume></order>"
operator|+
literal|"</m:buyStocks>"
operator|+
literal|"</soapenv:Body>"
operator|+
literal|"</soapenv:Envelope>"
decl_stmt|;
DECL|method|getPayload ()
specifier|protected
name|String
name|getPayload
parameter_list|()
block|{
return|return
name|BODY_1KB_PAYLOAD
return|;
block|}
DECL|method|resetMock (int count)
specifier|protected
name|void
name|resetMock
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:end"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|reset
argument_list|()
expr_stmt|;
name|mock
operator|.
name|setRetainFirst
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mock
operator|.
name|setRetainLast
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|execute (int count)
specifier|protected
name|void
name|execute
parameter_list|(
name|int
name|count
parameter_list|)
block|{
for|for
control|(
name|int
name|counter
init|=
literal|0
init|;
name|counter
operator|<
name|count
condition|;
name|counter
operator|++
control|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isCreateCamelContextPerClass ()
specifier|public
name|boolean
name|isCreateCamelContextPerClass
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

