begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|BeansException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Component
import|;
end_import

begin_comment
comment|/**  * receives a spring-context and make it available to classes outside the spring scope.  */
end_comment

begin_class
annotation|@
name|Component
DECL|class|ApplicationContextHolder
specifier|public
class|class
name|ApplicationContextHolder
implements|implements
name|ApplicationContextAware
block|{
DECL|field|context
specifier|private
specifier|static
name|ApplicationContext
name|context
decl_stmt|;
DECL|field|contextMaxWaitTime
specifier|private
specifier|static
name|long
name|contextMaxWaitTime
init|=
literal|60000L
decl_stmt|;
annotation|@
name|Override
DECL|method|setApplicationContext (ApplicationContext applicationContext)
specifier|public
name|void
name|setApplicationContext
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|)
throws|throws
name|BeansException
block|{
synchronized|synchronized
init|(
name|ApplicationContextHolder
operator|.
name|class
init|)
block|{
name|ApplicationContextHolder
operator|.
name|context
operator|=
name|applicationContext
expr_stmt|;
name|ApplicationContextHolder
operator|.
name|class
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getApplicationContext ()
specifier|public
specifier|static
name|ApplicationContext
name|getApplicationContext
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|waitForContextReady
argument_list|()
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|waitForContextReady ()
specifier|private
specifier|static
name|void
name|waitForContextReady
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|long
name|maxWait
init|=
name|contextMaxWaitTime
decl_stmt|;
name|long
name|deadline
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|maxWait
decl_stmt|;
synchronized|synchronized
init|(
name|ApplicationContextHolder
operator|.
name|class
init|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|time
operator|<
name|deadline
operator|&&
name|context
operator|==
literal|null
condition|)
block|{
name|ApplicationContextHolder
operator|.
name|class
operator|.
name|wait
argument_list|(
name|deadline
operator|-
name|time
argument_list|)
expr_stmt|;
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No spring context available after "
operator|+
name|maxWait
operator|+
literal|" millis"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getContextMaxWaitTime ()
specifier|public
specifier|static
name|long
name|getContextMaxWaitTime
parameter_list|()
block|{
return|return
name|contextMaxWaitTime
return|;
block|}
DECL|method|setContextMaxWaitTime (long contextMaxWaitTime)
specifier|public
specifier|static
name|void
name|setContextMaxWaitTime
parameter_list|(
name|long
name|contextMaxWaitTime
parameter_list|)
block|{
name|ApplicationContextHolder
operator|.
name|contextMaxWaitTime
operator|=
name|contextMaxWaitTime
expr_stmt|;
block|}
block|}
end_class

end_unit

