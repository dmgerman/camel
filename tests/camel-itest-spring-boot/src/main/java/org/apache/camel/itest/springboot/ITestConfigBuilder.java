begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * Builder for the {@code ITestConfig} that enforces defaults values.  */
end_comment

begin_class
DECL|class|ITestConfigBuilder
specifier|public
class|class
name|ITestConfigBuilder
block|{
DECL|field|CONFIG_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_PREFIX
init|=
literal|"itest.springboot."
decl_stmt|;
DECL|field|config
specifier|private
name|ITestConfig
name|config
decl_stmt|;
DECL|method|ITestConfigBuilder ()
specifier|public
name|ITestConfigBuilder
parameter_list|()
block|{
name|this
operator|.
name|config
operator|=
operator|new
name|ITestConfig
argument_list|()
expr_stmt|;
block|}
DECL|method|ITestConfigBuilder (ITestConfig config)
specifier|public
name|ITestConfigBuilder
parameter_list|(
name|ITestConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
DECL|method|module (String module)
specifier|public
name|ITestConfigBuilder
name|module
parameter_list|(
name|String
name|module
parameter_list|)
block|{
name|config
operator|.
name|setModuleName
argument_list|(
name|module
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|mavenGroup (String mavenGroup)
specifier|public
name|ITestConfigBuilder
name|mavenGroup
parameter_list|(
name|String
name|mavenGroup
parameter_list|)
block|{
name|config
operator|.
name|setMavenGroup
argument_list|(
name|mavenGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|mavenVersion (String mavenVersion)
specifier|public
name|ITestConfigBuilder
name|mavenVersion
parameter_list|(
name|String
name|mavenVersion
parameter_list|)
block|{
name|config
operator|.
name|setMavenVersion
argument_list|(
name|mavenVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|modulesPath (String path)
specifier|public
name|ITestConfigBuilder
name|modulesPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|config
operator|.
name|setModulesPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|basePath (String basePath)
specifier|public
name|ITestConfigBuilder
name|basePath
parameter_list|(
name|String
name|basePath
parameter_list|)
block|{
name|config
operator|.
name|setModuleBasePath
argument_list|(
name|basePath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unitTestExpectedNumber (int number)
specifier|public
name|ITestConfigBuilder
name|unitTestExpectedNumber
parameter_list|(
name|int
name|number
parameter_list|)
block|{
name|config
operator|.
name|setUnitTestsExpectedNumber
argument_list|(
name|number
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unitTestBasePackage (String pack)
specifier|public
name|ITestConfigBuilder
name|unitTestBasePackage
parameter_list|(
name|String
name|pack
parameter_list|)
block|{
name|config
operator|.
name|setUnitTestBasePackage
argument_list|(
name|pack
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unitTestInclusionPattern (String pattern)
specifier|public
name|ITestConfigBuilder
name|unitTestInclusionPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|config
operator|.
name|setUnitTestInclusionPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unitTestExclusionPattern (String pattern)
specifier|public
name|ITestConfigBuilder
name|unitTestExclusionPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|config
operator|.
name|setUnitTestExclusionPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|autostart (Boolean autostart)
specifier|public
name|ITestConfigBuilder
name|autostart
parameter_list|(
name|Boolean
name|autostart
parameter_list|)
block|{
name|config
operator|.
name|setAutoStartComponent
argument_list|(
name|autostart
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|resource (String file, String dest)
specifier|public
name|ITestConfigBuilder
name|resource
parameter_list|(
name|String
name|file
parameter_list|,
name|String
name|dest
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|getResources
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setResources
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|getResources
argument_list|()
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|dest
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|dependency (String dependencyCanonicalForm)
specifier|public
name|ITestConfigBuilder
name|dependency
parameter_list|(
name|String
name|dependencyCanonicalForm
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|getAdditionalDependencies
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setAdditionalDependencies
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|getAdditionalDependencies
argument_list|()
operator|.
name|add
argument_list|(
name|dependencyCanonicalForm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|exclusion (String exclusionCanonicalForm)
specifier|public
name|ITestConfigBuilder
name|exclusion
parameter_list|(
name|String
name|exclusionCanonicalForm
parameter_list|)
block|{
if|if
condition|(
name|exclusionCanonicalForm
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected exclusion in the form groupId:artifactId, got: "
operator|+
name|exclusionCanonicalForm
argument_list|)
throw|;
block|}
if|if
condition|(
name|config
operator|.
name|getMavenExclusions
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setMavenExclusions
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|getMavenExclusions
argument_list|()
operator|.
name|add
argument_list|(
name|exclusionCanonicalForm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|resource (String file)
specifier|public
name|ITestConfigBuilder
name|resource
parameter_list|(
name|String
name|file
parameter_list|)
block|{
return|return
name|resource
argument_list|(
name|file
argument_list|,
name|file
argument_list|)
return|;
block|}
DECL|method|disableJmx (String name)
specifier|public
name|ITestConfigBuilder
name|disableJmx
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|getJmxDisabledNames
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setJmxDisabledNames
argument_list|(
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|getJmxDisabledNames
argument_list|()
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|systemProperty (String name, String value)
specifier|public
name|ITestConfigBuilder
name|systemProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|getSystemProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setSystemProperties
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|getSystemProperties
argument_list|()
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|customLog (Boolean value)
specifier|public
name|ITestConfigBuilder
name|customLog
parameter_list|(
name|Boolean
name|value
parameter_list|)
block|{
name|config
operator|.
name|setUseCustomLog
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|ignoreLibraryMismatch (String libraryPrefix)
specifier|public
name|ITestConfigBuilder
name|ignoreLibraryMismatch
parameter_list|(
name|String
name|libraryPrefix
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|getIgnoreLibraryMismatch
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setIgnoreLibraryMismatch
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|getIgnoreLibraryMismatch
argument_list|()
operator|.
name|add
argument_list|(
name|libraryPrefix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|testLibraryVersion (String groupIdArtifactId, String version)
specifier|public
name|ITestConfigBuilder
name|testLibraryVersion
parameter_list|(
name|String
name|groupIdArtifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|getTestLibraryVersions
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setTestLibraryVersions
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|getTestLibraryVersions
argument_list|()
operator|.
name|put
argument_list|(
name|groupIdArtifactId
argument_list|,
name|version
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|includeTestDependencies (Boolean includeTestDependencies)
specifier|public
name|ITestConfigBuilder
name|includeTestDependencies
parameter_list|(
name|Boolean
name|includeTestDependencies
parameter_list|)
block|{
name|config
operator|.
name|setIncludeTestDependencies
argument_list|(
name|includeTestDependencies
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unitTestsEnabled (Boolean unitTestsEnabled)
specifier|public
name|ITestConfigBuilder
name|unitTestsEnabled
parameter_list|(
name|Boolean
name|unitTestsEnabled
parameter_list|)
block|{
name|config
operator|.
name|setUnitTestEnabled
argument_list|(
name|unitTestsEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|springBootVersion (String springBootVersion)
specifier|public
name|ITestConfigBuilder
name|springBootVersion
parameter_list|(
name|String
name|springBootVersion
parameter_list|)
block|{
name|config
operator|.
name|setSpringBootVersion
argument_list|(
name|springBootVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|ITestConfig
name|build
parameter_list|()
block|{
comment|// Checking conditions
if|if
condition|(
name|config
operator|.
name|getModuleName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"ModuleName is required"
argument_list|)
expr_stmt|;
block|}
comment|// Set the defaults
if|if
condition|(
name|config
operator|.
name|getUnitTestEnabled
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setUnitTestEnabled
argument_list|(
name|booleanPropertyOr
argument_list|(
literal|"unitTestEnabled"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getMavenGroup
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setMavenGroup
argument_list|(
name|propertyOr
argument_list|(
literal|"mavenGroup"
argument_list|,
literal|"org.apache.camel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getMavenVersion
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setMavenVersion
argument_list|(
name|propertyOr
argument_list|(
literal|"mavenVersion"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getMavenOfflineResolution
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setMavenOfflineResolution
argument_list|(
name|booleanPropertyOr
argument_list|(
literal|"mavenOfflineResolution"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getUnitTestInclusionPattern
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setUnitTestInclusionPattern
argument_list|(
name|propertyOr
argument_list|(
literal|"unitTestInclusionPattern"
argument_list|,
literal|"^.*Test$"
argument_list|)
argument_list|)
expr_stmt|;
comment|// All tests
block|}
if|if
condition|(
name|config
operator|.
name|getUnitTestExclusionPattern
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setUnitTestExclusionPattern
argument_list|(
name|propertyOr
argument_list|(
literal|"unitTestExclusionPattern"
argument_list|,
literal|".*(\\.integration\\..*|IntegrationTest$)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Integration test
block|}
if|if
condition|(
name|config
operator|.
name|getIncludeTestDependencies
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setIncludeTestDependencies
argument_list|(
name|booleanPropertyOr
argument_list|(
literal|"includeTestDependencies"
argument_list|,
name|config
operator|.
name|getUnitTestEnabled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getIncludeProvidedDependencies
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setIncludeProvidedDependencies
argument_list|(
name|booleanPropertyOr
argument_list|(
literal|"includeProvidedDependencies"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getModulesPath
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setModulesPath
argument_list|(
name|propertyOr
argument_list|(
literal|"modulesPath"
argument_list|,
literal|"../../components/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getModuleBasePath
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setModuleBasePath
argument_list|(
name|config
operator|.
name|getModulesPath
argument_list|()
operator|+
name|config
operator|.
name|getModuleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getUnitTestBasePackage
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setUnitTestBasePackage
argument_list|(
name|propertyOr
argument_list|(
literal|"unitTestBasePackage"
argument_list|,
literal|"org.apache.camel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getAutoStartComponent
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setAutoStartComponent
argument_list|(
name|booleanPropertyOr
argument_list|(
literal|"autostartComponent"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getResources
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setResources
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getAdditionalDependencies
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setAdditionalDependencies
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getMavenExclusions
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setMavenExclusions
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getJmxDisabledNames
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setJmxDisabledNames
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getSystemProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setSystemProperties
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getUseCustomLog
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setUseCustomLog
argument_list|(
name|booleanPropertyOr
argument_list|(
literal|"useCustomLog"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getIgnoreLibraryMismatch
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setIgnoreLibraryMismatch
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getTestLibraryVersions
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setTestLibraryVersions
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getSpringBootVersion
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setSpringBootVersion
argument_list|(
name|propertyOr
argument_list|(
literal|"springBootVersion"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
DECL|method|fail (String msg)
specifier|private
name|void
name|fail
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Configuration is not complete: "
operator|+
name|msg
argument_list|)
throw|;
block|}
DECL|method|propertyOr (String name, String defaultVal)
specifier|private
name|String
name|propertyOr
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultVal
parameter_list|)
block|{
name|String
name|res
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|CONFIG_PREFIX
operator|+
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
name|res
operator|=
name|defaultVal
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
DECL|method|booleanPropertyOr (String name, Boolean defaultVal)
specifier|private
name|Boolean
name|booleanPropertyOr
parameter_list|(
name|String
name|name
parameter_list|,
name|Boolean
name|defaultVal
parameter_list|)
block|{
name|String
name|prop
init|=
name|propertyOr
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Boolean
name|res
init|=
name|defaultVal
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
block|{
name|res
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
DECL|method|integerPropertyOr (String name, Integer defaultVal)
specifier|private
name|Integer
name|integerPropertyOr
parameter_list|(
name|String
name|name
parameter_list|,
name|Integer
name|defaultVal
parameter_list|)
block|{
name|String
name|prop
init|=
name|propertyOr
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Integer
name|res
init|=
name|defaultVal
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
block|{
name|res
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
block|}
end_class

end_unit

