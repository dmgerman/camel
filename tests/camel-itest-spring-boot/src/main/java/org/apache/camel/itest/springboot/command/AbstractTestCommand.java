begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.springboot.command
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|command
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|ITestConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * An abstract class for commands that need standard test parameters.  */
end_comment

begin_class
DECL|class|AbstractTestCommand
specifier|public
specifier|abstract
class|class
name|AbstractTestCommand
implements|implements
name|Command
block|{
annotation|@
name|Override
DECL|method|execute (Object[] parameters)
specifier|public
name|Object
name|execute
parameter_list|(
name|Object
index|[]
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Parameters cannot be null"
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Parameters should contain two elements"
argument_list|,
literal|2
argument_list|,
name|parameters
operator|.
name|length
argument_list|)
expr_stmt|;
name|Object
name|configObj
init|=
name|parameters
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"The first parameter cannot be null"
argument_list|,
name|configObj
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"First parameter should be of type ITestConfig, found type "
operator|+
name|configObj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|configObj
operator|instanceof
name|ITestConfig
argument_list|)
expr_stmt|;
name|Object
name|compNameObj
init|=
name|parameters
index|[
literal|1
index|]
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"The second parameter cannot be null"
argument_list|,
name|compNameObj
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Second parameter should be of type String, found type "
operator|+
name|compNameObj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|compNameObj
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|String
name|compName
init|=
operator|(
name|String
operator|)
name|compNameObj
decl_stmt|;
name|ITestConfig
name|config
init|=
operator|(
name|ITestConfig
operator|)
name|configObj
decl_stmt|;
name|this
operator|.
name|executeTest
argument_list|(
name|config
argument_list|,
name|compName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|executeTest (ITestConfig config, String component)
specifier|public
specifier|abstract
name|Object
name|executeTest
parameter_list|(
name|ITestConfig
name|config
parameter_list|,
name|String
name|component
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
end_class

end_unit

