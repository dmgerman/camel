begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A configuration bean for a test execution.  */
end_comment

begin_class
DECL|class|ITestConfig
specifier|public
class|class
name|ITestConfig
implements|implements
name|Serializable
block|{
DECL|field|DEFAULT_SPRING_BOOT_MAJOR_VERSION
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_SPRING_BOOT_MAJOR_VERSION
init|=
literal|1
decl_stmt|;
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3641997669166217595L
decl_stmt|;
DECL|field|moduleName
specifier|private
name|String
name|moduleName
decl_stmt|;
DECL|field|mavenGroup
specifier|private
name|String
name|mavenGroup
decl_stmt|;
DECL|field|mavenVersion
specifier|private
name|String
name|mavenVersion
decl_stmt|;
DECL|field|mavenOfflineResolution
specifier|private
name|Boolean
name|mavenOfflineResolution
decl_stmt|;
DECL|field|modulesPath
specifier|private
name|String
name|modulesPath
decl_stmt|;
DECL|field|moduleBasePath
specifier|private
name|String
name|moduleBasePath
decl_stmt|;
DECL|field|includeTestDependencies
specifier|private
name|Boolean
name|includeTestDependencies
decl_stmt|;
DECL|field|includeProvidedDependencies
specifier|private
name|Boolean
name|includeProvidedDependencies
decl_stmt|;
DECL|field|unitTestEnabled
specifier|private
name|Boolean
name|unitTestEnabled
decl_stmt|;
DECL|field|unitTestInclusionPattern
specifier|private
name|String
name|unitTestInclusionPattern
decl_stmt|;
DECL|field|unitTestExclusionPattern
specifier|private
name|String
name|unitTestExclusionPattern
decl_stmt|;
DECL|field|unitTestBasePackage
specifier|private
name|String
name|unitTestBasePackage
decl_stmt|;
DECL|field|unitTestsExpectedNumber
specifier|private
name|Integer
name|unitTestsExpectedNumber
decl_stmt|;
DECL|field|resources
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|resources
decl_stmt|;
DECL|field|additionalDependencies
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|additionalDependencies
decl_stmt|;
DECL|field|mavenExclusions
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|mavenExclusions
decl_stmt|;
DECL|field|autoStartComponent
specifier|private
name|Boolean
name|autoStartComponent
decl_stmt|;
DECL|field|jmxDisabledNames
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|jmxDisabledNames
decl_stmt|;
DECL|field|systemProperties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|systemProperties
decl_stmt|;
DECL|field|useCustomLog
specifier|private
name|Boolean
name|useCustomLog
decl_stmt|;
DECL|field|ignoreLibraryMismatch
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|ignoreLibraryMismatch
decl_stmt|;
DECL|field|testLibraryVersions
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|testLibraryVersions
decl_stmt|;
DECL|field|springBootVersion
specifier|private
name|String
name|springBootVersion
decl_stmt|;
DECL|method|ITestConfig ()
specifier|public
name|ITestConfig
parameter_list|()
block|{     }
DECL|method|getModuleName ()
specifier|public
name|String
name|getModuleName
parameter_list|()
block|{
return|return
name|moduleName
return|;
block|}
DECL|method|setModuleName (String moduleName)
specifier|public
name|void
name|setModuleName
parameter_list|(
name|String
name|moduleName
parameter_list|)
block|{
name|this
operator|.
name|moduleName
operator|=
name|moduleName
expr_stmt|;
block|}
DECL|method|getMavenGroup ()
specifier|public
name|String
name|getMavenGroup
parameter_list|()
block|{
return|return
name|mavenGroup
return|;
block|}
DECL|method|setMavenGroup (String mavenGroup)
specifier|public
name|void
name|setMavenGroup
parameter_list|(
name|String
name|mavenGroup
parameter_list|)
block|{
name|this
operator|.
name|mavenGroup
operator|=
name|mavenGroup
expr_stmt|;
block|}
DECL|method|getMavenVersion ()
specifier|public
name|String
name|getMavenVersion
parameter_list|()
block|{
return|return
name|mavenVersion
return|;
block|}
DECL|method|setMavenVersion (String mavenVersion)
specifier|public
name|void
name|setMavenVersion
parameter_list|(
name|String
name|mavenVersion
parameter_list|)
block|{
name|this
operator|.
name|mavenVersion
operator|=
name|mavenVersion
expr_stmt|;
block|}
DECL|method|getMavenOfflineResolution ()
specifier|public
name|Boolean
name|getMavenOfflineResolution
parameter_list|()
block|{
return|return
name|mavenOfflineResolution
return|;
block|}
DECL|method|setMavenOfflineResolution (Boolean mavenOfflineResolution)
specifier|public
name|void
name|setMavenOfflineResolution
parameter_list|(
name|Boolean
name|mavenOfflineResolution
parameter_list|)
block|{
name|this
operator|.
name|mavenOfflineResolution
operator|=
name|mavenOfflineResolution
expr_stmt|;
block|}
DECL|method|getModulesPath ()
specifier|public
name|String
name|getModulesPath
parameter_list|()
block|{
return|return
name|modulesPath
return|;
block|}
DECL|method|setModulesPath (String modulesPath)
specifier|public
name|void
name|setModulesPath
parameter_list|(
name|String
name|modulesPath
parameter_list|)
block|{
name|this
operator|.
name|modulesPath
operator|=
name|modulesPath
expr_stmt|;
block|}
DECL|method|getModuleBasePath ()
specifier|public
name|String
name|getModuleBasePath
parameter_list|()
block|{
return|return
name|moduleBasePath
return|;
block|}
DECL|method|setModuleBasePath (String moduleBasePath)
specifier|public
name|void
name|setModuleBasePath
parameter_list|(
name|String
name|moduleBasePath
parameter_list|)
block|{
name|this
operator|.
name|moduleBasePath
operator|=
name|moduleBasePath
expr_stmt|;
block|}
DECL|method|getIncludeTestDependencies ()
specifier|public
name|Boolean
name|getIncludeTestDependencies
parameter_list|()
block|{
return|return
name|includeTestDependencies
return|;
block|}
DECL|method|setIncludeTestDependencies (Boolean includeTestDependencies)
specifier|public
name|void
name|setIncludeTestDependencies
parameter_list|(
name|Boolean
name|includeTestDependencies
parameter_list|)
block|{
name|this
operator|.
name|includeTestDependencies
operator|=
name|includeTestDependencies
expr_stmt|;
block|}
DECL|method|getIncludeProvidedDependencies ()
specifier|public
name|Boolean
name|getIncludeProvidedDependencies
parameter_list|()
block|{
return|return
name|includeProvidedDependencies
return|;
block|}
DECL|method|setIncludeProvidedDependencies (Boolean includeProvidedDependencies)
specifier|public
name|void
name|setIncludeProvidedDependencies
parameter_list|(
name|Boolean
name|includeProvidedDependencies
parameter_list|)
block|{
name|this
operator|.
name|includeProvidedDependencies
operator|=
name|includeProvidedDependencies
expr_stmt|;
block|}
DECL|method|getUnitTestEnabled ()
specifier|public
name|Boolean
name|getUnitTestEnabled
parameter_list|()
block|{
return|return
name|unitTestEnabled
return|;
block|}
DECL|method|setUnitTestEnabled (Boolean unitTestEnabled)
specifier|public
name|void
name|setUnitTestEnabled
parameter_list|(
name|Boolean
name|unitTestEnabled
parameter_list|)
block|{
name|this
operator|.
name|unitTestEnabled
operator|=
name|unitTestEnabled
expr_stmt|;
block|}
DECL|method|getUnitTestInclusionPattern ()
specifier|public
name|String
name|getUnitTestInclusionPattern
parameter_list|()
block|{
return|return
name|unitTestInclusionPattern
return|;
block|}
DECL|method|setUnitTestInclusionPattern (String unitTestInclusionPattern)
specifier|public
name|void
name|setUnitTestInclusionPattern
parameter_list|(
name|String
name|unitTestInclusionPattern
parameter_list|)
block|{
name|this
operator|.
name|unitTestInclusionPattern
operator|=
name|unitTestInclusionPattern
expr_stmt|;
block|}
DECL|method|getUnitTestExclusionPattern ()
specifier|public
name|String
name|getUnitTestExclusionPattern
parameter_list|()
block|{
return|return
name|unitTestExclusionPattern
return|;
block|}
DECL|method|setUnitTestExclusionPattern (String unitTestExclusionPattern)
specifier|public
name|void
name|setUnitTestExclusionPattern
parameter_list|(
name|String
name|unitTestExclusionPattern
parameter_list|)
block|{
name|this
operator|.
name|unitTestExclusionPattern
operator|=
name|unitTestExclusionPattern
expr_stmt|;
block|}
DECL|method|getUnitTestBasePackage ()
specifier|public
name|String
name|getUnitTestBasePackage
parameter_list|()
block|{
return|return
name|unitTestBasePackage
return|;
block|}
DECL|method|setUnitTestBasePackage (String unitTestBasePackage)
specifier|public
name|void
name|setUnitTestBasePackage
parameter_list|(
name|String
name|unitTestBasePackage
parameter_list|)
block|{
name|this
operator|.
name|unitTestBasePackage
operator|=
name|unitTestBasePackage
expr_stmt|;
block|}
DECL|method|getUnitTestsExpectedNumber ()
specifier|public
name|Integer
name|getUnitTestsExpectedNumber
parameter_list|()
block|{
return|return
name|unitTestsExpectedNumber
return|;
block|}
DECL|method|setUnitTestsExpectedNumber (Integer unitTestsExpectedNumber)
specifier|public
name|void
name|setUnitTestsExpectedNumber
parameter_list|(
name|Integer
name|unitTestsExpectedNumber
parameter_list|)
block|{
name|this
operator|.
name|unitTestsExpectedNumber
operator|=
name|unitTestsExpectedNumber
expr_stmt|;
block|}
DECL|method|getResources ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getResources
parameter_list|()
block|{
return|return
name|resources
return|;
block|}
DECL|method|getAdditionalDependencies ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAdditionalDependencies
parameter_list|()
block|{
return|return
name|additionalDependencies
return|;
block|}
DECL|method|setAdditionalDependencies (Set<String> additionalDependencies)
specifier|public
name|void
name|setAdditionalDependencies
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|additionalDependencies
parameter_list|)
block|{
name|this
operator|.
name|additionalDependencies
operator|=
name|additionalDependencies
expr_stmt|;
block|}
DECL|method|getMavenExclusions ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getMavenExclusions
parameter_list|()
block|{
return|return
name|mavenExclusions
return|;
block|}
DECL|method|setMavenExclusions (Set<String> mavenExclusions)
specifier|public
name|void
name|setMavenExclusions
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|mavenExclusions
parameter_list|)
block|{
name|this
operator|.
name|mavenExclusions
operator|=
name|mavenExclusions
expr_stmt|;
block|}
DECL|method|setResources (Map<String, String> resources)
specifier|public
name|void
name|setResources
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|resources
parameter_list|)
block|{
name|this
operator|.
name|resources
operator|=
name|resources
expr_stmt|;
block|}
DECL|method|getAutoStartComponent ()
specifier|public
name|Boolean
name|getAutoStartComponent
parameter_list|()
block|{
return|return
name|autoStartComponent
return|;
block|}
DECL|method|setAutoStartComponent (Boolean autoStartComponent)
specifier|public
name|void
name|setAutoStartComponent
parameter_list|(
name|Boolean
name|autoStartComponent
parameter_list|)
block|{
name|this
operator|.
name|autoStartComponent
operator|=
name|autoStartComponent
expr_stmt|;
block|}
DECL|method|getJmxDisabledNames ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getJmxDisabledNames
parameter_list|()
block|{
return|return
name|jmxDisabledNames
return|;
block|}
DECL|method|setJmxDisabledNames (Set<String> jmxDisabledNames)
specifier|public
name|void
name|setJmxDisabledNames
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|jmxDisabledNames
parameter_list|)
block|{
name|this
operator|.
name|jmxDisabledNames
operator|=
name|jmxDisabledNames
expr_stmt|;
block|}
DECL|method|getSystemProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSystemProperties
parameter_list|()
block|{
return|return
name|systemProperties
return|;
block|}
DECL|method|setSystemProperties (Map<String, String> systemProperties)
specifier|public
name|void
name|setSystemProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|systemProperties
parameter_list|)
block|{
name|this
operator|.
name|systemProperties
operator|=
name|systemProperties
expr_stmt|;
block|}
DECL|method|getUseCustomLog ()
specifier|public
name|Boolean
name|getUseCustomLog
parameter_list|()
block|{
return|return
name|useCustomLog
return|;
block|}
DECL|method|setUseCustomLog (Boolean useCustomLog)
specifier|public
name|void
name|setUseCustomLog
parameter_list|(
name|Boolean
name|useCustomLog
parameter_list|)
block|{
name|this
operator|.
name|useCustomLog
operator|=
name|useCustomLog
expr_stmt|;
block|}
DECL|method|getIgnoreLibraryMismatch ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getIgnoreLibraryMismatch
parameter_list|()
block|{
return|return
name|ignoreLibraryMismatch
return|;
block|}
DECL|method|setIgnoreLibraryMismatch (Set<String> ignoreLibraryMismatch)
specifier|public
name|void
name|setIgnoreLibraryMismatch
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|ignoreLibraryMismatch
parameter_list|)
block|{
name|this
operator|.
name|ignoreLibraryMismatch
operator|=
name|ignoreLibraryMismatch
expr_stmt|;
block|}
DECL|method|getTestLibraryVersions ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getTestLibraryVersions
parameter_list|()
block|{
return|return
name|testLibraryVersions
return|;
block|}
DECL|method|setTestLibraryVersions (Map<String, String> testLibraryVersions)
specifier|public
name|void
name|setTestLibraryVersions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|testLibraryVersions
parameter_list|)
block|{
name|this
operator|.
name|testLibraryVersions
operator|=
name|testLibraryVersions
expr_stmt|;
block|}
DECL|method|getSpringBootVersion ()
specifier|public
name|String
name|getSpringBootVersion
parameter_list|()
block|{
return|return
name|springBootVersion
return|;
block|}
DECL|method|getSpringBootMajorVersion ()
specifier|public
name|Integer
name|getSpringBootMajorVersion
parameter_list|()
block|{
if|if
condition|(
name|springBootVersion
operator|!=
literal|null
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|springBootVersion
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|DEFAULT_SPRING_BOOT_MAJOR_VERSION
return|;
block|}
block|}
DECL|method|setSpringBootVersion (String springBootVersion)
specifier|public
name|void
name|setSpringBootVersion
parameter_list|(
name|String
name|springBootVersion
parameter_list|)
block|{
name|this
operator|.
name|springBootVersion
operator|=
name|springBootVersion
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ITestConfig{"
operator|+
literal|"moduleName='"
operator|+
name|moduleName
operator|+
literal|'\''
operator|+
literal|", mavenGroup='"
operator|+
name|mavenGroup
operator|+
literal|'\''
operator|+
literal|", mavenVersion='"
operator|+
name|mavenVersion
operator|+
literal|'\''
operator|+
literal|", mavenOfflineResolution="
operator|+
name|mavenOfflineResolution
operator|+
literal|", modulesPath='"
operator|+
name|modulesPath
operator|+
literal|'\''
operator|+
literal|", moduleBasePath='"
operator|+
name|moduleBasePath
operator|+
literal|'\''
operator|+
literal|", includeTestDependencies="
operator|+
name|includeTestDependencies
operator|+
literal|", includeProvidedDependencies="
operator|+
name|includeProvidedDependencies
operator|+
literal|", unitTestEnabled="
operator|+
name|unitTestEnabled
operator|+
literal|", unitTestInclusionPattern='"
operator|+
name|unitTestInclusionPattern
operator|+
literal|'\''
operator|+
literal|", unitTestExclusionPattern='"
operator|+
name|unitTestExclusionPattern
operator|+
literal|'\''
operator|+
literal|", unitTestBasePackage='"
operator|+
name|unitTestBasePackage
operator|+
literal|'\''
operator|+
literal|", unitTestsExpectedNumber="
operator|+
name|unitTestsExpectedNumber
operator|+
literal|", resources="
operator|+
name|resources
operator|+
literal|", additionalDependencies="
operator|+
name|additionalDependencies
operator|+
literal|", mavenExclusions="
operator|+
name|mavenExclusions
operator|+
literal|", autoStartComponent="
operator|+
name|autoStartComponent
operator|+
literal|", jmxDisabledNames="
operator|+
name|jmxDisabledNames
operator|+
literal|", systemProperties="
operator|+
name|systemProperties
operator|+
literal|", useCustomLog="
operator|+
name|useCustomLog
operator|+
literal|", ignoreLibraryMismatch="
operator|+
name|ignoreLibraryMismatch
operator|+
literal|", testLibraryVersions="
operator|+
name|testLibraryVersions
operator|+
literal|", springBootVersion="
operator|+
name|springBootVersion
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

