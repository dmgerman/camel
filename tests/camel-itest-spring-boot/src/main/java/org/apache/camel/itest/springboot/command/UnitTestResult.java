begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.springboot.command
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Result
import|;
end_import

begin_comment
comment|/**  * Contains the result of the execution of a test suite.  * Can be rebuilt at the other classloader as it does not contain reference to internal classes.  */
end_comment

begin_class
DECL|class|UnitTestResult
specifier|public
class|class
name|UnitTestResult
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|5015959334755321719L
decl_stmt|;
DECL|field|runCount
specifier|private
name|int
name|runCount
decl_stmt|;
DECL|field|failureCount
specifier|private
name|int
name|failureCount
decl_stmt|;
DECL|field|runTime
specifier|private
name|long
name|runTime
decl_stmt|;
DECL|field|ignoreCount
specifier|private
name|int
name|ignoreCount
decl_stmt|;
DECL|field|successful
specifier|private
name|boolean
name|successful
decl_stmt|;
DECL|method|UnitTestResult ()
specifier|public
name|UnitTestResult
parameter_list|()
block|{     }
DECL|method|UnitTestResult (Result jr)
specifier|public
name|UnitTestResult
parameter_list|(
name|Result
name|jr
parameter_list|)
block|{
name|this
operator|.
name|runCount
operator|=
name|jr
operator|.
name|getRunCount
argument_list|()
expr_stmt|;
name|this
operator|.
name|failureCount
operator|=
name|jr
operator|.
name|getFailureCount
argument_list|()
expr_stmt|;
name|this
operator|.
name|runTime
operator|=
name|jr
operator|.
name|getRunTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|ignoreCount
operator|=
name|jr
operator|.
name|getIgnoreCount
argument_list|()
expr_stmt|;
name|this
operator|.
name|successful
operator|=
name|jr
operator|.
name|wasSuccessful
argument_list|()
expr_stmt|;
block|}
DECL|method|getRunCount ()
specifier|public
name|int
name|getRunCount
parameter_list|()
block|{
return|return
name|runCount
return|;
block|}
DECL|method|setRunCount (int runCount)
specifier|public
name|void
name|setRunCount
parameter_list|(
name|int
name|runCount
parameter_list|)
block|{
name|this
operator|.
name|runCount
operator|=
name|runCount
expr_stmt|;
block|}
DECL|method|getFailureCount ()
specifier|public
name|int
name|getFailureCount
parameter_list|()
block|{
return|return
name|failureCount
return|;
block|}
DECL|method|setFailureCount (int failureCount)
specifier|public
name|void
name|setFailureCount
parameter_list|(
name|int
name|failureCount
parameter_list|)
block|{
name|this
operator|.
name|failureCount
operator|=
name|failureCount
expr_stmt|;
block|}
DECL|method|getRunTime ()
specifier|public
name|long
name|getRunTime
parameter_list|()
block|{
return|return
name|runTime
return|;
block|}
DECL|method|setRunTime (long runTime)
specifier|public
name|void
name|setRunTime
parameter_list|(
name|long
name|runTime
parameter_list|)
block|{
name|this
operator|.
name|runTime
operator|=
name|runTime
expr_stmt|;
block|}
DECL|method|getIgnoreCount ()
specifier|public
name|int
name|getIgnoreCount
parameter_list|()
block|{
return|return
name|ignoreCount
return|;
block|}
DECL|method|setIgnoreCount (int ignoreCount)
specifier|public
name|void
name|setIgnoreCount
parameter_list|(
name|int
name|ignoreCount
parameter_list|)
block|{
name|this
operator|.
name|ignoreCount
operator|=
name|ignoreCount
expr_stmt|;
block|}
DECL|method|isSuccessful ()
specifier|public
name|boolean
name|isSuccessful
parameter_list|()
block|{
return|return
name|successful
return|;
block|}
DECL|method|setSuccessful (boolean successful)
specifier|public
name|void
name|setSuccessful
parameter_list|(
name|boolean
name|successful
parameter_list|)
block|{
name|this
operator|.
name|successful
operator|=
name|successful
expr_stmt|;
block|}
block|}
end_class

end_unit

