begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|arquillian
operator|.
name|ArquillianSyncBootJarLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|util
operator|.
name|SpringBootContainerFacade
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_comment
comment|/**  * This is the base class of all spring-boot integration tests.  */
end_comment

begin_class
DECL|class|AbstractSpringBootTestSupport
specifier|public
specifier|abstract
class|class
name|AbstractSpringBootTestSupport
block|{
DECL|field|config
specifier|protected
name|ITestConfig
name|config
decl_stmt|;
DECL|field|facade
specifier|private
name|SpringBootContainerFacade
name|facade
decl_stmt|;
comment|/**      * Starts a spring-boot container with the module under test.      *      * @throws Exception      */
annotation|@
name|Before
DECL|method|startSpringBoot ()
specifier|public
name|void
name|startSpringBoot
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|config
operator|=
name|retrieveConfig
argument_list|()
expr_stmt|;
name|ArquillianSyncBootJarLauncher
name|launcher
init|=
operator|new
name|ArquillianSyncBootJarLauncher
argument_list|()
decl_stmt|;
name|launcher
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|this
operator|.
name|facade
operator|=
operator|new
name|SpringBootContainerFacade
argument_list|(
name|launcher
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|inferModuleName (Class<?> testClass)
specifier|protected
specifier|static
name|String
name|inferModuleName
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|testClass
parameter_list|)
block|{
name|String
name|name
init|=
name|testClass
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|int
name|id1
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|id1
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|Character
operator|.
name|isUpperCase
argument_list|(
name|c
argument_list|)
operator|&&
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|defaultComponentName ()
specifier|protected
name|String
name|defaultComponentName
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|config
operator|.
name|getModuleName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"camel-"
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|runComponentTest (ITestConfig config)
specifier|protected
name|void
name|runComponentTest
parameter_list|(
name|ITestConfig
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|runComponentTest
argument_list|(
name|config
argument_list|,
name|defaultComponentName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|runComponentTest (ITestConfig config, String componentName)
specifier|protected
name|void
name|runComponentTest
parameter_list|(
name|ITestConfig
name|config
parameter_list|,
name|String
name|componentName
parameter_list|)
throws|throws
name|Exception
block|{
name|facade
operator|.
name|executeTest
argument_list|(
literal|"module"
argument_list|,
name|config
argument_list|,
name|componentName
argument_list|)
expr_stmt|;
block|}
DECL|method|runDataformatTest (ITestConfig config)
specifier|protected
name|void
name|runDataformatTest
parameter_list|(
name|ITestConfig
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|runDataformatTest
argument_list|(
name|config
argument_list|,
name|defaultComponentName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|runDataformatTest (ITestConfig config, String dataFormatName)
specifier|protected
name|void
name|runDataformatTest
parameter_list|(
name|ITestConfig
name|config
parameter_list|,
name|String
name|dataFormatName
parameter_list|)
throws|throws
name|Exception
block|{
name|facade
operator|.
name|executeTest
argument_list|(
literal|"dataformat"
argument_list|,
name|config
argument_list|,
name|dataFormatName
argument_list|)
expr_stmt|;
block|}
DECL|method|runLanguageTest (ITestConfig config)
specifier|protected
name|void
name|runLanguageTest
parameter_list|(
name|ITestConfig
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|runLanguageTest
argument_list|(
name|config
argument_list|,
name|defaultComponentName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|runLanguageTest (ITestConfig config, String language)
specifier|protected
name|void
name|runLanguageTest
parameter_list|(
name|ITestConfig
name|config
parameter_list|,
name|String
name|language
parameter_list|)
throws|throws
name|Exception
block|{
name|facade
operator|.
name|executeTest
argument_list|(
literal|"language"
argument_list|,
name|config
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
DECL|method|runModuleUnitTestsIfEnabled (ITestConfig config)
specifier|protected
name|void
name|runModuleUnitTestsIfEnabled
parameter_list|(
name|ITestConfig
name|config
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|config
operator|.
name|getUnitTestEnabled
argument_list|()
condition|)
block|{
name|this
operator|.
name|runModuleUnitTests
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runModuleUnitTests (ITestConfig config)
specifier|protected
name|void
name|runModuleUnitTests
parameter_list|(
name|ITestConfig
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|facade
operator|.
name|executeTest
argument_list|(
literal|"unittest"
argument_list|,
name|config
argument_list|,
name|config
operator|.
name|getModuleName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"camel-"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|retrieveConfig ()
specifier|protected
name|ITestConfig
name|retrieveConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|confMethod
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"createTestConfig"
argument_list|)
decl_stmt|;
name|ITestConfig
name|conf
init|=
operator|(
name|ITestConfig
operator|)
name|confMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

