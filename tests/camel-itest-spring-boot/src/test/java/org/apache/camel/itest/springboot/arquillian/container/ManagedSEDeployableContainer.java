begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.springboot.arquillian.container
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|arquillian
operator|.
name|container
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|ConsoleHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|arquillian
operator|.
name|container
operator|.
name|jmx
operator|.
name|CustomJMXProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|arquillian
operator|.
name|container
operator|.
name|util
operator|.
name|Await
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|arquillian
operator|.
name|container
operator|.
name|util
operator|.
name|FileDeploymentUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|se
operator|.
name|api
operator|.
name|ClassPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|se
operator|.
name|api
operator|.
name|ClassPathDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|spi
operator|.
name|client
operator|.
name|container
operator|.
name|DeployableContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|spi
operator|.
name|client
operator|.
name|container
operator|.
name|DeploymentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|spi
operator|.
name|client
operator|.
name|container
operator|.
name|LifecycleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|spi
operator|.
name|client
operator|.
name|protocol
operator|.
name|ProtocolDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|spi
operator|.
name|client
operator|.
name|protocol
operator|.
name|metadata
operator|.
name|JMXContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|spi
operator|.
name|client
operator|.
name|protocol
operator|.
name|metadata
operator|.
name|ProtocolMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|protocol
operator|.
name|jmx
operator|.
name|JMXTestRunnerMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|Archive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|asset
operator|.
name|ArchiveAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|asset
operator|.
name|Asset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|asset
operator|.
name|ClassAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|exporter
operator|.
name|ZipExporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|descriptor
operator|.
name|api
operator|.
name|Descriptor
import|;
end_import

begin_class
DECL|class|ManagedSEDeployableContainer
specifier|public
class|class
name|ManagedSEDeployableContainer
implements|implements
name|DeployableContainer
argument_list|<
name|ManagedSEContainerConfiguration
argument_list|>
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ManagedSEDeployableContainer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|SYSPROP_KEY_JAVA_HOME
specifier|private
specifier|static
specifier|final
name|String
name|SYSPROP_KEY_JAVA_HOME
init|=
literal|"java.home"
decl_stmt|;
DECL|field|DEBUG_AGENT_STRING
specifier|private
specifier|static
specifier|final
name|String
name|DEBUG_AGENT_STRING
init|=
literal|"-agentlib:jdwp=transport=dt_socket,address=8787,server=y,suspend=y"
decl_stmt|;
DECL|field|TARGET
specifier|private
specifier|static
specifier|final
name|String
name|TARGET
init|=
literal|"target"
decl_stmt|;
DECL|field|SERVER_MAIN_CLASS_FQN
specifier|private
specifier|static
specifier|final
name|String
name|SERVER_MAIN_CLASS_FQN
init|=
literal|"org.jboss.arquillian.container.se.server.Main"
decl_stmt|;
DECL|field|SYSTEM_PROPERTY_SWITCH
specifier|private
specifier|static
specifier|final
name|String
name|SYSTEM_PROPERTY_SWITCH
init|=
literal|"-D"
decl_stmt|;
DECL|field|EQUALS
specifier|private
specifier|static
specifier|final
name|String
name|EQUALS
init|=
literal|"="
decl_stmt|;
DECL|field|debugModeEnabled
specifier|private
name|boolean
name|debugModeEnabled
decl_stmt|;
DECL|field|keepDeploymentArchives
specifier|private
name|boolean
name|keepDeploymentArchives
decl_stmt|;
DECL|field|process
specifier|private
name|Process
name|process
decl_stmt|;
DECL|field|materializedFiles
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|materializedFiles
decl_stmt|;
DECL|field|classpathDependencies
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|classpathDependencies
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|field|librariesPath
specifier|private
name|String
name|librariesPath
decl_stmt|;
DECL|field|additionalJavaOpts
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|additionalJavaOpts
decl_stmt|;
DECL|field|waitTime
specifier|private
name|int
name|waitTime
decl_stmt|;
annotation|@
name|Override
DECL|method|getConfigurationClass ()
specifier|public
name|Class
argument_list|<
name|ManagedSEContainerConfiguration
argument_list|>
name|getConfigurationClass
parameter_list|()
block|{
return|return
name|ManagedSEContainerConfiguration
operator|.
name|class
return|;
block|}
DECL|method|setup (ManagedSEContainerConfiguration configuration)
specifier|public
name|void
name|setup
parameter_list|(
name|ManagedSEContainerConfiguration
name|configuration
parameter_list|)
block|{
name|debugModeEnabled
operator|=
name|configuration
operator|.
name|isDebug
argument_list|()
expr_stmt|;
name|host
operator|=
name|configuration
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|port
operator|=
name|configuration
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|materializedFiles
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|classpathDependencies
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|librariesPath
operator|=
name|configuration
operator|.
name|getLibrariesPath
argument_list|()
expr_stmt|;
name|keepDeploymentArchives
operator|=
name|configuration
operator|.
name|isKeepDeploymentArchives
argument_list|()
expr_stmt|;
name|additionalJavaOpts
operator|=
name|initAdditionalJavaOpts
argument_list|(
name|configuration
operator|.
name|getAdditionalJavaOpts
argument_list|()
argument_list|)
expr_stmt|;
name|configureLogging
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|waitTime
operator|=
name|configuration
operator|.
name|getWaitTime
argument_list|()
operator|>
literal|0
condition|?
name|configuration
operator|.
name|getWaitTime
argument_list|()
else|:
literal|10
expr_stmt|;
block|}
DECL|method|initAdditionalJavaOpts (String opts)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|initAdditionalJavaOpts
parameter_list|(
name|String
name|opts
parameter_list|)
block|{
if|if
condition|(
name|opts
operator|==
literal|null
operator|||
name|opts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|additionalOpts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|option
range|:
name|opts
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
control|)
block|{
name|additionalOpts
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
return|return
name|additionalOpts
return|;
block|}
DECL|method|configureLogging (ManagedSEContainerConfiguration configuration)
specifier|private
name|void
name|configureLogging
parameter_list|(
name|ManagedSEContainerConfiguration
name|configuration
parameter_list|)
block|{
name|ConsoleHandler
name|consoleHandler
init|=
operator|new
name|ConsoleHandler
argument_list|()
decl_stmt|;
name|consoleHandler
operator|.
name|setLevel
argument_list|(
name|configuration
operator|.
name|getLogLevel
argument_list|()
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|setUseParentHandlers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|addHandler
argument_list|(
name|consoleHandler
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|setLevel
argument_list|(
name|configuration
operator|.
name|getLogLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|LifecycleException
block|{     }
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|LifecycleException
block|{     }
annotation|@
name|Override
DECL|method|getDefaultProtocol ()
specifier|public
name|ProtocolDescription
name|getDefaultProtocol
parameter_list|()
block|{
return|return
operator|new
name|ProtocolDescription
argument_list|(
name|CustomJMXProtocol
operator|.
name|NAME
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deploy (Descriptor descriptor)
specifier|public
name|void
name|deploy
parameter_list|(
name|Descriptor
name|descriptor
parameter_list|)
throws|throws
name|DeploymentException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|undeploy (Descriptor descriptor)
specifier|public
name|void
name|undeploy
parameter_list|(
name|Descriptor
name|descriptor
parameter_list|)
throws|throws
name|DeploymentException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|undeploy (Archive<?> archive)
specifier|public
name|void
name|undeploy
parameter_list|(
name|Archive
argument_list|<
name|?
argument_list|>
name|archive
parameter_list|)
throws|throws
name|DeploymentException
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Undeploying "
operator|+
name|archive
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|keepDeploymentArchives
condition|)
block|{
for|for
control|(
name|File
name|materializedFile
range|:
name|materializedFiles
control|)
block|{
if|if
condition|(
name|materializedFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
try|try
block|{
name|FileDeploymentUtils
operator|.
name|deleteRecursively
argument_list|(
name|materializedFile
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warning
argument_list|(
literal|"Could not delete materialized directory: "
operator|+
name|materializedFile
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|materializedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Kill the subprocess (test JVM)
if|if
condition|(
name|process
operator|!=
literal|null
condition|)
block|{
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
try|try
block|{
name|process
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Interrupted while awaiting server daemon process termination"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|deploy (final Archive<?> archive)
specifier|public
name|ProtocolMetaData
name|deploy
parameter_list|(
specifier|final
name|Archive
argument_list|<
name|?
argument_list|>
name|archive
parameter_list|)
throws|throws
name|DeploymentException
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Deploying "
operator|+
name|archive
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// First of all clear the list of previously materialized deployments - otherwise the class path would grow indefinitely
name|materializedFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Create a new classpath
name|classpathDependencies
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|ClassPath
operator|.
name|isRepresentedBy
argument_list|(
name|archive
argument_list|)
condition|)
block|{
for|for
control|(
name|Node
name|child
range|:
name|archive
operator|.
name|get
argument_list|(
name|ClassPath
operator|.
name|ROOT_ARCHIVE_PATH
argument_list|)
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|Asset
name|asset
init|=
name|child
operator|.
name|getAsset
argument_list|()
decl_stmt|;
if|if
condition|(
name|asset
operator|instanceof
name|ArchiveAsset
condition|)
block|{
name|Archive
argument_list|<
name|?
argument_list|>
name|assetArchive
init|=
operator|(
operator|(
name|ArchiveAsset
operator|)
name|asset
operator|)
operator|.
name|getArchive
argument_list|()
decl_stmt|;
if|if
condition|(
name|ClassPathDirectory
operator|.
name|isRepresentedBy
argument_list|(
name|assetArchive
argument_list|)
condition|)
block|{
name|materializeDirectory
argument_list|(
name|assetArchive
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|materializeArchive
argument_list|(
name|assetArchive
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|materializeArchive
argument_list|(
name|archive
argument_list|)
expr_stmt|;
block|}
name|Properties
name|systemProperties
init|=
name|getSystemProperties
argument_list|(
name|archive
argument_list|)
decl_stmt|;
name|readJarFilesFromDirectory
argument_list|()
expr_stmt|;
name|addTestResourcesDirectory
argument_list|(
name|systemProperties
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|processCommand
init|=
name|buildProcessCommand
argument_list|(
name|systemProperties
argument_list|)
decl_stmt|;
name|logExecutedCommand
argument_list|(
name|processCommand
argument_list|)
expr_stmt|;
comment|// Launch the process
specifier|final
name|ProcessBuilder
name|processBuilder
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|processCommand
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|systemProperties
operator|.
name|getProperty
argument_list|(
literal|"container.user.dir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|processBuilder
operator|.
name|directory
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|processBuilder
operator|.
name|environment
argument_list|()
operator|.
name|put
argument_list|(
literal|"JAVA_HOME"
argument_list|,
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|SYSPROP_KEY_JAVA_HOME
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|processBuilder
operator|.
name|redirectErrorStream
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|processBuilder
operator|.
name|redirectError
argument_list|(
name|ProcessBuilder
operator|.
name|Redirect
operator|.
name|INHERIT
argument_list|)
expr_stmt|;
name|processBuilder
operator|.
name|redirectOutput
argument_list|(
name|ProcessBuilder
operator|.
name|Redirect
operator|.
name|INHERIT
argument_list|)
expr_stmt|;
try|try
block|{
name|process
operator|=
name|processBuilder
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
literal|"Could not start process"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|int
name|finalWaitTime
init|=
name|debugModeEnabled
condition|?
operator|(
literal|3
operator|*
name|waitTime
operator|)
else|:
name|waitTime
decl_stmt|;
comment|// Wait for socket connection
if|if
condition|(
operator|!
name|isServerStarted
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|finalWaitTime
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
literal|"Child JVM process failed to start within "
operator|+
name|finalWaitTime
operator|+
literal|" seconds."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isJMXTestRunnerMBeanRegistered
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|finalWaitTime
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
literal|"JMXTestRunnerMBean not registered within "
operator|+
name|finalWaitTime
operator|+
literal|" seconds."
argument_list|)
throw|;
block|}
name|ProtocolMetaData
name|protocolMetaData
init|=
operator|new
name|ProtocolMetaData
argument_list|()
decl_stmt|;
name|protocolMetaData
operator|.
name|addContext
argument_list|(
operator|new
name|JMXContext
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|protocolMetaData
return|;
block|}
DECL|method|getSystemProperties (final Archive<?> archive)
specifier|private
name|Properties
name|getSystemProperties
parameter_list|(
specifier|final
name|Archive
argument_list|<
name|?
argument_list|>
name|archive
parameter_list|)
throws|throws
name|DeploymentException
block|{
name|Node
name|systemPropertiesNode
init|=
name|archive
operator|.
name|get
argument_list|(
name|ClassPath
operator|.
name|SYSTEM_PROPERTIES_ARCHIVE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|systemPropertiesNode
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|InputStream
name|in
init|=
name|systemPropertiesNode
operator|.
name|getAsset
argument_list|()
operator|.
name|openStream
argument_list|()
init|)
block|{
name|Properties
name|systemProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|systemProperties
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|systemProperties
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
literal|"Could not load system properties"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|isServerStarted (final String host, final int port, int waitTime)
specifier|private
name|boolean
name|isServerStarted
parameter_list|(
specifier|final
name|String
name|host
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
name|int
name|waitTime
parameter_list|)
block|{
return|return
operator|new
name|Await
argument_list|(
name|waitTime
argument_list|,
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Socket
name|ignored
init|=
operator|new
name|Socket
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
init|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
return|;
block|}
DECL|method|isJMXTestRunnerMBeanRegistered (final String host, final int port, int waitTime)
specifier|private
name|boolean
name|isJMXTestRunnerMBeanRegistered
parameter_list|(
specifier|final
name|String
name|host
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
name|int
name|waitTime
parameter_list|)
throws|throws
name|DeploymentException
block|{
comment|// Taken from org.jboss.arquillian.container.spi.client.protocol.metadata.JMXContext
specifier|final
name|String
name|jmxServiceUrl
init|=
literal|"service:jmx:rmi:///jndi/rmi://"
operator|+
name|host
operator|+
literal|":"
operator|+
name|port
operator|+
literal|"/jmxrmi"
decl_stmt|;
try|try
init|(
name|JMXConnector
name|jmxc
init|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
operator|new
name|JMXServiceURL
argument_list|(
name|jmxServiceUrl
argument_list|)
argument_list|,
literal|null
argument_list|)
init|)
block|{
specifier|final
name|MBeanServerConnection
name|mbsc
init|=
name|jmxc
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
return|return
operator|new
name|Await
argument_list|(
name|waitTime
argument_list|,
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|mbsc
operator|.
name|getObjectInstance
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|JMXTestRunnerMBean
operator|.
name|OBJECT_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|fine
argument_list|(
literal|"JMXTestRunnerMBean registered with the remote MBean server at: "
operator|+
name|jmxServiceUrl
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
literal|"Could not verify JMXTestRunnerMBean registration"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|materializeArchive (Archive<?> archive)
specifier|private
name|void
name|materializeArchive
parameter_list|(
name|Archive
argument_list|<
name|?
argument_list|>
name|archive
parameter_list|)
block|{
name|File
name|deploymentFile
init|=
operator|new
name|File
argument_list|(
name|TARGET
operator|.
name|concat
argument_list|(
name|File
operator|.
name|separator
argument_list|)
operator|.
name|concat
argument_list|(
name|archive
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|archive
operator|.
name|as
argument_list|(
name|ZipExporter
operator|.
name|class
argument_list|)
operator|.
name|exportTo
argument_list|(
name|deploymentFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|materializedFiles
operator|.
name|add
argument_list|(
name|deploymentFile
argument_list|)
expr_stmt|;
block|}
DECL|method|materializeDirectory (Archive<?> archive)
specifier|private
name|void
name|materializeDirectory
parameter_list|(
name|Archive
argument_list|<
name|?
argument_list|>
name|archive
parameter_list|)
throws|throws
name|DeploymentException
block|{
if|if
condition|(
name|archive
operator|.
name|getContent
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Do not materialize an empty directory
return|return;
block|}
name|File
name|entryDirectory
init|=
operator|new
name|File
argument_list|(
name|TARGET
operator|.
name|concat
argument_list|(
name|File
operator|.
name|separator
argument_list|)
operator|.
name|concat
argument_list|(
name|archive
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|entryDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// Always delete previous content
name|FileDeploymentUtils
operator|.
name|deleteContent
argument_list|(
name|entryDirectory
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|entryDirectory
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
literal|"Could not create class path directory: "
operator|+
name|entryDirectory
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|Node
name|child
range|:
name|archive
operator|.
name|get
argument_list|(
name|ClassPath
operator|.
name|ROOT_ARCHIVE_PATH
argument_list|)
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|Asset
name|asset
init|=
name|child
operator|.
name|getAsset
argument_list|()
decl_stmt|;
if|if
condition|(
name|asset
operator|instanceof
name|ClassAsset
condition|)
block|{
name|FileDeploymentUtils
operator|.
name|materializeClass
argument_list|(
name|entryDirectory
argument_list|,
operator|(
name|ClassAsset
operator|)
name|asset
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|asset
operator|==
literal|null
condition|)
block|{
name|FileDeploymentUtils
operator|.
name|materializeSubdirectories
argument_list|(
name|entryDirectory
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
literal|"Could not materialize class path directory: "
operator|+
name|archive
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|materializedFiles
operator|.
name|add
argument_list|(
name|entryDirectory
argument_list|)
expr_stmt|;
block|}
DECL|method|buildProcessCommand (Properties properties)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|buildProcessCommand
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|command
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|File
name|javaHome
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|SYSPROP_KEY_JAVA_HOME
argument_list|)
argument_list|)
decl_stmt|;
name|command
operator|.
name|add
argument_list|(
name|javaHome
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"bin"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"java"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getJavaMajorVersion
argument_list|()
operator|>=
literal|9
condition|)
block|{
name|command
operator|.
name|add
argument_list|(
literal|"--add-modules"
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"java.sql"
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|add
argument_list|(
literal|"-cp"
argument_list|)
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|File
argument_list|>
name|classPathEntries
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|materializedFiles
argument_list|)
decl_stmt|;
name|classPathEntries
operator|.
name|addAll
argument_list|(
name|classpathDependencies
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|File
argument_list|>
name|iterator
init|=
name|classPathEntries
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
expr_stmt|;
block|}
block|}
name|command
operator|.
name|add
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"-Dcom.sun.management.jmxremote"
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"-Dcom.sun.management.jmxremote.port="
operator|+
name|port
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"-Dcom.sun.management.jmxremote.authenticate=false"
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"-Dcom.sun.management.jmxremote.ssl=false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|debugModeEnabled
condition|)
block|{
name|command
operator|.
name|add
argument_list|(
name|DEBUG_AGENT_STRING
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|option
range|:
name|additionalJavaOpts
control|)
block|{
name|command
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addSystemProperty
argument_list|(
name|command
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|command
operator|.
name|add
argument_list|(
name|SERVER_MAIN_CLASS_FQN
argument_list|)
expr_stmt|;
return|return
name|command
return|;
block|}
DECL|method|addSystemProperty (List<String> command, String key, String value)
specifier|private
name|void
name|addSystemProperty
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|command
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|command
operator|.
name|add
argument_list|(
name|SYSTEM_PROPERTY_SWITCH
operator|+
name|key
operator|+
name|EQUALS
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|readJarFilesFromDirectory ()
specifier|private
name|void
name|readJarFilesFromDirectory
parameter_list|()
throws|throws
name|DeploymentException
block|{
if|if
condition|(
name|librariesPath
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|File
name|lib
init|=
operator|new
name|File
argument_list|(
name|librariesPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lib
operator|.
name|exists
argument_list|()
operator|||
name|lib
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
literal|"Cannot read files from "
operator|+
name|librariesPath
argument_list|)
throw|;
block|}
name|File
index|[]
name|dep
init|=
name|lib
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|classpathDependencies
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|dep
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addTestResourcesDirectory (Properties properties)
specifier|private
name|void
name|addTestResourcesDirectory
parameter_list|(
name|Properties
name|properties
parameter_list|)
throws|throws
name|DeploymentException
block|{
name|String
name|testResources
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"container.test.resources.dir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|testResources
operator|!=
literal|null
condition|)
block|{
name|File
name|testDir
init|=
operator|new
name|File
argument_list|(
name|testResources
argument_list|)
decl_stmt|;
if|if
condition|(
name|testDir
operator|.
name|exists
argument_list|()
operator|&&
name|testDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|classpathDependencies
operator|.
name|add
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|logExecutedCommand (List<String> processCommand)
specifier|private
name|void
name|logExecutedCommand
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|processCommand
parameter_list|)
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|processCommand
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|LOGGER
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Executing command: "
operator|+
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getJavaMajorVersion ()
specifier|private
specifier|static
name|int
name|getJavaMajorVersion
parameter_list|()
block|{
name|String
name|javaSpecVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|javaSpecVersion
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
comment|//before jdk 9
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|javaSpecVersion
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
index|[
literal|1
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|javaSpecVersion
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

