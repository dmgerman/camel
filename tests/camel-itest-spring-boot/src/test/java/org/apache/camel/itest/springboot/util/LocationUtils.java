begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.springboot.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|LocationUtils
specifier|public
specifier|final
class|class
name|LocationUtils
block|{
DECL|method|LocationUtils ()
specifier|private
name|LocationUtils
parameter_list|()
block|{     }
DECL|method|camelRoot (String path)
specifier|public
specifier|static
name|File
name|camelRoot
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|camelRoot
argument_list|()
argument_list|,
name|path
argument_list|)
return|;
block|}
DECL|method|camelRoot ()
specifier|public
specifier|static
name|File
name|camelRoot
parameter_list|()
block|{
try|try
block|{
name|File
name|root
init|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
decl_stmt|;
while|while
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|File
index|[]
name|names
init|=
name|root
operator|.
name|listFiles
argument_list|(
name|pathname
lambda|->
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"core"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|!=
literal|null
operator|&&
name|names
operator|.
name|length
operator|==
literal|1
condition|)
block|{
break|break;
block|}
name|root
operator|=
name|root
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot find Apache Camel project root directory"
argument_list|)
throw|;
block|}
return|return
name|root
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error while getting directory"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

