begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.springboot.arquillian.container.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|arquillian
operator|.
name|container
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|Await
specifier|public
class|class
name|Await
block|{
DECL|field|DEFAULT_SLEEP_INTERVAL
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_SLEEP_INTERVAL
init|=
literal|100L
decl_stmt|;
DECL|field|delay
specifier|private
specifier|final
name|long
name|delay
decl_stmt|;
DECL|field|sleepInterval
specifier|private
specifier|final
name|long
name|sleepInterval
decl_stmt|;
DECL|field|condition
specifier|private
specifier|final
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|condition
decl_stmt|;
comment|/**      *      * @param delay      * @param condition      */
DECL|method|Await (long delay, Callable<Boolean> condition)
specifier|public
name|Await
parameter_list|(
name|long
name|delay
parameter_list|,
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|condition
parameter_list|)
block|{
name|this
argument_list|(
name|DEFAULT_SLEEP_INTERVAL
argument_list|,
name|delay
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @param delay The delay in seconds      * @param sleepInterval Thread sleep interval in ms      * @param condition      */
DECL|method|Await (long sleepInterval, long delay, Callable<Boolean> condition)
specifier|public
name|Await
parameter_list|(
name|long
name|sleepInterval
parameter_list|,
name|long
name|delay
parameter_list|,
name|Callable
argument_list|<
name|Boolean
argument_list|>
name|condition
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|this
operator|.
name|sleepInterval
operator|=
name|sleepInterval
expr_stmt|;
name|this
operator|.
name|condition
operator|=
name|condition
expr_stmt|;
block|}
DECL|method|start ()
specifier|public
name|boolean
name|start
parameter_list|()
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
do|do
block|{
try|try
block|{
if|if
condition|(
name|condition
operator|.
name|call
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{             }
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
operator|!
name|isTimeoutExpired
argument_list|(
name|start
argument_list|)
condition|)
do|;
return|return
literal|false
return|;
block|}
DECL|method|isTimeoutExpired (long start)
specifier|private
name|boolean
name|isTimeoutExpired
parameter_list|(
name|long
name|start
parameter_list|)
block|{
return|return
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|>=
name|delay
return|;
block|}
block|}
end_class

end_unit

