begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.springboot.arquillian.container.jmx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|arquillian
operator|.
name|container
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|se
operator|.
name|api
operator|.
name|ClassPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|test
operator|.
name|spi
operator|.
name|TestDeployment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|test
operator|.
name|spi
operator|.
name|client
operator|.
name|deployment
operator|.
name|DeploymentPackager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|test
operator|.
name|spi
operator|.
name|client
operator|.
name|deployment
operator|.
name|ProtocolArchiveProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|Archive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|exporter
operator|.
name|ZipExporter
import|;
end_import

begin_class
DECL|class|TestDeploymentPackager
specifier|public
class|class
name|TestDeploymentPackager
implements|implements
name|DeploymentPackager
block|{
annotation|@
name|Override
DECL|method|generateDeployment (TestDeployment testDeployment, Collection<ProtocolArchiveProcessor> collection)
specifier|public
name|Archive
argument_list|<
name|?
argument_list|>
name|generateDeployment
parameter_list|(
name|TestDeployment
name|testDeployment
parameter_list|,
name|Collection
argument_list|<
name|ProtocolArchiveProcessor
argument_list|>
name|collection
parameter_list|)
block|{
name|Archive
argument_list|<
name|?
argument_list|>
name|applicationArchive
init|=
name|testDeployment
operator|.
name|getApplicationArchive
argument_list|()
decl_stmt|;
name|boolean
name|isClassPath
init|=
name|ClassPath
operator|.
name|isRepresentedBy
argument_list|(
name|applicationArchive
argument_list|)
decl_stmt|;
for|for
control|(
name|Archive
argument_list|<
name|?
argument_list|>
name|auxiliaryArchive
range|:
name|testDeployment
operator|.
name|getAuxiliaryArchives
argument_list|()
control|)
block|{
if|if
condition|(
name|isClassPath
condition|)
block|{
name|applicationArchive
operator|.
name|add
argument_list|(
name|auxiliaryArchive
argument_list|,
name|ClassPath
operator|.
name|ROOT_ARCHIVE_PATH
argument_list|,
name|ZipExporter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|applicationArchive
operator|.
name|merge
argument_list|(
name|auxiliaryArchive
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|applicationArchive
return|;
block|}
block|}
end_class

end_unit

