begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.springboot.arquillian
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|arquillian
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|loader
operator|.
name|JarLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|loader
operator|.
name|LaunchedURLClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|loader
operator|.
name|MainMethodRunner
import|;
end_import

begin_comment
comment|/**  * A Spring-boot jar launcher that uses the current thread instead of creating a new thread for spring-boot.  */
end_comment

begin_class
DECL|class|ArquillianSyncBootJarLauncher
specifier|public
class|class
name|ArquillianSyncBootJarLauncher
extends|extends
name|JarLauncher
block|{
DECL|field|classLoader
specifier|private
name|ClassLoader
name|classLoader
decl_stmt|;
DECL|method|ArquillianSyncBootJarLauncher ()
specifier|public
name|ArquillianSyncBootJarLauncher
parameter_list|()
block|{     }
DECL|method|run (String[] args)
specifier|public
name|void
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|launch
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|launch (String[] args, String mainClass, ClassLoader classLoader)
specifier|protected
name|void
name|launch
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|String
name|mainClass
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|classLoader
operator|=
name|classLoader
expr_stmt|;
name|MainMethodRunner
name|runner
init|=
name|createMainMethodRunner
argument_list|(
name|mainClass
argument_list|,
name|args
argument_list|,
name|classLoader
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
name|runner
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createClassLoader (URL[] urls)
specifier|protected
name|ClassLoader
name|createClassLoader
parameter_list|(
name|URL
index|[]
name|urls
parameter_list|)
throws|throws
name|Exception
block|{
comment|// The spring classloader should not be built on top of the current classloader, it should just share the test classes if available
name|List
argument_list|<
name|URL
argument_list|>
name|parentUrls
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|urlsFromClassLoader
argument_list|(
name|this
operator|.
name|getClassLoader
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|URL
argument_list|>
name|additionalURLs
init|=
name|parentUrls
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|u
lambda|->
name|u
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"file"
argument_list|)
operator|&&
operator|!
name|u
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|URL
argument_list|>
name|newURLs
init|=
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|urls
argument_list|)
argument_list|)
decl_stmt|;
name|newURLs
operator|.
name|addAll
argument_list|(
name|additionalURLs
argument_list|)
expr_stmt|;
name|ClassLoader
name|appClassLoader
init|=
literal|null
decl_stmt|;
comment|// Until https://github.com/spring-projects/spring-boot/issues/12832 is resolved
if|if
condition|(
name|getJavaMajorVersion
argument_list|()
operator|>=
literal|9
condition|)
block|{
comment|// use the Platform classloader to resolve classes on the module path
name|appClassLoader
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|LaunchedURLClassLoader
name|launchedURLClassLoader
init|=
operator|new
name|LaunchedURLClassLoader
argument_list|(
name|newURLs
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|appClassLoader
argument_list|)
decl_stmt|;
return|return
name|launchedURLClassLoader
return|;
block|}
comment|/**      * Returns the classloader used by spring, to communicate with it.      *      * @return the spring classloader      */
DECL|method|getClassLoader ()
specifier|public
name|ClassLoader
name|getClassLoader
parameter_list|()
block|{
return|return
name|classLoader
return|;
block|}
DECL|method|getJavaMajorVersion ()
specifier|private
specifier|static
name|int
name|getJavaMajorVersion
parameter_list|()
block|{
name|String
name|javaSpecVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|javaSpecVersion
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
comment|//before jdk 9
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|javaSpecVersion
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
index|[
literal|1
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|javaSpecVersion
argument_list|)
return|;
block|}
block|}
DECL|method|urlsFromClassLoader (ClassLoader classLoader)
specifier|private
specifier|static
name|URL
index|[]
name|urlsFromClassLoader
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|)
block|{
if|if
condition|(
name|classLoader
operator|instanceof
name|URLClassLoader
condition|)
block|{
return|return
operator|(
operator|(
name|URLClassLoader
operator|)
name|classLoader
operator|)
operator|.
name|getURLs
argument_list|()
return|;
block|}
return|return
name|Stream
operator|.
name|of
argument_list|(
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
operator|.
name|getClassPath
argument_list|()
operator|.
name|split
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|ArquillianSyncBootJarLauncher
operator|::
name|toURL
argument_list|)
operator|.
name|toArray
argument_list|(
name|URL
index|[]
operator|::
operator|new
argument_list|)
return|;
block|}
DECL|method|toURL (String classPathEntry)
specifier|private
specifier|static
name|URL
name|toURL
parameter_list|(
name|String
name|classPathEntry
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|File
argument_list|(
name|classPathEntry
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"URL could not be created from '"
operator|+
name|classPathEntry
operator|+
literal|"'"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

