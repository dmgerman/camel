begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.springboot.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|ITestConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|ITestConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|arquillian
operator|.
name|SpringBootZipExporterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|se
operator|.
name|api
operator|.
name|ClassPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|Archive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|ArchivePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|ConfigurationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|Domain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|ExtensionLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|ShrinkWrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|asset
operator|.
name|Asset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|asset
operator|.
name|ClassLoaderAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|asset
operator|.
name|FileAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|exporter
operator|.
name|ZipExporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|spec
operator|.
name|JavaArchive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|impl
operator|.
name|base
operator|.
name|ServiceExtensionLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|impl
operator|.
name|base
operator|.
name|URLPackageScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|impl
operator|.
name|base
operator|.
name|asset
operator|.
name|AssetUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|impl
operator|.
name|base
operator|.
name|path
operator|.
name|BasicPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|ConfigurableMavenResolverSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|Maven
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|MavenResolvedArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|ScopeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|coordinate
operator|.
name|MavenCoordinate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|coordinate
operator|.
name|MavenCoordinates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|coordinate
operator|.
name|MavenDependencies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|coordinate
operator|.
name|MavenDependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|coordinate
operator|.
name|MavenDependencyExclusion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Packages a module in a spring-boot compatible nested-jar structure.  */
end_comment

begin_class
DECL|class|ArquillianPackager
specifier|public
specifier|final
class|class
name|ArquillianPackager
block|{
comment|/**      * A flag to enable system-out logging.      * Cannot use logging libraries here.      */
DECL|field|DEBUG_ENABLED
specifier|private
specifier|static
specifier|final
name|boolean
name|DEBUG_ENABLED
init|=
literal|false
decl_stmt|;
DECL|field|LIB_FOLDER
specifier|private
specifier|static
specifier|final
name|String
name|LIB_FOLDER
init|=
literal|"/BOOT-INF/lib"
decl_stmt|;
DECL|field|CLASSES_FOLDER
specifier|private
specifier|static
specifier|final
name|String
name|CLASSES_FOLDER
init|=
literal|"BOOT-INF/classes"
decl_stmt|;
DECL|method|ArquillianPackager ()
specifier|private
name|ArquillianPackager
parameter_list|()
block|{     }
DECL|method|springBootPackage (ITestConfig config)
specifier|public
specifier|static
name|Archive
argument_list|<
name|?
argument_list|>
name|springBootPackage
parameter_list|(
name|ITestConfig
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|ExtensionLoader
name|extensionLoader
init|=
operator|new
name|ServiceExtensionLoader
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|getExtensionClassloader
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|extensionLoader
operator|.
name|addOverride
argument_list|(
name|ZipExporter
operator|.
name|class
argument_list|,
name|SpringBootZipExporterImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|ConfigurationBuilder
name|builder
init|=
operator|new
name|ConfigurationBuilder
argument_list|()
operator|.
name|extensionLoader
argument_list|(
name|extensionLoader
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Domain
name|domain
init|=
name|ShrinkWrap
operator|.
name|createDomain
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|JavaArchive
name|ark
init|=
name|domain
operator|.
name|getArchiveFactory
argument_list|()
operator|.
name|create
argument_list|(
name|JavaArchive
operator|.
name|class
argument_list|,
literal|"test.jar"
argument_list|)
decl_stmt|;
name|ark
operator|=
name|ark
operator|.
name|addAsManifestResource
argument_list|(
literal|"BOOT-MANIFEST.MF"
argument_list|,
literal|"MANIFEST.MF"
argument_list|)
expr_stmt|;
name|ark
operator|=
name|ark
operator|.
name|addAsDirectories
argument_list|(
name|LIB_FOLDER
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|CLASSES_FOLDER
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|ark
operator|=
name|ark
operator|.
name|addAsDirectories
argument_list|(
name|CLASSES_FOLDER
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getUseCustomLog
argument_list|()
condition|)
block|{
name|ark
operator|=
name|ark
operator|.
name|addAsResource
argument_list|(
literal|"spring-logback.xml"
argument_list|,
name|CLASSES_FOLDER
operator|+
literal|"/spring-logback.xml"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|res
range|:
name|config
operator|.
name|getResources
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ark
operator|=
name|ark
operator|.
name|addAsResource
argument_list|(
name|res
operator|.
name|getKey
argument_list|()
argument_list|,
name|CLASSES_FOLDER
operator|+
literal|"/"
operator|+
name|res
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|version
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"version_org.apache.camel:camel-core"
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|getMavenVersion
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
comment|// It is missing when launching from IDE
name|List
argument_list|<
name|MavenResolvedArtifact
argument_list|>
name|resolved
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|resolver
argument_list|(
name|config
argument_list|)
operator|.
name|loadPomFromFile
argument_list|(
literal|"pom.xml"
argument_list|)
operator|.
name|importRuntimeDependencies
argument_list|()
operator|.
name|resolve
argument_list|()
operator|.
name|withoutTransitivity
argument_list|()
operator|.
name|asResolvedArtifact
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MavenResolvedArtifact
name|dep
range|:
name|resolved
control|)
block|{
if|if
condition|(
name|dep
operator|.
name|getCoordinate
argument_list|()
operator|.
name|getGroupId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"org.apache.camel"
argument_list|)
condition|)
block|{
name|version
operator|=
name|dep
operator|.
name|getCoordinate
argument_list|()
operator|.
name|getVersion
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
name|debug
argument_list|(
literal|"Resolved version: "
operator|+
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot determine the current version of the camel component"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|MavenDependencyExclusion
argument_list|>
name|commonExclusions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|commonExclusions
operator|.
name|add
argument_list|(
name|MavenDependencies
operator|.
name|createExclusion
argument_list|(
literal|"org.slf4j"
argument_list|,
literal|"slf4j-log4j12"
argument_list|)
argument_list|)
expr_stmt|;
name|commonExclusions
operator|.
name|add
argument_list|(
name|MavenDependencies
operator|.
name|createExclusion
argument_list|(
literal|"log4j"
argument_list|,
literal|"log4j"
argument_list|)
argument_list|)
expr_stmt|;
name|commonExclusions
operator|.
name|add
argument_list|(
name|MavenDependencies
operator|.
name|createExclusion
argument_list|(
literal|"log4j"
argument_list|,
literal|"log4j-slf4j-impl"
argument_list|)
argument_list|)
expr_stmt|;
name|commonExclusions
operator|.
name|add
argument_list|(
name|MavenDependencies
operator|.
name|createExclusion
argument_list|(
literal|"org.apache.logging.log4j"
argument_list|,
literal|"log4j"
argument_list|)
argument_list|)
expr_stmt|;
name|commonExclusions
operator|.
name|add
argument_list|(
name|MavenDependencies
operator|.
name|createExclusion
argument_list|(
literal|"org.apache.logging.log4j"
argument_list|,
literal|"log4j-core"
argument_list|)
argument_list|)
expr_stmt|;
name|commonExclusions
operator|.
name|add
argument_list|(
name|MavenDependencies
operator|.
name|createExclusion
argument_list|(
literal|"org.apache.logging.log4j"
argument_list|,
literal|"log4j-slf4j-impl"
argument_list|)
argument_list|)
expr_stmt|;
name|commonExclusions
operator|.
name|add
argument_list|(
name|MavenDependencies
operator|.
name|createExclusion
argument_list|(
literal|"log4j"
argument_list|,
literal|"apache-log4j-extras"
argument_list|)
argument_list|)
expr_stmt|;
name|commonExclusions
operator|.
name|add
argument_list|(
name|MavenDependencies
operator|.
name|createExclusion
argument_list|(
literal|"org.slf4j"
argument_list|,
literal|"slf4j-simple"
argument_list|)
argument_list|)
expr_stmt|;
name|commonExclusions
operator|.
name|add
argument_list|(
name|MavenDependencies
operator|.
name|createExclusion
argument_list|(
literal|"org.slf4j"
argument_list|,
literal|"slf4j-jdk14"
argument_list|)
argument_list|)
expr_stmt|;
name|commonExclusions
operator|.
name|add
argument_list|(
name|MavenDependencies
operator|.
name|createExclusion
argument_list|(
literal|"ch.qos.logback"
argument_list|,
literal|"logback-classic"
argument_list|)
argument_list|)
expr_stmt|;
name|commonExclusions
operator|.
name|add
argument_list|(
name|MavenDependencies
operator|.
name|createExclusion
argument_list|(
literal|"ch.qos.logback"
argument_list|,
literal|"logback-core"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|ex
range|:
name|config
operator|.
name|getMavenExclusions
argument_list|()
control|)
block|{
name|commonExclusions
operator|.
name|add
argument_list|(
name|MavenDependencies
operator|.
name|createExclusion
argument_list|(
name|ex
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MavenDependencyExclusion
index|[]
name|commonExclutionArray
init|=
name|commonExclusions
operator|.
name|toArray
argument_list|(
operator|new
name|MavenDependencyExclusion
index|[]
block|{}
argument_list|)
decl_stmt|;
comment|// Module dependencies
name|List
argument_list|<
name|MavenDependency
argument_list|>
name|moduleDependencies
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//        String mainArtifactId = config.getModuleName() + "-starter";
comment|//        MavenCoordinate mainJar = MavenCoordinates.createCoordinate(config.getMavenGroup(), mainArtifactId, version, PackagingType.JAR, null);
comment|//        // Add exclusions only when not using the starters
comment|//        MavenDependency mainDep = MavenDependencies.createDependency(mainJar, ScopeType.COMPILE, false);
comment|//        moduleDependencies.add(mainDep);
for|for
control|(
name|String
name|canonicalForm
range|:
name|config
operator|.
name|getAdditionalDependencies
argument_list|()
control|)
block|{
name|MavenCoordinate
name|coord
init|=
name|MavenCoordinates
operator|.
name|createCoordinate
argument_list|(
name|canonicalForm
argument_list|)
decl_stmt|;
name|MavenDependency
name|dep
init|=
name|MavenDependencies
operator|.
name|createDependency
argument_list|(
name|coord
argument_list|,
name|ScopeType
operator|.
name|RUNTIME
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|moduleDependencies
operator|.
name|add
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getIncludeProvidedDependencies
argument_list|()
operator|||
name|config
operator|.
name|getIncludeTestDependencies
argument_list|()
operator|||
name|config
operator|.
name|getUnitTestEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|dependencies
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ScopeType
argument_list|>
name|scopes
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getIncludeTestDependencies
argument_list|()
operator|||
name|config
operator|.
name|getUnitTestEnabled
argument_list|()
condition|)
block|{
name|dependencies
operator|.
name|append
argument_list|(
name|DependencyResolver
operator|.
name|getDependencies
argument_list|(
name|config
operator|.
name|getModuleBasePath
argument_list|()
operator|+
literal|"/pom.xml"
argument_list|,
name|ScopeType
operator|.
name|TEST
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scopes
operator|.
name|add
argument_list|(
name|ScopeType
operator|.
name|TEST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getIncludeProvidedDependencies
argument_list|()
condition|)
block|{
name|dependencies
operator|.
name|append
argument_list|(
name|DependencyResolver
operator|.
name|getDependencies
argument_list|(
name|config
operator|.
name|getModuleBasePath
argument_list|()
operator|+
literal|"/pom.xml"
argument_list|,
name|ScopeType
operator|.
name|PROVIDED
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scopes
operator|.
name|add
argument_list|(
name|ScopeType
operator|.
name|PROVIDED
argument_list|)
expr_stmt|;
block|}
name|File
name|resolverFile
init|=
name|createResolverPom
argument_list|(
name|config
argument_list|,
name|dependencies
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|failIfNoDependencies
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MavenResolvedArtifact
argument_list|>
name|moduleArtifacts
decl_stmt|;
try|try
block|{
name|moduleArtifacts
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|resolver
argument_list|(
name|config
argument_list|)
operator|.
name|loadPomFromFile
argument_list|(
name|resolverFile
argument_list|)
operator|.
name|importDependencies
argument_list|(
name|scopes
operator|.
name|toArray
argument_list|(
operator|new
name|ScopeType
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|.
name|resolve
argument_list|()
operator|.
name|withoutTransitivity
argument_list|()
operator|.
name|asResolvedArtifact
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|failIfNoDependencies
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|debug
argument_list|(
literal|"Error while getting dependencies for test or optional scopes. Message="
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|moduleArtifacts
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|MavenCoordinate
argument_list|>
name|coordinates
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// fill coordinates
for|for
control|(
name|MavenResolvedArtifact
name|art
range|:
name|moduleArtifacts
control|)
block|{
name|MavenCoordinate
name|coord
init|=
name|art
operator|.
name|getCoordinate
argument_list|()
decl_stmt|;
comment|//                Set<String> nonStarterModules = new HashSet<>();
comment|//                nonStarterModules.add("camel-test");
comment|//
comment|//                // redirect reference from camel modules to camel starters in test scope
comment|//                if (art.getScope() == ScopeType.TEST&& art.getCoordinate().getGroupId().equals("org.apache.camel")&& art.getCoordinate().getArtifactId().startsWith("camel-")&& !nonStarterModules
comment|//                        .contains(art.getCoordinate().getArtifactId())) {
comment|//                    coord = MavenCoordinates.createCoordinate(art.getCoordinate().getGroupId(), art.getCoordinate().getArtifactId() + "-starter", art.getCoordinate().getVersion(), art.getCoordinate
comment|//                            ().getPackaging(), art.getCoordinate().getClassifier());
comment|//                }
if|if
condition|(
operator|!
name|validTestDependency
argument_list|(
name|config
argument_list|,
name|coord
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|coordinates
operator|.
name|add
argument_list|(
name|coord
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MavenCoordinate
name|c
range|:
name|coordinates
control|)
block|{
comment|// Re-adding exclusions, as Arquillian resolver ignores them
name|Set
argument_list|<
name|String
argument_list|>
name|pomExclusions
init|=
name|DependencyResolver
operator|.
name|getExclusions
argument_list|(
name|config
operator|.
name|getModuleBasePath
argument_list|()
operator|+
literal|"/pom.xml"
argument_list|,
name|c
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|c
operator|.
name|getArtifactId
argument_list|()
argument_list|)
decl_stmt|;
name|MavenDependencyExclusion
index|[]
name|artExclusions
decl_stmt|;
if|if
condition|(
name|pomExclusions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|artExclusions
operator|=
name|commonExclutionArray
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|MavenDependencyExclusion
argument_list|>
name|specificExclusions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|commonExclutionArray
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|spEx
range|:
name|pomExclusions
control|)
block|{
name|specificExclusions
operator|.
name|add
argument_list|(
name|MavenDependencies
operator|.
name|createExclusion
argument_list|(
name|spEx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|artExclusions
operator|=
name|specificExclusions
operator|.
name|toArray
argument_list|(
operator|new
name|MavenDependencyExclusion
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
name|MavenDependency
name|dep
init|=
name|MavenDependencies
operator|.
name|createDependency
argument_list|(
name|c
argument_list|,
name|ScopeType
operator|.
name|RUNTIME
argument_list|,
literal|false
argument_list|,
name|artExclusions
argument_list|)
decl_stmt|;
name|moduleDependencies
operator|.
name|add
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
block|}
name|File
name|moduleSpringBootPom
init|=
name|createUserPom
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|dependencies
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|dependencies
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|resolver
argument_list|(
name|config
argument_list|)
operator|.
name|loadPomFromFile
argument_list|(
name|moduleSpringBootPom
argument_list|)
operator|.
name|importRuntimeDependencies
argument_list|()
operator|.
name|addDependencies
argument_list|(
name|moduleDependencies
argument_list|)
operator|.
name|resolve
argument_list|()
operator|.
name|withTransitivity
argument_list|()
operator|.
name|asFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// The spring boot-loader dependency will be added to the main jar, so it should be excluded from the embedded ones
name|excludeDependencyRegex
argument_list|(
name|dependencies
argument_list|,
literal|"^spring-boot-loader-[0-9].*"
argument_list|)
expr_stmt|;
comment|// Add all dependencies as spring-boot nested jars
name|ark
operator|=
name|addDependencies
argument_list|(
name|ark
argument_list|,
name|dependencies
argument_list|)
expr_stmt|;
comment|// Add common packages to main jar
name|ark
operator|=
name|ark
operator|.
name|addPackages
argument_list|(
literal|true
argument_list|,
literal|"org.jboss.shrinkwrap"
argument_list|)
expr_stmt|;
comment|// Add current classes to both location to be used by different classloaders
name|ark
operator|=
name|ark
operator|.
name|addPackages
argument_list|(
literal|true
argument_list|,
literal|"org.apache.camel.itest.springboot"
argument_list|)
expr_stmt|;
name|ark
operator|=
name|addSpringbootPackage
argument_list|(
name|ark
argument_list|,
literal|"org.apache.camel.itest.springboot"
argument_list|)
expr_stmt|;
comment|// CAMEL-10060 is resolved since 2.18 but some unit tests use custom (non spring-boot enabled) camel contexts
name|ark
operator|=
name|ark
operator|.
name|addPackages
argument_list|(
literal|true
argument_list|,
literal|"org.apache.camel.converter.myconverter"
argument_list|)
expr_stmt|;
name|ark
operator|=
name|ark
operator|.
name|addPackages
argument_list|(
literal|true
argument_list|,
literal|"org.springframework.boot.loader"
argument_list|)
expr_stmt|;
name|ClassPath
operator|.
name|Builder
name|external
init|=
name|ClassPath
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|ark
argument_list|)
decl_stmt|;
comment|// overcome limitations of some JDKs
name|external
operator|.
name|addSystemProperty
argument_list|(
literal|"javax.xml.accessExternalDTD"
argument_list|,
literal|"all"
argument_list|)
expr_stmt|;
name|external
operator|.
name|addSystemProperty
argument_list|(
literal|"javax.xml.accessExternalSchema"
argument_list|,
literal|"all"
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getUnitTestEnabled
argument_list|()
condition|)
block|{
name|external
operator|.
name|addSystemProperty
argument_list|(
literal|"container.user.dir"
argument_list|,
operator|new
name|File
argument_list|(
name|config
operator|.
name|getModuleBasePath
argument_list|()
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|external
operator|.
name|addSystemProperty
argument_list|(
literal|"container.test.resources.dir"
argument_list|,
operator|new
name|File
argument_list|(
name|config
operator|.
name|getModuleBasePath
argument_list|()
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"/target/test-classes"
argument_list|)
expr_stmt|;
block|}
comment|// Adding configuration properties
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|instanceof
name|String
operator|&&
name|e
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|ITestConfigBuilder
operator|.
name|CONFIG_PREFIX
argument_list|)
condition|)
block|{
name|external
operator|.
name|addSystemProperty
argument_list|(
name|key
argument_list|,
operator|(
name|String
operator|)
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|config
operator|.
name|getSystemProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|external
operator|.
name|addSystemProperty
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|external
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|createUserPom (ITestConfig config)
specifier|private
specifier|static
name|File
name|createUserPom
parameter_list|(
name|ITestConfig
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|pom
decl_stmt|;
try|try
init|(
name|InputStream
name|pomTemplate
init|=
name|ArquillianPackager
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/application-pom.xml"
argument_list|)
init|)
block|{
name|pom
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|pomTemplate
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|resolvedProperties
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Pattern
name|propPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\$\\{[^}]*\\})"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|propPattern
operator|.
name|matcher
argument_list|(
name|pom
argument_list|)
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|property
init|=
name|m
operator|.
name|group
argument_list|()
decl_stmt|;
name|String
name|resolved
init|=
name|DependencyResolver
operator|.
name|resolveSpringBootParentProperty
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|resolvedProperties
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|property
range|:
name|resolvedProperties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|pom
operator|=
name|pom
operator|.
name|replace
argument_list|(
name|property
argument_list|,
name|resolvedProperties
operator|.
name|get
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pom
operator|=
name|pom
operator|.
name|replace
argument_list|(
literal|"#{module}"
argument_list|,
name|config
operator|.
name|getModuleName
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|config
operator|.
name|getModuleBasePath
argument_list|()
operator|+
literal|"/target/itest-spring-boot-pom.xml"
argument_list|)
decl_stmt|;
try|try
init|(
name|FileWriter
name|fw
init|=
operator|new
name|FileWriter
argument_list|(
name|pomFile
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|write
argument_list|(
name|pom
argument_list|,
name|fw
argument_list|)
expr_stmt|;
block|}
return|return
name|pomFile
return|;
block|}
DECL|method|createResolverPom (ITestConfig config, String dependencies)
specifier|private
specifier|static
name|File
name|createResolverPom
parameter_list|(
name|ITestConfig
name|config
parameter_list|,
name|String
name|dependencies
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|pom
decl_stmt|;
try|try
init|(
name|InputStream
name|pomTemplate
init|=
name|ArquillianPackager
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/dependency-resolver-pom.xml"
argument_list|)
init|)
block|{
name|pom
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|pomTemplate
argument_list|)
expr_stmt|;
block|}
name|pom
operator|=
name|pom
operator|.
name|replace
argument_list|(
literal|"<!-- DEPENDENCIES -->"
argument_list|,
name|dependencies
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|resolvedProperties
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Pattern
name|propPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\$\\{[^}]*\\})"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|propPattern
operator|.
name|matcher
argument_list|(
name|pom
argument_list|)
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|property
init|=
name|m
operator|.
name|group
argument_list|()
decl_stmt|;
name|String
name|resolved
init|=
name|DependencyResolver
operator|.
name|resolveParentProperty
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|resolvedProperties
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|property
range|:
name|resolvedProperties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|pom
operator|=
name|pom
operator|.
name|replace
argument_list|(
name|property
argument_list|,
name|resolvedProperties
operator|.
name|get
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|File
name|pomFile
init|=
operator|new
name|File
argument_list|(
name|config
operator|.
name|getModuleBasePath
argument_list|()
operator|+
literal|"/target/itest-spring-boot-dependency-resolver-pom.xml"
argument_list|)
decl_stmt|;
try|try
init|(
name|FileWriter
name|fw
init|=
operator|new
name|FileWriter
argument_list|(
name|pomFile
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|write
argument_list|(
name|pom
argument_list|,
name|fw
argument_list|)
expr_stmt|;
block|}
return|return
name|pomFile
return|;
block|}
DECL|method|resolver (ITestConfig config)
specifier|private
specifier|static
name|ConfigurableMavenResolverSystem
name|resolver
parameter_list|(
name|ITestConfig
name|config
parameter_list|)
block|{
return|return
name|Maven
operator|.
name|configureResolver
argument_list|()
operator|.
name|workOffline
argument_list|(
name|config
operator|.
name|getMavenOfflineResolution
argument_list|()
argument_list|)
return|;
block|}
DECL|method|copyResource (String folder, String fileNameRegex, String targetFolder)
specifier|public
specifier|static
name|void
name|copyResource
parameter_list|(
name|String
name|folder
parameter_list|,
name|String
name|fileNameRegex
parameter_list|,
name|String
name|targetFolder
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|fileNameRegex
argument_list|)
decl_stmt|;
name|File
name|sourceFolder
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|)
decl_stmt|;
name|File
index|[]
name|candidates
init|=
name|sourceFolder
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|pattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidates
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"No file matching regex "
operator|+
name|fileNameRegex
operator|+
literal|" has been found"
argument_list|)
expr_stmt|;
block|}
name|File
name|f
init|=
name|candidates
index|[
literal|0
index|]
decl_stmt|;
name|FileUtils
operator|.
name|copyFileToDirectory
argument_list|(
name|f
argument_list|,
operator|new
name|File
argument_list|(
name|targetFolder
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getExtensionClassloader ()
specifier|private
specifier|static
name|ClassLoader
name|getExtensionClassloader
parameter_list|()
block|{
name|ClassLoader
name|cl
init|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ClassLoader
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClassLoader
name|run
parameter_list|()
block|{
return|return
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|cl
operator|==
literal|null
condition|)
block|{
name|cl
operator|=
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
expr_stmt|;
block|}
return|return
name|cl
return|;
block|}
DECL|method|validTestDependency (ITestConfig config, MavenCoordinate coordinate)
specifier|private
specifier|static
name|boolean
name|validTestDependency
parameter_list|(
name|ITestConfig
name|config
parameter_list|,
name|MavenCoordinate
name|coordinate
parameter_list|)
block|{
name|Pattern
index|[]
name|patterns
init|=
operator|new
name|Pattern
index|[]
block|{
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^log4j$"
argument_list|)
block|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^log4j-slf4j-impl$"
argument_list|)
block|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^log4j-core$"
argument_list|)
block|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^slf4j-log4j12$"
argument_list|)
block|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^slf4j-simple$"
argument_list|)
block|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^slf4j-jdk14$"
argument_list|)
block|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^logback-classic$"
argument_list|)
block|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^logback-core$"
argument_list|)
block|}
decl_stmt|;
name|boolean
name|valid
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Pattern
name|p
range|:
name|patterns
control|)
block|{
if|if
condition|(
name|p
operator|.
name|matcher
argument_list|(
name|coordinate
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|valid
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|valid
operator|&&
name|config
operator|.
name|getMavenExclusions
argument_list|()
operator|.
name|contains
argument_list|(
name|coordinate
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|coordinate
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
name|valid
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|valid
condition|)
block|{
name|debug
argument_list|(
literal|"Discarded test dependency "
operator|+
name|coordinate
operator|.
name|toCanonicalForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|valid
return|;
block|}
DECL|method|excludeDependencyRegex (List<File> dependencies, String regex)
specifier|private
specifier|static
name|boolean
name|excludeDependencyRegex
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|dependencies
parameter_list|,
name|String
name|regex
parameter_list|)
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|File
argument_list|>
name|it
init|=
name|dependencies
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|f
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|matcher
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
break|break;
block|}
block|}
return|return
name|count
operator|>
literal|0
return|;
block|}
DECL|method|addDependencies (JavaArchive ark, Collection<File> deps)
specifier|private
specifier|static
name|JavaArchive
name|addDependencies
parameter_list|(
name|JavaArchive
name|ark
parameter_list|,
name|Collection
argument_list|<
name|File
argument_list|>
name|deps
parameter_list|)
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|dependencySet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|deps
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|d
range|:
name|dependencySet
control|)
block|{
name|debug
argument_list|(
literal|"Adding spring-boot dependency: "
operator|+
name|d
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ark
operator|=
name|ark
operator|.
name|add
argument_list|(
operator|new
name|FileAsset
argument_list|(
name|d
argument_list|)
argument_list|,
name|LIB_FOLDER
operator|+
literal|"/"
operator|+
name|d
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ark
return|;
block|}
DECL|method|addTestClasses (JavaArchive mainArk, Domain domain, ITestConfig config)
specifier|private
specifier|static
name|JavaArchive
name|addTestClasses
parameter_list|(
name|JavaArchive
name|mainArk
parameter_list|,
name|Domain
name|domain
parameter_list|,
name|ITestConfig
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|test
init|=
operator|new
name|File
argument_list|(
name|config
operator|.
name|getModuleBasePath
argument_list|()
operator|+
literal|"/target/test-classes/"
argument_list|)
decl_stmt|;
name|File
index|[]
name|fs
init|=
name|test
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
block|{
name|fs
operator|=
operator|new
name|File
index|[]
block|{}
expr_stmt|;
block|}
name|LinkedList
argument_list|<
name|File
argument_list|>
name|testFiles
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|testFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|File
name|f
init|=
name|testFiles
operator|.
name|pop
argument_list|()
decl_stmt|;
name|String
name|relative
init|=
name|test
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|relativize
argument_list|(
name|f
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
name|mainArk
operator|=
name|mainArk
operator|.
name|addAsResource
argument_list|(
name|f
argument_list|,
name|CLASSES_FOLDER
operator|+
literal|"/"
operator|+
name|relative
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|mainArk
operator|=
name|mainArk
operator|.
name|addAsDirectory
argument_list|(
name|CLASSES_FOLDER
operator|+
literal|"/"
operator|+
name|relative
argument_list|)
expr_stmt|;
name|File
index|[]
name|files
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|files
operator|=
operator|new
name|File
index|[]
block|{}
expr_stmt|;
block|}
name|testFiles
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mainArk
return|;
block|}
DECL|method|addSpringbootPackage (JavaArchive ark, String... packageNames)
specifier|private
specifier|static
name|JavaArchive
name|addSpringbootPackage
parameter_list|(
name|JavaArchive
name|ark
parameter_list|,
name|String
modifier|...
name|packageNames
parameter_list|)
throws|throws
name|Exception
block|{
name|Iterable
argument_list|<
name|ClassLoader
argument_list|>
name|classLoaders
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|packageName
range|:
name|packageNames
control|)
block|{
for|for
control|(
specifier|final
name|ClassLoader
name|classLoader
range|:
name|classLoaders
control|)
block|{
specifier|final
name|URLPackageScanner
operator|.
name|Callback
name|callback
init|=
operator|new
name|URLPackageScanner
operator|.
name|Callback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|classFound
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|ArchivePath
name|classNamePath
init|=
name|AssetUtil
operator|.
name|getFullPathForClassResource
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|Asset
name|asset
init|=
operator|new
name|ClassLoaderAsset
argument_list|(
name|classNamePath
operator|.
name|get
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
name|classLoader
argument_list|)
decl_stmt|;
name|ArchivePath
name|location
init|=
operator|new
name|BasicPath
argument_list|(
name|CLASSES_FOLDER
operator|+
literal|"/"
argument_list|,
name|classNamePath
argument_list|)
decl_stmt|;
name|ark
operator|.
name|add
argument_list|(
name|asset
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|URLPackageScanner
name|scanner
init|=
name|URLPackageScanner
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|,
name|classLoader
argument_list|,
name|callback
argument_list|,
name|packageName
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|scanPackage
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ark
return|;
block|}
DECL|method|debug (String str)
specifier|private
specifier|static
name|void
name|debug
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|DEBUG_ENABLED
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DEBUG>>> "
operator|+
name|str
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

