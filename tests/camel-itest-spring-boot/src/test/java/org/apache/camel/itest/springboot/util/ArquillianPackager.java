begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.springboot.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|ITestConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|springboot
operator|.
name|arquillian
operator|.
name|SpringBootZipExporterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|arquillian
operator|.
name|container
operator|.
name|se
operator|.
name|api
operator|.
name|ClassPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|Archive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|ConfigurationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|Domain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|ExtensionLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|ShrinkWrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|asset
operator|.
name|FileAsset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|exporter
operator|.
name|ZipExporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|api
operator|.
name|spec
operator|.
name|JavaArchive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|impl
operator|.
name|base
operator|.
name|ServiceExtensionLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|Maven
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|MavenResolvedArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|PackagingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|ScopeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|coordinate
operator|.
name|MavenCoordinate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|coordinate
operator|.
name|MavenCoordinates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|coordinate
operator|.
name|MavenDependencies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|coordinate
operator|.
name|MavenDependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|shrinkwrap
operator|.
name|resolver
operator|.
name|api
operator|.
name|maven
operator|.
name|coordinate
operator|.
name|MavenDependencyExclusion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Packages a module in a spring-boot compatible nested-jar structure.  */
end_comment

begin_class
DECL|class|ArquillianPackager
specifier|public
specifier|final
class|class
name|ArquillianPackager
block|{
comment|/**      * A flag to enable system-out logging.      * Cannot use logging libraries here.      */
DECL|field|DEBUG_ENABLED
specifier|private
specifier|static
specifier|final
name|boolean
name|DEBUG_ENABLED
init|=
literal|false
decl_stmt|;
DECL|method|ArquillianPackager ()
specifier|private
name|ArquillianPackager
parameter_list|()
block|{     }
DECL|method|springBootPackage (ITestConfig config)
specifier|public
specifier|static
name|Archive
argument_list|<
name|?
argument_list|>
name|springBootPackage
parameter_list|(
name|ITestConfig
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|ExtensionLoader
name|extensionLoader
init|=
operator|new
name|ServiceExtensionLoader
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|getExtensionClassloader
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|extensionLoader
operator|.
name|addOverride
argument_list|(
name|ZipExporter
operator|.
name|class
argument_list|,
name|SpringBootZipExporterImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|ConfigurationBuilder
name|builder
init|=
operator|new
name|ConfigurationBuilder
argument_list|()
operator|.
name|extensionLoader
argument_list|(
name|extensionLoader
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Domain
name|domain
init|=
name|ShrinkWrap
operator|.
name|createDomain
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|JavaArchive
name|ark
init|=
name|domain
operator|.
name|getArchiveFactory
argument_list|()
operator|.
name|create
argument_list|(
name|JavaArchive
operator|.
name|class
argument_list|,
literal|"test.jar"
argument_list|)
decl_stmt|;
name|ark
operator|=
name|ark
operator|.
name|addAsManifestResource
argument_list|(
literal|"BOOT-MANIFEST.MF"
argument_list|,
literal|"MANIFEST.MF"
argument_list|)
expr_stmt|;
name|ark
operator|=
name|ark
operator|.
name|addAsResource
argument_list|(
literal|"spring-boot-itest.properties"
argument_list|)
expr_stmt|;
name|ark
operator|=
name|ark
operator|.
name|addAsDirectories
argument_list|(
literal|"/lib"
argument_list|)
expr_stmt|;
name|String
name|version
init|=
name|config
operator|.
name|getMavenVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
comment|// It is missing when launching from IDE
name|List
argument_list|<
name|MavenResolvedArtifact
argument_list|>
name|resolved
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Maven
operator|.
name|resolver
argument_list|()
operator|.
name|loadPomFromFile
argument_list|(
literal|"pom.xml"
argument_list|)
operator|.
name|importRuntimeDependencies
argument_list|()
operator|.
name|resolve
argument_list|()
operator|.
name|withTransitivity
argument_list|()
operator|.
name|asResolvedArtifact
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|MavenResolvedArtifact
argument_list|>
name|camelDep
init|=
name|resolved
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|dep
lambda|->
name|dep
operator|.
name|getCoordinate
argument_list|()
operator|.
name|getGroupId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"org.apache.camel"
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
decl_stmt|;
name|version
operator|=
name|camelDep
operator|.
name|map
argument_list|(
name|art
lambda|->
name|art
operator|.
name|getCoordinate
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"Resolved version: "
operator|+
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot determine the current version of the camel component"
argument_list|)
throw|;
block|}
block|}
comment|// Test dependencies
name|List
argument_list|<
name|MavenDependency
argument_list|>
name|testDependencies
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getIncludeTestDependencies
argument_list|()
operator|||
name|config
operator|.
name|getUnitTestEnabled
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|MavenResolvedArtifact
argument_list|>
name|testArtifacts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Maven
operator|.
name|resolver
argument_list|()
operator|.
name|loadPomFromFile
argument_list|(
name|config
operator|.
name|getModulesPath
argument_list|()
operator|+
name|config
operator|.
name|getModuleName
argument_list|()
operator|+
literal|"/pom.xml"
argument_list|)
operator|.
name|importTestDependencies
argument_list|()
operator|.
name|resolve
argument_list|()
operator|.
name|withoutTransitivity
argument_list|()
operator|.
name|asResolvedArtifact
argument_list|()
argument_list|)
decl_stmt|;
name|MavenDependencyExclusion
index|[]
name|excl
init|=
operator|new
name|MavenDependencyExclusion
index|[]
block|{
name|MavenDependencies
operator|.
name|createExclusion
argument_list|(
literal|"org.slf4j"
argument_list|,
literal|"slf4j-log4j12"
argument_list|)
block|,
name|MavenDependencies
operator|.
name|createExclusion
argument_list|(
literal|"log4j"
argument_list|,
literal|"log4j"
argument_list|)
block|}
decl_stmt|;
name|testDependencies
operator|=
name|testArtifacts
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|MavenResolvedArtifact
operator|::
name|getCoordinate
argument_list|)
operator|.
name|filter
argument_list|(
name|ArquillianPackager
operator|::
name|validTestDependency
argument_list|)
comment|// remove direct logging dependencies from test libs
operator|.
name|map
argument_list|(
name|c
lambda|->
name|MavenDependencies
operator|.
name|createDependency
argument_list|(
name|c
argument_list|,
name|ScopeType
operator|.
name|RUNTIME
argument_list|,
literal|false
argument_list|,
name|excl
argument_list|)
argument_list|)
comment|// remove transitive logging dependencies from test libs
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MavenCoordinate
name|jar
init|=
name|MavenCoordinates
operator|.
name|createCoordinate
argument_list|(
name|config
operator|.
name|getMavenGroup
argument_list|()
argument_list|,
name|config
operator|.
name|getModuleName
argument_list|()
argument_list|,
name|version
argument_list|,
name|PackagingType
operator|.
name|JAR
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MavenDependency
name|dep
init|=
name|MavenDependencies
operator|.
name|createDependency
argument_list|(
name|jar
argument_list|,
name|ScopeType
operator|.
name|COMPILE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|dependencies
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|dependencies
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Maven
operator|.
name|resolver
argument_list|()
operator|.
name|loadPomFromFile
argument_list|(
literal|"pom.xml"
argument_list|)
operator|.
name|importRuntimeDependencies
argument_list|()
operator|.
name|addDependencies
argument_list|(
name|dep
argument_list|)
operator|.
name|addDependencies
argument_list|(
name|testDependencies
argument_list|)
operator|.
name|resolve
argument_list|()
operator|.
name|withTransitivity
argument_list|()
operator|.
name|asFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// The spring boot-loader dependency will be added to the main jar, so it should be excluded from the embedded ones
name|excludeDependencyRegex
argument_list|(
name|dependencies
argument_list|,
literal|"^spring-boot-loader-[0-9].*"
argument_list|)
expr_stmt|;
comment|// Add all dependencies as spring-boot nested jars
name|ark
operator|=
name|addDependencies
argument_list|(
name|ark
argument_list|,
name|dependencies
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getUnitTestEnabled
argument_list|()
condition|)
block|{
comment|// Add unit test classes of the module under test
name|ark
operator|=
name|addTestResources
argument_list|(
name|ark
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
comment|// Add common packages to main jar
name|ark
operator|=
name|ark
operator|.
name|addPackages
argument_list|(
literal|true
argument_list|,
literal|"org.apache.camel.itest.springboot"
argument_list|)
expr_stmt|;
name|ark
operator|=
name|ark
operator|.
name|addPackages
argument_list|(
literal|true
argument_list|,
literal|"org.springframework.boot.loader"
argument_list|)
expr_stmt|;
name|ark
operator|=
name|ark
operator|.
name|addPackages
argument_list|(
literal|true
argument_list|,
literal|"org.jboss.shrinkwrap"
argument_list|)
expr_stmt|;
return|return
name|ClassPath
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|ark
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|copyResource (String folder, String fileNameRegex, String targetFolder)
specifier|public
specifier|static
name|void
name|copyResource
parameter_list|(
name|String
name|folder
parameter_list|,
name|String
name|fileNameRegex
parameter_list|,
name|String
name|targetFolder
parameter_list|)
throws|throws
name|IOException
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|fileNameRegex
argument_list|)
decl_stmt|;
name|File
name|sourceFolder
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|)
decl_stmt|;
name|File
index|[]
name|candidates
init|=
name|sourceFolder
operator|.
name|listFiles
argument_list|(
parameter_list|(
name|dir
parameter_list|,
name|name
parameter_list|)
lambda|->
name|pattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidates
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"No file matching regex "
operator|+
name|fileNameRegex
operator|+
literal|" has been found"
argument_list|)
expr_stmt|;
block|}
name|File
name|f
init|=
name|candidates
index|[
literal|0
index|]
decl_stmt|;
name|FileUtils
operator|.
name|copyFileToDirectory
argument_list|(
name|f
argument_list|,
operator|new
name|File
argument_list|(
name|targetFolder
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getExtensionClassloader ()
specifier|private
specifier|static
name|ClassLoader
name|getExtensionClassloader
parameter_list|()
block|{
name|ClassLoader
name|cl
init|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
call|(
name|PrivilegedAction
argument_list|<
name|ClassLoader
argument_list|>
call|)
argument_list|()
operator|->
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cl
operator|==
literal|null
condition|)
block|{
name|cl
operator|=
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
expr_stmt|;
block|}
return|return
name|cl
return|;
block|}
DECL|method|validTestDependency (MavenCoordinate coordinate)
specifier|private
specifier|static
name|boolean
name|validTestDependency
parameter_list|(
name|MavenCoordinate
name|coordinate
parameter_list|)
block|{
name|Pattern
name|log4j
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^log4j$"
argument_list|)
decl_stmt|;
name|Pattern
name|slf4jLog4j
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^slf4j-log4j12$"
argument_list|)
decl_stmt|;
name|boolean
name|valid
init|=
operator|!
name|log4j
operator|.
name|matcher
argument_list|(
name|coordinate
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
operator|&&
operator|!
name|slf4jLog4j
operator|.
name|matcher
argument_list|(
name|coordinate
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|valid
condition|)
block|{
name|debug
argument_list|(
literal|"Discarded test dependency "
operator|+
name|coordinate
operator|.
name|toCanonicalForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|valid
return|;
block|}
DECL|method|excludeDependencyRegex (List<File> dependencies, String regex)
specifier|private
specifier|static
name|void
name|excludeDependencyRegex
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|dependencies
parameter_list|,
name|String
name|regex
parameter_list|)
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|File
argument_list|>
name|it
init|=
name|dependencies
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|f
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|matcher
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|addDependencies (JavaArchive ark, Collection<File> deps)
specifier|private
specifier|static
name|JavaArchive
name|addDependencies
parameter_list|(
name|JavaArchive
name|ark
parameter_list|,
name|Collection
argument_list|<
name|File
argument_list|>
name|deps
parameter_list|)
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|dependencySet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|deps
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|d
range|:
name|dependencySet
control|)
block|{
name|debug
argument_list|(
literal|"Adding spring-boot dependency: "
operator|+
name|d
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ark
operator|=
name|ark
operator|.
name|add
argument_list|(
operator|new
name|FileAsset
argument_list|(
name|d
argument_list|)
argument_list|,
literal|"/lib/"
operator|+
name|d
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ark
return|;
block|}
DECL|method|addTestResources (JavaArchive ark, ITestConfig config)
specifier|private
specifier|static
name|JavaArchive
name|addTestResources
parameter_list|(
name|JavaArchive
name|ark
parameter_list|,
name|ITestConfig
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|test
init|=
operator|new
name|File
argument_list|(
name|config
operator|.
name|getModulesPath
argument_list|()
operator|+
name|config
operator|.
name|getModuleName
argument_list|()
operator|+
literal|"/target/test-classes/"
argument_list|)
decl_stmt|;
name|File
index|[]
name|fs
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|test
operator|.
name|listFiles
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
operator|new
name|File
index|[]
block|{}
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|File
argument_list|>
name|testFiles
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|testFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|File
name|f
init|=
name|testFiles
operator|.
name|pop
argument_list|()
decl_stmt|;
name|String
name|relative
init|=
name|test
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|relativize
argument_list|(
name|f
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|ark
operator|=
name|ark
operator|.
name|addAsResource
argument_list|(
name|f
argument_list|,
name|relative
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ark
operator|=
name|ark
operator|.
name|addAsDirectory
argument_list|(
name|relative
argument_list|)
expr_stmt|;
name|File
index|[]
name|files
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|f
operator|.
name|listFiles
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
operator|new
name|File
index|[]
block|{}
argument_list|)
decl_stmt|;
name|testFiles
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ark
return|;
block|}
DECL|method|debug (String str)
specifier|private
specifier|static
name|void
name|debug
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|DEBUG_ENABLED
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DEBUG>>> "
operator|+
name|str
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

