begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.jetty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  * An<code>HttpClient</code> is an example on how one would connect to an  * HTTP endpoint. To use this<code>HttpClient</code>, you must:  *<ol>  *<li> specify the URL of the location URI of the HTTP endpoint you wish to  * connect to, and</li>  *<li> specify the xml file name in your classpath that you wish to send to the  * endpoint</li>  *</ol>  */
end_comment

begin_class
DECL|class|HttpClient
specifier|public
class|class
name|HttpClient
block|{
DECL|field|httpEndpoint
specifier|private
specifier|static
name|String
name|httpEndpoint
init|=
literal|"http://localhost:8192/test"
decl_stmt|;
DECL|method|send (String content)
specifier|public
specifier|static
name|String
name|send
parameter_list|(
name|String
name|content
parameter_list|)
throws|throws
name|Exception
throws|,
name|IOException
block|{
return|return
name|send
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|send (InputStream inputStream)
specifier|public
specifier|static
name|String
name|send
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|Exception
throws|,
name|IOException
block|{
name|HttpURLConnection
name|connection
init|=
name|getHttpConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OutputStream
name|sender
init|=
name|connection
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|inBuffer
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
for|for
control|(
name|int
name|numBytesRead
init|=
name|inputStream
operator|.
name|read
argument_list|(
name|inBuffer
argument_list|)
init|;
name|numBytesRead
operator|!=
operator|-
literal|1
condition|;
name|numBytesRead
operator|=
name|inputStream
operator|.
name|read
argument_list|(
name|inBuffer
argument_list|)
control|)
block|{
name|sender
operator|.
name|write
argument_list|(
name|inBuffer
argument_list|,
literal|0
argument_list|,
name|numBytesRead
argument_list|)
expr_stmt|;
block|}
name|sender
operator|.
name|close
argument_list|()
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|/*System.out.println("HTTP response code is: "                  + connection.getResponseCode() + ". The status message is: "                  + connection.getResponseMessage());*/
comment|// Read the response.
name|InputStreamReader
name|responseInputStream
init|=
operator|new
name|InputStreamReader
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|BufferedReader
name|receiver
init|=
operator|new
name|BufferedReader
argument_list|(
name|responseInputStream
argument_list|)
decl_stmt|;
name|String
name|response
init|=
literal|""
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|receiver
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|response
operator|+=
name|line
expr_stmt|;
block|}
name|response
operator|=
name|response
operator|.
name|replace
argument_list|(
literal|"&lt;"
argument_list|,
literal|"<"
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|method|getHttpConnection ()
specifier|private
specifier|static
name|HttpURLConnection
name|getHttpConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
operator|new
name|URL
argument_list|(
name|httpEndpoint
argument_list|)
operator|.
name|openConnection
argument_list|()
decl_stmt|;
return|return
name|connection
return|;
block|}
DECL|method|setHttpEndpoint (String endpointURI)
specifier|public
name|void
name|setHttpEndpoint
parameter_list|(
name|String
name|endpointURI
parameter_list|)
block|{
name|httpEndpoint
operator|=
name|endpointURI
expr_stmt|;
block|}
block|}
end_class

end_unit

