begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.ftp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|ftp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|net
operator|.
name|ftp
operator|.
name|FTPClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockftpserver
operator|.
name|fake
operator|.
name|FakeFtpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|FtpInitialConnectTimeoutTest
specifier|public
class|class
name|FtpInitialConnectTimeoutTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|CONNECT_TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|CONNECT_TIMEOUT
init|=
literal|11223
decl_stmt|;
comment|/**      * Create the answer for the socket factory that causes a SocketTimeoutException to occur in connect.      */
DECL|class|SocketAnswer
specifier|private
specifier|static
class|class
name|SocketAnswer
implements|implements
name|Answer
argument_list|<
name|Socket
argument_list|>
block|{
annotation|@
name|Override
DECL|method|answer (InvocationOnMock invocation)
specifier|public
name|Socket
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
specifier|final
name|Socket
name|socket
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|Socket
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|timeout
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
try|try
block|{
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|InputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InputStream
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
specifier|final
name|InputStream
name|stream
init|=
operator|(
name|InputStream
operator|)
name|invocation
operator|.
name|callRealMethod
argument_list|()
decl_stmt|;
name|InputStream
name|inputStream
init|=
operator|new
name|InputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|timeout
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// emulate a timeout occurring in _getReply()
throw|throw
operator|new
name|SocketTimeoutException
argument_list|()
throw|;
block|}
return|return
name|stream
operator|.
name|read
argument_list|()
return|;
block|}
block|}
decl_stmt|;
return|return
name|inputStream
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|socket
argument_list|)
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{             }
try|try
block|{
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
operator|(
name|Integer
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
operator|==
name|CONNECT_TIMEOUT
condition|)
block|{
comment|// setting of connect timeout
name|timeout
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// non-connect timeout
name|timeout
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|invocation
operator|.
name|callRealMethod
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|socket
argument_list|)
operator|.
name|setSoTimeout
argument_list|(
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|socket
return|;
block|}
block|}
DECL|field|fakeFtpServer
specifier|private
name|FakeFtpServer
name|fakeFtpServer
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeFtpServer
operator|=
operator|new
name|FakeFtpServer
argument_list|()
expr_stmt|;
name|fakeFtpServer
operator|.
name|setServerControlPort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fakeFtpServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|fakeFtpServer
operator|!=
literal|null
condition|)
block|{
name|fakeFtpServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|mockedClient ()
specifier|private
name|FTPClient
name|mockedClient
parameter_list|()
throws|throws
name|IOException
block|{
name|FTPClient
name|client
init|=
operator|new
name|FTPClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|setSocketFactory
argument_list|(
name|createSocketFactory
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
DECL|method|createSocketFactory ()
specifier|private
name|SocketFactory
name|createSocketFactory
parameter_list|()
throws|throws
name|IOException
block|{
name|SocketFactory
name|socketFactory
init|=
name|mock
argument_list|(
name|SocketFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|socketFactory
operator|.
name|createSocket
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|SocketAnswer
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|socketFactory
return|;
block|}
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|registry
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"mocked"
argument_list|,
name|mockedClient
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|registry
return|;
block|}
annotation|@
name|Test
DECL|method|testReConnect ()
specifier|public
name|void
name|testReConnect
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we should fail, but we are testing that we are not in a deadlock which could potentially happen
name|getMockEndpoint
argument_list|(
literal|"mock:done"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:dead"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|errorHandler
argument_list|(
name|deadLetterChannel
argument_list|(
literal|"mock:dead"
argument_list|)
argument_list|)
expr_stmt|;
comment|// using soTimeout=0 could potentially cause the ftp producer to dead-lock doing endless reconnection attempts
comment|// this is a test to ensure we have fixed that
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"ftp://localhost:"
operator|+
name|fakeFtpServer
operator|.
name|getServerControlPort
argument_list|()
operator|+
literal|"?ftpClient=#mocked"
operator|+
literal|"&soTimeout=0&"
operator|+
literal|"connectTimeout="
operator|+
name|CONNECT_TIMEOUT
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:done"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

