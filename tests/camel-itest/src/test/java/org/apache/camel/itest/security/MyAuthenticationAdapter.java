begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.security
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|security
operator|.
name|DefaultAuthenticationAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|authentication
operator|.
name|UsernamePasswordAuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|core
operator|.
name|Authentication
import|;
end_import

begin_class
DECL|class|MyAuthenticationAdapter
specifier|public
class|class
name|MyAuthenticationAdapter
extends|extends
name|DefaultAuthenticationAdapter
block|{
annotation|@
name|Override
DECL|method|convertToAuthentication (Subject subject)
specifier|protected
name|Authentication
name|convertToAuthentication
parameter_list|(
name|Subject
name|subject
parameter_list|)
block|{
name|Authentication
name|answer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Principal
name|principal
range|:
name|subject
operator|.
name|getPrincipals
argument_list|()
control|)
block|{
if|if
condition|(
name|principal
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"UsernameToken"
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|UsernamePasswordAuthenticationToken
argument_list|(
name|getName
argument_list|(
name|principal
argument_list|)
argument_list|,
name|getPassword
argument_list|(
name|principal
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|getName (Principal p)
specifier|private
name|String
name|getName
parameter_list|(
name|Principal
name|p
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|String
operator|)
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getName"
argument_list|)
operator|.
name|invoke
argument_list|(
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getPassword (Principal p)
specifier|private
name|String
name|getPassword
parameter_list|(
name|Principal
name|p
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|String
operator|)
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getPassword"
argument_list|)
operator|.
name|invoke
argument_list|(
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

