begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.sql
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|NotifyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|IdempotentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
operator|.
name|CamelSpringTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|JdbcTemplate
import|;
end_import

begin_comment
comment|/**  * Jms with JDBC idempotent consumer test.  */
end_comment

begin_class
DECL|class|FromJmsToJdbcIdempotentConsumerToJmsTest
specifier|public
class|class
name|FromJmsToJdbcIdempotentConsumerToJmsTest
extends|extends
name|CamelSpringTestSupport
block|{
DECL|field|jdbcTemplate
specifier|protected
name|JdbcTemplate
name|jdbcTemplate
decl_stmt|;
DECL|field|dataSource
specifier|protected
name|DataSource
name|dataSource
decl_stmt|;
annotation|@
name|Override
DECL|method|createApplicationContext ()
specifier|protected
name|AbstractApplicationContext
name|createApplicationContext
parameter_list|()
block|{
return|return
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/itest/sql/FromJmsToJdbcIdempotentConsumerToJmsTest.xml"
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|dataSource
operator|=
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByNameAndType
argument_list|(
name|getDatasourceName
argument_list|()
argument_list|,
name|DataSource
operator|.
name|class
argument_list|)
expr_stmt|;
name|jdbcTemplate
operator|=
operator|new
name|JdbcTemplate
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|jdbcTemplate
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
block|}
DECL|method|getDatasourceName ()
specifier|protected
name|String
name|getDatasourceName
parameter_list|()
block|{
return|return
literal|"myNonXADataSource"
return|;
block|}
annotation|@
name|Test
DECL|method|testJmsToJdbcJmsCommit ()
specifier|public
name|void
name|testJmsToJdbcJmsCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|checkInitialState
argument_list|()
expr_stmt|;
comment|// use a notify to know when the message is done
name|NotifyBuilder
name|notify
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|1
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// use mock during testing as well
name|getMockEndpoint
argument_list|(
literal|"mock:a"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:b"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:inbox"
argument_list|,
literal|"A"
argument_list|,
literal|"uid"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
comment|// assert mock and wait for the message to be done
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should complete 1 message"
argument_list|,
name|notify
operator|.
name|matchesMockWaitTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that there is a message in the database and JMS queue
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|,
name|jdbcTemplate
operator|.
name|queryForObject
argument_list|(
literal|"select count(*) from CAMEL_MESSAGEPROCESSED"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|out
init|=
name|consumer
operator|.
name|receiveBody
argument_list|(
literal|"activemq:queue:outbox"
argument_list|,
literal|3000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"DONE-A"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJmsToJdbcJmsRollbackAtA ()
specifier|public
name|void
name|testJmsToJdbcJmsRollbackAtA
parameter_list|()
throws|throws
name|Exception
block|{
name|checkInitialState
argument_list|()
expr_stmt|;
comment|// use a notify to know that after 1+6 (1 original + 6 redelivery) attempts from AcitveMQ
name|NotifyBuilder
name|notify
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|7
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:a"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|7
argument_list|)
expr_stmt|;
comment|// force exception to occur at mock a
name|getMockEndpoint
argument_list|(
literal|"mock:a"
argument_list|)
operator|.
name|whenAnyExchangeReceived
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|ConnectException
argument_list|(
literal|"Forced cannot connect to database"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:b"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:inbox"
argument_list|,
literal|"A"
argument_list|,
literal|"uid"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
comment|// assert mock and wait for the message to be done
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should complete 7 message"
argument_list|,
name|notify
operator|.
name|matchesMockWaitTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that there is a message in the database and JMS queue
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|,
name|jdbcTemplate
operator|.
name|queryForObject
argument_list|(
literal|"select count(*) from CAMEL_MESSAGEPROCESSED"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|consumer
operator|.
name|receiveBody
argument_list|(
literal|"activemq:queue:outbox"
argument_list|,
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
comment|// the message should have been moved to the AMQ DLQ queue
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|consumer
operator|.
name|receiveBody
argument_list|(
literal|"activemq:queue:ActiveMQ.DLQ"
argument_list|,
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJmsToJdbcJmsRollbackAtB ()
specifier|public
name|void
name|testJmsToJdbcJmsRollbackAtB
parameter_list|()
throws|throws
name|Exception
block|{
name|checkInitialState
argument_list|()
expr_stmt|;
comment|// use a notify to know that after 1+6 (1 original + 6 redelivery) attempts from AcitveMQ
name|NotifyBuilder
name|notify
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|7
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:a"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:b"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|7
argument_list|)
expr_stmt|;
comment|// force exception to occur at mock b
name|getMockEndpoint
argument_list|(
literal|"mock:b"
argument_list|)
operator|.
name|whenAnyExchangeReceived
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|ConnectException
argument_list|(
literal|"Forced cannot send to AMQ queue"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:inbox"
argument_list|,
literal|"B"
argument_list|,
literal|"uid"
argument_list|,
literal|456
argument_list|)
expr_stmt|;
comment|// assert mock and wait for the message to be done
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should complete 7 messages"
argument_list|,
name|notify
operator|.
name|matchesMockWaitTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that there is a message in the database and JMS queue
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|,
name|jdbcTemplate
operator|.
name|queryForObject
argument_list|(
literal|"select count(*) from CAMEL_MESSAGEPROCESSED"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|consumer
operator|.
name|receiveBody
argument_list|(
literal|"activemq:queue:outbox"
argument_list|,
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
comment|// the message should have been moved to the AMQ DLQ queue
name|assertEquals
argument_list|(
literal|"B"
argument_list|,
name|consumer
operator|.
name|receiveBody
argument_list|(
literal|"activemq:queue:ActiveMQ.DLQ"
argument_list|,
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilterIdempotent ()
specifier|public
name|void
name|testFilterIdempotent
parameter_list|()
throws|throws
name|Exception
block|{
name|checkInitialState
argument_list|()
expr_stmt|;
comment|// use a notify to know when the message is done
name|NotifyBuilder
name|notify
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|3
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// use mock during testing as well
name|getMockEndpoint
argument_list|(
literal|"mock:a"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// there should be 1 duplicate
name|getMockEndpoint
argument_list|(
literal|"mock:b"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:inbox"
argument_list|,
literal|"D"
argument_list|,
literal|"uid"
argument_list|,
literal|111
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:inbox"
argument_list|,
literal|"E"
argument_list|,
literal|"uid"
argument_list|,
literal|222
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:inbox"
argument_list|,
literal|"D"
argument_list|,
literal|"uid"
argument_list|,
literal|111
argument_list|)
expr_stmt|;
comment|// assert mock and wait for the message to be done
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should complete 3 messages"
argument_list|,
name|notify
operator|.
name|matchesMockWaitTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that there is two messages in the database and JMS queue
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|2
argument_list|)
argument_list|,
name|jdbcTemplate
operator|.
name|queryForObject
argument_list|(
literal|"select count(*) from CAMEL_MESSAGEPROCESSED"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DONE-D"
argument_list|,
name|consumer
operator|.
name|receiveBody
argument_list|(
literal|"activemq:queue:outbox"
argument_list|,
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DONE-E"
argument_list|,
name|consumer
operator|.
name|receiveBody
argument_list|(
literal|"activemq:queue:outbox"
argument_list|,
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRetryAfterException ()
specifier|public
name|void
name|testRetryAfterException
parameter_list|()
throws|throws
name|Exception
block|{
name|checkInitialState
argument_list|()
expr_stmt|;
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|// use a notify to know when the message is done
name|NotifyBuilder
name|notify
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|4
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// use mock during testing as well
name|getMockEndpoint
argument_list|(
literal|"mock:a"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// there should be 1 duplicate
name|getMockEndpoint
argument_list|(
literal|"mock:b"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:b"
argument_list|)
operator|.
name|whenAnyExchangeReceived
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|counter
operator|.
name|getAndIncrement
argument_list|()
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|ConnectException
argument_list|(
literal|"Forced cannot send to AMQ queue"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:inbox"
argument_list|,
literal|"D"
argument_list|,
literal|"uid"
argument_list|,
literal|111
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:inbox"
argument_list|,
literal|"E"
argument_list|,
literal|"uid"
argument_list|,
literal|222
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:inbox"
argument_list|,
literal|"F"
argument_list|,
literal|"uid"
argument_list|,
literal|333
argument_list|)
expr_stmt|;
comment|// assert mock and wait for the message to be done
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should complete 4 messages"
argument_list|,
name|notify
operator|.
name|matchesMockWaitTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that there is two messages in the database and JMS queue
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|3
argument_list|)
argument_list|,
name|jdbcTemplate
operator|.
name|queryForObject
argument_list|(
literal|"select count(*) from CAMEL_MESSAGEPROCESSED"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DONE-D"
argument_list|,
name|consumer
operator|.
name|receiveBody
argument_list|(
literal|"activemq:queue:outbox"
argument_list|,
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DONE-E"
argument_list|,
name|consumer
operator|.
name|receiveBody
argument_list|(
literal|"activemq:queue:outbox"
argument_list|,
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DONE-F"
argument_list|,
name|consumer
operator|.
name|receiveBody
argument_list|(
literal|"activemq:queue:outbox"
argument_list|,
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkInitialState ()
specifier|protected
name|void
name|checkInitialState
parameter_list|()
block|{
comment|// check there are no messages in the database and JMS queue
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|,
name|jdbcTemplate
operator|.
name|queryForObject
argument_list|(
literal|"select count(*) from CAMEL_MESSAGEPROCESSED"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|consumer
operator|.
name|receiveBody
argument_list|(
literal|"activemq:queue:outbox"
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|IdempotentRepository
argument_list|<
name|?
argument_list|>
name|repository
init|=
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByNameAndType
argument_list|(
literal|"messageIdRepository"
argument_list|,
name|IdempotentRepository
operator|.
name|class
argument_list|)
decl_stmt|;
name|from
argument_list|(
literal|"activemq:queue:inbox"
argument_list|)
operator|.
name|transacted
argument_list|(
literal|"required"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:a"
argument_list|)
operator|.
name|idempotentConsumer
argument_list|(
name|header
argument_list|(
literal|"uid"
argument_list|)
argument_list|,
name|repository
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:b"
argument_list|)
operator|.
name|transform
argument_list|(
name|simple
argument_list|(
literal|"DONE-${body}"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"activemq:queue:outbox"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

