begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.security
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|WSS4JOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|UsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|AbstractJUnit4SpringContextTests
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
annotation|@
name|ContextConfiguration
argument_list|(
name|locations
operator|=
block|{
literal|"camel-context.xml"
block|}
argument_list|)
DECL|class|GreeterClientTest
specifier|public
class|class
name|GreeterClientTest
extends|extends
name|AbstractJUnit4SpringContextTests
block|{
DECL|field|WSDL_LOC
specifier|private
specifier|static
specifier|final
name|java
operator|.
name|net
operator|.
name|URL
name|WSDL_LOC
decl_stmt|;
static|static
block|{
name|java
operator|.
name|net
operator|.
name|URL
name|tmp
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tmp
operator|=
name|GreeterClientTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"wsdl/hello_world.wsdl"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|WSDL_LOC
operator|=
name|tmp
expr_stmt|;
block|}
DECL|field|SERVICE_QNAME
specifier|private
specifier|static
specifier|final
name|QName
name|SERVICE_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SOAPService"
argument_list|)
decl_stmt|;
DECL|field|PORT_QNAME
specifier|private
specifier|static
specifier|final
name|QName
name|PORT_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SoapOverHttp"
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
DECL|field|camelContext
specifier|protected
name|CamelContext
name|camelContext
decl_stmt|;
DECL|method|sendMessageWithUsernameToken (String username, String password, String message)
specifier|protected
name|String
name|sendMessageWithUsernameToken
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
name|svc
init|=
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
operator|.
name|create
argument_list|(
name|WSDL_LOC
argument_list|,
name|SERVICE_QNAME
argument_list|)
decl_stmt|;
specifier|final
name|Greeter
name|greeter
init|=
name|svc
operator|.
name|getPort
argument_list|(
name|PORT_QNAME
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|Client
name|client
init|=
name|ClientProxy
operator|.
name|getClient
argument_list|(
name|greeter
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"action"
argument_list|,
literal|"UsernameToken"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
name|username
argument_list|)
expr_stmt|;
comment|// Set the the password type to be plain text,
comment|// so we can keep using the password to authenticate with spring security
name|props
operator|.
name|put
argument_list|(
name|UsernameToken
operator|.
name|PASSWORD_TYPE
argument_list|,
name|WSConstants
operator|.
name|PW_TEXT
argument_list|)
expr_stmt|;
name|WSS4JOutInterceptor
name|wss4jOut
init|=
operator|new
name|WSS4JOutInterceptor
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|client
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|wss4jOut
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BindingProvider
operator|)
name|greeter
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|greeter
operator|.
name|greetMe
argument_list|(
name|message
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testServiceWithValidateUser ()
specifier|public
name|void
name|testServiceWithValidateUser
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|response
init|=
name|sendMessageWithUsernameToken
argument_list|(
literal|"jim"
argument_list|,
literal|"jimspassword"
argument_list|,
literal|"CXF"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|" Hello CXF"
argument_list|,
name|response
argument_list|)
expr_stmt|;
try|try
block|{
name|sendMessageWithUsernameToken
argument_list|(
literal|"jim"
argument_list|,
literal|"foo"
argument_list|,
literal|"CXF"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Get a wrong type exception."
argument_list|,
name|ex
operator|instanceof
name|SOAPFaultException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Get a wrong exception message"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"The security token could not be authenticated or authorized"
argument_list|)
argument_list|)
expr_stmt|;
comment|// CXF 2.4.0 WSecurity doesn't put the authentication exception
comment|//assertTrue("Get a wrong exception message", ex.getMessage().endsWith("java.io.IOException: Wrong password!"));
block|}
block|}
annotation|@
name|Test
DECL|method|testServiceWithNotAuthorizedUser ()
specifier|public
name|void
name|testServiceWithNotAuthorizedUser
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// this user doesn't have the right to access the processor
name|sendMessageWithUsernameToken
argument_list|(
literal|"bob"
argument_list|,
literal|"bobspassword"
argument_list|,
literal|"CXF"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Get a wrong type exception."
argument_list|,
name|ex
operator|instanceof
name|SOAPFaultException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Get a wrong exception message"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Cannot access the processor which has been protected."
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Get a wrong exception message"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Caused by: [org.springframework.security.access.AccessDeniedException - Access is denied]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

