begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.customerrelations
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|customerrelations
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_class
DECL|class|CustomerServicesTest
specifier|public
class|class
name|CustomerServicesTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
DECL|method|testCustomerService ()
specifier|public
name|void
name|testCustomerService
parameter_list|()
throws|throws
name|Exception
block|{
name|ClassPathXmlApplicationContext
name|serverContext
init|=
literal|null
decl_stmt|;
name|ClassPathXmlApplicationContext
name|clientContext
init|=
literal|null
decl_stmt|;
try|try
block|{
name|serverContext
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"spring-config/server-applicationContext.xml"
block|}
argument_list|)
expr_stmt|;
name|Object
name|server
init|=
name|serverContext
operator|.
name|getBean
argument_list|(
literal|"org.apache.camel.itest.customerrelations.CustomerServiceV1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"We should get server here"
argument_list|,
name|server
argument_list|)
expr_stmt|;
comment|// add an interceptor to verify headers
name|EndpointImpl
operator|.
name|class
operator|.
name|cast
argument_list|(
name|server
argument_list|)
operator|.
name|getServer
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|HeaderChecker
argument_list|(
name|Phase
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|clientContext
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"spring-config/client-applicationContext.xml"
block|}
argument_list|)
expr_stmt|;
name|CustomerServiceV1
name|customerService
init|=
operator|(
name|CustomerServiceV1
operator|)
name|clientContext
operator|.
name|getBean
argument_list|(
literal|"org.apache.camel.itest.customerrelations.CustomerServiceV1"
argument_list|)
decl_stmt|;
comment|// CXF 2.1.2 only apply the SOAPAction for the request message (in SoapPreProtocolOutInterceptor)
comment|// After went through the SOAP 1.1 specification, I got that the SOAPAction is only for the request message
comment|// So I comment out this HeaderChecker Interceptor setting up code
comment|/*JaxWsClientProxy.class.cast(Proxy.getInvocationHandler(customerService))                 .getClient().getInInterceptors().add(new HeaderChecker(Phase.READ));*/
name|Customer
name|customer
init|=
name|customerService
operator|.
name|getCustomer
argument_list|(
literal|"12345"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"We should get Customer here"
argument_list|,
name|customer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|clientContext
operator|!=
literal|null
condition|)
block|{
name|clientContext
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|serverContext
operator|!=
literal|null
condition|)
block|{
name|serverContext
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|HeaderChecker
class|class
name|HeaderChecker
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
DECL|method|HeaderChecker (String phase)
specifier|public
name|HeaderChecker
parameter_list|(
name|String
name|phase
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
DECL|method|handleMessage (Message message)
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\"getCustomer\""
argument_list|,
name|headers
operator|.
name|get
argument_list|(
literal|"SOAPAction"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

