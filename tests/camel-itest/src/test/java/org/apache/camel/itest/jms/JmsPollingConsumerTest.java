begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ConsumerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|annotation
operator|.
name|DirtiesContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|AbstractJUnit4SpringContextTests
import|;
end_import

begin_class
annotation|@
name|ContextConfiguration
DECL|class|JmsPollingConsumerTest
specifier|public
class|class
name|JmsPollingConsumerTest
extends|extends
name|AbstractJUnit4SpringContextTests
block|{
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"activemq:startConsumer"
argument_list|)
DECL|field|startConsumer
specifier|protected
name|ProducerTemplate
name|startConsumer
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"direct:startConsumer"
argument_list|)
DECL|field|startDirectConsumer
specifier|protected
name|ProducerTemplate
name|startDirectConsumer
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"activemq:queue"
argument_list|)
DECL|field|queue
specifier|protected
name|ProducerTemplate
name|queue
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:result"
argument_list|)
DECL|field|result
specifier|protected
name|MockEndpoint
name|result
decl_stmt|;
comment|/**      * Fails:      * Consumer is expected to read two messages from activemq:queue and concatenate their bodies.      * In this test, consumer bean is invoked from an activemq: route.      */
annotation|@
name|Test
annotation|@
name|DirtiesContext
annotation|@
name|Ignore
argument_list|(
literal|"CAMEL-2305"
argument_list|)
DECL|method|testConsumerFromJMSRoute ()
specifier|public
name|void
name|testConsumerFromJMSRoute
parameter_list|()
throws|throws
name|Exception
block|{
name|result
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"foobar"
argument_list|)
expr_stmt|;
name|queue
operator|.
name|sendBody
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|queue
operator|.
name|sendBody
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|startConsumer
operator|.
name|sendBody
argument_list|(
literal|"go"
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
comment|/**      * Succeeds:      * Consumer is expected to read two messages from activemq:queue and concatenate their bodies.      * In this test, consumer bean is invoked from a direct: route.      */
annotation|@
name|Test
annotation|@
name|DirtiesContext
DECL|method|testConsumerFromDirectRoute ()
specifier|public
name|void
name|testConsumerFromDirectRoute
parameter_list|()
throws|throws
name|Exception
block|{
name|result
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"foobar"
argument_list|)
expr_stmt|;
name|queue
operator|.
name|sendBody
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|queue
operator|.
name|sendBody
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|startDirectConsumer
operator|.
name|sendBody
argument_list|(
literal|"go"
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|class|Consumer
specifier|public
specifier|static
class|class
name|Consumer
block|{
annotation|@
name|Autowired
DECL|field|consumer
specifier|protected
name|ConsumerTemplate
name|consumer
decl_stmt|;
annotation|@
name|Handler
DECL|method|consume ()
specifier|public
name|String
name|consume
parameter_list|()
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
decl_stmt|;
while|while
condition|(
operator|(
name|exchange
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|"activemq:queue"
argument_list|,
literal|2000
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

