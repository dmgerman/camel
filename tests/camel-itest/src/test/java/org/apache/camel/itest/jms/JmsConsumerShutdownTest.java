begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|annotation
operator|.
name|DirtiesContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|AbstractJUnit4SpringContextTests
import|;
end_import

begin_class
annotation|@
name|ContextConfiguration
DECL|class|JmsConsumerShutdownTest
specifier|public
class|class
name|JmsConsumerShutdownTest
extends|extends
name|AbstractJUnit4SpringContextTests
block|{
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"activemq:start"
argument_list|)
DECL|field|activemq
specifier|protected
name|ProducerTemplate
name|activemq
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"seda:start"
argument_list|)
DECL|field|seda
specifier|protected
name|ProducerTemplate
name|seda
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:end"
argument_list|)
DECL|field|end
specifier|protected
name|MockEndpoint
name|end
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:exception"
argument_list|)
DECL|field|exception
specifier|protected
name|MockEndpoint
name|exception
decl_stmt|;
comment|// Camel context will never shut down. Regardless of the settings in DefaultShutdownStrategy
comment|// JmsConsumer does not correctly shut down direct subroutes
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
annotation|@
name|DirtiesContext
DECL|method|testJmsConsumerShutdownWithMessageInFlight ()
specifier|public
name|void
name|testJmsConsumerShutdownWithMessageInFlight
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|end
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|end
operator|.
name|setResultWaitTime
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// direct:dir route always fails
name|exception
operator|.
name|whenAnyExchangeReceived
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Kaboom!"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|activemq
operator|.
name|sendBody
argument_list|(
literal|"activemq:start"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|end
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
comment|// For comparison, SedaConsumer will correctly shut down direct subroutes
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
annotation|@
name|DirtiesContext
DECL|method|testSedaConsumerShutdownWithMessageInFlight ()
specifier|public
name|void
name|testSedaConsumerShutdownWithMessageInFlight
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|end
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|end
operator|.
name|setResultWaitTime
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// direct:dir route always fails
name|exception
operator|.
name|whenAnyExchangeReceived
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Kaboom!"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|seda
operator|.
name|sendBody
argument_list|(
literal|"activemq:start"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|end
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|class|MyRouteBuilder
specifier|public
specifier|static
class|class
name|MyRouteBuilder
extends|extends
name|RouteBuilder
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"activemq:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"direct:dir"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:end"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"seda:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"direct:dir"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:end"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:dir"
argument_list|)
operator|.
name|onException
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|.
name|redeliveryDelay
argument_list|(
literal|1000
argument_list|)
operator|.
name|maximumRedeliveries
argument_list|(
operator|-
literal|1
argument_list|)
comment|// forever
operator|.
name|end
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

