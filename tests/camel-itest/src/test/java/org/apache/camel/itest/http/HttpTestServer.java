begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.itest.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|itest
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|localserver
operator|.
name|LocalTestServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|HttpParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|BasicHttpProcessor
import|;
end_import

begin_comment
comment|/**  * Subclass the org.apache.http.localserver.LocalTestServer to choose a specific  * port.  *   * @author muellerc  */
end_comment

begin_class
DECL|class|HttpTestServer
specifier|public
class|class
name|HttpTestServer
extends|extends
name|LocalTestServer
block|{
comment|/**      * The local address to bind to. The host is an IP number rather than      * "localhost" to avoid surprises on hosts that map "localhost" to an IPv6      * address or something else. The port is 18080 by default.      */
DECL|field|TEST_SERVER_ADDR
specifier|public
specifier|static
specifier|final
name|InetSocketAddress
name|TEST_SERVER_ADDR
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|18080
argument_list|)
decl_stmt|;
DECL|method|HttpTestServer (BasicHttpProcessor proc, HttpParams params)
specifier|public
name|HttpTestServer
parameter_list|(
name|BasicHttpProcessor
name|proc
parameter_list|,
name|HttpParams
name|params
parameter_list|)
block|{
name|super
argument_list|(
name|proc
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
comment|/**      * Starts this test server. Use {@link #getServicePort getServicePort} to      * obtain the port number afterwards.      */
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|servicedSocket
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|" already running"
argument_list|)
throw|;
block|}
name|ServerSocket
name|ssock
init|=
operator|new
name|ServerSocket
argument_list|()
decl_stmt|;
name|ssock
operator|.
name|setReuseAddress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// probably pointless for port '0'
name|ssock
operator|.
name|bind
argument_list|(
name|TEST_SERVER_ADDR
argument_list|)
expr_stmt|;
name|servicedSocket
operator|=
name|ssock
expr_stmt|;
name|listenerThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|RequestListener
argument_list|()
argument_list|)
expr_stmt|;
name|listenerThread
operator|.
name|setDaemon
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|listenerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

