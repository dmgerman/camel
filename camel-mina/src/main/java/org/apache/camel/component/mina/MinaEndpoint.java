begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mina
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mina
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|common
operator|.
name|IoAcceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|common
operator|.
name|IoHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|common
operator|.
name|IoHandlerAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|common
operator|.
name|IoSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|common
operator|.
name|ConnectFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|common
operator|.
name|IoConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|common
operator|.
name|support
operator|.
name|BaseIoConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|transport
operator|.
name|vmpipe
operator|.
name|VmPipeConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|MinaEndpoint
specifier|public
class|class
name|MinaEndpoint
extends|extends
name|DefaultEndpoint
argument_list|<
name|MinaExchange
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MinaEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|session
specifier|private
name|IoSession
name|session
decl_stmt|;
DECL|field|serverHandler
specifier|private
name|IoHandler
name|serverHandler
decl_stmt|;
DECL|field|clientHandler
specifier|private
name|IoHandler
name|clientHandler
decl_stmt|;
DECL|field|acceptor
specifier|private
specifier|final
name|IoAcceptor
name|acceptor
decl_stmt|;
DECL|field|address
specifier|private
specifier|final
name|SocketAddress
name|address
decl_stmt|;
DECL|field|connector
specifier|private
specifier|final
name|IoConnector
name|connector
decl_stmt|;
DECL|method|MinaEndpoint (String endpointUri, CamelContext container, SocketAddress address, IoAcceptor acceptor, IoConnector connector)
specifier|public
name|MinaEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|CamelContext
name|container
parameter_list|,
name|SocketAddress
name|address
parameter_list|,
name|IoAcceptor
name|acceptor
parameter_list|,
name|IoConnector
name|connector
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
name|this
operator|.
name|acceptor
operator|=
name|acceptor
expr_stmt|;
name|this
operator|.
name|connector
operator|=
name|connector
expr_stmt|;
block|}
DECL|method|onExchange (MinaExchange exchange)
specifier|public
name|void
name|onExchange
parameter_list|(
name|MinaExchange
name|exchange
parameter_list|)
block|{
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"#### No payload for exchange: "
operator|+
name|exchange
argument_list|)
expr_stmt|;
block|}
name|getSession
argument_list|()
operator|.
name|write
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
DECL|method|createExchange ()
specifier|public
name|MinaExchange
name|createExchange
parameter_list|()
block|{
return|return
operator|new
name|MinaExchange
argument_list|(
name|getContext
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createExchange (IoSession session, Object object)
specifier|public
name|MinaExchange
name|createExchange
parameter_list|(
name|IoSession
name|session
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
name|MinaExchange
name|exchange
init|=
operator|new
name|MinaExchange
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|object
argument_list|)
expr_stmt|;
comment|// TODO store session in exchange?
return|return
name|exchange
return|;
block|}
DECL|method|getServerHandler ()
specifier|public
name|IoHandler
name|getServerHandler
parameter_list|()
block|{
if|if
condition|(
name|serverHandler
operator|==
literal|null
condition|)
block|{
name|serverHandler
operator|=
name|createServerHandler
argument_list|()
expr_stmt|;
block|}
return|return
name|serverHandler
return|;
block|}
DECL|method|getClientHandler ()
specifier|public
name|IoHandler
name|getClientHandler
parameter_list|()
block|{
if|if
condition|(
name|clientHandler
operator|==
literal|null
condition|)
block|{
name|clientHandler
operator|=
name|createClientHandler
argument_list|()
expr_stmt|;
block|}
return|return
name|clientHandler
return|;
block|}
DECL|method|getSession ()
specifier|public
name|IoSession
name|getSession
parameter_list|()
block|{
comment|// TODO lazy create if no inbound processor attached?
return|return
name|session
return|;
block|}
DECL|method|setSession (IoSession session)
specifier|public
name|void
name|setSession
parameter_list|(
name|IoSession
name|session
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|doActivate ()
specifier|protected
name|void
name|doActivate
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doActivate
argument_list|()
expr_stmt|;
if|if
condition|(
name|getInboundProcessor
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// lets initiate the server
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Binding to server address: "
operator|+
name|address
operator|+
literal|" using acceptor: "
operator|+
name|acceptor
argument_list|)
expr_stmt|;
block|}
name|acceptor
operator|.
name|bind
argument_list|(
name|address
argument_list|,
name|getServerHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setSession
argument_list|(
name|createSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initiates the client connection for outbound communication      */
DECL|method|createSession ()
specifier|protected
name|IoSession
name|createSession
parameter_list|()
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Creating connector to address: "
operator|+
name|address
operator|+
literal|" using connector: "
operator|+
name|connector
argument_list|)
expr_stmt|;
block|}
name|ConnectFuture
name|future
init|=
name|connector
operator|.
name|connect
argument_list|(
name|address
argument_list|,
name|getClientHandler
argument_list|()
argument_list|)
decl_stmt|;
name|future
operator|.
name|join
argument_list|()
expr_stmt|;
return|return
name|future
operator|.
name|getSession
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doDeactivate ()
specifier|protected
name|void
name|doDeactivate
parameter_list|()
block|{
name|acceptor
operator|.
name|unbindAll
argument_list|()
expr_stmt|;
block|}
DECL|method|createClientHandler ()
specifier|protected
name|IoHandler
name|createClientHandler
parameter_list|()
block|{
return|return
operator|new
name|IoHandlerAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|IoSession
name|ioSession
parameter_list|,
name|Object
name|object
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|messageReceived
argument_list|(
name|ioSession
argument_list|,
name|object
argument_list|)
expr_stmt|;
comment|/** TODO */
block|}
block|}
return|;
block|}
DECL|method|createServerHandler ()
specifier|protected
name|IoHandler
name|createServerHandler
parameter_list|()
block|{
return|return
operator|new
name|IoHandlerAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|IoSession
name|session
parameter_list|,
name|Object
name|object
parameter_list|)
throws|throws
name|Exception
block|{
name|processInboundMessage
argument_list|(
name|session
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|processInboundMessage (IoSession session, Object object)
specifier|private
name|void
name|processInboundMessage
parameter_list|(
name|IoSession
name|session
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
name|getInboundProcessor
argument_list|()
operator|.
name|onExchange
argument_list|(
name|createExchange
argument_list|(
name|session
argument_list|,
name|object
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

