begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.core.xml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|IdentifiedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Properties to use with properties placeholder  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"spring,configuration"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"propertiesLocation"
argument_list|)
DECL|class|CamelPropertyPlaceholderLocationDefinition
specifier|public
class|class
name|CamelPropertyPlaceholderLocationDefinition
extends|extends
name|IdentifiedType
block|{
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"classpath"
argument_list|)
DECL|field|resolver
specifier|public
name|String
name|resolver
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|path
specifier|public
name|String
name|path
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|optional
specifier|public
name|Boolean
name|optional
decl_stmt|;
DECL|method|getResolver ()
specifier|public
name|String
name|getResolver
parameter_list|()
block|{
return|return
name|resolver
return|;
block|}
comment|/**      * The resolver to use to locate the location      */
DECL|method|setResolver (String resolver)
specifier|public
name|void
name|setResolver
parameter_list|(
name|String
name|resolver
parameter_list|)
block|{
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
block|}
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
comment|/**      * Property locations to use.      */
DECL|method|setPath (String path)
specifier|public
name|void
name|setPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
DECL|method|getOptional ()
specifier|public
name|Boolean
name|getOptional
parameter_list|()
block|{
return|return
name|optional
return|;
block|}
comment|/**      * If the location is optional.      */
DECL|method|setOptional (Boolean optional)
specifier|public
name|void
name|setOptional
parameter_list|(
name|Boolean
name|optional
parameter_list|)
block|{
name|this
operator|.
name|optional
operator|=
name|optional
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|answer
init|=
name|path
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|resolver
argument_list|)
condition|)
block|{
name|answer
operator|=
name|resolver
operator|+
literal|":"
operator|+
name|answer
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|optional
argument_list|)
condition|)
block|{
name|answer
operator|=
name|answer
operator|+
literal|";optional=true"
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|toLocation ()
specifier|public
name|PropertiesLocation
name|toLocation
parameter_list|()
block|{
return|return
operator|new
name|PropertiesLocation
argument_list|(
name|resolver
operator|!=
literal|null
condition|?
name|resolver
else|:
literal|"classpath"
argument_list|,
name|path
argument_list|,
name|optional
operator|!=
literal|null
condition|?
name|optional
else|:
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

