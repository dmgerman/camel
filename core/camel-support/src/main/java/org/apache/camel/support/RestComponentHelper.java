begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|HostUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_class
DECL|class|RestComponentHelper
specifier|public
specifier|final
class|class
name|RestComponentHelper
block|{
DECL|method|RestComponentHelper ()
specifier|private
name|RestComponentHelper
parameter_list|()
block|{     }
DECL|method|addHttpRestrictParam (Map<String, Object> queryMap, String verb, Boolean cors)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|addHttpRestrictParam
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queryMap
parameter_list|,
name|String
name|verb
parameter_list|,
name|Boolean
name|cors
parameter_list|)
block|{
name|String
name|restrict
init|=
name|verb
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
if|if
condition|(
name|cors
condition|)
block|{
name|restrict
operator|+=
literal|",OPTIONS"
expr_stmt|;
block|}
name|queryMap
operator|.
name|put
argument_list|(
literal|"httpMethodRestrict"
argument_list|,
name|restrict
argument_list|)
expr_stmt|;
return|return
name|queryMap
return|;
block|}
DECL|method|initRestEndpointProperties (String componentName, RestConfiguration config)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|initRestEndpointProperties
parameter_list|(
name|String
name|componentName
parameter_list|,
name|RestConfiguration
name|config
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// build query string, and append any endpoint configuration properties
if|if
condition|(
name|config
operator|.
name|getComponent
argument_list|()
operator|==
literal|null
operator|||
name|config
operator|.
name|getComponent
argument_list|()
operator|.
name|equals
argument_list|(
name|componentName
argument_list|)
condition|)
block|{
comment|// setup endpoint options
if|if
condition|(
name|config
operator|.
name|getEndpointProperties
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|getEndpointProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|putAll
argument_list|(
name|config
operator|.
name|getEndpointProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
DECL|method|resolveRestHostName (String host, RestConfiguration config)
specifier|public
specifier|static
name|String
name|resolveRestHostName
parameter_list|(
name|String
name|host
parameter_list|,
name|RestConfiguration
name|config
parameter_list|)
throws|throws
name|UnknownHostException
block|{
if|if
condition|(
name|config
operator|.
name|getHostNameResolver
argument_list|()
operator|==
name|RestConfiguration
operator|.
name|RestHostNameResolver
operator|.
name|allLocalIp
condition|)
block|{
name|host
operator|=
literal|"0.0.0.0"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|config
operator|.
name|getHostNameResolver
argument_list|()
operator|==
name|RestConfiguration
operator|.
name|RestHostNameResolver
operator|.
name|localHostName
condition|)
block|{
name|host
operator|=
name|HostUtils
operator|.
name|getLocalHostName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|config
operator|.
name|getHostNameResolver
argument_list|()
operator|==
name|RestConfiguration
operator|.
name|RestHostNameResolver
operator|.
name|localIp
condition|)
block|{
name|host
operator|=
name|HostUtils
operator|.
name|getLocalIp
argument_list|()
expr_stmt|;
block|}
return|return
name|host
return|;
block|}
DECL|method|createRestConsumerUrl (String componentName, String verb, String path, Boolean cors, Map<String, Object> queryMap)
specifier|public
specifier|static
name|String
name|createRestConsumerUrl
parameter_list|(
name|String
name|componentName
parameter_list|,
name|String
name|verb
parameter_list|,
name|String
name|path
parameter_list|,
name|Boolean
name|cors
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queryMap
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|query
init|=
name|generateComponentQueryString
argument_list|(
name|verb
argument_list|,
name|cors
argument_list|,
name|queryMap
argument_list|)
decl_stmt|;
return|return
name|applyFormatAndQuery
argument_list|(
literal|"%s:/%s?"
argument_list|,
name|query
argument_list|,
name|componentName
argument_list|,
name|path
argument_list|)
return|;
block|}
DECL|method|createRestConsumerUrl (String componentName, String verb, String scheme, String host, int port, String path, Boolean cors, Map<String, Object> queryMap)
specifier|public
specifier|static
name|String
name|createRestConsumerUrl
parameter_list|(
name|String
name|componentName
parameter_list|,
name|String
name|verb
parameter_list|,
name|String
name|scheme
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|path
parameter_list|,
name|Boolean
name|cors
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queryMap
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|query
init|=
name|generateComponentQueryString
argument_list|(
name|verb
argument_list|,
name|cors
argument_list|,
name|queryMap
argument_list|)
decl_stmt|;
return|return
name|applyFormatAndQuery
argument_list|(
literal|"%s:%s://%s:%s/%s?"
argument_list|,
name|query
argument_list|,
name|componentName
argument_list|,
name|scheme
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|path
argument_list|)
return|;
block|}
DECL|method|generateComponentQueryString (String verb, Boolean cors, Map<String, Object> queryMap)
specifier|private
specifier|static
name|String
name|generateComponentQueryString
parameter_list|(
name|String
name|verb
parameter_list|,
name|Boolean
name|cors
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queryMap
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|addHttpRestrictParam
argument_list|(
name|queryMap
argument_list|,
name|verb
argument_list|,
name|cors
argument_list|)
expr_stmt|;
name|String
name|query
init|=
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|queryMap
argument_list|)
decl_stmt|;
return|return
name|query
return|;
block|}
DECL|method|applyFormatAndQuery (String format, String query, Object... formatOptions)
specifier|private
specifier|static
name|String
name|applyFormatAndQuery
parameter_list|(
name|String
name|format
parameter_list|,
name|String
name|query
parameter_list|,
name|Object
modifier|...
name|formatOptions
parameter_list|)
block|{
comment|// get the endpoint
name|String
name|url
init|=
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|formatOptions
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|query
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|url
operator|=
name|url
operator|+
name|query
expr_stmt|;
block|}
return|return
name|url
return|;
block|}
block|}
end_class

end_unit

