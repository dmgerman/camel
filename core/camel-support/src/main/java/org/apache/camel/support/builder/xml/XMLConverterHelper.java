begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support.builder.xml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|builder
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|ErrorListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactoryConfigurationError
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * XML converter support.  */
end_comment

begin_class
DECL|class|XMLConverterHelper
specifier|public
class|class
name|XMLConverterHelper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XMLConverterHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DOCUMENT_BUILDER_LOGGING_ERROR_HANDLER
specifier|private
specifier|static
specifier|final
name|ErrorHandler
name|DOCUMENT_BUILDER_LOGGING_ERROR_HANDLER
init|=
operator|new
name|DocumentBuilderLoggingErrorHandler
argument_list|()
decl_stmt|;
DECL|field|DOCUMENT_BUILDER_FACTORY_FEATURE
specifier|private
specifier|static
specifier|final
name|String
name|DOCUMENT_BUILDER_FACTORY_FEATURE
init|=
literal|"org.apache.camel.xmlconverter.documentBuilderFactory.feature"
decl_stmt|;
DECL|field|JDK_FALLBACK_TRANSFORMER_FACTORY
specifier|private
specifier|static
specifier|final
name|String
name|JDK_FALLBACK_TRANSFORMER_FACTORY
init|=
literal|"com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl"
decl_stmt|;
DECL|field|documentBuilderFactory
specifier|private
specifier|volatile
name|DocumentBuilderFactory
name|documentBuilderFactory
decl_stmt|;
DECL|field|transformerFactory
specifier|private
specifier|volatile
name|TransformerFactory
name|transformerFactory
decl_stmt|;
DECL|method|XMLConverterHelper ()
specifier|public
name|XMLConverterHelper
parameter_list|()
block|{     }
DECL|method|XMLConverterHelper (DocumentBuilderFactory documentBuilderFactory)
specifier|public
name|XMLConverterHelper
parameter_list|(
name|DocumentBuilderFactory
name|documentBuilderFactory
parameter_list|)
block|{
name|this
operator|.
name|documentBuilderFactory
operator|=
name|documentBuilderFactory
expr_stmt|;
block|}
DECL|method|setDocumentBuilderFactory (DocumentBuilderFactory documentBuilderFactory)
specifier|public
name|void
name|setDocumentBuilderFactory
parameter_list|(
name|DocumentBuilderFactory
name|documentBuilderFactory
parameter_list|)
block|{
name|this
operator|.
name|documentBuilderFactory
operator|=
name|documentBuilderFactory
expr_stmt|;
block|}
DECL|method|getTransformerFactory ()
specifier|public
name|TransformerFactory
name|getTransformerFactory
parameter_list|()
block|{
if|if
condition|(
name|transformerFactory
operator|==
literal|null
condition|)
block|{
name|transformerFactory
operator|=
name|createTransformerFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|transformerFactory
return|;
block|}
DECL|method|setTransformerFactory (TransformerFactory transformerFactory)
specifier|public
name|void
name|setTransformerFactory
parameter_list|(
name|TransformerFactory
name|transformerFactory
parameter_list|)
block|{
name|this
operator|.
name|transformerFactory
operator|=
name|transformerFactory
expr_stmt|;
block|}
DECL|method|toDOMDocument (final Node node)
specifier|public
name|Document
name|toDOMDocument
parameter_list|(
specifier|final
name|Node
name|node
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|TransformerException
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|node
argument_list|,
literal|"node"
argument_list|)
expr_stmt|;
comment|// If the node is the document, just cast it
if|if
condition|(
name|node
operator|instanceof
name|Document
condition|)
block|{
return|return
operator|(
name|Document
operator|)
name|node
return|;
comment|// If the node is an element
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
comment|// If this is the root element, return its owner document
if|if
condition|(
name|elem
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
operator|==
name|elem
condition|)
block|{
return|return
name|elem
operator|.
name|getOwnerDocument
argument_list|()
return|;
comment|// else, create a new doc and copy the element inside it
block|}
else|else
block|{
name|Document
name|doc
init|=
name|createDocument
argument_list|()
decl_stmt|;
comment|// import node must not occur concurrent on the same node (must
comment|// be its owner)
comment|// so we need to synchronize on it
synchronized|synchronized
init|(
name|node
operator|.
name|getOwnerDocument
argument_list|()
init|)
block|{
name|doc
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|importNode
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
comment|// other element types are not handled
block|}
else|else
block|{
throw|throw
operator|new
name|TransformerException
argument_list|(
literal|"Unable to convert DOM node to a Document: "
operator|+
name|node
argument_list|)
throw|;
block|}
block|}
DECL|method|toDOMSource (Node node)
specifier|public
name|DOMSource
name|toDOMSource
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|TransformerException
block|{
name|Document
name|document
init|=
name|toDOMDocument
argument_list|(
name|node
argument_list|)
decl_stmt|;
return|return
operator|new
name|DOMSource
argument_list|(
name|document
argument_list|)
return|;
block|}
DECL|method|createDocumentBuilderFactory ()
specifier|public
name|DocumentBuilderFactory
name|createDocumentBuilderFactory
parameter_list|()
block|{
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setIgnoringElementContentWhitespace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setIgnoringComments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Set secure processing
name|factory
operator|.
name|setFeature
argument_list|(
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"DocumentBuilderFactory doesn't support the feature {} with value {}, due to {}."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
block|,
literal|true
block|,
name|e
block|}
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Disable the external-general-entities by default
name|factory
operator|.
name|setFeature
argument_list|(
literal|"http://xml.org/sax/features/external-general-entities"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"DocumentBuilderFactory doesn't support the feature {} with value {}, due to {}."
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"http://xml.org/sax/features/external-general-entities"
block|,
literal|false
block|,
name|e
block|}
argument_list|)
expr_stmt|;
block|}
comment|// setup the SecurityManager by default if it's apache xerces
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|smClass
init|=
name|ObjectHelper
operator|.
name|loadClass
argument_list|(
literal|"org.apache.xerces.util.SecurityManager"
argument_list|)
decl_stmt|;
if|if
condition|(
name|smClass
operator|!=
literal|null
condition|)
block|{
name|Object
name|sm
init|=
name|smClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// Here we just use the default setting of the SeurityManager
name|factory
operator|.
name|setAttribute
argument_list|(
literal|"http://apache.org/xml/properties/security-manager"
argument_list|,
name|sm
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"DocumentBuilderFactory doesn't support the attribute {}, due to {}."
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"http://apache.org/xml/properties/security-manager"
block|,
name|e
block|}
argument_list|)
expr_stmt|;
block|}
comment|// setup the feature from the system property
name|setupFeatures
argument_list|(
name|factory
argument_list|)
expr_stmt|;
return|return
name|factory
return|;
block|}
DECL|method|createTransformerFactory ()
specifier|public
name|TransformerFactory
name|createTransformerFactory
parameter_list|()
block|{
name|TransformerFactory
name|factory
decl_stmt|;
name|TransformerFactoryConfigurationError
name|cause
decl_stmt|;
try|try
block|{
name|factory
operator|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerFactoryConfigurationError
name|e
parameter_list|)
block|{
name|cause
operator|=
name|e
expr_stmt|;
comment|// try fallback from the JDK
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot create/load TransformerFactory due: {}. Will attempt to use JDK fallback TransformerFactory: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|JDK_FALLBACK_TRANSFORMER_FACTORY
argument_list|)
expr_stmt|;
name|factory
operator|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|(
name|JDK_FALLBACK_TRANSFORMER_FACTORY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// okay we cannot load fallback then throw original exception
throw|throw
name|cause
throw|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created TransformerFactory: {}"
argument_list|,
name|factory
argument_list|)
expr_stmt|;
comment|// Enable the Security feature by default
try|try
block|{
name|factory
operator|.
name|setFeature
argument_list|(
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"TransformerFactory doesn't support the feature {} with value {}, due to {}."
argument_list|,
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
literal|"true"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|factory
operator|.
name|setErrorListener
argument_list|(
operator|new
name|XmlErrorListener
argument_list|()
argument_list|)
expr_stmt|;
name|configureSaxonTransformerFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
return|return
name|factory
return|;
block|}
comment|/**      * Make a Saxon TransformerFactory more JAXP compliant by configuring it to      * send&lt;xsl:message&gt; output to the ErrorListener.      */
DECL|method|configureSaxonTransformerFactory (TransformerFactory factory)
specifier|private
name|void
name|configureSaxonTransformerFactory
parameter_list|(
name|TransformerFactory
name|factory
parameter_list|)
block|{
comment|// check whether we have a Saxon TransformerFactory ("net.sf.saxon" for open source editions (HE / B)
comment|// and "com.saxonica" for commercial editions (PE / EE / SA))
name|Class
argument_list|<
name|?
argument_list|>
name|factoryClass
init|=
name|factory
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|factoryClass
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"net.sf.saxon"
argument_list|)
operator|||
name|factoryClass
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"com.saxonica"
argument_list|)
condition|)
block|{
comment|// just in case there are multiple class loaders with different Saxon versions, use the
comment|// TransformerFactory's class loader to find Saxon support classes
name|ClassLoader
name|loader
init|=
name|factoryClass
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
comment|// try to find Saxon's MessageWarner class that redirects<xsl:message> to the ErrorListener
name|Class
argument_list|<
name|?
argument_list|>
name|messageWarner
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Saxon>= 9.3
name|messageWarner
operator|=
name|loader
operator|.
name|loadClass
argument_list|(
literal|"net.sf.saxon.serialize.MessageWarner"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
try|try
block|{
comment|// Saxon< 9.3 (including Saxon-B / -SA)
name|messageWarner
operator|=
name|loader
operator|.
name|loadClass
argument_list|(
literal|"net.sf.saxon.event.MessageWarner"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe2
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error loading Saxon's net.sf.saxon.serialize.MessageWarner class from the classpath!"
operator|+
literal|"<xsl:message> output will not be redirected to the ErrorListener!"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|messageWarner
operator|!=
literal|null
condition|)
block|{
comment|// set net.sf.saxon.FeatureKeys.MESSAGE_EMITTER_CLASS
name|factory
operator|.
name|setAttribute
argument_list|(
literal|"http://saxon.sf.net/feature/messageEmitterClass"
argument_list|,
name|messageWarner
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createDocument ()
specifier|public
name|Document
name|createDocument
parameter_list|()
throws|throws
name|ParserConfigurationException
block|{
name|DocumentBuilder
name|builder
init|=
name|createDocumentBuilder
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|newDocument
argument_list|()
return|;
block|}
DECL|method|createDocumentBuilder ()
specifier|public
name|DocumentBuilder
name|createDocumentBuilder
parameter_list|()
throws|throws
name|ParserConfigurationException
block|{
return|return
name|createDocumentBuilder
argument_list|(
name|getDocumentBuilderFactory
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getDocumentBuilderFactory ()
specifier|public
name|DocumentBuilderFactory
name|getDocumentBuilderFactory
parameter_list|()
block|{
if|if
condition|(
name|documentBuilderFactory
operator|==
literal|null
condition|)
block|{
name|documentBuilderFactory
operator|=
name|createDocumentBuilderFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|documentBuilderFactory
return|;
block|}
DECL|method|createDocumentBuilder (DocumentBuilderFactory factory)
specifier|public
name|DocumentBuilder
name|createDocumentBuilder
parameter_list|(
name|DocumentBuilderFactory
name|factory
parameter_list|)
throws|throws
name|ParserConfigurationException
block|{
name|DocumentBuilder
name|builder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setErrorHandler
argument_list|(
name|DOCUMENT_BUILDER_LOGGING_ERROR_HANDLER
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|setupFeatures (DocumentBuilderFactory factory)
specifier|protected
name|void
name|setupFeatures
parameter_list|(
name|DocumentBuilderFactory
name|factory
parameter_list|)
block|{
name|Properties
name|properties
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|features
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|prop
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|prop
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|DOCUMENT_BUILDER_FACTORY_FEATURE
argument_list|)
condition|)
block|{
name|String
name|uri
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|key
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
name|Boolean
name|value
init|=
name|Boolean
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|factory
operator|.
name|setFeature
argument_list|(
name|uri
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|features
operator|.
name|add
argument_list|(
literal|"feature "
operator|+
name|uri
operator|+
literal|" value "
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"DocumentBuilderFactory doesn't support the feature {} with value {}, due to {}."
argument_list|,
name|uri
argument_list|,
name|value
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|features
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|featureString
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// just log the configured feature
for|for
control|(
name|String
name|feature
range|:
name|features
control|)
block|{
if|if
condition|(
name|featureString
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|featureString
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|featureString
operator|.
name|append
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"DocumentBuilderFactory has been set with features {{}}."
argument_list|,
name|featureString
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DocumentBuilderLoggingErrorHandler
specifier|private
specifier|static
class|class
name|DocumentBuilderLoggingErrorHandler
implements|implements
name|ErrorHandler
block|{
annotation|@
name|Override
DECL|method|warning (SAXParseException exception)
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|error (SAXParseException exception)
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|LOG
operator|.
name|error
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fatalError (SAXParseException exception)
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|LOG
operator|.
name|error
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * A {@link javax.xml.transform.ErrorListener} that logs the errors.      */
DECL|class|XmlErrorListener
specifier|private
specifier|static
class|class
name|XmlErrorListener
implements|implements
name|ErrorListener
block|{
annotation|@
name|Override
DECL|method|warning (TransformerException e)
specifier|public
name|void
name|warning
parameter_list|(
name|TransformerException
name|e
parameter_list|)
throws|throws
name|TransformerException
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|error (TransformerException e)
specifier|public
name|void
name|error
parameter_list|(
name|TransformerException
name|e
parameter_list|)
throws|throws
name|TransformerException
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fatalError (TransformerException e)
specifier|public
name|void
name|fatalError
parameter_list|(
name|TransformerException
name|e
parameter_list|)
throws|throws
name|TransformerException
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

