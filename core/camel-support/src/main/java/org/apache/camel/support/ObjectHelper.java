begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Ordered
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_comment
comment|/**  * A number of useful helper methods for working with Objects  */
end_comment

begin_class
DECL|class|ObjectHelper
specifier|public
specifier|final
class|class
name|ObjectHelper
block|{
DECL|field|DEFAULT_DELIMITER
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_DELIMITER
init|=
literal|","
decl_stmt|;
comment|/**      * Utility classes should not have a public constructor.      */
DECL|method|ObjectHelper ()
specifier|private
name|ObjectHelper
parameter_list|()
block|{     }
comment|/**      * A helper method for comparing objects for equality in which it uses type coercion to coerce      * types between the left and right values. This allows you test for equality for example with      * a String and Integer type as Camel will be able to coerce the types.      */
DECL|method|typeCoerceEquals (TypeConverter converter, Object leftValue, Object rightValue)
specifier|public
specifier|static
name|boolean
name|typeCoerceEquals
parameter_list|(
name|TypeConverter
name|converter
parameter_list|,
name|Object
name|leftValue
parameter_list|,
name|Object
name|rightValue
parameter_list|)
block|{
return|return
name|typeCoerceEquals
argument_list|(
name|converter
argument_list|,
name|leftValue
argument_list|,
name|rightValue
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * A helper method for comparing objects for equality in which it uses type coercion to coerce      * types between the left and right values. This allows you test for equality for example with      * a String and Integer type as Camel will be able to coerce the types.      */
DECL|method|typeCoerceEquals (TypeConverter converter, Object leftValue, Object rightValue, boolean ignoreCase)
specifier|public
specifier|static
name|boolean
name|typeCoerceEquals
parameter_list|(
name|TypeConverter
name|converter
parameter_list|,
name|Object
name|leftValue
parameter_list|,
name|Object
name|rightValue
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
comment|// sanity check
if|if
condition|(
name|leftValue
operator|==
literal|null
operator|&&
name|rightValue
operator|==
literal|null
condition|)
block|{
comment|// they are equal
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|leftValue
operator|==
literal|null
operator|||
name|rightValue
operator|==
literal|null
condition|)
block|{
comment|// only one of them is null so they are not equal
return|return
literal|false
return|;
block|}
comment|// try without type coerce
name|boolean
name|answer
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|leftValue
argument_list|,
name|rightValue
argument_list|,
name|ignoreCase
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// are they same type, if so return false as the equals returned false
if|if
condition|(
name|leftValue
operator|.
name|getClass
argument_list|()
operator|.
name|isInstance
argument_list|(
name|rightValue
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// convert left to right
name|Object
name|value
init|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|rightValue
operator|.
name|getClass
argument_list|()
argument_list|,
name|leftValue
argument_list|)
decl_stmt|;
name|answer
operator|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|value
argument_list|,
name|rightValue
argument_list|,
name|ignoreCase
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// convert right to left
name|value
operator|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|leftValue
operator|.
name|getClass
argument_list|()
argument_list|,
name|rightValue
argument_list|)
expr_stmt|;
name|answer
operator|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|leftValue
argument_list|,
name|value
argument_list|,
name|ignoreCase
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * A helper method for comparing objects for inequality in which it uses type coercion to coerce      * types between the left and right values.  This allows you test for inequality for example with      * a String and Integer type as Camel will be able to coerce the types.      */
DECL|method|typeCoerceNotEquals (TypeConverter converter, Object leftValue, Object rightValue)
specifier|public
specifier|static
name|boolean
name|typeCoerceNotEquals
parameter_list|(
name|TypeConverter
name|converter
parameter_list|,
name|Object
name|leftValue
parameter_list|,
name|Object
name|rightValue
parameter_list|)
block|{
return|return
operator|!
name|typeCoerceEquals
argument_list|(
name|converter
argument_list|,
name|leftValue
argument_list|,
name|rightValue
argument_list|)
return|;
block|}
comment|/**      * A helper method for comparing objects ordering in which it uses type coercion to coerce      * types between the left and right values.  This allows you test for ordering for example with      * a String and Integer type as Camel will be able to coerce the types.      */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|typeCoerceCompare (TypeConverter converter, Object leftValue, Object rightValue)
specifier|public
specifier|static
name|int
name|typeCoerceCompare
parameter_list|(
name|TypeConverter
name|converter
parameter_list|,
name|Object
name|leftValue
parameter_list|,
name|Object
name|rightValue
parameter_list|)
block|{
comment|// if both values is numeric then compare using numeric
name|Long
name|leftNum
init|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|leftValue
argument_list|)
decl_stmt|;
name|Long
name|rightNum
init|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|rightValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftNum
operator|!=
literal|null
operator|&&
name|rightNum
operator|!=
literal|null
condition|)
block|{
return|return
name|leftNum
operator|.
name|compareTo
argument_list|(
name|rightNum
argument_list|)
return|;
block|}
comment|// also try with floating point numbers
name|Double
name|leftDouble
init|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|leftValue
argument_list|)
decl_stmt|;
name|Double
name|rightDouble
init|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|rightValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftDouble
operator|!=
literal|null
operator|&&
name|rightDouble
operator|!=
literal|null
condition|)
block|{
return|return
name|leftDouble
operator|.
name|compareTo
argument_list|(
name|rightDouble
argument_list|)
return|;
block|}
comment|// prefer to NOT coerce to String so use the type which is not String
comment|// for example if we are comparing String vs Integer then prefer to coerce to Integer
comment|// as all types can be converted to String which does not work well for comparison
comment|// as eg "10"< 6 would return true, where as 10< 6 will return false.
comment|// if they are both String then it doesn't matter
if|if
condition|(
name|rightValue
operator|instanceof
name|String
operator|&&
operator|(
operator|!
operator|(
name|leftValue
operator|instanceof
name|String
operator|)
operator|)
condition|)
block|{
comment|// if right is String and left is not then flip order (remember to * -1 the result then)
return|return
name|typeCoerceCompare
argument_list|(
name|converter
argument_list|,
name|rightValue
argument_list|,
name|leftValue
argument_list|)
operator|*
operator|-
literal|1
return|;
block|}
comment|// prefer to coerce to the right hand side at first
if|if
condition|(
name|rightValue
operator|instanceof
name|Comparable
condition|)
block|{
name|Object
name|value
init|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|rightValue
operator|.
name|getClass
argument_list|()
argument_list|,
name|leftValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|Comparable
operator|)
name|rightValue
operator|)
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
operator|*
operator|-
literal|1
return|;
block|}
block|}
comment|// then fallback to the left hand side
if|if
condition|(
name|leftValue
operator|instanceof
name|Comparable
condition|)
block|{
name|Object
name|value
init|=
name|converter
operator|.
name|tryConvertTo
argument_list|(
name|leftValue
operator|.
name|getClass
argument_list|()
argument_list|,
name|rightValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|Comparable
operator|)
name|leftValue
operator|)
operator|.
name|compareTo
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
comment|// use regular compare
return|return
name|compare
argument_list|(
name|leftValue
argument_list|,
name|rightValue
argument_list|)
return|;
block|}
comment|/**      * A helper method to invoke a method via reflection and wrap any exceptions      * as {@link RuntimeCamelException} instances      *      * @param method the method to invoke      * @param instance the object instance (or null for static methods)      * @param parameters the parameters to the method      * @return the result of the method invocation      */
DECL|method|invokeMethod (Method method, Object instance, Object... parameters)
specifier|public
specifier|static
name|Object
name|invokeMethod
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
name|instance
parameter_list|,
name|Object
modifier|...
name|parameters
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
name|parameters
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|instance
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * A helper method to invoke a method via reflection in a safe way by allowing to invoke      * methods that are not accessible by default and wrap any exceptions      * as {@link RuntimeCamelException} instances      *      * @param method the method to invoke      * @param instance the object instance (or null for static methods)      * @param parameters the parameters to the method      * @return the result of the method invocation      */
DECL|method|invokeMethodSafe (Method method, Object instance, Object... parameters)
specifier|public
specifier|static
name|Object
name|invokeMethodSafe
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
name|instance
parameter_list|,
name|Object
modifier|...
name|parameters
parameter_list|)
throws|throws
name|InvocationTargetException
throws|,
name|IllegalAccessException
block|{
name|Object
name|answer
decl_stmt|;
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|method
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
name|method
operator|.
name|invoke
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * A helper method to create a new instance of a type using the default      * constructor arguments.      */
DECL|method|newInstance (Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
try|try
block|{
return|return
name|type
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * A helper method to create a new instance of a type using the default      * constructor arguments.      */
DECL|method|newInstance (Class<?> actualType, Class<T> expectedType)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|actualType
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|expectedType
parameter_list|)
block|{
try|try
block|{
name|Object
name|value
init|=
name|actualType
operator|.
name|newInstance
argument_list|()
decl_stmt|;
return|return
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|cast
argument_list|(
name|expectedType
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * A helper method for performing an ordered comparison on the objects      * handling nulls and objects which do not handle sorting gracefully      */
DECL|method|compare (Object a, Object b)
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * A helper method for performing an ordered comparison on the objects      * handling nulls and objects which do not handle sorting gracefully      *      * @param a  the first object      * @param b  the second object      * @param ignoreCase  ignore case for string comparison      */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|compare (Object a, Object b, boolean ignoreCase)
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
name|b
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|Ordered
operator|&&
name|b
operator|instanceof
name|Ordered
condition|)
block|{
return|return
operator|(
operator|(
name|Ordered
operator|)
name|a
operator|)
operator|.
name|getOrder
argument_list|()
operator|-
operator|(
operator|(
name|Ordered
operator|)
name|b
operator|)
operator|.
name|getOrder
argument_list|()
return|;
block|}
if|if
condition|(
name|ignoreCase
operator|&&
name|a
operator|instanceof
name|String
operator|&&
name|b
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
operator|(
name|String
operator|)
name|a
operator|)
operator|.
name|compareToIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|b
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|Comparable
condition|)
block|{
name|Comparable
name|comparable
init|=
operator|(
name|Comparable
operator|)
name|a
decl_stmt|;
return|return
name|comparable
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
name|int
name|answer
init|=
name|a
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|0
condition|)
block|{
name|answer
operator|=
name|a
operator|.
name|hashCode
argument_list|()
operator|-
name|b
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Calling the Callable with the setting of TCCL with the camel context application classloader.      *      * @param call the Callable instance      * @param exchange the exchange      * @return the result of Callable return      */
DECL|method|callWithTCCL (Callable<?> call, Exchange exchange)
specifier|public
specifier|static
name|Object
name|callWithTCCL
parameter_list|(
name|Callable
argument_list|<
name|?
argument_list|>
name|call
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|ClassLoader
name|apcl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|exchange
operator|!=
literal|null
operator|&&
name|exchange
operator|.
name|getContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|apcl
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getApplicationContextClassLoader
argument_list|()
expr_stmt|;
block|}
return|return
name|callWithTCCL
argument_list|(
name|call
argument_list|,
name|apcl
argument_list|)
return|;
block|}
comment|/**      * Calling the Callable with the setting of TCCL with a given classloader.      *      * @param call        the Callable instance      * @param classloader the class loader      * @return the result of Callable return      */
DECL|method|callWithTCCL (Callable<?> call, ClassLoader classloader)
specifier|public
specifier|static
name|Object
name|callWithTCCL
parameter_list|(
name|Callable
argument_list|<
name|?
argument_list|>
name|call
parameter_list|,
name|ClassLoader
name|classloader
parameter_list|)
throws|throws
name|Exception
block|{
name|ClassLoader
name|tccl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|classloader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classloader
argument_list|)
expr_stmt|;
block|}
return|return
name|call
operator|.
name|call
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|tccl
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|tccl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Creates an iterable over the value if the value is a collection, an      * Object[], a String with values separated by comma,      * or a primitive type array; otherwise to simplify the caller's code,      * we just create a singleton collection iterator over a single value      *<p/>      * Will default use comma for String separating String values.      * This method does<b>not</b> allow empty values      *      * @param value  the value      * @return the iterable      */
DECL|method|createIterable (Object value)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|?
argument_list|>
name|createIterable
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|createIterable
argument_list|(
name|value
argument_list|,
name|DEFAULT_DELIMITER
argument_list|)
return|;
block|}
comment|/**      * Creates an iterable over the value if the value is a collection, an      * Object[], a String with values separated by the given delimiter,      * or a primitive type array; otherwise to simplify the caller's      * code, we just create a singleton collection iterator over a single value      *<p/>      * This method does<b>not</b> allow empty values      *      * @param value      the value      * @param delimiter  delimiter for separating String values      * @return the iterable      */
DECL|method|createIterable (Object value, String delimiter)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|?
argument_list|>
name|createIterable
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
return|return
name|createIterable
argument_list|(
name|value
argument_list|,
name|delimiter
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|createIterable (String value)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|createIterable
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|createIterable
argument_list|(
name|value
argument_list|,
name|DEFAULT_DELIMITER
argument_list|)
return|;
block|}
DECL|method|createIterable (String value, String delimiter)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|createIterable
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
return|return
name|createIterable
argument_list|(
name|value
argument_list|,
name|delimiter
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|createIterable (String value, String delimiter, boolean allowEmptyValues)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|createIterable
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|delimiter
parameter_list|,
name|boolean
name|allowEmptyValues
parameter_list|)
block|{
return|return
name|createIterable
argument_list|(
name|value
argument_list|,
name|delimiter
argument_list|,
name|allowEmptyValues
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|createIterable (String value, String delimiter, boolean allowEmptyValues, boolean pattern)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|createIterable
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|delimiter
parameter_list|,
name|boolean
name|allowEmptyValues
parameter_list|,
name|boolean
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|delimiter
operator|!=
literal|null
operator|&&
operator|(
name|pattern
operator|||
name|value
operator|.
name|contains
argument_list|(
name|delimiter
argument_list|)
operator|)
condition|)
block|{
name|String
name|del
decl_stmt|;
if|if
condition|(
name|DEFAULT_DELIMITER
operator|.
name|equals
argument_list|(
name|delimiter
argument_list|)
condition|)
block|{
comment|// we use the default delimiter which is a comma, then cater for bean expressions with OGNL
comment|// which may have balanced parentheses pairs as well.
comment|// if the value contains parentheses we need to balance those, to avoid iterating
comment|// in the middle of parentheses pair, so use this regular expression (a bit hard to read)
comment|// the regexp will split by comma, but honor parentheses pair that may include commas
comment|// as well, eg if value = "bean=foo?method=killer(a,b),bean=bar?method=great(a,b)"
comment|// then the regexp will split that into two:
comment|// -> bean=foo?method=killer(a,b)
comment|// -> bean=bar?method=great(a,b)
comment|// http://stackoverflow.com/questions/1516090/splitting-a-title-into-separate-parts
name|del
operator|=
literal|",(?!(?:[^\\(,]|[^\\)],[^\\)])+\\))"
expr_stmt|;
block|}
else|else
block|{
name|del
operator|=
name|delimiter
expr_stmt|;
block|}
return|return
parameter_list|()
lambda|->
operator|new
name|Scanner
argument_list|(
name|value
argument_list|,
name|del
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|allowEmptyValues
operator|||
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
comment|/**      * Creates an iterator over the value if the value is a collection, an      * Object[], a String with values separated by comma,      * or a primitive type array; otherwise to simplify the caller's code,      * we just create a singleton collection iterator over a single value      *<p/>      * Will default use comma for String separating String values.      * This method does<b>not</b> allow empty values      *      * @param value  the value      * @return the iterator      */
DECL|method|createIterator (Object value)
specifier|public
specifier|static
name|Iterator
argument_list|<
name|?
argument_list|>
name|createIterator
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|createIterator
argument_list|(
name|value
argument_list|,
name|DEFAULT_DELIMITER
argument_list|)
return|;
block|}
comment|/**      * Creates an iterator over the value if the value is a collection, an      * Object[], a String with values separated by the given delimiter,      * or a primitive type array; otherwise to simplify the caller's      * code, we just create a singleton collection iterator over a single value      *<p/>      * This method does<b>not</b> allow empty values      *      * @param value      the value      * @param delimiter  delimiter for separating String values      * @return the iterator      */
DECL|method|createIterator (Object value, String delimiter)
specifier|public
specifier|static
name|Iterator
argument_list|<
name|?
argument_list|>
name|createIterator
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
return|return
name|createIterator
argument_list|(
name|value
argument_list|,
name|delimiter
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Creates an iterator over the value if the value is a collection, an      * Object[], a String with values separated by the given delimiter,      * or a primitive type array; otherwise to simplify the caller's      * code, we just create a singleton collection iterator over a single value      *      *</p> In case of primitive type arrays the returned {@code Iterator} iterates      * over the corresponding Java primitive wrapper objects of the given elements      * inside the {@code value} array. That's we get an autoboxing of the primitive      * types here for free as it's also the case in Java language itself.      *      * @param value             the value      * @param delimiter         delimiter for separating String values      * @param allowEmptyValues  whether to allow empty values      * @return the iterator      */
DECL|method|createIterator (Object value, String delimiter, boolean allowEmptyValues)
specifier|public
specifier|static
name|Iterator
argument_list|<
name|?
argument_list|>
name|createIterator
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|delimiter
parameter_list|,
name|boolean
name|allowEmptyValues
parameter_list|)
block|{
return|return
name|createIterable
argument_list|(
name|value
argument_list|,
name|delimiter
argument_list|,
name|allowEmptyValues
argument_list|,
literal|false
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * Creates an iterator over the value if the value is a collection, an      * Object[], a String with values separated by the given delimiter,      * or a primitive type array; otherwise to simplify the caller's      * code, we just create a singleton collection iterator over a single value      *      *</p> In case of primitive type arrays the returned {@code Iterator} iterates      * over the corresponding Java primitive wrapper objects of the given elements      * inside the {@code value} array. That's we get an autoboxing of the primitive      * types here for free as it's also the case in Java language itself.      *      * @param value             the value      * @param delimiter         delimiter for separating String values      * @param allowEmptyValues  whether to allow empty values      * @param pattern           whether the delimiter is a pattern      * @return the iterator      */
DECL|method|createIterator (Object value, String delimiter, boolean allowEmptyValues, boolean pattern)
specifier|public
specifier|static
name|Iterator
argument_list|<
name|?
argument_list|>
name|createIterator
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|delimiter
parameter_list|,
name|boolean
name|allowEmptyValues
parameter_list|,
name|boolean
name|pattern
parameter_list|)
block|{
return|return
name|createIterable
argument_list|(
name|value
argument_list|,
name|delimiter
argument_list|,
name|allowEmptyValues
argument_list|,
name|pattern
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * Creates an iterable over the value if the value is a collection, an      * Object[], a String with values separated by the given delimiter,      * or a primitive type array; otherwise to simplify the caller's      * code, we just create a singleton collection iterator over a single value      *      *</p> In case of primitive type arrays the returned {@code Iterable} iterates      * over the corresponding Java primitive wrapper objects of the given elements      * inside the {@code value} array. That's we get an autoboxing of the primitive      * types here for free as it's also the case in Java language itself.      *      * @param value             the value      * @param delimiter         delimiter for separating String values      * @param allowEmptyValues  whether to allow empty values      * @return the iterable      * @see Iterable      */
DECL|method|createIterable (Object value, String delimiter, final boolean allowEmptyValues)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|?
argument_list|>
name|createIterable
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|delimiter
parameter_list|,
specifier|final
name|boolean
name|allowEmptyValues
parameter_list|)
block|{
return|return
name|createIterable
argument_list|(
name|value
argument_list|,
name|delimiter
argument_list|,
name|allowEmptyValues
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Creates an iterable over the value if the value is a collection, an      * Object[], a String with values separated by the given delimiter,      * or a primitive type array; otherwise to simplify the caller's      * code, we just create a singleton collection iterator over a single value      *      *</p> In case of primitive type arrays the returned {@code Iterable} iterates      * over the corresponding Java primitive wrapper objects of the given elements      * inside the {@code value} array. That's we get an autoboxing of the primitive      * types here for free as it's also the case in Java language itself.      *      * @param value             the value      * @param delimiter         delimiter for separating String values      * @param allowEmptyValues  whether to allow empty values      * @param pattern           whether the delimiter is a pattern      * @return the iterable      * @see Iterable      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createIterable (Object value, String delimiter, final boolean allowEmptyValues, final boolean pattern)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|?
argument_list|>
name|createIterable
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|delimiter
parameter_list|,
specifier|final
name|boolean
name|allowEmptyValues
parameter_list|,
specifier|final
name|boolean
name|pattern
parameter_list|)
block|{
comment|// if its a message than we want to iterate its body
if|if
condition|(
name|value
operator|instanceof
name|Message
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|Message
operator|)
name|value
operator|)
operator|.
name|getBody
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Iterator
condition|)
block|{
specifier|final
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iterator
init|=
operator|(
name|Iterator
argument_list|<
name|Object
argument_list|>
operator|)
name|value
decl_stmt|;
return|return
operator|new
name|Iterable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|iterator
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Iterable
condition|)
block|{
return|return
operator|(
name|Iterable
argument_list|<
name|Object
argument_list|>
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|Object
name|array
init|=
name|value
decl_stmt|;
return|return
call|(
name|Iterable
argument_list|<
name|Object
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|Iterator
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|idx
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|idx
operator|<
name|Array
operator|.
name|getLength
argument_list|(
name|array
argument_list|)
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"no more element available for '"
operator|+
name|array
operator|+
literal|"' at the index "
operator|+
name|idx
argument_list|)
throw|;
block|}
return|return
name|Array
operator|.
name|get
argument_list|(
name|array
argument_list|,
name|idx
operator|++
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|value
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|NodeList
condition|)
block|{
comment|// lets iterate through DOM results after performing XPaths
specifier|final
name|NodeList
name|nodeList
init|=
operator|(
name|NodeList
operator|)
name|value
decl_stmt|;
return|return
call|(
name|Iterable
argument_list|<
name|Node
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|Iterator
argument_list|<
name|Node
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|idx
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|idx
operator|<
name|nodeList
operator|.
name|getLength
argument_list|()
return|;
block|}
specifier|public
name|Node
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"no more element available for '"
operator|+
name|nodeList
operator|+
literal|"' at the index "
operator|+
name|idx
argument_list|)
throw|;
block|}
return|return
name|nodeList
operator|.
name|item
argument_list|(
name|idx
operator|++
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
specifier|final
name|String
name|s
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
comment|// this code is optimized to only use a Scanner if needed, eg there is a delimiter
if|if
condition|(
name|delimiter
operator|!=
literal|null
operator|&&
operator|(
name|pattern
operator|||
name|s
operator|.
name|contains
argument_list|(
name|delimiter
argument_list|)
operator|)
condition|)
block|{
name|String
name|del
decl_stmt|;
if|if
condition|(
name|DEFAULT_DELIMITER
operator|.
name|equals
argument_list|(
name|delimiter
argument_list|)
condition|)
block|{
comment|// we use the default delimiter which is a comma, then cater for bean expressions with OGNL
comment|// which may have balanced parentheses pairs as well.
comment|// if the value contains parentheses we need to balance those, to avoid iterating
comment|// in the middle of parentheses pair, so use this regular expression (a bit hard to read)
comment|// the regexp will split by comma, but honor parentheses pair that may include commas
comment|// as well, eg if value = "bean=foo?method=killer(a,b),bean=bar?method=great(a,b)"
comment|// then the regexp will split that into two:
comment|// -> bean=foo?method=killer(a,b)
comment|// -> bean=bar?method=great(a,b)
comment|// http://stackoverflow.com/questions/1516090/splitting-a-title-into-separate-parts
name|del
operator|=
literal|",(?!(?:[^\\(,]|[^\\)],[^\\)])+\\))"
expr_stmt|;
block|}
else|else
block|{
name|del
operator|=
name|delimiter
expr_stmt|;
block|}
return|return
call|(
name|Iterable
argument_list|<
name|String
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|Scanner
argument_list|(
name|s
argument_list|,
name|del
argument_list|)
return|;
block|}
else|else
block|{
return|return
call|(
name|Iterable
argument_list|<
name|Object
argument_list|>
call|)
argument_list|()
operator|->
block|{
comment|// use a plain iterator that returns the value as is as there are only a single value
return|return
operator|new
name|Iterator
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|idx
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|idx
operator|==
literal|0
operator|&&
operator|(
name|allowEmptyValues
operator|||
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|s
argument_list|)
operator|)
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"no more element available for '"
operator|+
name|s
operator|+
literal|"' at the index "
operator|+
name|idx
argument_list|)
throw|;
block|}
name|idx
operator|++
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
empty_stmt|;
block|}
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns true if the collection contains the specified value      */
DECL|method|contains (Object collectionOrArray, Object value)
specifier|public
specifier|static
name|boolean
name|contains
parameter_list|(
name|Object
name|collectionOrArray
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
comment|// favor String types
if|if
condition|(
name|collectionOrArray
operator|!=
literal|null
operator|&&
operator|(
name|collectionOrArray
operator|instanceof
name|StringBuffer
operator|||
name|collectionOrArray
operator|instanceof
name|StringBuilder
operator|)
condition|)
block|{
name|collectionOrArray
operator|=
name|collectionOrArray
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|(
name|value
operator|instanceof
name|StringBuffer
operator|||
name|value
operator|instanceof
name|StringBuilder
operator|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|collectionOrArray
operator|instanceof
name|Collection
condition|)
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|collectionOrArray
decl_stmt|;
return|return
name|collection
operator|.
name|contains
argument_list|(
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|collectionOrArray
operator|instanceof
name|String
operator|&&
name|value
operator|instanceof
name|String
condition|)
block|{
name|String
name|str
init|=
operator|(
name|String
operator|)
name|collectionOrArray
decl_stmt|;
name|String
name|subStr
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
return|return
name|str
operator|.
name|contains
argument_list|(
name|subStr
argument_list|)
return|;
block|}
else|else
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|iter
init|=
name|createIterator
argument_list|(
name|collectionOrArray
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|value
argument_list|,
name|iter
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns true if the collection contains the specified value by considering case insensitivity      */
DECL|method|containsIgnoreCase (Object collectionOrArray, Object value)
specifier|public
specifier|static
name|boolean
name|containsIgnoreCase
parameter_list|(
name|Object
name|collectionOrArray
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
comment|// favor String types
if|if
condition|(
name|collectionOrArray
operator|!=
literal|null
operator|&&
operator|(
name|collectionOrArray
operator|instanceof
name|StringBuffer
operator|||
name|collectionOrArray
operator|instanceof
name|StringBuilder
operator|)
condition|)
block|{
name|collectionOrArray
operator|=
name|collectionOrArray
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|(
name|value
operator|instanceof
name|StringBuffer
operator|||
name|value
operator|instanceof
name|StringBuilder
operator|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|collectionOrArray
operator|instanceof
name|Collection
condition|)
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|collectionOrArray
decl_stmt|;
return|return
name|collection
operator|.
name|contains
argument_list|(
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|collectionOrArray
operator|instanceof
name|String
operator|&&
name|value
operator|instanceof
name|String
condition|)
block|{
name|String
name|str
init|=
operator|(
name|String
operator|)
name|collectionOrArray
decl_stmt|;
name|String
name|subStr
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
return|return
name|StringHelper
operator|.
name|containsIgnoreCase
argument_list|(
name|str
argument_list|,
name|subStr
argument_list|)
return|;
block|}
else|else
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|iter
init|=
name|createIterator
argument_list|(
name|collectionOrArray
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equalIgnoreCase
argument_list|(
name|value
argument_list|,
name|iter
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

