begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExtendedCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PropertyBindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|GeneratedPropertyConfigurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PropertyConfigurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringQuoteHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
import|;
end_import

begin_comment
comment|/**  * A convenient support class for binding String valued properties to an instance which  * uses a set of conventions:  *<ul>  *<li>property placeholders - Keys and values using Camels property placeholder will be resolved</li>  *<li>nested - Properties can be nested using the dot syntax (OGNL and builder pattern using with as prefix), eg foo.bar=123</li>  *<li>map</li> - Properties can lookup in Map's using map syntax, eg foo[bar] where foo is the name of the property that is a Map instance, and bar is the name of the key.</li>  *<li>list</li> - Properties can refer or add to in List's using list syntax, eg foo[0] where foo is the name of the property that is a  *                     List instance, and 0 is the index. To refer to the last element, then use last as key.</li>  *<li>reference by bean id - Values can refer to other beans in the registry by prefixing with with # or #bean: eg #myBean or #bean:myBean</li>  *<li>reference by type - Values can refer to singleton beans by their type in the registry by prefixing with #type: syntax, eg #type:com.foo.MyClassType</li>  *<li>autowire by type - Values can refer to singleton beans by auto wiring by setting the value to #autowired</li>  *<li>reference new class - Values can refer to creating new beans by their class name by prefixing with #class, eg #class:com.foo.MyClassType.  *                               The class is created using a default no-arg constructor, however if you need to create the instance via a factory method  *                               then you specify the method as shown: #class:com.foo.MyClassType#myFactoryMethod.  *                               Or if you need to create the instance via constructor parameters then you can specify the parameters as shown:  *                               #class:com.foo.MyClass('Hello World', 5, true)</li>.  *<li>ignore case - Whether to ignore case for property keys<li>  *</ul>  */
end_comment

begin_class
DECL|class|PropertyBindingSupport
specifier|public
specifier|final
class|class
name|PropertyBindingSupport
block|{
comment|/**      * To use a fluent builder style to configure this property binding support.      */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|target
specifier|private
name|Object
name|target
decl_stmt|;
DECL|field|properties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
DECL|field|removeParameters
specifier|private
name|boolean
name|removeParameters
init|=
literal|true
decl_stmt|;
DECL|field|mandatory
specifier|private
name|boolean
name|mandatory
decl_stmt|;
DECL|field|nesting
specifier|private
name|boolean
name|nesting
init|=
literal|true
decl_stmt|;
DECL|field|deepNesting
specifier|private
name|boolean
name|deepNesting
init|=
literal|true
decl_stmt|;
DECL|field|reference
specifier|private
name|boolean
name|reference
init|=
literal|true
decl_stmt|;
DECL|field|placeholder
specifier|private
name|boolean
name|placeholder
init|=
literal|true
decl_stmt|;
DECL|field|fluentBuilder
specifier|private
name|boolean
name|fluentBuilder
init|=
literal|true
decl_stmt|;
DECL|field|allowPrivateSetter
specifier|private
name|boolean
name|allowPrivateSetter
init|=
literal|true
decl_stmt|;
DECL|field|ignoreCase
specifier|private
name|boolean
name|ignoreCase
decl_stmt|;
DECL|field|optionPrefix
specifier|private
name|String
name|optionPrefix
decl_stmt|;
DECL|field|configurer
specifier|private
name|PropertyConfigurer
name|configurer
decl_stmt|;
comment|/**          * CamelContext to be used          */
DECL|method|withCamelContext (CamelContext camelContext)
specifier|public
name|Builder
name|withCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Target object that should have parameters bound          */
DECL|method|withTarget (Object target)
specifier|public
name|Builder
name|withTarget
parameter_list|(
name|Object
name|target
parameter_list|)
block|{
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The properties to use for binding          */
DECL|method|withProperties (Map<String, Object> properties)
specifier|public
name|Builder
name|withProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|properties
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
else|else
block|{
comment|// there may be existing options so add those if missing
comment|// we need to mutate existing as we are may be removing bound properties
name|this
operator|.
name|properties
operator|.
name|forEach
argument_list|(
name|properties
operator|::
name|putIfAbsent
argument_list|)
expr_stmt|;
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**          * Adds property to use for binding          */
DECL|method|withProperty (String key, Object value)
specifier|public
name|Builder
name|withProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|properties
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|properties
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether parameters should be removed when its bound          */
DECL|method|withRemoveParameters (boolean removeParameters)
specifier|public
name|Builder
name|withRemoveParameters
parameter_list|(
name|boolean
name|removeParameters
parameter_list|)
block|{
name|this
operator|.
name|removeParameters
operator|=
name|removeParameters
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether all parameters should be mandatory and successfully bound          */
DECL|method|withMandatory (boolean mandatory)
specifier|public
name|Builder
name|withMandatory
parameter_list|(
name|boolean
name|mandatory
parameter_list|)
block|{
name|this
operator|.
name|mandatory
operator|=
name|mandatory
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether nesting is in use          */
DECL|method|withNesting (boolean nesting)
specifier|public
name|Builder
name|withNesting
parameter_list|(
name|boolean
name|nesting
parameter_list|)
block|{
name|this
operator|.
name|nesting
operator|=
name|nesting
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether deep nesting is in use, where Camel will attempt to walk as deep as possible by creating new objects in the OGNL graph if          * a property has a setter and the object can be created from a default no-arg constructor.          */
DECL|method|withDeepNesting (boolean deepNesting)
specifier|public
name|Builder
name|withDeepNesting
parameter_list|(
name|boolean
name|deepNesting
parameter_list|)
block|{
name|this
operator|.
name|deepNesting
operator|=
name|deepNesting
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether reference parameter (syntax starts with #) is in use          */
DECL|method|withReference (boolean reference)
specifier|public
name|Builder
name|withReference
parameter_list|(
name|boolean
name|reference
parameter_list|)
block|{
name|this
operator|.
name|reference
operator|=
name|reference
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use Camels property placeholder to resolve placeholders on keys and values          */
DECL|method|withPlaceholder (boolean placeholder)
specifier|public
name|Builder
name|withPlaceholder
parameter_list|(
name|boolean
name|placeholder
parameter_list|)
block|{
name|this
operator|.
name|placeholder
operator|=
name|placeholder
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether fluent builder is allowed as a valid getter/setter          */
DECL|method|withFluentBuilder (boolean fluentBuilder)
specifier|public
name|Builder
name|withFluentBuilder
parameter_list|(
name|boolean
name|fluentBuilder
parameter_list|)
block|{
name|this
operator|.
name|fluentBuilder
operator|=
name|fluentBuilder
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether properties should be filtered by prefix.         *          * Note that the prefix is removed from the key before the property is bound.          */
DECL|method|withAllowPrivateSetter (boolean allowPrivateSetter)
specifier|public
name|Builder
name|withAllowPrivateSetter
parameter_list|(
name|boolean
name|allowPrivateSetter
parameter_list|)
block|{
name|this
operator|.
name|allowPrivateSetter
operator|=
name|allowPrivateSetter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to ignore case in the property names (keys).          */
DECL|method|withIgnoreCase (boolean ignoreCase)
specifier|public
name|Builder
name|withIgnoreCase
parameter_list|(
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|this
operator|.
name|ignoreCase
operator|=
name|ignoreCase
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether properties should be filtered by prefix.         *          * Note that the prefix is removed from the key before the property is bound.          */
DECL|method|withOptionPrefix (String optionPrefix)
specifier|public
name|Builder
name|withOptionPrefix
parameter_list|(
name|String
name|optionPrefix
parameter_list|)
block|{
name|this
operator|.
name|optionPrefix
operator|=
name|optionPrefix
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use the configurer to configure the properties.          */
DECL|method|withConfigurer (PropertyConfigurer configurer)
specifier|public
name|Builder
name|withConfigurer
parameter_list|(
name|PropertyConfigurer
name|configurer
parameter_list|)
block|{
name|this
operator|.
name|configurer
operator|=
name|configurer
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Binds the properties to the target object, and removes the property that was bound from properties.          *          * @return true if one or more properties was bound          */
DECL|method|bind ()
specifier|public
name|boolean
name|bind
parameter_list|()
block|{
comment|// mandatory parameters
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|target
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|properties
argument_list|,
literal|"properties"
argument_list|)
expr_stmt|;
return|return
name|doBindProperties
argument_list|(
name|camelContext
argument_list|,
name|target
argument_list|,
name|properties
argument_list|,
name|optionPrefix
argument_list|,
name|ignoreCase
argument_list|,
name|removeParameters
argument_list|,
name|mandatory
argument_list|,
name|nesting
argument_list|,
name|deepNesting
argument_list|,
name|fluentBuilder
argument_list|,
name|allowPrivateSetter
argument_list|,
name|reference
argument_list|,
name|placeholder
argument_list|,
name|configurer
argument_list|)
return|;
block|}
comment|/**          * Binds the properties to the target object, and removes the property that was bound from properties.          *          * @param camelContext the camel context          * @param target       the target object          * @param properties   the properties where the bound properties will be removed from          * @return true if one or more properties was bound          */
DECL|method|bind (CamelContext camelContext, Object target, Map<String, Object> properties)
specifier|public
name|boolean
name|bind
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Object
name|target
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|CamelContext
name|context
init|=
name|camelContext
operator|!=
literal|null
condition|?
name|camelContext
else|:
name|this
operator|.
name|camelContext
decl_stmt|;
name|Object
name|obj
init|=
name|target
operator|!=
literal|null
condition|?
name|target
else|:
name|this
operator|.
name|target
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|prop
init|=
name|properties
operator|!=
literal|null
condition|?
name|properties
else|:
name|this
operator|.
name|properties
decl_stmt|;
comment|// mandatory parameters
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|context
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|obj
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|prop
argument_list|,
literal|"properties"
argument_list|)
expr_stmt|;
return|return
name|doBindProperties
argument_list|(
name|context
argument_list|,
name|obj
argument_list|,
name|prop
argument_list|,
name|optionPrefix
argument_list|,
name|ignoreCase
argument_list|,
name|removeParameters
argument_list|,
name|mandatory
argument_list|,
name|nesting
argument_list|,
name|deepNesting
argument_list|,
name|fluentBuilder
argument_list|,
name|allowPrivateSetter
argument_list|,
name|reference
argument_list|,
name|placeholder
argument_list|,
name|configurer
argument_list|)
return|;
block|}
comment|/**          * Binds the property to the target object.          *          * @param camelContext the camel context          * @param target       the target object          * @param key          the property key          * @param value        the property value          * @return true if the property was bound          */
DECL|method|bind (CamelContext camelContext, Object target, String key, Object value)
specifier|public
name|boolean
name|bind
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Object
name|target
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|target
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|key
argument_list|,
literal|"key"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|value
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|doBindProperties
argument_list|(
name|camelContext
argument_list|,
name|target
argument_list|,
name|properties
argument_list|,
name|optionPrefix
argument_list|,
name|ignoreCase
argument_list|,
name|removeParameters
argument_list|,
name|mandatory
argument_list|,
name|nesting
argument_list|,
name|deepNesting
argument_list|,
name|fluentBuilder
argument_list|,
name|allowPrivateSetter
argument_list|,
name|reference
argument_list|,
name|placeholder
argument_list|,
name|configurer
argument_list|)
return|;
block|}
block|}
DECL|method|PropertyBindingSupport ()
specifier|private
name|PropertyBindingSupport
parameter_list|()
block|{     }
DECL|method|build ()
specifier|public
specifier|static
name|Builder
name|build
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|OnAutowiring
specifier|public
interface|interface
name|OnAutowiring
block|{
comment|/**          * Callback when a property was autowired on a bean          *          * @param target       the targeted bean          * @param propertyName the name of the property          * @param propertyType the type of the property          * @param value        the property value          */
DECL|method|onAutowire (Object target, String propertyName, Class propertyType, Object value)
name|void
name|onAutowire
parameter_list|(
name|Object
name|target
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Class
name|propertyType
parameter_list|,
name|Object
name|value
parameter_list|)
function_decl|;
block|}
comment|/**      * This will discover all the properties on the target, and automatic bind the properties that are null by      * looking up in the registry to see if there is a single instance of the same type as the property.      * This is used for convention over configuration to automatic configure resources such as DataSource, Amazon Logins and      * so on.      *      * @param camelContext the camel context      * @param target       the target object      * @return true if one ore more properties was auto wired      */
DECL|method|autowireSingletonPropertiesFromRegistry (CamelContext camelContext, Object target)
specifier|public
specifier|static
name|boolean
name|autowireSingletonPropertiesFromRegistry
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Object
name|target
parameter_list|)
block|{
return|return
name|autowireSingletonPropertiesFromRegistry
argument_list|(
name|camelContext
argument_list|,
name|target
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * This will discover all the properties on the target, and automatic bind the properties by      * looking up in the registry to see if there is a single instance of the same type as the property.      * This is used for convention over configuration to automatic configure resources such as DataSource, Amazon Logins and      * so on.      *      * @param camelContext the camel context      * @param target       the target object      * @param bindNullOnly whether to only autowire if the property has no default value or has not been configured explicit      * @param deepNesting  whether to attempt to walk as deep down the object graph by creating new empty objects on the way if needed (Camel can only create      *                     new empty objects if they have a default no-arg constructor, also mind that this may lead to creating many empty objects, even      *                     if they will not have any objects autowired from the registry, so use this with caution)      * @param callback     optional callback when a property was auto wired      * @return true if one ore more properties was auto wired      */
DECL|method|autowireSingletonPropertiesFromRegistry (CamelContext camelContext, Object target, boolean bindNullOnly, boolean deepNesting, OnAutowiring callback)
specifier|public
specifier|static
name|boolean
name|autowireSingletonPropertiesFromRegistry
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Object
name|target
parameter_list|,
name|boolean
name|bindNullOnly
parameter_list|,
name|boolean
name|deepNesting
parameter_list|,
name|OnAutowiring
name|callback
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Object
argument_list|>
name|parents
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
return|return
name|doAutowireSingletonPropertiesFromRegistry
argument_list|(
name|camelContext
argument_list|,
name|target
argument_list|,
name|parents
argument_list|,
name|bindNullOnly
argument_list|,
name|deepNesting
argument_list|,
name|callback
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PropertyBindingException
argument_list|(
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|doAutowireSingletonPropertiesFromRegistry (CamelContext camelContext, Object target, Set<Object> parents, boolean bindNullOnly, boolean deepNesting, OnAutowiring callback)
specifier|private
specifier|static
name|boolean
name|doAutowireSingletonPropertiesFromRegistry
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Object
name|target
parameter_list|,
name|Set
argument_list|<
name|Object
argument_list|>
name|parents
parameter_list|,
name|boolean
name|bindNullOnly
parameter_list|,
name|boolean
name|deepNesting
parameter_list|,
name|OnAutowiring
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|camelContext
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanIntrospection
argument_list|()
operator|.
name|getProperties
argument_list|(
name|target
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|boolean
name|hit
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// skip based on some known names
if|if
condition|(
literal|"basicPropertyBinding"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|boolean
name|skip
init|=
name|parents
operator|.
name|contains
argument_list|(
name|value
argument_list|)
operator|||
name|value
operator|instanceof
name|CamelContext
decl_stmt|;
if|if
condition|(
name|skip
condition|)
block|{
comment|// we have already covered this as parent of parents so dont walk down this as we want to avoid
comment|// circular dependencies when walking the OGNL graph, also we dont want to walk down CamelContext
continue|continue;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|getGetterType
argument_list|(
name|camelContext
argument_list|,
name|target
argument_list|,
name|key
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|CamelContext
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// the camel context is usually bound by other means so don't bind it to the target object
comment|// and most important do not walk it down and re-configure it.
comment|//
comment|// In some cases, such as Camel Quarkus, the Registry and the Context itself are added to
comment|// the IoC Container and an attempt to auto re-wire the Context may ends up in a circular
comment|// reference and a subsequent stack overflow.
continue|continue;
block|}
if|if
condition|(
name|isComplexUserType
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// if the property has not been set and its a complex type (not simple or string etc)
if|if
condition|(
operator|!
name|bindNullOnly
operator|||
name|value
operator|==
literal|null
condition|)
block|{
name|Set
name|lookup
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByType
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|lookup
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|value
operator|=
name|lookup
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|hit
operator||=
name|camelContext
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanIntrospection
argument_list|()
operator|.
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|target
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|hit
operator|&&
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|onAutowire
argument_list|(
name|target
argument_list|,
name|key
argument_list|,
name|type
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// attempt to create new instances to walk down the tree if its null (deepNesting option)
if|if
condition|(
name|value
operator|==
literal|null
operator|&&
name|deepNesting
condition|)
block|{
comment|// okay is there a setter so we can create a new instance and set it automatic
name|Method
name|method
init|=
name|findBestSetterMethod
argument_list|(
name|camelContext
argument_list|,
name|target
operator|.
name|getClass
argument_list|()
argument_list|,
name|key
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|parameterType
operator|!=
literal|null
operator|&&
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|hasDefaultPublicNoArgConstructor
argument_list|(
name|parameterType
argument_list|)
condition|)
block|{
name|Object
name|instance
init|=
name|camelContext
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|parameterType
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|target
argument_list|,
name|instance
argument_list|)
expr_stmt|;
name|target
operator|=
name|instance
expr_stmt|;
comment|// remember this as parent and also autowire nested properties
comment|// do not walk down if it point to our-selves (circular reference)
name|parents
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|value
operator|=
name|instance
expr_stmt|;
name|hit
operator||=
name|doAutowireSingletonPropertiesFromRegistry
argument_list|(
name|camelContext
argument_list|,
name|value
argument_list|,
name|parents
argument_list|,
name|bindNullOnly
argument_list|,
name|deepNesting
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// remember this as parent and also autowire nested properties
comment|// do not walk down if it point to our-selves (circular reference)
name|parents
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|hit
operator||=
name|doAutowireSingletonPropertiesFromRegistry
argument_list|(
name|camelContext
argument_list|,
name|value
argument_list|,
name|parents
argument_list|,
name|bindNullOnly
argument_list|,
name|deepNesting
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|hit
return|;
block|}
comment|/**      * Binds the properties to the target object, and removes the property that was bound from properties.      *<p/>      * This method uses the default settings, and if you need to configure any setting then use      * the fluent builder {@link #build()} where each option can be customized, such as whether parameter      * should be removed, or whether options are mandatory etc.      *      * @param camelContext the camel context      * @param target       the target object      * @param properties   the properties where the bound properties will be removed from      * @return true if one or more properties was bound      * @see #build()      */
DECL|method|bindProperties (CamelContext camelContext, Object target, Map<String, Object> properties)
specifier|public
specifier|static
name|boolean
name|bindProperties
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Object
name|target
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
comment|// mandatory parameters
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|target
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|properties
argument_list|,
literal|"properties"
argument_list|)
expr_stmt|;
return|return
name|PropertyBindingSupport
operator|.
name|build
argument_list|()
operator|.
name|bind
argument_list|(
name|camelContext
argument_list|,
name|target
argument_list|,
name|properties
argument_list|)
return|;
block|}
comment|/**      * Binds the properties with the given prefix to the target object, and removes the property that was bound from properties.      * Note that the prefix is removed from the key before the property is bound.      *      * @param camelContext       the camel context      * @param target             the target object      * @param properties         the properties where the bound properties will be removed from      * @param optionPrefix       the prefix used to filter properties      * @param ignoreCase         whether to ignore case for property keys      * @param removeParameter    whether to remove bound parameters      * @param mandatory          whether all parameters must be bound      * @param nesting            whether nesting is in use      * @param deepNesting        whether deep nesting is in use, where Camel will attempt to walk as deep as possible by creating new objects in the OGNL graph if      *                           a property has a setter and the object can be created from a default no-arg constructor.      * @param fluentBuilder      whether fluent builder is allowed as a valid getter/setter      * @param allowPrivateSetter whether autowiring components allows to use private setter method when setting the value      * @param reference          whether reference parameter (syntax starts with #) is in use      * @param placeholder        whether to use Camels property placeholder to resolve placeholders on keys and values      * @param configurer         to use an optional {@link org.apache.camel.spi.PropertyConfigurer} to configure the properties      * @return true if one or more properties was bound      */
DECL|method|doBindProperties (CamelContext camelContext, Object target, Map<String, Object> properties, String optionPrefix, boolean ignoreCase, boolean removeParameter, boolean mandatory, boolean nesting, boolean deepNesting, boolean fluentBuilder, boolean allowPrivateSetter, boolean reference, boolean placeholder, PropertyConfigurer configurer)
specifier|private
specifier|static
name|boolean
name|doBindProperties
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Object
name|target
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|,
name|String
name|optionPrefix
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|,
name|boolean
name|removeParameter
parameter_list|,
name|boolean
name|mandatory
parameter_list|,
name|boolean
name|nesting
parameter_list|,
name|boolean
name|deepNesting
parameter_list|,
name|boolean
name|fluentBuilder
parameter_list|,
name|boolean
name|allowPrivateSetter
parameter_list|,
name|boolean
name|reference
parameter_list|,
name|boolean
name|placeholder
parameter_list|,
name|PropertyConfigurer
name|configurer
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|target
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|properties
argument_list|,
literal|"properties"
argument_list|)
expr_stmt|;
name|boolean
name|rc
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|configurer
operator|instanceof
name|GeneratedPropertyConfigurer
condition|)
block|{
name|GeneratedPropertyConfigurer
name|gen
init|=
operator|(
name|GeneratedPropertyConfigurer
operator|)
name|configurer
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iter
init|=
name|properties
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|boolean
name|valid
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|nesting
condition|)
block|{
comment|// property configurer does not support nested names so skip if the name has a dot
name|valid
operator|=
name|key
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|==
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|valid
condition|)
block|{
comment|// GeneratedPropertyConfigurer works by invoking the methods directly but it does
comment|// not resolve property placeholders eventually defined in the value before invoking
comment|// the setter.
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|value
operator|=
name|camelContext
operator|.
name|resolvePropertyPlaceholders
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|value
operator|=
name|resolveValue
argument_list|(
name|camelContext
argument_list|,
name|target
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|ignoreCase
argument_list|,
name|fluentBuilder
argument_list|,
name|allowPrivateSetter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PropertyBindingException
argument_list|(
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|boolean
name|hit
init|=
name|gen
operator|.
name|configure
argument_list|(
name|camelContext
argument_list|,
name|target
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|ignoreCase
argument_list|)
decl_stmt|;
if|if
condition|(
name|removeParameter
operator|&&
name|hit
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|rc
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// must set reference parameters first before the other bindings
name|int
name|size
init|=
name|properties
operator|.
name|size
argument_list|()
decl_stmt|;
name|setReferenceProperties
argument_list|(
name|camelContext
argument_list|,
name|target
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|rc
operator||=
name|properties
operator|.
name|size
argument_list|()
operator|!=
name|size
expr_stmt|;
name|String
name|uOptionPrefix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|ignoreCase
operator|&&
name|isNotEmpty
argument_list|(
name|optionPrefix
argument_list|)
condition|)
block|{
name|uOptionPrefix
operator|=
name|optionPrefix
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|iter
init|=
name|properties
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|optionPrefix
argument_list|)
condition|)
block|{
name|boolean
name|match
init|=
name|key
operator|.
name|startsWith
argument_list|(
name|optionPrefix
argument_list|)
operator|||
name|ignoreCase
operator|&&
name|key
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|startsWith
argument_list|(
name|uOptionPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|match
condition|)
block|{
continue|continue;
block|}
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
name|optionPrefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|bound
init|=
name|bindProperty
argument_list|(
name|camelContext
argument_list|,
name|target
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|ignoreCase
argument_list|,
name|nesting
argument_list|,
name|deepNesting
argument_list|,
name|fluentBuilder
argument_list|,
name|allowPrivateSetter
argument_list|,
name|reference
argument_list|,
name|placeholder
argument_list|)
decl_stmt|;
if|if
condition|(
name|bound
operator|&&
name|removeParameter
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|rc
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|mandatory
operator|&&
operator|!
name|bound
condition|)
block|{
throw|throw
operator|new
name|PropertyBindingException
argument_list|(
name|target
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
throw|;
block|}
block|}
return|return
name|rc
return|;
block|}
DECL|method|bindProperty (CamelContext camelContext, Object target, String name, Object value, boolean ignoreCase, boolean nesting, boolean deepNesting, boolean fluentBuilder, boolean allowPrivateSetter, boolean reference, boolean placeholder)
specifier|private
specifier|static
name|boolean
name|bindProperty
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Object
name|target
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|,
name|boolean
name|nesting
parameter_list|,
name|boolean
name|deepNesting
parameter_list|,
name|boolean
name|fluentBuilder
parameter_list|,
name|boolean
name|allowPrivateSetter
parameter_list|,
name|boolean
name|reference
parameter_list|,
name|boolean
name|placeholder
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|target
operator|!=
literal|null
operator|&&
name|name
operator|!=
literal|null
condition|)
block|{
return|return
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
literal|false
argument_list|,
name|ignoreCase
argument_list|,
name|nesting
argument_list|,
name|deepNesting
argument_list|,
name|fluentBuilder
argument_list|,
name|allowPrivateSetter
argument_list|,
name|reference
argument_list|,
name|placeholder
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PropertyBindingException
argument_list|(
name|target
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|resolveValue (CamelContext context, Object target, String name, Object value, boolean ignoreCase, boolean fluentBuilder, boolean allowPrivateSetter)
specifier|private
specifier|static
name|Object
name|resolveValue
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Object
name|target
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|,
name|boolean
name|fluentBuilder
parameter_list|,
name|boolean
name|allowPrivateSetter
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"#class:"
argument_list|)
condition|)
block|{
comment|// its a new class to be created
name|String
name|className
init|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|String
name|factoryMethod
init|=
literal|null
decl_stmt|;
name|String
name|parameters
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|endsWith
argument_list|(
literal|")"
argument_list|)
operator|&&
name|className
operator|.
name|indexOf
argument_list|(
literal|'('
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|parameters
operator|=
name|StringHelper
operator|.
name|after
argument_list|(
name|className
argument_list|,
literal|"("
argument_list|)
expr_stmt|;
name|parameters
operator|=
name|parameters
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|parameters
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// clip last )
name|className
operator|=
name|StringHelper
operator|.
name|before
argument_list|(
name|className
argument_list|,
literal|"("
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|factoryMethod
operator|=
name|StringHelper
operator|.
name|after
argument_list|(
name|className
argument_list|,
literal|"#"
argument_list|)
expr_stmt|;
name|className
operator|=
name|StringHelper
operator|.
name|before
argument_list|(
name|className
argument_list|,
literal|"#"
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|factoryMethod
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|context
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|type
argument_list|,
name|factoryMethod
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
comment|// special to support constructor parameters
name|value
operator|=
name|newInstanceConstructorParameters
argument_list|(
name|context
argument_list|,
name|type
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|context
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot create instance of class: "
operator|+
name|className
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"#type:"
argument_list|)
condition|)
block|{
comment|// its reference by type, so lookup the actual value and use it if there is only one instance in the registry
name|String
name|typeName
init|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|?
argument_list|>
name|types
init|=
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByType
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|value
operator|=
name|types
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot select single type: "
operator|+
name|typeName
operator|+
literal|" as there are "
operator|+
name|types
operator|.
name|size
argument_list|()
operator|+
literal|" beans in the registry with this type"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot select single type: "
operator|+
name|typeName
operator|+
literal|" as there are no beans in the registry with this type"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"#autowired"
argument_list|)
condition|)
block|{
comment|// we should get the type from the setter
name|Method
name|method
init|=
name|findBestSetterMethod
argument_list|(
name|context
argument_list|,
name|target
operator|.
name|getClass
argument_list|()
argument_list|,
name|name
argument_list|,
name|fluentBuilder
argument_list|,
name|allowPrivateSetter
argument_list|,
name|ignoreCase
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Set
argument_list|<
name|?
argument_list|>
name|types
init|=
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByType
argument_list|(
name|parameterType
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|value
operator|=
name|types
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot select single type: "
operator|+
name|parameterType
operator|+
literal|" as there are "
operator|+
name|types
operator|.
name|size
argument_list|()
operator|+
literal|" beans in the registry with this type"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot select single type: "
operator|+
name|parameterType
operator|+
literal|" as there are no beans in the registry with this type"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot find setter method with name: "
operator|+
name|name
operator|+
literal|" on class: "
operator|+
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" to use for autowiring"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"#bean:"
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|value
operator|=
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByName
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|value
return|;
block|}
DECL|method|setProperty (CamelContext context, Object target, String name, Object value, boolean mandatory, boolean ignoreCase, boolean nesting, boolean deepNesting, boolean fluentBuilder, boolean allowPrivateSetter, boolean reference, boolean placeholder)
specifier|private
specifier|static
name|boolean
name|setProperty
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Object
name|target
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|mandatory
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|,
name|boolean
name|nesting
parameter_list|,
name|boolean
name|deepNesting
parameter_list|,
name|boolean
name|fluentBuilder
parameter_list|,
name|boolean
name|allowPrivateSetter
parameter_list|,
name|boolean
name|reference
parameter_list|,
name|boolean
name|placeholder
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|refName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|placeholder
condition|)
block|{
comment|// resolve property placeholders
name|name
operator|=
name|context
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
comment|// resolve property placeholders
name|value
operator|=
name|context
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|ognlPath
init|=
name|name
decl_stmt|;
comment|// if name has dot then we need to OGNL walk it
if|if
condition|(
name|nesting
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|parts
init|=
name|name
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|Object
name|newTarget
init|=
name|target
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|newClass
init|=
name|target
operator|.
name|getClass
argument_list|()
decl_stmt|;
comment|// we should only iterate until until 2nd last so we use -1 in the for loop
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|String
name|part
init|=
name|parts
index|[
name|i
index|]
decl_stmt|;
name|Object
name|prop
init|=
name|getOrElseProperty
argument_list|(
name|context
argument_list|,
name|newTarget
argument_list|,
name|part
argument_list|,
literal|null
argument_list|,
name|ignoreCase
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|deepNesting
condition|)
block|{
comment|// okay we cannot go further down
break|break;
block|}
comment|// okay is there a setter so we can create a new instance and set it automatic
name|Method
name|method
init|=
name|findBestSetterMethod
argument_list|(
name|context
argument_list|,
name|newClass
argument_list|,
name|part
argument_list|,
name|fluentBuilder
argument_list|,
name|allowPrivateSetter
argument_list|,
name|ignoreCase
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|instance
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parameterType
operator|!=
literal|null
operator|&&
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|hasDefaultPublicNoArgConstructor
argument_list|(
name|parameterType
argument_list|)
condition|)
block|{
name|instance
operator|=
name|context
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|parameterType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|newTarget
argument_list|,
name|instance
argument_list|)
expr_stmt|;
name|newTarget
operator|=
name|instance
expr_stmt|;
name|newClass
operator|=
name|newTarget
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|mandatory
condition|)
block|{
comment|// there is no getter with this given name, so lets report this as a problem
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find getter method: "
operator|+
name|part
operator|+
literal|" on bean: "
operator|+
name|newClass
operator|+
literal|" when binding property: "
operator|+
name|ognlPath
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|newTarget
operator|=
name|prop
expr_stmt|;
name|newClass
operator|=
name|newTarget
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newTarget
operator|!=
name|target
condition|)
block|{
comment|// okay we found a nested property, then lets change to use that
name|target
operator|=
name|newTarget
expr_stmt|;
name|name
operator|=
name|parts
index|[
name|parts
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|reference
operator|&&
name|value
operator|instanceof
name|String
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"#bean:"
argument_list|)
condition|)
block|{
comment|// okay its a reference so swap to lookup this which is already supported in IntrospectionSupport
name|refName
operator|=
literal|"#"
operator|+
operator|(
operator|(
name|String
operator|)
name|value
operator|)
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|value
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|resolveValue
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|ignoreCase
argument_list|,
name|fluentBuilder
argument_list|,
name|allowPrivateSetter
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|hit
init|=
name|context
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanIntrospection
argument_list|()
operator|.
name|setProperty
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|refName
argument_list|,
name|fluentBuilder
argument_list|,
name|allowPrivateSetter
argument_list|,
name|ignoreCase
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hit
operator|&&
name|mandatory
condition|)
block|{
comment|// there is no setter with this given name, so lets report this as a problem
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find setter method: "
operator|+
name|name
operator|+
literal|" on bean: "
operator|+
name|target
operator|+
literal|" of type: "
operator|+
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" when binding property: "
operator|+
name|ognlPath
argument_list|)
throw|;
block|}
return|return
name|hit
return|;
block|}
DECL|method|getOrElseProperty (CamelContext context, Object target, String property, Object defaultValue, boolean ignoreCase)
specifier|private
specifier|static
name|Object
name|getOrElseProperty
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Object
name|target
parameter_list|,
name|String
name|property
parameter_list|,
name|Object
name|defaultValue
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|String
name|key
init|=
name|property
decl_stmt|;
name|String
name|lookupKey
init|=
literal|null
decl_stmt|;
comment|// support maps in keys
if|if
condition|(
name|property
operator|.
name|contains
argument_list|(
literal|"["
argument_list|)
operator|&&
name|property
operator|.
name|endsWith
argument_list|(
literal|"]"
argument_list|)
condition|)
block|{
name|int
name|pos
init|=
name|property
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
decl_stmt|;
name|lookupKey
operator|=
name|property
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|,
name|property
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|key
operator|=
name|property
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
name|Object
name|answer
init|=
name|context
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanIntrospection
argument_list|()
operator|.
name|getOrElseProperty
argument_list|(
name|target
argument_list|,
name|key
argument_list|,
name|defaultValue
argument_list|,
name|ignoreCase
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|instanceof
name|Map
operator|&&
name|lookupKey
operator|!=
literal|null
condition|)
block|{
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|answer
decl_stmt|;
name|answer
operator|=
name|map
operator|.
name|getOrDefault
argument_list|(
name|lookupKey
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|answer
operator|instanceof
name|List
condition|)
block|{
name|List
name|list
init|=
operator|(
name|List
operator|)
name|answer
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|lookupKey
argument_list|)
condition|)
block|{
name|int
name|idx
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|lookupKey
argument_list|)
decl_stmt|;
name|answer
operator|=
name|list
operator|.
name|get
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|answer
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
name|list
operator|.
name|get
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|answer
operator|!=
literal|null
condition|?
name|answer
else|:
name|defaultValue
return|;
block|}
DECL|method|findBestSetterMethod (CamelContext context, Class clazz, String name, boolean fluentBuilder, boolean allowPrivateSetter, boolean ignoreCase)
specifier|private
specifier|static
name|Method
name|findBestSetterMethod
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Class
name|clazz
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|fluentBuilder
parameter_list|,
name|boolean
name|allowPrivateSetter
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
comment|// is there a direct setter?
name|Set
argument_list|<
name|Method
argument_list|>
name|candidates
init|=
name|context
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanIntrospection
argument_list|()
operator|.
name|findSetterMethods
argument_list|(
name|clazz
argument_list|,
name|name
argument_list|,
literal|false
argument_list|,
name|allowPrivateSetter
argument_list|,
name|ignoreCase
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidates
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|candidates
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
comment|// okay now try with builder pattern
if|if
condition|(
name|fluentBuilder
condition|)
block|{
name|candidates
operator|=
name|context
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanIntrospection
argument_list|()
operator|.
name|findSetterMethods
argument_list|(
name|clazz
argument_list|,
name|name
argument_list|,
name|fluentBuilder
argument_list|,
name|allowPrivateSetter
argument_list|,
name|ignoreCase
argument_list|)
expr_stmt|;
if|if
condition|(
name|candidates
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|candidates
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getGetterType (CamelContext context, Object target, String name, boolean ignoreCase)
specifier|private
specifier|static
name|Class
name|getGetterType
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Object
name|target
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|ignoreCase
condition|)
block|{
name|Method
name|getter
init|=
name|context
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanIntrospection
argument_list|()
operator|.
name|getPropertyGetter
argument_list|(
name|target
operator|.
name|getClass
argument_list|()
argument_list|,
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|getter
operator|!=
literal|null
condition|)
block|{
return|return
name|getter
operator|.
name|getReturnType
argument_list|()
return|;
block|}
block|}
else|else
block|{
name|Method
name|getter
init|=
name|context
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanIntrospection
argument_list|()
operator|.
name|getPropertyGetter
argument_list|(
name|target
operator|.
name|getClass
argument_list|()
argument_list|,
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|getter
operator|!=
literal|null
condition|)
block|{
return|return
name|getter
operator|.
name|getReturnType
argument_list|()
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|null
return|;
block|}
DECL|method|isComplexUserType (Class type)
specifier|private
specifier|static
name|boolean
name|isComplexUserType
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
comment|// lets consider all non java, as complex types
return|return
name|type
operator|!=
literal|null
operator|&&
operator|!
name|type
operator|.
name|isPrimitive
argument_list|()
operator|&&
operator|!
name|type
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"java."
argument_list|)
return|;
block|}
DECL|method|setReferenceProperties (CamelContext context, Object target, Map<String, Object> parameters)
specifier|private
specifier|static
name|void
name|setReferenceProperties
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Object
name|target
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|it
init|=
name|parameters
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// we only support basic keys
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
operator|||
name|name
operator|.
name|contains
argument_list|(
literal|"["
argument_list|)
operator|||
name|name
operator|.
name|contains
argument_list|(
literal|"]"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Object
name|v
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|v
operator|!=
literal|null
condition|?
name|v
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|isReferenceParameter
argument_list|(
name|value
argument_list|)
condition|)
block|{
try|try
block|{
name|boolean
name|hit
init|=
name|context
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanIntrospection
argument_list|()
operator|.
name|setProperty
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|value
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|hit
condition|)
block|{
comment|// must remove as its a valid option and we could configure it
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PropertyBindingException
argument_list|(
name|target
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**      * Is the given parameter a reference parameter (starting with a # char)      *      * @param parameter the parameter      * @return<tt>true</tt> if its a reference parameter      */
DECL|method|isReferenceParameter (String parameter)
specifier|private
specifier|static
name|boolean
name|isReferenceParameter
parameter_list|(
name|String
name|parameter
parameter_list|)
block|{
return|return
name|parameter
operator|!=
literal|null
operator|&&
name|parameter
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
return|;
block|}
DECL|method|newInstanceConstructorParameters (CamelContext camelContext, Class<?> type, String parameters)
specifier|private
specifier|static
name|Object
name|newInstanceConstructorParameters
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|String
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
name|StringQuoteHelper
operator|.
name|splitSafeQuote
argument_list|(
name|parameters
argument_list|,
literal|','
argument_list|)
decl_stmt|;
name|Constructor
name|found
init|=
name|findMatchingConstructor
argument_list|(
name|type
operator|.
name|getConstructors
argument_list|()
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
name|Object
index|[]
name|arr
init|=
operator|new
name|Object
index|[
name|found
operator|.
name|getParameterCount
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|found
operator|.
name|getParameterCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|paramType
init|=
name|found
operator|.
name|getParameterTypes
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|Object
name|param
init|=
name|params
index|[
name|i
index|]
decl_stmt|;
name|Object
name|val
init|=
name|camelContext
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|paramType
argument_list|,
name|param
argument_list|)
decl_stmt|;
comment|// unquote text
if|if
condition|(
name|val
operator|instanceof
name|String
condition|)
block|{
name|val
operator|=
name|StringHelper
operator|.
name|removeLeadingAndEndingQuotes
argument_list|(
operator|(
name|String
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
name|arr
index|[
name|i
index|]
operator|=
name|val
expr_stmt|;
block|}
return|return
name|found
operator|.
name|newInstance
argument_list|(
name|arr
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Finds the best matching constructor for the given parameters.      *<p/>      * This implementation is similar to the logic in camel-bean.      *      * @param constructors the constructors      * @param params       the parameters      * @return the constructor, or null if no matching constructor can be found      */
DECL|method|findMatchingConstructor (Constructor<?>[] constructors, String[] params)
specifier|private
specifier|static
name|Constructor
name|findMatchingConstructor
parameter_list|(
name|Constructor
argument_list|<
name|?
argument_list|>
index|[]
name|constructors
parameter_list|,
name|String
index|[]
name|params
parameter_list|)
block|{
name|List
argument_list|<
name|Constructor
argument_list|>
name|candidates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Constructor
name|fallbackCandidate
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Constructor
name|ctr
range|:
name|constructors
control|)
block|{
if|if
condition|(
name|ctr
operator|.
name|getParameterCount
argument_list|()
operator|!=
name|params
operator|.
name|length
condition|)
block|{
continue|continue;
block|}
name|boolean
name|matches
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ctr
operator|.
name|getParameterCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|parameter
init|=
name|params
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|parameter
operator|!=
literal|null
condition|)
block|{
comment|// must trim
name|parameter
operator|=
name|parameter
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
init|=
name|getValidParameterType
argument_list|(
name|parameter
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|expectedType
init|=
name|ctr
operator|.
name|getParameterTypes
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|parameterType
operator|!=
literal|null
operator|&&
name|expectedType
operator|!=
literal|null
condition|)
block|{
comment|// skip java.lang.Object type, when we have multiple possible methods we want to avoid it if possible
if|if
condition|(
name|Object
operator|.
name|class
operator|.
name|equals
argument_list|(
name|expectedType
argument_list|)
condition|)
block|{
name|fallbackCandidate
operator|=
name|ctr
expr_stmt|;
name|matches
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|boolean
name|matchingTypes
init|=
name|isParameterMatchingType
argument_list|(
name|parameterType
argument_list|,
name|expectedType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matchingTypes
condition|)
block|{
name|matches
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|matches
condition|)
block|{
name|candidates
operator|.
name|add
argument_list|(
name|ctr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|candidates
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
name|candidates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
name|fallbackCandidate
return|;
block|}
comment|/**      * Determines and maps the given value is valid according to the supported      * values by the bean component.      *<p/>      * This implementation is similar to the logic in camel-bean.      *      * @param value the value      * @return the parameter type the given value is being mapped as, or<tt>null</tt> if not valid.      */
DECL|method|getValidParameterType (String value)
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getValidParameterType
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// trim value
name|value
operator|=
name|value
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// single quoted is valid
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"'"
argument_list|)
operator|&&
name|value
operator|.
name|endsWith
argument_list|(
literal|"'"
argument_list|)
condition|)
block|{
return|return
name|String
operator|.
name|class
return|;
block|}
comment|// double quoted is valid
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|value
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
return|return
name|String
operator|.
name|class
return|;
block|}
comment|// true or false is valid (boolean)
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
operator|||
name|value
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|class
return|;
block|}
comment|// null is valid (to force a null value)
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
condition|)
block|{
return|return
name|Object
operator|.
name|class
return|;
block|}
comment|// simple language tokens is valid
if|if
condition|(
name|StringHelper
operator|.
name|hasStartToken
argument_list|(
name|value
argument_list|,
literal|"simple"
argument_list|)
condition|)
block|{
return|return
name|Object
operator|.
name|class
return|;
block|}
comment|// numeric is valid
name|boolean
name|numeric
init|=
literal|true
decl_stmt|;
for|for
control|(
name|char
name|ch
range|:
name|value
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|ch
argument_list|)
condition|)
block|{
name|numeric
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|numeric
condition|)
block|{
return|return
name|Number
operator|.
name|class
return|;
block|}
comment|// not valid
return|return
literal|null
return|;
block|}
DECL|method|isParameterMatchingType (Class<?> parameterType, Class<?> expectedType)
specifier|private
specifier|static
name|boolean
name|isParameterMatchingType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|expectedType
parameter_list|)
block|{
if|if
condition|(
name|Number
operator|.
name|class
operator|.
name|equals
argument_list|(
name|parameterType
argument_list|)
condition|)
block|{
comment|// number should match long/int/etc.
if|if
condition|(
name|Integer
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|expectedType
argument_list|)
operator|||
name|Long
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|expectedType
argument_list|)
operator|||
name|int
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|expectedType
argument_list|)
operator|||
name|long
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|expectedType
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|Boolean
operator|.
name|class
operator|.
name|equals
argument_list|(
name|parameterType
argument_list|)
condition|)
block|{
comment|// boolean should match both Boolean and boolean
if|if
condition|(
name|Boolean
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|expectedType
argument_list|)
operator|||
name|boolean
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|expectedType
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
name|parameterType
operator|.
name|isAssignableFrom
argument_list|(
name|expectedType
argument_list|)
return|;
block|}
block|}
end_class

end_unit

