begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_comment
comment|/**  * Group based {@link Iterator} which groups the given {@link Iterator} a number of times  * and then return a combined response as a<tt>List</tt>.  *<p/>  * This implementation uses a internal array list, to combine the response.  *  * @see GroupTokenIterator  */
end_comment

begin_class
DECL|class|GroupIterator
specifier|public
specifier|final
class|class
name|GroupIterator
implements|implements
name|Iterator
argument_list|<
name|Object
argument_list|>
implements|,
name|Closeable
block|{
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|exchange
specifier|private
specifier|final
name|Exchange
name|exchange
decl_stmt|;
DECL|field|it
specifier|private
specifier|final
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
decl_stmt|;
DECL|field|group
specifier|private
specifier|final
name|int
name|group
decl_stmt|;
DECL|field|skipFirst
specifier|private
specifier|final
name|boolean
name|skipFirst
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
comment|/**      * Creates a new group iterator      *      * @param exchange  the exchange used to create this group iterator      * @param it            the iterator to group      * @param group         number of parts to group together      * @throws IllegalArgumentException is thrown if group is not a positive number      */
DECL|method|GroupIterator (Exchange exchange, Iterator<?> it, int group)
specifier|public
name|GroupIterator
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
parameter_list|,
name|int
name|group
parameter_list|)
block|{
name|this
argument_list|(
name|exchange
argument_list|,
name|it
argument_list|,
name|group
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new group iterator      *      * @param exchange  the exchange used to create this group iterator      * @param it            the iterator to group      * @param group         number of parts to group together      * @throws IllegalArgumentException is thrown if group is not a positive number      */
DECL|method|GroupIterator (Exchange exchange, Iterator<?> it, int group, boolean skipFirst)
specifier|public
name|GroupIterator
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
parameter_list|,
name|int
name|group
parameter_list|,
name|boolean
name|skipFirst
parameter_list|)
block|{
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
name|this
operator|.
name|camelContext
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|this
operator|.
name|it
operator|=
name|it
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
if|if
condition|(
name|group
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Group must be a positive number, was: "
operator|+
name|group
argument_list|)
throw|;
block|}
name|this
operator|.
name|skipFirst
operator|=
name|skipFirst
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|IOHelper
operator|.
name|closeIterator
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// we are now closed
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|answer
init|=
name|it
operator|.
name|hasNext
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|answer
condition|)
block|{
comment|// auto close
try|try
block|{
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|Object
name|next
parameter_list|()
block|{
try|try
block|{
return|return
name|doNext
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|doNext ()
specifier|private
name|Object
name|doNext
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|<
name|group
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|data
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

