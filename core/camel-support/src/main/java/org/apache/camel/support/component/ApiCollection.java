begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support.component
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Base class for a collection of ApiMethods. Meant to be extended by Components to create the api name map.  */
end_comment

begin_class
DECL|class|ApiCollection
specifier|public
specifier|abstract
class|class
name|ApiCollection
parameter_list|<
name|E
extends|extends
name|Enum
parameter_list|<
name|E
parameter_list|>
operator|&
name|ApiName
parameter_list|,
name|T
parameter_list|>
block|{
DECL|field|apiHelpers
specifier|private
name|Map
argument_list|<
name|E
argument_list|,
name|ApiMethodHelper
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
argument_list|>
name|apiHelpers
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
DECL|field|apiMethods
specifier|private
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
argument_list|,
name|E
argument_list|>
name|apiMethods
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
DECL|field|apiNames
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|apiNames
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
DECL|method|getApiHelpers ()
specifier|public
specifier|final
name|Map
argument_list|<
name|E
argument_list|,
name|ApiMethodHelper
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
argument_list|>
name|getApiHelpers
parameter_list|()
block|{
return|return
name|apiHelpers
return|;
block|}
DECL|method|getApiMethods ()
specifier|public
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
argument_list|,
name|E
argument_list|>
name|getApiMethods
parameter_list|()
block|{
return|return
name|apiMethods
return|;
block|}
comment|/**      * Returns a {@link ApiMethodHelper} for a particular API.      * @param apiName name of the API      * @return helper class to work with {@link ApiMethod}      */
DECL|method|getHelper (E apiName)
specifier|public
specifier|final
name|ApiMethodHelper
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
name|getHelper
parameter_list|(
name|E
name|apiName
parameter_list|)
block|{
return|return
name|apiHelpers
operator|.
name|get
argument_list|(
name|apiName
argument_list|)
return|;
block|}
comment|/**      * Returns a list of API name strings.      * @return list of API names.      */
DECL|method|getApiNames ()
specifier|public
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|getApiNames
parameter_list|()
block|{
return|return
name|apiNames
return|;
block|}
DECL|method|getApiName (Class<? extends ApiMethod> apiMethod)
specifier|public
specifier|final
name|E
name|getApiName
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
name|apiMethod
parameter_list|)
block|{
return|return
name|apiMethods
operator|.
name|get
argument_list|(
name|apiMethod
argument_list|)
return|;
block|}
comment|/**      * Creates an endpoint configuration for a particular API      * @param apiName name of the API.      * @return Endpoint configuration object for the API.      */
DECL|method|getEndpointConfiguration (E apiName)
specifier|public
specifier|abstract
name|T
name|getEndpointConfiguration
parameter_list|(
name|E
name|apiName
parameter_list|)
function_decl|;
DECL|method|setApiHelpers (Map<E, ApiMethodHelper<? extends ApiMethod>> apiHelpers)
specifier|protected
specifier|final
name|void
name|setApiHelpers
parameter_list|(
name|Map
argument_list|<
name|E
argument_list|,
name|ApiMethodHelper
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
argument_list|>
name|apiHelpers
parameter_list|)
block|{
name|this
operator|.
name|apiHelpers
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|apiHelpers
argument_list|)
expr_stmt|;
name|this
operator|.
name|apiNames
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|apiHelpers
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|api
lambda|->
name|api
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setApiMethods (Map<Class<? extends ApiMethod>, E> apiMethods)
specifier|protected
specifier|final
name|void
name|setApiMethods
parameter_list|(
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ApiMethod
argument_list|>
argument_list|,
name|E
argument_list|>
name|apiMethods
parameter_list|)
block|{
name|this
operator|.
name|apiMethods
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|apiMethods
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

