begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExtendedCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NamedNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchBeanException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchEndpointException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteStartupOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
import|;
end_import

begin_comment
comment|/**  * A number of helper methods  */
end_comment

begin_class
DECL|class|CamelContextHelper
specifier|public
specifier|final
class|class
name|CamelContextHelper
block|{
DECL|field|MODEL_DOCUMENTATION_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|MODEL_DOCUMENTATION_PREFIX
init|=
literal|"org/apache/camel/model/"
decl_stmt|;
comment|/**      * Utility classes should not have a public constructor.      */
DECL|method|CamelContextHelper ()
specifier|private
name|CamelContextHelper
parameter_list|()
block|{     }
comment|/**      * Returns the mandatory endpoint for the given URI or the      * {@link org.apache.camel.NoSuchEndpointException} is thrown      */
DECL|method|getMandatoryEndpoint (CamelContext camelContext, String uri)
specifier|public
specifier|static
name|Endpoint
name|getMandatoryEndpoint
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|NoSuchEndpointException
block|{
name|Endpoint
name|endpoint
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchEndpointException
argument_list|(
name|uri
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|endpoint
return|;
block|}
block|}
comment|/**      * Returns the mandatory endpoint for the given URI and type or the      * {@link org.apache.camel.NoSuchEndpointException} is thrown      */
DECL|method|getMandatoryEndpoint (CamelContext camelContext, String uri, Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Endpoint
parameter_list|>
name|T
name|getMandatoryEndpoint
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|uri
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Endpoint
name|endpoint
init|=
name|getMandatoryEndpoint
argument_list|(
name|camelContext
argument_list|,
name|uri
argument_list|)
decl_stmt|;
return|return
name|ObjectHelper
operator|.
name|cast
argument_list|(
name|type
argument_list|,
name|endpoint
argument_list|)
return|;
block|}
comment|/**      * Converts the given value to the requested type      */
DECL|method|convertTo (CamelContext context, Class<T> type, Object value)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|convertTo
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|notNull
argument_list|(
name|context
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
return|return
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * Tried to convert the given value to the requested type      */
DECL|method|tryConvertTo (CamelContext context, Class<T> type, Object value)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|tryConvertTo
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|notNull
argument_list|(
name|context
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
return|return
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|type
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * Converts the given value to the specified type throwing an {@link IllegalArgumentException}      * if the value could not be converted to a non null value      */
DECL|method|mandatoryConvertTo (CamelContext context, Class<T> type, Object value)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|mandatoryConvertTo
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|T
name|answer
init|=
name|convertTo
argument_list|(
name|context
argument_list|,
name|type
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value "
operator|+
name|value
operator|+
literal|" converted to "
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|" cannot be null"
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Creates a new instance of the given type using the {@link org.apache.camel.spi.Injector} on the given      * {@link CamelContext}      */
DECL|method|newInstance (CamelContext context, Class<T> beanType)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|beanType
parameter_list|)
block|{
return|return
name|context
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|beanType
argument_list|)
return|;
block|}
comment|/**      * Look up the given named bean in the {@link org.apache.camel.spi.Registry} on the      * {@link CamelContext}      */
DECL|method|lookup (CamelContext context, String name)
specifier|public
specifier|static
name|Object
name|lookup
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByName
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Look up the given named bean of the given type in the {@link org.apache.camel.spi.Registry} on the      * {@link CamelContext}      */
DECL|method|lookup (CamelContext context, String name, Class<T> beanType)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|lookup
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|beanType
parameter_list|)
block|{
return|return
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByNameAndType
argument_list|(
name|name
argument_list|,
name|beanType
argument_list|)
return|;
block|}
comment|/**      * Look up the given named bean in the {@link org.apache.camel.spi.Registry} on the      * {@link CamelContext} and try to convert it to the given type.      */
DECL|method|lookupAndConvert (CamelContext context, String name, Class<T> beanType)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|lookupAndConvert
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|beanType
parameter_list|)
block|{
return|return
name|tryConvertTo
argument_list|(
name|context
argument_list|,
name|beanType
argument_list|,
name|lookup
argument_list|(
name|context
argument_list|,
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Look up a bean of the give type in the {@link org.apache.camel.spi.Registry} on the      * {@link CamelContext} returning an instance if only one bean is present,      */
DECL|method|findByType (CamelContext camelContext, Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|findByType
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Set
argument_list|<
name|T
argument_list|>
name|set
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByType
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|set
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Look up the given named bean in the {@link org.apache.camel.spi.Registry} on the      * {@link CamelContext} or throws {@link NoSuchBeanException} if not found.      */
DECL|method|mandatoryLookup (CamelContext context, String name)
specifier|public
specifier|static
name|Object
name|mandatoryLookup
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Object
name|answer
init|=
name|lookup
argument_list|(
name|context
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchBeanException
argument_list|(
name|name
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Look up the given named bean of the given type in the {@link org.apache.camel.spi.Registry} on the      * {@link CamelContext} or throws NoSuchBeanException if not found.      */
DECL|method|mandatoryLookup (CamelContext context, String name, Class<T> beanType)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|mandatoryLookup
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|beanType
parameter_list|)
block|{
name|T
name|answer
init|=
name|lookup
argument_list|(
name|context
argument_list|,
name|name
argument_list|,
name|beanType
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchBeanException
argument_list|(
name|name
argument_list|,
name|beanType
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Look up the given named bean in the {@link org.apache.camel.spi.Registry} on the      * {@link CamelContext} and convert it to the given type or throws NoSuchBeanException if not found.      */
DECL|method|mandatoryLookupAndConvert (CamelContext context, String name, Class<T> beanType)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|mandatoryLookupAndConvert
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|beanType
parameter_list|)
block|{
name|Object
name|value
init|=
name|lookup
argument_list|(
name|context
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchBeanException
argument_list|(
name|name
argument_list|,
name|beanType
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|convertTo
argument_list|(
name|context
argument_list|,
name|beanType
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * Evaluates the @EndpointInject annotation using the given context      */
DECL|method|getEndpointInjection (CamelContext camelContext, String uri, String injectionPointName, boolean mandatory)
specifier|public
specifier|static
name|Endpoint
name|getEndpointInjection
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|injectionPointName
parameter_list|,
name|boolean
name|mandatory
parameter_list|)
block|{
name|Endpoint
name|endpoint
decl_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|endpoint
operator|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|mandatory
condition|)
block|{
name|endpoint
operator|=
name|mandatoryLookup
argument_list|(
name|camelContext
argument_list|,
name|injectionPointName
argument_list|,
name|Endpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endpoint
operator|=
name|lookup
argument_list|(
name|camelContext
argument_list|,
name|injectionPointName
argument_list|,
name|Endpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|endpoint
return|;
block|}
comment|/**      * Gets the maximum cache pool size.      *<p/>      * Will use the property set on CamelContext with the key {@link Exchange#MAXIMUM_CACHE_POOL_SIZE}.      * If no property has been set, then it will fallback to return a size of 1000.      *      * @param camelContext the camel context      * @return the maximum cache size      * @throws IllegalArgumentException is thrown if the property is illegal      */
DECL|method|getMaximumCachePoolSize (CamelContext camelContext)
specifier|public
specifier|static
name|int
name|getMaximumCachePoolSize
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|camelContext
operator|!=
literal|null
condition|)
block|{
name|String
name|s
init|=
name|camelContext
operator|.
name|getGlobalOption
argument_list|(
name|Exchange
operator|.
name|MAXIMUM_CACHE_POOL_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// we cannot use Camel type converters as they may not be ready this early
name|Integer
name|size
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|null
operator|||
name|size
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|Exchange
operator|.
name|MAXIMUM_CACHE_POOL_SIZE
operator|+
literal|" must be a positive number, was: "
operator|+
name|s
argument_list|)
throw|;
block|}
return|return
name|size
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|Exchange
operator|.
name|MAXIMUM_CACHE_POOL_SIZE
operator|+
literal|" must be a positive number, was: "
operator|+
name|s
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// 1000 is the default fallback
return|return
literal|1000
return|;
block|}
comment|/**      * Gets the maximum endpoint cache size.      *<p/>      * Will use the property set on CamelContext with the key {@link Exchange#MAXIMUM_ENDPOINT_CACHE_SIZE}.      * If no property has been set, then it will fallback to return a size of 1000.      *      * @param camelContext the camel context      * @return the maximum cache size      * @throws IllegalArgumentException is thrown if the property is illegal      */
DECL|method|getMaximumEndpointCacheSize (CamelContext camelContext)
specifier|public
specifier|static
name|int
name|getMaximumEndpointCacheSize
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|camelContext
operator|!=
literal|null
condition|)
block|{
name|String
name|s
init|=
name|camelContext
operator|.
name|getGlobalOption
argument_list|(
name|Exchange
operator|.
name|MAXIMUM_ENDPOINT_CACHE_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
comment|// we cannot use Camel type converters as they may not be ready this early
try|try
block|{
name|int
name|size
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|Exchange
operator|.
name|MAXIMUM_ENDPOINT_CACHE_SIZE
operator|+
literal|" must be a positive number, was: "
operator|+
name|s
argument_list|)
throw|;
block|}
return|return
name|size
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|Exchange
operator|.
name|MAXIMUM_ENDPOINT_CACHE_SIZE
operator|+
literal|" must be a positive number, was: "
operator|+
name|s
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// 1000 is the default fallback
return|return
literal|1000
return|;
block|}
comment|/**      * Gets the maximum simple cache size.      *<p/>      * Will use the property set on CamelContext with the key {@link Exchange#MAXIMUM_SIMPLE_CACHE_SIZE}.      * If no property has been set, then it will fallback to return a size of 1000.      *      * @param camelContext the camel context      * @return the maximum cache size      * @throws IllegalArgumentException is thrown if the property is illegal      */
DECL|method|getMaximumSimpleCacheSize (CamelContext camelContext)
specifier|public
specifier|static
name|int
name|getMaximumSimpleCacheSize
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|camelContext
operator|!=
literal|null
condition|)
block|{
name|String
name|s
init|=
name|camelContext
operator|.
name|getGlobalOption
argument_list|(
name|Exchange
operator|.
name|MAXIMUM_SIMPLE_CACHE_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
comment|// we cannot use Camel type converters as they may not be ready this early
try|try
block|{
name|Integer
name|size
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|null
operator|||
name|size
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|Exchange
operator|.
name|MAXIMUM_SIMPLE_CACHE_SIZE
operator|+
literal|" must be a positive number, was: "
operator|+
name|s
argument_list|)
throw|;
block|}
return|return
name|size
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|Exchange
operator|.
name|MAXIMUM_SIMPLE_CACHE_SIZE
operator|+
literal|" must be a positive number, was: "
operator|+
name|s
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// 1000 is the default fallback
return|return
literal|1000
return|;
block|}
comment|/**      * Gets the maximum transformer cache size.      *<p/>      * Will use the property set on CamelContext with the key {@link Exchange#MAXIMUM_TRANSFORMER_CACHE_SIZE}.      * If no property has been set, then it will fallback to return a size of 1000.      *      * @param camelContext the camel context      * @return the maximum cache size      * @throws IllegalArgumentException is thrown if the property is illegal      */
DECL|method|getMaximumTransformerCacheSize (CamelContext camelContext)
specifier|public
specifier|static
name|int
name|getMaximumTransformerCacheSize
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|camelContext
operator|!=
literal|null
condition|)
block|{
name|String
name|s
init|=
name|camelContext
operator|.
name|getGlobalOption
argument_list|(
name|Exchange
operator|.
name|MAXIMUM_TRANSFORMER_CACHE_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
comment|// we cannot use Camel type converters as they may not be ready this early
try|try
block|{
name|Integer
name|size
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|null
operator|||
name|size
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|Exchange
operator|.
name|MAXIMUM_TRANSFORMER_CACHE_SIZE
operator|+
literal|" must be a positive number, was: "
operator|+
name|s
argument_list|)
throw|;
block|}
return|return
name|size
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|Exchange
operator|.
name|MAXIMUM_TRANSFORMER_CACHE_SIZE
operator|+
literal|" must be a positive number, was: "
operator|+
name|s
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// 1000 is the default fallback
return|return
literal|1000
return|;
block|}
comment|/**      * Gets the maximum validator cache size.      *<p/>      * Will use the property set on CamelContext with the key {@link Exchange#MAXIMUM_VALIDATOR_CACHE_SIZE}.      * If no property has been set, then it will fallback to return a size of 1000.      *      * @param camelContext the camel context      * @return the maximum cache size      * @throws IllegalArgumentException is thrown if the property is illegal      */
DECL|method|getMaximumValidatorCacheSize (CamelContext camelContext)
specifier|public
specifier|static
name|int
name|getMaximumValidatorCacheSize
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|camelContext
operator|!=
literal|null
condition|)
block|{
name|String
name|s
init|=
name|camelContext
operator|.
name|getGlobalOption
argument_list|(
name|Exchange
operator|.
name|MAXIMUM_VALIDATOR_CACHE_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
comment|// we cannot use Camel type converters as they may not be ready this early
try|try
block|{
name|Integer
name|size
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|null
operator|||
name|size
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|Exchange
operator|.
name|MAXIMUM_VALIDATOR_CACHE_SIZE
operator|+
literal|" must be a positive number, was: "
operator|+
name|s
argument_list|)
throw|;
block|}
return|return
name|size
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|Exchange
operator|.
name|MAXIMUM_VALIDATOR_CACHE_SIZE
operator|+
literal|" must be a positive number, was: "
operator|+
name|s
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// 1000 is the default fallback
return|return
literal|1000
return|;
block|}
comment|/**      * Parses the given text and handling property placeholders as well      *      * @param camelContext the camel context      * @param text  the text      * @return the parsed text, or<tt>null</tt> if the text was<tt>null</tt>      * @throws Exception is thrown if illegal argument      */
DECL|method|parseText (CamelContext camelContext, String text)
specifier|public
specifier|static
name|String
name|parseText
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|Exception
block|{
comment|// ensure we support property placeholders
return|return
name|camelContext
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|text
argument_list|)
return|;
block|}
comment|/**      * Parses the given text and converts it to an Integer and handling property placeholders as well      *      * @param camelContext the camel context      * @param text  the text      * @return the integer vale, or<tt>null</tt> if the text was<tt>null</tt>      * @throws Exception is thrown if illegal argument or type conversion not possible      */
DECL|method|parseInteger (CamelContext camelContext, String text)
specifier|public
specifier|static
name|Integer
name|parseInteger
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|Exception
block|{
comment|// ensure we support property placeholders
name|String
name|s
init|=
name|camelContext
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|camelContext
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error parsing ["
operator|+
name|s
operator|+
literal|"] as an Integer."
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error parsing ["
operator|+
name|s
operator|+
literal|"] from property "
operator|+
name|text
operator|+
literal|" as an Integer."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Parses the given text and converts it to an Long and handling property placeholders as well      *      * @param camelContext the camel context      * @param text  the text      * @return the long vale, or<tt>null</tt> if the text was<tt>null</tt>      * @throws Exception is thrown if illegal argument or type conversion not possible      */
DECL|method|parseLong (CamelContext camelContext, String text)
specifier|public
specifier|static
name|Long
name|parseLong
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|Exception
block|{
comment|// ensure we support property placeholders
name|String
name|s
init|=
name|camelContext
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|camelContext
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error parsing ["
operator|+
name|s
operator|+
literal|"] as a Long."
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error parsing ["
operator|+
name|s
operator|+
literal|"] from property "
operator|+
name|text
operator|+
literal|" as a Long."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Parses the given text and converts it to a Double and handling property placeholders as well      *      * @param camelContext the camel context      * @param text  the text      * @return the double vale, or<tt>null</tt> if the text was<tt>null</tt>      * @throws Exception is thrown if illegal argument or type conversion not possible      */
DECL|method|parseDouble (CamelContext camelContext, String text)
specifier|public
specifier|static
name|Double
name|parseDouble
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|Exception
block|{
comment|// ensure we support property placeholders
name|String
name|s
init|=
name|camelContext
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|camelContext
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error parsing ["
operator|+
name|s
operator|+
literal|"] as an Integer."
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error parsing ["
operator|+
name|s
operator|+
literal|"] from property "
operator|+
name|text
operator|+
literal|" as an Integer."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Parses the given text and converts it to an Boolean and handling property placeholders as well      *      * @param camelContext the camel context      * @param text  the text      * @return the boolean vale, or<tt>null</tt> if the text was<tt>null</tt>      * @throws IllegalArgumentException is thrown if illegal argument or type conversion not possible      */
DECL|method|parseBoolean (CamelContext camelContext, String text)
specifier|public
specifier|static
name|Boolean
name|parseBoolean
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|text
parameter_list|)
block|{
comment|// ensure we support property placeholders
name|String
name|s
init|=
name|camelContext
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
return|return
literal|"true"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
else|else
block|{
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error parsing ["
operator|+
name|s
operator|+
literal|"] as a Boolean."
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error parsing ["
operator|+
name|s
operator|+
literal|"] from property "
operator|+
name|text
operator|+
literal|" as a Boolean."
argument_list|)
throw|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Gets the route startup order for the given route id      *      * @param camelContext  the camel context      * @param routeId       the id of the route      * @return the startup order, or<tt>0</tt> if not possible to determine      */
DECL|method|getRouteStartupOrder (CamelContext camelContext, String routeId)
specifier|public
specifier|static
name|int
name|getRouteStartupOrder
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|routeId
parameter_list|)
block|{
for|for
control|(
name|RouteStartupOrder
name|order
range|:
name|camelContext
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getRouteStartupOrder
argument_list|()
control|)
block|{
if|if
condition|(
name|order
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|routeId
argument_list|)
condition|)
block|{
return|return
name|order
operator|.
name|getStartupOrder
argument_list|()
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**      * A helper method to access a camel context properties with a prefix      *      * @param prefix       the prefix      * @param camelContext the camel context      * @return the properties which holds the camel context properties with the prefix,      *         and the key omit the prefix part      */
DECL|method|getCamelPropertiesWithPrefix (String prefix, CamelContext camelContext)
specifier|public
specifier|static
name|Properties
name|getCamelPropertiesWithPrefix
parameter_list|(
name|String
name|prefix
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|Properties
name|answer
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|camelProperties
init|=
name|camelContext
operator|.
name|getGlobalOptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelProperties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|camelProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|answer
operator|.
name|put
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Gets the route id the given node belongs to.      *      * @param node the node      * @return the route id, or<tt>null</tt> if not possible to find      */
DECL|method|getRouteId (NamedNode node)
specifier|public
specifier|static
name|String
name|getRouteId
parameter_list|(
name|NamedNode
name|node
parameter_list|)
block|{
name|NamedNode
name|parent
init|=
name|node
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
name|parent
operator|!=
literal|null
condition|?
name|parent
operator|.
name|getId
argument_list|()
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

