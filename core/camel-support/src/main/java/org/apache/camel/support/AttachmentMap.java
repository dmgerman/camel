begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Attachment
import|;
end_import

begin_comment
comment|/**  * The AttachmentMap class provides a transparent Map<String, DataHandler>  * interface for a Map<String, Attachment>  */
end_comment

begin_class
DECL|class|AttachmentMap
specifier|public
class|class
name|AttachmentMap
extends|extends
name|AbstractMap
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
block|{
DECL|field|map
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Attachment
argument_list|>
name|map
decl_stmt|;
DECL|method|AttachmentMap (Map<String, Attachment> backingMap)
specifier|public
name|AttachmentMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Attachment
argument_list|>
name|backingMap
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|backingMap
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|put (String key, DataHandler value)
specifier|public
name|DataHandler
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|DataHandler
name|value
parameter_list|)
block|{
name|Attachment
name|old
init|=
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|DefaultAttachment
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|old
operator|.
name|getDataHandler
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|entrySet ()
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
operator|new
name|AttachmentEntrySet
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getOriginalMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Attachment
argument_list|>
name|getOriginalMap
parameter_list|()
block|{
return|return
name|map
return|;
block|}
DECL|class|AttachmentEntrySet
specifier|private
specifier|static
class|class
name|AttachmentEntrySet
extends|extends
name|AbstractSet
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
argument_list|>
block|{
DECL|field|set
specifier|private
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Attachment
argument_list|>
argument_list|>
name|set
decl_stmt|;
DECL|method|AttachmentEntrySet (Set<Map.Entry<String, Attachment>> set)
name|AttachmentEntrySet
parameter_list|(
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Attachment
argument_list|>
argument_list|>
name|set
parameter_list|)
block|{
name|this
operator|.
name|set
operator|=
name|set
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|set
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|AttachmentEntrySetIterator
argument_list|(
name|set
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|AttachmentEntrySetIterator
specifier|private
specifier|static
class|class
name|AttachmentEntrySetIterator
implements|implements
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
argument_list|>
block|{
DECL|field|iter
specifier|private
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Attachment
argument_list|>
argument_list|>
name|iter
decl_stmt|;
DECL|method|AttachmentEntrySetIterator (Iterator<Map.Entry<String, Attachment>> origIterator)
name|AttachmentEntrySetIterator
parameter_list|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Attachment
argument_list|>
argument_list|>
name|origIterator
parameter_list|)
block|{
name|iter
operator|=
name|origIterator
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iter
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
name|next
parameter_list|()
block|{
return|return
operator|new
name|AttachmentEntry
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|AttachmentEntry
specifier|private
specifier|static
class|class
name|AttachmentEntry
implements|implements
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
block|{
DECL|field|entry
specifier|private
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Attachment
argument_list|>
name|entry
decl_stmt|;
DECL|method|AttachmentEntry (Map.Entry<String, Attachment> backingEntry)
name|AttachmentEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Attachment
argument_list|>
name|backingEntry
parameter_list|)
block|{
name|this
operator|.
name|entry
operator|=
name|backingEntry
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
name|DataHandler
name|getValue
parameter_list|()
block|{
name|Attachment
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
operator|.
name|getDataHandler
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setValue (DataHandler value)
specifier|public
name|DataHandler
name|setValue
parameter_list|(
name|DataHandler
name|value
parameter_list|)
block|{
name|Attachment
name|oldValue
init|=
name|entry
operator|.
name|setValue
argument_list|(
operator|new
name|DefaultAttachment
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|!=
literal|null
condition|)
block|{
return|return
name|oldValue
operator|.
name|getDataHandler
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|// two AttachmentEntry objects are equal if the backing entries are equal
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|AttachmentEntry
operator|&&
name|entry
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|AttachmentEntry
operator|)
name|o
operator|)
operator|.
name|entry
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|entry
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

