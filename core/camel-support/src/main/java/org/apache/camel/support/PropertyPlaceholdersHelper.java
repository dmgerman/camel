begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|PropertyPlaceholdersHelper
specifier|public
specifier|final
class|class
name|PropertyPlaceholdersHelper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PropertyPlaceholdersHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|PropertyPlaceholdersHelper ()
specifier|private
name|PropertyPlaceholdersHelper
parameter_list|()
block|{     }
comment|/**      * Inspects the given definition and resolves any property placeholders from its properties.      *<p/>      * This implementation will check all the getter/setter pairs on this instance and for all the values      * (which is a String type) will be property placeholder resolved.      *      * @param camelContext the Camel context      * @param object   the object      * @throws Exception is thrown if property placeholders was used and there was an error resolving them      * @see CamelContext#resolvePropertyPlaceholders(String)      * @see org.apache.camel.spi.PropertiesComponent      */
DECL|method|resolvePropertyPlaceholders (CamelContext camelContext, Object object)
specifier|public
specifier|static
name|void
name|resolvePropertyPlaceholders
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Object
name|object
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Resolving property placeholders for: {}"
argument_list|,
name|object
argument_list|)
expr_stmt|;
comment|// TODO: Like ProcessorDefinitionHelper we want to avoid reflection
comment|// find all getter/setter which we can use for property placeholders
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|object
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"There are {} properties on: {}"
argument_list|,
name|properties
operator|.
name|size
argument_list|()
argument_list|,
name|object
argument_list|)
expr_stmt|;
comment|// lookup and resolve properties for String based properties
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// the name is always a String
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
comment|// value must be a String, as a String is the key for a property placeholder
name|String
name|text
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
name|text
operator|=
name|camelContext
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|!=
name|value
condition|)
block|{
comment|// invoke setter as the text has changed
name|boolean
name|changed
init|=
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|camelContext
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|object
argument_list|,
name|name
argument_list|,
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|changed
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No setter to set property: "
operator|+
name|name
operator|+
literal|" to: "
operator|+
name|text
operator|+
literal|" on: "
operator|+
name|object
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Changed property [{}] from: {} to: {}"
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

