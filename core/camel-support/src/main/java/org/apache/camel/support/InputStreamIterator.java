begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoTypeConversionAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_comment
comment|/**  * An {@link InputStream} that wraps an {@link Iterator} which reads iterations as byte array data.  */
end_comment

begin_class
DECL|class|InputStreamIterator
specifier|public
specifier|final
class|class
name|InputStreamIterator
extends|extends
name|InputStream
block|{
DECL|field|converter
specifier|private
specifier|final
name|TypeConverter
name|converter
decl_stmt|;
DECL|field|it
specifier|private
specifier|final
name|Iterator
name|it
decl_stmt|;
DECL|field|chunk
specifier|private
name|InputStream
name|chunk
decl_stmt|;
DECL|method|InputStreamIterator (TypeConverter converter, Iterator it)
specifier|public
name|InputStreamIterator
parameter_list|(
name|TypeConverter
name|converter
parameter_list|,
name|Iterator
name|it
parameter_list|)
block|{
name|this
operator|.
name|converter
operator|=
name|converter
expr_stmt|;
name|this
operator|.
name|it
operator|=
name|it
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
name|chunk
operator|=
name|nextChunk
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|data
init|=
name|chunk
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|==
operator|-
literal|1
condition|)
block|{
comment|// initialize for next chunk
name|chunk
operator|=
literal|null
expr_stmt|;
return|return
name|read
argument_list|()
return|;
block|}
return|return
name|data
return|;
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
name|chunk
operator|=
name|nextChunk
argument_list|()
expr_stmt|;
block|}
return|return
name|chunk
operator|!=
literal|null
condition|?
name|chunk
operator|.
name|available
argument_list|()
else|:
literal|0
return|;
block|}
DECL|method|nextChunk ()
specifier|private
name|InputStream
name|nextChunk
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|byte
index|[]
name|buf
init|=
name|converter
operator|.
name|mandatoryConvertTo
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|buf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoTypeConversionAvailableException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

