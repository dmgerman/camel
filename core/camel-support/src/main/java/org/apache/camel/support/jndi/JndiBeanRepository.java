begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support.jndi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jndi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NameClassPair
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NameNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchBeanException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|BeanRepository
import|;
end_import

begin_comment
comment|/**  * A {@link BeanRepository} implementation which looks up the objects in JNDI  */
end_comment

begin_class
DECL|class|JndiBeanRepository
specifier|public
class|class
name|JndiBeanRepository
implements|implements
name|BeanRepository
block|{
DECL|field|context
specifier|private
name|Context
name|context
decl_stmt|;
DECL|field|environment
specifier|private
name|Map
name|environment
decl_stmt|;
DECL|field|standalone
specifier|private
specifier|final
name|boolean
name|standalone
decl_stmt|;
DECL|method|JndiBeanRepository ()
specifier|public
name|JndiBeanRepository
parameter_list|()
block|{
name|this
operator|.
name|standalone
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|JndiBeanRepository (Map environment)
specifier|public
name|JndiBeanRepository
parameter_list|(
name|Map
name|environment
parameter_list|)
block|{
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
name|this
operator|.
name|standalone
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|JndiBeanRepository (Context context)
specifier|public
name|JndiBeanRepository
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|standalone
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Whether to use standalone mode, where the JNDI initial context factory is using      * {@link CamelInitialContextFactory}.      */
DECL|method|JndiBeanRepository (boolean standalone)
specifier|public
name|JndiBeanRepository
parameter_list|(
name|boolean
name|standalone
parameter_list|)
block|{
name|this
operator|.
name|standalone
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|lookupByNameAndType (String name, Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|lookupByNameAndType
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Object
name|answer
init|=
name|lookupByName
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// just to be safe
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|answer
operator|=
name|unwrap
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|type
operator|.
name|cast
argument_list|(
name|answer
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Found bean: "
operator|+
name|name
operator|+
literal|" in JNDI Context: "
operator|+
name|context
operator|+
literal|" of type: "
operator|+
name|answer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" expected type was: "
operator|+
name|type
decl_stmt|;
throw|throw
operator|new
name|NoSuchBeanException
argument_list|(
name|name
argument_list|,
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|lookupByName (String name)
specifier|public
name|Object
name|lookupByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|unwrap
argument_list|(
name|getContext
argument_list|()
operator|.
name|lookup
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NameNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|findByTypeWithName (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|findByTypeWithName
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|answer
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|NamingEnumeration
argument_list|<
name|NameClassPair
argument_list|>
name|list
init|=
name|getContext
argument_list|()
operator|.
name|list
argument_list|(
literal|""
argument_list|)
decl_stmt|;
while|while
condition|(
name|list
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|NameClassPair
name|pair
init|=
name|list
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|instance
init|=
name|context
operator|.
name|lookup
argument_list|(
name|pair
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|instance
operator|=
name|unwrap
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|instance
argument_list|)
condition|)
block|{
name|answer
operator|.
name|put
argument_list|(
name|pair
operator|.
name|getName
argument_list|()
argument_list|,
name|type
operator|.
name|cast
argument_list|(
name|instance
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
name|answer
return|;
block|}
DECL|method|findByType (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Set
argument_list|<
name|T
argument_list|>
name|findByType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Set
argument_list|<
name|T
argument_list|>
name|answer
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|NamingEnumeration
argument_list|<
name|NameClassPair
argument_list|>
name|list
init|=
name|getContext
argument_list|()
operator|.
name|list
argument_list|(
literal|""
argument_list|)
decl_stmt|;
while|while
condition|(
name|list
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|NameClassPair
name|pair
init|=
name|list
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|instance
init|=
name|context
operator|.
name|lookup
argument_list|(
name|pair
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|instance
operator|=
name|unwrap
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|instance
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|type
operator|.
name|cast
argument_list|(
name|instance
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
name|answer
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|NamingException
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getContext ()
specifier|public
name|Context
name|getContext
parameter_list|()
throws|throws
name|NamingException
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|createContext
argument_list|()
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
DECL|method|setContext (Context context)
specifier|public
name|void
name|setContext
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
DECL|method|createContext ()
specifier|protected
name|Context
name|createContext
parameter_list|()
throws|throws
name|NamingException
block|{
name|Hashtable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|environment
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|putAll
argument_list|(
name|environment
argument_list|)
expr_stmt|;
block|}
comment|// must include a factory if none provided in standalone mode
if|if
condition|(
name|standalone
operator|&&
operator|!
name|properties
operator|.
name|containsKey
argument_list|(
literal|"java.naming.factory.initial"
argument_list|)
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
literal|"java.naming.factory.initial"
argument_list|,
literal|"org.apache.camel.support.jndi.CamelInitialContextFactory"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|InitialContext
argument_list|(
name|properties
argument_list|)
return|;
block|}
block|}
end_class

end_unit

