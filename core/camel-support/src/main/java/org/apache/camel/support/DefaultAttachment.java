begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CollectionHelper
import|;
end_import

begin_class
DECL|class|DefaultAttachment
specifier|public
class|class
name|DefaultAttachment
implements|implements
name|Attachment
block|{
DECL|field|headers
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
decl_stmt|;
DECL|field|dataHandler
specifier|private
name|DataHandler
name|dataHandler
decl_stmt|;
DECL|method|DefaultAttachment (DataHandler dh)
specifier|public
name|DefaultAttachment
parameter_list|(
name|DataHandler
name|dh
parameter_list|)
block|{
name|dataHandler
operator|=
name|dh
expr_stmt|;
block|}
DECL|method|DefaultAttachment (DataSource ds)
specifier|public
name|DefaultAttachment
parameter_list|(
name|DataSource
name|ds
parameter_list|)
block|{
name|dataHandler
operator|=
operator|new
name|DataHandler
argument_list|(
name|ds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDataHandler ()
specifier|public
name|DataHandler
name|getDataHandler
parameter_list|()
block|{
return|return
name|dataHandler
return|;
block|}
annotation|@
name|Override
DECL|method|getHeader (String name)
specifier|public
name|String
name|getHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|headers
operator|!=
literal|null
condition|)
block|{
name|Object
name|headerObject
init|=
name|headers
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerObject
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|headerObject
return|;
block|}
elseif|else
if|if
condition|(
name|headerObject
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
return|return
name|CollectionHelper
operator|.
name|collectionAsCommaDelimitedString
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|headerObject
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|getHeaderAsList (String name)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getHeaderAsList
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|headers
operator|!=
literal|null
condition|)
block|{
name|Object
name|headerObject
init|=
name|headers
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerObject
operator|instanceof
name|List
argument_list|<
name|?
argument_list|>
condition|)
block|{
return|return
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|headerObject
return|;
block|}
elseif|else
if|if
condition|(
name|headerObject
operator|instanceof
name|String
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
name|String
operator|)
name|headerObject
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|addHeader (String headerName, String headerValue)
specifier|public
name|void
name|addHeader
parameter_list|(
name|String
name|headerName
parameter_list|,
name|String
name|headerValue
parameter_list|)
block|{
if|if
condition|(
name|headers
operator|==
literal|null
condition|)
block|{
name|headers
operator|=
name|createHeaders
argument_list|()
expr_stmt|;
block|}
name|CollectionHelper
operator|.
name|appendValue
argument_list|(
name|headers
argument_list|,
name|headerName
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setHeader (String headerName, String headerValue)
specifier|public
name|void
name|setHeader
parameter_list|(
name|String
name|headerName
parameter_list|,
name|String
name|headerValue
parameter_list|)
block|{
if|if
condition|(
name|headers
operator|==
literal|null
condition|)
block|{
name|headers
operator|=
name|createHeaders
argument_list|()
expr_stmt|;
block|}
name|headers
operator|.
name|put
argument_list|(
name|headerName
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeHeader (String headerName)
specifier|public
name|void
name|removeHeader
parameter_list|(
name|String
name|headerName
parameter_list|)
block|{
if|if
condition|(
name|headers
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|remove
argument_list|(
name|headerName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getHeaderNames ()
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getHeaderNames
parameter_list|()
block|{
if|if
condition|(
name|headers
operator|==
literal|null
condition|)
block|{
name|headers
operator|=
name|createHeaders
argument_list|()
expr_stmt|;
block|}
return|return
name|headers
operator|.
name|keySet
argument_list|()
return|;
block|}
DECL|method|clearHeaders ()
specifier|public
name|void
name|clearHeaders
parameter_list|()
block|{
name|headers
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|createHeaders ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|createHeaders
parameter_list|()
block|{
return|return
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
return|;
block|}
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|Attachment
condition|)
block|{
name|DataHandler
name|otherDh
init|=
operator|(
operator|(
name|Attachment
operator|)
name|other
operator|)
operator|.
name|getDataHandler
argument_list|()
decl_stmt|;
return|return
name|dataHandler
operator|.
name|equals
argument_list|(
name|otherDh
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|dataHandler
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

