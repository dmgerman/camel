begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.saga
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|saga
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|saga
operator|.
name|CamelSagaService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|saga
operator|.
name|CamelSagaStep
import|;
end_import

begin_comment
comment|/**  * Builder of Saga processors.  */
end_comment

begin_class
DECL|class|SagaProcessorBuilder
specifier|public
class|class
name|SagaProcessorBuilder
block|{
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|childProcessor
specifier|private
name|Processor
name|childProcessor
decl_stmt|;
DECL|field|sagaService
specifier|private
name|CamelSagaService
name|sagaService
decl_stmt|;
DECL|field|step
specifier|private
name|CamelSagaStep
name|step
decl_stmt|;
DECL|field|propagation
specifier|private
name|SagaPropagation
name|propagation
decl_stmt|;
DECL|field|completionMode
specifier|private
name|SagaCompletionMode
name|completionMode
decl_stmt|;
DECL|method|SagaProcessorBuilder ()
specifier|public
name|SagaProcessorBuilder
parameter_list|()
block|{     }
DECL|method|camelContext (CamelContext camelContext)
specifier|public
name|SagaProcessorBuilder
name|camelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|childProcessor (Processor childProcessor)
specifier|public
name|SagaProcessorBuilder
name|childProcessor
parameter_list|(
name|Processor
name|childProcessor
parameter_list|)
block|{
name|this
operator|.
name|childProcessor
operator|=
name|childProcessor
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|sagaService (CamelSagaService sagaService)
specifier|public
name|SagaProcessorBuilder
name|sagaService
parameter_list|(
name|CamelSagaService
name|sagaService
parameter_list|)
block|{
name|this
operator|.
name|sagaService
operator|=
name|sagaService
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|step (CamelSagaStep step)
specifier|public
name|SagaProcessorBuilder
name|step
parameter_list|(
name|CamelSagaStep
name|step
parameter_list|)
block|{
name|this
operator|.
name|step
operator|=
name|step
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|propagation (SagaPropagation propagation)
specifier|public
name|SagaProcessorBuilder
name|propagation
parameter_list|(
name|SagaPropagation
name|propagation
parameter_list|)
block|{
name|this
operator|.
name|propagation
operator|=
name|propagation
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|completionMode (SagaCompletionMode completionMode)
specifier|public
name|SagaProcessorBuilder
name|completionMode
parameter_list|(
name|SagaCompletionMode
name|completionMode
parameter_list|)
block|{
name|this
operator|.
name|completionMode
operator|=
name|completionMode
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|SagaProcessor
name|build
parameter_list|()
block|{
if|if
condition|(
name|propagation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"A propagation mode has not been set"
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|propagation
condition|)
block|{
case|case
name|REQUIRED
case|:
return|return
operator|new
name|RequiredSagaProcessor
argument_list|(
name|camelContext
argument_list|,
name|childProcessor
argument_list|,
name|sagaService
argument_list|,
name|completionMode
argument_list|,
name|step
argument_list|)
return|;
case|case
name|REQUIRES_NEW
case|:
return|return
operator|new
name|RequiresNewSagaProcessor
argument_list|(
name|camelContext
argument_list|,
name|childProcessor
argument_list|,
name|sagaService
argument_list|,
name|completionMode
argument_list|,
name|step
argument_list|)
return|;
case|case
name|SUPPORTS
case|:
return|return
operator|new
name|SupportsSagaProcessor
argument_list|(
name|camelContext
argument_list|,
name|childProcessor
argument_list|,
name|sagaService
argument_list|,
name|completionMode
argument_list|,
name|step
argument_list|)
return|;
case|case
name|NOT_SUPPORTED
case|:
return|return
operator|new
name|NotSupportedSagaProcessor
argument_list|(
name|camelContext
argument_list|,
name|childProcessor
argument_list|,
name|sagaService
argument_list|,
name|completionMode
argument_list|,
name|step
argument_list|)
return|;
case|case
name|NEVER
case|:
return|return
operator|new
name|NeverSagaProcessor
argument_list|(
name|camelContext
argument_list|,
name|childProcessor
argument_list|,
name|sagaService
argument_list|,
name|completionMode
argument_list|,
name|step
argument_list|)
return|;
case|case
name|MANDATORY
case|:
return|return
operator|new
name|MandatorySagaProcessor
argument_list|(
name|camelContext
argument_list|,
name|childProcessor
argument_list|,
name|sagaService
argument_list|,
name|completionMode
argument_list|,
name|step
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported propagation mode: "
operator|+
name|propagation
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

