begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NamedNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|NodeIdFactory
import|;
end_import

begin_comment
comment|/**  * Default id factory.  */
end_comment

begin_class
DECL|class|DefaultNodeIdFactory
specifier|public
class|class
name|DefaultNodeIdFactory
implements|implements
name|NodeIdFactory
block|{
DECL|field|nodeCounters
specifier|protected
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|nodeCounters
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|createId (NamedNode definition)
specifier|public
name|String
name|createId
parameter_list|(
name|NamedNode
name|definition
parameter_list|)
block|{
name|String
name|key
init|=
name|definition
operator|.
name|getShortName
argument_list|()
decl_stmt|;
return|return
name|key
operator|+
name|getNodeCounter
argument_list|(
name|key
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
comment|/**      * Returns the counter for the given node key, lazily creating one if necessary      */
DECL|method|getNodeCounter (String key)
specifier|protected
specifier|static
name|AtomicInteger
name|getNodeCounter
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|nodeCounters
operator|.
name|computeIfAbsent
argument_list|(
name|key
argument_list|,
name|k
lambda|->
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Helper method for test purposes that allows tests to start clean (made protected       *  to ensure that it is not called accidentally)      */
DECL|method|resetAllCounters ()
specifier|protected
specifier|static
name|void
name|resetAllCounters
parameter_list|()
block|{
for|for
control|(
name|AtomicInteger
name|counter
range|:
name|nodeCounters
operator|.
name|values
argument_list|()
control|)
block|{
name|counter
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

