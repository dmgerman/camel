begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.loadbalancer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|loadbalancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Navigate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|IdAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|AsyncProcessorSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_comment
comment|/**  * A default base class for a {@link LoadBalancer} implementation.  */
end_comment

begin_class
DECL|class|LoadBalancerSupport
specifier|public
specifier|abstract
class|class
name|LoadBalancerSupport
extends|extends
name|AsyncProcessorSupport
implements|implements
name|LoadBalancer
implements|,
name|Navigate
argument_list|<
name|Processor
argument_list|>
implements|,
name|IdAware
block|{
DECL|field|processors
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|AsyncProcessor
index|[]
argument_list|>
name|processors
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
operator|new
name|AsyncProcessor
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|method|addProcessor (AsyncProcessor processor)
specifier|public
name|void
name|addProcessor
parameter_list|(
name|AsyncProcessor
name|processor
parameter_list|)
block|{
name|processors
operator|.
name|updateAndGet
argument_list|(
name|op
lambda|->
name|doAdd
argument_list|(
name|processor
argument_list|,
name|op
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|removeProcessor (AsyncProcessor processor)
specifier|public
name|void
name|removeProcessor
parameter_list|(
name|AsyncProcessor
name|processor
parameter_list|)
block|{
name|processors
operator|.
name|updateAndGet
argument_list|(
name|op
lambda|->
name|doRemove
argument_list|(
name|processor
argument_list|,
name|op
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doAdd (AsyncProcessor processor, AsyncProcessor[] op)
specifier|private
name|AsyncProcessor
index|[]
name|doAdd
parameter_list|(
name|AsyncProcessor
name|processor
parameter_list|,
name|AsyncProcessor
index|[]
name|op
parameter_list|)
block|{
name|int
name|len
init|=
name|op
operator|.
name|length
decl_stmt|;
name|AsyncProcessor
index|[]
name|np
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|op
argument_list|,
name|len
operator|+
literal|1
argument_list|,
name|op
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|np
index|[
name|len
index|]
operator|=
name|processor
expr_stmt|;
return|return
name|np
return|;
block|}
DECL|method|doRemove (AsyncProcessor processor, AsyncProcessor[] op)
specifier|private
name|AsyncProcessor
index|[]
name|doRemove
parameter_list|(
name|AsyncProcessor
name|processor
parameter_list|,
name|AsyncProcessor
index|[]
name|op
parameter_list|)
block|{
name|int
name|len
init|=
name|op
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|len
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|op
index|[
name|index
index|]
operator|.
name|equals
argument_list|(
name|processor
argument_list|)
condition|)
block|{
name|AsyncProcessor
index|[]
name|np
init|=
operator|(
name|AsyncProcessor
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|AsyncProcessor
operator|.
name|class
argument_list|,
name|len
operator|-
literal|1
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|op
argument_list|,
literal|0
argument_list|,
name|np
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|op
argument_list|,
name|index
operator|+
literal|1
argument_list|,
name|np
argument_list|,
name|index
argument_list|,
name|len
operator|-
name|index
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|np
return|;
block|}
block|}
return|return
name|op
return|;
block|}
DECL|method|getProcessors ()
specifier|public
name|List
argument_list|<
name|AsyncProcessor
argument_list|>
name|getProcessors
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|processors
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|doGetProcessors ()
specifier|protected
name|AsyncProcessor
index|[]
name|doGetProcessors
parameter_list|()
block|{
return|return
name|processors
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|next ()
specifier|public
name|List
argument_list|<
name|Processor
argument_list|>
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|List
operator|)
name|getProcessors
argument_list|()
return|;
block|}
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|doGetProcessors
argument_list|()
operator|.
name|length
operator|>
literal|0
return|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|setId (String id)
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|startService
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|processors
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|processors
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|protected
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncProcessor
index|[]
name|p
init|=
name|processors
operator|.
name|get
argument_list|()
decl_stmt|;
name|ServiceHelper
operator|.
name|stopAndShutdownServices
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|p
argument_list|)
expr_stmt|;
for|for
control|(
name|AsyncProcessor
name|processor
range|:
name|p
control|)
block|{
name|removeProcessor
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|doGetProcessors
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

