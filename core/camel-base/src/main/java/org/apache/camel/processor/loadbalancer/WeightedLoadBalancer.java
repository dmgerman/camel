begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.loadbalancer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|loadbalancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_class
DECL|class|WeightedLoadBalancer
specifier|public
specifier|abstract
class|class
name|WeightedLoadBalancer
extends|extends
name|QueueLoadBalancer
block|{
DECL|field|ratios
specifier|protected
specifier|final
name|List
argument_list|<
name|DistributionRatio
argument_list|>
name|ratios
decl_stmt|;
DECL|field|distributionRatioSum
specifier|protected
specifier|final
name|int
name|distributionRatioSum
decl_stmt|;
DECL|field|runtimeRatioSum
specifier|protected
name|int
name|runtimeRatioSum
decl_stmt|;
DECL|field|lastIndex
specifier|transient
name|int
name|lastIndex
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|WeightedLoadBalancer (List<Integer> distributionRatios)
specifier|public
name|WeightedLoadBalancer
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|distributionRatios
parameter_list|)
block|{
name|List
argument_list|<
name|DistributionRatio
argument_list|>
name|ratios
init|=
name|distributionRatios
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|DistributionRatio
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|ratios
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|ratios
argument_list|)
expr_stmt|;
name|this
operator|.
name|distributionRatioSum
operator|=
name|ratios
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|DistributionRatio
operator|::
name|getDistributionWeight
argument_list|)
operator|.
name|sum
argument_list|()
expr_stmt|;
name|this
operator|.
name|runtimeRatioSum
operator|=
name|distributionRatioSum
expr_stmt|;
block|}
DECL|method|getLastChosenProcessorIndex ()
specifier|public
name|int
name|getLastChosenProcessorIndex
parameter_list|()
block|{
return|return
name|lastIndex
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|getProcessors
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|ratios
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Loadbalacing with "
operator|+
name|getProcessors
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" should match number of distributions "
operator|+
name|ratios
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|decrementSum ()
specifier|protected
name|void
name|decrementSum
parameter_list|()
block|{
if|if
condition|(
operator|--
name|runtimeRatioSum
operator|==
literal|0
condition|)
block|{
comment|// every processor is exhausted, reload for a new distribution round
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|reset ()
specifier|protected
name|void
name|reset
parameter_list|()
block|{
for|for
control|(
name|DistributionRatio
name|ratio
range|:
name|ratios
control|)
block|{
name|ratio
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|runtimeRatioSum
operator|=
name|distributionRatioSum
expr_stmt|;
block|}
DECL|method|getRatios ()
specifier|public
name|List
argument_list|<
name|DistributionRatio
argument_list|>
name|getRatios
parameter_list|()
block|{
return|return
name|ratios
return|;
block|}
block|}
end_class

end_unit

