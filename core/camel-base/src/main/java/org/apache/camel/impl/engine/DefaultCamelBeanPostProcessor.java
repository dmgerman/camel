begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BeanInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BindToRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|DeferredContextBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExtendedCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchBeanException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PropertyInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelBeanPostProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReflectionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
operator|.
name|invokeMethod
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isEmpty
import|;
end_import

begin_comment
comment|/**  * A bean post processor which implements the<a href="http://camel.apache.org/bean-integration.html">Bean Integration</a>  * features in Camel. Features such as the<a href="http://camel.apache.org/bean-injection.html">Bean Injection</a> of objects like  * {@link org.apache.camel.Endpoint} and  * {@link org.apache.camel.ProducerTemplate} together with support for  *<a href="http://camel.apache.org/pojo-consuming.html">POJO Consuming</a> via the  * {@link org.apache.camel.Consume} annotation along with  *<a href="http://camel.apache.org/pojo-producing.html">POJO Producing</a> via the  * {@link org.apache.camel.Produce} annotation along with other annotations such as  * {@link org.apache.camel.DynamicRouter} for creating<a href="http://camel.apache.org/dynamicrouter-annotation.html">a Dynamic router via annotations</a>.  * {@link org.apache.camel.RecipientList} for creating<a href="http://camel.apache.org/recipientlist-annotation.html">a Recipient List router via annotations</a>.  * {@link org.apache.camel.RoutingSlip} for creating<a href="http://camel.apache.org/routingslip-annotation.html">a Routing Slip router via annotations</a>.  *<p/>  * Components such as<tt>camel-spring</tt>, and<tt>camel-blueprint</tt> can leverage this post processor to hook in Camel  * bean post processing into their bean processing framework.  */
end_comment

begin_class
DECL|class|DefaultCamelBeanPostProcessor
specifier|public
class|class
name|DefaultCamelBeanPostProcessor
implements|implements
name|CamelBeanPostProcessor
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultCamelBeanPostProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|camelPostProcessorHelper
specifier|protected
name|CamelPostProcessorHelper
name|camelPostProcessorHelper
decl_stmt|;
DECL|field|camelContext
specifier|protected
name|CamelContext
name|camelContext
decl_stmt|;
DECL|method|DefaultCamelBeanPostProcessor ()
specifier|public
name|DefaultCamelBeanPostProcessor
parameter_list|()
block|{     }
DECL|method|DefaultCamelBeanPostProcessor (CamelContext camelContext)
specifier|public
name|DefaultCamelBeanPostProcessor
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|postProcessBeforeInitialization (Object bean, String beanName)
specifier|public
name|Object
name|postProcessBeforeInitialization
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Camel bean processing before initialization for bean: {}"
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
comment|// some beans cannot be post processed at this given time, so we gotta check beforehand
if|if
condition|(
operator|!
name|canPostProcessBean
argument_list|(
name|bean
argument_list|,
name|beanName
argument_list|)
condition|)
block|{
return|return
name|bean
return|;
block|}
name|injectClass
argument_list|(
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
name|injectNestedClasses
argument_list|(
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
name|injectBindToRegistryFields
argument_list|(
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
name|injectBindToRegistryMethods
argument_list|(
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
name|injectFields
argument_list|(
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
name|injectMethods
argument_list|(
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
if|if
condition|(
name|bean
operator|instanceof
name|CamelContextAware
operator|&&
name|canSetCamelContext
argument_list|(
name|bean
argument_list|,
name|beanName
argument_list|)
condition|)
block|{
name|CamelContextAware
name|contextAware
init|=
operator|(
name|CamelContextAware
operator|)
name|bean
decl_stmt|;
name|DeferredContextBinding
name|deferredBinding
init|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|DeferredContextBinding
operator|.
name|class
argument_list|)
decl_stmt|;
name|CamelContext
name|context
init|=
name|getOrLookupCamelContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
operator|&&
name|deferredBinding
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No CamelContext defined yet so cannot inject into bean: {}"
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|contextAware
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bean
return|;
block|}
DECL|method|postProcessAfterInitialization (Object bean, String beanName)
specifier|public
name|Object
name|postProcessAfterInitialization
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Camel bean processing after initialization for bean: {}"
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
comment|// some beans cannot be post processed at this given time, so we gotta check beforehand
if|if
condition|(
operator|!
name|canPostProcessBean
argument_list|(
name|bean
argument_list|,
name|beanName
argument_list|)
condition|)
block|{
return|return
name|bean
return|;
block|}
if|if
condition|(
name|bean
operator|instanceof
name|DefaultEndpoint
condition|)
block|{
name|DefaultEndpoint
name|defaultEndpoint
init|=
operator|(
name|DefaultEndpoint
operator|)
name|bean
decl_stmt|;
name|defaultEndpoint
operator|.
name|setEndpointUriIfNotSpecified
argument_list|(
name|beanName
argument_list|)
expr_stmt|;
block|}
return|return
name|bean
return|;
block|}
comment|/**      * Strategy to get the {@link CamelContext} to use.      */
DECL|method|getOrLookupCamelContext ()
specifier|public
name|CamelContext
name|getOrLookupCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
comment|/**      * Strategy to get the {@link CamelPostProcessorHelper}      */
DECL|method|getPostProcessorHelper ()
specifier|public
name|CamelPostProcessorHelper
name|getPostProcessorHelper
parameter_list|()
block|{
if|if
condition|(
name|camelPostProcessorHelper
operator|==
literal|null
condition|)
block|{
name|camelPostProcessorHelper
operator|=
operator|new
name|CamelPostProcessorHelper
argument_list|(
name|getOrLookupCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|camelPostProcessorHelper
return|;
block|}
DECL|method|canPostProcessBean (Object bean, String beanName)
specifier|protected
name|boolean
name|canPostProcessBean
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
block|{
return|return
name|bean
operator|!=
literal|null
return|;
block|}
DECL|method|canSetCamelContext (Object bean, String beanName)
specifier|protected
name|boolean
name|canSetCamelContext
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
block|{
if|if
condition|(
name|bean
operator|instanceof
name|CamelContextAware
condition|)
block|{
name|CamelContextAware
name|camelContextAware
init|=
operator|(
name|CamelContextAware
operator|)
name|bean
decl_stmt|;
name|CamelContext
name|context
init|=
name|camelContextAware
operator|.
name|getCamelContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"CamelContext already set on bean with id [{}]. Will keep existing CamelContext on bean."
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * A strategy method to allow implementations to perform some custom JBI      * based injection of the POJO      *      * @param bean the bean to be injected      */
DECL|method|injectFields (final Object bean, final String beanName)
specifier|protected
name|void
name|injectFields
parameter_list|(
specifier|final
name|Object
name|bean
parameter_list|,
specifier|final
name|String
name|beanName
parameter_list|)
block|{
name|ReflectionHelper
operator|.
name|doWithFields
argument_list|(
name|bean
operator|.
name|getClass
argument_list|()
argument_list|,
name|field
lambda|->
block|{
name|PropertyInject
name|propertyInject
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|PropertyInject
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyInject
operator|!=
literal|null
operator|&&
name|getPostProcessorHelper
argument_list|()
operator|.
name|matchContext
argument_list|(
name|propertyInject
operator|.
name|context
argument_list|()
argument_list|)
condition|)
block|{
name|injectFieldProperty
argument_list|(
name|field
argument_list|,
name|propertyInject
operator|.
name|value
argument_list|()
argument_list|,
name|propertyInject
operator|.
name|defaultValue
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
name|BeanInject
name|beanInject
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|BeanInject
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanInject
operator|!=
literal|null
operator|&&
name|getPostProcessorHelper
argument_list|()
operator|.
name|matchContext
argument_list|(
name|beanInject
operator|.
name|context
argument_list|()
argument_list|)
condition|)
block|{
name|injectFieldBean
argument_list|(
name|field
argument_list|,
name|beanInject
operator|.
name|value
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
name|EndpointInject
name|endpointInject
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|EndpointInject
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpointInject
operator|!=
literal|null
operator|&&
name|getPostProcessorHelper
argument_list|()
operator|.
name|matchContext
argument_list|(
name|endpointInject
operator|.
name|context
argument_list|()
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|String
name|uri
init|=
name|endpointInject
operator|.
name|value
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|endpointInject
operator|.
name|uri
argument_list|()
else|:
name|endpointInject
operator|.
name|value
argument_list|()
decl_stmt|;
name|injectField
argument_list|(
name|field
argument_list|,
name|uri
argument_list|,
name|endpointInject
operator|.
name|property
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
name|Produce
name|produce
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|Produce
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|produce
operator|!=
literal|null
operator|&&
name|getPostProcessorHelper
argument_list|()
operator|.
name|matchContext
argument_list|(
name|produce
operator|.
name|context
argument_list|()
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|String
name|uri
init|=
name|produce
operator|.
name|value
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|produce
operator|.
name|uri
argument_list|()
else|:
name|produce
operator|.
name|value
argument_list|()
decl_stmt|;
name|injectField
argument_list|(
name|field
argument_list|,
name|uri
argument_list|,
name|produce
operator|.
name|property
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|,
name|produce
operator|.
name|binding
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|injectBindToRegistryFields (final Object bean, final String beanName)
specifier|protected
name|void
name|injectBindToRegistryFields
parameter_list|(
specifier|final
name|Object
name|bean
parameter_list|,
specifier|final
name|String
name|beanName
parameter_list|)
block|{
name|ReflectionHelper
operator|.
name|doWithFields
argument_list|(
name|bean
operator|.
name|getClass
argument_list|()
argument_list|,
name|field
lambda|->
block|{
name|BindToRegistry
name|bind
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|BindToRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bind
operator|!=
literal|null
operator|&&
name|getPostProcessorHelper
argument_list|()
operator|.
name|matchContext
argument_list|(
name|bind
operator|.
name|context
argument_list|()
argument_list|)
condition|)
block|{
name|bindToRegistry
argument_list|(
name|field
argument_list|,
name|bind
operator|.
name|value
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|,
name|bind
operator|.
name|beanPostProcess
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|injectField (Field field, String endpointUri, String endpointProperty, Object bean, String beanName)
specifier|public
name|void
name|injectField
parameter_list|(
name|Field
name|field
parameter_list|,
name|String
name|endpointUri
parameter_list|,
name|String
name|endpointProperty
parameter_list|,
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
block|{
name|injectField
argument_list|(
name|field
argument_list|,
name|endpointUri
argument_list|,
name|endpointProperty
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|injectField (Field field, String endpointUri, String endpointProperty, Object bean, String beanName, boolean binding)
specifier|public
name|void
name|injectField
parameter_list|(
name|Field
name|field
parameter_list|,
name|String
name|endpointUri
parameter_list|,
name|String
name|endpointProperty
parameter_list|,
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|,
name|boolean
name|binding
parameter_list|)
block|{
name|ReflectionHelper
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|bean
argument_list|,
name|getPostProcessorHelper
argument_list|()
operator|.
name|getInjectionValue
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|endpointUri
argument_list|,
name|endpointProperty
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|,
name|binding
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|injectFieldBean (Field field, String name, Object bean, String beanName)
specifier|public
name|void
name|injectFieldBean
parameter_list|(
name|Field
name|field
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
block|{
name|ReflectionHelper
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|bean
argument_list|,
name|getPostProcessorHelper
argument_list|()
operator|.
name|getInjectionBeanValue
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|injectFieldProperty (Field field, String propertyName, String propertyDefaultValue, Object bean, String beanName)
specifier|public
name|void
name|injectFieldProperty
parameter_list|(
name|Field
name|field
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|propertyDefaultValue
parameter_list|,
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
block|{
name|ReflectionHelper
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|bean
argument_list|,
name|getPostProcessorHelper
argument_list|()
operator|.
name|getInjectionPropertyValue
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|propertyName
argument_list|,
name|propertyDefaultValue
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|injectMethods (final Object bean, final String beanName)
specifier|protected
name|void
name|injectMethods
parameter_list|(
specifier|final
name|Object
name|bean
parameter_list|,
specifier|final
name|String
name|beanName
parameter_list|)
block|{
name|ReflectionHelper
operator|.
name|doWithMethods
argument_list|(
name|bean
operator|.
name|getClass
argument_list|()
argument_list|,
name|method
lambda|->
block|{
name|setterInjection
argument_list|(
name|method
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
name|getPostProcessorHelper
argument_list|()
operator|.
name|consumerInjection
argument_list|(
name|method
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|injectBindToRegistryMethods (final Object bean, final String beanName)
specifier|protected
name|void
name|injectBindToRegistryMethods
parameter_list|(
specifier|final
name|Object
name|bean
parameter_list|,
specifier|final
name|String
name|beanName
parameter_list|)
block|{
comment|// sort the methods so the simplest are used first
specifier|final
name|List
argument_list|<
name|Method
argument_list|>
name|methods
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
name|ReflectionHelper
operator|.
name|doWithMethods
argument_list|(
name|bean
operator|.
name|getClass
argument_list|()
argument_list|,
name|method
lambda|->
block|{
name|BindToRegistry
name|bind
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|BindToRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bind
operator|!=
literal|null
operator|&&
name|getPostProcessorHelper
argument_list|()
operator|.
name|matchContext
argument_list|(
name|bind
operator|.
name|context
argument_list|()
argument_list|)
condition|)
block|{
name|methods
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// sort methods on shortest number of parameters as we want to process the most simplest first
name|methods
operator|.
name|sort
argument_list|(
name|Comparator
operator|.
name|comparingInt
argument_list|(
name|Method
operator|::
name|getParameterCount
argument_list|)
argument_list|)
expr_stmt|;
comment|// then do a more complex sorting where we check inter-dependency among the methods
name|methods
operator|.
name|sort
argument_list|(
parameter_list|(
name|m1
parameter_list|,
name|m2
parameter_list|)
lambda|->
block|{
name|Class
index|[]
name|types1
init|=
name|m1
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|Class
index|[]
name|types2
init|=
name|m2
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
comment|// favour methods that has no parameters
if|if
condition|(
name|types1
operator|.
name|length
operator|==
literal|0
operator|&&
name|types2
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|types1
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|types2
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
comment|// okay then compare so we favour methods that does not use parameter types that are returned from other methods
name|boolean
name|usedByOthers1
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Class
name|clazz
range|:
name|types1
control|)
block|{
name|usedByOthers1
operator||=
name|methods
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getParameterCount
argument_list|()
operator|>
literal|0
operator|&&
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|usedByOthers2
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Class
name|clazz
range|:
name|types2
control|)
block|{
name|usedByOthers2
operator||=
name|methods
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getParameterCount
argument_list|()
operator|>
literal|0
operator|&&
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Boolean
operator|.
name|compare
argument_list|(
name|usedByOthers1
argument_list|,
name|usedByOthers2
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Discovered {} @BindToRegistry methods"
argument_list|,
name|methods
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// bind each method
name|methods
operator|.
name|forEach
argument_list|(
name|method
lambda|->
block|{
name|BindToRegistry
name|bind
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|BindToRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|bindToRegistry
argument_list|(
name|method
argument_list|,
name|bind
operator|.
name|value
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|,
name|bind
operator|.
name|beanPostProcess
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|injectClass (final Object bean, final String beanName)
specifier|protected
name|void
name|injectClass
parameter_list|(
specifier|final
name|Object
name|bean
parameter_list|,
specifier|final
name|String
name|beanName
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|bean
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|BindToRegistry
name|ann
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|BindToRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ann
operator|!=
literal|null
operator|&&
name|getPostProcessorHelper
argument_list|()
operator|.
name|matchContext
argument_list|(
name|ann
operator|.
name|context
argument_list|()
argument_list|)
condition|)
block|{
name|bindToRegistry
argument_list|(
name|clazz
argument_list|,
name|ann
operator|.
name|value
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|,
name|ann
operator|.
name|beanPostProcess
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|injectNestedClasses (final Object bean, final String beanName)
specifier|protected
name|void
name|injectNestedClasses
parameter_list|(
specifier|final
name|Object
name|bean
parameter_list|,
specifier|final
name|String
name|beanName
parameter_list|)
block|{
name|ReflectionHelper
operator|.
name|doWithClasses
argument_list|(
name|bean
operator|.
name|getClass
argument_list|()
argument_list|,
name|clazz
lambda|->
block|{
name|BindToRegistry
name|ann
init|=
operator|(
name|BindToRegistry
operator|)
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|BindToRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ann
operator|!=
literal|null
operator|&&
name|getPostProcessorHelper
argument_list|()
operator|.
name|matchContext
argument_list|(
name|ann
operator|.
name|context
argument_list|()
argument_list|)
condition|)
block|{
comment|// its a nested class so we dont have a bean instance for it
name|bindToRegistry
argument_list|(
name|clazz
argument_list|,
name|ann
operator|.
name|value
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|ann
operator|.
name|beanPostProcess
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|setterInjection (Method method, Object bean, String beanName)
specifier|protected
name|void
name|setterInjection
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
block|{
name|PropertyInject
name|propertyInject
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|PropertyInject
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyInject
operator|!=
literal|null
operator|&&
name|getPostProcessorHelper
argument_list|()
operator|.
name|matchContext
argument_list|(
name|propertyInject
operator|.
name|context
argument_list|()
argument_list|)
condition|)
block|{
name|setterPropertyInjection
argument_list|(
name|method
argument_list|,
name|propertyInject
operator|.
name|value
argument_list|()
argument_list|,
name|propertyInject
operator|.
name|defaultValue
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
name|BeanInject
name|beanInject
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|BeanInject
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanInject
operator|!=
literal|null
operator|&&
name|getPostProcessorHelper
argument_list|()
operator|.
name|matchContext
argument_list|(
name|beanInject
operator|.
name|context
argument_list|()
argument_list|)
condition|)
block|{
name|setterBeanInjection
argument_list|(
name|method
argument_list|,
name|beanInject
operator|.
name|value
argument_list|()
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
name|EndpointInject
name|endpointInject
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|EndpointInject
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpointInject
operator|!=
literal|null
operator|&&
name|getPostProcessorHelper
argument_list|()
operator|.
name|matchContext
argument_list|(
name|endpointInject
operator|.
name|context
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|uri
init|=
name|endpointInject
operator|.
name|value
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|endpointInject
operator|.
name|uri
argument_list|()
else|:
name|endpointInject
operator|.
name|value
argument_list|()
decl_stmt|;
name|setterInjection
argument_list|(
name|method
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|,
name|uri
argument_list|,
name|endpointInject
operator|.
name|property
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Produce
name|produce
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Produce
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|produce
operator|!=
literal|null
operator|&&
name|getPostProcessorHelper
argument_list|()
operator|.
name|matchContext
argument_list|(
name|produce
operator|.
name|context
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|uri
init|=
name|produce
operator|.
name|value
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|produce
operator|.
name|uri
argument_list|()
else|:
name|produce
operator|.
name|value
argument_list|()
decl_stmt|;
name|setterInjection
argument_list|(
name|method
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|,
name|uri
argument_list|,
name|produce
operator|.
name|property
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setterInjection (Method method, Object bean, String beanName, String endpointUri, String endpointProperty)
specifier|public
name|void
name|setterInjection
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|,
name|String
name|endpointUri
parameter_list|,
name|String
name|endpointProperty
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameterTypes
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring badly annotated method for injection due to incorrect number of parameters: {}"
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|propertyName
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|getPropertyName
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|getPostProcessorHelper
argument_list|()
operator|.
name|getInjectionValue
argument_list|(
name|parameterTypes
index|[
literal|0
index|]
argument_list|,
name|endpointUri
argument_list|,
name|endpointProperty
argument_list|,
name|propertyName
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
decl_stmt|;
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|bean
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setterPropertyInjection (Method method, String propertyValue, String propertyDefaultValue, Object bean, String beanName)
specifier|public
name|void
name|setterPropertyInjection
parameter_list|(
name|Method
name|method
parameter_list|,
name|String
name|propertyValue
parameter_list|,
name|String
name|propertyDefaultValue
parameter_list|,
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameterTypes
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring badly annotated method for injection due to incorrect number of parameters: {}"
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|propertyName
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|getPropertyName
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|getPostProcessorHelper
argument_list|()
operator|.
name|getInjectionPropertyValue
argument_list|(
name|parameterTypes
index|[
literal|0
index|]
argument_list|,
name|propertyValue
argument_list|,
name|propertyDefaultValue
argument_list|,
name|propertyName
argument_list|,
name|bean
argument_list|,
name|beanName
argument_list|)
decl_stmt|;
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|bean
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setterBeanInjection (Method method, String name, Object bean, String beanName)
specifier|public
name|void
name|setterBeanInjection
parameter_list|(
name|Method
name|method
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameterTypes
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring badly annotated method for injection due to incorrect number of parameters: {}"
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|value
init|=
name|getPostProcessorHelper
argument_list|()
operator|.
name|getInjectionBeanValue
argument_list|(
name|parameterTypes
index|[
literal|0
index|]
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|bean
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|bindToRegistry (Class<?> clazz, String name, Object bean, String beanName, boolean beanPostProcess)
specifier|private
name|void
name|bindToRegistry
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|,
name|boolean
name|beanPostProcess
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
name|clazz
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bean
operator|==
literal|null
condition|)
block|{
comment|// no bean so then create an instance from its type
name|bean
operator|=
name|camelContext
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|beanPostProcess
condition|)
block|{
try|try
block|{
name|camelContext
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanPostProcessor
argument_list|()
operator|.
name|postProcessBeforeInitialization
argument_list|(
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanPostProcessor
argument_list|()
operator|.
name|postProcessAfterInitialization
argument_list|(
name|bean
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
name|name
argument_list|,
name|bean
argument_list|)
expr_stmt|;
block|}
DECL|method|bindToRegistry (Field field, String name, Object bean, String beanName, boolean beanPostProcess)
specifier|private
name|void
name|bindToRegistry
parameter_list|(
name|Field
name|field
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|,
name|boolean
name|beanPostProcess
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
name|field
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Object
name|value
init|=
name|ReflectionHelper
operator|.
name|getField
argument_list|(
name|field
argument_list|,
name|bean
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|beanPostProcess
condition|)
block|{
try|try
block|{
name|camelContext
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanPostProcessor
argument_list|()
operator|.
name|postProcessBeforeInitialization
argument_list|(
name|value
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanPostProcessor
argument_list|()
operator|.
name|postProcessAfterInitialization
argument_list|(
name|value
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|bindToRegistry (Method method, String name, Object bean, String beanName, boolean beanPostProcess)
specifier|private
name|void
name|bindToRegistry
parameter_list|(
name|Method
name|method
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|,
name|boolean
name|beanPostProcess
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
name|method
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|returnType
init|=
name|method
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
if|if
condition|(
name|returnType
operator|==
literal|null
operator|||
name|returnType
operator|==
name|Void
operator|.
name|TYPE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"@BindToRegistry on class: "
operator|+
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|+
literal|" method: "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|" with void return type is not allowed"
argument_list|)
throw|;
block|}
name|Object
name|value
decl_stmt|;
name|Object
index|[]
name|parameters
init|=
name|bindToRegistryParameterMapping
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|bean
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|bean
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|beanPostProcess
condition|)
block|{
try|try
block|{
name|camelContext
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanPostProcessor
argument_list|()
operator|.
name|postProcessBeforeInitialization
argument_list|(
name|value
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanPostProcessor
argument_list|()
operator|.
name|postProcessAfterInitialization
argument_list|(
name|value
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|bindToRegistryParameterMapping (Method method)
specifier|private
name|Object
index|[]
name|bindToRegistryParameterMapping
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
if|if
condition|(
name|method
operator|.
name|getParameterCount
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// map each parameter if possible
name|Object
index|[]
name|parameters
init|=
operator|new
name|Object
index|[
name|method
operator|.
name|getParameterCount
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|method
operator|.
name|getParameterCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
condition|)
block|{
name|parameters
index|[
name|i
index|]
operator|=
name|camelContext
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|Registry
operator|.
name|class
argument_list|)
condition|)
block|{
name|parameters
index|[
name|i
index|]
operator|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|TypeConverter
operator|.
name|class
argument_list|)
condition|)
block|{
name|parameters
index|[
name|i
index|]
operator|=
name|camelContext
operator|.
name|getTypeConverter
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// we also support @BeanInject and @PropertyInject annotations
name|Annotation
index|[]
name|anns
init|=
name|method
operator|.
name|getParameterAnnotations
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|anns
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// we dont assume there are multiple annotations on the same parameter so grab first
name|Annotation
name|ann
init|=
name|anns
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|ann
operator|.
name|annotationType
argument_list|()
operator|==
name|PropertyInject
operator|.
name|class
condition|)
block|{
name|PropertyInject
name|pi
init|=
operator|(
name|PropertyInject
operator|)
name|ann
decl_stmt|;
comment|// build key with default value included as this is supported during resolving
name|String
name|key
init|=
name|pi
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|pi
operator|.
name|defaultValue
argument_list|()
argument_list|)
condition|)
block|{
name|key
operator|=
name|key
operator|+
literal|":"
operator|+
name|pi
operator|.
name|defaultValue
argument_list|()
expr_stmt|;
block|}
comment|// need to force property lookup by having key enclosed in tokens
name|key
operator|=
name|PropertiesComponent
operator|.
name|PREFIX_TOKEN
operator|+
name|key
operator|+
name|PropertiesComponent
operator|.
name|SUFFIX_TOKEN
expr_stmt|;
try|try
block|{
name|Object
name|value
init|=
name|camelContext
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|parameters
index|[
name|i
index|]
operator|=
name|camelContext
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ann
operator|.
name|annotationType
argument_list|()
operator|==
name|BeanInject
operator|.
name|class
condition|)
block|{
name|BeanInject
name|bi
init|=
operator|(
name|BeanInject
operator|)
name|ann
decl_stmt|;
name|String
name|key
init|=
name|bi
operator|.
name|value
argument_list|()
decl_stmt|;
name|Object
name|value
decl_stmt|;
if|if
condition|(
name|isEmpty
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// empty key so lookup anonymously by type
name|Set
argument_list|<
name|?
argument_list|>
name|instances
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByType
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|instances
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|NoSuchBeanException
argument_list|(
literal|null
argument_list|,
name|key
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|instances
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|parameters
index|[
name|i
index|]
operator|=
name|instances
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// there are multiple instances of the same type, so barf
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Multiple beans of the same type: "
operator|+
name|type
operator|+
literal|" exists in the Camel registry. Specify the bean name on @BeanInject to bind to a single bean, at the method: "
operator|+
name|method
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|value
operator|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByName
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchBeanException
argument_list|(
name|key
argument_list|)
throw|;
block|}
name|parameters
index|[
name|i
index|]
operator|=
name|camelContext
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// okay attempt to default to singleton instances from the registry
name|Set
argument_list|<
name|?
argument_list|>
name|instances
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByType
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|instances
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|parameters
index|[
name|i
index|]
operator|=
name|instances
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|instances
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// there are multiple instances of the same type, so barf
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Multiple beans of the same type: "
operator|+
name|type
operator|+
literal|" exists in the Camel registry. Specify the bean name on @BeanInject to bind to a single bean, at the method: "
operator|+
name|method
argument_list|)
throw|;
block|}
block|}
block|}
comment|// each parameter must be mapped
if|if
condition|(
name|parameters
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|int
name|pos
init|=
name|i
operator|+
literal|1
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"@BindToProperty cannot bind parameter #"
operator|+
name|pos
operator|+
literal|" on method: "
operator|+
name|method
argument_list|)
throw|;
block|}
block|}
return|return
name|parameters
return|;
block|}
block|}
end_class

end_unit

