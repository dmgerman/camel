begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelInternalProcessorAdvice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Contract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataTypeAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A {@link CamelInternalProcessorAdvice} which applies {@link Transformer} and {@link Validator}  * according to the data type Contract.  *<p/>  * The default camel {@link Message} implements {@link DataTypeAware} which  * holds a {@link DataType} to indicate current message type. If the input type  * declared by {@link org.apache.camel.model.InputTypeDefinition} is different from current IN message type,  * camel internal processor look for a Transformer which transforms from the current  * message type to the expected message type before routing.  * After routing, if the output type declared by {@link org.apache.camel.model.OutputTypeDefinition} is different  * from current OUT message (or IN message if no OUT), camel look for a Transformer and apply.  *   * @see Transformer  * @see Validator  * @see org.apache.camel.model.InputTypeDefinition  * @see org.apache.camel.model.OutputTypeDefinition  */
end_comment

begin_class
DECL|class|ContractAdvice
specifier|public
class|class
name|ContractAdvice
implements|implements
name|CamelInternalProcessorAdvice
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContractAdvice
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|contract
specifier|private
name|Contract
name|contract
decl_stmt|;
DECL|method|ContractAdvice (Contract contract)
specifier|public
name|ContractAdvice
parameter_list|(
name|Contract
name|contract
parameter_list|)
block|{
name|this
operator|.
name|contract
operator|=
name|contract
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|before (Exchange exchange)
specifier|public
name|Object
name|before
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
operator|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|instanceof
name|DataTypeAware
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|DataType
name|to
init|=
name|contract
operator|.
name|getInputType
argument_list|()
decl_stmt|;
if|if
condition|(
name|to
operator|!=
literal|null
condition|)
block|{
name|DataTypeAware
name|target
init|=
operator|(
name|DataTypeAware
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|DataType
name|from
init|=
name|target
operator|.
name|getDataType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|to
operator|.
name|equals
argument_list|(
name|from
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking for transformer for INPUT: from='{}', to='{}'"
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|doTransform
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|target
operator|.
name|setDataType
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contract
operator|.
name|isValidateInput
argument_list|()
condition|)
block|{
name|doValidate
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|after (Exchange exchange, Object data)
specifier|public
name|void
name|after
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|data
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|exchange
operator|.
name|isFailed
argument_list|()
condition|)
block|{
comment|// TODO can we add FAULT_TYPE processing?
return|return;
block|}
name|Message
name|target
init|=
name|exchange
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|target
operator|instanceof
name|DataTypeAware
operator|)
condition|)
block|{
return|return;
block|}
try|try
block|{
name|DataType
name|to
init|=
name|contract
operator|.
name|getOutputType
argument_list|()
decl_stmt|;
if|if
condition|(
name|to
operator|!=
literal|null
condition|)
block|{
name|DataTypeAware
name|typeAwareTarget
init|=
operator|(
name|DataTypeAware
operator|)
name|target
decl_stmt|;
name|DataType
name|from
init|=
name|typeAwareTarget
operator|.
name|getDataType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|to
operator|.
name|equals
argument_list|(
name|from
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking for transformer for OUTPUT: from='{}', to='{}'"
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|doTransform
argument_list|(
name|target
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|typeAwareTarget
operator|.
name|setDataType
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contract
operator|.
name|isValidateOutput
argument_list|()
condition|)
block|{
name|doValidate
argument_list|(
name|target
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTransform (Message message, DataType from, DataType to)
specifier|private
name|void
name|doTransform
parameter_list|(
name|Message
name|message
parameter_list|,
name|DataType
name|from
parameter_list|,
name|DataType
name|to
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|from
operator|==
literal|null
condition|)
block|{
comment|// If 'from' is null, only Java-Java convertion is performed.
comment|// It means if 'to' is other than Java, it's assumed to be already in expected type.
name|convertIfRequired
argument_list|(
name|message
argument_list|,
name|to
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// transform into 'from' type before performing declared transformation
name|convertIfRequired
argument_list|(
name|message
argument_list|,
name|from
argument_list|)
expr_stmt|;
if|if
condition|(
name|applyMatchedTransformer
argument_list|(
name|message
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
condition|)
block|{
comment|// Found matched transformer. Java-Java transformer is also allowed.
return|return;
block|}
elseif|else
if|if
condition|(
name|from
operator|.
name|isJavaType
argument_list|()
condition|)
block|{
comment|// Try TypeConverter as a fallback for Java->Java transformation
name|convertIfRequired
argument_list|(
name|message
argument_list|,
name|to
argument_list|)
expr_stmt|;
comment|// If Java->Other transformation required but no transformer matched,
comment|// then assume it's already in expected type, i.e. do nothing.
return|return;
block|}
elseif|else
if|if
condition|(
name|applyTransformerChain
argument_list|(
name|message
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
condition|)
block|{
comment|// Other->Other transformation - found a transformer chain
return|return;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No Transformer found for [from='"
operator|+
name|from
operator|+
literal|"', to='"
operator|+
name|to
operator|+
literal|"']"
argument_list|)
throw|;
block|}
DECL|method|convertIfRequired (Message message, DataType type)
specifier|private
name|boolean
name|convertIfRequired
parameter_list|(
name|Message
name|message
parameter_list|,
name|DataType
name|type
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO for better performance it may be better to add TypeConverterTransformer
comment|// into transformer registry automatically to avoid unnecessary scan in transformer registry
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|isJavaType
argument_list|()
operator|&&
name|type
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
name|message
operator|!=
literal|null
operator|&&
name|message
operator|.
name|getBody
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CamelContext
name|context
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|typeJava
init|=
name|getClazz
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|typeJava
operator|.
name|isAssignableFrom
argument_list|(
name|message
operator|.
name|getBody
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Converting to '{}'"
argument_list|,
name|typeJava
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|message
operator|.
name|getMandatoryBody
argument_list|(
name|typeJava
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|applyTransformer (Transformer transformer, Message message, DataType from, DataType to)
specifier|private
name|boolean
name|applyTransformer
parameter_list|(
name|Transformer
name|transformer
parameter_list|,
name|Message
name|message
parameter_list|,
name|DataType
name|from
parameter_list|,
name|DataType
name|to
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|transformer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Applying transformer: from='{}', to='{}', transformer='{}'"
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|transformer
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|message
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|applyMatchedTransformer (Message message, DataType from, DataType to)
specifier|private
name|boolean
name|applyMatchedTransformer
parameter_list|(
name|Message
name|message
parameter_list|,
name|DataType
name|from
parameter_list|,
name|DataType
name|to
parameter_list|)
throws|throws
name|Exception
block|{
name|Transformer
name|transformer
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|resolveTransformer
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
return|return
name|applyTransformer
argument_list|(
name|transformer
argument_list|,
name|message
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
return|;
block|}
DECL|method|applyTransformerChain (Message message, DataType from, DataType to)
specifier|private
name|boolean
name|applyTransformerChain
parameter_list|(
name|Message
name|message
parameter_list|,
name|DataType
name|from
parameter_list|,
name|DataType
name|to
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|Transformer
name|fromTransformer
init|=
name|context
operator|.
name|resolveTransformer
argument_list|(
name|from
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
name|Transformer
name|toTransformer
init|=
name|context
operator|.
name|resolveTransformer
argument_list|(
name|to
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromTransformer
operator|!=
literal|null
operator|&&
name|toTransformer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Applying transformer 1/2: from='{}', to='{}', transformer='{}'"
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|fromTransformer
argument_list|)
expr_stmt|;
name|fromTransformer
operator|.
name|transform
argument_list|(
name|message
argument_list|,
name|from
argument_list|,
operator|new
name|DataType
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Applying transformer 2/2: from='{}', to='{}', transformer='{}'"
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|toTransformer
argument_list|)
expr_stmt|;
name|toTransformer
operator|.
name|transform
argument_list|(
name|message
argument_list|,
operator|new
name|DataType
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|to
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getClazz (String type, CamelContext context)
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|getClazz
parameter_list|(
name|String
name|type
parameter_list|,
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|context
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|doValidate (Message message, DataType type)
specifier|private
name|void
name|doValidate
parameter_list|(
name|Message
name|message
parameter_list|,
name|DataType
name|type
parameter_list|)
throws|throws
name|ValidationException
block|{
name|Validator
name|validator
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|resolveValidator
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|validator
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Applying validator: type='{}', validator='{}'"
argument_list|,
name|type
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|validator
operator|.
name|validate
argument_list|(
name|message
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ValidationException
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"No Validator found for '%s'"
argument_list|,
name|type
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

