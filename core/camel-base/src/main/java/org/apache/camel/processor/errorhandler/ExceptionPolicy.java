begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.errorhandler
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|errorhandler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_class
DECL|class|ExceptionPolicy
specifier|public
class|class
name|ExceptionPolicy
block|{
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|routeId
specifier|private
name|String
name|routeId
decl_stmt|;
DECL|field|useOriginalInMessage
specifier|private
name|boolean
name|useOriginalInMessage
decl_stmt|;
DECL|field|useOriginalInBody
specifier|private
name|boolean
name|useOriginalInBody
decl_stmt|;
DECL|field|hasOutputs
specifier|private
name|boolean
name|hasOutputs
decl_stmt|;
DECL|field|handledPolicy
specifier|private
name|Predicate
name|handledPolicy
decl_stmt|;
DECL|field|continuedPolicy
specifier|private
name|Predicate
name|continuedPolicy
decl_stmt|;
DECL|field|retryWhilePolicy
specifier|private
name|Predicate
name|retryWhilePolicy
decl_stmt|;
DECL|field|onRedelivery
specifier|private
name|Processor
name|onRedelivery
decl_stmt|;
DECL|field|onExceptionOccurred
specifier|private
name|Processor
name|onExceptionOccurred
decl_stmt|;
DECL|field|redeliveryPolicyRef
specifier|private
name|String
name|redeliveryPolicyRef
decl_stmt|;
DECL|field|redeliveryPolicy
specifier|private
name|Map
argument_list|<
name|RedeliveryOption
argument_list|,
name|String
argument_list|>
name|redeliveryPolicy
decl_stmt|;
DECL|field|exceptions
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|exceptions
decl_stmt|;
DECL|method|ExceptionPolicy (String id, String routeId, boolean useOriginalInMessage, boolean useOriginalInBody, boolean hasOutputs, Predicate handledPolicy, Predicate continuedPolicy, Predicate retryWhilePolicy, Processor onRedelivery, Processor onExceptionOccurred, String redeliveryPolicyRef, Map<RedeliveryOption, String> redeliveryPolicy, List<String> exceptions)
specifier|public
name|ExceptionPolicy
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|routeId
parameter_list|,
name|boolean
name|useOriginalInMessage
parameter_list|,
name|boolean
name|useOriginalInBody
parameter_list|,
name|boolean
name|hasOutputs
parameter_list|,
name|Predicate
name|handledPolicy
parameter_list|,
name|Predicate
name|continuedPolicy
parameter_list|,
name|Predicate
name|retryWhilePolicy
parameter_list|,
name|Processor
name|onRedelivery
parameter_list|,
name|Processor
name|onExceptionOccurred
parameter_list|,
name|String
name|redeliveryPolicyRef
parameter_list|,
name|Map
argument_list|<
name|RedeliveryOption
argument_list|,
name|String
argument_list|>
name|redeliveryPolicy
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|exceptions
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|routeId
operator|=
name|routeId
expr_stmt|;
name|this
operator|.
name|useOriginalInMessage
operator|=
name|useOriginalInMessage
expr_stmt|;
name|this
operator|.
name|useOriginalInBody
operator|=
name|useOriginalInBody
expr_stmt|;
name|this
operator|.
name|hasOutputs
operator|=
name|hasOutputs
expr_stmt|;
name|this
operator|.
name|handledPolicy
operator|=
name|handledPolicy
expr_stmt|;
name|this
operator|.
name|continuedPolicy
operator|=
name|continuedPolicy
expr_stmt|;
name|this
operator|.
name|retryWhilePolicy
operator|=
name|retryWhilePolicy
expr_stmt|;
name|this
operator|.
name|onRedelivery
operator|=
name|onRedelivery
expr_stmt|;
name|this
operator|.
name|onExceptionOccurred
operator|=
name|onExceptionOccurred
expr_stmt|;
name|this
operator|.
name|redeliveryPolicyRef
operator|=
name|redeliveryPolicyRef
expr_stmt|;
name|this
operator|.
name|redeliveryPolicy
operator|=
name|redeliveryPolicy
expr_stmt|;
name|this
operator|.
name|exceptions
operator|=
name|exceptions
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getRouteId ()
specifier|public
name|String
name|getRouteId
parameter_list|()
block|{
return|return
name|routeId
return|;
block|}
DECL|method|isUseOriginalInMessage ()
specifier|public
name|boolean
name|isUseOriginalInMessage
parameter_list|()
block|{
return|return
name|useOriginalInMessage
return|;
block|}
DECL|method|isUseOriginalInBody ()
specifier|public
name|boolean
name|isUseOriginalInBody
parameter_list|()
block|{
return|return
name|useOriginalInBody
return|;
block|}
DECL|method|getExceptions ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getExceptions
parameter_list|()
block|{
return|return
name|exceptions
return|;
block|}
DECL|method|getHandledPolicy ()
specifier|public
name|Predicate
name|getHandledPolicy
parameter_list|()
block|{
return|return
name|handledPolicy
return|;
block|}
DECL|method|getContinuedPolicy ()
specifier|public
name|Predicate
name|getContinuedPolicy
parameter_list|()
block|{
return|return
name|continuedPolicy
return|;
block|}
DECL|method|getRetryWhilePolicy ()
specifier|public
name|Predicate
name|getRetryWhilePolicy
parameter_list|()
block|{
return|return
name|retryWhilePolicy
return|;
block|}
DECL|method|getOnRedelivery ()
specifier|public
name|Processor
name|getOnRedelivery
parameter_list|()
block|{
return|return
name|onRedelivery
return|;
block|}
DECL|method|getOnExceptionOccurred ()
specifier|public
name|Processor
name|getOnExceptionOccurred
parameter_list|()
block|{
return|return
name|onExceptionOccurred
return|;
block|}
comment|/**      * Allows an exception handler to create a new redelivery policy for this exception type      *      * @param context      the camel context      * @param parentPolicy the current redelivery policy, is newer<tt>null</tt>      * @return a newly created redelivery policy, or return the original policy if no customization is required      *         for this exception handler.      */
DECL|method|createRedeliveryPolicy (CamelContext context, RedeliveryPolicy parentPolicy)
specifier|public
name|RedeliveryPolicy
name|createRedeliveryPolicy
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|RedeliveryPolicy
name|parentPolicy
parameter_list|)
block|{
if|if
condition|(
name|redeliveryPolicyRef
operator|!=
literal|null
condition|)
block|{
return|return
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|context
argument_list|,
name|redeliveryPolicyRef
argument_list|,
name|RedeliveryPolicy
operator|.
name|class
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|redeliveryPolicy
operator|!=
literal|null
condition|)
block|{
return|return
name|createRedeliveryPolicy
argument_list|(
name|redeliveryPolicy
argument_list|,
name|context
argument_list|,
name|parentPolicy
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hasOutputs
operator|&&
name|parentPolicy
operator|.
name|getMaximumRedeliveries
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// if we have outputs, then do not inherit parent maximumRedeliveries
comment|// as you would have to explicit configure maximumRedeliveries on this onException to use it
comment|// this is the behavior Camel has always had
name|RedeliveryPolicy
name|answer
init|=
name|parentPolicy
operator|.
name|copy
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
else|else
block|{
return|return
name|parentPolicy
return|;
block|}
block|}
DECL|method|determineIfRedeliveryIsEnabled (CamelContext camelContext)
specifier|public
name|boolean
name|determineIfRedeliveryIsEnabled
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|redeliveryPolicyRef
operator|!=
literal|null
condition|)
block|{
comment|// lookup in registry if ref provided
name|RedeliveryPolicy
name|policy
init|=
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|camelContext
argument_list|,
name|redeliveryPolicyRef
argument_list|,
name|RedeliveryPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|.
name|getMaximumRedeliveries
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// must check for != 0 as (-1 means redeliver forever)
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|redeliveryPolicy
operator|!=
literal|null
condition|)
block|{
name|Integer
name|max
init|=
name|CamelContextHelper
operator|.
name|parseInteger
argument_list|(
name|camelContext
argument_list|,
name|redeliveryPolicy
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|maximumRedeliveries
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|max
operator|!=
literal|null
operator|&&
name|max
operator|!=
literal|0
condition|)
block|{
comment|// must check for != 0 as (-1 means redeliver forever)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|retryWhilePolicy
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|enum|RedeliveryOption
specifier|public
enum|enum
name|RedeliveryOption
block|{
DECL|enumConstant|maximumRedeliveries
name|maximumRedeliveries
block|,
DECL|enumConstant|redeliveryDelay
name|redeliveryDelay
block|,
DECL|enumConstant|asyncDelayedRedelivery
name|asyncDelayedRedelivery
block|,
DECL|enumConstant|backOffMultiplier
name|backOffMultiplier
block|,
DECL|enumConstant|useExponentialBackOff
name|useExponentialBackOff
block|,
DECL|enumConstant|collisionAvoidanceFactor
name|collisionAvoidanceFactor
block|,
DECL|enumConstant|useCollisionAvoidance
name|useCollisionAvoidance
block|,
DECL|enumConstant|maximumRedeliveryDelay
name|maximumRedeliveryDelay
block|,
DECL|enumConstant|retriesExhaustedLogLevel
name|retriesExhaustedLogLevel
block|,
DECL|enumConstant|retryAttemptedLogLevel
name|retryAttemptedLogLevel
block|,
DECL|enumConstant|retryAttemptedLogInterval
name|retryAttemptedLogInterval
block|,
DECL|enumConstant|logRetryAttempted
name|logRetryAttempted
block|,
DECL|enumConstant|logStackTrace
name|logStackTrace
block|,
DECL|enumConstant|logRetryStackTrace
name|logRetryStackTrace
block|,
DECL|enumConstant|logHandled
name|logHandled
block|,
DECL|enumConstant|logNewException
name|logNewException
block|,
DECL|enumConstant|logContinued
name|logContinued
block|,
DECL|enumConstant|logExhausted
name|logExhausted
block|,
DECL|enumConstant|logExhaustedMessageHistory
name|logExhaustedMessageHistory
block|,
DECL|enumConstant|logExhaustedMessageBody
name|logExhaustedMessageBody
block|,
DECL|enumConstant|disableRedelivery
name|disableRedelivery
block|,
DECL|enumConstant|delayPattern
name|delayPattern
block|,
DECL|enumConstant|allowRedeliveryWhileStopping
name|allowRedeliveryWhileStopping
block|,
DECL|enumConstant|exchangeFormatterRef
name|exchangeFormatterRef
block|;     }
DECL|method|createRedeliveryPolicy (Map<RedeliveryOption, String> definition, CamelContext context, RedeliveryPolicy parentPolicy)
specifier|private
specifier|static
name|RedeliveryPolicy
name|createRedeliveryPolicy
parameter_list|(
name|Map
argument_list|<
name|RedeliveryOption
argument_list|,
name|String
argument_list|>
name|definition
parameter_list|,
name|CamelContext
name|context
parameter_list|,
name|RedeliveryPolicy
name|parentPolicy
parameter_list|)
block|{
name|RedeliveryPolicy
name|answer
decl_stmt|;
if|if
condition|(
name|parentPolicy
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|parentPolicy
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
operator|new
name|RedeliveryPolicy
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|maximumRedeliveries
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setMaximumRedeliveries
argument_list|(
name|CamelContextHelper
operator|.
name|parseInteger
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|maximumRedeliveries
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|redeliveryDelay
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setRedeliveryDelay
argument_list|(
name|CamelContextHelper
operator|.
name|parseLong
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|redeliveryDelay
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|asyncDelayedRedelivery
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setAsyncDelayedRedelivery
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|asyncDelayedRedelivery
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|retriesExhaustedLogLevel
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setRetriesExhaustedLogLevel
argument_list|(
name|LoggingLevel
operator|.
name|valueOf
argument_list|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|retriesExhaustedLogLevel
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|retryAttemptedLogLevel
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setRetryAttemptedLogLevel
argument_list|(
name|LoggingLevel
operator|.
name|valueOf
argument_list|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|retryAttemptedLogLevel
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|retryAttemptedLogInterval
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setRetryAttemptedLogInterval
argument_list|(
name|CamelContextHelper
operator|.
name|parseInteger
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|retryAttemptedLogInterval
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|backOffMultiplier
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setBackOffMultiplier
argument_list|(
name|CamelContextHelper
operator|.
name|parseDouble
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|backOffMultiplier
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|useExponentialBackOff
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setUseExponentialBackOff
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|useExponentialBackOff
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|collisionAvoidanceFactor
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setCollisionAvoidanceFactor
argument_list|(
name|CamelContextHelper
operator|.
name|parseDouble
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|collisionAvoidanceFactor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|useCollisionAvoidance
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setUseCollisionAvoidance
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|useCollisionAvoidance
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|maximumRedeliveryDelay
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setMaximumRedeliveryDelay
argument_list|(
name|CamelContextHelper
operator|.
name|parseLong
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|maximumRedeliveryDelay
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logStackTrace
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setLogStackTrace
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logStackTrace
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logRetryStackTrace
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setLogRetryStackTrace
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logRetryStackTrace
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logHandled
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setLogHandled
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logHandled
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logNewException
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setLogNewException
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logNewException
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logContinued
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setLogContinued
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logContinued
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logRetryAttempted
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setLogRetryAttempted
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logRetryAttempted
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logExhausted
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setLogExhausted
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logExhausted
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logExhaustedMessageHistory
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setLogExhaustedMessageHistory
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logExhaustedMessageHistory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logExhaustedMessageBody
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setLogExhaustedMessageBody
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|logExhaustedMessageBody
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|disableRedelivery
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|disableRedelivery
argument_list|)
argument_list|)
condition|)
block|{
name|answer
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|delayPattern
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setDelayPattern
argument_list|(
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|delayPattern
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|allowRedeliveryWhileStopping
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setAllowRedeliveryWhileStopping
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|allowRedeliveryWhileStopping
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|exchangeFormatterRef
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setExchangeFormatterRef
argument_list|(
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|get
argument_list|(
name|RedeliveryOption
operator|.
name|exchangeFormatterRef
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

