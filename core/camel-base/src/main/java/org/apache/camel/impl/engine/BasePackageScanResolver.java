begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Base class for package scan resolvers.  */
end_comment

begin_class
DECL|class|BasePackageScanResolver
specifier|public
specifier|abstract
class|class
name|BasePackageScanResolver
extends|extends
name|ServiceSupport
implements|implements
name|CamelContextAware
block|{
DECL|field|log
specifier|protected
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|acceptableSchemes
specifier|protected
name|String
index|[]
name|acceptableSchemes
init|=
block|{}
decl_stmt|;
DECL|field|classLoaders
specifier|private
specifier|final
name|Set
argument_list|<
name|ClassLoader
argument_list|>
name|classLoaders
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|method|BasePackageScanResolver ()
specifier|public
name|BasePackageScanResolver
parameter_list|()
block|{
try|try
block|{
name|ClassLoader
name|ccl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|ccl
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Adding ContextClassLoader from current thread: {}"
argument_list|,
name|ccl
argument_list|)
expr_stmt|;
name|classLoaders
operator|.
name|add
argument_list|(
name|ccl
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore this exception
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot add ContextClassLoader from current thread due {}. This exception will be ignored."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|classLoaders
operator|.
name|add
argument_list|(
name|BasePackageScanResolver
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|addClassLoader (ClassLoader classLoader)
specifier|public
name|void
name|addClassLoader
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|)
block|{
name|classLoaders
operator|.
name|add
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
comment|/**      * To specify a set of accepted schemas to use for loading resources as URL connections      * (besides http and https schemas)      */
DECL|method|setAcceptableSchemes (String schemes)
specifier|public
name|void
name|setAcceptableSchemes
parameter_list|(
name|String
name|schemes
parameter_list|)
block|{
if|if
condition|(
name|schemes
operator|!=
literal|null
condition|)
block|{
name|acceptableSchemes
operator|=
name|schemes
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isAcceptableScheme (String urlPath)
specifier|protected
name|boolean
name|isAcceptableScheme
parameter_list|(
name|String
name|urlPath
parameter_list|)
block|{
if|if
condition|(
name|urlPath
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|scheme
range|:
name|acceptableSchemes
control|)
block|{
if|if
condition|(
name|urlPath
operator|.
name|startsWith
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getClassLoaders ()
specifier|public
name|Set
argument_list|<
name|ClassLoader
argument_list|>
name|getClassLoaders
parameter_list|()
block|{
comment|// return a new set to avoid any concurrency issues in other runtimes such as OSGi
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|classLoaders
argument_list|)
argument_list|)
return|;
block|}
comment|// We can override this method to support the custom ResourceLocator
DECL|method|customResourceLocator (URL url)
specifier|protected
name|URL
name|customResourceLocator
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do nothing here
return|return
name|url
return|;
block|}
comment|/**      * Strategy to get the resources by the given classloader.      *<p/>      * Notice that in WebSphere platforms there is a {@link WebSpherePackageScanClassResolver}      * to take care of WebSphere's oddity of resource loading.      *      * @param loader  the classloader      * @param packageName   the packagename for the package to load      * @return  URL's for the given package      * @throws IOException is thrown by the classloader      */
DECL|method|getResources (ClassLoader loader, String packageName)
specifier|protected
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|getResources
parameter_list|(
name|ClassLoader
name|loader
parameter_list|,
name|String
name|packageName
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Getting resource URL for package: {} with classloader: {}"
argument_list|,
name|packageName
argument_list|,
name|loader
argument_list|)
expr_stmt|;
comment|// If the URL is a jar, the URLClassloader.getResources() seems to require a trailing slash.  The
comment|// trailing slash is harmless for other URLs
if|if
condition|(
operator|!
name|packageName
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|packageName
operator|=
name|packageName
operator|+
literal|"/"
expr_stmt|;
block|}
return|return
name|loader
operator|.
name|getResources
argument_list|(
name|packageName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

