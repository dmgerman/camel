begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.throttling
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|throttling
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RoutePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|RoutePolicySupport
import|;
end_import

begin_comment
comment|/**  * Modeled after the circuit breaker {@link ThrottlingInflightRoutePolicy}  * this {@link RoutePolicy} will stop consuming from an endpoint based on the type of exceptions that are  * thrown and the threshold setting.  *  * the scenario: if a route cannot process data from an endpoint due to problems with resources used by the route  * (ie database down) then it will stop consuming new messages from the endpoint by stopping the consumer.  * The implementation is comparable to the Circuit Breaker pattern. After a set amount of time, it will move  * to a half open state and attempt to determine if the consumer can be started.  * There are two ways to determine if a route can be closed after being opened  * (1) start the consumer and check the failure threshold  * (2) call the {@link ThrottlingExceptionHalfOpenHandler}  * The second option allows a custom check to be performed without having to take on the possibility of  * multiple messages from the endpoint. The idea is that a handler could run a simple test (ie select 1 from dual)  * to determine if the processes that cause the route to be open are now available  */
end_comment

begin_class
DECL|class|ThrottlingExceptionRoutePolicy
specifier|public
class|class
name|ThrottlingExceptionRoutePolicy
extends|extends
name|RoutePolicySupport
implements|implements
name|CamelContextAware
block|{
DECL|field|STATE_CLOSED
specifier|private
specifier|static
specifier|final
name|int
name|STATE_CLOSED
init|=
literal|0
decl_stmt|;
DECL|field|STATE_HALF_OPEN
specifier|private
specifier|static
specifier|final
name|int
name|STATE_HALF_OPEN
init|=
literal|1
decl_stmt|;
DECL|field|STATE_OPEN
specifier|private
specifier|static
specifier|final
name|int
name|STATE_OPEN
init|=
literal|2
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|// configuration
DECL|field|failureThreshold
specifier|private
name|int
name|failureThreshold
decl_stmt|;
DECL|field|failureWindow
specifier|private
name|long
name|failureWindow
decl_stmt|;
DECL|field|halfOpenAfter
specifier|private
name|long
name|halfOpenAfter
decl_stmt|;
DECL|field|throttledExceptions
specifier|private
specifier|final
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|throttledExceptions
decl_stmt|;
comment|// handler for half open circuit
comment|// can be used instead of resuming route
comment|// to check on resources
DECL|field|halfOpenHandler
specifier|private
name|ThrottlingExceptionHalfOpenHandler
name|halfOpenHandler
decl_stmt|;
comment|// stateful information
DECL|field|failures
specifier|private
specifier|final
name|AtomicInteger
name|failures
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|state
specifier|private
specifier|final
name|AtomicInteger
name|state
init|=
operator|new
name|AtomicInteger
argument_list|(
name|STATE_CLOSED
argument_list|)
decl_stmt|;
DECL|field|keepOpen
specifier|private
specifier|final
name|AtomicBoolean
name|keepOpen
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|halfOpenTimer
specifier|private
specifier|volatile
name|Timer
name|halfOpenTimer
decl_stmt|;
DECL|field|lastFailure
specifier|private
specifier|volatile
name|long
name|lastFailure
decl_stmt|;
DECL|field|openedAt
specifier|private
specifier|volatile
name|long
name|openedAt
decl_stmt|;
DECL|method|ThrottlingExceptionRoutePolicy (int threshold, long failureWindow, long halfOpenAfter, List<Class<?>> handledExceptions)
specifier|public
name|ThrottlingExceptionRoutePolicy
parameter_list|(
name|int
name|threshold
parameter_list|,
name|long
name|failureWindow
parameter_list|,
name|long
name|halfOpenAfter
parameter_list|,
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|handledExceptions
parameter_list|)
block|{
name|this
argument_list|(
name|threshold
argument_list|,
name|failureWindow
argument_list|,
name|halfOpenAfter
argument_list|,
name|handledExceptions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|ThrottlingExceptionRoutePolicy (int threshold, long failureWindow, long halfOpenAfter, List<Class<?>> handledExceptions, boolean keepOpen)
specifier|public
name|ThrottlingExceptionRoutePolicy
parameter_list|(
name|int
name|threshold
parameter_list|,
name|long
name|failureWindow
parameter_list|,
name|long
name|halfOpenAfter
parameter_list|,
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|handledExceptions
parameter_list|,
name|boolean
name|keepOpen
parameter_list|)
block|{
name|this
operator|.
name|throttledExceptions
operator|=
name|handledExceptions
expr_stmt|;
name|this
operator|.
name|failureWindow
operator|=
name|failureWindow
expr_stmt|;
name|this
operator|.
name|halfOpenAfter
operator|=
name|halfOpenAfter
expr_stmt|;
name|this
operator|.
name|failureThreshold
operator|=
name|threshold
expr_stmt|;
name|this
operator|.
name|keepOpen
operator|.
name|set
argument_list|(
name|keepOpen
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|onInit (Route route)
specifier|public
name|void
name|onInit
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Initializing ThrottlingExceptionRoutePolicy route policy..."
argument_list|)
expr_stmt|;
name|logState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onStart (Route route)
specifier|public
name|void
name|onStart
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
comment|// if keepOpen then start w/ the circuit open
if|if
condition|(
name|keepOpen
operator|.
name|get
argument_list|()
condition|)
block|{
name|openCircuit
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onExchangeDone (Route route, Exchange exchange)
specifier|public
name|void
name|onExchangeDone
parameter_list|(
name|Route
name|route
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|keepOpen
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|state
operator|.
name|get
argument_list|()
operator|!=
name|STATE_OPEN
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"opening circuit b/c keepOpen is on"
argument_list|)
expr_stmt|;
name|openCircuit
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|hasFailed
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
comment|// record the failure
name|failures
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|lastFailure
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|// check for state change
name|calculateState
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * uses similar approach as circuit breaker      * if the exchange has an exception that we are watching      * then we count that as a failure otherwise we ignore it      */
DECL|method|hasFailed (Exchange exchange)
specifier|private
name|boolean
name|hasFailed
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|answer
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|throttledExceptions
operator|==
literal|null
operator|||
name|throttledExceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// if no exceptions defined then always fail
comment|// (ie) assume we throttle on all exceptions
name|answer
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|exception
range|:
name|throttledExceptions
control|)
block|{
comment|// will look in exception hierarchy
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|(
name|exception
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|exceptionName
init|=
name|exchange
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|?
literal|"none"
else|:
name|exchange
operator|.
name|getException
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"hasFailed ({}) with Throttled Exception: {} for exchangeId: {}"
argument_list|,
name|answer
argument_list|,
name|exceptionName
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|calculateState (Route route)
specifier|private
name|void
name|calculateState
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
comment|// have we reached the failure limit?
name|boolean
name|failureLimitReached
init|=
name|isThresholdExceeded
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|get
argument_list|()
operator|==
name|STATE_CLOSED
condition|)
block|{
if|if
condition|(
name|failureLimitReached
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Opening circuit..."
argument_list|)
expr_stmt|;
name|openCircuit
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|state
operator|.
name|get
argument_list|()
operator|==
name|STATE_HALF_OPEN
condition|)
block|{
if|if
condition|(
name|failureLimitReached
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Opening circuit..."
argument_list|)
expr_stmt|;
name|openCircuit
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Closing circuit..."
argument_list|)
expr_stmt|;
name|closeCircuit
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|state
operator|.
name|get
argument_list|()
operator|==
name|STATE_OPEN
condition|)
block|{
if|if
condition|(
operator|!
name|keepOpen
operator|.
name|get
argument_list|()
condition|)
block|{
name|long
name|elapsedTimeSinceOpened
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|openedAt
decl_stmt|;
if|if
condition|(
name|halfOpenAfter
operator|<=
name|elapsedTimeSinceOpened
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Checking an open circuit..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|halfOpenHandler
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|halfOpenHandler
operator|.
name|isReadyToBeClosed
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Closing circuit..."
argument_list|)
expr_stmt|;
name|closeCircuit
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Opening circuit..."
argument_list|)
expr_stmt|;
name|openCircuit
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Half opening circuit..."
argument_list|)
expr_stmt|;
name|halfOpenCircuit
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"keeping circuit open (time not elapsed)..."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"keeping circuit open (keepOpen is true)..."
argument_list|)
expr_stmt|;
name|this
operator|.
name|addHalfOpenTimer
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isThresholdExceeded ()
specifier|protected
name|boolean
name|isThresholdExceeded
parameter_list|()
block|{
name|boolean
name|output
init|=
literal|false
decl_stmt|;
name|logState
argument_list|()
expr_stmt|;
comment|// failures exceed the threshold
comment|// AND the last of those failures occurred within window
if|if
condition|(
operator|(
name|failures
operator|.
name|get
argument_list|()
operator|>=
name|failureThreshold
operator|)
operator|&&
operator|(
name|lastFailure
operator|>=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|failureWindow
operator|)
condition|)
block|{
name|output
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|output
return|;
block|}
DECL|method|openCircuit (Route route)
specifier|protected
name|void
name|openCircuit
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|suspendOrStopConsumer
argument_list|(
name|route
operator|.
name|getConsumer
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|.
name|set
argument_list|(
name|STATE_OPEN
argument_list|)
expr_stmt|;
name|openedAt
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|addHalfOpenTimer
argument_list|(
name|route
argument_list|)
expr_stmt|;
name|logState
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addHalfOpenTimer (Route route)
specifier|protected
name|void
name|addHalfOpenTimer
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|halfOpenTimer
operator|=
operator|new
name|Timer
argument_list|()
expr_stmt|;
name|halfOpenTimer
operator|.
name|schedule
argument_list|(
operator|new
name|HalfOpenTask
argument_list|(
name|route
argument_list|)
argument_list|,
name|halfOpenAfter
argument_list|)
expr_stmt|;
block|}
DECL|method|halfOpenCircuit (Route route)
specifier|protected
name|void
name|halfOpenCircuit
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|resumeOrStartConsumer
argument_list|(
name|route
operator|.
name|getConsumer
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|.
name|set
argument_list|(
name|STATE_HALF_OPEN
argument_list|)
expr_stmt|;
name|logState
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|closeCircuit (Route route)
specifier|protected
name|void
name|closeCircuit
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|resumeOrStartConsumer
argument_list|(
name|route
operator|.
name|getConsumer
argument_list|()
argument_list|)
expr_stmt|;
name|failures
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastFailure
operator|=
literal|0
expr_stmt|;
name|openedAt
operator|=
literal|0
expr_stmt|;
name|state
operator|.
name|set
argument_list|(
name|STATE_CLOSED
argument_list|)
expr_stmt|;
name|logState
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|logState ()
specifier|private
name|void
name|logState
parameter_list|()
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|dumpState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dumpState ()
specifier|public
name|String
name|dumpState
parameter_list|()
block|{
name|int
name|num
init|=
name|state
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|routeState
init|=
name|stateAsString
argument_list|(
name|num
argument_list|)
decl_stmt|;
if|if
condition|(
name|failures
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"State %s, failures %d, last failure %d ms ago"
argument_list|,
name|routeState
argument_list|,
name|failures
operator|.
name|get
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastFailure
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"State %s, failures %d"
argument_list|,
name|routeState
argument_list|,
name|failures
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|stateAsString (int num)
specifier|private
specifier|static
name|String
name|stateAsString
parameter_list|(
name|int
name|num
parameter_list|)
block|{
if|if
condition|(
name|num
operator|==
name|STATE_CLOSED
condition|)
block|{
return|return
literal|"closed"
return|;
block|}
elseif|else
if|if
condition|(
name|num
operator|==
name|STATE_HALF_OPEN
condition|)
block|{
return|return
literal|"half opened"
return|;
block|}
else|else
block|{
return|return
literal|"opened"
return|;
block|}
block|}
DECL|class|HalfOpenTask
class|class
name|HalfOpenTask
extends|extends
name|TimerTask
block|{
DECL|field|route
specifier|private
specifier|final
name|Route
name|route
decl_stmt|;
DECL|method|HalfOpenTask (Route route)
name|HalfOpenTask
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|this
operator|.
name|route
operator|=
name|route
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|halfOpenTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|calculateState
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getHalfOpenHandler ()
specifier|public
name|ThrottlingExceptionHalfOpenHandler
name|getHalfOpenHandler
parameter_list|()
block|{
return|return
name|halfOpenHandler
return|;
block|}
DECL|method|setHalfOpenHandler (ThrottlingExceptionHalfOpenHandler halfOpenHandler)
specifier|public
name|void
name|setHalfOpenHandler
parameter_list|(
name|ThrottlingExceptionHalfOpenHandler
name|halfOpenHandler
parameter_list|)
block|{
name|this
operator|.
name|halfOpenHandler
operator|=
name|halfOpenHandler
expr_stmt|;
block|}
DECL|method|getKeepOpen ()
specifier|public
name|boolean
name|getKeepOpen
parameter_list|()
block|{
return|return
name|this
operator|.
name|keepOpen
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|setKeepOpen (boolean keepOpen)
specifier|public
name|void
name|setKeepOpen
parameter_list|(
name|boolean
name|keepOpen
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"keep open: {}"
argument_list|,
name|keepOpen
argument_list|)
expr_stmt|;
name|this
operator|.
name|keepOpen
operator|.
name|set
argument_list|(
name|keepOpen
argument_list|)
expr_stmt|;
block|}
DECL|method|getFailureThreshold ()
specifier|public
name|int
name|getFailureThreshold
parameter_list|()
block|{
return|return
name|failureThreshold
return|;
block|}
DECL|method|setFailureThreshold (int failureThreshold)
specifier|public
name|void
name|setFailureThreshold
parameter_list|(
name|int
name|failureThreshold
parameter_list|)
block|{
name|this
operator|.
name|failureThreshold
operator|=
name|failureThreshold
expr_stmt|;
block|}
DECL|method|getFailureWindow ()
specifier|public
name|long
name|getFailureWindow
parameter_list|()
block|{
return|return
name|failureWindow
return|;
block|}
DECL|method|setFailureWindow (long failureWindow)
specifier|public
name|void
name|setFailureWindow
parameter_list|(
name|long
name|failureWindow
parameter_list|)
block|{
name|this
operator|.
name|failureWindow
operator|=
name|failureWindow
expr_stmt|;
block|}
DECL|method|getHalfOpenAfter ()
specifier|public
name|long
name|getHalfOpenAfter
parameter_list|()
block|{
return|return
name|halfOpenAfter
return|;
block|}
DECL|method|setHalfOpenAfter (long halfOpenAfter)
specifier|public
name|void
name|setHalfOpenAfter
parameter_list|(
name|long
name|halfOpenAfter
parameter_list|)
block|{
name|this
operator|.
name|halfOpenAfter
operator|=
name|halfOpenAfter
expr_stmt|;
block|}
DECL|method|getFailures ()
specifier|public
name|int
name|getFailures
parameter_list|()
block|{
return|return
name|failures
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getLastFailure ()
specifier|public
name|long
name|getLastFailure
parameter_list|()
block|{
return|return
name|lastFailure
return|;
block|}
DECL|method|getOpenedAt ()
specifier|public
name|long
name|getOpenedAt
parameter_list|()
block|{
return|return
name|openedAt
return|;
block|}
block|}
end_class

end_unit

