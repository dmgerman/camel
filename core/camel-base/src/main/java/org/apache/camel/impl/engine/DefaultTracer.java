begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NamedNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NamedRoute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExchangeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|PatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|builder
operator|.
name|ExpressionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|processor
operator|.
name|DefaultExchangeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default {@link Tracer} implementation that will log traced messages  * to the logger named<tt>org.apache.camel.Tracing</tt>.  */
end_comment

begin_class
DECL|class|DefaultTracer
specifier|public
class|class
name|DefaultTracer
extends|extends
name|ServiceSupport
implements|implements
name|CamelContextAware
implements|,
name|Tracer
block|{
DECL|field|TRACING_OUTPUT
specifier|private
specifier|static
specifier|final
name|String
name|TRACING_OUTPUT
init|=
literal|"%-4.4s [%-12.12s] [%-33.33s]"
decl_stmt|;
comment|// use a fixed logger name so its easy to spot
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"org.apache.camel.Tracing"
argument_list|)
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|enabled
specifier|private
name|boolean
name|enabled
init|=
literal|true
decl_stmt|;
DECL|field|traceCounter
specifier|private
name|long
name|traceCounter
decl_stmt|;
DECL|field|exchangeFormatter
specifier|private
name|ExchangeFormatter
name|exchangeFormatter
decl_stmt|;
DECL|field|tracePattern
specifier|private
name|String
name|tracePattern
decl_stmt|;
DECL|field|patterns
specifier|private
specifier|transient
name|String
index|[]
name|patterns
decl_stmt|;
DECL|field|traceBeforeAndAfterRoute
specifier|private
name|boolean
name|traceBeforeAndAfterRoute
init|=
literal|true
decl_stmt|;
DECL|method|DefaultTracer ()
specifier|public
name|DefaultTracer
parameter_list|()
block|{
name|DefaultExchangeFormatter
name|formatter
init|=
operator|new
name|DefaultExchangeFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|setShowExchangeId
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setShowExchangePattern
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setMultiline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setShowHeaders
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setStyle
argument_list|(
name|DefaultExchangeFormatter
operator|.
name|OutputStyle
operator|.
name|Default
argument_list|)
expr_stmt|;
name|setExchangeFormatter
argument_list|(
name|formatter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|traceBeforeNode (NamedNode node, Exchange exchange)
specifier|public
name|void
name|traceBeforeNode
parameter_list|(
name|NamedNode
name|node
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|shouldTrace
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|traceCounter
operator|++
expr_stmt|;
name|String
name|routeId
init|=
name|ExpressionBuilder
operator|.
name|routeIdExpression
argument_list|()
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// we need to avoid leak the sensible information here
comment|// the sanitizeUri takes a very long time for very long string and the format cuts this to
comment|// 33 characters, anyway. Cut this to 50 characters. This will give enough space for removing
comment|// characters in the sanitizeUri method and will be reasonably fast
name|String
name|label
init|=
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|StringHelper
operator|.
name|limitLength
argument_list|(
name|node
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|50
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|TRACING_OUTPUT
argument_list|,
literal|"   "
argument_list|,
name|routeId
argument_list|,
name|label
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|String
name|data
init|=
name|exchangeFormatter
operator|.
name|format
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|dumpTrace
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|traceAfterNode (NamedNode node, Exchange exchange)
specifier|public
name|void
name|traceAfterNode
parameter_list|(
name|NamedNode
name|node
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|traceBeforeRoute (NamedRoute route, Exchange exchange)
specifier|public
name|void
name|traceBeforeRoute
parameter_list|(
name|NamedRoute
name|route
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
operator|!
name|traceBeforeAndAfterRoute
condition|)
block|{
return|return;
block|}
comment|// we need to avoid leak the sensible information here
comment|// the sanitizeUri takes a very long time for very long string and the format cuts this to
comment|// 33 characters, anyway. Cut this to 50 characters. This will give enough space for removing
comment|// characters in the sanitizeUri method and will be reasonably fast
name|String
name|uri
init|=
name|route
operator|.
name|getEndpointUrl
argument_list|()
decl_stmt|;
name|String
name|label
init|=
literal|"from["
operator|+
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|StringHelper
operator|.
name|limitLength
argument_list|(
name|uri
argument_list|,
literal|50
argument_list|)
operator|+
literal|"]"
argument_list|)
decl_stmt|;
comment|// the arrow has a * if its a new exchange that is starting
name|boolean
name|original
init|=
name|route
operator|.
name|getRouteId
argument_list|()
operator|.
name|equals
argument_list|(
name|exchange
operator|.
name|getFromRouteId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|arrow
init|=
name|original
condition|?
literal|"*-->"
else|:
literal|"--->"
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|TRACING_OUTPUT
argument_list|,
name|arrow
argument_list|,
name|route
operator|.
name|getRouteId
argument_list|()
argument_list|,
name|label
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|String
name|data
init|=
name|exchangeFormatter
operator|.
name|format
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|traceAfterRoute (Route route, Exchange exchange)
specifier|public
name|void
name|traceAfterRoute
parameter_list|(
name|Route
name|route
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
operator|!
name|traceBeforeAndAfterRoute
condition|)
block|{
return|return;
block|}
comment|// we need to avoid leak the sensible information here
comment|// the sanitizeUri takes a very long time for very long string and the format cuts this to
comment|// 33 characters, anyway. Cut this to 50 characters. This will give enough space for removing
comment|// characters in the sanitizeUri method and will be reasonably fast
name|String
name|uri
init|=
name|route
operator|.
name|getConsumer
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
decl_stmt|;
name|String
name|label
init|=
literal|"from["
operator|+
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|StringHelper
operator|.
name|limitLength
argument_list|(
name|uri
argument_list|,
literal|50
argument_list|)
operator|+
literal|"]"
argument_list|)
decl_stmt|;
comment|// the arrow has a * if its an exchange that is done
name|boolean
name|original
init|=
name|route
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|exchange
operator|.
name|getFromRouteId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|arrow
init|=
name|original
condition|?
literal|"*<--"
else|:
literal|"<---"
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|TRACING_OUTPUT
argument_list|,
name|arrow
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|,
name|label
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|String
name|data
init|=
name|exchangeFormatter
operator|.
name|format
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|dumpTrace
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shouldTrace (NamedNode definition)
specifier|public
name|boolean
name|shouldTrace
parameter_list|(
name|NamedNode
name|definition
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|pattern
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|patterns
operator|!=
literal|null
condition|)
block|{
name|pattern
operator|=
name|shouldTracePattern
argument_list|(
name|definition
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Should trace evaluated {} -> pattern: {}"
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
return|return
name|pattern
return|;
block|}
annotation|@
name|Override
DECL|method|getTraceCounter ()
specifier|public
name|long
name|getTraceCounter
parameter_list|()
block|{
return|return
name|traceCounter
return|;
block|}
annotation|@
name|Override
DECL|method|resetTraceCounter ()
specifier|public
name|void
name|resetTraceCounter
parameter_list|()
block|{
name|traceCounter
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
annotation|@
name|Override
DECL|method|setEnabled (boolean enabled)
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTracePattern ()
specifier|public
name|String
name|getTracePattern
parameter_list|()
block|{
return|return
name|tracePattern
return|;
block|}
annotation|@
name|Override
DECL|method|setTracePattern (String tracePattern)
specifier|public
name|void
name|setTracePattern
parameter_list|(
name|String
name|tracePattern
parameter_list|)
block|{
name|this
operator|.
name|tracePattern
operator|=
name|tracePattern
expr_stmt|;
if|if
condition|(
name|tracePattern
operator|!=
literal|null
condition|)
block|{
comment|// the pattern can have multiple nodes separated by comma
name|this
operator|.
name|patterns
operator|=
name|tracePattern
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|patterns
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isTraceBeforeAndAfterRoute ()
specifier|public
name|boolean
name|isTraceBeforeAndAfterRoute
parameter_list|()
block|{
return|return
name|traceBeforeAndAfterRoute
return|;
block|}
annotation|@
name|Override
DECL|method|setTraceBeforeAndAfterRoute (boolean traceBeforeAndAfterRoute)
specifier|public
name|void
name|setTraceBeforeAndAfterRoute
parameter_list|(
name|boolean
name|traceBeforeAndAfterRoute
parameter_list|)
block|{
name|this
operator|.
name|traceBeforeAndAfterRoute
operator|=
name|traceBeforeAndAfterRoute
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExchangeFormatter ()
specifier|public
name|ExchangeFormatter
name|getExchangeFormatter
parameter_list|()
block|{
return|return
name|exchangeFormatter
return|;
block|}
annotation|@
name|Override
DECL|method|setExchangeFormatter (ExchangeFormatter exchangeFormatter)
specifier|public
name|void
name|setExchangeFormatter
parameter_list|(
name|ExchangeFormatter
name|exchangeFormatter
parameter_list|)
block|{
name|this
operator|.
name|exchangeFormatter
operator|=
name|exchangeFormatter
expr_stmt|;
block|}
DECL|method|dumpTrace (String out)
specifier|protected
name|void
name|dumpTrace
parameter_list|(
name|String
name|out
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldTracePattern (NamedNode definition)
specifier|protected
name|boolean
name|shouldTracePattern
parameter_list|(
name|NamedNode
name|definition
parameter_list|)
block|{
for|for
control|(
name|String
name|pattern
range|:
name|patterns
control|)
block|{
comment|// match either route id, or node id
name|String
name|id
init|=
name|definition
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// use matchPattern method from endpoint helper that has a good matcher we use in Camel
if|if
condition|(
name|PatternHelper
operator|.
name|matchPattern
argument_list|(
name|id
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|routeId
init|=
name|CamelContextHelper
operator|.
name|getRouteId
argument_list|(
name|definition
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeId
operator|!=
literal|null
operator|&&
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|routeId
argument_list|,
name|id
argument_list|)
condition|)
block|{
if|if
condition|(
name|PatternHelper
operator|.
name|matchPattern
argument_list|(
name|routeId
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
comment|// not matched the pattern
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
block|}
end_class

end_unit

