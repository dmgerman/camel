begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|IsSingleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NonManagedService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|LRUCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|LRUCacheFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|function
operator|.
name|ThrowingFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A service pool is like a connection pool but can pool any kind of objects.  *<p/>  *  The pool will contain at most (the capacity) number of services.  *<p/>  * By default the capacity is set to 100.  */
end_comment

begin_class
DECL|class|ServicePool
specifier|public
class|class
name|ServicePool
parameter_list|<
name|S
extends|extends
name|Service
parameter_list|>
extends|extends
name|ServiceSupport
implements|implements
name|NonManagedService
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServicePool
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|producer
specifier|final
name|ThrowingFunction
argument_list|<
name|Endpoint
argument_list|,
name|S
argument_list|,
name|Exception
argument_list|>
name|producer
decl_stmt|;
DECL|field|getEndpoint
specifier|final
name|Function
argument_list|<
name|S
argument_list|,
name|Endpoint
argument_list|>
name|getEndpoint
decl_stmt|;
DECL|field|pool
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Endpoint
argument_list|,
name|Pool
argument_list|<
name|S
argument_list|>
argument_list|>
name|pool
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|capacity
name|int
name|capacity
decl_stmt|;
DECL|field|cache
name|Map
argument_list|<
name|Key
argument_list|<
name|S
argument_list|>
argument_list|,
name|S
argument_list|>
name|cache
decl_stmt|;
DECL|interface|Pool
interface|interface
name|Pool
parameter_list|<
name|S
parameter_list|>
block|{
DECL|method|acquire ()
name|S
name|acquire
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|release (S s)
name|void
name|release
parameter_list|(
name|S
name|s
parameter_list|)
function_decl|;
DECL|method|size ()
name|int
name|size
parameter_list|()
function_decl|;
DECL|method|stop ()
name|void
name|stop
parameter_list|()
function_decl|;
comment|// returns true if the pool is empty
DECL|method|evict (S s)
name|boolean
name|evict
parameter_list|(
name|S
name|s
parameter_list|)
function_decl|;
block|}
DECL|class|Key
specifier|static
class|class
name|Key
parameter_list|<
name|S
parameter_list|>
block|{
DECL|field|s
specifier|private
specifier|final
name|S
name|s
decl_stmt|;
DECL|method|Key (S s)
specifier|public
name|Key
parameter_list|(
name|S
name|s
parameter_list|)
block|{
name|this
operator|.
name|s
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Key
operator|&&
operator|(
operator|(
name|Key
operator|)
name|o
operator|)
operator|.
name|s
operator|==
name|s
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|s
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|method|ServicePool (ThrowingFunction<Endpoint, S, Exception> producer, Function<S, Endpoint> getEndpoint, int capacity)
specifier|public
name|ServicePool
parameter_list|(
name|ThrowingFunction
argument_list|<
name|Endpoint
argument_list|,
name|S
argument_list|,
name|Exception
argument_list|>
name|producer
parameter_list|,
name|Function
argument_list|<
name|S
argument_list|,
name|Endpoint
argument_list|>
name|getEndpoint
parameter_list|,
name|int
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|producer
operator|=
name|producer
expr_stmt|;
name|this
operator|.
name|getEndpoint
operator|=
name|getEndpoint
expr_stmt|;
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|capacity
operator|>
literal|0
condition|?
name|LRUCacheFactory
operator|.
name|newLRUCache
argument_list|(
name|capacity
argument_list|,
name|this
operator|::
name|onEvict
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
DECL|method|onEvict (S s)
specifier|protected
name|void
name|onEvict
parameter_list|(
name|S
name|s
parameter_list|)
block|{
name|Endpoint
name|e
init|=
name|getEndpoint
operator|.
name|apply
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Pool
argument_list|<
name|S
argument_list|>
name|p
init|=
name|pool
operator|.
name|get
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|evict
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|pool
operator|.
name|remove
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ServicePool
operator|.
name|stop
argument_list|(
name|s
argument_list|)
expr_stmt|;
try|try
block|{
name|e
operator|.
name|getCamelContext
argument_list|()
operator|.
name|removeService
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error removing service {}"
argument_list|,
name|s
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Tries to acquire the service with the given key      *      * @param endpoint the endpoint      * @return the acquired service      */
DECL|method|acquire (Endpoint endpoint)
specifier|public
name|S
name|acquire
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isStarted
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|S
name|s
init|=
name|getPool
argument_list|(
name|endpoint
argument_list|)
operator|.
name|acquire
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|cache
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|putIfAbsent
argument_list|(
operator|new
name|Key
argument_list|<>
argument_list|(
name|s
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
comment|/**      * Releases the service back to the pool      *      * @param endpoint the endpoint      * @param s the service      */
DECL|method|release (Endpoint endpoint, S s)
specifier|public
name|void
name|release
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|S
name|s
parameter_list|)
block|{
name|getPool
argument_list|(
name|endpoint
argument_list|)
operator|.
name|release
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|getPool (Endpoint endpoint)
specifier|protected
name|Pool
argument_list|<
name|S
argument_list|>
name|getPool
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
return|return
name|pool
operator|.
name|computeIfAbsent
argument_list|(
name|endpoint
argument_list|,
name|this
operator|::
name|createPool
argument_list|)
return|;
block|}
DECL|method|createPool (Endpoint endpoint)
specifier|private
name|Pool
argument_list|<
name|S
argument_list|>
name|createPool
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|boolean
name|singleton
init|=
name|endpoint
operator|.
name|isSingleton
argument_list|()
decl_stmt|;
try|try
block|{
name|S
name|s
init|=
name|producer
operator|.
name|apply
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|instanceof
name|IsSingleton
condition|)
block|{
name|singleton
operator|=
operator|(
operator|(
name|IsSingleton
operator|)
name|s
operator|)
operator|.
name|isSingleton
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
if|if
condition|(
name|singleton
operator|&&
name|capacity
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|SinglePool
argument_list|(
name|endpoint
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|MultiplePool
argument_list|(
name|endpoint
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns the current size of the pool      *      * @return the current size of the pool      */
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|pool
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|Pool
operator|::
name|size
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|pool
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
name|Pool
operator|::
name|stop
argument_list|)
expr_stmt|;
name|pool
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
if|if
condition|(
name|cache
operator|instanceof
name|LRUCache
condition|)
block|{
operator|(
operator|(
name|LRUCache
operator|)
name|cache
operator|)
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|resetStatistics ()
specifier|public
name|void
name|resetStatistics
parameter_list|()
block|{
if|if
condition|(
name|cache
operator|instanceof
name|LRUCache
condition|)
block|{
operator|(
operator|(
name|LRUCache
operator|)
name|cache
operator|)
operator|.
name|resetStatistics
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getEvicted ()
specifier|public
name|long
name|getEvicted
parameter_list|()
block|{
if|if
condition|(
name|cache
operator|instanceof
name|LRUCache
condition|)
block|{
return|return
operator|(
operator|(
name|LRUCache
operator|)
name|cache
operator|)
operator|.
name|getEvicted
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|method|getMisses ()
specifier|public
name|long
name|getMisses
parameter_list|()
block|{
if|if
condition|(
name|cache
operator|instanceof
name|LRUCache
condition|)
block|{
return|return
operator|(
operator|(
name|LRUCache
operator|)
name|cache
operator|)
operator|.
name|getMisses
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|method|getHits ()
specifier|public
name|long
name|getHits
parameter_list|()
block|{
if|if
condition|(
name|cache
operator|instanceof
name|LRUCache
condition|)
block|{
return|return
operator|(
operator|(
name|LRUCache
operator|)
name|cache
operator|)
operator|.
name|getHits
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|method|getMaxCacheSize ()
specifier|public
name|int
name|getMaxCacheSize
parameter_list|()
block|{
if|if
condition|(
name|cache
operator|instanceof
name|LRUCache
condition|)
block|{
return|return
operator|(
operator|(
name|LRUCache
operator|)
name|cache
operator|)
operator|.
name|getMaxCacheSize
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|method|stop (S s)
specifier|static
parameter_list|<
name|S
extends|extends
name|Service
parameter_list|>
name|void
name|stop
parameter_list|(
name|S
name|s
parameter_list|)
block|{
try|try
block|{
name|s
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error stopping service {}"
argument_list|,
name|s
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SinglePool
specifier|private
class|class
name|SinglePool
implements|implements
name|Pool
argument_list|<
name|S
argument_list|>
block|{
DECL|field|endpoint
specifier|private
specifier|final
name|Endpoint
name|endpoint
decl_stmt|;
DECL|field|s
specifier|private
specifier|volatile
name|S
name|s
decl_stmt|;
DECL|method|SinglePool (Endpoint endpoint)
specifier|public
name|SinglePool
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|acquire ()
specifier|public
name|S
name|acquire
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
name|producer
operator|.
name|apply
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|addService
argument_list|(
name|s
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|s
return|;
block|}
annotation|@
name|Override
DECL|method|release (S s)
specifier|public
name|void
name|release
parameter_list|(
name|S
name|s
parameter_list|)
block|{         }
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|s
operator|!=
literal|null
condition|?
literal|1
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|S
name|toStop
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|toStop
operator|=
name|s
expr_stmt|;
name|s
operator|=
literal|null
expr_stmt|;
block|}
name|doStop
argument_list|(
name|toStop
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|evict (S s)
specifier|public
name|boolean
name|evict
parameter_list|(
name|S
name|s
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|this
operator|.
name|s
operator|==
name|s
condition|)
block|{
name|this
operator|.
name|s
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|doStop
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|doStop (S s)
name|void
name|doStop
parameter_list|(
name|S
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|ServicePool
operator|.
name|stop
argument_list|(
name|s
argument_list|)
expr_stmt|;
try|try
block|{
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|removeService
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error removing service {}"
argument_list|,
name|s
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|MultiplePool
specifier|private
class|class
name|MultiplePool
implements|implements
name|Pool
argument_list|<
name|S
argument_list|>
block|{
DECL|field|endpoint
specifier|private
specifier|final
name|Endpoint
name|endpoint
decl_stmt|;
DECL|field|queue
specifier|private
specifier|final
name|ConcurrentLinkedQueue
argument_list|<
name|S
argument_list|>
name|queue
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|MultiplePool (Endpoint endpoint)
specifier|public
name|MultiplePool
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|acquire ()
specifier|public
name|S
name|acquire
parameter_list|()
throws|throws
name|Exception
block|{
name|S
name|s
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
name|producer
operator|.
name|apply
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|s
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
annotation|@
name|Override
DECL|method|release (S s)
specifier|public
name|void
name|release
parameter_list|(
name|S
name|s
parameter_list|)
block|{
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|<
name|capacity
condition|)
block|{
name|queue
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ServicePool
operator|.
name|stop
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|queue
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|queue
operator|.
name|forEach
argument_list|(
name|ServicePool
operator|::
name|stop
argument_list|)
expr_stmt|;
name|queue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|evict (S s)
specifier|public
name|boolean
name|evict
parameter_list|(
name|S
name|s
parameter_list|)
block|{
name|queue
operator|.
name|remove
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|ServicePool
operator|.
name|stop
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|queue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

