begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|BeanIntrospection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|DefaultBeanIntrospection
specifier|public
class|class
name|DefaultBeanIntrospection
extends|extends
name|ServiceSupport
implements|implements
name|BeanIntrospection
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultBeanIntrospection
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SECRETS
specifier|private
specifier|static
specifier|final
name|Pattern
name|SECRETS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*(passphrase|password|secretKey).*"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
decl_stmt|;
DECL|field|invoked
specifier|private
specifier|final
name|AtomicLong
name|invoked
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|extendedStatistics
specifier|private
specifier|volatile
name|boolean
name|extendedStatistics
decl_stmt|;
DECL|field|loggingLevel
specifier|private
name|LoggingLevel
name|loggingLevel
init|=
name|LoggingLevel
operator|.
name|TRACE
decl_stmt|;
DECL|field|logger
specifier|private
name|CamelLogger
name|logger
init|=
operator|new
name|CamelLogger
argument_list|(
name|LOG
argument_list|,
name|loggingLevel
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|getInvokedCounter ()
specifier|public
name|long
name|getInvokedCounter
parameter_list|()
block|{
return|return
name|invoked
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|resetCounters ()
specifier|public
name|void
name|resetCounters
parameter_list|()
block|{
name|invoked
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|isExtendedStatistics ()
specifier|public
name|boolean
name|isExtendedStatistics
parameter_list|()
block|{
return|return
name|extendedStatistics
return|;
block|}
DECL|method|setExtendedStatistics (boolean extendedStatistics)
specifier|public
name|void
name|setExtendedStatistics
parameter_list|(
name|boolean
name|extendedStatistics
parameter_list|)
block|{
name|this
operator|.
name|extendedStatistics
operator|=
name|extendedStatistics
expr_stmt|;
block|}
DECL|method|getLoggingLevel ()
specifier|public
name|LoggingLevel
name|getLoggingLevel
parameter_list|()
block|{
return|return
name|loggingLevel
return|;
block|}
DECL|method|setLoggingLevel (LoggingLevel loggingLevel)
specifier|public
name|void
name|setLoggingLevel
parameter_list|(
name|LoggingLevel
name|loggingLevel
parameter_list|)
block|{
name|this
operator|.
name|loggingLevel
operator|=
name|loggingLevel
expr_stmt|;
comment|// recreate logger as level is changed
name|this
operator|.
name|logger
operator|=
operator|new
name|CamelLogger
argument_list|(
name|LOG
argument_list|,
name|loggingLevel
argument_list|)
expr_stmt|;
block|}
DECL|method|log (String method, Object target, Object... args)
specifier|private
name|void
name|log
parameter_list|(
name|String
name|method
parameter_list|,
name|Object
name|target
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|Object
name|obj
init|=
literal|"null"
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|obj
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|log
argument_list|(
literal|"Invoked: "
operator|+
name|invoked
operator|.
name|get
argument_list|()
operator|+
literal|" times (overall) [Method: "
operator|+
name|method
operator|+
literal|", Target: "
operator|+
name|target
operator|+
literal|", Arguments: "
operator|+
name|obj
operator|+
literal|" ]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cacheClass (Class<?> clazz)
specifier|public
name|ClassInfo
name|cacheClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|log
argument_list|(
literal|"cacheClass"
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|invoked
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|IntrospectionSupport
operator|.
name|cacheClass
argument_list|(
name|clazz
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProperties (Object target, Map<String, Object> properties, String optionPrefix)
specifier|public
name|boolean
name|getProperties
parameter_list|(
name|Object
name|target
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|,
name|String
name|optionPrefix
parameter_list|)
block|{
name|invoked
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|shouldLog
argument_list|()
condition|)
block|{
name|log
argument_list|(
literal|"getProperties"
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
return|return
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|target
argument_list|,
name|properties
argument_list|,
name|optionPrefix
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProperties (Object target, Map<String, Object> properties, String optionPrefix, boolean includeNull)
specifier|public
name|boolean
name|getProperties
parameter_list|(
name|Object
name|target
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|,
name|String
name|optionPrefix
parameter_list|,
name|boolean
name|includeNull
parameter_list|)
block|{
name|invoked
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|shouldLog
argument_list|()
condition|)
block|{
name|log
argument_list|(
literal|"getProperties"
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
return|return
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|target
argument_list|,
name|properties
argument_list|,
name|optionPrefix
argument_list|,
name|includeNull
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getOrElseProperty (Object target, String propertyName, Object defaultValue)
specifier|public
name|Object
name|getOrElseProperty
parameter_list|(
name|Object
name|target
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|defaultValue
parameter_list|)
block|{
name|invoked
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|shouldLog
argument_list|()
condition|)
block|{
name|log
argument_list|(
literal|"getOrElseProperty"
argument_list|,
name|target
argument_list|,
name|propertyName
argument_list|)
expr_stmt|;
block|}
return|return
name|IntrospectionSupport
operator|.
name|getOrElseProperty
argument_list|(
name|target
argument_list|,
name|propertyName
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getOrElseProperty (Object target, String propertyName, Object defaultValue, boolean ignoreCase)
specifier|public
name|Object
name|getOrElseProperty
parameter_list|(
name|Object
name|target
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|defaultValue
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|invoked
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|shouldLog
argument_list|()
condition|)
block|{
name|log
argument_list|(
literal|"getOrElseProperty"
argument_list|,
name|target
argument_list|,
name|propertyName
argument_list|)
expr_stmt|;
block|}
return|return
name|IntrospectionSupport
operator|.
name|getOrElseProperty
argument_list|(
name|target
argument_list|,
name|propertyName
argument_list|,
name|defaultValue
argument_list|,
name|ignoreCase
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPropertyGetter (Class<?> type, String propertyName)
specifier|public
name|Method
name|getPropertyGetter
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|String
name|propertyName
parameter_list|)
throws|throws
name|NoSuchMethodException
block|{
name|invoked
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|shouldLog
argument_list|()
condition|)
block|{
name|log
argument_list|(
literal|"getPropertyGetter"
argument_list|,
name|type
argument_list|,
name|propertyName
argument_list|)
expr_stmt|;
block|}
return|return
name|IntrospectionSupport
operator|.
name|getPropertyGetter
argument_list|(
name|type
argument_list|,
name|propertyName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPropertyGetter (Class<?> type, String propertyName, boolean ignoreCase)
specifier|public
name|Method
name|getPropertyGetter
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
throws|throws
name|NoSuchMethodException
block|{
name|invoked
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|shouldLog
argument_list|()
condition|)
block|{
name|log
argument_list|(
literal|"getPropertyGetter"
argument_list|,
name|type
argument_list|,
name|propertyName
argument_list|)
expr_stmt|;
block|}
return|return
name|IntrospectionSupport
operator|.
name|getPropertyGetter
argument_list|(
name|type
argument_list|,
name|propertyName
argument_list|,
name|ignoreCase
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setProperty (CamelContext context, TypeConverter typeConverter, Object target, String name, Object value, String refName, boolean allowBuilderPattern)
specifier|public
name|boolean
name|setProperty
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|TypeConverter
name|typeConverter
parameter_list|,
name|Object
name|target
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|,
name|String
name|refName
parameter_list|,
name|boolean
name|allowBuilderPattern
parameter_list|)
throws|throws
name|Exception
block|{
name|invoked
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|shouldLog
argument_list|()
condition|)
block|{
name|Object
name|text
init|=
name|value
decl_stmt|;
if|if
condition|(
name|SECRETS
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
name|text
operator|=
literal|"xxxxxx"
expr_stmt|;
block|}
name|log
argument_list|(
literal|"setProperty"
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
return|return
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
argument_list|,
name|typeConverter
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|refName
argument_list|,
name|allowBuilderPattern
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setProperty (CamelContext context, TypeConverter typeConverter, Object target, String name, Object value, String refName, boolean allowBuilderPattern, boolean allowPrivateSetter, boolean ignoreCase)
specifier|public
name|boolean
name|setProperty
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|TypeConverter
name|typeConverter
parameter_list|,
name|Object
name|target
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|,
name|String
name|refName
parameter_list|,
name|boolean
name|allowBuilderPattern
parameter_list|,
name|boolean
name|allowPrivateSetter
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
throws|throws
name|Exception
block|{
name|invoked
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|shouldLog
argument_list|()
condition|)
block|{
name|Object
name|text
init|=
name|value
decl_stmt|;
if|if
condition|(
name|SECRETS
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
name|text
operator|=
literal|"xxxxxx"
expr_stmt|;
block|}
name|log
argument_list|(
literal|"setProperty"
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
return|return
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
argument_list|,
name|typeConverter
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|value
argument_list|,
name|refName
argument_list|,
name|allowBuilderPattern
argument_list|,
name|allowPrivateSetter
argument_list|,
name|ignoreCase
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setProperty (CamelContext context, Object target, String name, Object value)
specifier|public
name|boolean
name|setProperty
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Object
name|target
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|invoked
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|shouldLog
argument_list|()
condition|)
block|{
name|Object
name|text
init|=
name|value
decl_stmt|;
if|if
condition|(
name|SECRETS
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
name|text
operator|=
literal|"xxxxxx"
expr_stmt|;
block|}
name|log
argument_list|(
literal|"setProperty"
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
return|return
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setProperty (TypeConverter typeConverter, Object target, String name, Object value)
specifier|public
name|boolean
name|setProperty
parameter_list|(
name|TypeConverter
name|typeConverter
parameter_list|,
name|Object
name|target
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|invoked
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|shouldLog
argument_list|()
condition|)
block|{
name|Object
name|text
init|=
name|value
decl_stmt|;
if|if
condition|(
name|SECRETS
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
name|text
operator|=
literal|"xxxxxx"
expr_stmt|;
block|}
name|log
argument_list|(
literal|"setProperty"
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
return|return
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|typeConverter
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|findSetterMethods (Class<?> clazz, String name, boolean allowBuilderPattern, boolean allowPrivateSetter, boolean ignoreCase)
specifier|public
name|Set
argument_list|<
name|Method
argument_list|>
name|findSetterMethods
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|allowBuilderPattern
parameter_list|,
name|boolean
name|allowPrivateSetter
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|invoked
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|shouldLog
argument_list|()
condition|)
block|{
name|log
argument_list|(
literal|"findSetterMethods"
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
name|IntrospectionSupport
operator|.
name|findSetterMethods
argument_list|(
name|clazz
argument_list|,
name|name
argument_list|,
name|allowBuilderPattern
argument_list|,
name|allowPrivateSetter
argument_list|,
name|ignoreCase
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|IntrospectionSupport
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|extendedStatistics
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"BeanIntrospection invoked: {} times"
argument_list|,
name|getInvokedCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"BeanIntrospection invoked: {} times"
argument_list|,
name|getInvokedCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

