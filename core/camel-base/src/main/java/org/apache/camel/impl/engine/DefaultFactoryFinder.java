begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|FactoryFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_comment
comment|/**  * Default factory finder.  */
end_comment

begin_class
DECL|class|DefaultFactoryFinder
specifier|public
class|class
name|DefaultFactoryFinder
implements|implements
name|FactoryFinder
block|{
DECL|field|classMap
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|classResolver
specifier|private
specifier|final
name|ClassResolver
name|classResolver
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|method|DefaultFactoryFinder (ClassResolver classResolver, String resourcePath)
specifier|public
name|DefaultFactoryFinder
parameter_list|(
name|ClassResolver
name|classResolver
parameter_list|,
name|String
name|resourcePath
parameter_list|)
block|{
name|this
operator|.
name|classResolver
operator|=
name|classResolver
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|resourcePath
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResourcePath ()
specifier|public
name|String
name|getResourcePath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
DECL|method|newInstance (String key)
specifier|public
name|Optional
argument_list|<
name|Object
argument_list|>
name|newInstance
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|doNewInstance
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newInstance (String key, Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|newInstance
parameter_list|(
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Object
name|obj
init|=
name|doNewInstance
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|type
operator|.
name|cast
argument_list|(
name|obj
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|findClass (String key)
specifier|public
name|Optional
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|findClass
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|findClass
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|findClass (String key, String propertyPrefix)
specifier|public
name|Optional
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|findClass
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|propertyPrefix
parameter_list|)
block|{
specifier|final
name|String
name|prefix
init|=
name|propertyPrefix
operator|!=
literal|null
condition|?
name|propertyPrefix
else|:
literal|""
decl_stmt|;
specifier|final
name|String
name|classKey
init|=
name|prefix
operator|+
name|key
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|addToClassMap
argument_list|(
name|classKey
argument_list|,
parameter_list|()
lambda|->
block|{
name|Properties
name|prop
init|=
name|doFindFactoryProperties
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
block|{
return|return
name|doNewInstance
argument_list|(
name|prop
argument_list|,
name|prefix
argument_list|,
literal|true
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|clazz
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|findClass (String key, String propertyPrefix, Class<?> clazz)
specifier|public
name|Optional
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|findClass
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|propertyPrefix
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
comment|// Just ignore clazz which is only useful for OSGiFactoryFinder
return|return
name|findClass
argument_list|(
name|key
argument_list|,
name|propertyPrefix
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|findOptionalClass (String key, String propertyPrefix)
specifier|public
name|Optional
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|findOptionalClass
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|propertyPrefix
parameter_list|)
block|{
specifier|final
name|String
name|prefix
init|=
name|propertyPrefix
operator|!=
literal|null
condition|?
name|propertyPrefix
else|:
literal|""
decl_stmt|;
specifier|final
name|String
name|classKey
init|=
name|prefix
operator|+
name|key
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|addToClassMap
argument_list|(
name|classKey
argument_list|,
parameter_list|()
lambda|->
block|{
name|Properties
name|prop
init|=
name|doFindFactoryProperties
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
block|{
return|return
name|doNewInstance
argument_list|(
name|prop
argument_list|,
name|prefix
argument_list|,
literal|false
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|clazz
argument_list|)
return|;
block|}
DECL|method|doNewInstance (String key, String propertyPrefix)
specifier|private
name|Object
name|doNewInstance
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|propertyPrefix
parameter_list|)
block|{
name|Optional
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|clazz
init|=
name|findClass
argument_list|(
name|key
argument_list|,
name|propertyPrefix
argument_list|)
decl_stmt|;
return|return
name|clazz
operator|.
name|map
argument_list|(
name|ObjectHelper
operator|::
name|newInstance
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|doNewInstance (Properties properties, String propertyPrefix, boolean mandatory)
specifier|private
name|Optional
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|doNewInstance
parameter_list|(
name|Properties
name|properties
parameter_list|,
name|String
name|propertyPrefix
parameter_list|,
name|boolean
name|mandatory
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|className
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|propertyPrefix
operator|+
literal|"class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
operator|&&
name|mandatory
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected property is missing: "
operator|+
name|propertyPrefix
operator|+
literal|"class"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|classResolver
operator|.
name|resolveClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|clazz
argument_list|)
return|;
block|}
DECL|method|doFindFactoryProperties (String key)
specifier|private
name|Properties
name|doFindFactoryProperties
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|uri
init|=
name|path
operator|+
name|key
decl_stmt|;
name|InputStream
name|in
init|=
name|classResolver
operator|.
name|loadResourceAsStream
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// lets load the file
name|BufferedInputStream
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|IOHelper
operator|.
name|buffered
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|reader
argument_list|,
name|key
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|in
argument_list|,
name|key
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * This is a wrapper function to deal with exceptions in lambdas: the exception      * is wrapped by a runtime exception (WrappedRuntimeException) which we catch      * later on with the only purpose to re-throw the original exception.      */
DECL|method|addToClassMap (String key, ClassSupplier mappingFunction)
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|addToClassMap
parameter_list|(
name|String
name|key
parameter_list|,
name|ClassSupplier
name|mappingFunction
parameter_list|)
block|{
return|return
name|classMap
operator|.
name|computeIfAbsent
argument_list|(
name|key
argument_list|,
operator|new
name|Function
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|apply
parameter_list|(
name|String
name|classKey
parameter_list|)
block|{
try|try
block|{
return|return
name|mappingFunction
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|ClassSupplier
specifier|protected
interface|interface
name|ClassSupplier
block|{
DECL|method|get ()
name|Class
argument_list|<
name|?
argument_list|>
name|get
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
block|}
end_class

end_unit

