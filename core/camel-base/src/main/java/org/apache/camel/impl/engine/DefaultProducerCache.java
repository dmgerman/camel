begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|FailedToCreateProducerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|FailedToStartRouteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StatefulService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|CamelInternalProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|SharedCamelInternalProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EndpointUtilizationStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ProducerCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|EventHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link ProducerCache}.  */
end_comment

begin_class
DECL|class|DefaultProducerCache
specifier|public
class|class
name|DefaultProducerCache
extends|extends
name|ServiceSupport
implements|implements
name|ProducerCache
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultProducerCache
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ACQUIRE_WAIT_TIME
specifier|private
specifier|static
specifier|final
name|long
name|ACQUIRE_WAIT_TIME
init|=
literal|30000
decl_stmt|;
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|producers
specifier|private
specifier|final
name|ServicePool
argument_list|<
name|AsyncProducer
argument_list|>
name|producers
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|Object
name|source
decl_stmt|;
DECL|field|internalProcessor
specifier|private
specifier|final
name|SharedCamelInternalProcessor
name|internalProcessor
decl_stmt|;
DECL|field|statistics
specifier|private
name|EndpointUtilizationStatistics
name|statistics
decl_stmt|;
DECL|field|eventNotifierEnabled
specifier|private
name|boolean
name|eventNotifierEnabled
init|=
literal|true
decl_stmt|;
DECL|field|extendedStatistics
specifier|private
name|boolean
name|extendedStatistics
decl_stmt|;
DECL|field|maxCacheSize
specifier|private
name|int
name|maxCacheSize
decl_stmt|;
DECL|method|DefaultProducerCache (Object source, CamelContext camelContext, int cacheSize)
specifier|public
name|DefaultProducerCache
parameter_list|(
name|Object
name|source
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|,
name|int
name|cacheSize
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|maxCacheSize
operator|=
name|cacheSize
operator|==
literal|0
condition|?
name|CamelContextHelper
operator|.
name|getMaximumCachePoolSize
argument_list|(
name|camelContext
argument_list|)
else|:
name|cacheSize
expr_stmt|;
name|this
operator|.
name|producers
operator|=
operator|new
name|ServicePool
argument_list|<>
argument_list|(
name|Endpoint
operator|::
name|createAsyncProducer
argument_list|,
name|AsyncProducer
operator|::
name|getEndpoint
argument_list|,
name|maxCacheSize
argument_list|)
expr_stmt|;
comment|// only if JMX is enabled
if|if
condition|(
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|!=
literal|null
operator|&&
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|extendedStatistics
operator|=
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|.
name|getStatisticsLevel
argument_list|()
operator|.
name|isExtended
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|extendedStatistics
operator|=
literal|false
expr_stmt|;
block|}
comment|// internal processor used for sending
name|internalProcessor
operator|=
operator|new
name|SharedCamelInternalProcessor
argument_list|(
operator|new
name|CamelInternalProcessor
operator|.
name|UnitOfWorkProcessorAdvice
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isEventNotifierEnabled ()
specifier|public
name|boolean
name|isEventNotifierEnabled
parameter_list|()
block|{
return|return
name|eventNotifierEnabled
return|;
block|}
annotation|@
name|Override
DECL|method|setEventNotifierEnabled (boolean eventNotifierEnabled)
specifier|public
name|void
name|setEventNotifierEnabled
parameter_list|(
name|boolean
name|eventNotifierEnabled
parameter_list|)
block|{
name|this
operator|.
name|eventNotifierEnabled
operator|=
name|eventNotifierEnabled
expr_stmt|;
block|}
DECL|method|isExtendedStatistics ()
specifier|public
name|boolean
name|isExtendedStatistics
parameter_list|()
block|{
return|return
name|extendedStatistics
return|;
block|}
comment|/**      * Whether extended JMX statistics is enabled for {@link org.apache.camel.spi.EndpointUtilizationStatistics}      */
DECL|method|setExtendedStatistics (boolean extendedStatistics)
specifier|public
name|void
name|setExtendedStatistics
parameter_list|(
name|boolean
name|extendedStatistics
parameter_list|)
block|{
name|this
operator|.
name|extendedStatistics
operator|=
name|extendedStatistics
expr_stmt|;
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|getSource ()
specifier|public
name|Object
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
annotation|@
name|Override
DECL|method|acquireProducer (Endpoint endpoint)
specifier|public
name|AsyncProducer
name|acquireProducer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
try|try
block|{
name|AsyncProducer
name|producer
init|=
name|producers
operator|.
name|acquire
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|statistics
operator|!=
literal|null
condition|)
block|{
name|statistics
operator|.
name|onHit
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if producer is starting then wait for it to be ready
if|if
condition|(
name|producer
operator|instanceof
name|StatefulService
condition|)
block|{
name|StatefulService
name|ss
init|=
operator|(
name|StatefulService
operator|)
name|producer
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|isStarting
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Waiting for producer to finish starting: {}"
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|StopWatch
name|watch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|done
operator|=
operator|!
name|ss
operator|.
name|isStarting
argument_list|()
operator|||
name|watch
operator|.
name|taken
argument_list|()
operator|>
name|ACQUIRE_WAIT_TIME
expr_stmt|;
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Waiting {} ms for producer to finish starting: {} state: {}"
argument_list|,
name|watch
operator|.
name|taken
argument_list|()
argument_list|,
name|producer
argument_list|,
name|ss
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waited {} ms for producer to finish starting: {} state: {}"
argument_list|,
name|watch
operator|.
name|taken
argument_list|()
argument_list|,
name|producer
argument_list|,
name|ss
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|producer
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FailedToCreateProducerException
argument_list|(
name|endpoint
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|releaseProducer (Endpoint endpoint, AsyncProducer producer)
specifier|public
name|void
name|releaseProducer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|AsyncProducer
name|producer
parameter_list|)
block|{
name|producers
operator|.
name|release
argument_list|(
name|endpoint
argument_list|,
name|producer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|send (Endpoint endpoint, Exchange exchange, Processor resultProcessor)
specifier|public
name|Exchange
name|send
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Processor
name|resultProcessor
parameter_list|)
block|{
if|if
condition|(
name|camelContext
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|RejectedExecutionException
argument_list|(
literal|"CamelContext is stopped"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
name|AsyncProducer
name|producer
init|=
name|acquireProducer
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
try|try
block|{
comment|// now lets dispatch
name|log
operator|.
name|debug
argument_list|(
literal|">>>> {} {}"
argument_list|,
name|endpoint
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// set property which endpoint we send to
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|TO_ENDPOINT
argument_list|,
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
comment|// send the exchange using the processor
name|StopWatch
name|watch
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|eventNotifierEnabled
condition|)
block|{
name|boolean
name|sending
init|=
name|EventHelper
operator|.
name|notifyExchangeSending
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|endpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|sending
condition|)
block|{
name|watch
operator|=
operator|new
name|StopWatch
argument_list|()
expr_stmt|;
block|}
block|}
comment|// invoke the synchronous method
name|internalProcessor
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
name|producer
argument_list|,
name|resultProcessor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ensure exceptions is caught and set on the exchange
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// emit event that the exchange was sent to the endpoint
if|if
condition|(
name|eventNotifierEnabled
operator|&&
name|watch
operator|!=
literal|null
condition|)
block|{
name|long
name|timeTaken
init|=
name|watch
operator|.
name|taken
argument_list|()
decl_stmt|;
name|EventHelper
operator|.
name|notifyExchangeSent
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|endpoint
argument_list|,
name|timeTaken
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|exchange
return|;
block|}
finally|finally
block|{
name|releaseProducer
argument_list|(
name|endpoint
argument_list|,
name|producer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Asynchronously sends an exchange to an endpoint using a supplied      * {@link Processor} to populate the exchange      *<p>      * This method will<b>neither</b> throw an exception<b>nor</b> complete future exceptionally.      * If processing of the given Exchange failed then the exception is stored on the return Exchange      *      * @param endpoint        the endpoint to send the exchange to      * @param pattern         the message {@link ExchangePattern} such as      *                        {@link ExchangePattern#InOnly} or {@link ExchangePattern#InOut}      * @param processor       the transformer used to populate the new exchange      * @param resultProcessor a processor to process the exchange when the send is complete.      * @param future          the preexisting future to complete when processing is done or null if to create new one      * @return future that completes with exchange when processing is done. Either passed into future parameter      *              or new one if parameter was null      */
annotation|@
name|Deprecated
DECL|method|asyncSend (Endpoint endpoint, ExchangePattern pattern, Processor processor, Processor resultProcessor, CompletableFuture<Exchange> future)
specifier|public
name|CompletableFuture
argument_list|<
name|Exchange
argument_list|>
name|asyncSend
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|ExchangePattern
name|pattern
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|Processor
name|resultProcessor
parameter_list|,
name|CompletableFuture
argument_list|<
name|Exchange
argument_list|>
name|future
parameter_list|)
block|{
return|return
name|asyncSendExchange
argument_list|(
name|endpoint
argument_list|,
name|pattern
argument_list|,
name|processor
argument_list|,
name|resultProcessor
argument_list|,
literal|null
argument_list|,
name|future
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|asyncSendExchange (Endpoint endpoint, ExchangePattern pattern, Processor processor, Processor resultProcessor, Exchange exchange, CompletableFuture<Exchange> future)
specifier|public
name|CompletableFuture
argument_list|<
name|Exchange
argument_list|>
name|asyncSendExchange
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|ExchangePattern
name|pattern
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|Processor
name|resultProcessor
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|CompletableFuture
argument_list|<
name|Exchange
argument_list|>
name|future
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|==
literal|null
condition|)
block|{
name|exchange
operator|=
name|pattern
operator|!=
literal|null
condition|?
name|endpoint
operator|.
name|createExchange
argument_list|(
name|pattern
argument_list|)
else|:
name|endpoint
operator|.
name|createExchange
argument_list|()
expr_stmt|;
block|}
return|return
name|doAsyncSendExchange
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|,
name|resultProcessor
argument_list|,
name|exchange
argument_list|,
name|future
argument_list|)
return|;
block|}
DECL|method|doAsyncSendExchange (Endpoint endpoint, Processor processor, Processor resultProcessor, Exchange exchange, CompletableFuture<Exchange> f)
specifier|protected
name|CompletableFuture
argument_list|<
name|Exchange
argument_list|>
name|doAsyncSendExchange
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|Processor
name|resultProcessor
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|CompletableFuture
argument_list|<
name|Exchange
argument_list|>
name|f
parameter_list|)
block|{
name|CompletableFuture
argument_list|<
name|Exchange
argument_list|>
name|future
init|=
name|f
operator|!=
literal|null
condition|?
name|f
else|:
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|AsyncProducerCallback
name|cb
init|=
parameter_list|(
name|p
parameter_list|,
name|e
parameter_list|,
name|c
parameter_list|)
lambda|->
name|asyncDispatchExchange
argument_list|(
name|endpoint
argument_list|,
name|p
argument_list|,
name|resultProcessor
argument_list|,
name|e
argument_list|,
name|c
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|processor
operator|instanceof
name|AsyncProcessor
condition|)
block|{
operator|(
operator|(
name|AsyncProcessor
operator|)
name|processor
operator|)
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
name|doneSync
lambda|->
name|doInAsyncProducer
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|ds
lambda|->
name|future
operator|.
name|complete
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|cb
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
name|doInAsyncProducer
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|ds
lambda|->
name|future
operator|.
name|complete
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// populate failed so return
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|future
operator|.
name|complete
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
return|return
name|future
return|;
block|}
annotation|@
name|Override
DECL|method|doInAsyncProducer (Endpoint endpoint, Exchange exchange, AsyncCallback callback, AsyncProducerCallback producerCallback)
specifier|public
name|boolean
name|doInAsyncProducer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|,
name|AsyncProducerCallback
name|producerCallback
parameter_list|)
block|{
name|AsyncProducer
name|producer
decl_stmt|;
try|try
block|{
comment|// get the producer and we do not mind if its pooled as we can handle returning it back to the pool
name|producer
operator|=
name|acquireProducer
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
if|if
condition|(
name|producer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isStopped
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring exchange sent after processor is stopped: {}"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"No producer, this processor has not been started: "
operator|+
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
try|try
block|{
comment|// record timing for sending the exchange using the producer
name|StopWatch
name|watch
decl_stmt|;
if|if
condition|(
name|eventNotifierEnabled
operator|&&
name|exchange
operator|!=
literal|null
condition|)
block|{
name|boolean
name|sending
init|=
name|EventHelper
operator|.
name|notifyExchangeSending
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|endpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|sending
condition|)
block|{
name|watch
operator|=
operator|new
name|StopWatch
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|watch
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|watch
operator|=
literal|null
expr_stmt|;
block|}
comment|// invoke the callback
return|return
name|producerCallback
operator|.
name|doInAsyncProducer
argument_list|(
name|producer
argument_list|,
name|exchange
argument_list|,
name|doneSync
lambda|->
block|{
try|try
block|{
if|if
condition|(
name|eventNotifierEnabled
operator|&&
name|watch
operator|!=
literal|null
condition|)
block|{
name|long
name|timeTaken
init|=
name|watch
operator|.
name|taken
argument_list|()
decl_stmt|;
comment|// emit event that the exchange was sent to the endpoint
name|EventHelper
operator|.
name|notifyExchangeSent
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|endpoint
argument_list|,
name|timeTaken
argument_list|)
expr_stmt|;
block|}
comment|// release back to the pool
name|producers
operator|.
name|release
argument_list|(
name|endpoint
argument_list|,
name|producer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|callback
operator|.
name|done
argument_list|(
name|doneSync
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ensure exceptions is caught and set on the exchange
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|method|asyncDispatchExchange (Endpoint endpoint, AsyncProducer producer, Processor resultProcessor, Exchange exchange, AsyncCallback callback)
specifier|protected
name|boolean
name|asyncDispatchExchange
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|AsyncProducer
name|producer
parameter_list|,
name|Processor
name|resultProcessor
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
comment|// now lets dispatch
name|log
operator|.
name|debug
argument_list|(
literal|">>>> {} {}"
argument_list|,
name|endpoint
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// set property which endpoint we send to
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|TO_ENDPOINT
argument_list|,
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
comment|// send the exchange using the processor
try|try
block|{
if|if
condition|(
name|eventNotifierEnabled
condition|)
block|{
name|callback
operator|=
operator|new
name|EventNotifierCallback
argument_list|(
name|callback
argument_list|,
name|exchange
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
comment|// invoke the asynchronous method
return|return
name|internalProcessor
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|,
name|producer
argument_list|,
name|resultProcessor
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ensure exceptions is caught and set on the exchange
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|method|doGetProducer (Endpoint endpoint)
specifier|protected
name|AsyncProducer
name|doGetProducer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|producers
operator|.
name|acquire
argument_list|(
name|endpoint
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|extendedStatistics
condition|)
block|{
name|int
name|max
init|=
name|maxCacheSize
operator|==
literal|0
condition|?
name|CamelContextHelper
operator|.
name|getMaximumCachePoolSize
argument_list|(
name|camelContext
argument_list|)
else|:
name|maxCacheSize
decl_stmt|;
name|statistics
operator|=
operator|new
name|DefaultEndpointUtilizationStatistics
argument_list|(
name|max
argument_list|)
expr_stmt|;
block|}
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|producers
argument_list|,
name|statistics
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// when stopping we intend to shutdown
name|ServiceHelper
operator|.
name|stopAndShutdownServices
argument_list|(
name|statistics
argument_list|,
name|producers
argument_list|)
expr_stmt|;
if|if
condition|(
name|statistics
operator|!=
literal|null
condition|)
block|{
name|statistics
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
name|int
name|size
init|=
name|producers
operator|.
name|size
argument_list|()
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"size = {}"
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|getCapacity ()
specifier|public
name|int
name|getCapacity
parameter_list|()
block|{
return|return
name|maxCacheSize
return|;
block|}
annotation|@
name|Override
DECL|method|getHits ()
specifier|public
name|long
name|getHits
parameter_list|()
block|{
return|return
name|producers
operator|.
name|getHits
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMisses ()
specifier|public
name|long
name|getMisses
parameter_list|()
block|{
return|return
name|producers
operator|.
name|getMisses
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getEvicted ()
specifier|public
name|long
name|getEvicted
parameter_list|()
block|{
return|return
name|producers
operator|.
name|getEvicted
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|resetCacheStatistics ()
specifier|public
name|void
name|resetCacheStatistics
parameter_list|()
block|{
name|producers
operator|.
name|resetStatistics
argument_list|()
expr_stmt|;
if|if
condition|(
name|statistics
operator|!=
literal|null
condition|)
block|{
name|statistics
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|purge ()
specifier|public
specifier|synchronized
name|void
name|purge
parameter_list|()
block|{
try|try
block|{
name|producers
operator|.
name|stop
argument_list|()
expr_stmt|;
name|producers
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Error restarting producers"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|statistics
operator|!=
literal|null
condition|)
block|{
name|statistics
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
name|producers
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpointUtilizationStatistics ()
specifier|public
name|EndpointUtilizationStatistics
name|getEndpointUtilizationStatistics
parameter_list|()
block|{
return|return
name|statistics
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ProducerCache for source: "
operator|+
name|source
operator|+
literal|", capacity: "
operator|+
name|getCapacity
argument_list|()
return|;
block|}
block|}
end_class

end_unit

