begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.loadbalancer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|loadbalancer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_comment
comment|/**  * A base class for {@link LoadBalancer} implementations which choose a single  * destination for each exchange (rather like JMS Queues)  */
end_comment

begin_class
DECL|class|QueueLoadBalancer
specifier|public
specifier|abstract
class|class
name|QueueLoadBalancer
extends|extends
name|LoadBalancerSupport
block|{
DECL|method|process (final Exchange exchange, final AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|AsyncProcessor
index|[]
name|list
init|=
name|doGetProcessors
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|AsyncProcessor
name|processor
init|=
name|chooseProcessor
argument_list|(
name|list
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
name|Exception
name|e
init|=
operator|new
name|IllegalStateException
argument_list|(
literal|"No processors could be chosen to process "
operator|+
name|exchange
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// no processors but indicate we are done
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|chooseProcessor (AsyncProcessor[] processors, Exchange exchange)
specifier|protected
specifier|abstract
name|AsyncProcessor
name|chooseProcessor
parameter_list|(
name|AsyncProcessor
index|[]
name|processors
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
function_decl|;
block|}
end_class

end_unit

