begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|GlobalEndpointConfiguration
import|;
end_import

begin_class
DECL|class|DefaultGlobalEndpointConfiguration
specifier|public
specifier|final
class|class
name|DefaultGlobalEndpointConfiguration
implements|implements
name|GlobalEndpointConfiguration
block|{
DECL|field|lazyStartProducer
specifier|private
name|boolean
name|lazyStartProducer
decl_stmt|;
DECL|field|bridgeErrorHandler
specifier|private
name|boolean
name|bridgeErrorHandler
decl_stmt|;
DECL|field|basicPropertyBinding
specifier|private
name|boolean
name|basicPropertyBinding
decl_stmt|;
annotation|@
name|Override
DECL|method|isLazyStartProducer ()
specifier|public
name|boolean
name|isLazyStartProducer
parameter_list|()
block|{
return|return
name|lazyStartProducer
return|;
block|}
annotation|@
name|Override
DECL|method|setLazyStartProducer (boolean lazyStartProducer)
specifier|public
name|void
name|setLazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|this
operator|.
name|lazyStartProducer
operator|=
name|lazyStartProducer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isBridgeErrorHandler ()
specifier|public
name|boolean
name|isBridgeErrorHandler
parameter_list|()
block|{
return|return
name|bridgeErrorHandler
return|;
block|}
annotation|@
name|Override
DECL|method|setBridgeErrorHandler (boolean bridgeErrorHandler)
specifier|public
name|void
name|setBridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|this
operator|.
name|bridgeErrorHandler
operator|=
name|bridgeErrorHandler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isBasicPropertyBinding ()
specifier|public
name|boolean
name|isBasicPropertyBinding
parameter_list|()
block|{
return|return
name|basicPropertyBinding
return|;
block|}
annotation|@
name|Override
DECL|method|setBasicPropertyBinding (boolean basicPropertyBinding)
specifier|public
name|void
name|setBasicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|this
operator|.
name|basicPropertyBinding
operator|=
name|basicPropertyBinding
expr_stmt|;
block|}
block|}
end_class

end_unit

