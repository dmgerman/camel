begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteError
import|;
end_import

begin_class
DECL|class|DefaultRouteError
specifier|public
class|class
name|DefaultRouteError
implements|implements
name|RouteError
block|{
DECL|field|phase
specifier|private
specifier|final
name|RouteError
operator|.
name|Phase
name|phase
decl_stmt|;
DECL|field|throwable
specifier|private
specifier|final
name|Throwable
name|throwable
decl_stmt|;
DECL|method|DefaultRouteError (Phase phase, Throwable throwable)
specifier|public
name|DefaultRouteError
parameter_list|(
name|Phase
name|phase
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|this
operator|.
name|phase
operator|=
name|phase
expr_stmt|;
name|this
operator|.
name|throwable
operator|=
name|throwable
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPhase ()
specifier|public
name|Phase
name|getPhase
parameter_list|()
block|{
return|return
name|phase
return|;
block|}
annotation|@
name|Override
DECL|method|getException ()
specifier|public
name|Throwable
name|getException
parameter_list|()
block|{
return|return
name|throwable
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DefaultRouteError{"
operator|+
literal|"phase="
operator|+
name|phase
operator|+
literal|", throwable="
operator|+
name|throwable
operator|+
literal|'}'
return|;
block|}
comment|// ***********************************
comment|// Helpers
comment|// ***********************************
DECL|method|set (CamelContext context, String routeId, RouteError.Phase phase, Throwable throwable)
specifier|public
specifier|static
name|void
name|set
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|routeId
parameter_list|,
name|RouteError
operator|.
name|Phase
name|phase
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|Route
name|route
init|=
name|context
operator|.
name|getRoute
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|route
operator|!=
literal|null
condition|)
block|{
name|route
operator|.
name|getRouteContext
argument_list|()
operator|.
name|setLastError
argument_list|(
operator|new
name|DefaultRouteError
argument_list|(
name|phase
argument_list|,
name|throwable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reset (CamelContext context, String routeId)
specifier|public
specifier|static
name|void
name|reset
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|routeId
parameter_list|)
block|{
name|Route
name|route
init|=
name|context
operator|.
name|getRoute
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|route
operator|!=
literal|null
condition|)
block|{
name|route
operator|.
name|getRouteContext
argument_list|()
operator|.
name|setLastError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

