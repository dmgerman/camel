begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.aggregate
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_comment
comment|/**  * Class to control how failed optimistic locks are tried. This policy supports random and exponential back-off delays.  *<p/>  * If {@code randomBackOff} is enabled and a value is supplied for {@code retryDelay} the value will be ignored.  *<p/>  * If {@code randomBackOff} is enabled and no value is set for {@code maximumRetryDelay}, a default value of 1000ms will  * be used, the random delay will be between 0 and 1000 milliseconds.  *<p/>  * If both {@code randomBackOff} and {@code exponentialBackOff} are enabled, {@code exponentialBackOff} will take precedence.  *<p/>  * If {@code exponentialBackOff} is enabled and a value is set for {@code maximumRetryDelay}, the retry delay will keep  * doubling in value until it reaches or exceeds {@code maximumRetryDelay}. After it has reached or exceeded {@code maximumRetryDelay}  * the value of {@code maximumRetryDelay} will be used as the retry delay.  *<p/>  * If both {@code exponentialBackOff} and {@code randomBackOff} are disabled, the value of {@code retryDelay} will be used  * as the retry delay and remain constant through all the retry attempts.  *<p/>  * If the value of {@code maximumRetries} is set above zero, retry attempts will stop at the value specified.  *<p/>  * The default behaviour of this policy is to retry forever and exponentially increase the back-off delay starting with 50ms.  */
end_comment

begin_class
DECL|class|OptimisticLockRetryPolicy
specifier|public
class|class
name|OptimisticLockRetryPolicy
block|{
DECL|field|DEFAULT_MAXIMUM_RETRY_DELAY
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_MAXIMUM_RETRY_DELAY
init|=
literal|1000L
decl_stmt|;
DECL|field|maximumRetries
specifier|private
name|int
name|maximumRetries
decl_stmt|;
DECL|field|retryDelay
specifier|private
name|long
name|retryDelay
init|=
literal|50L
decl_stmt|;
DECL|field|maximumRetryDelay
specifier|private
name|long
name|maximumRetryDelay
decl_stmt|;
DECL|field|exponentialBackOff
specifier|private
name|boolean
name|exponentialBackOff
init|=
literal|true
decl_stmt|;
DECL|field|randomBackOff
specifier|private
name|boolean
name|randomBackOff
decl_stmt|;
DECL|method|OptimisticLockRetryPolicy ()
specifier|public
name|OptimisticLockRetryPolicy
parameter_list|()
block|{     }
DECL|method|shouldRetry (final int retryCounter)
specifier|public
name|boolean
name|shouldRetry
parameter_list|(
specifier|final
name|int
name|retryCounter
parameter_list|)
block|{
return|return
name|maximumRetries
operator|<=
literal|0
operator|||
name|retryCounter
operator|<
name|maximumRetries
return|;
block|}
DECL|method|doDelay (final int retryCounter)
specifier|public
name|void
name|doDelay
parameter_list|(
specifier|final
name|int
name|retryCounter
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|sleepFor
init|=
name|getDelay
argument_list|(
name|retryCounter
argument_list|)
decl_stmt|;
if|if
condition|(
name|sleepFor
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepFor
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getDelay (final int retryCounter)
specifier|public
name|long
name|getDelay
parameter_list|(
specifier|final
name|int
name|retryCounter
parameter_list|)
block|{
name|long
name|sleepFor
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|retryDelay
operator|>
literal|0
operator|||
name|randomBackOff
condition|)
block|{
name|sleepFor
operator|=
name|exponentialBackOff
condition|?
operator|(
name|retryDelay
operator|<<
name|retryCounter
operator|)
else|:
operator|(
name|randomBackOff
condition|?
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
operator|.
name|nextInt
argument_list|(
call|(
name|int
call|)
argument_list|(
name|maximumRetryDelay
operator|>
literal|0
condition|?
name|maximumRetryDelay
else|:
name|DEFAULT_MAXIMUM_RETRY_DELAY
argument_list|)
argument_list|)
else|:
name|retryDelay
operator|)
expr_stmt|;
if|if
condition|(
name|maximumRetryDelay
operator|>
literal|0
operator|&&
name|sleepFor
operator|>
name|maximumRetryDelay
condition|)
block|{
name|sleepFor
operator|=
name|maximumRetryDelay
expr_stmt|;
block|}
block|}
return|return
name|sleepFor
return|;
block|}
DECL|method|getMaximumRetries ()
specifier|public
name|int
name|getMaximumRetries
parameter_list|()
block|{
return|return
name|maximumRetries
return|;
block|}
DECL|method|setMaximumRetries (int maximumRetries)
specifier|public
name|void
name|setMaximumRetries
parameter_list|(
name|int
name|maximumRetries
parameter_list|)
block|{
name|this
operator|.
name|maximumRetries
operator|=
name|maximumRetries
expr_stmt|;
block|}
DECL|method|maximumRetries (int maximumRetries)
specifier|public
name|OptimisticLockRetryPolicy
name|maximumRetries
parameter_list|(
name|int
name|maximumRetries
parameter_list|)
block|{
name|setMaximumRetries
argument_list|(
name|maximumRetries
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getRetryDelay ()
specifier|public
name|long
name|getRetryDelay
parameter_list|()
block|{
return|return
name|retryDelay
return|;
block|}
DECL|method|setRetryDelay (long retryDelay)
specifier|public
name|void
name|setRetryDelay
parameter_list|(
name|long
name|retryDelay
parameter_list|)
block|{
name|this
operator|.
name|retryDelay
operator|=
name|retryDelay
expr_stmt|;
block|}
DECL|method|retryDelay (long retryDelay)
specifier|public
name|OptimisticLockRetryPolicy
name|retryDelay
parameter_list|(
name|long
name|retryDelay
parameter_list|)
block|{
name|setRetryDelay
argument_list|(
name|retryDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getMaximumRetryDelay ()
specifier|public
name|long
name|getMaximumRetryDelay
parameter_list|()
block|{
return|return
name|maximumRetryDelay
return|;
block|}
DECL|method|setMaximumRetryDelay (long maximumRetryDelay)
specifier|public
name|void
name|setMaximumRetryDelay
parameter_list|(
name|long
name|maximumRetryDelay
parameter_list|)
block|{
name|this
operator|.
name|maximumRetryDelay
operator|=
name|maximumRetryDelay
expr_stmt|;
block|}
DECL|method|maximumRetryDelay (long maximumRetryDelay)
specifier|public
name|OptimisticLockRetryPolicy
name|maximumRetryDelay
parameter_list|(
name|long
name|maximumRetryDelay
parameter_list|)
block|{
name|setMaximumRetryDelay
argument_list|(
name|maximumRetryDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isExponentialBackOff ()
specifier|public
name|boolean
name|isExponentialBackOff
parameter_list|()
block|{
return|return
name|exponentialBackOff
return|;
block|}
DECL|method|setExponentialBackOff (boolean exponentialBackOff)
specifier|public
name|void
name|setExponentialBackOff
parameter_list|(
name|boolean
name|exponentialBackOff
parameter_list|)
block|{
name|this
operator|.
name|exponentialBackOff
operator|=
name|exponentialBackOff
expr_stmt|;
block|}
DECL|method|exponentialBackOff ()
specifier|public
name|OptimisticLockRetryPolicy
name|exponentialBackOff
parameter_list|()
block|{
name|setExponentialBackOff
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isRandomBackOff ()
specifier|public
name|boolean
name|isRandomBackOff
parameter_list|()
block|{
return|return
name|randomBackOff
return|;
block|}
DECL|method|setRandomBackOff (boolean randomBackOff)
specifier|public
name|void
name|setRandomBackOff
parameter_list|(
name|boolean
name|randomBackOff
parameter_list|)
block|{
name|this
operator|.
name|randomBackOff
operator|=
name|randomBackOff
expr_stmt|;
block|}
DECL|method|randomBackOff ()
specifier|public
name|OptimisticLockRetryPolicy
name|randomBackOff
parameter_list|()
block|{
name|setRandomBackOff
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"OptimisticLockRetryPolicy["
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"maximumRetries="
argument_list|)
operator|.
name|append
argument_list|(
name|maximumRetries
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", retryDelay="
argument_list|)
operator|.
name|append
argument_list|(
name|retryDelay
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", maximumRetryDelay="
argument_list|)
operator|.
name|append
argument_list|(
name|maximumRetryDelay
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", exponentialBackOff="
argument_list|)
operator|.
name|append
argument_list|(
name|exponentialBackOff
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", randomBackOff="
argument_list|)
operator|.
name|append
argument_list|(
name|randomBackOff
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

