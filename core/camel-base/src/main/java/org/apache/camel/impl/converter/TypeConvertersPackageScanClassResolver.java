begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.converter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PackageScanClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PackageScanFilter
import|;
end_import

begin_comment
comment|/**  * A {@link org.apache.camel.spi.ClassResolver} which loads type converters  * from an instance that implements {@link org.apache.camel.TypeConverters}.  *<p/>  * This is used when adding converters manually using the  * {@link org.apache.camel.impl.converter.BaseTypeConverterRegistry#addTypeConverters(org.apache.camel.TypeConverters)} method.  */
end_comment

begin_class
DECL|class|TypeConvertersPackageScanClassResolver
specifier|public
class|class
name|TypeConvertersPackageScanClassResolver
implements|implements
name|PackageScanClassResolver
block|{
DECL|field|classLoaders
specifier|private
specifier|final
name|Set
argument_list|<
name|ClassLoader
argument_list|>
name|classLoaders
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|converters
specifier|private
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|converters
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|TypeConvertersPackageScanClassResolver (Class<?> clazz)
specifier|public
name|TypeConvertersPackageScanClassResolver
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|converters
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
comment|// use the classloader that loaded the class
name|classLoaders
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getClassLoaders ()
specifier|public
name|Set
argument_list|<
name|ClassLoader
argument_list|>
name|getClassLoaders
parameter_list|()
block|{
comment|// return a new set to avoid any concurrency issues in other runtimes such as OSGi
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|classLoaders
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|addClassLoader (ClassLoader classLoader)
specifier|public
name|void
name|addClassLoader
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|)
block|{
name|classLoaders
operator|.
name|add
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|findAnnotated (Class<? extends Annotation> annotation, String... packageNames)
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|findAnnotated
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotation
parameter_list|,
name|String
modifier|...
name|packageNames
parameter_list|)
block|{
return|return
name|converters
return|;
block|}
annotation|@
name|Override
DECL|method|findAnnotated (Set<Class<? extends Annotation>> annotations, String... packageNames)
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|findAnnotated
parameter_list|(
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
argument_list|>
name|annotations
parameter_list|,
name|String
modifier|...
name|packageNames
parameter_list|)
block|{
return|return
name|converters
return|;
block|}
annotation|@
name|Override
DECL|method|findImplementations (Class<?> parent, String... packageNames)
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|findImplementations
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|parent
parameter_list|,
name|String
modifier|...
name|packageNames
parameter_list|)
block|{
comment|// noop
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|findByFilter (PackageScanFilter filter, String... packageNames)
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|findByFilter
parameter_list|(
name|PackageScanFilter
name|filter
parameter_list|,
name|String
modifier|...
name|packageNames
parameter_list|)
block|{
comment|// noop
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|addFilter (PackageScanFilter filter)
specifier|public
name|void
name|addFilter
parameter_list|(
name|PackageScanFilter
name|filter
parameter_list|)
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|removeFilter (PackageScanFilter filter)
specifier|public
name|void
name|removeFilter
parameter_list|(
name|PackageScanFilter
name|filter
parameter_list|)
block|{
comment|// noop
block|}
block|}
end_class

end_unit

