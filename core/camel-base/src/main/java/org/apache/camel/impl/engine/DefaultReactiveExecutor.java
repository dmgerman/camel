begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StaticService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ReactiveExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default {@link ReactiveExecutor}.  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed ReactiveExecutor"
argument_list|)
DECL|class|DefaultReactiveExecutor
specifier|public
class|class
name|DefaultReactiveExecutor
extends|extends
name|ServiceSupport
implements|implements
name|ReactiveExecutor
implements|,
name|StaticService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultReactiveExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|workers
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|Worker
argument_list|>
name|workers
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Worker
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Worker
name|get
parameter_list|()
block|{
name|createdWorkers
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
operator|new
name|Worker
argument_list|(
name|DefaultReactiveExecutor
operator|.
name|this
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// use for statistics so we have insights at runtime
DECL|field|createdWorkers
specifier|private
specifier|final
name|AtomicInteger
name|createdWorkers
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|runningWorkers
specifier|private
specifier|final
name|AtomicInteger
name|runningWorkers
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|pendingTasks
specifier|private
specifier|final
name|AtomicLong
name|pendingTasks
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|scheduleMain (Runnable runnable, String description)
specifier|public
name|void
name|scheduleMain
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|String
name|description
parameter_list|)
block|{
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
name|runnable
operator|=
name|describe
argument_list|(
name|runnable
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
name|workers
operator|.
name|get
argument_list|()
operator|.
name|schedule
argument_list|(
name|runnable
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|schedule (Runnable runnable, String description)
specifier|public
name|void
name|schedule
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|String
name|description
parameter_list|)
block|{
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
name|runnable
operator|=
name|describe
argument_list|(
name|runnable
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
name|workers
operator|.
name|get
argument_list|()
operator|.
name|schedule
argument_list|(
name|runnable
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|scheduleSync (Runnable runnable, String description)
specifier|public
name|void
name|scheduleSync
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|String
name|description
parameter_list|)
block|{
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
name|runnable
operator|=
name|describe
argument_list|(
name|runnable
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
name|workers
operator|.
name|get
argument_list|()
operator|.
name|schedule
argument_list|(
name|runnable
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executeFromQueue ()
specifier|public
name|boolean
name|executeFromQueue
parameter_list|()
block|{
return|return
name|workers
operator|.
name|get
argument_list|()
operator|.
name|executeFromQueue
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Number of created workers"
argument_list|)
DECL|method|getCreatedWorkers ()
specifier|public
name|int
name|getCreatedWorkers
parameter_list|()
block|{
return|return
name|createdWorkers
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Number of running workers"
argument_list|)
DECL|method|getRunningWorkers ()
specifier|public
name|int
name|getRunningWorkers
parameter_list|()
block|{
return|return
name|runningWorkers
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Number of pending tasks"
argument_list|)
DECL|method|getPendingTasks ()
specifier|public
name|long
name|getPendingTasks
parameter_list|()
block|{
return|return
name|pendingTasks
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|callback (AsyncCallback callback)
specifier|public
name|void
name|callback
parameter_list|(
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|schedule
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Callback["
operator|+
name|callback
operator|+
literal|"]"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|describe (Runnable runnable, String description)
specifier|private
specifier|static
name|Runnable
name|describe
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|String
name|description
parameter_list|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|description
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
DECL|class|Worker
specifier|private
specifier|static
class|class
name|Worker
block|{
DECL|field|executor
specifier|private
specifier|final
name|DefaultReactiveExecutor
name|executor
decl_stmt|;
DECL|field|queue
specifier|private
specifier|volatile
name|LinkedList
argument_list|<
name|Runnable
argument_list|>
name|queue
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|back
specifier|private
specifier|volatile
name|LinkedList
argument_list|<
name|LinkedList
argument_list|<
name|Runnable
argument_list|>
argument_list|>
name|back
decl_stmt|;
DECL|field|running
specifier|private
specifier|volatile
name|boolean
name|running
decl_stmt|;
DECL|method|Worker (DefaultReactiveExecutor executor)
specifier|public
name|Worker
parameter_list|(
name|DefaultReactiveExecutor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
DECL|method|schedule (Runnable runnable, boolean first, boolean main, boolean sync)
name|void
name|schedule
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|boolean
name|first
parameter_list|,
name|boolean
name|main
parameter_list|,
name|boolean
name|sync
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Schedule [first={}, main={}, sync={}]: {}"
argument_list|,
name|first
argument_list|,
name|main
argument_list|,
name|sync
argument_list|,
name|runnable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|main
condition|)
block|{
if|if
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|back
operator|==
literal|null
condition|)
block|{
name|back
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|back
operator|.
name|push
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|queue
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|first
condition|)
block|{
name|queue
operator|.
name|addFirst
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
name|executor
operator|.
name|pendingTasks
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|queue
operator|.
name|addLast
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
name|executor
operator|.
name|pendingTasks
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|running
operator|||
name|sync
condition|)
block|{
name|running
operator|=
literal|true
expr_stmt|;
name|executor
operator|.
name|runningWorkers
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|Runnable
name|polled
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|polled
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|back
operator|!=
literal|null
operator|&&
operator|!
name|back
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|queue
operator|=
name|back
operator|.
name|poll
argument_list|()
expr_stmt|;
continue|continue;
block|}
else|else
block|{
break|break;
block|}
block|}
try|try
block|{
name|executor
operator|.
name|pendingTasks
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Running: {}"
argument_list|,
name|runnable
argument_list|)
expr_stmt|;
block|}
name|polled
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error executing reactive work due to "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
operator|+
literal|". This exception is ignored."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|running
operator|=
literal|false
expr_stmt|;
name|executor
operator|.
name|runningWorkers
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Queuing reactive work: {}"
argument_list|,
name|runnable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|executeFromQueue ()
name|boolean
name|executeFromQueue
parameter_list|()
block|{
specifier|final
name|Runnable
name|polled
init|=
name|queue
operator|!=
literal|null
condition|?
name|queue
operator|.
name|poll
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|polled
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|executor
operator|.
name|pendingTasks
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Running: {}"
argument_list|,
name|polled
argument_list|)
expr_stmt|;
block|}
name|polled
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// should not happen
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error executing reactive work due to "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
operator|+
literal|". This exception is ignored."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

