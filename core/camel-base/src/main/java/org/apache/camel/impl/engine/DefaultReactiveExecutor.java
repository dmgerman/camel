begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ReactiveExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ReactiveHelper
import|;
end_import

begin_comment
comment|/**  * Default {@link ReactiveExecutor}.  */
end_comment

begin_class
DECL|class|DefaultReactiveExecutor
specifier|public
class|class
name|DefaultReactiveExecutor
implements|implements
name|ReactiveExecutor
block|{
annotation|@
name|Override
DECL|method|scheduleMain (Runnable runnable)
specifier|public
name|void
name|scheduleMain
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|ReactiveHelper
operator|.
name|scheduleMain
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|scheduleSync (Runnable runnable)
specifier|public
name|void
name|scheduleSync
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|ReactiveHelper
operator|.
name|scheduleSync
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|scheduleMain (Runnable runnable, String description)
specifier|public
name|void
name|scheduleMain
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|ReactiveHelper
operator|.
name|scheduleMain
argument_list|(
name|runnable
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|schedule (Runnable runnable)
specifier|public
name|void
name|schedule
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|ReactiveHelper
operator|.
name|schedule
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|schedule (Runnable runnable, String description)
specifier|public
name|void
name|schedule
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|ReactiveHelper
operator|.
name|schedule
argument_list|(
name|runnable
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|scheduleSync (Runnable runnable, String description)
specifier|public
name|void
name|scheduleSync
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|ReactiveHelper
operator|.
name|scheduleSync
argument_list|(
name|runnable
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|executeFromQueue ()
specifier|public
name|boolean
name|executeFromQueue
parameter_list|()
block|{
return|return
name|ReactiveHelper
operator|.
name|executeFromQueue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|callback (AsyncCallback callback)
specifier|public
name|void
name|callback
parameter_list|(
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|ReactiveHelper
operator|.
name|callback
argument_list|(
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

