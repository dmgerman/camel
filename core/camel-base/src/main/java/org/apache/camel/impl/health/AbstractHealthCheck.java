begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.health
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|health
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZonedDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheckConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheckResultBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|AbstractHealthCheck
specifier|public
specifier|abstract
class|class
name|AbstractHealthCheck
implements|implements
name|HealthCheck
block|{
DECL|field|CHECK_ID
specifier|public
specifier|static
specifier|final
name|String
name|CHECK_ID
init|=
literal|"check.id"
decl_stmt|;
DECL|field|CHECK_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|CHECK_GROUP
init|=
literal|"check.group"
decl_stmt|;
DECL|field|CHECK_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|CHECK_ENABLED
init|=
literal|"check.enabled"
decl_stmt|;
DECL|field|INVOCATION_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|INVOCATION_COUNT
init|=
literal|"invocation.count"
decl_stmt|;
DECL|field|INVOCATION_TIME
specifier|public
specifier|static
specifier|final
name|String
name|INVOCATION_TIME
init|=
literal|"invocation.time"
decl_stmt|;
DECL|field|INVOCATION_ATTEMPT_TIME
specifier|public
specifier|static
specifier|final
name|String
name|INVOCATION_ATTEMPT_TIME
init|=
literal|"invocation.attempt.time"
decl_stmt|;
DECL|field|FAILURE_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|FAILURE_COUNT
init|=
literal|"failure.count"
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractHealthCheck
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Object
name|lock
decl_stmt|;
DECL|field|group
specifier|private
specifier|final
name|String
name|group
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|meta
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|meta
decl_stmt|;
DECL|field|configuration
specifier|private
name|HealthCheckConfiguration
name|configuration
decl_stmt|;
DECL|field|lastResult
specifier|private
name|HealthCheck
operator|.
name|Result
name|lastResult
decl_stmt|;
DECL|field|lastInvocation
specifier|private
name|ZonedDateTime
name|lastInvocation
decl_stmt|;
DECL|method|AbstractHealthCheck (String id)
specifier|protected
name|AbstractHealthCheck
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|id
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|AbstractHealthCheck (String group, String id)
specifier|protected
name|AbstractHealthCheck
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|this
argument_list|(
name|group
argument_list|,
name|id
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|AbstractHealthCheck (String group, String id, Map<String, Object> meta)
specifier|protected
name|AbstractHealthCheck
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|meta
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|id
argument_list|,
literal|"HealthCheck ID"
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
operator|new
name|HealthCheckConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|meta
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|meta
operator|.
name|putAll
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|meta
operator|.
name|put
argument_list|(
name|CHECK_ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|meta
operator|.
name|putIfAbsent
argument_list|(
name|CHECK_GROUP
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|getGroup ()
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
annotation|@
name|Override
DECL|method|getMetaData ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getMetaData
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|this
operator|.
name|meta
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getConfiguration ()
specifier|public
name|HealthCheckConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|configuration
return|;
block|}
DECL|method|setConfiguration (HealthCheckConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|HealthCheckConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Result
name|call
parameter_list|()
block|{
return|return
name|call
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|call (Map<String, Object> options)
specifier|public
name|Result
name|call
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
specifier|final
name|HealthCheckConfiguration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|HealthCheckResultBuilder
name|builder
init|=
name|HealthCheckResultBuilder
operator|.
name|on
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|final
name|ZonedDateTime
name|now
init|=
name|ZonedDateTime
operator|.
name|now
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|enabled
init|=
name|ObjectHelper
operator|.
name|supplyIfEmpty
argument_list|(
name|conf
operator|.
name|isEnabled
argument_list|()
argument_list|,
name|HealthCheckConfiguration
operator|::
name|defaultValueEnabled
argument_list|)
decl_stmt|;
specifier|final
name|Duration
name|interval
init|=
name|ObjectHelper
operator|.
name|supplyIfEmpty
argument_list|(
name|conf
operator|.
name|getInterval
argument_list|()
argument_list|,
name|HealthCheckConfiguration
operator|::
name|defaultValueInterval
argument_list|)
decl_stmt|;
specifier|final
name|Integer
name|threshold
init|=
name|ObjectHelper
operator|.
name|supplyIfEmpty
argument_list|(
name|conf
operator|.
name|getFailureThreshold
argument_list|()
argument_list|,
name|HealthCheckConfiguration
operator|::
name|defaultValueFailureThreshold
argument_list|)
decl_stmt|;
comment|// Extract relevant information from meta data.
name|int
name|invocationCount
init|=
operator|(
name|Integer
operator|)
name|meta
operator|.
name|getOrDefault
argument_list|(
name|INVOCATION_COUNT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|failureCount
init|=
operator|(
name|Integer
operator|)
name|meta
operator|.
name|getOrDefault
argument_list|(
name|FAILURE_COUNT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|invocationTime
init|=
name|now
operator|.
name|format
argument_list|(
name|DateTimeFormatter
operator|.
name|ISO_ZONED_DATE_TIME
argument_list|)
decl_stmt|;
name|boolean
name|call
init|=
literal|true
decl_stmt|;
comment|// Set common meta-data
name|meta
operator|.
name|put
argument_list|(
name|INVOCATION_ATTEMPT_TIME
argument_list|,
name|invocationTime
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"health-check {}/{} won't be invoked as not enabled"
argument_list|,
name|getGroup
argument_list|()
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|message
argument_list|(
literal|"Disabled"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|detail
argument_list|(
name|CHECK_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|unknown
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
comment|// check if the last invocation is far enough to have this check invoked
comment|// again without violating the interval configuration.
if|if
condition|(
name|lastResult
operator|!=
literal|null
operator|&&
name|lastInvocation
operator|!=
literal|null
operator|&&
operator|!
name|interval
operator|.
name|isZero
argument_list|()
condition|)
block|{
name|Duration
name|elapsed
init|=
name|Duration
operator|.
name|between
argument_list|(
name|lastInvocation
argument_list|,
name|now
argument_list|)
decl_stmt|;
if|if
condition|(
name|elapsed
operator|.
name|compareTo
argument_list|(
name|interval
argument_list|)
operator|<
literal|0
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"health-check {}/{} won't be invoked as interval ({}) is not yet expired (last-invocation={})"
argument_list|,
name|getGroup
argument_list|()
argument_list|,
name|getId
argument_list|()
argument_list|,
name|elapsed
argument_list|,
name|lastInvocation
argument_list|)
expr_stmt|;
name|call
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// Invoke the check.
if|if
condition|(
name|call
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Invoke health-check {}/{}"
argument_list|,
name|getGroup
argument_list|()
argument_list|,
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|doCall
argument_list|(
name|builder
argument_list|,
name|options
argument_list|)
expr_stmt|;
comment|// State should be set here
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|builder
operator|.
name|state
argument_list|()
argument_list|,
literal|"Response State"
argument_list|)
expr_stmt|;
if|if
condition|(
name|builder
operator|.
name|state
argument_list|()
operator|==
name|State
operator|.
name|DOWN
condition|)
block|{
comment|// If the service is un-healthy but the number of time it
comment|// has been consecutively reported in this state is less
comment|// than the threshold configured, mark it as UP. This is
comment|// used to avoid false positive in case of glitches.
if|if
condition|(
name|failureCount
operator|++
operator|<
name|threshold
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Health-check {}/{} has status DOWN but failure count ({}) is less than configured threshold ({})"
argument_list|,
name|getGroup
argument_list|()
argument_list|,
name|getId
argument_list|()
argument_list|,
name|failureCount
argument_list|,
name|threshold
argument_list|)
expr_stmt|;
name|builder
operator|.
name|up
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|failureCount
operator|=
literal|0
expr_stmt|;
block|}
name|meta
operator|.
name|put
argument_list|(
name|INVOCATION_TIME
argument_list|,
name|invocationTime
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|FAILURE_COUNT
argument_list|,
name|failureCount
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|INVOCATION_COUNT
argument_list|,
operator|++
name|invocationCount
argument_list|)
expr_stmt|;
comment|// Copy some of the meta-data bits to the response attributes so the
comment|// response caches the health-check state at the time of the invocation.
name|builder
operator|.
name|detail
argument_list|(
name|INVOCATION_TIME
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|INVOCATION_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|detail
argument_list|(
name|INVOCATION_COUNT
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|INVOCATION_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|detail
argument_list|(
name|FAILURE_COUNT
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|FAILURE_COUNT
argument_list|)
argument_list|)
expr_stmt|;
comment|// update last invocation time.
name|lastInvocation
operator|=
name|now
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastResult
operator|!=
literal|null
condition|)
block|{
name|lastResult
operator|.
name|getMessage
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|builder
operator|::
name|message
argument_list|)
expr_stmt|;
name|lastResult
operator|.
name|getError
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|builder
operator|::
name|error
argument_list|)
expr_stmt|;
name|builder
operator|.
name|state
argument_list|(
name|lastResult
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|details
argument_list|(
name|lastResult
operator|.
name|getDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lastResult
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|lastResult
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|AbstractHealthCheck
name|check
init|=
operator|(
name|AbstractHealthCheck
operator|)
name|o
decl_stmt|;
return|return
name|id
operator|!=
literal|null
condition|?
name|id
operator|.
name|equals
argument_list|(
name|check
operator|.
name|id
argument_list|)
else|:
name|check
operator|.
name|id
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|id
operator|!=
literal|null
condition|?
name|id
operator|.
name|hashCode
argument_list|()
else|:
literal|0
return|;
block|}
DECL|method|addMetaData (String key, Object value)
specifier|protected
specifier|final
name|void
name|addMetaData
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|meta
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Invoke the health check.      *      * @see {@link HealthCheck#call(Map)}      */
DECL|method|doCall (HealthCheckResultBuilder builder, Map<String, Object> options)
specifier|protected
specifier|abstract
name|void
name|doCall
parameter_list|(
name|HealthCheckResultBuilder
name|builder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
function_decl|;
block|}
end_class

end_unit

