begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.engine
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementStrategyFactory
import|;
end_import

begin_comment
comment|/**  * Factory for creating non JMX {@link ManagementStrategy}.  */
end_comment

begin_class
DECL|class|DefaultManagementStrategyFactory
specifier|public
class|class
name|DefaultManagementStrategyFactory
implements|implements
name|ManagementStrategyFactory
block|{
annotation|@
name|Override
DECL|method|create (CamelContext context, Map<String, Object> properties)
specifier|public
name|ManagementStrategy
name|create
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|DefaultManagementStrategy
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createLifecycle (CamelContext context)
specifier|public
name|LifecycleStrategy
name|createLifecycle
parameter_list|(
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
comment|// not in use for non JMX
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setupManagement (CamelContext camelContext, ManagementStrategy strategy, LifecycleStrategy lifecycle)
specifier|public
name|void
name|setupManagement
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|ManagementStrategy
name|strategy
parameter_list|,
name|LifecycleStrategy
name|lifecycle
parameter_list|)
block|{
name|camelContext
operator|.
name|setManagementStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|camelContext
operator|.
name|getLifecycleStrategies
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// camel-spring/camel-blueprint may re-initialize JMX during startup,
comment|// so remove any previous JMX initialized lifecycle strategy
name|camelContext
operator|.
name|getLifecycleStrategies
argument_list|()
operator|.
name|removeIf
argument_list|(
name|s
lambda|->
name|s
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"org.apache.camel.management"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

