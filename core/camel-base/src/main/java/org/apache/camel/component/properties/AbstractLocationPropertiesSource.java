begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.properties
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LoadablePropertiesSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|OrderedProperties
import|;
end_import

begin_comment
comment|/**  * Base class for {@link LoadablePropertiesSource} which can load properties from a source such as classpath or file system.  */
end_comment

begin_class
DECL|class|AbstractLocationPropertiesSource
specifier|public
specifier|abstract
class|class
name|AbstractLocationPropertiesSource
extends|extends
name|ServiceSupport
implements|implements
name|LoadablePropertiesSource
implements|,
name|LocationPropertiesSource
block|{
DECL|field|properties
specifier|private
specifier|final
name|Properties
name|properties
init|=
operator|new
name|OrderedProperties
argument_list|()
decl_stmt|;
DECL|field|propertiesComponent
specifier|private
specifier|final
name|PropertiesComponent
name|propertiesComponent
decl_stmt|;
DECL|field|location
specifier|private
specifier|final
name|PropertiesLocation
name|location
decl_stmt|;
DECL|method|AbstractLocationPropertiesSource (PropertiesComponent propertiesComponent, PropertiesLocation location)
specifier|protected
name|AbstractLocationPropertiesSource
parameter_list|(
name|PropertiesComponent
name|propertiesComponent
parameter_list|,
name|PropertiesLocation
name|location
parameter_list|)
block|{
name|this
operator|.
name|propertiesComponent
operator|=
name|propertiesComponent
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
DECL|method|loadPropertiesFromLocation (PropertiesComponent propertiesComponent, PropertiesLocation location)
specifier|abstract
name|Properties
name|loadPropertiesFromLocation
parameter_list|(
name|PropertiesComponent
name|propertiesComponent
parameter_list|,
name|PropertiesLocation
name|location
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|getLocation ()
specifier|public
name|PropertiesLocation
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
annotation|@
name|Override
DECL|method|loadProperties ()
specifier|public
name|Properties
name|loadProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
annotation|@
name|Override
DECL|method|loadProperties (Predicate<String> filter)
specifier|public
name|Properties
name|loadProperties
parameter_list|(
name|Predicate
argument_list|<
name|String
argument_list|>
name|filter
parameter_list|)
block|{
name|Properties
name|answer
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|answer
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|test
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|answer
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|getProperty (String name)
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|properties
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doInit ()
specifier|protected
name|void
name|doInit
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doInit
argument_list|()
expr_stmt|;
name|Properties
name|prop
init|=
name|loadPropertiesFromLocation
argument_list|(
name|propertiesComponent
argument_list|,
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
block|{
name|prop
operator|=
name|prepareLoadedProperties
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|properties
operator|.
name|putAll
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
comment|/**      * Strategy to prepare loaded properties before being used by Camel.      *<p/>      * This implementation will ensure values are trimmed, as loading properties from      * a file with values having trailing spaces is not automatic trimmed by the Properties API      * from the JDK.      *      * @param properties  the properties      * @return the prepared properties      */
DECL|method|prepareLoadedProperties (Properties properties)
specifier|protected
specifier|static
name|Properties
name|prepareLoadedProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|Properties
name|answer
init|=
operator|new
name|OrderedProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|String
name|s
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
comment|// trim any trailing spaces which can be a problem when loading from
comment|// a properties file, note that java.util.Properties does already this
comment|// for any potential leading spaces so there's nothing to do there
name|value
operator|=
name|trimTrailingWhitespaces
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|trimTrailingWhitespaces (String s)
specifier|private
specifier|static
name|String
name|trimTrailingWhitespaces
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|endIndex
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
init|;
name|index
operator|>=
literal|0
condition|;
name|index
operator|--
control|)
block|{
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
operator|==
literal|' '
condition|)
block|{
name|endIndex
operator|=
name|index
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|String
name|answer
init|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|endIndex
argument_list|)
decl_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

