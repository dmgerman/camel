begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.aggregate
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|builder
operator|.
name|ExpressionBuilder
import|;
end_import

begin_comment
comment|/**  * Aggregate result of pick expression into a single combined Exchange holding all the  * aggregated bodies in a {@link String} as the message body.  *  * This aggregation strategy can used in combination with {@link org.apache.camel.processor.Splitter} to batch messages  * @since 3.0.0  */
end_comment

begin_class
DECL|class|StringAggregationStrategy
specifier|public
class|class
name|StringAggregationStrategy
implements|implements
name|AggregationStrategy
block|{
DECL|field|delimiter
specifier|private
name|String
name|delimiter
init|=
literal|""
decl_stmt|;
DECL|field|pickExpression
specifier|private
name|Expression
name|pickExpression
init|=
name|ExpressionBuilder
operator|.
name|bodyExpression
argument_list|()
decl_stmt|;
comment|/**      * Set delimiter used for joining aggregated String      * @param delimiter The delimiter to join with. Default empty String      * @return      */
DECL|method|delimiter (String delimiter)
specifier|public
name|StringAggregationStrategy
name|delimiter
parameter_list|(
name|String
name|delimiter
parameter_list|)
block|{
name|this
operator|.
name|delimiter
operator|=
name|delimiter
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set an expression to extract the element to be aggregated from the incoming {@link Exchange}.      *<p/>      * By default, it picks the full IN message body of the incoming exchange.      * @param expression The picking expression.      * @return This instance.      */
DECL|method|pick (Expression expression)
specifier|public
name|StringAggregationStrategy
name|pick
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|pickExpression
operator|=
name|expression
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|aggregate (Exchange oldExchange, Exchange newExchange)
specifier|public
name|Exchange
name|aggregate
parameter_list|(
name|Exchange
name|oldExchange
parameter_list|,
name|Exchange
name|newExchange
parameter_list|)
block|{
name|StringBuffer
name|result
decl_stmt|;
comment|// Aggregate in StringBuffer instead of StringBuilder, to make it thread safe
name|StringBuilder
name|value
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldExchange
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|getStringBuffer
argument_list|(
name|newExchange
argument_list|)
expr_stmt|;
comment|// do not prepend delimiter for first invocation
block|}
else|else
block|{
name|result
operator|=
name|getStringBuffer
argument_list|(
name|oldExchange
argument_list|)
expr_stmt|;
name|value
operator|.
name|append
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newExchange
operator|!=
literal|null
condition|)
block|{
name|String
name|pick
init|=
name|pickExpression
operator|.
name|evaluate
argument_list|(
name|newExchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pick
operator|!=
literal|null
condition|)
block|{
name|value
operator|.
name|append
argument_list|(
name|pick
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|oldExchange
operator|!=
literal|null
condition|?
name|oldExchange
else|:
name|newExchange
return|;
block|}
annotation|@
name|Override
DECL|method|onCompletion (Exchange exchange)
specifier|public
name|void
name|onCompletion
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|stringBuffer
init|=
operator|(
name|StringBuffer
operator|)
name|exchange
operator|.
name|removeProperty
argument_list|(
name|Exchange
operator|.
name|GROUPED_EXCHANGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|stringBuffer
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|stringBuffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getStringBuffer (Exchange exchange)
specifier|private
specifier|static
name|StringBuffer
name|getStringBuffer
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|StringBuffer
name|stringBuffer
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|GROUPED_EXCHANGE
argument_list|,
name|StringBuffer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|stringBuffer
operator|==
literal|null
condition|)
block|{
name|stringBuffer
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|GROUPED_EXCHANGE
argument_list|,
name|stringBuffer
argument_list|)
expr_stmt|;
block|}
return|return
name|stringBuffer
return|;
block|}
block|}
end_class

end_unit

