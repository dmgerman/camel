begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|PatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default {@link AggregationStrategy} used by the {@link ClaimCheckProcessor} EIP.  *<p/>  * This strategy supports the following include rules syntax:  *<ul>  *<li>body</li> - to aggregate the message body  *<li>headers</li> - to aggregate all the message headers  *<li>header:pattern</li> - to aggregate all the message headers that matches the pattern.  *     The pattern syntax is documented by: {@link PatternHelper#matchPattern(String, String)}.  *</ul>  * You can specify multiple rules separated by comma. For example to include the message body and all headers starting with foo  *<tt>body,header:foo*</tt>.  * If the include rule is specified as empty or as wildcard then everything is merged.  * If you have configured both include and exclude then exclude take precedence over include.  */
end_comment

begin_class
DECL|class|ClaimCheckAggregationStrategy
specifier|public
class|class
name|ClaimCheckAggregationStrategy
implements|implements
name|AggregationStrategy
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClaimCheckAggregationStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|filter
specifier|private
name|String
name|filter
decl_stmt|;
DECL|method|ClaimCheckAggregationStrategy ()
specifier|public
name|ClaimCheckAggregationStrategy
parameter_list|()
block|{     }
DECL|method|getFilter ()
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|filter
return|;
block|}
DECL|method|setFilter (String filter)
specifier|public
name|void
name|setFilter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|aggregate (Exchange oldExchange, Exchange newExchange)
specifier|public
name|Exchange
name|aggregate
parameter_list|(
name|Exchange
name|oldExchange
parameter_list|,
name|Exchange
name|newExchange
parameter_list|)
block|{
if|if
condition|(
name|newExchange
operator|==
literal|null
condition|)
block|{
return|return
name|oldExchange
return|;
block|}
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|filter
argument_list|)
operator|||
literal|"*"
operator|.
name|equals
argument_list|(
name|filter
argument_list|)
condition|)
block|{
comment|// grab everything
name|oldExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|setBody
argument_list|(
name|newExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Including: body"
argument_list|)
expr_stmt|;
if|if
condition|(
name|newExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|hasHeaders
argument_list|()
condition|)
block|{
name|oldExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|putAll
argument_list|(
name|newExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Including: headers"
argument_list|)
expr_stmt|;
block|}
return|return
name|oldExchange
return|;
block|}
comment|// body is by default often included
if|if
condition|(
name|isBodyEnabled
argument_list|()
condition|)
block|{
name|oldExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|setBody
argument_list|(
name|newExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Including: body"
argument_list|)
expr_stmt|;
block|}
comment|// headers is by default often included
if|if
condition|(
name|isHeadersEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|newExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|hasHeaders
argument_list|()
condition|)
block|{
name|oldExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|putAll
argument_list|(
name|newExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Including: headers"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// filter specific header if they are somehow enabled by the filter
if|if
condition|(
name|hasHeaderPatterns
argument_list|()
condition|)
block|{
name|boolean
name|excludeOnly
init|=
name|isExcludeOnlyHeaderPatterns
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|header
range|:
name|newExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|header
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasHeaderPattern
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|boolean
name|include
init|=
name|isIncludedHeader
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|boolean
name|exclude
init|=
name|isExcludedHeader
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|include
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Including: header:{}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|oldExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exclude
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Excluding: header:{}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Skipping: header:{}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|excludeOnly
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Including: header:{}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|oldExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// filter body and all headers
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|filter
argument_list|)
condition|)
block|{
name|Iterable
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterable
argument_list|(
name|filter
argument_list|,
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|k
range|:
name|it
control|)
block|{
name|String
name|part
init|=
name|k
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
literal|"body"
operator|.
name|equals
argument_list|(
name|part
argument_list|)
operator|||
literal|"+body"
operator|.
name|equals
argument_list|(
name|part
argument_list|)
operator|)
operator|&&
operator|!
literal|"-body"
operator|.
name|equals
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|oldExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|setBody
argument_list|(
name|newExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Including: body"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
literal|"headers"
operator|.
name|equals
argument_list|(
name|part
argument_list|)
operator|||
literal|"+headers"
operator|.
name|equals
argument_list|(
name|part
argument_list|)
operator|)
operator|&&
operator|!
literal|"-headers"
operator|.
name|equals
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|oldExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|putAll
argument_list|(
name|newExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Including: headers"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// filter with remove (--) take precedence at the end
name|Iterable
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterable
argument_list|(
name|filter
argument_list|,
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|k
range|:
name|it
control|)
block|{
name|String
name|part
init|=
name|k
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"--body"
operator|.
name|equals
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|oldExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|setBody
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"--headers"
operator|.
name|equals
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|oldExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|.
name|startsWith
argument_list|(
literal|"--header:"
argument_list|)
condition|)
block|{
comment|// pattern matching for headers, eg header:foo, header:foo*, header:(foo|bar)
name|String
name|after
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|part
argument_list|,
literal|"--header:"
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|?
argument_list|>
name|i
init|=
name|ObjectHelper
operator|.
name|createIterable
argument_list|(
name|after
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|toRemoveKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|i
control|)
block|{
name|String
name|pattern
init|=
name|o
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|header
range|:
name|oldExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|header
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|boolean
name|matched
init|=
name|PatternHelper
operator|.
name|matchPattern
argument_list|(
name|key
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|matched
condition|)
block|{
name|toRemoveKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|key
range|:
name|toRemoveKeys
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removing: header:{}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|oldExchange
operator|.
name|getMessage
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|oldExchange
return|;
block|}
DECL|method|hasHeaderPatterns ()
specifier|private
name|boolean
name|hasHeaderPatterns
parameter_list|()
block|{
name|String
index|[]
name|parts
init|=
name|filter
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|parts
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"header:"
argument_list|)
operator|||
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"+header:"
argument_list|)
operator|||
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"-header:"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isExcludeOnlyHeaderPatterns ()
specifier|private
name|boolean
name|isExcludeOnlyHeaderPatterns
parameter_list|()
block|{
name|String
index|[]
name|parts
init|=
name|filter
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|parts
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"header:"
argument_list|)
operator|||
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"+header:"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|hasHeaderPattern (String key)
specifier|private
name|boolean
name|hasHeaderPattern
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|filter
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|parts
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|header
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"header:"
argument_list|)
operator|||
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"+header:"
argument_list|)
condition|)
block|{
name|header
operator|=
name|StringHelper
operator|.
name|after
argument_list|(
name|pattern
argument_list|,
literal|"header:"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"-header:"
argument_list|)
condition|)
block|{
name|header
operator|=
name|StringHelper
operator|.
name|after
argument_list|(
name|pattern
argument_list|,
literal|"-header:"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|header
operator|!=
literal|null
operator|&&
name|PatternHelper
operator|.
name|matchPattern
argument_list|(
name|key
argument_list|,
name|header
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isIncludedHeader (String key)
specifier|private
name|boolean
name|isIncludedHeader
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|filter
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|parts
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"header:"
argument_list|)
operator|||
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"+header:"
argument_list|)
condition|)
block|{
name|pattern
operator|=
name|StringHelper
operator|.
name|after
argument_list|(
name|pattern
argument_list|,
literal|"header:"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|PatternHelper
operator|.
name|matchPattern
argument_list|(
name|key
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isExcludedHeader (String key)
specifier|private
name|boolean
name|isExcludedHeader
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|filter
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|parts
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"-header:"
argument_list|)
condition|)
block|{
name|pattern
operator|=
name|StringHelper
operator|.
name|after
argument_list|(
name|pattern
argument_list|,
literal|"-header:"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|PatternHelper
operator|.
name|matchPattern
argument_list|(
name|key
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isBodyEnabled ()
specifier|private
name|boolean
name|isBodyEnabled
parameter_list|()
block|{
comment|// body is always enabled unless excluded
name|String
index|[]
name|parts
init|=
name|filter
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|boolean
name|onlyExclude
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|parts
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
literal|"body"
operator|.
name|equals
argument_list|(
name|pattern
argument_list|)
operator|||
literal|"+body"
operator|.
name|equals
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
literal|"-body"
operator|.
name|equals
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|onlyExclude
operator|&=
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
comment|// body is enabled if we only have exclude patterns
return|return
name|onlyExclude
return|;
block|}
DECL|method|isHeadersEnabled ()
specifier|private
name|boolean
name|isHeadersEnabled
parameter_list|()
block|{
comment|// headers may be enabled unless excluded
name|String
index|[]
name|parts
init|=
name|filter
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|boolean
name|onlyExclude
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|parts
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// if there is individual header filters then we cannot rely on this
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"header:"
argument_list|)
operator|||
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"+header:"
argument_list|)
operator|||
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"-header:"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
literal|"headers"
operator|.
name|equals
argument_list|(
name|pattern
argument_list|)
operator|||
literal|"+headers"
operator|.
name|equals
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
literal|"-headers"
operator|.
name|equals
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|onlyExclude
operator|&=
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
comment|// headers is enabled if we only have exclude patterns
return|return
name|onlyExclude
return|;
block|}
block|}
end_class

end_unit

