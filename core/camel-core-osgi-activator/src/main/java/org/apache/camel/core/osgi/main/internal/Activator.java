begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.core.osgi.main.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|osgi
operator|.
name|main
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|osgi
operator|.
name|OsgiDefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTrackerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|Activator
specifier|public
class|class
name|Activator
implements|implements
name|BundleActivator
implements|,
name|ServiceTrackerCustomizer
argument_list|<
name|RouteBuilder
argument_list|,
name|RouteBuilder
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Activator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|camelContextRef
specifier|private
name|ServiceRegistration
argument_list|<
name|CamelContext
argument_list|>
name|camelContextRef
decl_stmt|;
DECL|field|camelContext
specifier|private
name|ModelCamelContext
name|camelContext
decl_stmt|;
DECL|field|bundleContext
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
DECL|field|routeServiceTracker
specifier|private
name|ServiceTracker
argument_list|<
name|RouteBuilder
argument_list|,
name|RouteBuilder
argument_list|>
name|routeServiceTracker
decl_stmt|;
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|start (BundleContext context)
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|bundleContext
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|camelContext
operator|=
operator|new
name|OsgiDefaultCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|routeServiceTracker
operator|=
operator|new
name|ServiceTracker
argument_list|<
name|RouteBuilder
argument_list|,
name|RouteBuilder
argument_list|>
argument_list|(
name|context
argument_list|,
name|RouteBuilder
operator|.
name|class
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|start
argument_list|()
expr_stmt|;
name|camelContextRef
operator|=
name|context
operator|.
name|registerService
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ServiceReference
argument_list|<
name|RouteBuilder
argument_list|>
index|[]
name|existingRouteBuildersReferences
init|=
operator|(
name|ServiceReference
argument_list|<
name|RouteBuilder
argument_list|>
index|[]
operator|)
name|context
operator|.
name|getAllServiceReferences
argument_list|(
name|RouteBuilder
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingRouteBuildersReferences
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServiceReference
argument_list|<
name|RouteBuilder
argument_list|>
name|currentRouteBuilderReference
range|:
name|existingRouteBuildersReferences
control|)
block|{
name|addingService
argument_list|(
name|currentRouteBuilderReference
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|routeServiceTracker
operator|.
name|open
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Camel Core OSGi Activator RouteBuilder ServiceTracker Tracker Open"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addingService (ServiceReference<RouteBuilder> reference)
specifier|public
name|RouteBuilder
name|addingService
parameter_list|(
name|ServiceReference
argument_list|<
name|RouteBuilder
argument_list|>
name|reference
parameter_list|)
block|{
name|RouteBuilder
name|builder
init|=
name|this
operator|.
name|bundleContext
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
try|try
block|{
comment|// need to synchronize here since adding routes is not synchronized
synchronized|synchronized
init|(
name|camelContext
init|)
block|{
name|this
operator|.
name|camelContext
operator|.
name|addRoutes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Camel Routes from RouteBuilder Class {} Added to Camel Core OSGi Activator Context"
argument_list|,
name|builder
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error Adding Camel Route Builder"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|stop (BundleContext context)
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|routeServiceTracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|camelContext
operator|.
name|stop
argument_list|()
expr_stmt|;
name|camelContext
operator|.
name|removeRouteDefinitions
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|RouteDefinition
argument_list|>
argument_list|(
name|this
operator|.
name|camelContext
operator|.
name|getRouteDefinitions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|ungetService
argument_list|(
name|camelContextRef
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|modifiedService (ServiceReference<RouteBuilder> reference, RouteBuilder service)
specifier|public
name|void
name|modifiedService
parameter_list|(
name|ServiceReference
argument_list|<
name|RouteBuilder
argument_list|>
name|reference
parameter_list|,
name|RouteBuilder
name|service
parameter_list|)
block|{
name|removedService
argument_list|(
name|reference
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|addingService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removedService (ServiceReference<RouteBuilder> reference, RouteBuilder service)
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
argument_list|<
name|RouteBuilder
argument_list|>
name|reference
parameter_list|,
name|RouteBuilder
name|service
parameter_list|)
block|{
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|routesToBeRemoved
init|=
name|service
operator|.
name|getRouteCollection
argument_list|()
operator|.
name|getRoutes
argument_list|()
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|camelContext
init|)
block|{
name|camelContext
operator|.
name|removeRouteDefinitions
argument_list|(
name|routesToBeRemoved
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Camel Routes from RouteBuilder Class {} Removed from Camel Core OSGi Activator Context"
argument_list|,
name|service
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error Removing Camel Route Builder"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

