begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management.mbean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedBrowsableEndpointMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|BrowsableEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|MessageHelper
import|;
end_import

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed BrowsableEndpoint"
argument_list|)
DECL|class|ManagedBrowsableEndpoint
specifier|public
class|class
name|ManagedBrowsableEndpoint
extends|extends
name|ManagedEndpoint
implements|implements
name|ManagedBrowsableEndpointMBean
block|{
DECL|method|ManagedBrowsableEndpoint (BrowsableEndpoint endpoint)
specifier|public
name|ManagedBrowsableEndpoint
parameter_list|(
name|BrowsableEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|BrowsableEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|BrowsableEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getInstance ()
specifier|public
name|BrowsableEndpoint
name|getInstance
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|queueSize ()
specifier|public
name|long
name|queueSize
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getExchanges
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|browseExchange (Integer index)
specifier|public
name|String
name|browseExchange
parameter_list|(
name|Integer
name|index
parameter_list|)
block|{
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|getEndpoint
argument_list|()
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|>=
name|exchanges
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Exchange
name|exchange
init|=
name|exchanges
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|exchange
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// must use java type with JMX such as java.lang.String
return|return
name|exchange
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|browseMessageBody (Integer index)
specifier|public
name|String
name|browseMessageBody
parameter_list|(
name|Integer
name|index
parameter_list|)
block|{
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|getEndpoint
argument_list|()
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|>=
name|exchanges
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Exchange
name|exchange
init|=
name|exchanges
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|exchange
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// must use java type with JMX such as java.lang.String
name|String
name|body
init|=
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|body
return|;
block|}
annotation|@
name|Override
DECL|method|browseMessageAsXml (Integer index, Boolean includeBody)
specifier|public
name|String
name|browseMessageAsXml
parameter_list|(
name|Integer
name|index
parameter_list|,
name|Boolean
name|includeBody
parameter_list|)
block|{
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|getEndpoint
argument_list|()
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|>=
name|exchanges
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Exchange
name|exchange
init|=
name|exchanges
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|exchange
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Message
name|msg
init|=
name|exchange
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|String
name|xml
init|=
name|MessageHelper
operator|.
name|dumpAsXml
argument_list|(
name|msg
argument_list|,
name|includeBody
argument_list|)
decl_stmt|;
return|return
name|xml
return|;
block|}
annotation|@
name|Override
DECL|method|browseAllMessagesAsXml (Boolean includeBody)
specifier|public
name|String
name|browseAllMessagesAsXml
parameter_list|(
name|Boolean
name|includeBody
parameter_list|)
block|{
return|return
name|browseRangeMessagesAsXml
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|includeBody
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|browseRangeMessagesAsXml (Integer fromIndex, Integer toIndex, Boolean includeBody)
specifier|public
name|String
name|browseRangeMessagesAsXml
parameter_list|(
name|Integer
name|fromIndex
parameter_list|,
name|Integer
name|toIndex
parameter_list|,
name|Boolean
name|includeBody
parameter_list|)
block|{
if|if
condition|(
name|fromIndex
operator|==
literal|null
condition|)
block|{
name|fromIndex
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|toIndex
operator|==
literal|null
condition|)
block|{
name|toIndex
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|fromIndex
operator|>
name|toIndex
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"From index cannot be larger than to index, was: "
operator|+
name|fromIndex
operator|+
literal|"> "
operator|+
name|toIndex
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|getEndpoint
argument_list|()
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchanges
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<messages>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|fromIndex
init|;
name|i
operator|<
name|exchanges
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<=
name|toIndex
condition|;
name|i
operator|++
control|)
block|{
name|Exchange
name|exchange
init|=
name|exchanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Message
name|msg
init|=
name|exchange
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|String
name|xml
init|=
name|MessageHelper
operator|.
name|dumpAsXml
argument_list|(
name|msg
argument_list|,
name|includeBody
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|xml
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n</messages>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

