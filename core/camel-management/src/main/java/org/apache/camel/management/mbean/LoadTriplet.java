begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.management.mbean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|mbean
package|;
end_package

begin_comment
comment|/**  * Holds the loads averaged over 1min, 5min, and 15min.  */
end_comment

begin_class
DECL|class|LoadTriplet
specifier|public
specifier|final
class|class
name|LoadTriplet
block|{
comment|// Exponents for EWMA: exp(-INTERVAL / WINDOW) (in seconds)
DECL|field|EXP_1
specifier|private
specifier|static
specifier|final
name|double
name|EXP_1
init|=
name|Math
operator|.
name|exp
argument_list|(
operator|-
literal|1
operator|/
operator|(
literal|60.0
operator|*
literal|1.0
operator|)
argument_list|)
decl_stmt|;
DECL|field|EXP_5
specifier|private
specifier|static
specifier|final
name|double
name|EXP_5
init|=
name|Math
operator|.
name|exp
argument_list|(
operator|-
literal|1
operator|/
operator|(
literal|60.0
operator|*
literal|5.0
operator|)
argument_list|)
decl_stmt|;
DECL|field|EXP_15
specifier|private
specifier|static
specifier|final
name|double
name|EXP_15
init|=
name|Math
operator|.
name|exp
argument_list|(
operator|-
literal|1
operator|/
operator|(
literal|60.0
operator|*
literal|15.0
operator|)
argument_list|)
decl_stmt|;
DECL|field|load01
specifier|private
name|double
name|load01
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
DECL|field|load05
specifier|private
name|double
name|load05
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
DECL|field|load15
specifier|private
name|double
name|load15
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
comment|/**      * Update the load statistics      *      * @param currentReading the current reading      */
DECL|method|update (int currentReading)
specifier|public
name|void
name|update
parameter_list|(
name|int
name|currentReading
parameter_list|)
block|{
name|load01
operator|=
name|updateLoad
argument_list|(
name|currentReading
argument_list|,
name|EXP_1
argument_list|,
name|load01
argument_list|)
expr_stmt|;
name|load05
operator|=
name|updateLoad
argument_list|(
name|currentReading
argument_list|,
name|EXP_5
argument_list|,
name|load05
argument_list|)
expr_stmt|;
name|load15
operator|=
name|updateLoad
argument_list|(
name|currentReading
argument_list|,
name|EXP_15
argument_list|,
name|load15
argument_list|)
expr_stmt|;
block|}
DECL|method|updateLoad (int reading, double exp, double recentLoad)
specifier|private
name|double
name|updateLoad
parameter_list|(
name|int
name|reading
parameter_list|,
name|double
name|exp
parameter_list|,
name|double
name|recentLoad
parameter_list|)
block|{
return|return
name|Double
operator|.
name|isNaN
argument_list|(
name|recentLoad
argument_list|)
condition|?
name|reading
else|:
name|reading
operator|+
name|exp
operator|*
operator|(
name|recentLoad
operator|-
name|reading
operator|)
return|;
block|}
DECL|method|getLoad1 ()
specifier|public
name|double
name|getLoad1
parameter_list|()
block|{
return|return
name|load01
return|;
block|}
DECL|method|getLoad5 ()
specifier|public
name|double
name|getLoad5
parameter_list|()
block|{
return|return
name|load05
return|;
block|}
DECL|method|getLoad15 ()
specifier|public
name|double
name|getLoad15
parameter_list|()
block|{
return|return
name|load15
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%.2f, %.2f, %.2f"
argument_list|,
name|getLoad1
argument_list|()
argument_list|,
name|getLoad5
argument_list|()
argument_list|,
name|getLoad15
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

