begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.core.osgi.main.it
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|osgi
operator|.
name|main
operator|.
name|it
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|junit
operator|.
name|PaxExam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|spi
operator|.
name|reactors
operator|.
name|ExamReactorStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|spi
operator|.
name|reactors
operator|.
name|PerClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|tinybundles
operator|.
name|core
operator|.
name|TinyBundles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|CoreOptions
operator|.
name|junitBundles
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|CoreOptions
operator|.
name|streamBundle
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|CoreOptions
operator|.
name|options
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|PaxExam
operator|.
name|class
argument_list|)
annotation|@
name|ExamReactorStrategy
argument_list|(
name|PerClass
operator|.
name|class
argument_list|)
DECL|class|BundleIT
specifier|public
class|class
name|BundleIT
block|{
annotation|@
name|Inject
DECL|field|bc
specifier|private
name|BundleContext
name|bc
decl_stmt|;
annotation|@
name|Configuration
DECL|method|configuration ()
specifier|public
name|Option
index|[]
name|configuration
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|ClassNotFoundException
block|{
return|return
name|options
argument_list|(
name|PaxExamOptions
operator|.
name|KARAF
operator|.
name|option
argument_list|()
argument_list|,
name|PaxExamOptions
operator|.
name|CAMEL_CORE_OSGI
operator|.
name|option
argument_list|()
argument_list|,
name|streamBundle
argument_list|(
name|TinyBundles
operator|.
name|bundle
argument_list|()
operator|.
name|read
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"target/test-bundles"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"camel-main-osgi.jar"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|,
name|junitBundles
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testBundleLoaded ()
specifier|public
name|void
name|testBundleLoaded
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|hasCore
init|=
literal|false
decl_stmt|;
name|boolean
name|hasOsgi
init|=
literal|false
decl_stmt|;
name|boolean
name|hasCamelMainOsgi
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Bundle
name|b
range|:
name|bc
operator|.
name|getBundles
argument_list|()
control|)
block|{
if|if
condition|(
literal|"org.apache.camel.camel-core"
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
condition|)
block|{
name|hasCore
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Camel Core not activated"
argument_list|,
name|Bundle
operator|.
name|ACTIVE
argument_list|,
name|b
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"org.apache.camel.camel-core-osgi"
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
condition|)
block|{
name|hasOsgi
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Camel Core OSGi not activated"
argument_list|,
name|Bundle
operator|.
name|ACTIVE
argument_list|,
name|b
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"org.apache.camel.camel-main-osgi"
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
condition|)
block|{
name|hasCamelMainOsgi
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Camel Main OSGi not activated"
argument_list|,
name|Bundle
operator|.
name|ACTIVE
argument_list|,
name|b
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Camel Core bundle not found"
argument_list|,
name|hasCore
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Camel Core OSGi bundle not found"
argument_list|,
name|hasOsgi
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Camel Main OSGi bundle not found"
argument_list|,
name|hasCamelMainOsgi
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRouteLoadAndRemoved ()
specifier|public
name|void
name|testRouteLoadAndRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ServiceRegistration
argument_list|<
name|RouteBuilder
argument_list|>
name|testServiceRegistration
init|=
name|bc
operator|.
name|registerService
argument_list|(
name|RouteBuilder
operator|.
name|class
argument_list|,
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"timer:test?fixedRate=true&period=300"
argument_list|)
operator|.
name|process
argument_list|(
name|exchange
lambda|->
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|CamelContext
name|camelContext
init|=
name|bc
operator|.
name|getService
argument_list|(
name|bc
operator|.
name|getServiceReference
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be one route in the context."
argument_list|,
literal|1
argument_list|,
name|camelContext
operator|.
name|getRoutes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|testServiceRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"There should be no routes in the context."
argument_list|,
literal|0
argument_list|,
name|camelContext
operator|.
name|getRoutes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

