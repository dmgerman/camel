begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|OgnlHelperTest
specifier|public
class|class
name|OgnlHelperTest
extends|extends
name|Assert
block|{
comment|/**      * Tests correct splitting in case the OGNL expression contains method parameters with brackets.      */
annotation|@
name|Test
DECL|method|splitOgnlWithRegexInMethod ()
specifier|public
name|void
name|splitOgnlWithRegexInMethod
parameter_list|()
block|{
name|String
name|ognl
init|=
literal|"header.cookie.replaceFirst(\".*;?iwanttoknow=([^;]+);?.*\", \"$1\")"
decl_stmt|;
name|assertFalse
argument_list|(
name|OgnlHelper
operator|.
name|isInvalidValidOgnlExpression
argument_list|(
name|ognl
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|OgnlHelper
operator|.
name|isValidOgnlExpression
argument_list|(
name|ognl
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|OgnlHelper
operator|.
name|splitOgnl
argument_list|(
name|ognl
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|strings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"header"
argument_list|,
name|strings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|".cookie"
argument_list|,
name|strings
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|".replaceFirst(\".*;?iwanttoknow=([^;]+);?.*\", \"$1\")"
argument_list|,
name|strings
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

