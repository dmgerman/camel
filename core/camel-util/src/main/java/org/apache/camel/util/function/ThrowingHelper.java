begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util.function
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|function
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|ThrowingHelper
specifier|public
specifier|final
class|class
name|ThrowingHelper
block|{
DECL|method|ThrowingHelper ()
specifier|private
name|ThrowingHelper
parameter_list|()
block|{     }
DECL|method|wrapAsSupplier (ThrowingSupplier<V, T> supplier)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|,
name|T
extends|extends
name|Throwable
parameter_list|>
name|Supplier
argument_list|<
name|V
argument_list|>
name|wrapAsSupplier
parameter_list|(
name|ThrowingSupplier
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
name|supplier
parameter_list|)
block|{
return|return
parameter_list|()
lambda|->
block|{
try|try
block|{
return|return
name|supplier
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
return|;
block|}
DECL|method|wrapAsConsumer (ThrowingConsumer<I, T> consumer)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|T
extends|extends
name|Throwable
parameter_list|>
name|Consumer
argument_list|<
name|I
argument_list|>
name|wrapAsConsumer
parameter_list|(
name|ThrowingConsumer
argument_list|<
name|I
argument_list|,
name|T
argument_list|>
name|consumer
parameter_list|)
block|{
return|return
name|in
lambda|->
block|{
try|try
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
return|;
block|}
DECL|method|wrapAsBiConsumer (ThrowingBiConsumer<I1, I2, T> consumer)
specifier|public
specifier|static
parameter_list|<
name|I1
parameter_list|,
name|I2
parameter_list|,
name|T
extends|extends
name|Throwable
parameter_list|>
name|BiConsumer
argument_list|<
name|I1
argument_list|,
name|I2
argument_list|>
name|wrapAsBiConsumer
parameter_list|(
name|ThrowingBiConsumer
argument_list|<
name|I1
argument_list|,
name|I2
argument_list|,
name|T
argument_list|>
name|consumer
parameter_list|)
block|{
return|return
parameter_list|(
name|i1
parameter_list|,
name|i2
parameter_list|)
lambda|->
block|{
try|try
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|i1
argument_list|,
name|i2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
return|;
block|}
DECL|method|wrapAsFunction (ThrowingFunction<I, R, T> function)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|R
parameter_list|,
name|T
extends|extends
name|Throwable
parameter_list|>
name|Function
argument_list|<
name|I
argument_list|,
name|R
argument_list|>
name|wrapAsFunction
parameter_list|(
name|ThrowingFunction
argument_list|<
name|I
argument_list|,
name|R
argument_list|,
name|T
argument_list|>
name|function
parameter_list|)
block|{
return|return
name|in
lambda|->
block|{
try|try
block|{
return|return
name|function
operator|.
name|apply
argument_list|(
name|in
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
return|;
block|}
comment|/**      * Tests whether the value is<b>not</b><tt>null</tt>, an empty string, an empty collection or a map  and transform it using the given function.      *      * @param value  the value, if its a String it will be tested for text length as well      * @param function  the function to be executed against value if not empty      */
DECL|method|applyIfNotEmpty (I value, ThrowingFunction<I, R, T> function)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|R
parameter_list|,
name|T
extends|extends
name|Throwable
parameter_list|>
name|Optional
argument_list|<
name|R
argument_list|>
name|applyIfNotEmpty
parameter_list|(
name|I
name|value
parameter_list|,
name|ThrowingFunction
argument_list|<
name|I
argument_list|,
name|R
argument_list|,
name|T
argument_list|>
name|function
parameter_list|)
throws|throws
name|T
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|function
operator|.
name|apply
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/**      * Tests whether the value is<b>not</b><tt>null</tt>, an empty string, an empty collection or a map and transform it using the given function.      *      * @param value  the value, if its a String it will be tested for text length as well      * @param consumer  the function to be executed against value if not empty      * @param orElse  the supplier to use to retrieve a result if the given value is empty      */
DECL|method|applyIfNotEmpty (I value, ThrowingFunction<I, R, T> consumer, Supplier<R> orElse)
specifier|public
specifier|static
parameter_list|<
name|I
parameter_list|,
name|R
parameter_list|,
name|T
extends|extends
name|Throwable
parameter_list|>
name|R
name|applyIfNotEmpty
parameter_list|(
name|I
name|value
parameter_list|,
name|ThrowingFunction
argument_list|<
name|I
argument_list|,
name|R
argument_list|,
name|T
argument_list|>
name|consumer
parameter_list|,
name|Supplier
argument_list|<
name|R
argument_list|>
name|orElse
parameter_list|)
throws|throws
name|T
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|consumer
operator|.
name|apply
argument_list|(
name|value
argument_list|)
return|;
block|}
return|return
name|orElse
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

