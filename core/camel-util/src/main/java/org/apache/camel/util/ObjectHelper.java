begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|AnnotatedElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A number of useful helper methods for working with Objects  */
end_comment

begin_class
DECL|class|ObjectHelper
specifier|public
specifier|final
class|class
name|ObjectHelper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ObjectHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FLOAT_NAN
specifier|private
specifier|static
specifier|final
name|Float
name|FLOAT_NAN
init|=
name|Float
operator|.
name|NaN
decl_stmt|;
DECL|field|DOUBLE_NAN
specifier|private
specifier|static
specifier|final
name|Double
name|DOUBLE_NAN
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
comment|/**      * Utility classes should not have a public constructor.      */
DECL|method|ObjectHelper ()
specifier|private
name|ObjectHelper
parameter_list|()
block|{     }
comment|/**      * A helper method for comparing objects for equality while handling nulls      */
DECL|method|equal (Object a, Object b)
specifier|public
specifier|static
name|boolean
name|equal
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
return|return
name|equal
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * A helper method for comparing objects for equality while handling case insensitivity      */
DECL|method|equalIgnoreCase (Object a, Object b)
specifier|public
specifier|static
name|boolean
name|equalIgnoreCase
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
return|return
name|equal
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * A helper method for comparing objects for equality while handling nulls      */
DECL|method|equal (final Object a, final Object b, final boolean ignoreCase)
specifier|public
specifier|static
name|boolean
name|equal
parameter_list|(
specifier|final
name|Object
name|a
parameter_list|,
specifier|final
name|Object
name|b
parameter_list|,
specifier|final
name|boolean
name|ignoreCase
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
name|b
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|a
operator|==
literal|null
operator|||
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|ignoreCase
condition|)
block|{
if|if
condition|(
name|a
operator|instanceof
name|String
operator|&&
name|b
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
operator|(
name|String
operator|)
name|a
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|b
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|a
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
operator|&&
name|b
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|// uses array based equals
return|return
name|Objects
operator|.
name|deepEquals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
else|else
block|{
comment|// use regular equals
return|return
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
comment|/**      * A helper method for comparing byte arrays for equality while handling      * nulls      */
DECL|method|equalByteArray (byte[] a, byte[] b)
specifier|public
specifier|static
name|boolean
name|equalByteArray
parameter_list|(
name|byte
index|[]
name|a
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|/**      * Returns true if the given object is equal to any of the expected value      */
DECL|method|isEqualToAny (Object object, Object... values)
specifier|public
specifier|static
name|boolean
name|isEqualToAny
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
modifier|...
name|values
parameter_list|)
block|{
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|equal
argument_list|(
name|object
argument_list|,
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|toBoolean (Object value)
specifier|public
specifier|static
name|Boolean
name|toBoolean
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|value
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
comment|// we only want to accept true or false as accepted values
name|String
name|str
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|str
argument_list|)
operator|||
literal|"false"
operator|.
name|equalsIgnoreCase
argument_list|(
name|str
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
return|return
operator|(
name|Integer
operator|)
name|value
operator|>
literal|0
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Asserts whether the value is<b>not</b><tt>null</tt>      *      * @param value  the value to test      * @param name   the key that resolved the value      * @return the passed {@code value} as is      * @throws IllegalArgumentException is thrown if assertion fails      */
DECL|method|notNull (T value, String name)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|notNull
parameter_list|(
name|T
name|value
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|name
operator|+
literal|" must be specified"
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * Asserts whether the value is<b>not</b><tt>null</tt>      *      * @param value  the value to test      * @param on     additional description to indicate where this problem occurred (appended as toString())      * @param name   the key that resolved the value      * @return the passed {@code value} as is      * @throws IllegalArgumentException is thrown if assertion fails      */
DECL|method|notNull (T value, String name, Object on)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|notNull
parameter_list|(
name|T
name|value
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|on
parameter_list|)
block|{
if|if
condition|(
name|on
operator|==
literal|null
condition|)
block|{
name|notNull
argument_list|(
name|value
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|name
operator|+
literal|" must be specified on: "
operator|+
name|on
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * Tests whether the value is<tt>null</tt> or an empty string.      *      * @param value  the value, if its a String it will be tested for text length as well      * @return true if empty      */
DECL|method|isEmpty (Object value)
specifier|public
specifier|static
name|boolean
name|isEmpty
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
operator|!
name|isNotEmpty
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**      * Tests whether the value is<b>not</b><tt>null</tt>, an empty string or an empty collection/map.      *      * @param value  the value, if its a String it will be tested for text length as well      * @return true if<b>not</b> empty      */
DECL|method|isNotEmpty (Object value)
specifier|public
specifier|static
name|boolean
name|isNotEmpty
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|String
name|text
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
return|return
name|text
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Collection
condition|)
block|{
return|return
operator|!
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
operator|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Map
condition|)
block|{
return|return
operator|!
operator|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|value
operator|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Returns the first non null object<tt>null</tt>.      *      * @param values the values      * @return an Optional      */
DECL|method|firstNotNull (Object... values)
specifier|public
specifier|static
name|Optional
argument_list|<
name|Object
argument_list|>
name|firstNotNull
parameter_list|(
name|Object
modifier|...
name|values
parameter_list|)
block|{
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/**      * Tests whether the value is<tt>null</tt>, an empty string, an empty collection or a map      *      * @param value  the value, if its a String it will be tested for text length as well      * @param supplier  the supplier, the supplier to be used to get a value if value is null      */
DECL|method|supplyIfEmpty (T value, Supplier<T> supplier)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|supplyIfEmpty
parameter_list|(
name|T
name|value
parameter_list|,
name|Supplier
argument_list|<
name|T
argument_list|>
name|supplier
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|supplier
argument_list|,
literal|"Supplier"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isNotEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|value
return|;
block|}
return|return
name|supplier
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Tests whether the value is<b>not</b><tt>null</tt>, an empty string, an empty collection or a map      *      * @param value  the value, if its a String it will be tested for text length as well      * @param consumer  the consumer, the operation to be executed against value if not empty      */
DECL|method|ifNotEmpty (T value, Consumer<T> consumer)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|ifNotEmpty
parameter_list|(
name|T
name|value
parameter_list|,
name|Consumer
argument_list|<
name|T
argument_list|>
name|consumer
parameter_list|)
block|{
if|if
condition|(
name|isNotEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the predicate matching boolean on a {@link List} result set where      * if the first element is a boolean its value is used otherwise this method      * returns true if the collection is not empty      *      * @return<tt>true</tt> if the first element is a boolean and its value      *         is true or if the list is non empty      */
DECL|method|matches (List<?> list)
specifier|public
specifier|static
name|boolean
name|matches
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Object
name|value
init|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|value
return|;
block|}
else|else
block|{
comment|// lets assume non-empty results are true
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * A helper method to access a system property, catching any security exceptions      *      * @param name         the name of the system property required      * @param defaultValue the default value to use if the property is not      *                     available or a security exception prevents access      * @return the system property value or the default value if the property is      *         not available or security does not allow its access      */
DECL|method|getSystemProperty (String name, String defaultValue)
specifier|public
specifier|static
name|String
name|getSystemProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
try|try
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught security exception accessing system property: "
operator|+
name|name
operator|+
literal|". Will use default value: "
operator|+
name|defaultValue
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultValue
return|;
block|}
block|}
comment|/**      * A helper method to access a boolean system property, catching any      * security exceptions      *      * @param name         the name of the system property required      * @param defaultValue the default value to use if the property is not      *                     available or a security exception prevents access      * @return the boolean representation of the system property value or the      *         default value if the property is not available or security does      *         not allow its access      */
DECL|method|getSystemProperty (String name, Boolean defaultValue)
specifier|public
specifier|static
name|boolean
name|getSystemProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Boolean
name|defaultValue
parameter_list|)
block|{
name|String
name|result
init|=
name|getSystemProperty
argument_list|(
name|name
argument_list|,
name|defaultValue
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/**      * Returns the type name of the given type or null if the type variable is      * null      */
DECL|method|name (Class<?> type)
specifier|public
specifier|static
name|String
name|name
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|type
operator|!=
literal|null
condition|?
name|type
operator|.
name|getName
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * Returns the type name of the given value      */
DECL|method|className (Object value)
specifier|public
specifier|static
name|String
name|className
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|name
argument_list|(
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|getClass
argument_list|()
else|:
literal|null
argument_list|)
return|;
block|}
comment|/**      * Returns the canonical type name of the given value      */
DECL|method|classCanonicalName (Object value)
specifier|public
specifier|static
name|String
name|classCanonicalName
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Attempts to load the given class name using the thread context class      * loader or the class loader used to load this class      *      * @param name the name of the class to load      * @return the class or<tt>null</tt> if it could not be loaded      */
DECL|method|loadClass (String name)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|loadClass
argument_list|(
name|name
argument_list|,
name|ObjectHelper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Attempts to load the given class name using the thread context class      * loader or the given class loader      *      * @param name the name of the class to load      * @param loader the class loader to use after the thread context class loader      * @return the class or<tt>null</tt> if it could not be loaded      */
DECL|method|loadClass (String name, ClassLoader loader)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
return|return
name|loadClass
argument_list|(
name|name
argument_list|,
name|loader
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Attempts to load the given class name using the thread context class      * loader or the given class loader      *      * @param name the name of the class to load      * @param loader the class loader to use after the thread context class loader      * @param needToWarn when<tt>true</tt> logs a warning when a class with the given name could not be loaded      * @return the class or<tt>null</tt> if it could not be loaded      */
DECL|method|loadClass (String name, ClassLoader loader, boolean needToWarn)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|,
name|ClassLoader
name|loader
parameter_list|,
name|boolean
name|needToWarn
parameter_list|)
block|{
comment|// must clean the name so its pure java name, eg removing \n or whatever people can do in the Spring XML
name|name
operator|=
name|StringHelper
operator|.
name|normalizeClassName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Try simple type first
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|loadSimpleType
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
comment|// try context class loader
name|clazz
operator|=
name|doLoadClass
argument_list|(
name|name
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
comment|// then the provided loader
name|clazz
operator|=
name|doLoadClass
argument_list|(
name|name
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
comment|// and fallback to the loader the loaded the ObjectHelper class
name|clazz
operator|=
name|doLoadClass
argument_list|(
name|name
argument_list|,
name|ObjectHelper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|needToWarn
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot find class: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot find class: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|clazz
return|;
block|}
comment|/**      * Load a simple type      *      * @param name the name of the class to load      * @return the class or<tt>null</tt> if it could not be loaded      */
comment|//CHECKSTYLE:OFF
DECL|method|loadSimpleType (String name)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|loadSimpleType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// special for byte[] or Object[] as its common to use
if|if
condition|(
literal|"java.lang.byte[]"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"byte[]"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|byte
index|[]
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Byte[]"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Byte[]"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Byte
index|[]
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Object[]"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Object[]"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Object
index|[]
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.String[]"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"String[]"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|String
index|[]
operator|.
name|class
return|;
comment|// and these is common as well
block|}
elseif|else
if|if
condition|(
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"String"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|String
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Boolean"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Boolean"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"boolean"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|boolean
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Integer"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Integer"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Integer
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"int"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|int
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Long"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Long"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Long
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|long
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Short"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Short"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Short
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"short"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|short
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Byte"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Byte"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Byte
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"byte"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|byte
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Float"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Float"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Float
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"float"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|float
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Double"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Double"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Double
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"double"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|double
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Character"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"Character"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Character
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
literal|"char"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|char
operator|.
name|class
return|;
block|}
return|return
literal|null
return|;
block|}
comment|//CHECKSTYLE:ON
comment|/**      * Loads the given class with the provided classloader (may be null).      * Will ignore any class not found and return null.      *      * @param name    the name of the class to load      * @param loader  a provided loader (may be null)      * @return the class, or null if it could not be loaded      */
DECL|method|doLoadClass (String name, ClassLoader loader)
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|doLoadClass
parameter_list|(
name|String
name|name
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
if|if
condition|(
name|loader
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Loading class: {} using classloader: {}"
argument_list|,
name|name
argument_list|,
name|loader
argument_list|)
expr_stmt|;
return|return
name|loader
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cannot load class: "
operator|+
name|name
operator|+
literal|" using classloader: "
operator|+
name|loader
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Attempts to load the given resource as a stream using the thread context      * class loader or the class loader used to load this class      *      * @param name the name of the resource to load      * @return the stream or null if it could not be loaded      */
DECL|method|loadResourceAsStream (String name)
specifier|public
specifier|static
name|InputStream
name|loadResourceAsStream
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|loadResourceAsStream
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Attempts to load the given resource as a stream using       * first the given class loader, then the thread context      * class loader and finally the class loader used to load this class      *      * @param name the name of the resource to load      * @param loader optional classloader to attempt first      * @return the stream or null if it could not be loaded      */
DECL|method|loadResourceAsStream (String name, ClassLoader loader)
specifier|public
specifier|static
name|InputStream
name|loadResourceAsStream
parameter_list|(
name|String
name|name
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
try|try
block|{
name|URL
name|res
init|=
name|loadResourceAsURL
argument_list|(
name|name
argument_list|,
name|loader
argument_list|)
decl_stmt|;
return|return
name|res
operator|!=
literal|null
condition|?
name|res
operator|.
name|openStream
argument_list|()
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Attempts to load the given resource as a stream using the thread context      * class loader or the class loader used to load this class      *      * @param name the name of the resource to load      * @return the stream or null if it could not be loaded      */
DECL|method|loadResourceAsURL (String name)
specifier|public
specifier|static
name|URL
name|loadResourceAsURL
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|loadResourceAsURL
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Attempts to load the given resource as a stream using the thread context      * class loader or the class loader used to load this class      *      * @param name the name of the resource to load      * @param loader optional classloader to attempt first      * @return the stream or null if it could not be loaded      */
DECL|method|loadResourceAsURL (String name, ClassLoader loader)
specifier|public
specifier|static
name|URL
name|loadResourceAsURL
parameter_list|(
name|String
name|name
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
name|URL
name|url
init|=
literal|null
decl_stmt|;
name|String
name|resolvedName
init|=
name|resolveUriPath
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// #1 First, try the given class loader
if|if
condition|(
name|loader
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|loader
operator|.
name|getResource
argument_list|(
name|resolvedName
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
return|return
name|url
return|;
block|}
block|}
comment|// #2 Next, is the TCCL
name|ClassLoader
name|tccl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|tccl
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|tccl
operator|.
name|getResource
argument_list|(
name|resolvedName
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
return|return
name|url
return|;
block|}
comment|// #3 The TCCL may be able to see camel-core, but not META-INF resources
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|tccl
operator|.
name|loadClass
argument_list|(
literal|"org.apache.camel.impl.DefaultCamelContext"
argument_list|)
decl_stmt|;
name|url
operator|=
name|clazz
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|resolvedName
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
return|return
name|url
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|// #4 Last, for the unlikely case that stuff can be loaded from camel-util
name|url
operator|=
name|ObjectHelper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|resolvedName
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
return|return
name|url
return|;
block|}
name|url
operator|=
name|ObjectHelper
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|resolvedName
argument_list|)
expr_stmt|;
return|return
name|url
return|;
block|}
comment|/**      * Attempts to load the given resources from the given package name using the thread context      * class loader or the class loader used to load this class      *      * @param uri the name of the package to load its resources      * @return the URLs for the resources or null if it could not be loaded      */
DECL|method|loadResourcesAsURL (String uri)
specifier|public
specifier|static
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|loadResourcesAsURL
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|loadResourcesAsURL
argument_list|(
name|uri
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Attempts to load the given resources from the given package name using the thread context      * class loader or the class loader used to load this class      *      * @param uri the name of the package to load its resources      * @param loader optional classloader to attempt first      * @return the URLs for the resources or null if it could not be loaded      */
DECL|method|loadResourcesAsURL (String uri, ClassLoader loader)
specifier|public
specifier|static
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|loadResourcesAsURL
parameter_list|(
name|String
name|uri
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|res
init|=
literal|null
decl_stmt|;
comment|// #1 First, try the given class loader
if|if
condition|(
name|loader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|res
operator|=
name|loader
operator|.
name|getResources
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
return|return
name|res
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|// #2 Next, is the TCCL
name|ClassLoader
name|tccl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|tccl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|res
operator|=
name|tccl
operator|.
name|getResources
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
return|return
name|res
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
comment|// #3 The TCCL may be able to see camel-core, but not META-INF resources
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|tccl
operator|.
name|loadClass
argument_list|(
literal|"org.apache.camel.impl.DefaultCamelContext"
argument_list|)
decl_stmt|;
name|res
operator|=
name|clazz
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResources
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
return|return
name|res
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
decl||
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|// #4 Last, for the unlikely case that stuff can be loaded from camel-util
try|try
block|{
name|res
operator|=
name|ObjectHelper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResources
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
name|res
return|;
block|}
comment|/**      * Helper operation used to remove relative path notation from       * resources.  Most critical for resources on the Classpath      * as resource loaders will not resolve the relative paths correctly.      *      * @param name the name of the resource to load      * @return the modified or unmodified string if there were no changes      */
DECL|method|resolveUriPath (String name)
specifier|private
specifier|static
name|String
name|resolveUriPath
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// compact the path and use / as separator as that's used for loading resources on the classpath
return|return
name|FileUtil
operator|.
name|compactPath
argument_list|(
name|name
argument_list|,
literal|'/'
argument_list|)
return|;
block|}
comment|/**      * Tests whether the target method overrides the source method.      *<p/>      * Tests whether they have the same name, return type, and parameter list.      *      * @param source  the source method      * @param target  the target method      * @return<tt>true</tt> if it override,<tt>false</tt> otherwise      */
DECL|method|isOverridingMethod (Method source, Method target)
specifier|public
specifier|static
name|boolean
name|isOverridingMethod
parameter_list|(
name|Method
name|source
parameter_list|,
name|Method
name|target
parameter_list|)
block|{
return|return
name|isOverridingMethod
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Tests whether the target method overrides the source method.      *<p/>      * Tests whether they have the same name, return type, and parameter list.      *      * @param source  the source method      * @param target  the target method      * @param exact<tt>true</tt> if the override must be exact same types,<tt>false</tt> if the types should be assignable      * @return<tt>true</tt> if it override,<tt>false</tt> otherwise      */
DECL|method|isOverridingMethod (Method source, Method target, boolean exact)
specifier|public
specifier|static
name|boolean
name|isOverridingMethod
parameter_list|(
name|Method
name|source
parameter_list|,
name|Method
name|target
parameter_list|,
name|boolean
name|exact
parameter_list|)
block|{
return|return
name|isOverridingMethod
argument_list|(
name|target
operator|.
name|getDeclaringClass
argument_list|()
argument_list|,
name|source
argument_list|,
name|target
argument_list|,
name|exact
argument_list|)
return|;
block|}
comment|/**      * Tests whether the target method overrides the source method from the      * inheriting class.      *<p/>      * Tests whether they have the same name, return type, and parameter list.      *      * @param inheritingClass the class inheriting the target method overriding      *            the source method      * @param source the source method      * @param target the target method      * @param exact<tt>true</tt> if the override must be exact same types,      *<tt>false</tt> if the types should be assignable      * @return<tt>true</tt> if it override,<tt>false</tt> otherwise      */
DECL|method|isOverridingMethod (Class<?> inheritingClass, Method source, Method target, boolean exact)
specifier|public
specifier|static
name|boolean
name|isOverridingMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|inheritingClass
parameter_list|,
name|Method
name|source
parameter_list|,
name|Method
name|target
parameter_list|,
name|boolean
name|exact
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|target
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|source
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|source
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|inheritingClass
argument_list|)
operator|||
operator|!
name|target
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|inheritingClass
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|source
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|exact
condition|)
block|{
if|if
condition|(
operator|!
name|source
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|source
operator|.
name|getReturnType
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|target
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|b1
init|=
name|source
operator|.
name|isBridge
argument_list|()
decl_stmt|;
name|boolean
name|b2
init|=
name|target
operator|.
name|isBridge
argument_list|()
decl_stmt|;
comment|// must not be bridge methods
if|if
condition|(
operator|!
name|b1
operator|&&
operator|!
name|b2
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
comment|// must have same number of parameter types
if|if
condition|(
name|source
operator|.
name|getParameterCount
argument_list|()
operator|!=
name|target
operator|.
name|getParameterCount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|sourceTypes
init|=
name|source
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|targetTypes
init|=
name|target
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
comment|// test if parameter types is the same as well
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|source
operator|.
name|getParameterCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|exact
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|sourceTypes
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|targetTypes
index|[
name|i
index|]
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|sourceTypes
index|[
name|i
index|]
operator|.
name|isAssignableFrom
argument_list|(
name|targetTypes
index|[
name|i
index|]
argument_list|)
operator|)
condition|)
block|{
name|boolean
name|b1
init|=
name|source
operator|.
name|isBridge
argument_list|()
decl_stmt|;
name|boolean
name|b2
init|=
name|target
operator|.
name|isBridge
argument_list|()
decl_stmt|;
comment|// must not be bridge methods
if|if
condition|(
operator|!
name|b1
operator|&&
operator|!
name|b2
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
comment|// the have same name, return type and parameter list, so its overriding
return|return
literal|true
return|;
block|}
comment|/**      * Returns a list of methods which are annotated with the given annotation      *      * @param type the type to reflect on      * @param annotationType the annotation type      * @return a list of the methods found      */
DECL|method|findMethodsWithAnnotation (Class<?> type, Class<? extends Annotation> annotationType)
specifier|public
specifier|static
name|List
argument_list|<
name|Method
argument_list|>
name|findMethodsWithAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|)
block|{
return|return
name|findMethodsWithAnnotation
argument_list|(
name|type
argument_list|,
name|annotationType
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Returns a list of methods which are annotated with the given annotation      *      * @param type the type to reflect on      * @param annotationType the annotation type      * @param checkMetaAnnotations check for meta annotations      * @return a list of the methods found      */
DECL|method|findMethodsWithAnnotation (Class<?> type, Class<? extends Annotation> annotationType, boolean checkMetaAnnotations)
specifier|public
specifier|static
name|List
argument_list|<
name|Method
argument_list|>
name|findMethodsWithAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|,
name|boolean
name|checkMetaAnnotations
parameter_list|)
block|{
name|List
argument_list|<
name|Method
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
do|do
block|{
name|Method
index|[]
name|methods
init|=
name|type
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
if|if
condition|(
name|hasAnnotation
argument_list|(
name|method
argument_list|,
name|annotationType
argument_list|,
name|checkMetaAnnotations
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
name|type
operator|=
name|type
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|type
operator|!=
literal|null
condition|)
do|;
return|return
name|answer
return|;
block|}
comment|/**      * Checks if a Class or Method are annotated with the given annotation      *      * @param elem the Class or Method to reflect on      * @param annotationType the annotation type      * @param checkMetaAnnotations check for meta annotations      * @return true if annotations is present      */
DECL|method|hasAnnotation (AnnotatedElement elem, Class<? extends Annotation> annotationType, boolean checkMetaAnnotations)
specifier|public
specifier|static
name|boolean
name|hasAnnotation
parameter_list|(
name|AnnotatedElement
name|elem
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|,
name|boolean
name|checkMetaAnnotations
parameter_list|)
block|{
if|if
condition|(
name|elem
operator|.
name|isAnnotationPresent
argument_list|(
name|annotationType
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|checkMetaAnnotations
condition|)
block|{
for|for
control|(
name|Annotation
name|a
range|:
name|elem
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
for|for
control|(
name|Annotation
name|meta
range|:
name|a
operator|.
name|annotationType
argument_list|()
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
if|if
condition|(
name|meta
operator|.
name|annotationType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|annotationType
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Turns the given object arrays into a meaningful string      *      * @param objects an array of objects or null      * @return a meaningful string      */
DECL|method|asString (Object[] objects)
specifier|public
specifier|static
name|String
name|asString
parameter_list|(
name|Object
index|[]
name|objects
parameter_list|)
block|{
if|if
condition|(
name|objects
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
else|else
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|objects
control|)
block|{
if|if
condition|(
name|counter
operator|++
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|String
name|text
init|=
operator|(
name|object
operator|==
literal|null
operator|)
condition|?
literal|"null"
else|:
name|object
operator|.
name|toString
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns true if a class is assignable from another class like the      * {@link Class#isAssignableFrom(Class)} method but which also includes      * coercion between primitive types to deal with Java 5 primitive type      * wrapping      */
DECL|method|isAssignableFrom (Class<?> a, Class<?> b)
specifier|public
specifier|static
name|boolean
name|isAssignableFrom
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|a
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|b
parameter_list|)
block|{
name|a
operator|=
name|convertPrimitiveTypeToWrapperType
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|b
operator|=
name|convertPrimitiveTypeToWrapperType
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|a
operator|.
name|isAssignableFrom
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|/**      * Returns if the given {@code clazz} type is a Java primitive array type.      *      * @param clazz the Java type to be checked      * @return {@code true} if the given type is a Java primitive array type      */
DECL|method|isPrimitiveArrayType (Class<?> clazz)
specifier|public
specifier|static
name|boolean
name|isPrimitiveArrayType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|clazz
operator|.
name|getComponentType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|arrayLength (Object[] pojo)
specifier|public
specifier|static
name|int
name|arrayLength
parameter_list|(
name|Object
index|[]
name|pojo
parameter_list|)
block|{
return|return
name|pojo
operator|.
name|length
return|;
block|}
comment|/**      * Converts primitive types such as int to its wrapper type like      * {@link Integer}      */
DECL|method|convertPrimitiveTypeToWrapperType (Class<?> type)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|convertPrimitiveTypeToWrapperType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|rc
init|=
name|type
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|int
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Integer
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|long
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Long
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|double
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Double
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|float
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Float
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|short
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Short
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|byte
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Byte
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|boolean
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Boolean
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|char
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Character
operator|.
name|class
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
comment|/**      * Helper method to return the default character set name      */
DECL|method|getDefaultCharacterSet ()
specifier|public
specifier|static
name|String
name|getDefaultCharacterSet
parameter_list|()
block|{
return|return
name|Charset
operator|.
name|defaultCharset
argument_list|()
operator|.
name|name
argument_list|()
return|;
block|}
comment|/**      * Returns the Java Bean property name of the given method, if it is a      * setter      */
DECL|method|getPropertyName (Method method)
specifier|public
specifier|static
name|String
name|getPropertyName
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|String
name|propertyName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyName
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
operator|&&
name|method
operator|.
name|getParameterCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|propertyName
operator|=
name|propertyName
operator|.
name|substring
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|+
name|propertyName
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
return|return
name|propertyName
return|;
block|}
comment|/**      * Returns true if the given collection of annotations matches the given type      */
DECL|method|hasAnnotation (Annotation[] annotations, Class<?> type)
specifier|public
specifier|static
name|boolean
name|hasAnnotation
parameter_list|(
name|Annotation
index|[]
name|annotations
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
for|for
control|(
name|Annotation
name|annotation
range|:
name|annotations
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|annotation
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Gets the annotation from the given instance.      *      * @param instance the instance      * @param type  the annotation      * @return the annotation, or<tt>null</tt> if the instance does not have the given annotation      */
DECL|method|getAnnotation (Object instance, Class<A> type)
specifier|public
specifier|static
parameter_list|<
name|A
extends|extends
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
parameter_list|>
name|A
name|getAnnotation
parameter_list|(
name|Object
name|instance
parameter_list|,
name|Class
argument_list|<
name|A
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * Converts the given value to the required type or throw a meaningful exception      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|cast (Class<T> toType, Object value)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|cast
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|toType
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|toType
operator|==
name|boolean
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|cast
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|toType
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|newType
init|=
name|convertPrimitiveTypeToWrapperType
argument_list|(
name|toType
argument_list|)
decl_stmt|;
if|if
condition|(
name|newType
operator|!=
name|toType
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|cast
argument_list|(
name|newType
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
try|try
block|{
return|return
name|toType
operator|.
name|cast
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to convert: "
operator|+
name|value
operator|+
literal|" to type: "
operator|+
name|toType
operator|.
name|getName
argument_list|()
operator|+
literal|" due to: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Does the given class have a default public no-arg constructor.      */
DECL|method|hasDefaultPublicNoArgConstructor (Class<?> type)
specifier|public
specifier|static
name|boolean
name|hasDefaultPublicNoArgConstructor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
comment|// getConstructors() returns only public constructors
for|for
control|(
name|Constructor
argument_list|<
name|?
argument_list|>
name|ctr
range|:
name|type
operator|.
name|getConstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|ctr
operator|.
name|getParameterCount
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns the type of the given object or null if the value is null      */
DECL|method|type (Object bean)
specifier|public
specifier|static
name|Object
name|type
parameter_list|(
name|Object
name|bean
parameter_list|)
block|{
return|return
name|bean
operator|!=
literal|null
condition|?
name|bean
operator|.
name|getClass
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * Evaluate the value as a predicate which attempts to convert the value to      * a boolean otherwise true is returned if the value is not null      */
DECL|method|evaluateValuePredicate (Object value)
specifier|public
specifier|static
name|boolean
name|evaluateValuePredicate
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
literal|"false"
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|NodeList
condition|)
block|{
comment|// is it an empty dom with empty attributes
if|if
condition|(
name|value
operator|instanceof
name|Node
operator|&&
operator|(
operator|(
name|Node
operator|)
name|value
operator|)
operator|.
name|hasAttributes
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|NodeList
name|list
init|=
operator|(
name|NodeList
operator|)
name|value
decl_stmt|;
return|return
name|list
operator|.
name|getLength
argument_list|()
operator|>
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Collection
condition|)
block|{
comment|// is it an empty collection
name|Collection
argument_list|<
name|?
argument_list|>
name|col
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
decl_stmt|;
return|return
name|col
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
return|return
name|value
operator|!=
literal|null
return|;
block|}
comment|/**      * Creates an Iterable to walk the exception from the bottom up      * (the last caused by going upwards to the root exception).      *      * @see java.lang.Iterable      * @param exception  the exception      * @return the Iterable      */
DECL|method|createExceptionIterable (Throwable exception)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Throwable
argument_list|>
name|createExceptionIterable
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|List
argument_list|<
name|Throwable
argument_list|>
name|throwables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Throwable
name|current
init|=
name|exception
decl_stmt|;
comment|// spool to the bottom of the caused by tree
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|throwables
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
name|current
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|throwables
argument_list|)
expr_stmt|;
return|return
name|throwables
return|;
block|}
comment|/**      * Creates an Iterator to walk the exception from the bottom up      * (the last caused by going upwards to the root exception).      *      * @see Iterator      * @param exception  the exception      * @return the Iterator      */
DECL|method|createExceptionIterator (Throwable exception)
specifier|public
specifier|static
name|Iterator
argument_list|<
name|Throwable
argument_list|>
name|createExceptionIterator
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
return|return
name|createExceptionIterable
argument_list|(
name|exception
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * Retrieves the given exception type from the exception.      *<p/>      * Is used to get the caused exception that typically have been wrapped in some sort      * of Camel wrapper exception      *<p/>      * The strategy is to look in the exception hierarchy to find the first given cause that matches the type.      * Will start from the bottom (the real cause) and walk upwards.      *      * @param type the exception type wanted to retrieve      * @param exception the caused exception      * @return the exception found (or<tt>null</tt> if not found in the exception hierarchy)      */
DECL|method|getException (Class<T> type, Throwable exception)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getException
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Throwable
name|exception
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|//check the suppressed exception first
for|for
control|(
name|Throwable
name|throwable
range|:
name|exception
operator|.
name|getSuppressed
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|throwable
argument_list|)
condition|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|throwable
argument_list|)
return|;
block|}
block|}
comment|// walk the hierarchy and look for it
for|for
control|(
specifier|final
name|Throwable
name|throwable
range|:
name|createExceptionIterable
argument_list|(
name|exception
argument_list|)
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|throwable
argument_list|)
condition|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|throwable
argument_list|)
return|;
block|}
block|}
comment|// not found
return|return
literal|null
return|;
block|}
DECL|method|getIdentityHashCode (Object object)
specifier|public
specifier|static
name|String
name|getIdentityHashCode
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
return|return
literal|"0x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|object
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Lookup the constant field on the given class with the given name      *      * @param clazz  the class      * @param name   the name of the field to lookup      * @return the value of the constant field, or<tt>null</tt> if not found      */
DECL|method|lookupConstantFieldValue (Class<?> clazz, String name)
specifier|public
specifier|static
name|String
name|lookupConstantFieldValue
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// remove leading dots
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|","
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Field
name|field
range|:
name|clazz
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
try|try
block|{
name|Object
name|v
init|=
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|v
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// ignore
return|return
literal|null
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Is the given value a numeric NaN type      *      * @param value the value      * @return<tt>true</tt> if its a {@link Float#NaN} or {@link Double#NaN}.      */
DECL|method|isNaN (Object value)
specifier|public
specifier|static
name|boolean
name|isNaN
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
operator|instanceof
name|Number
operator|)
operator|&&
operator|(
name|FLOAT_NAN
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|||
name|DOUBLE_NAN
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|)
return|;
block|}
comment|/**      * Wraps the caused exception in a {@link RuntimeException} if its not      * already such an exception.      *      * @param e the caused exception      * @return the wrapper exception      * @deprecated Use {@link org.apache.camel.RuntimeCamelException#wrapRuntimeCamelException} instead      */
annotation|@
name|Deprecated
DECL|method|wrapRuntimeCamelException (Throwable e)
specifier|public
specifier|static
name|RuntimeException
name|wrapRuntimeCamelException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|RuntimeException
argument_list|>
name|clazz
init|=
operator|(
name|Class
operator|)
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.camel.RuntimeException"
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isInstance
argument_list|(
name|e
argument_list|)
condition|)
block|{
comment|// don't double wrap
return|return
name|clazz
operator|.
name|cast
argument_list|(
name|e
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|clazz
operator|.
name|getConstructor
argument_list|(
name|Throwable
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
condition|)
block|{
comment|// don't double wrap
return|return
operator|(
name|RuntimeException
operator|)
name|e
return|;
block|}
else|else
block|{
return|return
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

