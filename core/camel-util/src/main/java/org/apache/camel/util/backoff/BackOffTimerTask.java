begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util.backoff
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|backoff
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|function
operator|.
name|ThrowingFunction
import|;
end_import

begin_class
DECL|class|BackOffTimerTask
specifier|final
class|class
name|BackOffTimerTask
implements|implements
name|BackOffTimer
operator|.
name|Task
implements|,
name|Runnable
block|{
DECL|field|backOff
specifier|private
specifier|final
name|BackOff
name|backOff
decl_stmt|;
DECL|field|scheduler
specifier|private
specifier|final
name|ScheduledExecutorService
name|scheduler
decl_stmt|;
DECL|field|function
specifier|private
specifier|final
name|ThrowingFunction
argument_list|<
name|BackOffTimer
operator|.
name|Task
argument_list|,
name|Boolean
argument_list|,
name|Exception
argument_list|>
name|function
decl_stmt|;
DECL|field|futureRef
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|futureRef
decl_stmt|;
DECL|field|consumers
specifier|private
specifier|final
name|List
argument_list|<
name|BiConsumer
argument_list|<
name|BackOffTimer
operator|.
name|Task
argument_list|,
name|Throwable
argument_list|>
argument_list|>
name|consumers
decl_stmt|;
DECL|field|status
specifier|private
name|Status
name|status
decl_stmt|;
DECL|field|currentAttempts
specifier|private
name|long
name|currentAttempts
decl_stmt|;
DECL|field|currentDelay
specifier|private
name|long
name|currentDelay
decl_stmt|;
DECL|field|currentElapsedTime
specifier|private
name|long
name|currentElapsedTime
decl_stmt|;
DECL|field|lastAttemptTime
specifier|private
name|long
name|lastAttemptTime
decl_stmt|;
DECL|field|nextAttemptTime
specifier|private
name|long
name|nextAttemptTime
decl_stmt|;
DECL|method|BackOffTimerTask (BackOff backOff, ScheduledExecutorService scheduler, ThrowingFunction<BackOffTimer.Task, Boolean, Exception> function)
name|BackOffTimerTask
parameter_list|(
name|BackOff
name|backOff
parameter_list|,
name|ScheduledExecutorService
name|scheduler
parameter_list|,
name|ThrowingFunction
argument_list|<
name|BackOffTimer
operator|.
name|Task
argument_list|,
name|Boolean
argument_list|,
name|Exception
argument_list|>
name|function
parameter_list|)
block|{
name|this
operator|.
name|backOff
operator|=
name|backOff
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|Status
operator|.
name|Active
expr_stmt|;
name|this
operator|.
name|currentAttempts
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|currentDelay
operator|=
name|backOff
operator|.
name|getDelay
argument_list|()
operator|.
name|toMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentElapsedTime
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|lastAttemptTime
operator|=
name|BackOff
operator|.
name|NEVER
expr_stmt|;
name|this
operator|.
name|nextAttemptTime
operator|=
name|BackOff
operator|.
name|NEVER
expr_stmt|;
name|this
operator|.
name|function
operator|=
name|function
expr_stmt|;
name|this
operator|.
name|consumers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|futureRef
operator|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|// *****************************
comment|// Properties
comment|// *****************************
annotation|@
name|Override
DECL|method|getBackOff ()
specifier|public
name|BackOff
name|getBackOff
parameter_list|()
block|{
return|return
name|backOff
return|;
block|}
annotation|@
name|Override
DECL|method|getStatus ()
specifier|public
name|Status
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentAttempts ()
specifier|public
name|long
name|getCurrentAttempts
parameter_list|()
block|{
return|return
name|currentAttempts
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentDelay ()
specifier|public
name|long
name|getCurrentDelay
parameter_list|()
block|{
return|return
name|currentDelay
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentElapsedTime ()
specifier|public
name|long
name|getCurrentElapsedTime
parameter_list|()
block|{
return|return
name|currentElapsedTime
return|;
block|}
annotation|@
name|Override
DECL|method|getLastAttemptTime ()
specifier|public
name|long
name|getLastAttemptTime
parameter_list|()
block|{
return|return
name|lastAttemptTime
return|;
block|}
annotation|@
name|Override
DECL|method|getNextAttemptTime ()
specifier|public
name|long
name|getNextAttemptTime
parameter_list|()
block|{
return|return
name|nextAttemptTime
return|;
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|currentAttempts
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|currentDelay
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|currentElapsedTime
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|lastAttemptTime
operator|=
name|BackOff
operator|.
name|NEVER
expr_stmt|;
name|this
operator|.
name|nextAttemptTime
operator|=
name|BackOff
operator|.
name|NEVER
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|Status
operator|.
name|Active
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|cancel ()
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|stop
argument_list|()
expr_stmt|;
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
name|futureRef
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// signal task completion on cancel.
name|complete
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|whenComplete (BiConsumer<BackOffTimer.Task, Throwable> whenCompleted)
specifier|public
name|void
name|whenComplete
parameter_list|(
name|BiConsumer
argument_list|<
name|BackOffTimer
operator|.
name|Task
argument_list|,
name|Throwable
argument_list|>
name|whenCompleted
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|consumers
init|)
block|{
name|consumers
operator|.
name|add
argument_list|(
name|whenCompleted
argument_list|)
expr_stmt|;
block|}
block|}
comment|// *****************************
comment|// Task execution
comment|// *****************************
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|status
operator|==
name|Status
operator|.
name|Active
condition|)
block|{
try|try
block|{
name|lastAttemptTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
name|function
operator|.
name|apply
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|long
name|delay
init|=
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|Status
operator|.
name|Active
condition|)
block|{
comment|// if the call to next makes the context not more
comment|// active, signal task completion.
name|complete
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nextAttemptTime
operator|=
name|lastAttemptTime
operator|+
name|delay
expr_stmt|;
comment|// Cache the scheduled future so it can be cancelled
comment|// later by Task.cancel()
name|futureRef
operator|.
name|lazySet
argument_list|(
name|scheduler
operator|.
name|schedule
argument_list|(
name|this
argument_list|,
name|delay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|stop
argument_list|()
expr_stmt|;
comment|// if the function return false no more attempts should
comment|// be made so stop the context.
name|complete
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|stop
argument_list|()
expr_stmt|;
name|complete
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|stop ()
name|void
name|stop
parameter_list|()
block|{
name|this
operator|.
name|currentAttempts
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|currentDelay
operator|=
name|BackOff
operator|.
name|NEVER
expr_stmt|;
name|this
operator|.
name|currentElapsedTime
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|lastAttemptTime
operator|=
name|BackOff
operator|.
name|NEVER
expr_stmt|;
name|this
operator|.
name|nextAttemptTime
operator|=
name|BackOff
operator|.
name|NEVER
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|Status
operator|.
name|Inactive
expr_stmt|;
block|}
DECL|method|complete (Throwable throwable)
name|void
name|complete
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|consumers
init|)
block|{
name|consumers
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|c
operator|.
name|accept
argument_list|(
name|this
argument_list|,
name|throwable
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// *****************************
comment|// Impl
comment|// *****************************
comment|/**      * Return the number of milliseconds to wait before retrying the operation      * or ${@link BackOff#NEVER} to indicate that no further attempt should be      * made.      */
DECL|method|next ()
name|long
name|next
parameter_list|()
block|{
comment|// A call to next when currentDelay is set to NEVER has no effects
comment|// as this means that either the timer is exhausted or it has explicit
comment|// stopped
if|if
condition|(
name|status
operator|==
name|Status
operator|.
name|Active
condition|)
block|{
name|currentAttempts
operator|++
expr_stmt|;
if|if
condition|(
name|currentAttempts
operator|>
name|backOff
operator|.
name|getMaxAttempts
argument_list|()
condition|)
block|{
name|currentDelay
operator|=
name|BackOff
operator|.
name|NEVER
expr_stmt|;
name|status
operator|=
name|Status
operator|.
name|Exhausted
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentElapsedTime
operator|>
name|backOff
operator|.
name|getMaxElapsedTime
argument_list|()
operator|.
name|toMillis
argument_list|()
condition|)
block|{
name|currentDelay
operator|=
name|BackOff
operator|.
name|NEVER
expr_stmt|;
name|status
operator|=
name|Status
operator|.
name|Exhausted
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|currentDelay
operator|<=
name|backOff
operator|.
name|getMaxDelay
argument_list|()
operator|.
name|toMillis
argument_list|()
condition|)
block|{
name|currentDelay
operator|=
call|(
name|long
call|)
argument_list|(
name|currentDelay
operator|*
name|backOff
operator|.
name|getMultiplier
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|currentElapsedTime
operator|+=
name|currentDelay
expr_stmt|;
block|}
block|}
return|return
name|currentDelay
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"BackOffTimerTask["
operator|+
literal|"status="
operator|+
name|status
operator|+
literal|", currentAttempts="
operator|+
name|currentAttempts
operator|+
literal|", currentDelay="
operator|+
name|currentDelay
operator|+
literal|", currentElapsedTime="
operator|+
name|currentElapsedTime
operator|+
literal|", lastAttemptTime="
operator|+
name|lastAttemptTime
operator|+
literal|", nextAttemptTime="
operator|+
name|nextAttemptTime
operator|+
literal|']'
return|;
block|}
block|}
end_class

end_unit

