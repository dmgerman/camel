begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * A resolver for file paths that supports resolving with system and environment properties.  */
end_comment

begin_class
DECL|class|FilePathResolver
specifier|public
specifier|final
class|class
name|FilePathResolver
block|{
comment|// must be non greedy patterns
DECL|field|ENV_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|ENV_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\$\\{env:(.*?)\\}"
argument_list|,
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
DECL|field|SYS_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|SYS_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\$\\{(.*?)\\}"
argument_list|,
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
DECL|method|FilePathResolver ()
specifier|private
name|FilePathResolver
parameter_list|()
block|{     }
comment|/**      * Resolves the path.      *<p/>      * The pattern is:      *<ul>      *<li><tt>${env.key}</tt> for environment variables.</li>      *<li><tt>${key}</tt> for JVM system properties.</li>      *</ul>      * For example:<tt>${env.KARAF_HOME}/data/logs</tt>      *      * @param path  the path      * @return the resolved path      * @throws IllegalArgumentException is thrown if system property / environment not found      */
DECL|method|resolvePath (String path)
specifier|public
specifier|static
name|String
name|resolvePath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|Matcher
name|matcher
init|=
name|ENV_PATTERN
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|System
operator|.
name|getenv
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find system environment with key: "
operator|+
name|key
argument_list|)
throw|;
block|}
comment|// must quote the replacement to have it work as literal replacement
name|value
operator|=
name|Matcher
operator|.
name|quoteReplacement
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|path
operator|=
name|matcher
operator|.
name|replaceFirst
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// must match again as location is changed
name|matcher
operator|=
name|ENV_PATTERN
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|matcher
operator|=
name|SYS_PATTERN
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
expr_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find JVM system property with key: "
operator|+
name|key
argument_list|)
throw|;
block|}
comment|// must quote the replacement to have it work as literal replacement
name|value
operator|=
name|Matcher
operator|.
name|quoteReplacement
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|path
operator|=
name|matcher
operator|.
name|replaceFirst
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// must match again as location is changed
name|matcher
operator|=
name|SYS_PATTERN
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
block|}
end_class

end_unit

