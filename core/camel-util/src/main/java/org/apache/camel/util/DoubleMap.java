begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|function
operator|.
name|TriConsumer
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|DoubleMap
specifier|public
class|class
name|DoubleMap
parameter_list|<
name|K1
parameter_list|,
name|K2
parameter_list|,
name|V
parameter_list|>
block|{
DECL|field|MAX_LOAD_FACTOR
specifier|private
specifier|static
specifier|final
name|double
name|MAX_LOAD_FACTOR
init|=
literal|1.2
decl_stmt|;
DECL|field|MAX_TABLE_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_TABLE_SIZE
init|=
literal|32768
decl_stmt|;
DECL|field|C1
specifier|private
specifier|static
specifier|final
name|int
name|C1
init|=
literal|0xcc9e2d51
decl_stmt|;
DECL|field|C2
specifier|private
specifier|static
specifier|final
name|int
name|C2
init|=
literal|0x1b873593
decl_stmt|;
DECL|class|Entry
specifier|static
class|class
name|Entry
block|{
DECL|field|k1
name|Object
name|k1
decl_stmt|;
DECL|field|k2
name|Object
name|k2
decl_stmt|;
DECL|field|v
name|Object
name|v
decl_stmt|;
DECL|field|next
name|Entry
name|next
decl_stmt|;
block|}
DECL|field|table
specifier|private
name|Entry
index|[]
name|table
decl_stmt|;
DECL|field|mask
specifier|private
name|int
name|mask
decl_stmt|;
DECL|method|DoubleMap (int size)
specifier|public
name|DoubleMap
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|table
operator|=
operator|new
name|Entry
index|[
name|closedTableSize
argument_list|(
name|size
argument_list|)
index|]
expr_stmt|;
name|mask
operator|=
name|table
operator|.
name|length
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|get (K1 k1, K2 k2)
specifier|public
name|V
name|get
parameter_list|(
name|K1
name|k1
parameter_list|,
name|K2
name|k2
parameter_list|)
block|{
name|Entry
index|[]
name|table
init|=
name|this
operator|.
name|table
decl_stmt|;
name|int
name|mask
init|=
name|this
operator|.
name|mask
decl_stmt|;
name|int
name|index
init|=
name|smear
argument_list|(
name|k1
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
operator|+
name|k2
operator|.
name|hashCode
argument_list|()
argument_list|)
operator|&
name|mask
decl_stmt|;
for|for
control|(
name|Entry
name|entry
init|=
name|table
index|[
name|index
index|]
init|;
name|entry
operator|!=
literal|null
condition|;
name|entry
operator|=
name|entry
operator|.
name|next
control|)
block|{
if|if
condition|(
name|k1
operator|==
name|entry
operator|.
name|k1
operator|&&
name|k2
operator|==
name|entry
operator|.
name|k2
condition|)
block|{
return|return
operator|(
name|V
operator|)
name|entry
operator|.
name|v
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|forEach (TriConsumer<K1, K2, V> consumer)
specifier|public
name|void
name|forEach
parameter_list|(
name|TriConsumer
argument_list|<
name|K1
argument_list|,
name|K2
argument_list|,
name|V
argument_list|>
name|consumer
parameter_list|)
block|{
name|Entry
index|[]
name|table
init|=
name|this
operator|.
name|table
decl_stmt|;
for|for
control|(
name|Entry
name|entry
range|:
name|table
control|)
block|{
while|while
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
operator|(
name|K1
operator|)
name|entry
operator|.
name|k1
argument_list|,
operator|(
name|K2
operator|)
name|entry
operator|.
name|k2
argument_list|,
operator|(
name|V
operator|)
name|entry
operator|.
name|v
argument_list|)
expr_stmt|;
name|entry
operator|=
name|entry
operator|.
name|next
expr_stmt|;
block|}
block|}
block|}
DECL|method|containsKey (K1 k1, K2 k2)
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|K1
name|k1
parameter_list|,
name|K2
name|k2
parameter_list|)
block|{
name|Entry
index|[]
name|table
init|=
name|this
operator|.
name|table
decl_stmt|;
name|int
name|mask
init|=
name|this
operator|.
name|mask
decl_stmt|;
name|int
name|index
init|=
name|smear
argument_list|(
name|k1
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
operator|+
name|k2
operator|.
name|hashCode
argument_list|()
argument_list|)
operator|&
name|mask
decl_stmt|;
for|for
control|(
name|Entry
name|entry
init|=
name|table
index|[
name|index
index|]
init|;
name|entry
operator|!=
literal|null
condition|;
name|entry
operator|=
name|entry
operator|.
name|next
control|)
block|{
if|if
condition|(
name|k1
operator|==
name|entry
operator|.
name|k1
operator|&&
name|k2
operator|==
name|entry
operator|.
name|k2
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|put (K1 k1, K2 k2, V v)
specifier|public
specifier|synchronized
name|void
name|put
parameter_list|(
name|K1
name|k1
parameter_list|,
name|K2
name|k2
parameter_list|,
name|V
name|v
parameter_list|)
block|{
name|Entry
index|[]
name|table
init|=
name|this
operator|.
name|table
decl_stmt|;
name|int
name|size
init|=
name|size
argument_list|()
operator|+
literal|1
decl_stmt|;
name|int
name|realSize
init|=
name|closedTableSize
argument_list|(
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|realSize
operator|<=
name|table
operator|.
name|length
condition|)
block|{
name|realSize
operator|=
name|table
operator|.
name|length
expr_stmt|;
name|int
name|index
init|=
name|smear
argument_list|(
name|k1
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
operator|+
name|k2
operator|.
name|hashCode
argument_list|()
argument_list|)
operator|&
operator|(
name|realSize
operator|-
literal|1
operator|)
decl_stmt|;
for|for
control|(
name|Entry
name|oldEntry
init|=
name|table
index|[
name|index
index|]
init|;
name|oldEntry
operator|!=
literal|null
condition|;
name|oldEntry
operator|=
name|oldEntry
operator|.
name|next
control|)
block|{
if|if
condition|(
name|oldEntry
operator|.
name|k1
operator|==
name|k1
operator|&&
name|oldEntry
operator|.
name|k2
operator|==
name|k2
condition|)
block|{
name|oldEntry
operator|.
name|v
operator|=
name|v
expr_stmt|;
return|return;
block|}
block|}
name|Entry
name|entry
init|=
operator|new
name|Entry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|k1
operator|=
name|k1
expr_stmt|;
name|entry
operator|.
name|k2
operator|=
name|k2
expr_stmt|;
name|entry
operator|.
name|v
operator|=
name|v
expr_stmt|;
name|entry
operator|.
name|next
operator|=
name|table
index|[
name|index
index|]
expr_stmt|;
name|table
index|[
name|index
index|]
operator|=
name|entry
expr_stmt|;
block|}
else|else
block|{
name|Entry
index|[]
name|newT
init|=
operator|new
name|Entry
index|[
name|realSize
index|]
decl_stmt|;
name|int
name|index
init|=
name|smear
argument_list|(
name|k1
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
operator|+
name|k2
operator|.
name|hashCode
argument_list|()
argument_list|)
operator|&
operator|(
name|realSize
operator|-
literal|1
operator|)
decl_stmt|;
name|Entry
name|entry
init|=
operator|new
name|Entry
argument_list|()
decl_stmt|;
name|newT
index|[
name|index
index|]
operator|=
name|entry
expr_stmt|;
name|entry
operator|.
name|k1
operator|=
name|k1
expr_stmt|;
name|entry
operator|.
name|k2
operator|=
name|k2
expr_stmt|;
name|entry
operator|.
name|v
operator|=
name|v
expr_stmt|;
for|for
control|(
name|Entry
name|oldEntry
range|:
name|table
control|)
block|{
while|while
condition|(
name|oldEntry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|k1
operator|!=
name|oldEntry
operator|.
name|k1
operator|||
name|k2
operator|!=
name|oldEntry
operator|.
name|k2
condition|)
block|{
name|index
operator|=
name|smear
argument_list|(
name|oldEntry
operator|.
name|k1
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
operator|+
name|oldEntry
operator|.
name|k2
operator|.
name|hashCode
argument_list|()
argument_list|)
operator|&
operator|(
name|realSize
operator|-
literal|1
operator|)
expr_stmt|;
name|Entry
name|newEntry
init|=
operator|new
name|Entry
argument_list|()
decl_stmt|;
name|newEntry
operator|.
name|k1
operator|=
name|oldEntry
operator|.
name|k1
expr_stmt|;
name|newEntry
operator|.
name|k2
operator|=
name|oldEntry
operator|.
name|k2
expr_stmt|;
name|newEntry
operator|.
name|v
operator|=
name|oldEntry
operator|.
name|v
expr_stmt|;
name|newEntry
operator|.
name|next
operator|=
name|newT
index|[
name|index
index|]
expr_stmt|;
name|newT
index|[
name|index
index|]
operator|=
name|newEntry
expr_stmt|;
block|}
name|oldEntry
operator|=
name|oldEntry
operator|.
name|next
expr_stmt|;
block|}
block|}
name|this
operator|.
name|table
operator|=
name|newT
expr_stmt|;
name|this
operator|.
name|mask
operator|=
name|realSize
operator|-
literal|1
expr_stmt|;
block|}
block|}
DECL|method|remove (K1 k1, K2 k2)
specifier|public
specifier|synchronized
name|boolean
name|remove
parameter_list|(
name|K1
name|k1
parameter_list|,
name|K2
name|k2
parameter_list|)
block|{
name|Entry
index|[]
name|table
init|=
name|this
operator|.
name|table
decl_stmt|;
name|int
name|mask
init|=
name|this
operator|.
name|mask
decl_stmt|;
name|int
name|index
init|=
name|smear
argument_list|(
name|k1
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
operator|+
name|k2
operator|.
name|hashCode
argument_list|()
argument_list|)
operator|&
name|mask
decl_stmt|;
name|Entry
name|prevEntry
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Entry
name|oldEntry
init|=
name|table
index|[
name|index
index|]
init|;
name|oldEntry
operator|!=
literal|null
condition|;
name|prevEntry
operator|=
name|oldEntry
operator|,
name|oldEntry
operator|=
name|oldEntry
operator|.
name|next
control|)
block|{
if|if
condition|(
name|oldEntry
operator|.
name|k1
operator|==
name|k1
operator|&&
name|oldEntry
operator|.
name|k2
operator|==
name|k2
condition|)
block|{
if|if
condition|(
name|prevEntry
operator|==
literal|null
condition|)
block|{
name|table
index|[
name|index
index|]
operator|=
name|oldEntry
operator|.
name|next
expr_stmt|;
block|}
else|else
block|{
name|prevEntry
operator|.
name|next
operator|=
name|oldEntry
operator|.
name|next
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getFirst (Predicate<K1> p1, Predicate<K2> p2)
specifier|public
name|V
name|getFirst
parameter_list|(
name|Predicate
argument_list|<
name|K1
argument_list|>
name|p1
parameter_list|,
name|Predicate
argument_list|<
name|K2
argument_list|>
name|p2
parameter_list|)
block|{
for|for
control|(
name|Entry
name|entry
range|:
name|table
control|)
block|{
while|while
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p1
operator|.
name|test
argument_list|(
operator|(
name|K1
operator|)
name|entry
operator|.
name|k1
argument_list|)
operator|&&
name|p2
operator|.
name|test
argument_list|(
operator|(
name|K2
operator|)
name|entry
operator|.
name|k2
argument_list|)
condition|)
block|{
return|return
operator|(
name|V
operator|)
name|entry
operator|.
name|v
return|;
block|}
name|entry
operator|=
name|entry
operator|.
name|next
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
name|Entry
index|[]
name|table
init|=
name|this
operator|.
name|table
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
name|e
range|:
name|table
control|)
block|{
for|for
control|(
name|Entry
name|c
init|=
name|e
init|;
name|c
operator|!=
literal|null
condition|;
name|c
operator|=
name|c
operator|.
name|next
control|)
block|{
name|n
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|n
return|;
block|}
DECL|method|clear ()
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|table
operator|=
operator|new
name|Entry
index|[
name|table
operator|.
name|length
index|]
expr_stmt|;
block|}
DECL|method|smear (int hashCode)
specifier|static
name|int
name|smear
parameter_list|(
name|int
name|hashCode
parameter_list|)
block|{
return|return
name|C2
operator|*
name|Integer
operator|.
name|rotateLeft
argument_list|(
name|hashCode
operator|*
name|C1
argument_list|,
literal|15
argument_list|)
return|;
block|}
DECL|method|closedTableSize (int expectedEntries)
specifier|static
name|int
name|closedTableSize
parameter_list|(
name|int
name|expectedEntries
parameter_list|)
block|{
comment|// Get the recommended table size.
comment|// Round down to the nearest power of 2.
name|expectedEntries
operator|=
name|Math
operator|.
name|max
argument_list|(
name|expectedEntries
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|tableSize
init|=
name|Integer
operator|.
name|highestOneBit
argument_list|(
name|expectedEntries
argument_list|)
decl_stmt|;
comment|// Check to make sure that we will not exceed the maximum load factor.
if|if
condition|(
name|expectedEntries
operator|>
call|(
name|int
call|)
argument_list|(
name|MAX_LOAD_FACTOR
operator|*
name|tableSize
argument_list|)
condition|)
block|{
name|tableSize
operator|<<=
literal|1
expr_stmt|;
return|return
operator|(
name|tableSize
operator|>
literal|0
operator|)
condition|?
name|tableSize
else|:
name|MAX_TABLE_SIZE
return|;
block|}
return|return
name|tableSize
return|;
block|}
block|}
end_class

end_unit

