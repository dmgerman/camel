begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_comment
comment|/**  * A filtering iterator  */
end_comment

begin_class
DECL|class|FilterIterator
specifier|public
class|class
name|FilterIterator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|T
argument_list|>
implements|,
name|Closeable
block|{
DECL|field|it
specifier|private
name|Iterator
argument_list|<
name|T
argument_list|>
name|it
decl_stmt|;
DECL|field|filter
specifier|private
name|Predicate
argument_list|<
name|T
argument_list|>
name|filter
decl_stmt|;
DECL|field|next
specifier|private
name|T
name|next
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|method|FilterIterator (Iterator<T> it)
specifier|public
name|FilterIterator
parameter_list|(
name|Iterator
argument_list|<
name|T
argument_list|>
name|it
parameter_list|)
block|{
name|this
argument_list|(
name|it
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|FilterIterator (Iterator<T> it, Predicate<T> filter)
specifier|public
name|FilterIterator
parameter_list|(
name|Iterator
argument_list|<
name|T
argument_list|>
name|it
parameter_list|,
name|Predicate
argument_list|<
name|T
argument_list|>
name|filter
parameter_list|)
block|{
name|this
operator|.
name|it
operator|=
name|it
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|IOHelper
operator|.
name|closeIterator
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// we are now closed
name|closed
operator|=
literal|true
expr_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|next
operator|=
name|checkNext
argument_list|()
expr_stmt|;
block|}
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|T
name|next
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|next
operator|=
name|checkNext
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|T
name|ep
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|ep
return|;
block|}
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
DECL|method|checkNext ()
specifier|protected
name|T
name|checkNext
parameter_list|()
block|{
while|while
condition|(
operator|!
name|closed
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|T
name|ep
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ep
operator|!=
literal|null
operator|&&
operator|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|test
argument_list|(
name|ep
argument_list|)
operator|)
condition|)
block|{
return|return
name|ep
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

