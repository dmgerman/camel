begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
operator|.
name|RAW_TOKEN_END
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
operator|.
name|RAW_TOKEN_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
operator|.
name|RAW_TOKEN_START
import|;
end_import

begin_comment
comment|/**  * RAW syntax aware URI scanner that provides various URI manipulations.  */
end_comment

begin_class
DECL|class|URIScanner
class|class
name|URIScanner
block|{
DECL|enum|Mode
specifier|private
enum|enum
name|Mode
block|{
DECL|enumConstant|KEY
DECL|enumConstant|VALUE
name|KEY
block|,
name|VALUE
block|}
DECL|field|END
specifier|private
specifier|static
specifier|final
name|char
name|END
init|=
literal|'\u0000'
decl_stmt|;
DECL|field|charset
specifier|private
specifier|final
name|String
name|charset
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|StringBuilder
name|key
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|StringBuilder
name|value
decl_stmt|;
DECL|field|mode
specifier|private
name|Mode
name|mode
decl_stmt|;
DECL|field|isRaw
specifier|private
name|boolean
name|isRaw
decl_stmt|;
DECL|field|rawTokenEnd
specifier|private
name|char
name|rawTokenEnd
decl_stmt|;
DECL|method|URIScanner (String charset)
specifier|public
name|URIScanner
parameter_list|(
name|String
name|charset
parameter_list|)
block|{
name|this
operator|.
name|charset
operator|=
name|charset
expr_stmt|;
name|key
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|value
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|initState ()
specifier|private
name|void
name|initState
parameter_list|()
block|{
name|mode
operator|=
name|Mode
operator|.
name|KEY
expr_stmt|;
name|key
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|value
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|isRaw
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|getDecodedKey ()
specifier|private
name|String
name|getDecodedKey
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|charset
argument_list|)
return|;
block|}
DECL|method|getDecodedValue ()
specifier|private
name|String
name|getDecodedValue
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
comment|// need to replace % with %25
name|String
name|s
init|=
name|StringHelper
operator|.
name|replaceAll
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
literal|"%"
argument_list|,
literal|"%25"
argument_list|)
decl_stmt|;
name|String
name|answer
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|s
argument_list|,
name|charset
argument_list|)
decl_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|parseQuery (String uri, boolean useRaw)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parseQuery
parameter_list|(
name|String
name|uri
parameter_list|,
name|boolean
name|useRaw
parameter_list|)
throws|throws
name|URISyntaxException
block|{
comment|// need to parse the uri query parameters manually as we cannot rely on splitting by&,
comment|// as& can be used in a parameter value as well.
try|try
block|{
comment|// use a linked map so the parameters is in the same order
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|answer
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|initState
argument_list|()
expr_stmt|;
comment|// parse the uri parameters char by char
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uri
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// current char
name|char
name|ch
init|=
name|uri
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// look ahead of the next char
name|char
name|next
decl_stmt|;
if|if
condition|(
name|i
operator|<=
name|uri
operator|.
name|length
argument_list|()
operator|-
literal|2
condition|)
block|{
name|next
operator|=
name|uri
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|next
operator|=
name|END
expr_stmt|;
block|}
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|KEY
case|:
comment|// if there is a = sign then the key ends and we are in value mode
if|if
condition|(
name|ch
operator|==
literal|'='
condition|)
block|{
name|mode
operator|=
name|Mode
operator|.
name|VALUE
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|ch
operator|!=
literal|'&'
condition|)
block|{
comment|// regular char so add it to the key
name|key
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VALUE
case|:
comment|// are we a raw value
name|isRaw
operator|=
name|checkRaw
argument_list|()
expr_stmt|;
comment|// if we are in raw mode, then we keep adding until we hit the end marker
if|if
condition|(
name|isRaw
condition|)
block|{
name|value
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAtEnd
argument_list|(
name|ch
argument_list|,
name|next
argument_list|)
condition|)
block|{
comment|// raw value end, so add that as a parameter, and reset flags
name|addParameter
argument_list|(
name|answer
argument_list|,
name|useRaw
operator|||
name|isRaw
argument_list|)
expr_stmt|;
name|initState
argument_list|()
expr_stmt|;
comment|// skip to next as we are in raw mode and have already added the value
name|i
operator|++
expr_stmt|;
block|}
continue|continue;
block|}
if|if
condition|(
name|ch
operator|!=
literal|'&'
condition|)
block|{
comment|// regular char so add it to the value
name|value
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown mode: "
operator|+
name|mode
argument_list|)
throw|;
block|}
comment|// the& denote parameter is ended
if|if
condition|(
name|ch
operator|==
literal|'&'
condition|)
block|{
comment|// parameter is ended, as we hit& separator
name|addParameter
argument_list|(
name|answer
argument_list|,
name|useRaw
operator|||
name|isRaw
argument_list|)
expr_stmt|;
name|initState
argument_list|()
expr_stmt|;
block|}
block|}
comment|// any left over parameters, then add that
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addParameter
argument_list|(
name|answer
argument_list|,
name|useRaw
operator|||
name|isRaw
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|URISyntaxException
name|se
init|=
operator|new
name|URISyntaxException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Invalid encoding"
argument_list|)
decl_stmt|;
name|se
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|se
throw|;
block|}
block|}
DECL|method|checkRaw ()
specifier|private
name|boolean
name|checkRaw
parameter_list|()
block|{
name|rawTokenEnd
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RAW_TOKEN_START
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|rawTokenStart
init|=
name|RAW_TOKEN_PREFIX
operator|+
name|RAW_TOKEN_START
index|[
name|i
index|]
decl_stmt|;
name|boolean
name|isRaw
init|=
name|value
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|rawTokenStart
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRaw
condition|)
block|{
name|rawTokenEnd
operator|=
name|RAW_TOKEN_END
index|[
name|i
index|]
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isAtEnd (char ch, char next)
specifier|private
name|boolean
name|isAtEnd
parameter_list|(
name|char
name|ch
parameter_list|,
name|char
name|next
parameter_list|)
block|{
comment|// we only end the raw marker if it's ")&", "}&", or at the end of the value
return|return
name|ch
operator|==
name|rawTokenEnd
operator|&&
operator|(
name|next
operator|==
literal|'&'
operator|||
name|next
operator|==
name|END
operator|)
return|;
block|}
DECL|method|addParameter (Map<String, Object> answer, boolean isRaw)
specifier|private
name|void
name|addParameter
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|answer
parameter_list|,
name|boolean
name|isRaw
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|String
name|name
init|=
name|getDecodedKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|isRaw
condition|?
name|this
operator|.
name|value
operator|.
name|toString
argument_list|()
else|:
name|getDecodedValue
argument_list|()
decl_stmt|;
comment|// does the key already exist?
if|if
condition|(
name|answer
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// yes it does, so make sure we can support multiple values, but using a list
comment|// to hold the multiple values
name|Object
name|existing
init|=
name|answer
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
decl_stmt|;
if|if
condition|(
name|existing
operator|instanceof
name|List
condition|)
block|{
name|list
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|existing
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// create a new list to hold the multiple values
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|String
name|s
init|=
name|existing
operator|!=
literal|null
condition|?
name|existing
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|answer
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|scanRaw (String str)
specifier|public
specifier|static
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|scanRaw
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|==
literal|null
operator|||
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|str
argument_list|)
condition|)
block|{
return|return
name|answer
return|;
block|}
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|start
init|=
name|str
operator|.
name|indexOf
argument_list|(
name|RAW_TOKEN_PREFIX
argument_list|)
decl_stmt|;
while|while
condition|(
name|start
operator|>=
literal|0
operator|&&
name|offset
operator|<
name|str
operator|.
name|length
argument_list|()
condition|)
block|{
name|offset
operator|=
name|start
operator|+
name|RAW_TOKEN_PREFIX
operator|.
name|length
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RAW_TOKEN_START
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|tokenStart
init|=
name|RAW_TOKEN_PREFIX
operator|+
name|RAW_TOKEN_START
index|[
name|i
index|]
decl_stmt|;
name|char
name|tokenEnd
init|=
name|RAW_TOKEN_END
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|startsWith
argument_list|(
name|tokenStart
argument_list|,
name|start
argument_list|)
condition|)
block|{
name|offset
operator|=
name|scanRawToEnd
argument_list|(
name|str
argument_list|,
name|start
argument_list|,
name|tokenStart
argument_list|,
name|tokenEnd
argument_list|,
name|answer
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|start
operator|=
name|str
operator|.
name|indexOf
argument_list|(
name|RAW_TOKEN_PREFIX
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|scanRawToEnd (String str, int start, String tokenStart, char tokenEnd, List<Pair<Integer>> answer)
specifier|private
specifier|static
name|int
name|scanRawToEnd
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|start
parameter_list|,
name|String
name|tokenStart
parameter_list|,
name|char
name|tokenEnd
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|answer
parameter_list|)
block|{
comment|// we search the first end bracket to close the RAW token
comment|// as opposed to parsing query, this doesn't allow the occurrences of end brackets
comment|// inbetween because this may be used on the host/path parts of URI
comment|// and thus we cannot rely on '&' for detecting the end of a RAW token
name|int
name|end
init|=
name|str
operator|.
name|indexOf
argument_list|(
name|tokenEnd
argument_list|,
name|start
operator|+
name|tokenStart
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|<
literal|0
condition|)
block|{
comment|// still return a pair even if RAW token is not closed
name|answer
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|start
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|str
operator|.
name|length
argument_list|()
return|;
block|}
name|answer
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|end
operator|+
literal|1
return|;
block|}
DECL|method|isRaw (int index, List<Pair<Integer>> pairs)
specifier|public
specifier|static
name|boolean
name|isRaw
parameter_list|(
name|int
name|index
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|pairs
parameter_list|)
block|{
for|for
control|(
name|Pair
argument_list|<
name|Integer
argument_list|>
name|pair
range|:
name|pairs
control|)
block|{
if|if
condition|(
name|index
operator|<
name|pair
operator|.
name|getLeft
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|index
operator|<=
name|pair
operator|.
name|getRight
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|resolveRaw (String str, BiConsumer<String, String> consumer)
specifier|public
specifier|static
name|boolean
name|resolveRaw
parameter_list|(
name|String
name|str
parameter_list|,
name|BiConsumer
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|consumer
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RAW_TOKEN_START
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|tokenStart
init|=
name|RAW_TOKEN_PREFIX
operator|+
name|RAW_TOKEN_START
index|[
name|i
index|]
decl_stmt|;
name|String
name|tokenEnd
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|RAW_TOKEN_END
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|startsWith
argument_list|(
name|tokenStart
argument_list|)
operator|&&
name|str
operator|.
name|endsWith
argument_list|(
name|tokenEnd
argument_list|)
condition|)
block|{
name|String
name|raw
init|=
name|str
operator|.
name|substring
argument_list|(
name|tokenStart
operator|.
name|length
argument_list|()
argument_list|,
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|str
argument_list|,
name|raw
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// not RAW value
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

