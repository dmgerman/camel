begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.validator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ValidatorDtdAccessOnTest
specifier|public
class|class
name|ValidatorDtdAccessOnTest
extends|extends
name|ValidatorDtdAccessAbstractTest
block|{
DECL|method|ValidatorDtdAccessOnTest ()
specifier|public
name|ValidatorDtdAccessOnTest
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that external DTD call is executed for StringSource by expecting an      * UnkonwHostException.      */
annotation|@
name|Test
DECL|method|testInvalidMessageWithExternalDTDStringSource ()
specifier|public
name|void
name|testInvalidMessageWithExternalDTDStringSource
parameter_list|()
throws|throws
name|Exception
block|{
name|unknownHostExceptionEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|finallyEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
name|ssrfPayloud
argument_list|)
expr_stmt|;
name|MockEndpoint
operator|.
name|assertIsSatisfied
argument_list|(
name|validEndpoint
argument_list|,
name|unknownHostExceptionEndpoint
argument_list|,
name|finallyEndpoint
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that external DTD call is executed for StreamSourceby expecting an      * UnkonwHostException.      */
annotation|@
name|Test
DECL|method|testInvalidMessageWithExternalDTDStreamSource ()
specifier|public
name|void
name|testInvalidMessageWithExternalDTDStreamSource
parameter_list|()
throws|throws
name|Exception
block|{
name|unknownHostExceptionEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|finallyEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|ssrfPayloud
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|MockEndpoint
operator|.
name|assertIsSatisfied
argument_list|(
name|validEndpoint
argument_list|,
name|unknownHostExceptionEndpoint
argument_list|,
name|finallyEndpoint
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that XXE is possible for StreamSource by expecting an      * UnkonwHostException.      */
annotation|@
name|Test
DECL|method|testInvalidMessageXXESourceStream ()
specifier|public
name|void
name|testInvalidMessageXXESourceStream
parameter_list|()
throws|throws
name|Exception
block|{
name|unknownHostExceptionEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|finallyEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|xxePayloud
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|MockEndpoint
operator|.
name|assertIsSatisfied
argument_list|(
name|validEndpoint
argument_list|,
name|unknownHostExceptionEndpoint
argument_list|,
name|finallyEndpoint
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

