begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|MyOtherFooBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|MyOtherFooBean
operator|.
name|AbstractClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|MyOtherFooBean
operator|.
name|Clazz
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|MyOtherFooBean
operator|.
name|InterfaceSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
operator|.
name|MyStaticClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ObjectHelperTest
specifier|public
class|class
name|ObjectHelperTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
DECL|method|testLoadResourceAsStream ()
specifier|public
name|void
name|testLoadResourceAsStream
parameter_list|()
block|{
name|InputStream
name|res1
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|loadResourceAsStream
argument_list|(
literal|"org/apache/camel/util/ObjectHelperResourceTestFile.properties"
argument_list|)
decl_stmt|;
name|InputStream
name|res2
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|loadResourceAsStream
argument_list|(
literal|"/org/apache/camel/util/ObjectHelperResourceTestFile.properties"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load resource without leading \"/\""
argument_list|,
name|res1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load resource with leading \"/\""
argument_list|,
name|res2
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|res1
argument_list|,
name|res2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLoadResource ()
specifier|public
name|void
name|testLoadResource
parameter_list|()
block|{
name|URL
name|url1
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|loadResourceAsURL
argument_list|(
literal|"org/apache/camel/util/ObjectHelperResourceTestFile.properties"
argument_list|)
decl_stmt|;
name|URL
name|url2
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|loadResourceAsURL
argument_list|(
literal|"/org/apache/camel/util/ObjectHelperResourceTestFile.properties"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load resource without leading \"/\""
argument_list|,
name|url1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot load resource with leading \"/\""
argument_list|,
name|url2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetPropertyName ()
specifier|public
name|void
name|testGetPropertyName
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|method
init|=
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setCheese"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"should have found a method!"
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|getPropertyName
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Property name"
argument_list|,
literal|"cheese"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|setCheese (String cheese)
specifier|public
name|void
name|setCheese
parameter_list|(
name|String
name|cheese
parameter_list|)
block|{
comment|// used in the above unit test
block|}
annotation|@
name|Test
DECL|method|testContains ()
specifier|public
name|void
name|testContains
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|array
init|=
block|{
literal|"foo"
block|,
literal|"bar"
block|}
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|collection
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
name|array
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
name|collection
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
name|array
argument_list|,
literal|"xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
name|collection
argument_list|,
literal|"xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainsStringBuilder ()
specifier|public
name|void
name|testContainsStringBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
name|sb
argument_list|,
literal|"World"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
name|sb
argument_list|,
operator|new
name|StringBuffer
argument_list|(
literal|"World"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
name|sb
argument_list|,
operator|new
name|StringBuilder
argument_list|(
literal|"World"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
name|sb
argument_list|,
literal|"Camel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
name|sb
argument_list|,
operator|new
name|StringBuffer
argument_list|(
literal|"Camel"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
name|sb
argument_list|,
operator|new
name|StringBuilder
argument_list|(
literal|"Camel"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainsStringBuffer ()
specifier|public
name|void
name|testContainsStringBuffer
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
name|sb
argument_list|,
literal|"World"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
name|sb
argument_list|,
operator|new
name|StringBuffer
argument_list|(
literal|"World"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
name|sb
argument_list|,
operator|new
name|StringBuilder
argument_list|(
literal|"World"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
name|sb
argument_list|,
literal|"Camel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
name|sb
argument_list|,
operator|new
name|StringBuffer
argument_list|(
literal|"Camel"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ObjectHelper
operator|.
name|contains
argument_list|(
name|sb
argument_list|,
operator|new
name|StringBuilder
argument_list|(
literal|"Camel"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEqual ()
specifier|public
name|void
name|testEqual
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|" "
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|"Hello"
argument_list|,
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|123
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|null
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|" "
argument_list|,
literal|"    "
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|"Hello"
argument_list|,
literal|"World"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|a
init|=
operator|new
name|byte
index|[]
block|{
literal|40
block|,
literal|50
block|,
literal|60
block|}
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[]
block|{
literal|40
block|,
literal|50
block|,
literal|60
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|byte
index|[]
block|{
literal|40
block|,
literal|50
block|,
literal|60
block|}
expr_stmt|;
name|b
operator|=
operator|new
name|byte
index|[]
block|{
literal|40
block|,
literal|50
block|,
literal|60
block|,
literal|70
block|}
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEqualByteArray ()
specifier|public
name|void
name|testEqualByteArray
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equalByteArray
argument_list|(
literal|"Hello"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"Hello"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equalByteArray
argument_list|(
literal|"Hello"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"World"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equalByteArray
argument_list|(
literal|"Hello Thai Elephant \u0E08"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"Hello Thai Elephant \u0E08"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equalByteArray
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|empty
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equalByteArray
argument_list|(
name|empty
argument_list|,
name|empty
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|a
init|=
operator|new
name|byte
index|[]
block|{
literal|40
block|,
literal|50
block|,
literal|60
block|}
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[]
block|{
literal|40
block|,
literal|50
block|,
literal|60
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equalByteArray
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|byte
index|[]
block|{
literal|40
block|,
literal|50
block|,
literal|60
block|}
expr_stmt|;
name|b
operator|=
operator|new
name|byte
index|[]
block|{
literal|40
block|,
literal|50
block|,
literal|60
block|,
literal|70
block|}
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equalByteArray
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|byte
index|[]
block|{
literal|40
block|,
literal|50
block|,
literal|60
block|,
literal|70
block|}
expr_stmt|;
name|b
operator|=
operator|new
name|byte
index|[]
block|{
literal|40
block|,
literal|50
block|,
literal|60
block|}
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equalByteArray
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|byte
index|[]
block|{
literal|40
block|,
literal|50
block|,
literal|60
block|}
expr_stmt|;
name|b
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equalByteArray
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
name|b
operator|=
operator|new
name|byte
index|[]
block|{
literal|40
block|,
literal|50
block|,
literal|60
block|}
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equalByteArray
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|byte
index|[]
block|{
literal|40
block|,
literal|50
block|,
literal|60
block|}
expr_stmt|;
name|b
operator|=
literal|null
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equalByteArray
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
literal|null
expr_stmt|;
name|b
operator|=
operator|new
name|byte
index|[]
block|{
literal|40
block|,
literal|50
block|,
literal|60
block|}
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equalByteArray
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
literal|null
expr_stmt|;
name|b
operator|=
literal|null
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equalByteArray
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateIterator ()
specifier|public
name|void
name|testCreateIterator
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
literal|"Should return the same iterator"
argument_list|,
name|iterator
argument_list|,
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateIteratorAllowEmpty ()
specifier|public
name|void
name|testCreateIteratorAllowEmpty
parameter_list|()
block|{
name|String
name|s
init|=
literal|"a,b,,c"
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|s
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateIteratorPattern ()
specifier|public
name|void
name|testCreateIteratorPattern
parameter_list|()
block|{
name|String
name|s
init|=
literal|"a\nb\rc"
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|s
argument_list|,
literal|"\n|\r"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateIteratorWithStringAndCommaSeparator ()
specifier|public
name|void
name|testCreateIteratorWithStringAndCommaSeparator
parameter_list|()
block|{
name|String
name|s
init|=
literal|"a,b,c"
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|s
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateIteratorWithStringAndCommaSeparatorEmptyString ()
specifier|public
name|void
name|testCreateIteratorWithStringAndCommaSeparatorEmptyString
parameter_list|()
block|{
name|String
name|s
init|=
literal|""
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|s
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertEquals
argument_list|(
literal|"no more element available for '' at the index 1"
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateIteratorWithStringAndSemiColonSeparator ()
specifier|public
name|void
name|testCreateIteratorWithStringAndSemiColonSeparator
parameter_list|()
block|{
name|String
name|s
init|=
literal|"a;b;c"
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|s
argument_list|,
literal|";"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateIteratorWithStringAndCommaInParanthesesSeparator ()
specifier|public
name|void
name|testCreateIteratorWithStringAndCommaInParanthesesSeparator
parameter_list|()
block|{
name|String
name|s
init|=
literal|"bean:foo?method=bar('A','B','C')"
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|s
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bean:foo?method=bar('A','B','C')"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateIteratorWithStringAndCommaInParanthesesSeparatorTwo ()
specifier|public
name|void
name|testCreateIteratorWithStringAndCommaInParanthesesSeparatorTwo
parameter_list|()
block|{
name|String
name|s
init|=
literal|"bean:foo?method=bar('A','B','C'),bean:bar?method=cool('A','Hello,World')"
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|s
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bean:foo?method=bar('A','B','C')"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bean:bar?method=cool('A','Hello,World')"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// CHECKSTYLE:OFF
annotation|@
name|Test
DECL|method|testCreateIteratorWithPrimitiveArrayTypes ()
specifier|public
name|void
name|testCreateIteratorWithPrimitiveArrayTypes
parameter_list|()
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|13
block|,
name|Byte
operator|.
name|MAX_VALUE
block|,
literal|7
block|,
name|Byte
operator|.
name|MIN_VALUE
block|}
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|13
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|7
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|MIN_VALUE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"no more element available for '[B@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"at the index 4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"no more element available for '[B@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"at the index 0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
operator|new
name|short
index|[]
block|{
literal|13
block|,
name|Short
operator|.
name|MAX_VALUE
block|,
literal|7
block|,
name|Short
operator|.
name|MIN_VALUE
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|13
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|7
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"no more element available for '[S@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"at the index 4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
operator|new
name|short
index|[]
block|{}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"no more element available for '[S@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"at the index 0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
operator|new
name|int
index|[]
block|{
literal|13
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
literal|7
block|,
name|Integer
operator|.
name|MIN_VALUE
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|13
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|7
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"no more element available for '[I@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"at the index 4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
operator|new
name|int
index|[]
block|{}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"no more element available for '[I@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"at the index 0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
operator|new
name|long
index|[]
block|{
literal|13L
block|,
name|Long
operator|.
name|MAX_VALUE
block|,
literal|7L
block|,
name|Long
operator|.
name|MIN_VALUE
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|13
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|7
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"no more element available for '[J@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"at the index 4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
operator|new
name|long
index|[]
block|{}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"no more element available for '[J@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"at the index 0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
operator|new
name|float
index|[]
block|{
literal|13.7F
block|,
name|Float
operator|.
name|MAX_VALUE
block|,
literal|7.13F
block|,
name|Float
operator|.
name|MIN_VALUE
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|13.7F
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|MAX_VALUE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|7.13F
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|MIN_VALUE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"no more element available for '[F@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"at the index 4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
operator|new
name|float
index|[]
block|{}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"no more element available for '[F@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"at the index 0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
operator|new
name|double
index|[]
block|{
literal|13.7D
block|,
name|Double
operator|.
name|MAX_VALUE
block|,
literal|7.13D
block|,
name|Double
operator|.
name|MIN_VALUE
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|13.7D
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|7.13D
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|MIN_VALUE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"no more element available for '[D@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"at the index 4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
operator|new
name|double
index|[]
block|{}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"no more element available for '[D@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"at the index 0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
operator|new
name|char
index|[]
block|{
literal|'C'
block|,
literal|'a'
block|,
literal|'m'
block|,
literal|'e'
block|,
literal|'l'
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Character
operator|.
name|valueOf
argument_list|(
literal|'C'
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Character
operator|.
name|valueOf
argument_list|(
literal|'a'
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Character
operator|.
name|valueOf
argument_list|(
literal|'m'
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Character
operator|.
name|valueOf
argument_list|(
literal|'e'
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Character
operator|.
name|valueOf
argument_list|(
literal|'l'
argument_list|)
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"no more element available for '[C@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"at the index 5"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
operator|new
name|char
index|[]
block|{}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"no more element available for '[C@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"at the index 0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"no more element available for '[Z@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"at the index 5"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
operator|new
name|boolean
index|[]
block|{}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"no more element available for '[Z@"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"at the index 0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// CHECKSTYLE:ON
annotation|@
name|Test
DECL|method|testArrayAsIterator ()
specifier|public
name|void
name|testArrayAsIterator
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|data
init|=
block|{
literal|"a"
block|,
literal|"b"
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|iter
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"should have next"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|a
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"should have next"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|b
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
literal|"b"
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"should not have a next"
argument_list|,
name|iter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsEmpty ()
specifier|public
name|void
name|testIsEmpty
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
literal|" A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
literal|" A "
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsNotEmpty ()
specifier|public
name|void
name|testIsNotEmpty
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
literal|" A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
literal|" A "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIteratorWithComma ()
specifier|public
name|void
name|testIteratorWithComma
parameter_list|()
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
literal|"Claus,Jonathan"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Claus"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Jonathan"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIteratorWithOtherDelimiter ()
specifier|public
name|void
name|testIteratorWithOtherDelimiter
parameter_list|()
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
literal|"Claus#Jonathan"
argument_list|,
literal|"#"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Claus"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Jonathan"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIteratorEmpty ()
specifier|public
name|void
name|testIteratorEmpty
parameter_list|()
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertEquals
argument_list|(
literal|"no more element available for '' at the index 0"
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertEquals
argument_list|(
literal|"no more element available for '    ' at the index 0"
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testIteratorIdempotentNext ()
specifier|public
name|void
name|testIteratorIdempotentNext
parameter_list|()
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertEquals
argument_list|(
literal|"no more element available for 'a' at the index 1"
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIteratorIdempotentNextWithNodeList ()
specifier|public
name|void
name|testIteratorIdempotentNextWithNodeList
parameter_list|()
block|{
name|NodeList
name|nodeList
init|=
operator|new
name|NodeList
argument_list|()
block|{
specifier|public
name|Node
name|item
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|nodeList
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"no more element available for 'org.apache.camel.util.ObjectHelperTest$"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"at the index 1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetCamelContextPropertiesWithPrefix ()
specifier|public
name|void
name|testGetCamelContextPropertiesWithPrefix
parameter_list|()
block|{
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|context
operator|.
name|getGlobalOptions
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"camel.object.helper.test1"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"camel.object.helper.test2"
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"camel.object.test"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|Properties
name|result
init|=
name|CamelContextHelper
operator|.
name|getCamelPropertiesWithPrefix
argument_list|(
literal|"camel.object.helper."
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong size properties"
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"It should contain the test1"
argument_list|,
literal|"test1"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"It should contain the test2"
argument_list|,
literal|"test2"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEvaluateAsPredicate ()
specifier|public
name|void
name|testEvaluateAsPredicate
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|evaluateValuePredicate
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|evaluateValuePredicate
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|evaluateValuePredicate
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|evaluateValuePredicate
argument_list|(
literal|"TRUE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|evaluateValuePredicate
argument_list|(
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|evaluateValuePredicate
argument_list|(
literal|"FALSE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|evaluateValuePredicate
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|evaluateValuePredicate
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|evaluateValuePredicate
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|evaluateValuePredicate
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|evaluateValuePredicate
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsPrimitiveArrayType ()
specifier|public
name|void
name|testIsPrimitiveArrayType
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|short
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|int
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|long
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|float
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|double
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|char
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|boolean
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|Byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|Short
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|Integer
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|Long
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|Float
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|Double
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|Character
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|Boolean
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|Void
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
name|CamelContext
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isPrimitiveArrayType
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetDefaultCharSet ()
specifier|public
name|void
name|testGetDefaultCharSet
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|getDefaultCharacterSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertPrimitiveTypeToWrapper ()
specifier|public
name|void
name|testConvertPrimitiveTypeToWrapper
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"java.lang.Integer"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|convertPrimitiveTypeToWrapperType
argument_list|(
name|int
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.lang.Long"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|convertPrimitiveTypeToWrapperType
argument_list|(
name|long
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.lang.Double"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|convertPrimitiveTypeToWrapperType
argument_list|(
name|double
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.lang.Float"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|convertPrimitiveTypeToWrapperType
argument_list|(
name|float
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.lang.Short"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|convertPrimitiveTypeToWrapperType
argument_list|(
name|short
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.lang.Byte"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|convertPrimitiveTypeToWrapperType
argument_list|(
name|byte
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.lang.Boolean"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|convertPrimitiveTypeToWrapperType
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"java.lang.Character"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|convertPrimitiveTypeToWrapperType
argument_list|(
name|char
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// non primitive just fall through
name|assertEquals
argument_list|(
literal|"java.lang.Object"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|convertPrimitiveTypeToWrapperType
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsString ()
specifier|public
name|void
name|testAsString
parameter_list|()
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|}
decl_stmt|;
name|String
name|out
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|asString
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{foo, bar}"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testName ()
specifier|public
name|void
name|testName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"java.lang.Integer"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|name
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|name
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClassName ()
specifier|public
name|void
name|testClassName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"java.lang.Integer"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|className
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|className
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetSystemPropertyDefault ()
specifier|public
name|void
name|testGetSystemPropertyDefault
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|getSystemProperty
argument_list|(
literal|"CamelFooDoesNotExist"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetSystemPropertyBooleanDefault ()
specifier|public
name|void
name|testGetSystemPropertyBooleanDefault
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|getSystemProperty
argument_list|(
literal|"CamelFooDoesNotExist"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMatches ()
specifier|public
name|void
name|testMatches
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|data
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|data
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|matches
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|clear
argument_list|()
expr_stmt|;
name|data
operator|.
name|add
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|data
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|matches
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|matches
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToBoolean ()
specifier|public
name|void
name|testToBoolean
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|toBoolean
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|toBoolean
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|toBoolean
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|toBoolean
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|toBoolean
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIteratorWithMessage ()
specifier|public
name|void
name|testIteratorWithMessage
parameter_list|()
block|{
name|Message
name|msg
init|=
operator|new
name|DefaultMessage
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setBody
argument_list|(
literal|"a,b,c"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testIteratorWithEmptyMessage ()
specifier|public
name|void
name|testIteratorWithEmptyMessage
parameter_list|()
block|{
name|Message
name|msg
init|=
operator|new
name|DefaultMessage
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setBody
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
name|assertEquals
argument_list|(
literal|"no more element available for '' at the index 0"
argument_list|,
name|nsee
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIteratorWithNullMessage ()
specifier|public
name|void
name|testIteratorWithNullMessage
parameter_list|()
block|{
name|Message
name|msg
init|=
operator|new
name|DefaultMessage
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setBody
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testIterable ()
specifier|public
name|void
name|testIterable
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|data
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|add
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|data
operator|.
name|add
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|data
operator|.
name|add
argument_list|(
literal|"C"
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|itb
init|=
operator|new
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|data
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|itb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"B"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"C"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|nsee
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testLookupConstantFieldValue ()
specifier|public
name|void
name|testLookupConstantFieldValue
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"CamelFileName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|lookupConstantFieldValue
argument_list|(
name|Exchange
operator|.
name|class
argument_list|,
literal|"FILE_NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|lookupConstantFieldValue
argument_list|(
name|Exchange
operator|.
name|class
argument_list|,
literal|"XXX"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|lookupConstantFieldValue
argument_list|(
literal|null
argument_list|,
literal|"FILE_NAME"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHasDefaultPublicNoArgConstructor ()
specifier|public
name|void
name|testHasDefaultPublicNoArgConstructor
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|hasDefaultPublicNoArgConstructor
argument_list|(
name|ObjectHelperTest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|hasDefaultPublicNoArgConstructor
argument_list|(
name|MyStaticClass
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIdentityHashCode ()
specifier|public
name|void
name|testIdentityHashCode
parameter_list|()
block|{
name|MyDummyObject
name|dummy
init|=
operator|new
name|MyDummyObject
argument_list|(
literal|"Camel"
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|getIdentityHashCode
argument_list|(
name|dummy
argument_list|)
decl_stmt|;
name|String
name|code2
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|getIdentityHashCode
argument_list|(
name|dummy
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|code
argument_list|,
name|code2
argument_list|)
expr_stmt|;
name|MyDummyObject
name|dummyB
init|=
operator|new
name|MyDummyObject
argument_list|(
literal|"Camel"
argument_list|)
decl_stmt|;
name|String
name|code3
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|getIdentityHashCode
argument_list|(
name|dummyB
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|code
argument_list|,
name|code3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsNaN ()
specifier|public
name|void
name|testIsNaN
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNaN
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNaN
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNaN
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNaN
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNaN
argument_list|(
literal|"1.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNaN
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNaN
argument_list|(
literal|1.5f
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNaN
argument_list|(
literal|1.5d
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNaN
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNaN
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotNull ()
specifier|public
name|void
name|testNotNull
parameter_list|()
block|{
name|Long
name|expected
init|=
literal|3L
decl_stmt|;
name|Long
name|actual
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|expected
argument_list|,
literal|"expected"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"Didn't get the same object back!"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|Long
name|actual2
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|expected
argument_list|,
literal|"expected"
argument_list|,
literal|"holder"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"Didn't get the same object back!"
argument_list|,
name|expected
argument_list|,
name|actual2
argument_list|)
expr_stmt|;
name|Long
name|expected2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|expected2
argument_list|,
literal|"expected2"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"expected2 must be specified"
argument_list|,
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|expected2
argument_list|,
literal|"expected2"
argument_list|,
literal|"holder"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"expected2 must be specified on: holder"
argument_list|,
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSameMethodIsOverride ()
specifier|public
name|void
name|testSameMethodIsOverride
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m
init|=
name|MyOtherFooBean
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"toString"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isOverridingMethod
argument_list|(
name|m
argument_list|,
name|m
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOverloadIsNotOverride ()
specifier|public
name|void
name|testOverloadIsNotOverride
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m1
init|=
name|MyOtherFooBean
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"toString"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|m2
init|=
name|MyOtherFooBean
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"toString"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isOverridingMethod
argument_list|(
name|m2
argument_list|,
name|m1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOverrideEquivalentSignatureFromSiblingClassIsNotOverride ()
specifier|public
name|void
name|testOverrideEquivalentSignatureFromSiblingClassIsNotOverride
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m1
init|=
name|Double
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"intValue"
argument_list|)
decl_stmt|;
name|Method
name|m2
init|=
name|Float
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"intValue"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isOverridingMethod
argument_list|(
name|m2
argument_list|,
name|m1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOverrideEquivalentSignatureFromUpperClassIsOverride ()
specifier|public
name|void
name|testOverrideEquivalentSignatureFromUpperClassIsOverride
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m1
init|=
name|Double
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"intValue"
argument_list|)
decl_stmt|;
name|Method
name|m2
init|=
name|Number
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"intValue"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isOverridingMethod
argument_list|(
name|m2
argument_list|,
name|m1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInheritedMethodCanOverrideInterfaceMethod ()
specifier|public
name|void
name|testInheritedMethodCanOverrideInterfaceMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m1
init|=
name|AbstractClassSize
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
name|Method
name|m2
init|=
name|InterfaceSize
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isOverridingMethod
argument_list|(
name|Clazz
operator|.
name|class
argument_list|,
name|m2
argument_list|,
name|m1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonInheritedMethodCantOverrideInterfaceMethod ()
specifier|public
name|void
name|testNonInheritedMethodCantOverrideInterfaceMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m1
init|=
name|AbstractClassSize
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
name|Method
name|m2
init|=
name|InterfaceSize
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isOverridingMethod
argument_list|(
name|InterfaceSize
operator|.
name|class
argument_list|,
name|m2
argument_list|,
name|m1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

