begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BeanInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BindToRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExtendedCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelBeanPostProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|BindToRegistryBeanPostProcessorTest
specifier|public
class|class
name|BindToRegistryBeanPostProcessorTest
extends|extends
name|ContextTestSupport
block|{
comment|// field
annotation|@
name|BindToRegistry
argument_list|(
name|beanPostProcess
operator|=
literal|true
argument_list|)
DECL|field|foo
specifier|private
name|FooService
name|foo
init|=
operator|new
name|FooService
argument_list|()
decl_stmt|;
comment|// method
annotation|@
name|BindToRegistry
argument_list|(
name|beanPostProcess
operator|=
literal|true
argument_list|)
DECL|method|myOtherFoo ()
specifier|public
name|FooService
name|myOtherFoo
parameter_list|()
block|{
return|return
operator|new
name|FooService
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testPostProcessor ()
specifier|public
name|void
name|testPostProcessor
parameter_list|()
throws|throws
name|Exception
block|{
comment|// bean post processing dont run on ContextTestSupport
name|CamelBeanPostProcessor
name|cbpp
init|=
name|context
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanPostProcessor
argument_list|()
decl_stmt|;
name|cbpp
operator|.
name|postProcessBeforeInitialization
argument_list|(
name|this
argument_list|,
literal|"this"
argument_list|)
expr_stmt|;
name|cbpp
operator|.
name|postProcessAfterInitialization
argument_list|(
name|this
argument_list|,
literal|"this"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|context
argument_list|,
name|foo
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|FooService
name|other
init|=
operator|(
name|FooService
operator|)
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByName
argument_list|(
literal|"myOtherFoo"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|context
argument_list|,
name|other
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|FooService
specifier|public
class|class
name|FooService
block|{
annotation|@
name|BeanInject
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

