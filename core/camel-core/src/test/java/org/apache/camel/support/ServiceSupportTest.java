begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ServiceSupportTest
specifier|public
class|class
name|ServiceSupportTest
extends|extends
name|TestSupport
block|{
DECL|class|MyService
specifier|private
specifier|static
class|class
name|MyService
extends|extends
name|ServiceSupport
block|{
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{         }
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{         }
block|}
annotation|@
name|Test
DECL|method|testServiceSupport ()
specifier|public
name|void
name|testServiceSupport
parameter_list|()
throws|throws
name|Exception
block|{
name|MyService
name|service
init|=
operator|new
name|MyService
argument_list|()
decl_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|service
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isStarting
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isStopping
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|service
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isStopping
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isStarting
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testServiceSupportIsRunAllowed ()
specifier|public
name|void
name|testServiceSupportIsRunAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|MyService
name|service
init|=
operator|new
name|MyService
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isRunAllowed
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|service
operator|.
name|isRunAllowed
argument_list|()
argument_list|)
expr_stmt|;
comment|// we are allowed to run while suspending/suspended
name|service
operator|.
name|suspend
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|service
operator|.
name|isRunAllowed
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|resume
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|service
operator|.
name|isRunAllowed
argument_list|()
argument_list|)
expr_stmt|;
comment|// but if we are stopped then we are not
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isRunAllowed
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isRunAllowed
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MyShutdownService
specifier|private
specifier|static
class|class
name|MyShutdownService
extends|extends
name|ServiceSupport
block|{
DECL|field|shutdown
specifier|private
name|boolean
name|shutdown
decl_stmt|;
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{         }
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{         }
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|protected
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|shutdown
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|isShutdown ()
specifier|public
name|boolean
name|isShutdown
parameter_list|()
block|{
return|return
name|shutdown
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testServiceSupportShutdown ()
specifier|public
name|void
name|testServiceSupportShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|MyShutdownService
name|service
init|=
operator|new
name|MyShutdownService
argument_list|()
decl_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|service
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isStarting
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isStopping
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|service
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isStopping
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isStarting
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|service
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionOnStart ()
specifier|public
name|void
name|testExceptionOnStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceSupportTestExOnStart
name|service
init|=
operator|new
name|ServiceSupportTestExOnStart
argument_list|()
decl_stmt|;
comment|// forced not being stopped at start
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"RuntimeException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|service
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isStopping
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|service
operator|.
name|isStarting
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ServiceSupportTestExOnStart
specifier|public
specifier|static
class|class
name|ServiceSupportTestExOnStart
extends|extends
name|ServiceSupport
block|{
DECL|method|ServiceSupportTestExOnStart ()
specifier|public
name|ServiceSupportTestExOnStart
parameter_list|()
block|{
comment|// just for testing force it to not be stopped
name|status
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"This service throws an exception when starting"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{         }
block|}
block|}
end_class

end_unit

