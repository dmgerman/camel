begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|StreamCachingInOutTest
specifier|public
class|class
name|StreamCachingInOutTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|TEST_FILE
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FILE
init|=
literal|"org/apache/camel/processor/simple.txt"
decl_stmt|;
annotation|@
name|Test
DECL|method|testStreamCachingPerRoute ()
specifier|public
name|void
name|testStreamCachingPerRoute
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|c
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:c"
argument_list|)
decl_stmt|;
name|c
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|InputStream
name|message
init|=
name|getTestFileStream
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:c"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|c
operator|.
name|assertExchangeReceived
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
literal|"James,Guillaume,Hiram,Rob,Roman"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStreamCachingPerRouteWithDirecVM ()
specifier|public
name|void
name|testStreamCachingPerRouteWithDirecVM
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|e
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:e"
argument_list|)
decl_stmt|;
name|e
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|InputStream
name|message
init|=
name|getTestFileStream
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:e"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|assertExchangeReceived
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
literal|"James,Guillaume,Hiram,Rob,Roman"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setSpoolThreshold
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:c"
argument_list|)
operator|.
name|noStreamCaching
argument_list|()
operator|.
name|to
argument_list|(
literal|"direct:d"
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:c"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:d"
argument_list|)
operator|.
name|streamCaching
argument_list|()
operator|.
name|process
argument_list|(
operator|new
name|TestProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:e"
argument_list|)
operator|.
name|noStreamCaching
argument_list|()
operator|.
name|to
argument_list|(
literal|"direct-vm:f"
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:e"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct-vm:f"
argument_list|)
operator|.
name|streamCaching
argument_list|()
operator|.
name|process
argument_list|(
operator|new
name|TestProcessor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|// have a test processor that reads the stream and makes sure it is reset
DECL|class|TestProcessor
specifier|private
class|class
name|TestProcessor
implements|implements
name|Processor
block|{
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// there is some special handling for ByteArrayInputStream so we read
comment|// InputStreams from a file
DECL|method|getTestFileStream ()
specifier|private
name|InputStream
name|getTestFileStream
parameter_list|()
block|{
name|InputStream
name|answer
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|TEST_FILE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have found the file: "
operator|+
name|TEST_FILE
operator|+
literal|" on the classpath"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

