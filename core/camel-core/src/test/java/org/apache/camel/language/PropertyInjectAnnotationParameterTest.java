begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PropertyInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|PropertyInjectAnnotationParameterTest
specifier|public
class|class
name|PropertyInjectAnnotationParameterTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Test
DECL|method|testPropertyInjectAnnotationOne ()
specifier|public
name|void
name|testPropertyInjectAnnotationOne
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:one"
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPropertyInjectAnnotationTwo ()
specifier|public
name|void
name|testPropertyInjectAnnotationTwo
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"WorldWorldWorld"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:two"
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPropertyInjectAnnotationThree ()
specifier|public
name|void
name|testPropertyInjectAnnotationThree
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Goodbye World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:three"
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|PropertiesComponent
name|pc
init|=
name|context
operator|.
name|getPropertiesComponent
argument_list|()
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"greeting"
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"times"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|pc
operator|.
name|setInitialProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:one"
argument_list|)
operator|.
name|bean
argument_list|(
name|MyBean
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:two"
argument_list|)
operator|.
name|bean
argument_list|(
name|MyCounterBean
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:three"
argument_list|)
operator|.
name|bean
argument_list|(
name|MyOtherBean
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|MyBean
specifier|public
specifier|static
specifier|final
class|class
name|MyBean
block|{
DECL|method|callA (@ropertyInjectR) String greeting, String body)
specifier|public
name|String
name|callA
parameter_list|(
annotation|@
name|PropertyInject
argument_list|(
literal|"greeting"
argument_list|)
name|String
name|greeting
parameter_list|,
name|String
name|body
parameter_list|)
block|{
return|return
name|greeting
operator|+
literal|" "
operator|+
name|body
return|;
block|}
block|}
DECL|class|MyOtherBean
specifier|public
specifier|static
specifier|final
class|class
name|MyOtherBean
block|{
DECL|method|callA (@ropertyInjectvalue = R, defaultValue = R) String bye, String body)
specifier|public
name|String
name|callA
parameter_list|(
annotation|@
name|PropertyInject
argument_list|(
name|value
operator|=
literal|"bye"
argument_list|,
name|defaultValue
operator|=
literal|"Goodbye"
argument_list|)
name|String
name|bye
parameter_list|,
name|String
name|body
parameter_list|)
block|{
return|return
name|bye
operator|+
literal|" "
operator|+
name|body
return|;
block|}
block|}
DECL|class|MyCounterBean
specifier|public
specifier|static
specifier|final
class|class
name|MyCounterBean
block|{
DECL|method|callA (@ropertyInjectR) int times, String body)
specifier|public
name|String
name|callA
parameter_list|(
annotation|@
name|PropertyInject
argument_list|(
literal|"times"
argument_list|)
name|int
name|times
parameter_list|,
name|String
name|body
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|times
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

