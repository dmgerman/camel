begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel
package|package
name|org
operator|.
name|apache
operator|.
name|camel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
operator|.
name|DefaultProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|AutoCloseableTest
specifier|public
class|class
name|AutoCloseableTest
block|{
annotation|@
name|Test
DECL|method|servicesShouldBeAutoCloseable ()
specifier|public
name|void
name|servicesShouldBeAutoCloseable
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|usedContext
init|=
literal|null
decl_stmt|;
name|ProducerTemplate
name|usedProducer
init|=
literal|null
decl_stmt|;
try|try
init|(
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
init|;
name|ProducerTemplate
name|producer
operator|=
name|context
operator|.
name|createProducerTemplate
argument_list|()
init|)
block|{
name|usedContext
operator|=
name|context
expr_stmt|;
name|usedProducer
operator|=
name|producer
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|log
argument_list|(
literal|"hello ${body}"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|producer
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"word"
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|usedContext
operator|.
name|isStopped
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
operator|(
operator|(
name|DefaultProducerTemplate
operator|)
name|usedProducer
operator|)
operator|.
name|isStopped
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

