begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|RemoveHeaderTest
specifier|public
class|class
name|RemoveHeaderTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|end
specifier|private
name|MockEndpoint
name|end
decl_stmt|;
DECL|field|mid
specifier|private
name|MockEndpoint
name|mid
decl_stmt|;
DECL|field|headerName
specifier|private
name|String
name|headerName
init|=
literal|"foo"
decl_stmt|;
DECL|field|expectedHeaderValue
specifier|private
name|String
name|expectedHeaderValue
init|=
literal|"bar"
decl_stmt|;
annotation|@
name|Test
DECL|method|testSetHeaderMidRouteThenRemove ()
specifier|public
name|void
name|testSetHeaderMidRouteThenRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|mid
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|end
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"<blah/>"
argument_list|)
expr_stmt|;
comment|// make sure we got the message
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|midExchanges
init|=
name|mid
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
name|Exchange
name|midExchange
init|=
name|midExchanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|actualHeaderValue
init|=
name|midExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedHeaderValue
argument_list|,
name|actualHeaderValue
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|endExchanges
init|=
name|end
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
name|Exchange
name|endExchange
init|=
name|endExchanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// header should be removed
name|assertNull
argument_list|(
name|endExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|end
operator|=
name|getMockEndpoint
argument_list|(
literal|"mock:end"
argument_list|)
expr_stmt|;
name|mid
operator|=
name|getMockEndpoint
argument_list|(
literal|"mock:mid"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|headerName
argument_list|)
operator|.
name|constant
argument_list|(
name|expectedHeaderValue
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:mid"
argument_list|)
operator|.
name|removeHeader
argument_list|(
name|headerName
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:end"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

