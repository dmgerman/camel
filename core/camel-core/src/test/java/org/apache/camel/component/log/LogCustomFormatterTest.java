begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.log
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|log
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ResolveEndpointFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExchangeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Custom Exchange Formatter test.  */
end_comment

begin_class
DECL|class|LogCustomFormatterTest
specifier|public
class|class
name|LogCustomFormatterTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|exchangeFormatter
specifier|private
name|TestExchangeFormatter
name|exchangeFormatter
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomFormatterInComponent ()
specifier|public
name|void
name|testCustomFormatterInComponent
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LogComponent
name|log
init|=
operator|new
name|LogComponent
argument_list|()
decl_stmt|;
name|exchangeFormatter
operator|=
operator|new
name|TestExchangeFormatter
argument_list|()
expr_stmt|;
name|log
operator|.
name|setExchangeFormatter
argument_list|(
name|exchangeFormatter
argument_list|)
expr_stmt|;
name|context
operator|.
name|addComponent
argument_list|(
literal|"log"
argument_list|,
name|log
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|endpointUri
init|=
literal|"log:"
operator|+
name|LogCustomFormatterTest
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
decl_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|endpointUri
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|endpointUri
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|endpointUri
operator|+
literal|"2"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|endpointUri
operator|+
literal|"2"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exchangeFormatter
operator|.
name|getCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomFormatterInRegistry ()
specifier|public
name|void
name|testCustomFormatterInRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|exchangeFormatter
operator|=
operator|new
name|TestExchangeFormatter
argument_list|()
expr_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"logFormatter"
argument_list|,
name|exchangeFormatter
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|endpointUri
init|=
literal|"log:"
operator|+
name|LogCustomFormatterTest
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
decl_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|endpointUri
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|endpointUri
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|endpointUri
operator|+
literal|"2"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|endpointUri
operator|+
literal|"2"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|exchangeFormatter
operator|.
name|getCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomFormatterInRegistryOptions ()
specifier|public
name|void
name|testCustomFormatterInRegistryOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|exchangeFormatter
operator|=
operator|new
name|TestExchangeFormatter
argument_list|()
expr_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"logFormatter"
argument_list|,
name|exchangeFormatter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|exchangeFormatter
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|endpointUri
init|=
literal|"log:"
operator|+
name|LogCustomFormatterTest
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"?prefix=foo"
decl_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|endpointUri
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|endpointUri
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|exchangeFormatter
operator|.
name|getCounter
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|exchangeFormatter
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomFormatterInRegistryUnknownOption ()
specifier|public
name|void
name|testCustomFormatterInRegistryUnknownOption
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|exchangeFormatter
operator|=
operator|new
name|TestExchangeFormatter
argument_list|()
expr_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"logFormatter"
argument_list|,
name|exchangeFormatter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|exchangeFormatter
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// unknown parameter
try|try
block|{
name|String
name|endpointUri2
init|=
literal|"log:"
operator|+
name|LogCustomFormatterTest
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"?prefix=foo&bar=no"
decl_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|endpointUri2
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ResolveEndpointFailedException
name|cause
init|=
name|assertIsInstanceOf
argument_list|(
name|ResolveEndpointFailedException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Unknown parameters=[{bar=no}]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFormatterNotPickedUpWithDifferentKey ()
specifier|public
name|void
name|testFormatterNotPickedUpWithDifferentKey
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|exchangeFormatter
operator|=
operator|new
name|TestExchangeFormatter
argument_list|()
expr_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"anotherFormatter"
argument_list|,
name|exchangeFormatter
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|endpointUri
init|=
literal|"log:"
operator|+
name|LogCustomFormatterTest
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
decl_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|endpointUri
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|endpointUri
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|endpointUri
operator|+
literal|"2"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|endpointUri
operator|+
literal|"2"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exchangeFormatter
operator|.
name|getCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|TestExchangeFormatter
specifier|public
specifier|static
class|class
name|TestExchangeFormatter
implements|implements
name|ExchangeFormatter
block|{
DECL|field|counter
specifier|private
name|int
name|counter
decl_stmt|;
DECL|field|addTen
specifier|private
name|boolean
name|addTen
decl_stmt|;
DECL|field|prefix
specifier|private
name|String
name|prefix
init|=
literal|""
decl_stmt|;
annotation|@
name|Override
DECL|method|format (Exchange exchange)
specifier|public
name|String
name|format
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|counter
operator|+=
name|addTen
condition|?
literal|10
else|:
literal|1
expr_stmt|;
return|return
name|prefix
operator|+
name|exchange
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getCounter ()
specifier|public
name|int
name|getCounter
parameter_list|()
block|{
return|return
name|counter
return|;
block|}
DECL|method|isAddTen ()
specifier|public
name|boolean
name|isAddTen
parameter_list|()
block|{
return|return
name|addTen
return|;
block|}
DECL|method|setAddTen (boolean addTen)
specifier|public
name|void
name|setAddTen
parameter_list|(
name|boolean
name|addTen
parameter_list|)
block|{
name|this
operator|.
name|addTen
operator|=
name|addTen
expr_stmt|;
block|}
DECL|method|getPrefix ()
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
DECL|method|setPrefix (String prefix)
specifier|public
name|void
name|setPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

