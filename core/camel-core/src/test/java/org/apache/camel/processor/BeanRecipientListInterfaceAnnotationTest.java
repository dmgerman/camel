begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jndi
operator|.
name|JndiContext
import|;
end_import

begin_class
DECL|class|BeanRecipientListInterfaceAnnotationTest
specifier|public
class|class
name|BeanRecipientListInterfaceAnnotationTest
extends|extends
name|BeanRecipientListTest
block|{
annotation|@
name|Override
DECL|method|checkBean ()
specifier|protected
name|void
name|checkBean
parameter_list|()
throws|throws
name|Exception
block|{
comment|// do nothing here
block|}
annotation|@
name|Override
DECL|method|createJndiContext ()
specifier|protected
name|Context
name|createJndiContext
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiContext
name|answer
init|=
operator|new
name|JndiContext
argument_list|()
decl_stmt|;
name|answer
operator|.
name|bind
argument_list|(
literal|"myBean"
argument_list|,
operator|new
name|MyBean
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|interface|Route
interface|interface
name|Route
block|{
annotation|@
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RecipientList
DECL|method|route (String body)
name|String
index|[]
name|route
parameter_list|(
name|String
name|body
parameter_list|)
function_decl|;
block|}
DECL|class|MyBean
specifier|public
specifier|static
class|class
name|MyBean
implements|implements
name|Route
block|{
DECL|field|counter
specifier|private
specifier|static
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|id
specifier|private
name|int
name|id
decl_stmt|;
DECL|method|MyBean ()
specifier|public
name|MyBean
parameter_list|()
block|{
name|id
operator|=
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"MyBean:"
operator|+
name|id
return|;
block|}
DECL|method|route (String body)
specifier|public
name|String
index|[]
name|route
parameter_list|(
name|String
name|body
parameter_list|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"mock:a"
block|,
literal|"mock:b"
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

