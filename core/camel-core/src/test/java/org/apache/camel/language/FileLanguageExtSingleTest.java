begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LanguageTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|FileConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|FileEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|GenericFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit test for File Language.  */
end_comment

begin_class
DECL|class|FileLanguageExtSingleTest
specifier|public
class|class
name|FileLanguageExtSingleTest
extends|extends
name|LanguageTestSupport
block|{
DECL|field|file
specifier|private
name|File
name|file
decl_stmt|;
DECL|method|getLanguageName ()
specifier|protected
name|String
name|getLanguageName
parameter_list|()
block|{
return|return
literal|"file"
return|;
block|}
annotation|@
name|Test
DECL|method|testFileNoSingleExt ()
specifier|public
name|void
name|testFileNoSingleExt
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"${file:name}"
argument_list|,
literal|"test"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"bye.def.txt"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${file:name.noext}"
argument_list|,
literal|"test"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"bye"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${file:name.noext.single}"
argument_list|,
literal|"test"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"bye.def"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${file:name.ext}"
argument_list|,
literal|"def.txt"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${file:name.ext.single}"
argument_list|,
literal|"txt"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${file:onlyname.noext}"
argument_list|,
literal|"bye"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"${file:onlyname.noext.single}"
argument_list|,
literal|"bye.def"
argument_list|)
expr_stmt|;
block|}
DECL|method|createExchange ()
specifier|public
name|Exchange
name|createExchange
parameter_list|()
block|{
comment|// create the file
name|String
name|uri
init|=
literal|"file://target/data/filelanguage?fileExist=Override"
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|uri
argument_list|,
literal|"Bye World"
argument_list|,
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
literal|"test/bye.def.txt"
argument_list|)
expr_stmt|;
comment|// get the file handle
name|file
operator|=
operator|new
name|File
argument_list|(
literal|"target/data/filelanguage/test/bye.def.txt"
argument_list|)
expr_stmt|;
name|GenericFile
argument_list|<
name|File
argument_list|>
name|gf
init|=
name|FileConsumer
operator|.
name|asGenericFile
argument_list|(
literal|"target/data/filelanguage"
argument_list|,
name|file
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|FileEndpoint
name|endpoint
init|=
name|getMandatoryEndpoint
argument_list|(
name|uri
argument_list|,
name|FileEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|answer
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|gf
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|configureMessage
argument_list|(
name|gf
argument_list|,
name|answer
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|1974
argument_list|,
name|Calendar
operator|.
name|APRIL
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|answer
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"birthday"
argument_list|,
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
literal|2008
argument_list|,
name|Calendar
operator|.
name|AUGUST
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|answer
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"special"
argument_list|,
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

