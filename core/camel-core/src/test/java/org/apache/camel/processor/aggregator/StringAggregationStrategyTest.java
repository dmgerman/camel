begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.aggregator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|AggregationStrategies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|StringAggregationStrategyTest
specifier|public
class|class
name|StringAggregationStrategyTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Test
DECL|method|testAggregateString ()
specifier|public
name|void
name|testAggregateString
parameter_list|()
throws|throws
name|Exception
block|{
comment|// for testing to string type conversion inside aggregator
name|Object
name|objectBody
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|objectHeader
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:aggregatedBody"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"bodyAbodyB"
operator|+
name|objectBody
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:aggregatedBodyComma"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"bodyA, bodyB, "
operator|+
name|objectBody
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:aggregatedBodyLines"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"bodyA\nbodyB\n"
operator|+
name|objectBody
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:aggregatedHeader"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"headerAheaderB"
operator|+
name|objectHeader
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:aggregatedHeaderComma"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"headerA, headerB, "
operator|+
name|objectHeader
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:aggregatedHeaderLines"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"headerA\nheaderB\n"
operator|+
name|objectHeader
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|"bodyA"
argument_list|,
literal|"header"
argument_list|,
literal|"headerA"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|"bodyB"
argument_list|,
literal|"header"
argument_list|,
literal|"headerB"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
name|objectBody
argument_list|,
literal|"header"
argument_list|,
name|objectHeader
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"direct:aggregateBody"
argument_list|,
literal|"direct:aggregateBodyComma"
argument_list|,
literal|"direct:aggregateBodyLines"
argument_list|,
literal|"direct:aggregateHeader"
argument_list|,
literal|"direct:aggregateHeaderComma"
argument_list|,
literal|"direct:aggregateHeaderLines"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:aggregateBody"
argument_list|)
operator|.
name|aggregate
argument_list|(
name|constant
argument_list|(
literal|true
argument_list|)
argument_list|,
name|AggregationStrategies
operator|.
name|string
argument_list|()
argument_list|)
operator|.
name|completionSize
argument_list|(
literal|3
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:aggregatedBody"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:aggregateBodyComma"
argument_list|)
operator|.
name|aggregate
argument_list|(
name|constant
argument_list|(
literal|true
argument_list|)
argument_list|,
name|AggregationStrategies
operator|.
name|string
argument_list|()
operator|.
name|delimiter
argument_list|(
literal|", "
argument_list|)
argument_list|)
operator|.
name|completionSize
argument_list|(
literal|3
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:aggregatedBodyComma"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:aggregateBodyLines"
argument_list|)
operator|.
name|aggregate
argument_list|(
name|constant
argument_list|(
literal|true
argument_list|)
argument_list|,
name|AggregationStrategies
operator|.
name|string
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
operator|.
name|completionSize
argument_list|(
literal|3
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:aggregatedBodyLines"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:aggregateHeader"
argument_list|)
operator|.
name|aggregate
argument_list|(
name|constant
argument_list|(
literal|true
argument_list|)
argument_list|,
name|AggregationStrategies
operator|.
name|string
argument_list|()
operator|.
name|pick
argument_list|(
name|header
argument_list|(
literal|"header"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|completionSize
argument_list|(
literal|3
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:aggregatedHeader"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:aggregateHeaderComma"
argument_list|)
operator|.
name|aggregate
argument_list|(
name|constant
argument_list|(
literal|true
argument_list|)
argument_list|,
name|AggregationStrategies
operator|.
name|string
argument_list|(
literal|", "
argument_list|)
operator|.
name|pick
argument_list|(
name|header
argument_list|(
literal|"header"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|completionSize
argument_list|(
literal|3
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:aggregatedHeaderComma"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:aggregateHeaderLines"
argument_list|)
operator|.
name|aggregate
argument_list|(
name|constant
argument_list|(
literal|true
argument_list|)
argument_list|,
name|AggregationStrategies
operator|.
name|string
argument_list|()
operator|.
name|pick
argument_list|(
name|header
argument_list|(
literal|"header"
argument_list|)
argument_list|)
operator|.
name|delimiter
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
operator|.
name|completionSize
argument_list|(
literal|3
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:aggregatedHeaderLines"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

