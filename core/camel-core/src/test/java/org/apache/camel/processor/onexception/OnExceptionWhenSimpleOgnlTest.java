begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.onexception
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|onexception
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|OnExceptionWhenSimpleOgnlTest
specifier|public
class|class
name|OnExceptionWhenSimpleOgnlTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Test
DECL|method|testOnExceptionWhenSimpleOgnl ()
specifier|public
name|void
name|testOnExceptionWhenSimpleOgnl
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:three"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|onException
argument_list|(
name|MyException
operator|.
name|class
argument_list|)
comment|// OGNL on the exception function in the simple language
operator|.
name|onWhen
argument_list|(
name|simple
argument_list|(
literal|"${exception.info.state} == 3"
argument_list|)
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:three"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|throwException
argument_list|(
operator|new
name|MyException
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|MyException
specifier|public
specifier|static
specifier|final
class|class
name|MyException
extends|extends
name|Exception
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|info
specifier|private
specifier|final
name|MyExceptionInfo
name|info
decl_stmt|;
DECL|method|MyException (int state)
specifier|public
name|MyException
parameter_list|(
name|int
name|state
parameter_list|)
block|{
name|this
operator|.
name|info
operator|=
operator|new
name|MyExceptionInfo
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
DECL|method|getInfo ()
specifier|public
name|MyExceptionInfo
name|getInfo
parameter_list|()
block|{
return|return
name|info
return|;
block|}
block|}
DECL|class|MyExceptionInfo
specifier|public
specifier|static
specifier|final
class|class
name|MyExceptionInfo
block|{
DECL|field|state
specifier|private
specifier|final
name|int
name|state
decl_stmt|;
DECL|method|MyExceptionInfo (int state)
specifier|public
name|MyExceptionInfo
parameter_list|(
name|int
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
DECL|method|getState ()
specifier|public
name|int
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
block|}
block|}
end_class

end_unit

