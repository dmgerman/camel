begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.validator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|validator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|processor
operator|.
name|validation
operator|.
name|SchemaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_class
DECL|class|ValidatorDtdAccessAbstractTest
specifier|public
specifier|abstract
class|class
name|ValidatorDtdAccessAbstractTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|finallyEndpoint
specifier|protected
name|MockEndpoint
name|finallyEndpoint
decl_stmt|;
DECL|field|invalidEndpoint
specifier|protected
name|MockEndpoint
name|invalidEndpoint
decl_stmt|;
DECL|field|unknownHostExceptionEndpoint
specifier|protected
name|MockEndpoint
name|unknownHostExceptionEndpoint
decl_stmt|;
DECL|field|validEndpoint
specifier|protected
name|MockEndpoint
name|validEndpoint
decl_stmt|;
DECL|field|payloud
specifier|protected
name|String
name|payloud
init|=
name|getPayloudPart
argument_list|(
literal|"Hello world!"
argument_list|)
decl_stmt|;
DECL|field|ssrfPayloud
specifier|protected
name|String
name|ssrfPayloud
init|=
literal|"<!DOCTYPE roottag PUBLIC \"-//VSR//PENTEST//EN\" \"http://notex.isting/test\">\n"
operator|+
name|payloud
decl_stmt|;
DECL|field|xxePayloud
specifier|protected
name|String
name|xxePayloud
init|=
literal|"<!DOCTYPE updateProfile [<!ENTITY file SYSTEM \"http://notex.istinghost/test\">]>\n"
operator|+
name|getPayloudPart
argument_list|(
literal|"&file;"
argument_list|)
decl_stmt|;
DECL|field|accessExternalDTD
specifier|private
specifier|final
name|boolean
name|accessExternalDTD
decl_stmt|;
DECL|method|ValidatorDtdAccessAbstractTest (boolean accessExternalDTD)
specifier|public
name|ValidatorDtdAccessAbstractTest
parameter_list|(
name|boolean
name|accessExternalDTD
parameter_list|)
block|{
name|this
operator|.
name|accessExternalDTD
operator|=
name|accessExternalDTD
expr_stmt|;
block|}
DECL|method|getPayloudPart (String bodyValue)
specifier|private
name|String
name|getPayloudPart
parameter_list|(
name|String
name|bodyValue
parameter_list|)
block|{
return|return
literal|"<mail xmlns='http://foo.com/bar'><subject>Hey</subject><body>"
operator|+
name|bodyValue
operator|+
literal|"</body></mail>"
return|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|validEndpoint
operator|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:valid"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|invalidEndpoint
operator|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:invalid"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|unknownHostExceptionEndpoint
operator|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:unknownHostException"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|finallyEndpoint
operator|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:finally"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// switch on DTD Access
if|if
condition|(
name|accessExternalDTD
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|put
argument_list|(
name|SchemaReader
operator|.
name|ACCESS_EXTERNAL_DTD
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|doTry
argument_list|()
operator|.
name|to
argument_list|(
literal|"validator:org/apache/camel/component/validator/schema.xsd"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:valid"
argument_list|)
operator|.
name|doCatch
argument_list|(
name|ValidationException
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:invalid"
argument_list|)
operator|.
name|doCatch
argument_list|(
name|UnknownHostException
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unknownHostException"
argument_list|)
operator|.
name|doFinally
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:finally"
argument_list|)
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

