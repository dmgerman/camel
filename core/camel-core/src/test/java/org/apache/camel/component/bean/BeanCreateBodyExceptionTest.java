begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|BeanCreateBodyExceptionTest
specifier|public
class|class
name|BeanCreateBodyExceptionTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Test
DECL|method|testCreateBodyFirstTimeException ()
specifier|public
name|void
name|testCreateBodyFirstTimeException
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:dead"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:start"
argument_list|,
name|e
lambda|->
block|{
name|e
operator|.
name|setIn
argument_list|(
operator|new
name|DefaultMessage
argument_list|(
name|e
argument_list|)
block|{
specifier|private
name|boolean
name|created
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Object
name|createBody
parameter_list|()
block|{
if|if
condition|(
operator|!
name|created
condition|)
block|{
name|created
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Forced internal error"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
literal|"Hello World"
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateBodyAlwaysException ()
specifier|public
name|void
name|testCreateBodyAlwaysException
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:dead"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"direct:start"
argument_list|,
name|e
lambda|->
block|{
name|e
operator|.
name|setIn
argument_list|(
operator|new
name|DefaultMessage
argument_list|(
name|e
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Object
name|createBody
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Forced internal error"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore
block|}
comment|// mock:dead should have as failure as createBody fails so cannot do defensive copy in mock
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getMockEndpoint
argument_list|(
literal|"mock:dead"
argument_list|)
operator|.
name|getFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Throwable
name|e
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:dead"
argument_list|)
operator|.
name|getFailures
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Forced internal error"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProducerTemplateCreateBodyAlwaysException ()
specifier|public
name|void
name|testProducerTemplateCreateBodyAlwaysException
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|send
argument_list|(
literal|"seda:empty"
argument_list|,
name|e
lambda|->
block|{
name|e
operator|.
name|setIn
argument_list|(
operator|new
name|DefaultMessage
argument_list|(
name|e
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Object
name|createBody
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Forced internal error"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConsumerTemplateCreateBodyAlwaysException ()
specifier|public
name|void
name|testConsumerTemplateCreateBodyAlwaysException
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicBoolean
name|fail
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"seda:empty"
argument_list|,
name|e
lambda|->
block|{
name|e
operator|.
name|setIn
argument_list|(
operator|new
name|DefaultMessage
argument_list|(
name|e
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Object
name|createBody
parameter_list|()
block|{
if|if
condition|(
name|fail
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Forced internal error"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DefaultMessage
name|newInstance
parameter_list|()
block|{
comment|// dont copy so we can preserve this message instance that has the fail mode in createBody
return|return
name|this
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
try|try
block|{
comment|// turn on fail mode
name|fail
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|receiveBody
argument_list|(
literal|"seda:empty"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertIsInstanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Forced internal error"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|errorHandler
argument_list|(
name|deadLetterChannel
argument_list|(
literal|"mock:dead"
argument_list|)
argument_list|)
operator|.
name|bean
argument_list|(
name|BeanCreateBodyExceptionTest
operator|.
name|class
argument_list|,
literal|"callMe"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|callMe (String body)
specifier|public
name|String
name|callMe
parameter_list|(
name|String
name|body
parameter_list|)
block|{
return|return
literal|"Hello "
operator|+
name|body
return|;
block|}
block|}
end_class

end_unit

