begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.main
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|main
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BeanInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BindToRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PropertyInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|direct
operator|.
name|DirectComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|seda
operator|.
name|BlockingQueueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|seda
operator|.
name|PriorityBlockingQueueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|seda
operator|.
name|SedaComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|MainIoCTest
specifier|public
class|class
name|MainIoCTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
DECL|method|testMainIoC ()
specifier|public
name|void
name|testMainIoC
parameter_list|()
throws|throws
name|Exception
block|{
comment|// use configuration class
name|Main
name|main
init|=
operator|new
name|Main
argument_list|()
decl_stmt|;
comment|// add the configuration
name|main
operator|.
name|addConfigurationClass
argument_list|(
name|MyConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// add as class so we get IoC
name|main
operator|.
name|addRouteBuilder
argument_list|(
name|MyRouteBuilder
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// manually bind
name|main
operator|.
name|bind
argument_list|(
literal|"myBar"
argument_list|,
operator|new
name|MyBar
argument_list|()
argument_list|)
expr_stmt|;
name|main
operator|.
name|start
argument_list|()
expr_stmt|;
name|CamelContext
name|camelContext
init|=
name|main
operator|.
name|getCamelContext
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
name|MockEndpoint
name|endpoint
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
literal|"mock:results"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"World"
argument_list|)
expr_stmt|;
name|main
operator|.
name|getCamelTemplate
argument_list|()
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"<message>1</message>"
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
comment|// should also auto-configure direct/seda components from application.properties
name|SedaComponent
name|seda
init|=
name|camelContext
operator|.
name|getComponent
argument_list|(
literal|"seda"
argument_list|,
name|SedaComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|seda
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|seda
operator|.
name|getConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
name|DirectComponent
name|direct
init|=
name|camelContext
operator|.
name|getComponent
argument_list|(
literal|"direct"
argument_list|,
name|DirectComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1234
argument_list|,
name|direct
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
comment|// should have called the configure class
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
name|camelContext
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// and seda should have been auto-configured by type
name|Object
name|qf
init|=
name|seda
operator|.
name|getDefaultQueueFactory
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|qf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qf
operator|instanceof
name|PriorityBlockingQueueFactory
argument_list|)
expr_stmt|;
name|MyConfiguration
operator|.
name|MyCoolBean
name|mcb
init|=
operator|(
name|MyConfiguration
operator|.
name|MyCoolBean
operator|)
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByName
argument_list|(
literal|"MyCoolBean"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mcb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tiger"
argument_list|,
name|mcb
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|cool
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByName
argument_list|(
literal|"coolStuff"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cool
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tiger"
argument_list|,
name|cool
argument_list|)
expr_stmt|;
name|main
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|class|MyBar
specifier|public
specifier|static
class|class
name|MyBar
block|{
comment|// noop
block|}
DECL|class|MyConfiguration
specifier|public
specifier|static
class|class
name|MyConfiguration
block|{
annotation|@
name|BeanInject
DECL|field|camel
specifier|private
name|CamelContext
name|camel
decl_stmt|;
annotation|@
name|BindToRegistry
DECL|class|MyCoolBean
specifier|public
specifier|static
class|class
name|MyCoolBean
block|{
DECL|field|name
specifier|private
name|String
name|name
init|=
literal|"Tiger"
decl_stmt|;
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
block|}
annotation|@
name|BindToRegistry
DECL|method|queueFactory (CamelContext myCamel)
specifier|public
name|BlockingQueueFactory
name|queueFactory
parameter_list|(
name|CamelContext
name|myCamel
parameter_list|)
block|{
comment|// we can optionally include camel context as parameter
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|myCamel
argument_list|)
expr_stmt|;
return|return
operator|new
name|PriorityBlockingQueueFactory
argument_list|()
return|;
block|}
annotation|@
name|BindToRegistry
argument_list|(
literal|"coolStuff"
argument_list|)
DECL|method|cool (@eanInject MyCoolBean cool, @PropertyInject(value = R, defaultValue = R) int num, @BeanInject(R) MyBar bar)
specifier|public
name|String
name|cool
parameter_list|(
annotation|@
name|BeanInject
name|MyCoolBean
name|cool
parameter_list|,
annotation|@
name|PropertyInject
argument_list|(
name|value
operator|=
literal|"magic"
argument_list|,
name|defaultValue
operator|=
literal|"456"
argument_list|)
name|int
name|num
parameter_list|,
annotation|@
name|BeanInject
argument_list|(
literal|"myBar"
argument_list|)
name|MyBar
name|bar
parameter_list|)
block|{
comment|// should lookup MyCoolBean type from the registry and find the property
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cool
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|456
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|bar
argument_list|)
expr_stmt|;
return|return
name|cool
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|camel
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MyRouteBuilder
specifier|public
specifier|static
class|class
name|MyRouteBuilder
extends|extends
name|RouteBuilder
block|{
comment|// properties is automatic loaded from classpath:application.properties
comment|// so we should be able to inject this field
annotation|@
name|PropertyInject
argument_list|(
name|value
operator|=
literal|"hello"
argument_list|)
DECL|field|hello
specifier|private
name|String
name|hello
decl_stmt|;
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|constant
argument_list|(
name|hello
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:results"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

