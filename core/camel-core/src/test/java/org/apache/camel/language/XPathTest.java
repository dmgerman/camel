begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LanguageTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|xpath
operator|.
name|XPathLanguage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|XPathTest
specifier|public
class|class
name|XPathTest
extends|extends
name|LanguageTestSupport
block|{
annotation|@
name|Test
DECL|method|testExpressions ()
specifier|public
name|void
name|testExpressions
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"in:body()"
argument_list|,
literal|"<hello id='m123'>world!</hello>"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"in:header('foo')"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"$foo"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPredicates ()
specifier|public
name|void
name|testPredicates
parameter_list|()
throws|throws
name|Exception
block|{
name|assertPredicate
argument_list|(
literal|"in:header('foo') = 'abc'"
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"$foo = 'abc'"
argument_list|)
expr_stmt|;
name|assertPredicate
argument_list|(
literal|"$foo = 'bar'"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNormalXPathExpression ()
specifier|public
name|void
name|testNormalXPathExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExpression
argument_list|(
literal|"hello"
argument_list|,
literal|"world!"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"hello/text()"
argument_list|,
literal|"world!"
argument_list|)
expr_stmt|;
name|assertExpression
argument_list|(
literal|"hello/@id"
argument_list|,
literal|"m123"
argument_list|)
expr_stmt|;
block|}
DECL|method|getLanguageName ()
specifier|protected
name|String
name|getLanguageName
parameter_list|()
block|{
return|return
literal|"xpath"
return|;
block|}
annotation|@
name|Override
DECL|method|assertResolveLanguage (String languageName)
specifier|protected
name|Language
name|assertResolveLanguage
parameter_list|(
name|String
name|languageName
parameter_list|)
block|{
name|XPathLanguage
name|answer
init|=
operator|new
name|XPathLanguage
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setResultType
argument_list|(
name|XPathConstants
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XPathConstants
operator|.
name|STRING
argument_list|,
name|answer
operator|.
name|getResultType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

