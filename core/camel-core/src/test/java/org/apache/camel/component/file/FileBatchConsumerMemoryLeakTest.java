begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit test to test CAMEL-1652  */
end_comment

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"Manual test"
argument_list|)
DECL|class|FileBatchConsumerMemoryLeakTest
specifier|public
class|class
name|FileBatchConsumerMemoryLeakTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|fileUrl
specifier|private
name|String
name|fileUrl
init|=
literal|"target/data/filesorter/"
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteDirectory
argument_list|(
literal|"target/data/filesorter"
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Test
DECL|method|testDummy ()
specifier|public
name|void
name|testDummy
parameter_list|()
block|{
comment|// need a single test method to not fail because of no test methods
block|}
comment|/**      * Process 100 files with a sorted file endpoint. For each exchange the body      * will be replaced by a large buffer. In reality a similar thing happens if      * you have a lot of large files and use convertBodyTo(String.class). In      * both cases the Exchanges becomes quite large. The test will consume a lot      * of memory if all exchanges are kept in a list while doing the batch      * processing. This is because the garbage collector can not clean them as      * they are referenced in the list of exchanges.      *<p/>      * The test is not really a good integration test as it simply waits and      * does not fail or succeed fast      */
annotation|@
name|Test
DECL|method|testMemoryLeak ()
specifier|public
name|void
name|testMemoryLeak
parameter_list|()
throws|throws
name|Exception
block|{
comment|// run this manually and browse the memory usage, eg in IDEA there is a
comment|// Statistics tab
name|deleteDirectory
argument_list|(
literal|"target/data/filesorter/archiv"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
literal|100
condition|;
name|c
operator|++
control|)
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|fileUrl
operator|+
literal|"c"
argument_list|,
literal|"test"
argument_list|,
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|c
operator|+
literal|".dat"
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"file:"
operator|+
name|fileUrl
operator|+
literal|"/c/?sortBy=ignoreCase:file:name"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|10000000
argument_list|)
decl_stmt|;
name|buf
operator|.
name|setLength
argument_list|(
literal|1000000
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|to
argument_list|(
literal|"file:target/data/filesorter/archiv"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|30
operator|*
literal|1000L
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

