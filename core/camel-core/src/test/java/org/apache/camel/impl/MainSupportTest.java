begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|main
operator|.
name|MainSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|MainSupportTest
specifier|public
class|class
name|MainSupportTest
extends|extends
name|ContextTestSupport
block|{
DECL|class|MyMainSupport
specifier|private
class|class
name|MyMainSupport
extends|extends
name|MainSupport
block|{
annotation|@
name|Override
DECL|method|findOrCreateCamelTemplate ()
specifier|protected
name|ProducerTemplate
name|findOrCreateCamelTemplate
parameter_list|()
block|{
return|return
name|context
operator|.
name|createProducerTemplate
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMainSupport ()
specifier|public
name|void
name|testMainSupport
parameter_list|()
throws|throws
name|Exception
block|{
name|MyMainSupport
name|my
init|=
operator|new
name|MyMainSupport
argument_list|()
decl_stmt|;
name|my
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-d"
block|,
literal|"1"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMainSupportMaxMessages ()
specifier|public
name|void
name|testMainSupportMaxMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|MyMainSupport
name|my
init|=
operator|new
name|MyMainSupport
argument_list|()
decl_stmt|;
name|my
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-d"
block|,
literal|"1"
block|,
literal|"-dm"
block|,
literal|"2"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMainSupportHelp ()
specifier|public
name|void
name|testMainSupportHelp
parameter_list|()
throws|throws
name|Exception
block|{
name|MyMainSupport
name|my
init|=
operator|new
name|MyMainSupport
argument_list|()
decl_stmt|;
name|my
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-h"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

