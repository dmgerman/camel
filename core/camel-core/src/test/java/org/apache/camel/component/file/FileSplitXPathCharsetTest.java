begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|FileSplitXPathCharsetTest
specifier|public
class|class
name|FileSplitXPathCharsetTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DIR
init|=
literal|"target/data/file-split-xpath-charset"
decl_stmt|;
DECL|field|inputCsv
specifier|private
specifier|static
name|Path
name|inputCsv
init|=
name|Paths
operator|.
name|get
argument_list|(
name|TEST_DIR
argument_list|,
literal|"input.csv"
argument_list|)
decl_stmt|;
DECL|field|inputXml
specifier|private
specifier|static
name|Path
name|inputXml
init|=
name|Paths
operator|.
name|get
argument_list|(
name|TEST_DIR
argument_list|,
literal|"input.xml"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|clearInputFiles ()
specifier|public
specifier|static
name|void
name|clearInputFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|deleteDirectory
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCsv ()
specifier|public
name|void
name|testCsv
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|out
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|out
operator|.
name|expectedMessageCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|out
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"abc"
argument_list|,
literal|"xyz"
argument_list|,
literal|"Ã¥Ã¤Ã¶"
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|inputCsv
argument_list|,
literal|"abc,xyz,Ã¥Ã¤Ã¶"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testXml ()
specifier|public
name|void
name|testXml
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|out
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|out
operator|.
name|expectedMessageCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|out
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"abc"
argument_list|,
literal|"xyz"
argument_list|,
literal|"Ã¥Ã¤Ã¶"
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"FileSplitXPathCharsetTest-input.xml"
argument_list|)
argument_list|,
name|inputXml
argument_list|)
expr_stmt|;
name|out
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// input: *.csv
name|fromF
argument_list|(
literal|"file:%s?charset=ISO-8859-1&include=.*\\.csv"
argument_list|,
name|TEST_DIR
argument_list|)
operator|.
name|split
argument_list|()
operator|.
name|tokenize
argument_list|(
literal|","
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
comment|// input: *.xml
name|fromF
argument_list|(
literal|"file:%s?charset=ISO-8859-1&include=.*\\.xml"
argument_list|,
name|TEST_DIR
argument_list|)
operator|.
name|split
argument_list|()
operator|.
name|xpath
argument_list|(
literal|"/foo/bar/text()"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

