begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rest
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|RestProducerPathTest
specifier|public
class|class
name|RestProducerPathTest
block|{
DECL|field|restComponent
specifier|private
specifier|final
name|RestComponent
name|restComponent
decl_stmt|;
DECL|method|RestProducerPathTest ()
specifier|public
name|RestProducerPathTest
parameter_list|()
block|{
name|DefaultCamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|addComponent
argument_list|(
literal|"mock-rest"
argument_list|,
operator|new
name|RestEndpointTest
operator|.
name|MockRest
argument_list|()
argument_list|)
expr_stmt|;
name|restComponent
operator|=
operator|new
name|RestComponent
argument_list|()
expr_stmt|;
name|restComponent
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|createProducer (String uri)
specifier|private
name|RestProducer
name|createProducer
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|RestEndpoint
name|restEndpoint
init|=
operator|(
name|RestEndpoint
operator|)
name|restComponent
operator|.
name|createEndpoint
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|restEndpoint
operator|.
name|setConsumerComponentName
argument_list|(
literal|"mock-rest"
argument_list|)
expr_stmt|;
name|restEndpoint
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|restEndpoint
operator|.
name|setHost
argument_list|(
literal|"http://localhost"
argument_list|)
expr_stmt|;
name|restEndpoint
operator|.
name|setBindingMode
argument_list|(
literal|"json"
argument_list|)
expr_stmt|;
return|return
operator|(
name|RestProducer
operator|)
name|restEndpoint
operator|.
name|createProducer
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testEmptyParam ()
specifier|public
name|void
name|testEmptyParam
parameter_list|()
throws|throws
name|Exception
block|{
name|RestProducer
name|producer
init|=
name|createProducer
argument_list|(
literal|"rest:get:list//{id}"
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|producer
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|REST_HTTP_URI
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://localhost/list//1"
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoHeaders ()
specifier|public
name|void
name|testNoHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|RestProducer
name|producer
init|=
name|createProducer
argument_list|(
literal|"rest:get:list/{id}_{val}"
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|producer
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|REST_HTTP_URI
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingHeader ()
specifier|public
name|void
name|testMissingHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|RestProducer
name|producer
init|=
name|createProducer
argument_list|(
literal|"rest:get:list/{id}/{val}"
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|producer
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|REST_HTTP_URI
argument_list|)
decl_stmt|;
comment|// Backward compatibility: if one of the params is resolved
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://localhost/list/1/{val}"
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingHeaderSingleParam ()
specifier|public
name|void
name|testMissingHeaderSingleParam
parameter_list|()
throws|throws
name|Exception
block|{
name|RestProducer
name|producer
init|=
name|createProducer
argument_list|(
literal|"rest:get:list/{id}_{val}"
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|producer
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|REST_HTTP_URI
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingStartCurlyBrace ()
specifier|public
name|void
name|testMissingStartCurlyBrace
parameter_list|()
throws|throws
name|Exception
block|{
name|RestProducer
name|producer
init|=
name|createProducer
argument_list|(
literal|"rest:get:list/{id}_val}"
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|producer
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
literal|"val"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|REST_HTTP_URI
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleMissingStartCurlyBrace ()
specifier|public
name|void
name|testSingleMissingStartCurlyBrace
parameter_list|()
throws|throws
name|Exception
block|{
name|RestProducer
name|producer
init|=
name|createProducer
argument_list|(
literal|"rest:get:list/id}"
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|producer
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|REST_HTTP_URI
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleMissingEndCurlyBrace ()
specifier|public
name|void
name|testSingleMissingEndCurlyBrace
parameter_list|()
throws|throws
name|Exception
block|{
name|RestProducer
name|producer
init|=
name|createProducer
argument_list|(
literal|"rest:get:list/{id"
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|producer
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|REST_HTTP_URI
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingEndCurlyBrace ()
specifier|public
name|void
name|testMissingEndCurlyBrace
parameter_list|()
throws|throws
name|Exception
block|{
name|RestProducer
name|producer
init|=
name|createProducer
argument_list|(
literal|"rest:get:list/{id_{val}"
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|producer
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
literal|"val"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|REST_HTTP_URI
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleParam ()
specifier|public
name|void
name|testSingleParam
parameter_list|()
throws|throws
name|Exception
block|{
name|RestProducer
name|producer
init|=
name|createProducer
argument_list|(
literal|"rest:get:list/{id}"
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|producer
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|REST_HTTP_URI
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://localhost/list/1"
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnderscoreSeparator ()
specifier|public
name|void
name|testUnderscoreSeparator
parameter_list|()
throws|throws
name|Exception
block|{
name|RestProducer
name|producer
init|=
name|createProducer
argument_list|(
literal|"rest:get:list/{id}_{val}"
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|producer
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
literal|"val"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|REST_HTTP_URI
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://localhost/list/1_test"
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDotSeparator ()
specifier|public
name|void
name|testDotSeparator
parameter_list|()
throws|throws
name|Exception
block|{
name|RestProducer
name|producer
init|=
name|createProducer
argument_list|(
literal|"rest:get:items/item.{content-type}"
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|producer
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
literal|"content-type"
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|REST_HTTP_URI
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://localhost/items/item.xml"
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

