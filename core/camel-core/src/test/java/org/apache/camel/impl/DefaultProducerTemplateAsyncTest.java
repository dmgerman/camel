begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|SynchronizationAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|DefaultProducerTemplateAsyncTest
specifier|public
class|class
name|DefaultProducerTemplateAsyncTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|ORDER
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|ORDER
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testRequestAsync ()
specifier|public
name|void
name|testRequestAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Exchange
argument_list|>
name|future
init|=
name|template
operator|.
name|asyncSend
argument_list|(
literal|"direct:start"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// you can do other stuff
name|String
name|echo
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:echo"
argument_list|,
literal|"Hi"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HiHi"
argument_list|,
name|echo
argument_list|)
expr_stmt|;
name|Exchange
name|result
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|delta
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|result
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should take longer than: "
operator|+
name|delta
argument_list|,
name|delta
operator|>
literal|50
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendAsyncProcessor ()
specifier|public
name|void
name|testSendAsyncProcessor
parameter_list|()
throws|throws
name|Exception
block|{
name|Future
argument_list|<
name|Exchange
argument_list|>
name|future
init|=
name|template
operator|.
name|asyncSend
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// you can do other stuff
name|String
name|echo
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:echo"
argument_list|,
literal|"Hi"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HiHi"
argument_list|,
name|echo
argument_list|)
expr_stmt|;
name|Exchange
name|result
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|delta
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|result
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should take longer than: "
operator|+
name|delta
argument_list|,
name|delta
operator|>
literal|50
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRequestAsyncBody ()
specifier|public
name|void
name|testRequestAsyncBody
parameter_list|()
throws|throws
name|Exception
block|{
name|Future
argument_list|<
name|Object
argument_list|>
name|future
init|=
name|template
operator|.
name|asyncRequestBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello"
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// you can do other stuff
name|String
name|echo
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:echo"
argument_list|,
literal|"Hi"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HiHi"
argument_list|,
name|echo
argument_list|)
expr_stmt|;
comment|// we can use extract body to convert to expect body type
name|String
name|result
init|=
name|template
operator|.
name|extractFutureBody
argument_list|(
name|future
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|delta
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should take longer than: "
operator|+
name|delta
argument_list|,
name|delta
operator|>
literal|50
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRequestAsyncBodyType ()
specifier|public
name|void
name|testRequestAsyncBodyType
parameter_list|()
throws|throws
name|Exception
block|{
name|Future
argument_list|<
name|String
argument_list|>
name|future
init|=
name|template
operator|.
name|asyncRequestBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// you can do other stuff
name|String
name|echo
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:echo"
argument_list|,
literal|"Hi"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HiHi"
argument_list|,
name|echo
argument_list|)
expr_stmt|;
comment|// or we can use parameter type in the requestBody method so the future handle know its type
name|String
name|result
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|delta
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should take longer than: "
operator|+
name|delta
argument_list|,
name|delta
operator|>
literal|50
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRequestAsyncBodyAndHeader ()
specifier|public
name|void
name|testRequestAsyncBodyAndHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"foo"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Object
argument_list|>
name|future
init|=
name|template
operator|.
name|asyncRequestBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello"
argument_list|,
literal|"foo"
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// you can do other stuff
name|String
name|echo
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:echo"
argument_list|,
literal|"Hi"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HiHi"
argument_list|,
name|echo
argument_list|)
expr_stmt|;
comment|// we can use extract body to convert to expect body type
name|String
name|result
init|=
name|template
operator|.
name|extractFutureBody
argument_list|(
name|future
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|long
name|delta
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should take longer than: "
operator|+
name|delta
argument_list|,
name|delta
operator|>
literal|50
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRequestAsyncBodyAndHeaderType ()
specifier|public
name|void
name|testRequestAsyncBodyAndHeaderType
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"foo"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|String
argument_list|>
name|future
init|=
name|template
operator|.
name|asyncRequestBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello"
argument_list|,
literal|"foo"
argument_list|,
literal|123
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// you can do other stuff
name|String
name|echo
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:echo"
argument_list|,
literal|"Hi"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HiHi"
argument_list|,
name|echo
argument_list|)
expr_stmt|;
comment|// or we can use parameter type in the requestBody method so the future handle know its type
name|String
name|result
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|long
name|delta
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should take longer than: "
operator|+
name|delta
argument_list|,
name|delta
operator|>
literal|50
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRequestAsyncBodyAndHeaders ()
specifier|public
name|void
name|testRequestAsyncBodyAndHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"foo"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"bar"
argument_list|,
literal|"cheese"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"cheese"
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Object
argument_list|>
name|future
init|=
name|template
operator|.
name|asyncRequestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello"
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// you can do other stuff
name|String
name|echo
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:echo"
argument_list|,
literal|"Hi"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HiHi"
argument_list|,
name|echo
argument_list|)
expr_stmt|;
comment|// we can use extract body to convert to expect body type
name|String
name|result
init|=
name|template
operator|.
name|extractFutureBody
argument_list|(
name|future
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|long
name|delta
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should take longer than: "
operator|+
name|delta
argument_list|,
name|delta
operator|>
literal|50
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRequestAsyncBodyAndHeadersType ()
specifier|public
name|void
name|testRequestAsyncBodyAndHeadersType
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"foo"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"bar"
argument_list|,
literal|"cheese"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"cheese"
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|String
argument_list|>
name|future
init|=
name|template
operator|.
name|asyncRequestBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello"
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// you can do other stuff
name|String
name|echo
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:echo"
argument_list|,
literal|"Hi"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HiHi"
argument_list|,
name|echo
argument_list|)
expr_stmt|;
comment|// or we can use parameter type in the requestBody method so the future handle know its type
name|String
name|result
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|long
name|delta
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should take longer than: "
operator|+
name|delta
argument_list|,
name|delta
operator|>
literal|50
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRequestAsyncErrorWhenProcessing ()
specifier|public
name|void
name|testRequestAsyncErrorWhenProcessing
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Object
argument_list|>
name|future
init|=
name|template
operator|.
name|asyncRequestBody
argument_list|(
literal|"direct:error"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// you can do other stuff
name|String
name|echo
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:echo"
argument_list|,
literal|"Hi"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HiHi"
argument_list|,
name|echo
argument_list|)
expr_stmt|;
try|try
block|{
name|template
operator|.
name|extractFutureBody
argument_list|(
name|future
argument_list|,
name|Exchange
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeCamelException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Damn forced by unit test"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|delta
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should take longer than: "
operator|+
name|delta
argument_list|,
name|delta
operator|>
literal|50
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRequestAsyncBodyErrorWhenProcessing ()
specifier|public
name|void
name|testRequestAsyncBodyErrorWhenProcessing
parameter_list|()
throws|throws
name|Exception
block|{
name|Future
argument_list|<
name|Object
argument_list|>
name|future
init|=
name|template
operator|.
name|asyncRequestBody
argument_list|(
literal|"direct:error"
argument_list|,
literal|"Hello"
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// you can do other stuff
name|String
name|echo
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:echo"
argument_list|,
literal|"Hi"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HiHi"
argument_list|,
name|echo
argument_list|)
expr_stmt|;
try|try
block|{
name|template
operator|.
name|extractFutureBody
argument_list|(
name|future
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeCamelException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Damn forced by unit test"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|delta
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should take longer than: "
operator|+
name|delta
argument_list|,
name|delta
operator|>
literal|50
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncCallbackExchangeInOnly ()
specifier|public
name|void
name|testAsyncCallbackExchangeInOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|ORDER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|template
operator|.
name|asyncCallback
argument_list|(
literal|"direct:start"
argument_list|,
name|exchange
argument_list|,
operator|new
name|SynchronizationAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDone
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|ORDER
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncCallbackExchangeInOut ()
specifier|public
name|void
name|testAsyncCallbackExchangeInOut
parameter_list|()
throws|throws
name|Exception
block|{
name|ORDER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setPattern
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
name|template
operator|.
name|asyncCallback
argument_list|(
literal|"direct:echo"
argument_list|,
name|exchange
argument_list|,
operator|new
name|SynchronizationAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDone
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"HelloHello"
argument_list|,
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|ORDER
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncCallbackExchangeInOnlyGetResult ()
specifier|public
name|void
name|testAsyncCallbackExchangeInOnlyGetResult
parameter_list|()
throws|throws
name|Exception
block|{
name|ORDER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Exchange
argument_list|>
name|future
init|=
name|template
operator|.
name|asyncCallback
argument_list|(
literal|"direct:start"
argument_list|,
name|exchange
argument_list|,
operator|new
name|SynchronizationAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDone
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Exchange
name|reply
init|=
name|future
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|ORDER
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncCallbackExchangeInOutGetResult ()
specifier|public
name|void
name|testAsyncCallbackExchangeInOutGetResult
parameter_list|()
throws|throws
name|Exception
block|{
name|ORDER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setPattern
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Exchange
argument_list|>
name|future
init|=
name|template
operator|.
name|asyncCallback
argument_list|(
literal|"direct:echo"
argument_list|,
name|exchange
argument_list|,
operator|new
name|SynchronizationAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDone
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"HelloHello"
argument_list|,
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Exchange
name|reply
init|=
name|future
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|ORDER
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HelloHello"
argument_list|,
name|reply
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncCallbackBodyInOnly ()
specifier|public
name|void
name|testAsyncCallbackBodyInOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|ORDER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|template
operator|.
name|asyncCallbackSendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello"
argument_list|,
operator|new
name|SynchronizationAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDone
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|ORDER
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncCallbackBodyInOut ()
specifier|public
name|void
name|testAsyncCallbackBodyInOut
parameter_list|()
throws|throws
name|Exception
block|{
name|ORDER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|template
operator|.
name|asyncCallbackRequestBody
argument_list|(
literal|"direct:echo"
argument_list|,
literal|"Hello"
argument_list|,
operator|new
name|SynchronizationAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDone
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"HelloHello"
argument_list|,
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|ORDER
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncCallbackBodyInOnlyGetResult ()
specifier|public
name|void
name|testAsyncCallbackBodyInOnlyGetResult
parameter_list|()
throws|throws
name|Exception
block|{
name|ORDER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Object
argument_list|>
name|future
init|=
name|template
operator|.
name|asyncCallbackSendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello"
argument_list|,
operator|new
name|SynchronizationAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDone
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|reply
init|=
name|future
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|ORDER
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// no reply when in only
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncCallbackBodyInOutGetResult ()
specifier|public
name|void
name|testAsyncCallbackBodyInOutGetResult
parameter_list|()
throws|throws
name|Exception
block|{
name|ORDER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Object
argument_list|>
name|future
init|=
name|template
operator|.
name|asyncCallbackRequestBody
argument_list|(
literal|"direct:echo"
argument_list|,
literal|"Hello"
argument_list|,
operator|new
name|SynchronizationAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDone
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"HelloHello"
argument_list|,
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Object
name|reply
init|=
name|future
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|ORDER
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HelloHello"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncCallbackInOnlyProcessor ()
specifier|public
name|void
name|testAsyncCallbackInOnlyProcessor
parameter_list|()
throws|throws
name|Exception
block|{
name|ORDER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|template
operator|.
name|asyncCallback
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
operator|new
name|SynchronizationAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDone
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|ORDER
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncCallbackInOutProcessor ()
specifier|public
name|void
name|testAsyncCallbackInOutProcessor
parameter_list|()
throws|throws
name|Exception
block|{
name|ORDER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|template
operator|.
name|asyncCallback
argument_list|(
literal|"direct:echo"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setPattern
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
operator|new
name|SynchronizationAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDone
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"HelloHello"
argument_list|,
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|ORDER
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncCallbackThreadsInOutProcessor ()
specifier|public
name|void
name|testAsyncCallbackThreadsInOutProcessor
parameter_list|()
throws|throws
name|Exception
block|{
name|ORDER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|template
operator|.
name|asyncCallback
argument_list|(
literal|"direct:threads"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Bye"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setPattern
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
operator|new
name|SynchronizationAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onDone
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"ByeBye"
argument_list|,
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|ORDER
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncCallbackExchangeInOnlyWithFailure ()
specifier|public
name|void
name|testAsyncCallbackExchangeInOnlyWithFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|ORDER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"direct:error"
argument_list|)
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|template
operator|.
name|asyncCallback
argument_list|(
literal|"direct:error"
argument_list|,
name|exchange
argument_list|,
operator|new
name|SynchronizationAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Damn forced by unit test"
argument_list|,
name|exchange
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|ORDER
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncCallbackExchangeInOutWithFailure ()
specifier|public
name|void
name|testAsyncCallbackExchangeInOutWithFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|ORDER
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"direct:error"
argument_list|)
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setPattern
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
name|template
operator|.
name|asyncCallback
argument_list|(
literal|"direct:error"
argument_list|,
name|exchange
argument_list|,
operator|new
name|SynchronizationAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Damn forced by unit test"
argument_list|,
name|exchange
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|ORDER
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|ORDER
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|delay
argument_list|(
literal|200
argument_list|)
operator|.
name|asyncDelayed
argument_list|()
operator|.
name|transform
argument_list|(
name|body
argument_list|()
operator|.
name|append
argument_list|(
literal|" World"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:error"
argument_list|)
operator|.
name|delay
argument_list|(
literal|200
argument_list|)
operator|.
name|asyncDelayed
argument_list|()
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Damn forced by unit test"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:echo"
argument_list|)
operator|.
name|transform
argument_list|(
name|body
argument_list|()
operator|.
name|append
argument_list|(
name|body
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:threads"
argument_list|)
operator|.
name|threads
argument_list|(
literal|5
argument_list|)
operator|.
name|transform
argument_list|(
name|body
argument_list|()
operator|.
name|append
argument_list|(
name|body
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

