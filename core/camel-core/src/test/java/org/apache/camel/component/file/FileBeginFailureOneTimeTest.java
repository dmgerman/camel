begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.file
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|FileBeginFailureOneTimeTest
specifier|public
class|class
name|FileBeginFailureOneTimeTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|myStrategy
specifier|private
name|MyStrategy
name|myStrategy
init|=
operator|new
name|MyStrategy
argument_list|()
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteDirectory
argument_list|(
literal|"target/data/begin"
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|jndi
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"myStrategy"
argument_list|,
name|myStrategy
argument_list|)
expr_stmt|;
return|return
name|jndi
return|;
block|}
annotation|@
name|Test
DECL|method|testBeginFailureOneTime ()
specifier|public
name|void
name|testBeginFailureOneTime
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"file://target/data/begin"
argument_list|,
literal|"Hello World"
argument_list|,
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
literal|"hello.txt"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Begin should have been invoked 2 times"
argument_list|,
literal|2
argument_list|,
name|myStrategy
operator|.
name|getInvoked
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"file://target/data/begin?initialDelay=0&delay=10&processStrategy=#myStrategy"
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|MyStrategy
specifier|private
specifier|static
class|class
name|MyStrategy
implements|implements
name|GenericFileProcessStrategy
argument_list|<
name|File
argument_list|>
block|{
DECL|field|invoked
specifier|private
specifier|volatile
name|int
name|invoked
decl_stmt|;
DECL|method|prepareOnStartup (GenericFileOperations<File> fileGenericFileOperations, GenericFileEndpoint<File> fileGenericFileEndpoint)
specifier|public
name|void
name|prepareOnStartup
parameter_list|(
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
name|fileGenericFileOperations
parameter_list|,
name|GenericFileEndpoint
argument_list|<
name|File
argument_list|>
name|fileGenericFileEndpoint
parameter_list|)
throws|throws
name|Exception
block|{         }
DECL|method|begin (GenericFileOperations<File> fileGenericFileOperations, GenericFileEndpoint<File> fileGenericFileEndpoint, Exchange exchange, GenericFile<File> fileGenericFile)
specifier|public
name|boolean
name|begin
parameter_list|(
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
name|fileGenericFileOperations
parameter_list|,
name|GenericFileEndpoint
argument_list|<
name|File
argument_list|>
name|fileGenericFileEndpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|GenericFile
argument_list|<
name|File
argument_list|>
name|fileGenericFile
parameter_list|)
throws|throws
name|Exception
block|{
name|invoked
operator|++
expr_stmt|;
if|if
condition|(
name|invoked
operator|<=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Damn I cannot do this"
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|abort (GenericFileOperations<File> fileGenericFileOperations, GenericFileEndpoint<File> fileGenericFileEndpoint, Exchange exchange, GenericFile<File> fileGenericFile)
specifier|public
name|void
name|abort
parameter_list|(
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
name|fileGenericFileOperations
parameter_list|,
name|GenericFileEndpoint
argument_list|<
name|File
argument_list|>
name|fileGenericFileEndpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|GenericFile
argument_list|<
name|File
argument_list|>
name|fileGenericFile
parameter_list|)
throws|throws
name|Exception
block|{
comment|// noop
block|}
DECL|method|commit (GenericFileOperations<File> fileGenericFileOperations, GenericFileEndpoint<File> fileGenericFileEndpoint, Exchange exchange, GenericFile<File> fileGenericFile)
specifier|public
name|void
name|commit
parameter_list|(
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
name|fileGenericFileOperations
parameter_list|,
name|GenericFileEndpoint
argument_list|<
name|File
argument_list|>
name|fileGenericFileEndpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|GenericFile
argument_list|<
name|File
argument_list|>
name|fileGenericFile
parameter_list|)
throws|throws
name|Exception
block|{         }
DECL|method|rollback (GenericFileOperations<File> fileGenericFileOperations, GenericFileEndpoint<File> fileGenericFileEndpoint, Exchange exchange, GenericFile<File> fileGenericFile)
specifier|public
name|void
name|rollback
parameter_list|(
name|GenericFileOperations
argument_list|<
name|File
argument_list|>
name|fileGenericFileOperations
parameter_list|,
name|GenericFileEndpoint
argument_list|<
name|File
argument_list|>
name|fileGenericFileEndpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|GenericFile
argument_list|<
name|File
argument_list|>
name|fileGenericFile
parameter_list|)
throws|throws
name|Exception
block|{         }
DECL|method|getInvoked ()
specifier|public
name|int
name|getInvoked
parameter_list|()
block|{
return|return
name|invoked
return|;
block|}
block|}
block|}
end_class

end_unit

