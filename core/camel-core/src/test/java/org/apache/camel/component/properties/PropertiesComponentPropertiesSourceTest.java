begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.properties
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PropertiesSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThatThrownBy
import|;
end_import

begin_class
DECL|class|PropertiesComponentPropertiesSourceTest
specifier|public
class|class
name|PropertiesComponentPropertiesSourceTest
block|{
annotation|@
name|Test
DECL|method|testPropertiesSourceFromRegistry ()
specifier|public
name|void
name|testPropertiesSourceFromRegistry
parameter_list|()
block|{
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"my-ps-1"
argument_list|,
operator|new
name|PropertiesPropertiesSource
argument_list|(
literal|"ps1"
argument_list|,
literal|"my-key-1"
argument_list|,
literal|"my-val-1"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"my-ps-2"
argument_list|,
operator|new
name|PropertiesPropertiesSource
argument_list|(
literal|"ps2"
argument_list|,
literal|"my-key-2"
argument_list|,
literal|"my-val-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|context
operator|.
name|resolvePropertyPlaceholders
argument_list|(
literal|"{{my-key-1}}"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"my-val-1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|context
operator|.
name|resolvePropertyPlaceholders
argument_list|(
literal|"{{my-key-2}}"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"my-val-2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisablePropertiesSourceDiscovery ()
specifier|public
name|void
name|testDisablePropertiesSourceDiscovery
parameter_list|()
block|{
name|PropertiesComponent
name|pc
init|=
operator|new
name|PropertiesComponent
argument_list|()
decl_stmt|;
name|pc
operator|.
name|setAutoDiscoverPropertiesSources
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|addComponent
argument_list|(
literal|"properties"
argument_list|,
name|pc
argument_list|)
expr_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"my-ps-1"
argument_list|,
operator|new
name|PropertiesPropertiesSource
argument_list|(
literal|"ps1"
argument_list|,
literal|"my-key-1"
argument_list|,
literal|"my-val-1"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"my-ps-2"
argument_list|,
operator|new
name|PropertiesPropertiesSource
argument_list|(
literal|"ps2"
argument_list|,
literal|"my-key-2"
argument_list|,
literal|"my-val-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThatThrownBy
argument_list|(
parameter_list|()
lambda|->
name|context
operator|.
name|resolvePropertyPlaceholders
argument_list|(
literal|"{{my-key-1}}"
argument_list|)
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"Property with key [my-key-1] not found in properties from text: {{my-key-1}}"
argument_list|)
expr_stmt|;
name|assertThatThrownBy
argument_list|(
parameter_list|()
lambda|->
name|context
operator|.
name|resolvePropertyPlaceholders
argument_list|(
literal|"{{my-key-2}}"
argument_list|)
argument_list|)
operator|.
name|isInstanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
operator|.
name|hasMessage
argument_list|(
literal|"Property with key [my-key-2] not found in properties from text: {{my-key-2}}"
argument_list|)
expr_stmt|;
block|}
DECL|class|PropertiesPropertiesSource
specifier|private
specifier|static
specifier|final
class|class
name|PropertiesPropertiesSource
extends|extends
name|Properties
implements|implements
name|PropertiesSource
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|PropertiesPropertiesSource (String name, String... kv)
specifier|public
name|PropertiesPropertiesSource
parameter_list|(
name|String
name|name
parameter_list|,
name|String
modifier|...
name|kv
parameter_list|)
block|{
assert|assert
name|kv
operator|.
name|length
operator|%
literal|2
operator|==
literal|0
assert|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kv
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|super
operator|.
name|setProperty
argument_list|(
name|kv
index|[
name|i
index|]
argument_list|,
name|kv
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
block|}
end_class

end_unit

