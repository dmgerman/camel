begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|RoutePolicySupport
import|;
end_import

begin_class
DECL|class|FlipRoutePolicy
specifier|public
class|class
name|FlipRoutePolicy
extends|extends
name|RoutePolicySupport
block|{
DECL|field|name1
specifier|private
specifier|final
name|String
name|name1
decl_stmt|;
DECL|field|name2
specifier|private
specifier|final
name|String
name|name2
decl_stmt|;
comment|/**      * Flip the two routes      *      * @param name1 name of the first route      * @param name2 name of the second route      */
DECL|method|FlipRoutePolicy (String name1, String name2)
specifier|public
name|FlipRoutePolicy
parameter_list|(
name|String
name|name1
parameter_list|,
name|String
name|name2
parameter_list|)
block|{
name|this
operator|.
name|name1
operator|=
name|name1
expr_stmt|;
name|this
operator|.
name|name2
operator|=
name|name2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onExchangeDone (Route route, Exchange exchange)
specifier|public
name|void
name|onExchangeDone
parameter_list|(
name|Route
name|route
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// decide which route to stop and start
comment|// basically we should flip the two routes
name|String
name|stop
init|=
name|route
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|name1
argument_list|)
condition|?
name|name1
else|:
name|name2
decl_stmt|;
name|String
name|start
init|=
name|route
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|name1
argument_list|)
condition|?
name|name2
else|:
name|name1
decl_stmt|;
name|FlipThread
name|thread
init|=
operator|new
name|FlipThread
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|start
argument_list|,
name|stop
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * Use a thread to flip the routes.      */
DECL|class|FlipThread
specifier|private
specifier|final
class|class
name|FlipThread
extends|extends
name|Thread
block|{
DECL|field|context
specifier|private
specifier|final
name|CamelContext
name|context
decl_stmt|;
DECL|field|start
specifier|private
specifier|final
name|String
name|start
decl_stmt|;
DECL|field|stop
specifier|private
specifier|final
name|String
name|stop
decl_stmt|;
DECL|method|FlipThread (CamelContext context, String start, String stop)
specifier|private
name|FlipThread
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|start
parameter_list|,
name|String
name|stop
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|stop
operator|=
name|stop
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|context
operator|.
name|getRouteController
argument_list|()
operator|.
name|stopRoute
argument_list|(
name|stop
argument_list|)
expr_stmt|;
name|context
operator|.
name|getRouteController
argument_list|()
operator|.
name|startRoute
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// let the exception handle handle it, which is often just to
comment|// log it
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
literal|"Error flipping routes"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

