begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.issues
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|issues
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ChoiceEndOrEndChoiceIssueTest
specifier|public
class|class
name|ChoiceEndOrEndChoiceIssueTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Test
DECL|method|testEndChoiceInvalid ()
specifier|public
name|void
name|testEndChoiceInvalid
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|(
name|header
argument_list|(
literal|"number"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"one"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:one"
argument_list|)
operator|.
name|when
argument_list|(
name|header
argument_list|(
literal|"number"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"two"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:two"
argument_list|)
operator|.
name|when
argument_list|(
name|header
argument_list|(
literal|"number"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"three"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:three"
argument_list|)
operator|.
name|endChoice
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:finally"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"A new choice clause should start with a when() or otherwise()."
operator|+
literal|" If you intend to end the entire choice and are using endChoice() then use end() instead."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEndChoiceValid ()
specifier|public
name|void
name|testEndChoiceValid
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|(
name|header
argument_list|(
literal|"number"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"one"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:one"
argument_list|)
operator|.
name|when
argument_list|(
name|header
argument_list|(
literal|"number"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"two"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:two"
argument_list|)
operator|.
name|when
argument_list|(
name|header
argument_list|(
literal|"number"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"three"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:three"
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:finally"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:one"
argument_list|)
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"number"
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:two"
argument_list|)
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"number"
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:three"
argument_list|)
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"number"
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:finally"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|"1"
argument_list|,
literal|"number"
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|"2"
argument_list|,
literal|"number"
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|"3"
argument_list|,
literal|"number"
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndChoiceEndValid ()
specifier|public
name|void
name|testEndChoiceEndValid
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|(
name|header
argument_list|(
literal|"number"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"one"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:one"
argument_list|)
operator|.
name|when
argument_list|(
name|header
argument_list|(
literal|"number"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"two"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:two"
argument_list|)
operator|.
name|when
argument_list|(
name|header
argument_list|(
literal|"number"
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"three"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:three"
argument_list|)
operator|.
name|endChoice
argument_list|()
operator|.
name|end
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:finally"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:one"
argument_list|)
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"number"
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:two"
argument_list|)
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"number"
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:three"
argument_list|)
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"number"
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:finally"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|"1"
argument_list|,
literal|"number"
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|"2"
argument_list|,
literal|"number"
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|"3"
argument_list|,
literal|"number"
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

