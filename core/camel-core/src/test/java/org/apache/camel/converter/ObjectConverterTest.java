begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ObjectConverterTest
specifier|public
class|class
name|ObjectConverterTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
DECL|method|testIterator ()
specifier|public
name|void
name|testIterator
parameter_list|()
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectConverter
operator|.
name|iterator
argument_list|(
literal|"Claus,Jonathan"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Claus"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Jonathan"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStreamIterator ()
specifier|public
name|void
name|testStreamIterator
parameter_list|()
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectConverter
operator|.
name|iterator
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
literal|"Claus"
argument_list|,
literal|"Jonathan"
argument_list|,
literal|"Andrea"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Claus"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Jonathan"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Andrea"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testIterable ()
specifier|public
name|void
name|testIterable
parameter_list|()
block|{
for|for
control|(
specifier|final
name|String
name|name
range|:
operator|(
name|Iterable
argument_list|<
name|String
argument_list|>
operator|)
name|ObjectConverter
operator|.
name|iterable
argument_list|(
literal|"Claus,Jonathan"
argument_list|)
control|)
block|{
switch|switch
condition|(
name|name
condition|)
block|{
case|case
literal|"Claus"
case|:
case|case
literal|"Jonathan"
case|:
break|break;
default|default:
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testToByte ()
specifier|public
name|void
name|testToByte
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toByte
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toByte
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toByte
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToClass ()
specifier|public
name|void
name|testToClass
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|ObjectConverter
operator|.
name|toClass
argument_list|(
literal|"java.lang.String"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|ObjectConverter
operator|.
name|toClass
argument_list|(
literal|"foo.Bar"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToShort ()
specifier|public
name|void
name|testToShort
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toShort
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toShort
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toShort
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|ObjectConverter
operator|.
name|toShort
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|ObjectConverter
operator|.
name|toShort
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toShort
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToInteger ()
specifier|public
name|void
name|testToInteger
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toInteger
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toInteger
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toInteger
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|ObjectConverter
operator|.
name|toInteger
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|ObjectConverter
operator|.
name|toInteger
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toInteger
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToLong ()
specifier|public
name|void
name|testToLong
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toLong
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toLong
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toLong
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|ObjectConverter
operator|.
name|toLong
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|ObjectConverter
operator|.
name|toLong
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toLong
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToFloat ()
specifier|public
name|void
name|testToFloat
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toFloat
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toFloat
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toFloat
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Float
operator|)
name|Float
operator|.
name|NaN
argument_list|,
name|ObjectConverter
operator|.
name|toFloat
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Float
operator|)
name|Float
operator|.
name|NaN
argument_list|,
name|ObjectConverter
operator|.
name|toFloat
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toFloat
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToDouble ()
specifier|public
name|void
name|testToDouble
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toDouble
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toDouble
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toDouble
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Double
operator|)
name|Double
operator|.
name|NaN
argument_list|,
name|ObjectConverter
operator|.
name|toDouble
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Double
operator|)
name|Double
operator|.
name|NaN
argument_list|,
name|ObjectConverter
operator|.
name|toDouble
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toDouble
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToBigInteger ()
specifier|public
name|void
name|testToBigInteger
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|4
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toBigInteger
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|4
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toBigInteger
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|4
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toBigInteger
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|123456789L
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toBigInteger
argument_list|(
literal|"123456789"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|ObjectConverter
operator|.
name|toBigInteger
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|ObjectConverter
operator|.
name|toBigInteger
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|ObjectConverter
operator|.
name|toBigInteger
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|4
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toBigInteger
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"14350442579497085228"
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toBigInteger
argument_list|(
literal|"14350442579497085228"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"ABC"
argument_list|,
name|ObjectConverter
operator|.
name|toString
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ABC"
argument_list|,
name|ObjectConverter
operator|.
name|toString
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|ObjectConverter
operator|.
name|toString
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|ObjectConverter
operator|.
name|toString
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToChar ()
specifier|public
name|void
name|testToChar
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|'A'
argument_list|,
name|ObjectConverter
operator|.
name|toChar
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Character
operator|.
name|valueOf
argument_list|(
literal|'A'
argument_list|)
argument_list|,
name|ObjectConverter
operator|.
name|toCharacter
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNaN ()
specifier|public
name|void
name|testNaN
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
operator|(
name|Double
operator|)
name|Double
operator|.
name|NaN
argument_list|,
name|ObjectConverter
operator|.
name|toDouble
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Double
operator|)
name|Double
operator|.
name|NaN
argument_list|,
name|ObjectConverter
operator|.
name|toDouble
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Float
operator|)
name|Float
operator|.
name|NaN
argument_list|,
name|ObjectConverter
operator|.
name|toFloat
argument_list|(
name|Double
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|Float
operator|)
name|Float
operator|.
name|NaN
argument_list|,
name|ObjectConverter
operator|.
name|toFloat
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToBoolean ()
specifier|public
name|void
name|testToBoolean
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|ObjectConverter
operator|.
name|toBoolean
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectConverter
operator|.
name|toBoolean
argument_list|(
literal|"TRUE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ObjectConverter
operator|.
name|toBoolean
argument_list|(
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ObjectConverter
operator|.
name|toBoolean
argument_list|(
literal|"FALSE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ObjectConverter
operator|.
name|toBoolean
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ObjectConverter
operator|.
name|toBoolean
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ObjectConverter
operator|.
name|toBoolean
argument_list|(
literal|"yes"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectConverter
operator|.
name|toBool
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectConverter
operator|.
name|toBool
argument_list|(
literal|"TRUE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ObjectConverter
operator|.
name|toBool
argument_list|(
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ObjectConverter
operator|.
name|toBool
argument_list|(
literal|"FALSE"
argument_list|)
argument_list|)
expr_stmt|;
comment|// primitive boolean is more strict
try|try
block|{
name|ObjectConverter
operator|.
name|toBool
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|ObjectConverter
operator|.
name|toBool
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|ObjectConverter
operator|.
name|toBool
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

