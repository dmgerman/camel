begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jndi
operator|.
name|JndiContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test inheritance of parameter binding annotations from superclasses and  * interfaces.  */
end_comment

begin_class
DECL|class|BeanWithAnnotationInheritedTest
specifier|public
class|class
name|BeanWithAnnotationInheritedTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Test
DECL|method|testWithAnnotationsFromOneInterface ()
specifier|public
name|void
name|testWithAnnotationsFromOneInterface
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"x1y1"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:in1"
argument_list|,
literal|"whatever"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithAnnotationsFromTwoInterfaces ()
specifier|public
name|void
name|testWithAnnotationsFromTwoInterfaces
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"x2y2"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:in2"
argument_list|,
literal|"whatever"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithAnnotationsFromSuperclassAndInterface ()
specifier|public
name|void
name|testWithAnnotationsFromSuperclassAndInterface
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"x3y3"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:in3"
argument_list|,
literal|"whatever"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithAnnotationsFromImplementationClassAndInterface ()
specifier|public
name|void
name|testWithAnnotationsFromImplementationClassAndInterface
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"x4y4"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:in4"
argument_list|,
literal|"whatever"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithAnnotationsFromOneInterfaceInheritedByProxy ()
specifier|public
name|void
name|testWithAnnotationsFromOneInterfaceInheritedByProxy
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"x5y5"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:in5"
argument_list|,
literal|"whatever"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|createJndiContext ()
specifier|protected
name|Context
name|createJndiContext
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiContext
name|answer
init|=
operator|new
name|JndiContext
argument_list|()
decl_stmt|;
name|answer
operator|.
name|bind
argument_list|(
literal|"b"
argument_list|,
operator|new
name|B
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|bind
argument_list|(
literal|"p"
argument_list|,
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|I1
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|I1
operator|.
name|class
block|}
argument_list|,
operator|new
name|InvocationHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"m1"
argument_list|)
condition|)
block|{
return|return
name|args
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
operator|+
name|args
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:in1"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"foo"
argument_list|,
name|constant
argument_list|(
literal|"x1"
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"bar"
argument_list|,
name|constant
argument_list|(
literal|"y1"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"bean:b?method=m1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:in2"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"foo"
argument_list|,
name|constant
argument_list|(
literal|"x2"
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"bar"
argument_list|,
name|constant
argument_list|(
literal|"y2"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"bean:b?method=m2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:in3"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"foo"
argument_list|,
name|constant
argument_list|(
literal|"x3"
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"bar"
argument_list|,
name|constant
argument_list|(
literal|"y3"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"bean:b?method=m3"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:in4"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"foo"
argument_list|,
name|constant
argument_list|(
literal|"x4"
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"bar"
argument_list|,
name|constant
argument_list|(
literal|"y4"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"bean:b?method=m4"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:in5"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"foo"
argument_list|,
name|constant
argument_list|(
literal|"x5"
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"bar"
argument_list|,
name|constant
argument_list|(
literal|"y5"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"bean:p?method=m1"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|interface|I1
specifier|private
interface|interface
name|I1
block|{
DECL|method|m1 (@eaderR)String h1, @Header(R)String h2)
name|String
name|m1
parameter_list|(
annotation|@
name|Header
argument_list|(
literal|"foo"
argument_list|)
name|String
name|h1
parameter_list|,
annotation|@
name|Header
argument_list|(
literal|"bar"
argument_list|)
name|String
name|h2
parameter_list|)
function_decl|;
DECL|method|m2 (@eaderR)String h1, String h2)
name|String
name|m2
parameter_list|(
annotation|@
name|Header
argument_list|(
literal|"foo"
argument_list|)
name|String
name|h1
parameter_list|,
name|String
name|h2
parameter_list|)
function_decl|;
block|}
DECL|interface|I2
specifier|private
interface|interface
name|I2
block|{
DECL|method|m2 (String h1, @Header(R)String h2)
name|String
name|m2
parameter_list|(
name|String
name|h1
parameter_list|,
annotation|@
name|Header
argument_list|(
literal|"bar"
argument_list|)
name|String
name|h2
parameter_list|)
function_decl|;
DECL|method|m3 (@eaderR)String h1, String h2)
name|String
name|m3
parameter_list|(
annotation|@
name|Header
argument_list|(
literal|"foo"
argument_list|)
name|String
name|h1
parameter_list|,
name|String
name|h2
parameter_list|)
function_decl|;
DECL|method|m4 (@eaderR)String h1, String h2)
name|String
name|m4
parameter_list|(
annotation|@
name|Header
argument_list|(
literal|"foo"
argument_list|)
name|String
name|h1
parameter_list|,
name|String
name|h2
parameter_list|)
function_decl|;
block|}
DECL|class|A
specifier|private
specifier|abstract
specifier|static
class|class
name|A
implements|implements
name|I2
block|{
DECL|method|m3 (String h1, @Header(R)String h2)
specifier|public
name|String
name|m3
parameter_list|(
name|String
name|h1
parameter_list|,
annotation|@
name|Header
argument_list|(
literal|"bar"
argument_list|)
name|String
name|h2
parameter_list|)
block|{
return|return
name|h1
operator|+
name|h2
return|;
block|}
block|}
DECL|class|B
specifier|private
specifier|static
class|class
name|B
extends|extends
name|A
implements|implements
name|I1
block|{
DECL|method|m1 (String h1, String h2)
specifier|public
name|String
name|m1
parameter_list|(
name|String
name|h1
parameter_list|,
name|String
name|h2
parameter_list|)
block|{
return|return
name|h1
operator|+
name|h2
return|;
block|}
DECL|method|m2 (String h1, String h2)
specifier|public
name|String
name|m2
parameter_list|(
name|String
name|h1
parameter_list|,
name|String
name|h2
parameter_list|)
block|{
return|return
name|h1
operator|+
name|h2
return|;
block|}
DECL|method|m4 (String h1, @Header(R)String h2)
specifier|public
name|String
name|m4
parameter_list|(
name|String
name|h1
parameter_list|,
annotation|@
name|Header
argument_list|(
literal|"bar"
argument_list|)
name|String
name|h2
parameter_list|)
block|{
return|return
name|h1
operator|+
name|h2
return|;
block|}
block|}
block|}
end_class

end_unit

