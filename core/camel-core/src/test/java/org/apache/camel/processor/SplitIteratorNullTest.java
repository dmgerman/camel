begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SplitIteratorNullTest
specifier|public
class|class
name|SplitIteratorNullTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|myIterator
specifier|private
name|MyIterator
name|myIterator
init|=
operator|new
name|MyIterator
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testSplitIteratorNull ()
specifier|public
name|void
name|testSplitIteratorNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|myIterator
operator|.
name|isNullReturned
argument_list|()
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:line"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|myIterator
operator|.
name|isNullReturned
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|split
argument_list|(
name|constant
argument_list|(
name|myIterator
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:line"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|MyIterator
specifier|private
class|class
name|MyIterator
implements|implements
name|Iterator
argument_list|<
name|String
argument_list|>
block|{
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|4
decl_stmt|;
DECL|field|nullReturned
specifier|private
name|boolean
name|nullReturned
decl_stmt|;
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
comment|// we return true one extra time, and cause next to return null
return|return
name|count
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|String
name|next
parameter_list|()
block|{
name|count
operator|--
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|nullReturned
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|count
operator|==
literal|1
condition|)
block|{
return|return
literal|"C"
return|;
block|}
elseif|else
if|if
condition|(
name|count
operator|==
literal|2
condition|)
block|{
return|return
literal|"B"
return|;
block|}
else|else
block|{
return|return
literal|"A"
return|;
block|}
block|}
DECL|method|isNullReturned ()
specifier|public
name|boolean
name|isNullReturned
parameter_list|()
block|{
return|return
name|nullReturned
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|forEachRemaining (Consumer<? super String> action)
specifier|public
name|void
name|forEachRemaining
parameter_list|(
name|Consumer
argument_list|<
name|?
super|super
name|String
argument_list|>
name|action
parameter_list|)
block|{
comment|// noop
block|}
block|}
block|}
end_class

end_unit

