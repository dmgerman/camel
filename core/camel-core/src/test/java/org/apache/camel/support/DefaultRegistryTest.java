begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|FooBar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|DefaultRegistryTest
specifier|public
class|class
name|DefaultRegistryTest
extends|extends
name|TestCase
block|{
DECL|field|br
specifier|private
specifier|final
name|SimpleRegistry
name|br
init|=
operator|new
name|SimpleRegistry
argument_list|()
decl_stmt|;
DECL|field|registry
specifier|private
specifier|final
name|DefaultRegistry
name|registry
init|=
operator|new
name|DefaultRegistry
argument_list|(
name|br
argument_list|)
decl_stmt|;
DECL|field|myCompany
specifier|private
specifier|final
name|Company
name|myCompany
init|=
operator|new
name|Company
argument_list|()
decl_stmt|;
DECL|field|myFooBar
specifier|private
specifier|final
name|FooBar
name|myFooBar
init|=
operator|new
name|FooBar
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|br
operator|.
name|bind
argument_list|(
literal|"myCompany"
argument_list|,
name|myCompany
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"myFooBar"
argument_list|,
name|myFooBar
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLookupByName ()
specifier|public
name|void
name|testLookupByName
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|registry
operator|.
name|lookupByName
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|myCompany
argument_list|,
name|registry
operator|.
name|lookupByName
argument_list|(
literal|"myCompany"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|myFooBar
argument_list|,
name|registry
operator|.
name|lookupByName
argument_list|(
literal|"myFooBar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLookupByNameAndType ()
specifier|public
name|void
name|testLookupByNameAndType
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|registry
operator|.
name|lookupByNameAndType
argument_list|(
literal|"foo"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|myCompany
argument_list|,
name|registry
operator|.
name|lookupByNameAndType
argument_list|(
literal|"myCompany"
argument_list|,
name|Company
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|myFooBar
argument_list|,
name|registry
operator|.
name|lookupByNameAndType
argument_list|(
literal|"myFooBar"
argument_list|,
name|FooBar
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|myCompany
argument_list|,
name|registry
operator|.
name|lookupByNameAndType
argument_list|(
literal|"myCompany"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|myFooBar
argument_list|,
name|registry
operator|.
name|lookupByNameAndType
argument_list|(
literal|"myFooBar"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|registry
operator|.
name|lookupByNameAndType
argument_list|(
literal|"myCompany"
argument_list|,
name|FooBar
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|registry
operator|.
name|lookupByNameAndType
argument_list|(
literal|"myFooBar"
argument_list|,
name|Company
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindByType ()
specifier|public
name|void
name|testFindByType
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|registry
operator|.
name|findByType
argument_list|(
name|DefaultRegistry
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|registry
operator|.
name|findByType
argument_list|(
name|Company
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|myCompany
argument_list|,
name|registry
operator|.
name|findByType
argument_list|(
name|Company
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|registry
operator|.
name|findByType
argument_list|(
name|FooBar
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|myFooBar
argument_list|,
name|registry
operator|.
name|findByType
argument_list|(
name|FooBar
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|registry
operator|.
name|findByType
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|registry
operator|.
name|findByType
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|myCompany
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|myFooBar
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindByTypeWithName ()
specifier|public
name|void
name|testFindByTypeWithName
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|registry
operator|.
name|findByTypeWithName
argument_list|(
name|DefaultRegistry
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|registry
operator|.
name|findByTypeWithName
argument_list|(
name|Company
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|myCompany
argument_list|,
name|registry
operator|.
name|findByTypeWithName
argument_list|(
name|Company
operator|.
name|class
argument_list|)
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|registry
operator|.
name|findByTypeWithName
argument_list|(
name|FooBar
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|myFooBar
argument_list|,
name|registry
operator|.
name|findByTypeWithName
argument_list|(
name|FooBar
operator|.
name|class
argument_list|)
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|registry
operator|.
name|findByTypeWithName
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|registry
operator|.
name|findByTypeWithName
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"myCompany"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myFooBar"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

