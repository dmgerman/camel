begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.resequencer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|resequencer
package|;
end_package

begin_comment
comment|/**  * Synchronization facade for {@link ResequencerEngine} for testing purposes  * only. This facade is used for both exclusion purposes and for visibility of  * changes performed by different threads in unit tests. This facade is<i>not</i>  * needed in {@link ResequencerEngine} applications because it is expected that  * resequencing is performed by a single thread.  */
end_comment

begin_class
DECL|class|ResequencerEngineSync
specifier|public
class|class
name|ResequencerEngineSync
parameter_list|<
name|E
parameter_list|>
block|{
DECL|field|resequencer
specifier|private
name|ResequencerEngine
argument_list|<
name|E
argument_list|>
name|resequencer
decl_stmt|;
DECL|method|ResequencerEngineSync (ResequencerEngine<E> resequencer)
specifier|public
name|ResequencerEngineSync
parameter_list|(
name|ResequencerEngine
argument_list|<
name|E
argument_list|>
name|resequencer
parameter_list|)
block|{
name|this
operator|.
name|resequencer
operator|=
name|resequencer
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
name|resequencer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|size ()
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
return|return
name|resequencer
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getTimeout ()
specifier|public
specifier|synchronized
name|long
name|getTimeout
parameter_list|()
block|{
return|return
name|resequencer
operator|.
name|getTimeout
argument_list|()
return|;
block|}
DECL|method|setTimeout (long timeout)
specifier|public
specifier|synchronized
name|void
name|setTimeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|resequencer
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
DECL|method|getSequenceSender ()
specifier|public
specifier|synchronized
name|SequenceSender
argument_list|<
name|E
argument_list|>
name|getSequenceSender
parameter_list|()
block|{
return|return
name|resequencer
operator|.
name|getSequenceSender
argument_list|()
return|;
block|}
DECL|method|setSequenceSender (SequenceSender<E> sequenceSender)
specifier|public
specifier|synchronized
name|void
name|setSequenceSender
parameter_list|(
name|SequenceSender
argument_list|<
name|E
argument_list|>
name|sequenceSender
parameter_list|)
block|{
name|resequencer
operator|.
name|setSequenceSender
argument_list|(
name|sequenceSender
argument_list|)
expr_stmt|;
block|}
DECL|method|getLastDelivered ()
specifier|synchronized
name|E
name|getLastDelivered
parameter_list|()
block|{
return|return
name|resequencer
operator|.
name|getLastDelivered
argument_list|()
return|;
block|}
DECL|method|setLastDelivered (E o)
specifier|synchronized
name|void
name|setLastDelivered
parameter_list|(
name|E
name|o
parameter_list|)
block|{
name|resequencer
operator|.
name|setLastDelivered
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
DECL|method|insert (E o)
specifier|public
specifier|synchronized
name|void
name|insert
parameter_list|(
name|E
name|o
parameter_list|)
block|{
name|resequencer
operator|.
name|insert
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
DECL|method|deliver ()
specifier|public
specifier|synchronized
name|void
name|deliver
parameter_list|()
throws|throws
name|Exception
block|{
name|resequencer
operator|.
name|deliver
argument_list|()
expr_stmt|;
block|}
DECL|method|deliverNext ()
specifier|public
specifier|synchronized
name|boolean
name|deliverNext
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|resequencer
operator|.
name|deliverNext
argument_list|()
return|;
block|}
block|}
end_class

end_unit

