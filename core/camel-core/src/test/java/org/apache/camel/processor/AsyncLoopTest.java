begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|async
operator|.
name|MyAsyncComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|AsyncLoopTest
specifier|public
class|class
name|AsyncLoopTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|BASE_PAYLOAD
specifier|private
specifier|static
specifier|final
name|String
name|BASE_PAYLOAD
init|=
literal|"<Hello n='4'/>"
decl_stmt|;
DECL|field|resultEndpoint
name|MockEndpoint
name|resultEndpoint
decl_stmt|;
annotation|@
name|Test
DECL|method|testCounterLoop ()
specifier|public
name|void
name|testCounterLoop
parameter_list|()
throws|throws
name|Exception
block|{
name|performLoopTest
argument_list|(
literal|"direct:a"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExpressionLoop ()
specifier|public
name|void
name|testExpressionLoop
parameter_list|()
throws|throws
name|Exception
block|{
name|performLoopTest
argument_list|(
literal|"direct:b"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExpressionClauseLoop ()
specifier|public
name|void
name|testExpressionClauseLoop
parameter_list|()
throws|throws
name|Exception
block|{
name|performLoopTest
argument_list|(
literal|"direct:c"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLoopAsBlock ()
specifier|public
name|void
name|testLoopAsBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|lastEndpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:last"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|lastEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lastEndpoint
operator|.
name|expectedBodiesReceived
argument_list|(
name|BASE_PAYLOAD
operator|+
operator|new
name|String
argument_list|(
operator|new
name|char
index|[
literal|2
index|]
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\0"
argument_list|,
literal|" Hello Camel"
argument_list|)
argument_list|)
expr_stmt|;
name|performLoopTest
argument_list|(
literal|"direct:d"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|lastEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLoopWithInvalidExpression ()
specifier|public
name|void
name|testLoopWithInvalidExpression
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|performLoopTest
argument_list|(
literal|"direct:b"
argument_list|,
literal|4
argument_list|,
literal|"invalid"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected for invalid expression"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeCamelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testLoopProperties ()
specifier|public
name|void
name|testLoopProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|lastEndpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:last"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|lastEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lastEndpoint
operator|.
name|expectedBodiesReceived
argument_list|(
name|BASE_PAYLOAD
operator|+
operator|new
name|String
argument_list|(
operator|new
name|char
index|[
literal|10
index|]
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\0"
argument_list|,
literal|" Hello Camel"
argument_list|)
argument_list|)
expr_stmt|;
name|performLoopTest
argument_list|(
literal|"direct:e"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|lastEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|performLoopTest (String endpointUri, int expectedIterations, String header)
specifier|private
name|void
name|performLoopTest
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|int
name|expectedIterations
parameter_list|,
name|String
name|header
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
name|expectedIterations
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|expectedIterations
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedIterations
condition|;
name|i
operator|++
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|BASE_PAYLOAD
operator|+
operator|new
name|String
argument_list|(
operator|new
name|char
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\0"
argument_list|,
literal|" Hello Camel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|resultEndpoint
operator|.
name|expectedBodiesReceived
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|endpointUri
argument_list|,
name|BASE_PAYLOAD
argument_list|,
literal|"loop"
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|performLoopTest (String endpointUri, int expectedIterations)
specifier|private
name|void
name|performLoopTest
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|int
name|expectedIterations
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|performLoopTest
argument_list|(
name|endpointUri
argument_list|,
name|expectedIterations
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|resultEndpoint
operator|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"mock:result"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
specifier|final
name|Processor
name|loopTest
init|=
operator|new
name|LoopTestProcessor
argument_list|(
literal|10
argument_list|)
decl_stmt|;
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|context
operator|.
name|addComponent
argument_list|(
literal|"async"
argument_list|,
operator|new
name|MyAsyncComponent
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:a"
argument_list|)
operator|.
name|loop
argument_list|(
literal|8
argument_list|)
operator|.
name|to
argument_list|(
literal|"async:hello:camel?append=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:b"
argument_list|)
operator|.
name|loop
argument_list|(
name|header
argument_list|(
literal|"loop"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"async:hello:camel?append=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:c"
argument_list|)
operator|.
name|loop
argument_list|()
operator|.
name|xpath
argument_list|(
literal|"/Hello/@n"
argument_list|)
operator|.
name|to
argument_list|(
literal|"async:hello:camel?append=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:d"
argument_list|)
operator|.
name|loop
argument_list|(
literal|2
argument_list|)
operator|.
name|to
argument_list|(
literal|"async:hello:camel?append=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:last"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:e"
argument_list|)
operator|.
name|loop
argument_list|(
literal|10
argument_list|)
operator|.
name|to
argument_list|(
literal|"async:hello:camel?append=true"
argument_list|)
operator|.
name|process
argument_list|(
name|loopTest
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:last"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

