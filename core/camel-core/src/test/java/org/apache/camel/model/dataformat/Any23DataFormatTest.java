begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|entry
import|;
end_import

begin_class
DECL|class|Any23DataFormatTest
specifier|public
class|class
name|Any23DataFormatTest
block|{
DECL|field|xml
specifier|private
specifier|final
name|String
name|xml
init|=
literal|"<?xml version=\"1.0\"?>"
operator|+
literal|"<any23 xmlns=\"http://camel.apache.org/schema/spring\">"
operator|+
literal|"<configuration>"
operator|+
literal|"<property key=\"k1\" value=\"v1\" />"
operator|+
literal|"<property key=\"k2\" value=\"v2\" />"
operator|+
literal|"</configuration>"
operator|+
literal|"</any23>"
decl_stmt|;
annotation|@
name|Test
DECL|method|shouldDeserializeConfigurationPropertiesFromXml ()
specifier|public
name|void
name|shouldDeserializeConfigurationPropertiesFromXml
parameter_list|()
throws|throws
name|JAXBException
throws|,
name|IOException
block|{
specifier|final
name|JAXBContext
name|context
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|Any23DataFormat
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Unmarshaller
name|unmarshaller
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
specifier|final
name|StringReader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
decl_stmt|;
specifier|final
name|Any23DataFormat
name|any23DataFormat
init|=
operator|(
name|Any23DataFormat
operator|)
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|any23DataFormat
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|containsOnly
argument_list|(
name|entry
argument_list|(
literal|"k1"
argument_list|,
literal|"v1"
argument_list|)
argument_list|,
name|entry
argument_list|(
literal|"k2"
argument_list|,
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

