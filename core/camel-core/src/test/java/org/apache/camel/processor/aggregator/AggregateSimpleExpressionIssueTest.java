begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.aggregator
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|NotifyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"Manual unit test"
argument_list|)
DECL|class|AggregateSimpleExpressionIssueTest
specifier|public
class|class
name|AggregateSimpleExpressionIssueTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AggregateSimpleExpressionIssueTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DATA
specifier|private
specifier|static
specifier|final
name|String
name|DATA
init|=
literal|"100,200,1,123456,2010-03-01T12:13:14,100,USD,Best Buy,5045,Santa Monica,CA,Type\n"
decl_stmt|;
DECL|field|myBean
specifier|private
name|MyBean
name|myBean
init|=
operator|new
name|MyBean
argument_list|()
decl_stmt|;
DECL|field|aggStrategy
specifier|private
name|AggStrategy
name|aggStrategy
init|=
operator|new
name|AggStrategy
argument_list|()
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteDirectory
argument_list|(
literal|"target/data/files"
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDummy ()
specifier|public
name|void
name|testDummy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
comment|// Enable me for manual unit testing
DECL|method|xxxtestAggregateSimpleExpression ()
specifier|public
name|void
name|xxxtestAggregateSimpleExpression
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 10 files + 10 files * 100 batches
name|int
name|files
init|=
literal|10
decl_stmt|;
name|int
name|rows
init|=
literal|100000
decl_stmt|;
name|int
name|batches
init|=
name|rows
operator|/
literal|1000
decl_stmt|;
name|int
name|total
init|=
name|files
operator|+
operator|(
name|files
operator|*
name|rows
operator|)
operator|+
operator|(
name|files
operator|*
name|batches
operator|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"There are "
operator|+
name|total
operator|+
literal|" exchanges"
argument_list|)
expr_stmt|;
name|NotifyBuilder
name|notify
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
name|total
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing 10 files with 100000 rows in each file"
argument_list|)
expr_stmt|;
comment|// write 10 files of 100k rows
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
condition|;
name|i
operator|++
control|)
block|{
name|Writer
name|out
init|=
name|IOHelper
operator|.
name|buffered
argument_list|(
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/data/files"
argument_list|,
literal|"data"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rows
condition|;
name|j
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|DATA
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// start the route
name|StopWatch
name|watch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|context
operator|.
name|getRouteController
argument_list|()
operator|.
name|startRoute
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting to process all the files"
argument_list|)
expr_stmt|;
name|boolean
name|matches
init|=
name|notify
operator|.
name|matches
argument_list|(
literal|3
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Should process all files "
operator|+
name|matches
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Time taken "
operator|+
name|watch
operator|.
name|taken
argument_list|()
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"file:target/data/files"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|noAutoStartup
argument_list|()
operator|.
name|log
argument_list|(
literal|"Picked up ${file:name}"
argument_list|)
operator|.
name|split
argument_list|()
operator|.
name|tokenize
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|streaming
argument_list|()
operator|.
name|aggregate
argument_list|(
name|constant
argument_list|(
literal|true
argument_list|)
argument_list|,
name|aggStrategy
argument_list|)
operator|.
name|completionSize
argument_list|(
name|simple
argument_list|(
literal|"1000"
argument_list|)
argument_list|)
operator|.
name|completionTimeout
argument_list|(
name|simple
argument_list|(
literal|"500"
argument_list|)
argument_list|)
operator|.
name|bean
argument_list|(
name|myBean
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|MyBean
specifier|public
specifier|static
specifier|final
class|class
name|MyBean
block|{
DECL|field|cnt
specifier|private
specifier|volatile
name|int
name|cnt
decl_stmt|;
DECL|method|invoke (final List<String> strList)
specifier|public
name|void
name|invoke
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|strList
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Batch "
operator|+
operator|(
operator|++
name|cnt
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AggStrategy
specifier|public
specifier|static
specifier|final
class|class
name|AggStrategy
implements|implements
name|AggregationStrategy
block|{
DECL|field|batchSize
specifier|private
specifier|final
name|int
name|batchSize
init|=
literal|1000
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|aggregate (Exchange oldExchange, Exchange newExchange)
specifier|public
name|Exchange
name|aggregate
parameter_list|(
name|Exchange
name|oldExchange
parameter_list|,
name|Exchange
name|newExchange
parameter_list|)
block|{
name|String
name|str
init|=
name|newExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldExchange
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|batchSize
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|newExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|newExchange
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|oldExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
return|return
name|oldExchange
return|;
block|}
block|}
block|}
end_class

end_unit

