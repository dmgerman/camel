begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|LoadRouteFromXmlWithNamespaceTest
specifier|public
class|class
name|LoadRouteFromXmlWithNamespaceTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Test
DECL|method|testLoadRouteWithNamespaceFromXml ()
specifier|public
name|void
name|testLoadRouteWithNamespaceFromXml
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"routeWithNamespace.xml"
argument_list|)
decl_stmt|;
name|RoutesDefinition
name|routes
init|=
name|ModelHelper
operator|.
name|loadRoutesDefinition
argument_list|(
name|context
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|context
operator|.
name|addRouteDefinitions
argument_list|(
name|routes
operator|.
name|getRoutes
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|Route
name|routeWithNamespace
init|=
name|context
operator|.
name|getRoute
argument_list|(
literal|"routeWithNamespace"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected to find route with id: routeWithNamespace"
argument_list|,
name|routeWithNamespace
argument_list|)
expr_stmt|;
name|MockEndpoint
name|bar
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:bar"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|bar
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello from foo"
argument_list|)
expr_stmt|;
comment|// Make sure loaded route can process a XML payload with namespaces
comment|// attached
name|context
operator|.
name|createProducerTemplate
argument_list|()
operator|.
name|sendBody
argument_list|(
literal|"direct:foo"
argument_list|,
literal|"<?xml version='1.0'?><foo xmlns='http://foo'><bar>cheese</bar></foo>"
argument_list|)
expr_stmt|;
name|bar
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

