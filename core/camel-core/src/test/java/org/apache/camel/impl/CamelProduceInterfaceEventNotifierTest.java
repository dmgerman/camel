begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelBeanPostProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|EventNotifierSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CamelProduceInterfaceEventNotifierTest
specifier|public
class|class
name|CamelProduceInterfaceEventNotifierTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|events
specifier|private
specifier|static
name|List
argument_list|<
name|CamelEvent
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|postProcessor
specifier|private
name|CamelBeanPostProcessor
name|postProcessor
decl_stmt|;
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultCamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|(
name|createRegistry
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|addEventNotifier
argument_list|(
operator|new
name|EventNotifierSupport
argument_list|()
block|{
specifier|public
name|void
name|notify
parameter_list|(
name|CamelEvent
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|event
operator|instanceof
name|CamelEvent
operator|.
name|ExchangeSendingEvent
operator|||
name|event
operator|instanceof
name|CamelEvent
operator|.
name|ExchangeSentEvent
condition|)
block|{
name|events
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Test
DECL|method|testPostProcessor ()
specifier|public
name|void
name|testPostProcessor
parameter_list|()
throws|throws
name|Exception
block|{
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|before
init|=
name|events
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|before
argument_list|)
expr_stmt|;
name|MySender
name|sender
init|=
operator|new
name|MySender
argument_list|()
decl_stmt|;
name|postProcessor
operator|.
name|postProcessBeforeInitialization
argument_list|(
name|sender
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|postProcessor
operator|.
name|postProcessAfterInitialization
argument_list|(
name|sender
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sender
operator|.
name|hello
operator|.
name|sayHello
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|int
name|after
init|=
name|events
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// should be 2 events
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|CamelEvent
operator|.
name|ExchangeSendingEvent
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|CamelEvent
operator|.
name|ExchangeSentEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|postProcessor
operator|=
name|context
operator|.
name|getBeanPostProcessor
argument_list|()
expr_stmt|;
block|}
DECL|interface|FooService
interface|interface
name|FooService
block|{
DECL|method|sayHello (String hello)
name|void
name|sayHello
parameter_list|(
name|String
name|hello
parameter_list|)
function_decl|;
block|}
DECL|class|MySender
class|class
name|MySender
block|{
annotation|@
name|Produce
argument_list|(
literal|"mock:result"
argument_list|)
DECL|field|hello
name|FooService
name|hello
decl_stmt|;
block|}
block|}
end_class

end_unit

