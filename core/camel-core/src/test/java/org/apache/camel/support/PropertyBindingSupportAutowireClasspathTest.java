begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit test for PropertyBindingSupport  */
end_comment

begin_class
DECL|class|PropertyBindingSupportAutowireClasspathTest
specifier|public
class|class
name|PropertyBindingSupportAutowireClasspathTest
extends|extends
name|ContextTestSupport
block|{
annotation|@
name|Test
DECL|method|testAutowireProperties ()
specifier|public
name|void
name|testAutowireProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|Foo
name|foo
init|=
operator|new
name|Foo
argument_list|()
decl_stmt|;
name|PropertyBindingSupport
operator|.
name|bindProperty
argument_list|(
name|context
argument_list|,
name|foo
argument_list|,
literal|"name"
argument_list|,
literal|"James"
argument_list|)
expr_stmt|;
name|PropertyBindingSupport
operator|.
name|autowireInterfacePropertiesFromClasspath
argument_list|(
name|context
argument_list|,
name|foo
argument_list|)
expr_stmt|;
name|PropertyBindingSupport
operator|.
name|bindProperty
argument_list|(
name|context
argument_list|,
name|foo
argument_list|,
literal|"my-bar.name"
argument_list|,
literal|"Thirsty Bear"
argument_list|)
expr_stmt|;
name|PropertyBindingSupport
operator|.
name|bindProperty
argument_list|(
name|context
argument_list|,
name|foo
argument_list|,
literal|"my-bar.city"
argument_list|,
literal|"San Francisco"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"James"
argument_list|,
name|foo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Thirsty Bear"
argument_list|,
name|foo
operator|.
name|getMyBar
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"San Francisco"
argument_list|,
name|foo
operator|.
name|getMyBar
argument_list|()
operator|.
name|getCity
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|Foo
specifier|public
specifier|static
class|class
name|Foo
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|myBar
specifier|private
name|MyBarInterface
name|myBar
decl_stmt|;
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getMyBar ()
specifier|public
name|MyBarInterface
name|getMyBar
parameter_list|()
block|{
return|return
name|myBar
return|;
block|}
DECL|method|setMyBar (MyBarInterface myBar)
specifier|public
name|void
name|setMyBar
parameter_list|(
name|MyBarInterface
name|myBar
parameter_list|)
block|{
name|this
operator|.
name|myBar
operator|=
name|myBar
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

