begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.intercept
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|intercept
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NamedNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InterceptStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ParentChildInterceptStrategyTest
specifier|public
class|class
name|ParentChildInterceptStrategyTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|LIST
specifier|protected
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|LIST
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testParentChild ()
specifier|public
name|void
name|testParentChild
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:done"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:a"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:b"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:c"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:d"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:e"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Hello Camel"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|LIST
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Parent route -> target task-a"
argument_list|,
name|LIST
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Parent when -> target task-b"
argument_list|,
name|LIST
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Parent when -> target task-c"
argument_list|,
name|LIST
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Parent when2 -> target task-d"
argument_list|,
name|LIST
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Parent otherwise -> target task-e"
argument_list|,
name|LIST
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Parent route -> target choice"
argument_list|,
name|LIST
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// the last one has no custom id so its using its label instead
name|assertEquals
argument_list|(
literal|"Parent route -> target mock:done"
argument_list|,
name|LIST
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addInterceptStrategy
argument_list|(
operator|new
name|MyParentChildInterceptStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"route"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:a"
argument_list|)
operator|.
name|id
argument_list|(
literal|"task-a"
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|id
argument_list|(
literal|"choice"
argument_list|)
operator|.
name|when
argument_list|(
name|simple
argument_list|(
literal|"${body} contains 'Camel'"
argument_list|)
argument_list|)
operator|.
name|id
argument_list|(
literal|"when"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:b"
argument_list|)
operator|.
name|id
argument_list|(
literal|"task-b"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:c"
argument_list|)
operator|.
name|id
argument_list|(
literal|"task-c"
argument_list|)
operator|.
name|when
argument_list|(
name|simple
argument_list|(
literal|"${body} contains 'Donkey'"
argument_list|)
argument_list|)
operator|.
name|id
argument_list|(
literal|"when2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:d"
argument_list|)
operator|.
name|id
argument_list|(
literal|"task-d"
argument_list|)
operator|.
name|otherwise
argument_list|()
operator|.
name|id
argument_list|(
literal|"otherwise"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:e"
argument_list|)
operator|.
name|id
argument_list|(
literal|"task-e"
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:done"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|class|MyParentChildInterceptStrategy
specifier|public
specifier|static
specifier|final
class|class
name|MyParentChildInterceptStrategy
implements|implements
name|InterceptStrategy
block|{
annotation|@
name|Override
DECL|method|wrapProcessorInInterceptors (final CamelContext context, final NamedNode node, final Processor target, final Processor nextTarget)
specifier|public
name|Processor
name|wrapProcessorInInterceptors
parameter_list|(
specifier|final
name|CamelContext
name|context
parameter_list|,
specifier|final
name|NamedNode
name|node
parameter_list|,
specifier|final
name|Processor
name|target
parameter_list|,
specifier|final
name|Processor
name|nextTarget
parameter_list|)
throws|throws
name|Exception
block|{
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
init|=
operator|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
operator|)
name|node
decl_stmt|;
name|String
name|targetId
init|=
name|definition
operator|.
name|hasCustomIdAssigned
argument_list|()
condition|?
name|definition
operator|.
name|getId
argument_list|()
else|:
name|definition
operator|.
name|getLabel
argument_list|()
decl_stmt|;
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|parent
init|=
name|definition
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|parentId
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parentId
operator|=
name|parent
operator|.
name|hasCustomIdAssigned
argument_list|()
condition|?
name|parent
operator|.
name|getId
argument_list|()
else|:
name|parent
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
name|LIST
operator|.
name|add
argument_list|(
literal|"Parent "
operator|+
name|parentId
operator|+
literal|" -> target "
operator|+
name|targetId
argument_list|)
expr_stmt|;
return|return
name|target
return|;
block|}
block|}
block|}
end_class

end_unit

