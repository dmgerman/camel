begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|BeanInvocationSerializeTest
specifier|public
class|class
name|BeanInvocationSerializeTest
extends|extends
name|TestSupport
block|{
annotation|@
name|Test
DECL|method|testSerialize ()
specifier|public
name|void
name|testSerialize
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|method
init|=
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"cheese"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|BeanInvocation
name|invocation
init|=
operator|new
name|BeanInvocation
argument_list|(
name|method
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|out
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|invocation
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|ObjectInputStream
name|in
init|=
operator|new
name|ObjectInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|object
init|=
name|in
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|BeanInvocation
name|actual
init|=
name|assertIsInstanceOf
argument_list|(
name|BeanInvocation
operator|.
name|class
argument_list|,
name|object
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Received "
operator|+
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSerializeCtr ()
specifier|public
name|void
name|testSerializeCtr
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|method
init|=
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"cheese"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|BeanInvocation
name|invocation
init|=
operator|new
name|BeanInvocation
argument_list|()
decl_stmt|;
name|invocation
operator|.
name|setArgs
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|invocation
operator|.
name|setMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|out
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|invocation
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|ObjectInputStream
name|in
init|=
operator|new
name|ObjectInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|object
init|=
name|in
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|BeanInvocation
name|actual
init|=
name|assertIsInstanceOf
argument_list|(
name|BeanInvocation
operator|.
name|class
argument_list|,
name|object
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Received "
operator|+
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|cheese (String a, String b)
specifier|public
name|void
name|cheese
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Called with a: {} b: {}"
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

