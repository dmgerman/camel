begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"routing,cloud,service-discovery"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"zookeeperServiceDiscovery"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|ZooKeeperServiceCallServiceDiscoveryConfiguration
specifier|public
class|class
name|ZooKeeperServiceCallServiceDiscoveryConfiguration
extends|extends
name|ServiceCallServiceDiscoveryConfiguration
block|{
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|nodes
specifier|private
name|String
name|nodes
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|namespace
specifier|private
name|String
name|namespace
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|reconnectBaseSleepTime
specifier|private
name|String
name|reconnectBaseSleepTime
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|reconnectMaxSleepTime
specifier|private
name|String
name|reconnectMaxSleepTime
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|reconnectMaxRetries
specifier|private
name|Integer
name|reconnectMaxRetries
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|sessionTimeout
specifier|private
name|String
name|sessionTimeout
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|connectionTimeout
specifier|private
name|String
name|connectionTimeout
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|basePath
specifier|private
name|String
name|basePath
decl_stmt|;
DECL|method|ZooKeeperServiceCallServiceDiscoveryConfiguration ()
specifier|public
name|ZooKeeperServiceCallServiceDiscoveryConfiguration
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ZooKeeperServiceCallServiceDiscoveryConfiguration (ServiceCallDefinition parent)
specifier|public
name|ZooKeeperServiceCallServiceDiscoveryConfiguration
parameter_list|(
name|ServiceCallDefinition
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
literal|"zookeeper-service-discovery"
argument_list|)
expr_stmt|;
block|}
comment|// *************************************************************************
comment|// Getter/Setter
comment|// *************************************************************************
DECL|method|getNodes ()
specifier|public
name|String
name|getNodes
parameter_list|()
block|{
return|return
name|nodes
return|;
block|}
comment|/**      * A comma separate list of servers to connect to in the form host:port      */
DECL|method|setNodes (String nodes)
specifier|public
name|void
name|setNodes
parameter_list|(
name|String
name|nodes
parameter_list|)
block|{
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
block|}
DECL|method|getNamespace ()
specifier|public
name|String
name|getNamespace
parameter_list|()
block|{
return|return
name|namespace
return|;
block|}
comment|/**      * As ZooKeeper is a shared space, users of a given cluster should stay within      * a pre-defined namespace. If a namespace is set here, all paths will get pre-pended      * with the namespace      */
DECL|method|setNamespace (String namespace)
specifier|public
name|void
name|setNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
block|}
DECL|method|getReconnectBaseSleepTime ()
specifier|public
name|String
name|getReconnectBaseSleepTime
parameter_list|()
block|{
return|return
name|reconnectBaseSleepTime
return|;
block|}
comment|/**      * Initial amount of time to wait between retries.      */
DECL|method|setReconnectBaseSleepTime (String reconnectBaseSleepTime)
specifier|public
name|void
name|setReconnectBaseSleepTime
parameter_list|(
name|String
name|reconnectBaseSleepTime
parameter_list|)
block|{
name|this
operator|.
name|reconnectBaseSleepTime
operator|=
name|reconnectBaseSleepTime
expr_stmt|;
block|}
DECL|method|getReconnectMaxSleepTime ()
specifier|public
name|String
name|getReconnectMaxSleepTime
parameter_list|()
block|{
return|return
name|reconnectMaxSleepTime
return|;
block|}
comment|/**      * Max time in ms to sleep on each retry      */
DECL|method|setReconnectMaxSleepTime (String reconnectMaxSleepTime)
specifier|public
name|void
name|setReconnectMaxSleepTime
parameter_list|(
name|String
name|reconnectMaxSleepTime
parameter_list|)
block|{
name|this
operator|.
name|reconnectMaxSleepTime
operator|=
name|reconnectMaxSleepTime
expr_stmt|;
block|}
DECL|method|getReconnectMaxRetries ()
specifier|public
name|Integer
name|getReconnectMaxRetries
parameter_list|()
block|{
return|return
name|reconnectMaxRetries
return|;
block|}
comment|/**      * Max number of times to retry      */
DECL|method|setReconnectMaxRetries (Integer reconnectMaxRetries)
specifier|public
name|void
name|setReconnectMaxRetries
parameter_list|(
name|Integer
name|reconnectMaxRetries
parameter_list|)
block|{
name|this
operator|.
name|reconnectMaxRetries
operator|=
name|reconnectMaxRetries
expr_stmt|;
block|}
DECL|method|getSessionTimeout ()
specifier|public
name|String
name|getSessionTimeout
parameter_list|()
block|{
return|return
name|sessionTimeout
return|;
block|}
comment|/**      * Session timeout.      */
DECL|method|setSessionTimeout (String sessionTimeout)
specifier|public
name|void
name|setSessionTimeout
parameter_list|(
name|String
name|sessionTimeout
parameter_list|)
block|{
name|this
operator|.
name|sessionTimeout
operator|=
name|sessionTimeout
expr_stmt|;
block|}
DECL|method|getConnectionTimeout ()
specifier|public
name|String
name|getConnectionTimeout
parameter_list|()
block|{
return|return
name|connectionTimeout
return|;
block|}
comment|/**      * Connection timeout.      */
DECL|method|setConnectionTimeout (String connectionTimeout)
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectionTimeout
operator|=
name|connectionTimeout
expr_stmt|;
block|}
DECL|method|getBasePath ()
specifier|public
name|String
name|getBasePath
parameter_list|()
block|{
return|return
name|basePath
return|;
block|}
comment|/**      * Set the base path to store in ZK      */
DECL|method|setBasePath (String basePath)
specifier|public
name|void
name|setBasePath
parameter_list|(
name|String
name|basePath
parameter_list|)
block|{
name|this
operator|.
name|basePath
operator|=
name|basePath
expr_stmt|;
block|}
comment|// *************************************************************************
comment|// Fluent API
comment|// *************************************************************************
DECL|method|nodes (String nodes)
specifier|public
name|ZooKeeperServiceCallServiceDiscoveryConfiguration
name|nodes
parameter_list|(
name|String
name|nodes
parameter_list|)
block|{
name|setNodes
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|namespace (String namespace)
specifier|public
name|ZooKeeperServiceCallServiceDiscoveryConfiguration
name|namespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|reconnectBaseSleepTime (String reconnectBaseSleepTime)
specifier|public
name|ZooKeeperServiceCallServiceDiscoveryConfiguration
name|reconnectBaseSleepTime
parameter_list|(
name|String
name|reconnectBaseSleepTime
parameter_list|)
block|{
name|setReconnectBaseSleepTime
argument_list|(
name|reconnectBaseSleepTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|reconnectMaxSleepTime (String reconnectMaxSleepTime)
specifier|public
name|ZooKeeperServiceCallServiceDiscoveryConfiguration
name|reconnectMaxSleepTime
parameter_list|(
name|String
name|reconnectMaxSleepTime
parameter_list|)
block|{
name|setReconnectMaxSleepTime
argument_list|(
name|reconnectMaxSleepTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|reconnectMaxRetries (int reconnectMaxRetries)
specifier|public
name|ZooKeeperServiceCallServiceDiscoveryConfiguration
name|reconnectMaxRetries
parameter_list|(
name|int
name|reconnectMaxRetries
parameter_list|)
block|{
name|setReconnectMaxRetries
argument_list|(
name|reconnectMaxRetries
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|sessionTimeout (String sessionTimeout)
specifier|public
name|ZooKeeperServiceCallServiceDiscoveryConfiguration
name|sessionTimeout
parameter_list|(
name|String
name|sessionTimeout
parameter_list|)
block|{
name|setSessionTimeout
argument_list|(
name|sessionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|connectionTimeout (String connectionTimeout)
specifier|public
name|ZooKeeperServiceCallServiceDiscoveryConfiguration
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|setConnectionTimeout
argument_list|(
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|basePath (String basePath)
specifier|public
name|ZooKeeperServiceCallServiceDiscoveryConfiguration
name|basePath
parameter_list|(
name|String
name|basePath
parameter_list|)
block|{
name|setBasePath
argument_list|(
name|basePath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

