begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|DiscoverableService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|RoutePolicySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Service Registration Route policy"
argument_list|)
DECL|class|ServiceRegistrationRoutePolicy
specifier|public
class|class
name|ServiceRegistrationRoutePolicy
extends|extends
name|RoutePolicySupport
implements|implements
name|CamelContextAware
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServiceRegistrationRoutePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|serviceRegistrySelector
specifier|private
specifier|final
name|ServiceRegistry
operator|.
name|Selector
name|serviceRegistrySelector
decl_stmt|;
DECL|field|serviceRegistry
specifier|private
name|ServiceRegistry
name|serviceRegistry
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|method|ServiceRegistrationRoutePolicy ()
specifier|public
name|ServiceRegistrationRoutePolicy
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|ServiceRegistrySelectors
operator|.
name|DEFAULT_SELECTOR
argument_list|)
expr_stmt|;
block|}
DECL|method|ServiceRegistrationRoutePolicy (ServiceRegistry.Selector serviceRegistrySelector)
specifier|public
name|ServiceRegistrationRoutePolicy
parameter_list|(
name|ServiceRegistry
operator|.
name|Selector
name|serviceRegistrySelector
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|serviceRegistrySelector
argument_list|)
expr_stmt|;
block|}
DECL|method|ServiceRegistrationRoutePolicy (ServiceRegistry serviceRegistry, ServiceRegistry.Selector serviceRegistrySelector)
specifier|public
name|ServiceRegistrationRoutePolicy
parameter_list|(
name|ServiceRegistry
name|serviceRegistry
parameter_list|,
name|ServiceRegistry
operator|.
name|Selector
name|serviceRegistrySelector
parameter_list|)
block|{
name|this
operator|.
name|serviceRegistry
operator|=
name|serviceRegistry
expr_stmt|;
name|this
operator|.
name|serviceRegistrySelector
operator|=
name|serviceRegistrySelector
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
comment|// ***********************
comment|// policy life-cycle
comment|// ***********************
annotation|@
name|Override
DECL|method|doStart ()
specifier|public
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|serviceRegistry
operator|==
literal|null
condition|)
block|{
name|serviceRegistry
operator|=
name|ServiceRegistryHelper
operator|.
name|lookupService
argument_list|(
name|camelContext
argument_list|,
name|serviceRegistrySelector
argument_list|)
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|IllegalStateException
argument_list|(
literal|"ServiceRegistry service not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"ServiceRegistrationRoutePolicy {} is using ServiceRegistry instance {} (id={}, type={})"
argument_list|,
name|this
argument_list|,
name|serviceRegistry
argument_list|,
name|serviceRegistry
operator|.
name|getId
argument_list|()
argument_list|,
name|serviceRegistry
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ***********************
comment|// route life-cycle
comment|// ***********************
annotation|@
name|Override
DECL|method|onStart (Route route)
specifier|public
name|void
name|onStart
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|register
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onStop (Route route)
specifier|public
name|void
name|onStop
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|deregister
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onSuspend (Route route)
specifier|public
name|void
name|onSuspend
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|deregister
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResume (Route route)
specifier|public
name|void
name|onResume
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|register
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
comment|// ***********************
comment|// registration helpers
comment|// ***********************
DECL|method|register (Route route)
specifier|private
name|void
name|register
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|computeServiceDefinition
argument_list|(
name|route
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|serviceRegistry
operator|::
name|register
argument_list|)
expr_stmt|;
block|}
DECL|method|deregister (Route route)
specifier|private
name|void
name|deregister
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|computeServiceDefinition
argument_list|(
name|route
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|serviceRegistry
operator|::
name|deregister
argument_list|)
expr_stmt|;
block|}
DECL|method|computeServiceDefinition (Route route)
specifier|private
name|Optional
argument_list|<
name|ServiceDefinition
argument_list|>
name|computeServiceDefinition
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
specifier|final
name|Endpoint
name|endpoint
init|=
name|route
operator|.
name|getConsumer
argument_list|()
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpoint
operator|instanceof
name|DiscoverableService
condition|)
block|{
specifier|final
name|DiscoverableService
name|service
init|=
operator|(
name|DiscoverableService
operator|)
name|endpoint
decl_stmt|;
comment|// first load all the properties from the endpoint
name|properties
operator|.
name|putAll
argument_list|(
name|service
operator|.
name|getServiceProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// then add additional properties from route with ServiceDefinition.SERVICE_META_PREFIX,
comment|// note that route defined properties may override DiscoverableService
comment|// provided ones
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|route
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|ServiceDefinition
operator|.
name|SERVICE_META_PREFIX
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|String
name|val
init|=
name|camelContext
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|// try to get the service name from route properties
name|String
name|serviceName
init|=
name|properties
operator|.
name|get
argument_list|(
name|ServiceDefinition
operator|.
name|SERVICE_META_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceName
operator|==
literal|null
condition|)
block|{
comment|// if not check if the route group is defined use the route group
name|serviceName
operator|=
name|route
operator|.
name|getGroup
argument_list|()
expr_stmt|;
if|if
condition|(
name|serviceName
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|ServiceDefinition
operator|.
name|SERVICE_META_NAME
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|serviceName
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Route {} has not enough information for service registration"
argument_list|,
name|route
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
comment|// try to get the service id from route properties
name|String
name|serviceId
init|=
name|properties
operator|.
name|get
argument_list|(
name|ServiceDefinition
operator|.
name|SERVICE_META_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceId
operator|==
literal|null
condition|)
block|{
comment|// if not check if the route id is custom and use it
name|RouteDefinition
name|definition
init|=
operator|(
name|RouteDefinition
operator|)
name|route
operator|.
name|getRouteContext
argument_list|()
operator|.
name|getRoute
argument_list|()
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|hasCustomIdAssigned
argument_list|()
condition|)
block|{
name|serviceId
operator|=
name|route
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|serviceId
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|ServiceDefinition
operator|.
name|SERVICE_META_ID
argument_list|,
name|serviceId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|serviceId
operator|==
literal|null
condition|)
block|{
comment|// finally auto generate the service id
name|serviceId
operator|=
name|getCamelContext
argument_list|()
operator|.
name|getUuidGenerator
argument_list|()
operator|.
name|generateUuid
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|serviceHost
init|=
name|properties
operator|.
name|get
argument_list|(
name|ServiceDefinition
operator|.
name|SERVICE_META_HOST
argument_list|)
decl_stmt|;
specifier|final
name|String
name|servicePort
init|=
name|properties
operator|.
name|getOrDefault
argument_list|(
name|ServiceDefinition
operator|.
name|SERVICE_META_PORT
argument_list|,
literal|"-1"
argument_list|)
decl_stmt|;
comment|// Build the final resource definition from bits collected from the
comment|// endpoint and the route.
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|DefaultServiceDefinition
argument_list|(
name|serviceId
argument_list|,
name|serviceName
argument_list|,
name|serviceHost
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|servicePort
argument_list|)
argument_list|,
name|properties
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

