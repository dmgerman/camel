begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExpressionAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|builder
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_comment
comment|/**  * A helper class for working with<a href="http://camel.apache.org/expression.html">expressions</a>.  */
end_comment

begin_class
DECL|class|ExpressionBuilder
specifier|public
specifier|final
class|class
name|ExpressionBuilder
extends|extends
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|builder
operator|.
name|ExpressionBuilder
block|{
comment|// this class is included in camel-core to be backwards compatible by extending from camel-support
comment|/**      * Utility classes should not have a public constructor.      */
DECL|method|ExpressionBuilder ()
specifier|private
name|ExpressionBuilder
parameter_list|()
block|{     }
comment|/**      * Returns an {@link TokenPairExpressionIterator} expression      */
DECL|method|tokenizePairExpression (String startToken, String endToken, boolean includeTokens)
specifier|public
specifier|static
name|Expression
name|tokenizePairExpression
parameter_list|(
name|String
name|startToken
parameter_list|,
name|String
name|endToken
parameter_list|,
name|boolean
name|includeTokens
parameter_list|)
block|{
return|return
operator|new
name|TokenPairExpressionIterator
argument_list|(
name|startToken
argument_list|,
name|endToken
argument_list|,
name|includeTokens
argument_list|)
return|;
block|}
comment|/**      * Returns an {@link TokenXMLExpressionIterator} expression      */
DECL|method|tokenizeXMLExpression (String tagName, String inheritNamespaceTagName)
specifier|public
specifier|static
name|Expression
name|tokenizeXMLExpression
parameter_list|(
name|String
name|tagName
parameter_list|,
name|String
name|inheritNamespaceTagName
parameter_list|)
block|{
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|tagName
argument_list|,
literal|"tagName"
argument_list|)
expr_stmt|;
return|return
operator|new
name|TokenXMLExpressionIterator
argument_list|(
name|tagName
argument_list|,
name|inheritNamespaceTagName
argument_list|)
return|;
block|}
DECL|method|tokenizeXMLAwareExpression (String path, char mode)
specifier|public
specifier|static
name|Expression
name|tokenizeXMLAwareExpression
parameter_list|(
name|String
name|path
parameter_list|,
name|char
name|mode
parameter_list|)
block|{
return|return
name|tokenizeXMLAwareExpression
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
name|mode
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|tokenizeXMLAwareExpression (String path, char mode, int group)
specifier|public
specifier|static
name|Expression
name|tokenizeXMLAwareExpression
parameter_list|(
name|String
name|path
parameter_list|,
name|char
name|mode
parameter_list|,
name|int
name|group
parameter_list|)
block|{
return|return
name|tokenizeXMLAwareExpression
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
name|mode
argument_list|,
name|group
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|tokenizeXMLAwareExpression (String path, char mode, int group, Namespaces namespaces)
specifier|public
specifier|static
name|Expression
name|tokenizeXMLAwareExpression
parameter_list|(
name|String
name|path
parameter_list|,
name|char
name|mode
parameter_list|,
name|int
name|group
parameter_list|,
name|Namespaces
name|namespaces
parameter_list|)
block|{
return|return
name|tokenizeXMLAwareExpression
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
name|mode
argument_list|,
name|group
argument_list|,
name|namespaces
argument_list|)
return|;
block|}
DECL|method|tokenizeXMLAwareExpression (String headerName, String path, char mode, int group, Namespaces namespaces)
specifier|public
specifier|static
name|Expression
name|tokenizeXMLAwareExpression
parameter_list|(
name|String
name|headerName
parameter_list|,
name|String
name|path
parameter_list|,
name|char
name|mode
parameter_list|,
name|int
name|group
parameter_list|,
name|Namespaces
name|namespaces
parameter_list|)
block|{
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|path
argument_list|,
literal|"path"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Language
name|language
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolveLanguage
argument_list|(
literal|"xtokenize"
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerName
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|language
argument_list|,
literal|"headerName"
argument_list|,
name|headerName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mode
operator|!=
literal|'i'
condition|)
block|{
name|setProperty
argument_list|(
name|language
argument_list|,
literal|"mode"
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|>
literal|1
condition|)
block|{
name|setProperty
argument_list|(
name|language
argument_list|,
literal|"group"
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|namespaces
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|language
argument_list|,
literal|"namespaces"
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
block|}
name|setProperty
argument_list|(
name|language
argument_list|,
literal|"path"
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|language
operator|.
name|createExpression
argument_list|(
literal|null
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"xtokenize("
operator|+
name|path
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

