begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElementRef
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|AggregationStrategyClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|PredicateClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ExpressionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|AggregateController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|OptimisticLockRetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|AggregationRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|AsPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * Aggregates many messages into a single message  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"eip,routing"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"aggregate"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|AggregateDefinition
specifier|public
class|class
name|AggregateDefinition
extends|extends
name|ProcessorDefinition
argument_list|<
name|AggregateDefinition
argument_list|>
implements|implements
name|ExecutorServiceAwareDefinition
argument_list|<
name|AggregateDefinition
argument_list|>
block|{
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"correlationExpression"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|correlationExpression
specifier|private
name|ExpressionSubElementDefinition
name|correlationExpression
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"completionPredicate"
argument_list|)
annotation|@
name|AsPredicate
DECL|field|completionPredicate
specifier|private
name|ExpressionSubElementDefinition
name|completionPredicate
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"completionTimeout"
argument_list|)
DECL|field|completionTimeoutExpression
specifier|private
name|ExpressionSubElementDefinition
name|completionTimeoutExpression
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"completionSize"
argument_list|)
DECL|field|completionSizeExpression
specifier|private
name|ExpressionSubElementDefinition
name|completionSizeExpression
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"optimisticLockRetryPolicy"
argument_list|)
DECL|field|optimisticLockRetryPolicyDefinition
specifier|private
name|OptimisticLockRetryPolicyDefinition
name|optimisticLockRetryPolicyDefinition
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|expression
specifier|private
name|ExpressionDefinition
name|expression
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|aggregationStrategy
specifier|private
name|AggregationStrategy
name|aggregationStrategy
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|executorService
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|timeoutCheckerExecutorService
specifier|private
name|ScheduledExecutorService
name|timeoutCheckerExecutorService
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|aggregationRepository
specifier|private
name|AggregationRepository
name|aggregationRepository
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|optimisticLockRetryPolicy
specifier|private
name|OptimisticLockRetryPolicy
name|optimisticLockRetryPolicy
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|parallelProcessing
specifier|private
name|Boolean
name|parallelProcessing
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|optimisticLocking
specifier|private
name|Boolean
name|optimisticLocking
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|executorServiceRef
specifier|private
name|String
name|executorServiceRef
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|timeoutCheckerExecutorServiceRef
specifier|private
name|String
name|timeoutCheckerExecutorServiceRef
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|aggregationRepositoryRef
specifier|private
name|String
name|aggregationRepositoryRef
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|strategyRef
specifier|private
name|String
name|strategyRef
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|strategyMethodName
specifier|private
name|String
name|strategyMethodName
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|strategyMethodAllowNull
specifier|private
name|Boolean
name|strategyMethodAllowNull
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|completionSize
specifier|private
name|Integer
name|completionSize
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|completionInterval
specifier|private
name|Long
name|completionInterval
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|completionTimeout
specifier|private
name|Long
name|completionTimeout
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"1000"
argument_list|)
DECL|field|completionTimeoutCheckerInterval
specifier|private
name|Long
name|completionTimeoutCheckerInterval
init|=
literal|1000L
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|completionFromBatchConsumer
specifier|private
name|Boolean
name|completionFromBatchConsumer
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|completionOnNewCorrelationGroup
specifier|private
name|Boolean
name|completionOnNewCorrelationGroup
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|eagerCheckCompletion
specifier|private
name|Boolean
name|eagerCheckCompletion
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|ignoreInvalidCorrelationKeys
specifier|private
name|Boolean
name|ignoreInvalidCorrelationKeys
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|closeCorrelationKeyOnCompletion
specifier|private
name|Integer
name|closeCorrelationKeyOnCompletion
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|discardOnCompletionTimeout
specifier|private
name|Boolean
name|discardOnCompletionTimeout
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|forceCompletionOnStop
specifier|private
name|Boolean
name|forceCompletionOnStop
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|completeAllOnStop
specifier|private
name|Boolean
name|completeAllOnStop
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|aggregateController
specifier|private
name|AggregateController
name|aggregateController
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|aggregateControllerRef
specifier|private
name|String
name|aggregateControllerRef
decl_stmt|;
annotation|@
name|XmlElementRef
DECL|field|outputs
specifier|private
name|List
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|outputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|AggregateDefinition ()
specifier|public
name|AggregateDefinition
parameter_list|()
block|{     }
DECL|method|AggregateDefinition (@sPredicate Predicate predicate)
specifier|public
name|AggregateDefinition
parameter_list|(
annotation|@
name|AsPredicate
name|Predicate
name|predicate
parameter_list|)
block|{
name|this
argument_list|(
name|ExpressionNodeHelper
operator|.
name|toExpressionDefinition
argument_list|(
name|predicate
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|AggregateDefinition (Expression expression)
specifier|public
name|AggregateDefinition
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|this
argument_list|(
name|ExpressionNodeHelper
operator|.
name|toExpressionDefinition
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|AggregateDefinition (ExpressionDefinition correlationExpression)
specifier|public
name|AggregateDefinition
parameter_list|(
name|ExpressionDefinition
name|correlationExpression
parameter_list|)
block|{
name|setExpression
argument_list|(
name|correlationExpression
argument_list|)
expr_stmt|;
name|ExpressionSubElementDefinition
name|cor
init|=
operator|new
name|ExpressionSubElementDefinition
argument_list|()
decl_stmt|;
name|cor
operator|.
name|setExpressionType
argument_list|(
name|correlationExpression
argument_list|)
expr_stmt|;
name|setCorrelationExpression
argument_list|(
name|cor
argument_list|)
expr_stmt|;
block|}
DECL|method|AggregateDefinition (Expression correlationExpression, AggregationStrategy aggregationStrategy)
specifier|public
name|AggregateDefinition
parameter_list|(
name|Expression
name|correlationExpression
parameter_list|,
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|this
argument_list|(
name|correlationExpression
argument_list|)
expr_stmt|;
name|this
operator|.
name|aggregationStrategy
operator|=
name|aggregationStrategy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Aggregate["
operator|+
name|description
argument_list|()
operator|+
literal|" -> "
operator|+
name|getOutputs
argument_list|()
operator|+
literal|"]"
return|;
block|}
DECL|method|description ()
specifier|protected
name|String
name|description
parameter_list|()
block|{
return|return
name|getExpression
argument_list|()
operator|!=
literal|null
condition|?
name|getExpression
argument_list|()
operator|.
name|getLabel
argument_list|()
else|:
literal|""
return|;
block|}
annotation|@
name|Override
DECL|method|getShortName ()
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
return|return
literal|"aggregate"
return|;
block|}
annotation|@
name|Override
DECL|method|getLabel ()
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
literal|"aggregate["
operator|+
name|description
argument_list|()
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|configureChild (ProcessorDefinition<?> output)
specifier|public
name|void
name|configureChild
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|output
parameter_list|)
block|{
name|Expression
name|exp
init|=
name|getExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|getExpression
argument_list|()
operator|!=
literal|null
operator|&&
name|getExpression
argument_list|()
operator|.
name|getExpressionValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exp
operator|=
name|getExpression
argument_list|()
operator|.
name|getExpressionValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|exp
operator|instanceof
name|ExpressionClause
condition|)
block|{
name|ExpressionClause
argument_list|<
name|?
argument_list|>
name|clause
init|=
operator|(
name|ExpressionClause
argument_list|<
name|?
argument_list|>
operator|)
name|exp
decl_stmt|;
if|if
condition|(
name|clause
operator|.
name|getExpressionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// if using the Java DSL then the expression may have been set using the
comment|// ExpressionClause which is a fancy builder to define expressions and predicates
comment|// using fluent builders in the DSL. However we need afterwards a callback to
comment|// reset the expression to the expression type the ExpressionClause did build for us
name|ExpressionFactory
name|model
init|=
name|clause
operator|.
name|getExpressionType
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|instanceof
name|ExpressionDefinition
condition|)
block|{
name|correlationExpression
operator|=
operator|new
name|ExpressionSubElementDefinition
argument_list|()
expr_stmt|;
name|correlationExpression
operator|.
name|setExpressionType
argument_list|(
operator|(
name|ExpressionDefinition
operator|)
name|model
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getAggregationStrategy ()
specifier|public
name|AggregationStrategy
name|getAggregationStrategy
parameter_list|()
block|{
return|return
name|aggregationStrategy
return|;
block|}
comment|/**      * The AggregationStrategy to use.      *<p/>      * Configuring an AggregationStrategy is required, and is used to merge the incoming Exchange with the existing already merged exchanges.      * At first call the oldExchange parameter is null.      * On subsequent invocations the oldExchange contains the merged exchanges and newExchange is of course the new incoming Exchange.      */
DECL|method|setAggregationStrategy (AggregationStrategy aggregationStrategy)
specifier|public
name|void
name|setAggregationStrategy
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|this
operator|.
name|aggregationStrategy
operator|=
name|aggregationStrategy
expr_stmt|;
block|}
DECL|method|getAggregationStrategyRef ()
specifier|public
name|String
name|getAggregationStrategyRef
parameter_list|()
block|{
return|return
name|strategyRef
return|;
block|}
comment|/**      * A reference to lookup the AggregationStrategy in the Registry.      *<p/>      * Configuring an AggregationStrategy is required, and is used to merge the incoming Exchange with the existing already merged exchanges.      * At first call the oldExchange parameter is null.      * On subsequent invocations the oldExchange contains the merged exchanges and newExchange is of course the new incoming Exchange.      */
DECL|method|setAggregationStrategyRef (String aggregationStrategyRef)
specifier|public
name|void
name|setAggregationStrategyRef
parameter_list|(
name|String
name|aggregationStrategyRef
parameter_list|)
block|{
name|this
operator|.
name|strategyRef
operator|=
name|aggregationStrategyRef
expr_stmt|;
block|}
DECL|method|getStrategyRef ()
specifier|public
name|String
name|getStrategyRef
parameter_list|()
block|{
return|return
name|strategyRef
return|;
block|}
comment|/**      * A reference to lookup the AggregationStrategy in the Registry.      *<p/>      * Configuring an AggregationStrategy is required, and is used to merge the incoming Exchange with the existing already merged exchanges.      * At first call the oldExchange parameter is null.      * On subsequent invocations the oldExchange contains the merged exchanges and newExchange is of course the new incoming Exchange.      */
DECL|method|setStrategyRef (String strategyRef)
specifier|public
name|void
name|setStrategyRef
parameter_list|(
name|String
name|strategyRef
parameter_list|)
block|{
name|this
operator|.
name|strategyRef
operator|=
name|strategyRef
expr_stmt|;
block|}
DECL|method|getAggregationStrategyMethodName ()
specifier|public
name|String
name|getAggregationStrategyMethodName
parameter_list|()
block|{
return|return
name|strategyMethodName
return|;
block|}
comment|/**      * This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.      */
DECL|method|setAggregationStrategyMethodName (String strategyMethodName)
specifier|public
name|void
name|setAggregationStrategyMethodName
parameter_list|(
name|String
name|strategyMethodName
parameter_list|)
block|{
name|this
operator|.
name|strategyMethodName
operator|=
name|strategyMethodName
expr_stmt|;
block|}
DECL|method|getStrategyMethodAllowNull ()
specifier|public
name|Boolean
name|getStrategyMethodAllowNull
parameter_list|()
block|{
return|return
name|strategyMethodAllowNull
return|;
block|}
DECL|method|getStrategyMethodName ()
specifier|public
name|String
name|getStrategyMethodName
parameter_list|()
block|{
return|return
name|strategyMethodName
return|;
block|}
comment|/**      * This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.      */
DECL|method|setStrategyMethodName (String strategyMethodName)
specifier|public
name|void
name|setStrategyMethodName
parameter_list|(
name|String
name|strategyMethodName
parameter_list|)
block|{
name|this
operator|.
name|strategyMethodName
operator|=
name|strategyMethodName
expr_stmt|;
block|}
comment|/**      * If this option is false then the aggregate method is not used for the very first aggregation.      * If this option is true then null values is used as the oldExchange (at the very first aggregation),      * when using POJOs as the AggregationStrategy.      */
DECL|method|setStrategyMethodAllowNull (Boolean strategyMethodAllowNull)
specifier|public
name|void
name|setStrategyMethodAllowNull
parameter_list|(
name|Boolean
name|strategyMethodAllowNull
parameter_list|)
block|{
name|this
operator|.
name|strategyMethodAllowNull
operator|=
name|strategyMethodAllowNull
expr_stmt|;
block|}
comment|/**      * The expression used to calculate the correlation key to use for aggregation.      * The Exchange which has the same correlation key is aggregated together.      * If the correlation key could not be evaluated an Exception is thrown.      * You can disable this by using the ignoreBadCorrelationKeys option.      */
DECL|method|setCorrelationExpression (ExpressionSubElementDefinition correlationExpression)
specifier|public
name|void
name|setCorrelationExpression
parameter_list|(
name|ExpressionSubElementDefinition
name|correlationExpression
parameter_list|)
block|{
name|this
operator|.
name|correlationExpression
operator|=
name|correlationExpression
expr_stmt|;
block|}
DECL|method|getCorrelationExpression ()
specifier|public
name|ExpressionSubElementDefinition
name|getCorrelationExpression
parameter_list|()
block|{
return|return
name|correlationExpression
return|;
block|}
DECL|method|getCompletionSize ()
specifier|public
name|Integer
name|getCompletionSize
parameter_list|()
block|{
return|return
name|completionSize
return|;
block|}
DECL|method|setCompletionSize (Integer completionSize)
specifier|public
name|void
name|setCompletionSize
parameter_list|(
name|Integer
name|completionSize
parameter_list|)
block|{
name|this
operator|.
name|completionSize
operator|=
name|completionSize
expr_stmt|;
block|}
DECL|method|getOptimisticLockRetryPolicyDefinition ()
specifier|public
name|OptimisticLockRetryPolicyDefinition
name|getOptimisticLockRetryPolicyDefinition
parameter_list|()
block|{
return|return
name|optimisticLockRetryPolicyDefinition
return|;
block|}
DECL|method|setOptimisticLockRetryPolicyDefinition (OptimisticLockRetryPolicyDefinition optimisticLockRetryPolicyDefinition)
specifier|public
name|void
name|setOptimisticLockRetryPolicyDefinition
parameter_list|(
name|OptimisticLockRetryPolicyDefinition
name|optimisticLockRetryPolicyDefinition
parameter_list|)
block|{
name|this
operator|.
name|optimisticLockRetryPolicyDefinition
operator|=
name|optimisticLockRetryPolicyDefinition
expr_stmt|;
block|}
DECL|method|getOptimisticLockRetryPolicy ()
specifier|public
name|OptimisticLockRetryPolicy
name|getOptimisticLockRetryPolicy
parameter_list|()
block|{
return|return
name|optimisticLockRetryPolicy
return|;
block|}
DECL|method|setOptimisticLockRetryPolicy (OptimisticLockRetryPolicy optimisticLockRetryPolicy)
specifier|public
name|void
name|setOptimisticLockRetryPolicy
parameter_list|(
name|OptimisticLockRetryPolicy
name|optimisticLockRetryPolicy
parameter_list|)
block|{
name|this
operator|.
name|optimisticLockRetryPolicy
operator|=
name|optimisticLockRetryPolicy
expr_stmt|;
block|}
DECL|method|getCompletionInterval ()
specifier|public
name|Long
name|getCompletionInterval
parameter_list|()
block|{
return|return
name|completionInterval
return|;
block|}
DECL|method|setCompletionInterval (Long completionInterval)
specifier|public
name|void
name|setCompletionInterval
parameter_list|(
name|Long
name|completionInterval
parameter_list|)
block|{
name|this
operator|.
name|completionInterval
operator|=
name|completionInterval
expr_stmt|;
block|}
DECL|method|getCompletionTimeout ()
specifier|public
name|Long
name|getCompletionTimeout
parameter_list|()
block|{
return|return
name|completionTimeout
return|;
block|}
DECL|method|setCompletionTimeout (Long completionTimeout)
specifier|public
name|void
name|setCompletionTimeout
parameter_list|(
name|Long
name|completionTimeout
parameter_list|)
block|{
name|this
operator|.
name|completionTimeout
operator|=
name|completionTimeout
expr_stmt|;
block|}
DECL|method|getCompletionTimeoutCheckerInterval ()
specifier|public
name|Long
name|getCompletionTimeoutCheckerInterval
parameter_list|()
block|{
return|return
name|completionTimeoutCheckerInterval
return|;
block|}
DECL|method|setCompletionTimeoutCheckerInterval (Long completionTimeoutCheckerInterval)
specifier|public
name|void
name|setCompletionTimeoutCheckerInterval
parameter_list|(
name|Long
name|completionTimeoutCheckerInterval
parameter_list|)
block|{
name|this
operator|.
name|completionTimeoutCheckerInterval
operator|=
name|completionTimeoutCheckerInterval
expr_stmt|;
block|}
DECL|method|getCompletionPredicate ()
specifier|public
name|ExpressionSubElementDefinition
name|getCompletionPredicate
parameter_list|()
block|{
return|return
name|completionPredicate
return|;
block|}
DECL|method|setCompletionPredicate (ExpressionSubElementDefinition completionPredicate)
specifier|public
name|void
name|setCompletionPredicate
parameter_list|(
name|ExpressionSubElementDefinition
name|completionPredicate
parameter_list|)
block|{
name|this
operator|.
name|completionPredicate
operator|=
name|completionPredicate
expr_stmt|;
block|}
DECL|method|getCompletionTimeoutExpression ()
specifier|public
name|ExpressionSubElementDefinition
name|getCompletionTimeoutExpression
parameter_list|()
block|{
return|return
name|completionTimeoutExpression
return|;
block|}
DECL|method|setCompletionTimeoutExpression (ExpressionSubElementDefinition completionTimeoutExpression)
specifier|public
name|void
name|setCompletionTimeoutExpression
parameter_list|(
name|ExpressionSubElementDefinition
name|completionTimeoutExpression
parameter_list|)
block|{
name|this
operator|.
name|completionTimeoutExpression
operator|=
name|completionTimeoutExpression
expr_stmt|;
block|}
DECL|method|getCompletionSizeExpression ()
specifier|public
name|ExpressionSubElementDefinition
name|getCompletionSizeExpression
parameter_list|()
block|{
return|return
name|completionSizeExpression
return|;
block|}
DECL|method|setCompletionSizeExpression (ExpressionSubElementDefinition completionSizeExpression)
specifier|public
name|void
name|setCompletionSizeExpression
parameter_list|(
name|ExpressionSubElementDefinition
name|completionSizeExpression
parameter_list|)
block|{
name|this
operator|.
name|completionSizeExpression
operator|=
name|completionSizeExpression
expr_stmt|;
block|}
DECL|method|getCompletionFromBatchConsumer ()
specifier|public
name|Boolean
name|getCompletionFromBatchConsumer
parameter_list|()
block|{
return|return
name|completionFromBatchConsumer
return|;
block|}
DECL|method|setCompletionFromBatchConsumer (Boolean completionFromBatchConsumer)
specifier|public
name|void
name|setCompletionFromBatchConsumer
parameter_list|(
name|Boolean
name|completionFromBatchConsumer
parameter_list|)
block|{
name|this
operator|.
name|completionFromBatchConsumer
operator|=
name|completionFromBatchConsumer
expr_stmt|;
block|}
DECL|method|getCompletionOnNewCorrelationGroup ()
specifier|public
name|Boolean
name|getCompletionOnNewCorrelationGroup
parameter_list|()
block|{
return|return
name|completionOnNewCorrelationGroup
return|;
block|}
DECL|method|setCompletionOnNewCorrelationGroup (Boolean completionOnNewCorrelationGroup)
specifier|public
name|void
name|setCompletionOnNewCorrelationGroup
parameter_list|(
name|Boolean
name|completionOnNewCorrelationGroup
parameter_list|)
block|{
name|this
operator|.
name|completionOnNewCorrelationGroup
operator|=
name|completionOnNewCorrelationGroup
expr_stmt|;
block|}
DECL|method|getExecutorService ()
specifier|public
name|ExecutorService
name|getExecutorService
parameter_list|()
block|{
return|return
name|executorService
return|;
block|}
DECL|method|setExecutorService (ExecutorService executorService)
specifier|public
name|void
name|setExecutorService
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|this
operator|.
name|executorService
operator|=
name|executorService
expr_stmt|;
block|}
DECL|method|getOptimisticLocking ()
specifier|public
name|Boolean
name|getOptimisticLocking
parameter_list|()
block|{
return|return
name|optimisticLocking
return|;
block|}
DECL|method|setOptimisticLocking (boolean optimisticLocking)
specifier|public
name|void
name|setOptimisticLocking
parameter_list|(
name|boolean
name|optimisticLocking
parameter_list|)
block|{
name|this
operator|.
name|optimisticLocking
operator|=
name|optimisticLocking
expr_stmt|;
block|}
DECL|method|getParallelProcessing ()
specifier|public
name|Boolean
name|getParallelProcessing
parameter_list|()
block|{
return|return
name|parallelProcessing
return|;
block|}
DECL|method|setParallelProcessing (boolean parallelProcessing)
specifier|public
name|void
name|setParallelProcessing
parameter_list|(
name|boolean
name|parallelProcessing
parameter_list|)
block|{
name|this
operator|.
name|parallelProcessing
operator|=
name|parallelProcessing
expr_stmt|;
block|}
DECL|method|getExecutorServiceRef ()
specifier|public
name|String
name|getExecutorServiceRef
parameter_list|()
block|{
return|return
name|executorServiceRef
return|;
block|}
DECL|method|setExecutorServiceRef (String executorServiceRef)
specifier|public
name|void
name|setExecutorServiceRef
parameter_list|(
name|String
name|executorServiceRef
parameter_list|)
block|{
name|this
operator|.
name|executorServiceRef
operator|=
name|executorServiceRef
expr_stmt|;
block|}
DECL|method|getEagerCheckCompletion ()
specifier|public
name|Boolean
name|getEagerCheckCompletion
parameter_list|()
block|{
return|return
name|eagerCheckCompletion
return|;
block|}
DECL|method|setEagerCheckCompletion (Boolean eagerCheckCompletion)
specifier|public
name|void
name|setEagerCheckCompletion
parameter_list|(
name|Boolean
name|eagerCheckCompletion
parameter_list|)
block|{
name|this
operator|.
name|eagerCheckCompletion
operator|=
name|eagerCheckCompletion
expr_stmt|;
block|}
DECL|method|getIgnoreInvalidCorrelationKeys ()
specifier|public
name|Boolean
name|getIgnoreInvalidCorrelationKeys
parameter_list|()
block|{
return|return
name|ignoreInvalidCorrelationKeys
return|;
block|}
DECL|method|setIgnoreInvalidCorrelationKeys (Boolean ignoreInvalidCorrelationKeys)
specifier|public
name|void
name|setIgnoreInvalidCorrelationKeys
parameter_list|(
name|Boolean
name|ignoreInvalidCorrelationKeys
parameter_list|)
block|{
name|this
operator|.
name|ignoreInvalidCorrelationKeys
operator|=
name|ignoreInvalidCorrelationKeys
expr_stmt|;
block|}
DECL|method|getCloseCorrelationKeyOnCompletion ()
specifier|public
name|Integer
name|getCloseCorrelationKeyOnCompletion
parameter_list|()
block|{
return|return
name|closeCorrelationKeyOnCompletion
return|;
block|}
DECL|method|setCloseCorrelationKeyOnCompletion (Integer closeCorrelationKeyOnCompletion)
specifier|public
name|void
name|setCloseCorrelationKeyOnCompletion
parameter_list|(
name|Integer
name|closeCorrelationKeyOnCompletion
parameter_list|)
block|{
name|this
operator|.
name|closeCorrelationKeyOnCompletion
operator|=
name|closeCorrelationKeyOnCompletion
expr_stmt|;
block|}
DECL|method|getAggregationRepository ()
specifier|public
name|AggregationRepository
name|getAggregationRepository
parameter_list|()
block|{
return|return
name|aggregationRepository
return|;
block|}
DECL|method|setAggregationRepository (AggregationRepository aggregationRepository)
specifier|public
name|void
name|setAggregationRepository
parameter_list|(
name|AggregationRepository
name|aggregationRepository
parameter_list|)
block|{
name|this
operator|.
name|aggregationRepository
operator|=
name|aggregationRepository
expr_stmt|;
block|}
DECL|method|getAggregationRepositoryRef ()
specifier|public
name|String
name|getAggregationRepositoryRef
parameter_list|()
block|{
return|return
name|aggregationRepositoryRef
return|;
block|}
DECL|method|setAggregationRepositoryRef (String aggregationRepositoryRef)
specifier|public
name|void
name|setAggregationRepositoryRef
parameter_list|(
name|String
name|aggregationRepositoryRef
parameter_list|)
block|{
name|this
operator|.
name|aggregationRepositoryRef
operator|=
name|aggregationRepositoryRef
expr_stmt|;
block|}
DECL|method|getDiscardOnCompletionTimeout ()
specifier|public
name|Boolean
name|getDiscardOnCompletionTimeout
parameter_list|()
block|{
return|return
name|discardOnCompletionTimeout
return|;
block|}
DECL|method|setDiscardOnCompletionTimeout (Boolean discardOnCompletionTimeout)
specifier|public
name|void
name|setDiscardOnCompletionTimeout
parameter_list|(
name|Boolean
name|discardOnCompletionTimeout
parameter_list|)
block|{
name|this
operator|.
name|discardOnCompletionTimeout
operator|=
name|discardOnCompletionTimeout
expr_stmt|;
block|}
DECL|method|setTimeoutCheckerExecutorService (ScheduledExecutorService timeoutCheckerExecutorService)
specifier|public
name|void
name|setTimeoutCheckerExecutorService
parameter_list|(
name|ScheduledExecutorService
name|timeoutCheckerExecutorService
parameter_list|)
block|{
name|this
operator|.
name|timeoutCheckerExecutorService
operator|=
name|timeoutCheckerExecutorService
expr_stmt|;
block|}
DECL|method|getTimeoutCheckerExecutorService ()
specifier|public
name|ScheduledExecutorService
name|getTimeoutCheckerExecutorService
parameter_list|()
block|{
return|return
name|timeoutCheckerExecutorService
return|;
block|}
DECL|method|setTimeoutCheckerExecutorServiceRef (String timeoutCheckerExecutorServiceRef)
specifier|public
name|void
name|setTimeoutCheckerExecutorServiceRef
parameter_list|(
name|String
name|timeoutCheckerExecutorServiceRef
parameter_list|)
block|{
name|this
operator|.
name|timeoutCheckerExecutorServiceRef
operator|=
name|timeoutCheckerExecutorServiceRef
expr_stmt|;
block|}
DECL|method|getTimeoutCheckerExecutorServiceRef ()
specifier|public
name|String
name|getTimeoutCheckerExecutorServiceRef
parameter_list|()
block|{
return|return
name|timeoutCheckerExecutorServiceRef
return|;
block|}
DECL|method|getForceCompletionOnStop ()
specifier|public
name|Boolean
name|getForceCompletionOnStop
parameter_list|()
block|{
return|return
name|forceCompletionOnStop
return|;
block|}
DECL|method|setForceCompletionOnStop (Boolean forceCompletionOnStop)
specifier|public
name|void
name|setForceCompletionOnStop
parameter_list|(
name|Boolean
name|forceCompletionOnStop
parameter_list|)
block|{
name|this
operator|.
name|forceCompletionOnStop
operator|=
name|forceCompletionOnStop
expr_stmt|;
block|}
DECL|method|getCompleteAllOnStop ()
specifier|public
name|Boolean
name|getCompleteAllOnStop
parameter_list|()
block|{
return|return
name|completeAllOnStop
return|;
block|}
DECL|method|setCompleteAllOnStop (Boolean completeAllOnStop)
specifier|public
name|void
name|setCompleteAllOnStop
parameter_list|(
name|Boolean
name|completeAllOnStop
parameter_list|)
block|{
name|this
operator|.
name|completeAllOnStop
operator|=
name|completeAllOnStop
expr_stmt|;
block|}
DECL|method|getAggregateController ()
specifier|public
name|AggregateController
name|getAggregateController
parameter_list|()
block|{
return|return
name|aggregateController
return|;
block|}
DECL|method|setAggregateController (AggregateController aggregateController)
specifier|public
name|void
name|setAggregateController
parameter_list|(
name|AggregateController
name|aggregateController
parameter_list|)
block|{
name|this
operator|.
name|aggregateController
operator|=
name|aggregateController
expr_stmt|;
block|}
DECL|method|getAggregateControllerRef ()
specifier|public
name|String
name|getAggregateControllerRef
parameter_list|()
block|{
return|return
name|aggregateControllerRef
return|;
block|}
comment|/**      * To use a {@link org.apache.camel.processor.aggregate.AggregateController} to allow external sources to control      * this aggregator.      */
DECL|method|setAggregateControllerRef (String aggregateControllerRef)
specifier|public
name|void
name|setAggregateControllerRef
parameter_list|(
name|String
name|aggregateControllerRef
parameter_list|)
block|{
name|this
operator|.
name|aggregateControllerRef
operator|=
name|aggregateControllerRef
expr_stmt|;
block|}
comment|// Fluent API
comment|//-------------------------------------------------------------------------
comment|/**      * Use eager completion checking which means that the completionPredicate will use the incoming Exchange.      * As opposed to without eager completion checking the completionPredicate will use the aggregated Exchange.      *      * @return builder      */
DECL|method|eagerCheckCompletion ()
specifier|public
name|AggregateDefinition
name|eagerCheckCompletion
parameter_list|()
block|{
name|setEagerCheckCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * If a correlation key cannot be successfully evaluated it will be ignored by logging a DEBUG and then just      * ignore the incoming Exchange.      *      * @return builder      */
DECL|method|ignoreInvalidCorrelationKeys ()
specifier|public
name|AggregateDefinition
name|ignoreInvalidCorrelationKeys
parameter_list|()
block|{
name|setIgnoreInvalidCorrelationKeys
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Closes a correlation key when its complete. Any<i>late</i> received exchanges which has a correlation key      * that has been closed, it will be defined and a ClosedCorrelationKeyException      * is thrown.      *      * @param capacity the maximum capacity of the closed correlation key cache.      *                 Use<tt>0</tt> or negative value for unbounded capacity.      * @return builder      */
DECL|method|closeCorrelationKeyOnCompletion (int capacity)
specifier|public
name|AggregateDefinition
name|closeCorrelationKeyOnCompletion
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|setCloseCorrelationKeyOnCompletion
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Discards the aggregated message on completion timeout.      *<p/>      * This means on timeout the aggregated message is dropped and not sent out of the aggregator.      *      * @return builder      */
DECL|method|discardOnCompletionTimeout ()
specifier|public
name|AggregateDefinition
name|discardOnCompletionTimeout
parameter_list|()
block|{
name|setDiscardOnCompletionTimeout
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enables the batch completion mode where we aggregate from a {@link org.apache.camel.BatchConsumer}      * and aggregate the total number of exchanges the {@link org.apache.camel.BatchConsumer} has reported      * as total by checking the exchange property {@link org.apache.camel.Exchange#BATCH_COMPLETE} when its complete.      *      * @return builder      */
DECL|method|completionFromBatchConsumer ()
specifier|public
name|AggregateDefinition
name|completionFromBatchConsumer
parameter_list|()
block|{
name|setCompletionFromBatchConsumer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enables completion on all previous groups when a new incoming correlation group. This can for example be used      * to complete groups with same correlation keys when they are in consecutive order.      * Notice when this is enabled then only 1 correlation group can be in progress as when a new correlation group      * starts, then the previous groups is forced completed.      *      * @return builder      */
DECL|method|completionOnNewCorrelationGroup ()
specifier|public
name|AggregateDefinition
name|completionOnNewCorrelationGroup
parameter_list|()
block|{
name|setCompletionOnNewCorrelationGroup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Number of messages aggregated before the aggregation is complete. This option can be set as either      * a fixed value or using an Expression which allows you to evaluate a size dynamically - will use Integer as result.      * If both are set Camel will fallback to use the fixed value if the Expression result was null or 0.      *      * @param completionSize  the completion size, must be a positive number      * @return builder      */
DECL|method|completionSize (int completionSize)
specifier|public
name|AggregateDefinition
name|completionSize
parameter_list|(
name|int
name|completionSize
parameter_list|)
block|{
name|setCompletionSize
argument_list|(
name|completionSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Number of messages aggregated before the aggregation is complete. This option can be set as either      * a fixed value or using an Expression which allows you to evaluate a size dynamically - will use Integer as result.      * If both are set Camel will fallback to use the fixed value if the Expression result was null or 0.      *      * @param completionSize  the completion size as an {@link org.apache.camel.Expression} which is evaluated as a {@link Integer} type      * @return builder      */
DECL|method|completionSize (Expression completionSize)
specifier|public
name|AggregateDefinition
name|completionSize
parameter_list|(
name|Expression
name|completionSize
parameter_list|)
block|{
name|setCompletionSizeExpression
argument_list|(
operator|new
name|ExpressionSubElementDefinition
argument_list|(
name|completionSize
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * A repeating period in millis by which the aggregator will complete all current aggregated exchanges.      * Camel has a background task which is triggered every period. You cannot use this option together      * with completionTimeout, only one of them can be used.      *      * @param completionInterval  the interval in millis, must be a positive value      * @return the builder      */
DECL|method|completionInterval (long completionInterval)
specifier|public
name|AggregateDefinition
name|completionInterval
parameter_list|(
name|long
name|completionInterval
parameter_list|)
block|{
name|setCompletionInterval
argument_list|(
name|completionInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Time in millis that an aggregated exchange should be inactive before its complete (timeout).      * This option can be set as either a fixed value or using an Expression which allows you to evaluate      * a timeout dynamically - will use Long as result.      * If both are set Camel will fallback to use the fixed value if the Expression result was null or 0.      * You cannot use this option together with completionInterval, only one of the two can be used.      *<p/>      * By default the timeout checker runs every second, you can use the completionTimeoutCheckerInterval option      * to configure how frequently to run the checker.      * The timeout is an approximation and there is no guarantee that the a timeout is triggered exactly after the timeout value.      * It is not recommended to use very low timeout values or checker intervals.      *      * @param completionTimeout  the timeout in millis, must be a positive value      * @return the builder      */
DECL|method|completionTimeout (long completionTimeout)
specifier|public
name|AggregateDefinition
name|completionTimeout
parameter_list|(
name|long
name|completionTimeout
parameter_list|)
block|{
name|setCompletionTimeout
argument_list|(
name|completionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Time in millis that an aggregated exchange should be inactive before its complete (timeout).      * This option can be set as either a fixed value or using an Expression which allows you to evaluate      * a timeout dynamically - will use Long as result.      * If both are set Camel will fallback to use the fixed value if the Expression result was null or 0.      * You cannot use this option together with completionInterval, only one of the two can be used.      *<p/>      * By default the timeout checker runs every second, you can use the completionTimeoutCheckerInterval option      * to configure how frequently to run the checker.      * The timeout is an approximation and there is no guarantee that the a timeout is triggered exactly after the timeout value.      * It is not recommended to use very low timeout values or checker intervals.      *      * @param completionTimeout  the timeout as an {@link Expression} which is evaluated as a {@link Long} type      * @return the builder      */
DECL|method|completionTimeout (Expression completionTimeout)
specifier|public
name|AggregateDefinition
name|completionTimeout
parameter_list|(
name|Expression
name|completionTimeout
parameter_list|)
block|{
name|setCompletionTimeoutExpression
argument_list|(
operator|new
name|ExpressionSubElementDefinition
argument_list|(
name|completionTimeout
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Interval in millis that is used by the background task that checks for timeouts ({@link org.apache.camel.TimeoutMap}).      *<p/>      * By default the timeout checker runs every second.      * The timeout is an approximation and there is no guarantee that the a timeout is triggered exactly after the timeout value.      * It is not recommended to use very low timeout values or checker intervals.      *      * @param completionTimeoutCheckerInterval  the interval in millis, must be a positive value      * @return the builder      */
DECL|method|completionTimeoutCheckerInterval (long completionTimeoutCheckerInterval)
specifier|public
name|AggregateDefinition
name|completionTimeoutCheckerInterval
parameter_list|(
name|long
name|completionTimeoutCheckerInterval
parameter_list|)
block|{
name|setCompletionTimeoutCheckerInterval
argument_list|(
name|completionTimeoutCheckerInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the AggregationStrategy to use with a fluent builder.      */
DECL|method|aggregationStrategy ()
specifier|public
name|AggregationStrategyClause
argument_list|<
name|AggregateDefinition
argument_list|>
name|aggregationStrategy
parameter_list|()
block|{
name|AggregationStrategyClause
argument_list|<
name|AggregateDefinition
argument_list|>
name|clause
init|=
operator|new
name|AggregationStrategyClause
argument_list|<>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|setAggregationStrategy
argument_list|(
name|clause
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Sets the AggregationStrategy to use with a fluent builder.      */
DECL|method|strategy ()
specifier|public
name|AggregationStrategyClause
argument_list|<
name|AggregateDefinition
argument_list|>
name|strategy
parameter_list|()
block|{
return|return
name|aggregationStrategy
argument_list|()
return|;
block|}
comment|/**      * Sets the aggregate strategy to use      *      * @param aggregationStrategy  the aggregate strategy to use      * @return the builder      */
DECL|method|strategy (AggregationStrategy aggregationStrategy)
specifier|public
name|AggregateDefinition
name|strategy
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
return|return
name|aggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
return|;
block|}
comment|/**      * Sets the aggregate strategy to use      *      * @param aggregationStrategy  the aggregate strategy to use      * @return the builder      */
DECL|method|aggregationStrategy (AggregationStrategy aggregationStrategy)
specifier|public
name|AggregateDefinition
name|aggregationStrategy
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the aggregate strategy to use      *      * @param aggregationStrategyRef  reference to the strategy to lookup in the registry      * @return the builder      */
DECL|method|aggregationStrategyRef (String aggregationStrategyRef)
specifier|public
name|AggregateDefinition
name|aggregationStrategyRef
parameter_list|(
name|String
name|aggregationStrategyRef
parameter_list|)
block|{
name|setAggregationStrategyRef
argument_list|(
name|aggregationStrategyRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the method name to use when using a POJO as {@link AggregationStrategy}.      *      * @param  methodName the method name to call      * @return the builder      */
DECL|method|aggregationStrategyMethodName (String methodName)
specifier|public
name|AggregateDefinition
name|aggregationStrategyMethodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|setAggregationStrategyMethodName
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets allowing null when using a POJO as {@link AggregationStrategy}.      *      * @return the builder      */
DECL|method|aggregationStrategyMethodAllowNull ()
specifier|public
name|AggregateDefinition
name|aggregationStrategyMethodAllowNull
parameter_list|()
block|{
name|setStrategyMethodAllowNull
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the custom aggregate repository to use.      *<p/>      * Will by default use {@link org.apache.camel.processor.aggregate.MemoryAggregationRepository}      *      * @param aggregationRepository  the aggregate repository to use      * @return the builder      */
DECL|method|aggregationRepository (AggregationRepository aggregationRepository)
specifier|public
name|AggregateDefinition
name|aggregationRepository
parameter_list|(
name|AggregationRepository
name|aggregationRepository
parameter_list|)
block|{
name|setAggregationRepository
argument_list|(
name|aggregationRepository
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the custom aggregate repository to use      *<p/>      * Will by default use {@link org.apache.camel.processor.aggregate.MemoryAggregationRepository}      *      * @param aggregationRepositoryRef  reference to the repository to lookup in the registry      * @return the builder      */
DECL|method|aggregationRepositoryRef (String aggregationRepositoryRef)
specifier|public
name|AggregateDefinition
name|aggregationRepositoryRef
parameter_list|(
name|String
name|aggregationRepositoryRef
parameter_list|)
block|{
name|setAggregationRepositoryRef
argument_list|(
name|aggregationRepositoryRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * A Predicate to indicate when an aggregated exchange is complete.      * If this is not specified and the AggregationStrategy object implements Predicate,      * the aggregationStrategy object will be used as the completionPredicate.      */
DECL|method|completionPredicate (@sPredicate Predicate predicate)
specifier|public
name|AggregateDefinition
name|completionPredicate
parameter_list|(
annotation|@
name|AsPredicate
name|Predicate
name|predicate
parameter_list|)
block|{
name|checkNoCompletedPredicate
argument_list|()
expr_stmt|;
name|setCompletionPredicate
argument_list|(
operator|new
name|ExpressionSubElementDefinition
argument_list|(
name|predicate
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * A Predicate to indicate when an aggregated exchange is complete.      * If this is not specified and the AggregationStrategy object implements Predicate,      * the aggregationStrategy object will be used as the completionPredicate.      */
annotation|@
name|AsPredicate
DECL|method|completionPredicate ()
specifier|public
name|PredicateClause
argument_list|<
name|AggregateDefinition
argument_list|>
name|completionPredicate
parameter_list|()
block|{
name|PredicateClause
argument_list|<
name|AggregateDefinition
argument_list|>
name|clause
init|=
operator|new
name|PredicateClause
argument_list|<>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|completionPredicate
argument_list|(
name|clause
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * A Predicate to indicate when an aggregated exchange is complete.      * If this is not specified and the AggregationStrategy object implements Predicate,      * the aggregationStrategy object will be used as the completionPredicate.      */
annotation|@
name|AsPredicate
DECL|method|completion ()
specifier|public
name|PredicateClause
argument_list|<
name|AggregateDefinition
argument_list|>
name|completion
parameter_list|()
block|{
return|return
name|completionPredicate
argument_list|()
return|;
block|}
comment|/**      * A Predicate to indicate when an aggregated exchange is complete.      * If this is not specified and the AggregationStrategy object implements Predicate,      * the aggregationStrategy object will be used as the completionPredicate.      */
DECL|method|completion (@sPredicate Predicate predicate)
specifier|public
name|AggregateDefinition
name|completion
parameter_list|(
annotation|@
name|AsPredicate
name|Predicate
name|predicate
parameter_list|)
block|{
return|return
name|completionPredicate
argument_list|(
name|predicate
argument_list|)
return|;
block|}
comment|/**      * Indicates to complete all current aggregated exchanges when the context is stopped      */
DECL|method|forceCompletionOnStop ()
specifier|public
name|AggregateDefinition
name|forceCompletionOnStop
parameter_list|()
block|{
name|setForceCompletionOnStop
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Indicates to wait to complete all current and partial (pending) aggregated exchanges when the context is stopped.      *<p/>      * This also means that we will wait for all pending exchanges which are stored in the aggregation repository      * to complete so the repository is empty before we can stop.      *<p/>      * You may want to enable this when using the memory based aggregation repository that is memory based only,      * and do not store data on disk. When this option is enabled, then the aggregator is waiting to complete      * all those exchanges before its stopped, when stopping CamelContext or the route using it.      */
DECL|method|completeAllOnStop ()
specifier|public
name|AggregateDefinition
name|completeAllOnStop
parameter_list|()
block|{
name|setCompleteAllOnStop
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * When aggregated are completed they are being send out of the aggregator.      * This option indicates whether or not Camel should use a thread pool with multiple threads for concurrency.      * If no custom thread pool has been specified then Camel creates a default pool with 10 concurrent threads.      */
DECL|method|parallelProcessing ()
specifier|public
name|AggregateDefinition
name|parallelProcessing
parameter_list|()
block|{
name|setParallelProcessing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * When aggregated are completed they are being send out of the aggregator.      * This option indicates whether or not Camel should use a thread pool with multiple threads for concurrency.      * If no custom thread pool has been specified then Camel creates a default pool with 10 concurrent threads.      */
DECL|method|parallelProcessing (boolean parallelProcessing)
specifier|public
name|AggregateDefinition
name|parallelProcessing
parameter_list|(
name|boolean
name|parallelProcessing
parameter_list|)
block|{
name|setParallelProcessing
argument_list|(
name|parallelProcessing
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Turns on using optimistic locking, which requires the aggregationRepository being used,      * is supporting this by implementing {@link org.apache.camel.spi.OptimisticLockingAggregationRepository}.      */
DECL|method|optimisticLocking ()
specifier|public
name|AggregateDefinition
name|optimisticLocking
parameter_list|()
block|{
name|setOptimisticLocking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Allows to configure retry settings when using optimistic locking.      */
DECL|method|optimisticLockRetryPolicy (OptimisticLockRetryPolicy policy)
specifier|public
name|AggregateDefinition
name|optimisticLockRetryPolicy
parameter_list|(
name|OptimisticLockRetryPolicy
name|policy
parameter_list|)
block|{
name|setOptimisticLockRetryPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * If using parallelProcessing you can specify a custom thread pool to be used.      * In fact also if you are not using parallelProcessing this custom thread pool is used to send out aggregated exchanges as well.      */
DECL|method|executorService (ExecutorService executorService)
specifier|public
name|AggregateDefinition
name|executorService
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|setExecutorService
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * If using parallelProcessing you can specify a custom thread pool to be used.      * In fact also if you are not using parallelProcessing this custom thread pool is used to send out aggregated exchanges as well.      */
DECL|method|executorServiceRef (String executorServiceRef)
specifier|public
name|AggregateDefinition
name|executorServiceRef
parameter_list|(
name|String
name|executorServiceRef
parameter_list|)
block|{
name|setExecutorServiceRef
argument_list|(
name|executorServiceRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * If using either of the completionTimeout, completionTimeoutExpression, or completionInterval options a      * background thread is created to check for the completion for every aggregator.      * Set this option to provide a custom thread pool to be used rather than creating a new thread for every aggregator.      */
DECL|method|timeoutCheckerExecutorService (ScheduledExecutorService executorService)
specifier|public
name|AggregateDefinition
name|timeoutCheckerExecutorService
parameter_list|(
name|ScheduledExecutorService
name|executorService
parameter_list|)
block|{
name|setTimeoutCheckerExecutorService
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * If using either of the completionTimeout, completionTimeoutExpression, or completionInterval options a      * background thread is created to check for the completion for every aggregator.      * Set this option to provide a custom thread pool to be used rather than creating a new thread for every aggregator.      */
DECL|method|timeoutCheckerExecutorServiceRef (String executorServiceRef)
specifier|public
name|AggregateDefinition
name|timeoutCheckerExecutorServiceRef
parameter_list|(
name|String
name|executorServiceRef
parameter_list|)
block|{
name|setTimeoutCheckerExecutorServiceRef
argument_list|(
name|executorServiceRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To use a {@link org.apache.camel.processor.aggregate.AggregateController} to allow external sources to control      * this aggregator.      */
DECL|method|aggregateController (AggregateController aggregateController)
specifier|public
name|AggregateDefinition
name|aggregateController
parameter_list|(
name|AggregateController
name|aggregateController
parameter_list|)
block|{
name|setAggregateController
argument_list|(
name|aggregateController
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// Section - Methods from ExpressionNode
comment|// Needed to copy methods from ExpressionNode here so that I could specify the
comment|// correlation expression as optional in JAXB
DECL|method|getExpression ()
specifier|public
name|ExpressionDefinition
name|getExpression
parameter_list|()
block|{
if|if
condition|(
name|expression
operator|==
literal|null
operator|&&
name|correlationExpression
operator|!=
literal|null
condition|)
block|{
name|expression
operator|=
name|correlationExpression
operator|.
name|getExpressionType
argument_list|()
expr_stmt|;
block|}
return|return
name|expression
return|;
block|}
DECL|method|setExpression (ExpressionDefinition expression)
specifier|public
name|void
name|setExpression
parameter_list|(
name|ExpressionDefinition
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
DECL|method|setExpression (Expression expression)
specifier|public
name|void
name|setExpression
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|setExpression
argument_list|(
operator|new
name|ExpressionDefinition
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNoCompletedPredicate ()
specifier|protected
name|void
name|checkNoCompletedPredicate
parameter_list|()
block|{
if|if
condition|(
name|getCompletionPredicate
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There is already a completionPredicate defined for this aggregator: "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getOutputs ()
specifier|public
name|List
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|getOutputs
parameter_list|()
block|{
return|return
name|outputs
return|;
block|}
DECL|method|isOutputSupported ()
specifier|public
name|boolean
name|isOutputSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|setOutputs (List<ProcessorDefinition<?>> outputs)
specifier|public
name|void
name|setOutputs
parameter_list|(
name|List
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|outputs
parameter_list|)
block|{
name|this
operator|.
name|outputs
operator|=
name|outputs
expr_stmt|;
block|}
block|}
end_class

end_unit

