begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|SimpleLanguage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_class
DECL|class|ScriptHelper
specifier|public
specifier|final
class|class
name|ScriptHelper
block|{
DECL|method|ScriptHelper ()
specifier|private
name|ScriptHelper
parameter_list|()
block|{     }
comment|/**      * Resolves the expression/predicate whether it refers to an external script on the file/classpath etc.      * This requires to use the prefix<tt>resource:</tt> such as<tt>resource:classpath:com/foo/myscript.groovy</tt>,      *<tt>resource:file:/var/myscript.groovy</tt>.      *<p/>      * If not then the returned value is returned as-is.      */
DECL|method|resolveOptionalExternalScript (CamelContext camelContext, String expression)
specifier|public
specifier|static
name|String
name|resolveOptionalExternalScript
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|expression
parameter_list|)
block|{
return|return
name|resolveOptionalExternalScript
argument_list|(
name|camelContext
argument_list|,
literal|null
argument_list|,
name|expression
argument_list|)
return|;
block|}
comment|/**      * Resolves the expression/predicate whether it refers to an external script on the file/classpath etc.      * This requires to use the prefix<tt>resource:</tt> such as<tt>resource:classpath:com/foo/myscript.groovy</tt>,      *<tt>resource:file:/var/myscript.groovy</tt>.      *<p/>      * If not then the returned value is returned as-is.      *<p/>      * If the exchange is provided (not null), then the external script can be referred via simple language for dynamic values, etc.      *<tt>resource:classpath:${header.myFileName}</tt>      */
DECL|method|resolveOptionalExternalScript (CamelContext camelContext, Exchange exchange, String expression)
specifier|public
specifier|static
name|String
name|resolveOptionalExternalScript
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|String
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|external
init|=
name|expression
decl_stmt|;
comment|// must be one line only
name|int
name|newLines
init|=
name|StringHelper
operator|.
name|countChar
argument_list|(
name|expression
argument_list|,
literal|'\n'
argument_list|)
decl_stmt|;
if|if
condition|(
name|newLines
operator|>
literal|1
condition|)
block|{
comment|// okay then just use as-is
return|return
name|expression
return|;
block|}
comment|// must start with resource: to denote an external resource
if|if
condition|(
name|external
operator|.
name|startsWith
argument_list|(
literal|"resource:"
argument_list|)
condition|)
block|{
name|external
operator|=
name|external
operator|.
name|substring
argument_list|(
literal|9
argument_list|)
expr_stmt|;
if|if
condition|(
name|ResourceHelper
operator|.
name|hasScheme
argument_list|(
name|external
argument_list|)
condition|)
block|{
if|if
condition|(
name|exchange
operator|!=
literal|null
operator|&&
name|SimpleLanguage
operator|.
name|hasSimpleFunction
argument_list|(
name|external
argument_list|)
condition|)
block|{
name|Language
name|simple
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolveLanguage
argument_list|(
literal|"simple"
argument_list|)
decl_stmt|;
name|external
operator|=
name|simple
operator|.
name|createExpression
argument_list|(
name|external
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|camelContext
argument_list|,
name|external
argument_list|)
expr_stmt|;
name|expression
operator|=
name|camelContext
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot load resource "
operator|+
name|external
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|expression
return|;
block|}
block|}
end_class

end_unit

