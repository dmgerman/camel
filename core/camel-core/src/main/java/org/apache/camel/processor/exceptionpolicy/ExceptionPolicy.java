begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.processor.exceptionpolicy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|exceptionpolicy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnExceptionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinitionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RedeliveryPolicyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|errorhandler
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
operator|.
name|errorhandler
operator|.
name|ErrorHandlerReifier
import|;
end_import

begin_class
DECL|class|ExceptionPolicy
specifier|public
class|class
name|ExceptionPolicy
block|{
DECL|field|def
specifier|private
specifier|final
name|OnExceptionDefinition
name|def
decl_stmt|;
DECL|method|ExceptionPolicy (OnExceptionDefinition def)
specifier|public
name|ExceptionPolicy
parameter_list|(
name|OnExceptionDefinition
name|def
parameter_list|)
block|{
name|this
operator|.
name|def
operator|=
name|def
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|def
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|method|getRouteId ()
specifier|public
name|String
name|getRouteId
parameter_list|()
block|{
return|return
name|ProcessorDefinitionHelper
operator|.
name|getRouteId
argument_list|(
name|def
argument_list|)
return|;
block|}
DECL|method|isRouteScoped ()
specifier|public
name|boolean
name|isRouteScoped
parameter_list|()
block|{
return|return
name|def
operator|.
name|getRouteScoped
argument_list|()
operator|!=
literal|null
operator|&&
name|def
operator|.
name|getRouteScoped
argument_list|()
return|;
block|}
DECL|method|getOnWhen ()
specifier|public
name|Predicate
name|getOnWhen
parameter_list|()
block|{
return|return
name|def
operator|.
name|getOnWhen
argument_list|()
operator|!=
literal|null
condition|?
name|def
operator|.
name|getOnWhen
argument_list|()
operator|.
name|getExpression
argument_list|()
else|:
literal|null
return|;
block|}
DECL|method|getRedeliveryPolicyRef ()
specifier|public
name|String
name|getRedeliveryPolicyRef
parameter_list|()
block|{
return|return
name|def
operator|.
name|getRedeliveryPolicyRef
argument_list|()
return|;
block|}
DECL|method|hasOutputs ()
specifier|public
name|boolean
name|hasOutputs
parameter_list|()
block|{
return|return
name|def
operator|.
name|getOutputs
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|def
operator|.
name|getOutputs
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|getRedeliveryPolicyType ()
specifier|public
name|RedeliveryPolicyDefinition
name|getRedeliveryPolicyType
parameter_list|()
block|{
return|return
name|def
operator|.
name|getRedeliveryPolicyType
argument_list|()
return|;
block|}
DECL|method|getHandledPolicy ()
specifier|public
name|Predicate
name|getHandledPolicy
parameter_list|()
block|{
return|return
name|def
operator|.
name|getHandledPolicy
argument_list|()
return|;
block|}
DECL|method|getContinuedPolicy ()
specifier|public
name|Predicate
name|getContinuedPolicy
parameter_list|()
block|{
return|return
name|def
operator|.
name|getContinuedPolicy
argument_list|()
return|;
block|}
DECL|method|getRetryWhilePolicy ()
specifier|public
name|Predicate
name|getRetryWhilePolicy
parameter_list|()
block|{
return|return
name|def
operator|.
name|getRetryWhilePolicy
argument_list|()
return|;
block|}
DECL|method|getUseOriginalInMessage ()
specifier|public
name|boolean
name|getUseOriginalInMessage
parameter_list|()
block|{
return|return
name|def
operator|.
name|getUseOriginalMessagePolicy
argument_list|()
operator|!=
literal|null
operator|&&
name|def
operator|.
name|getUseOriginalMessagePolicy
argument_list|()
return|;
block|}
DECL|method|getOnRedelivery ()
specifier|public
name|Processor
name|getOnRedelivery
parameter_list|()
block|{
return|return
name|def
operator|.
name|getOnRedelivery
argument_list|()
return|;
block|}
DECL|method|getOnExceptionOccurred ()
specifier|public
name|Processor
name|getOnExceptionOccurred
parameter_list|()
block|{
return|return
name|def
operator|.
name|getOnExceptionOccurred
argument_list|()
return|;
block|}
DECL|method|getExceptions ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getExceptions
parameter_list|()
block|{
return|return
name|def
operator|.
name|getExceptions
argument_list|()
return|;
block|}
DECL|method|determineIfRedeliveryIsEnabled (CamelContext context)
specifier|public
name|boolean
name|determineIfRedeliveryIsEnabled
parameter_list|(
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|ErrorHandlerReifier
operator|.
name|determineIfRedeliveryIsEnabled
argument_list|(
name|this
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|method|createRedeliveryPolicy (CamelContext context, RedeliveryPolicy parent)
specifier|public
name|RedeliveryPolicy
name|createRedeliveryPolicy
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|RedeliveryPolicy
name|parent
parameter_list|)
block|{
return|return
name|ErrorHandlerReifier
operator|.
name|createRedeliveryPolicy
argument_list|(
name|this
argument_list|,
name|context
argument_list|,
name|parent
argument_list|)
return|;
block|}
block|}
end_class

end_unit

