begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|FromDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptFromDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptSendToEndpointDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnCompletionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnExceptionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RoutesDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestConfigurationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestsDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|function
operator|.
name|ThrowingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A<a href="http://camel.apache.org/dsl.html">Java DSL</a> which is  * used to build {@link org.apache.camel.impl.DefaultRoute} instances in a {@link CamelContext} for smart routing.  */
end_comment

begin_class
DECL|class|RouteBuilder
specifier|public
specifier|abstract
class|class
name|RouteBuilder
extends|extends
name|BuilderSupport
implements|implements
name|RoutesBuilder
block|{
DECL|field|log
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|initialized
specifier|private
name|AtomicBoolean
name|initialized
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|restCollection
specifier|private
name|RestsDefinition
name|restCollection
init|=
operator|new
name|RestsDefinition
argument_list|()
decl_stmt|;
DECL|field|restConfigurations
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RestConfigurationDefinition
argument_list|>
name|restConfigurations
decl_stmt|;
DECL|field|transformerBuilders
specifier|private
name|List
argument_list|<
name|TransformerBuilder
argument_list|>
name|transformerBuilders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|validatorBuilders
specifier|private
name|List
argument_list|<
name|ValidatorBuilder
argument_list|>
name|validatorBuilders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|routeCollection
specifier|private
name|RoutesDefinition
name|routeCollection
init|=
operator|new
name|RoutesDefinition
argument_list|()
decl_stmt|;
comment|/**      * Add routes to a context using a lambda expression.      * It can be used as following:      *<pre>      * RouteBuilder.addRoutes(context, rb ->      *     rb.from("direct:inbound").bean(ProduceTemplateBean.class)));      *</pre>      *      * @param context the camel context to add routes      * @param rbc a lambda expression receiving the {@code RouteBuilder} to use to create routes      * @throws Exception if an error occurs      */
DECL|method|addRoutes (CamelContext context, ThrowingConsumer<RouteBuilder, Exception> rbc)
specifier|public
specifier|static
name|void
name|addRoutes
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|ThrowingConsumer
argument_list|<
name|RouteBuilder
argument_list|,
name|Exception
argument_list|>
name|rbc
parameter_list|)
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|(
name|context
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|rbc
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|RouteBuilder ()
specifier|public
name|RouteBuilder
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|RouteBuilder (CamelContext context)
specifier|public
name|RouteBuilder
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getRouteCollection
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      *<b>Called on initialization to build the routes using the fluent builder syntax.</b>      *<p/>      * This is a central method for RouteBuilder implementations to implement      * the routes using the Java fluent builder syntax.      *      * @throws Exception can be thrown during configuration      */
DECL|method|configure ()
specifier|public
specifier|abstract
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**      * Binds the bean to the repository (if possible).      *      * @param id   the id of the bean      * @param bean the bean      */
DECL|method|bindToRegistry (String id, Object bean)
specifier|public
name|void
name|bindToRegistry
parameter_list|(
name|String
name|id
parameter_list|,
name|Object
name|bean
parameter_list|)
block|{
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
name|id
argument_list|,
name|bean
argument_list|)
expr_stmt|;
block|}
comment|/**      * Configures the REST services      *      * @return the builder      */
DECL|method|restConfiguration ()
specifier|public
name|RestConfigurationDefinition
name|restConfiguration
parameter_list|()
block|{
return|return
name|restConfiguration
argument_list|(
literal|""
argument_list|)
return|;
block|}
comment|/**      * Configures the REST service for the given component      *      * @return the builder      */
DECL|method|restConfiguration (String component)
specifier|public
name|RestConfigurationDefinition
name|restConfiguration
parameter_list|(
name|String
name|component
parameter_list|)
block|{
if|if
condition|(
name|restConfigurations
operator|==
literal|null
condition|)
block|{
name|restConfigurations
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|RestConfigurationDefinition
name|restConfiguration
init|=
name|restConfigurations
operator|.
name|get
argument_list|(
name|component
argument_list|)
decl_stmt|;
if|if
condition|(
name|restConfiguration
operator|==
literal|null
condition|)
block|{
name|restConfiguration
operator|=
operator|new
name|RestConfigurationDefinition
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|component
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|restConfiguration
operator|.
name|component
argument_list|(
name|component
argument_list|)
expr_stmt|;
block|}
name|restConfigurations
operator|.
name|put
argument_list|(
name|component
argument_list|,
name|restConfiguration
argument_list|)
expr_stmt|;
block|}
return|return
name|restConfiguration
return|;
block|}
comment|/**      * Creates a new REST service      *      * @return the builder      */
DECL|method|rest ()
specifier|public
name|RestDefinition
name|rest
parameter_list|()
block|{
name|getRestCollection
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|RestDefinition
name|answer
init|=
name|getRestCollection
argument_list|()
operator|.
name|rest
argument_list|()
decl_stmt|;
name|configureRest
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Creates a new REST service      *      * @param path  the base path      * @return the builder      */
DECL|method|rest (String path)
specifier|public
name|RestDefinition
name|rest
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|getRestCollection
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|RestDefinition
name|answer
init|=
name|getRestCollection
argument_list|()
operator|.
name|rest
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|configureRest
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Create a new {@code TransformerBuilder}.      *       * @return the builder      */
DECL|method|transformer ()
specifier|public
name|TransformerBuilder
name|transformer
parameter_list|()
block|{
name|TransformerBuilder
name|tdb
init|=
operator|new
name|TransformerBuilder
argument_list|()
decl_stmt|;
name|transformerBuilders
operator|.
name|add
argument_list|(
name|tdb
argument_list|)
expr_stmt|;
return|return
name|tdb
return|;
block|}
comment|/**      * Create a new {@code ValidatorBuilder}.      *       * @return the builder      */
DECL|method|validator ()
specifier|public
name|ValidatorBuilder
name|validator
parameter_list|()
block|{
name|ValidatorBuilder
name|vb
init|=
operator|new
name|ValidatorBuilder
argument_list|()
decl_stmt|;
name|validatorBuilders
operator|.
name|add
argument_list|(
name|vb
argument_list|)
expr_stmt|;
return|return
name|vb
return|;
block|}
comment|/**      * Creates a new route from the given URI input      *      * @param uri  the from uri      * @return the builder      */
DECL|method|from (String uri)
specifier|public
name|RouteDefinition
name|from
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|getRouteCollection
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|RouteDefinition
name|answer
init|=
name|getRouteCollection
argument_list|()
operator|.
name|from
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|configureRoute
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Creates a new route from the given URI input      *      * @param uri  the String formatted from uri      * @param args arguments for the string formatting of the uri      * @return the builder      */
DECL|method|fromF (String uri, Object... args)
specifier|public
name|RouteDefinition
name|fromF
parameter_list|(
name|String
name|uri
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|getRouteCollection
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|RouteDefinition
name|answer
init|=
name|getRouteCollection
argument_list|()
operator|.
name|from
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|uri
argument_list|,
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|configureRoute
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Creates a new route from the given endpoint      *      * @param endpoint  the from endpoint      * @return the builder      */
DECL|method|from (Endpoint endpoint)
specifier|public
name|RouteDefinition
name|from
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|getRouteCollection
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|RouteDefinition
name|answer
init|=
name|getRouteCollection
argument_list|()
operator|.
name|from
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|configureRoute
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Creates a new route from the given URIs input      *      * @param uris  the from uris      * @return the builder      */
DECL|method|from (String... uris)
specifier|public
name|RouteDefinition
name|from
parameter_list|(
name|String
modifier|...
name|uris
parameter_list|)
block|{
name|getRouteCollection
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|RouteDefinition
name|answer
init|=
name|getRouteCollection
argument_list|()
operator|.
name|from
argument_list|(
name|uris
argument_list|)
decl_stmt|;
name|configureRoute
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Creates a new route from the given endpoint      *      * @param endpoints  the from endpoints      * @return the builder      */
DECL|method|from (Endpoint... endpoints)
specifier|public
name|RouteDefinition
name|from
parameter_list|(
name|Endpoint
modifier|...
name|endpoints
parameter_list|)
block|{
name|getRouteCollection
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|RouteDefinition
name|answer
init|=
name|getRouteCollection
argument_list|()
operator|.
name|from
argument_list|(
name|endpoints
argument_list|)
decl_stmt|;
name|configureRoute
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Installs the given<a href="http://camel.apache.org/error-handler.html">error handler</a> builder      *      * @param errorHandlerBuilder  the error handler to be used by default for all child routes      */
DECL|method|errorHandler (ErrorHandlerBuilder errorHandlerBuilder)
specifier|public
name|void
name|errorHandler
parameter_list|(
name|ErrorHandlerBuilder
name|errorHandlerBuilder
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getRouteCollection
argument_list|()
operator|.
name|getRoutes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"errorHandler must be defined before any routes in the RouteBuilder"
argument_list|)
throw|;
block|}
name|getRouteCollection
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|setErrorHandlerBuilder
argument_list|(
name|errorHandlerBuilder
argument_list|)
expr_stmt|;
block|}
comment|/**      * Injects a property placeholder value with the given key converted to the given type.      *      * @param key  the property key      * @param type the type to convert the value as      * @return the value, or<tt>null</tt> if value is empty      * @throws Exception is thrown if property with key not found or error converting to the given type.      */
DECL|method|propertyInject (String key, Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|propertyInject
parameter_list|(
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|key
argument_list|,
literal|"key"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|type
argument_list|,
literal|"Class type"
argument_list|)
expr_stmt|;
comment|// the properties component is mandatory
name|PropertiesComponent
name|pc
init|=
name|getContext
argument_list|()
operator|.
name|getPropertiesComponent
argument_list|()
decl_stmt|;
comment|// enclose key with {{ }} to force parsing
name|Object
name|value
init|=
name|pc
operator|.
name|parseUri
argument_list|(
name|pc
operator|.
name|getPrefixToken
argument_list|()
operator|+
name|key
operator|+
name|pc
operator|.
name|getSuffixToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|type
argument_list|,
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Adds a route for an interceptor that intercepts every processing step.      *      * @return the builder      */
DECL|method|intercept ()
specifier|public
name|InterceptDefinition
name|intercept
parameter_list|()
block|{
if|if
condition|(
operator|!
name|getRouteCollection
argument_list|()
operator|.
name|getRoutes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"intercept must be defined before any routes in the RouteBuilder"
argument_list|)
throw|;
block|}
name|getRouteCollection
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getRouteCollection
argument_list|()
operator|.
name|intercept
argument_list|()
return|;
block|}
comment|/**      * Adds a route for an interceptor that intercepts incoming messages on any inputs in this route      *      * @return the builder      */
DECL|method|interceptFrom ()
specifier|public
name|InterceptFromDefinition
name|interceptFrom
parameter_list|()
block|{
if|if
condition|(
operator|!
name|getRouteCollection
argument_list|()
operator|.
name|getRoutes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"interceptFrom must be defined before any routes in the RouteBuilder"
argument_list|)
throw|;
block|}
name|getRouteCollection
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getRouteCollection
argument_list|()
operator|.
name|interceptFrom
argument_list|()
return|;
block|}
comment|/**      * Adds a route for an interceptor that intercepts incoming messages on the given endpoint.      *      * @param uri  endpoint uri      * @return the builder      */
DECL|method|interceptFrom (String uri)
specifier|public
name|InterceptFromDefinition
name|interceptFrom
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getRouteCollection
argument_list|()
operator|.
name|getRoutes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"interceptFrom must be defined before any routes in the RouteBuilder"
argument_list|)
throw|;
block|}
name|getRouteCollection
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getRouteCollection
argument_list|()
operator|.
name|interceptFrom
argument_list|(
name|uri
argument_list|)
return|;
block|}
comment|/**      * Applies a route for an interceptor if an exchange is send to the given endpoint      *      * @param uri  endpoint uri      * @return the builder      */
DECL|method|interceptSendToEndpoint (String uri)
specifier|public
name|InterceptSendToEndpointDefinition
name|interceptSendToEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getRouteCollection
argument_list|()
operator|.
name|getRoutes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"interceptSendToEndpoint must be defined before any routes in the RouteBuilder"
argument_list|)
throw|;
block|}
name|getRouteCollection
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getRouteCollection
argument_list|()
operator|.
name|interceptSendToEndpoint
argument_list|(
name|uri
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/exception-clause.html">Exception clause</a>      * for catching certain exceptions and handling them.      *      * @param exception exception to catch      * @return the builder      */
DECL|method|onException (Class<? extends Throwable> exception)
specifier|public
name|OnExceptionDefinition
name|onException
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|exception
parameter_list|)
block|{
comment|// is only allowed at the top currently
if|if
condition|(
operator|!
name|getRouteCollection
argument_list|()
operator|.
name|getRoutes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"onException must be defined before any routes in the RouteBuilder"
argument_list|)
throw|;
block|}
name|getRouteCollection
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getRouteCollection
argument_list|()
operator|.
name|onException
argument_list|(
name|exception
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/exception-clause.html">Exception clause</a>      * for catching certain exceptions and handling them.      *      * @param exceptions list of exceptions to catch      * @return the builder      */
DECL|method|onException (Class<? extends Throwable>.... exceptions)
specifier|public
name|OnExceptionDefinition
name|onException
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
modifier|...
name|exceptions
parameter_list|)
block|{
name|OnExceptionDefinition
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|ex
range|:
name|exceptions
control|)
block|{
name|last
operator|=
name|last
operator|==
literal|null
condition|?
name|onException
argument_list|(
name|ex
argument_list|)
else|:
name|last
operator|.
name|onException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|last
operator|!=
literal|null
condition|?
name|last
else|:
name|onException
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      *<a href="http://camel.apache.org/oncompletion.html">On completion</a>      * callback for doing custom routing when the {@link org.apache.camel.Exchange} is complete.      *      * @return the builder      */
DECL|method|onCompletion ()
specifier|public
name|OnCompletionDefinition
name|onCompletion
parameter_list|()
block|{
comment|// is only allowed at the top currently
if|if
condition|(
operator|!
name|getRouteCollection
argument_list|()
operator|.
name|getRoutes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"onCompletion must be defined before any routes in the RouteBuilder"
argument_list|)
throw|;
block|}
name|getRouteCollection
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getRouteCollection
argument_list|()
operator|.
name|onCompletion
argument_list|()
return|;
block|}
DECL|method|addRoutesToCamelContext (CamelContext context)
specifier|public
name|void
name|addRoutesToCamelContext
parameter_list|(
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
comment|// must configure routes before rests
name|configureRoutes
argument_list|(
operator|(
name|ModelCamelContext
operator|)
name|context
argument_list|)
expr_stmt|;
name|configureRests
argument_list|(
operator|(
name|ModelCamelContext
operator|)
name|context
argument_list|)
expr_stmt|;
comment|// but populate rests before routes, as we want to turn rests into routes
name|populateRests
argument_list|()
expr_stmt|;
name|populateTransformers
argument_list|()
expr_stmt|;
name|populateValidators
argument_list|()
expr_stmt|;
name|populateRoutes
argument_list|()
expr_stmt|;
block|}
comment|/**      * Configures the routes      *      * @param context the Camel context      * @return the routes configured      * @throws Exception can be thrown during configuration      */
DECL|method|configureRoutes (ModelCamelContext context)
specifier|public
name|RoutesDefinition
name|configureRoutes
parameter_list|(
name|ModelCamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|setContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|checkInitialized
argument_list|()
expr_stmt|;
name|routeCollection
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|routeCollection
return|;
block|}
comment|/**      * Configures the rests      *      * @param context the Camel context      * @return the rests configured      * @throws Exception can be thrown during configuration      */
DECL|method|configureRests (ModelCamelContext context)
specifier|public
name|RestsDefinition
name|configureRests
parameter_list|(
name|ModelCamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|setContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|restCollection
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|restCollection
return|;
block|}
annotation|@
name|Override
DECL|method|setErrorHandlerBuilder (ErrorHandlerBuilder errorHandlerBuilder)
specifier|public
name|void
name|setErrorHandlerBuilder
parameter_list|(
name|ErrorHandlerBuilder
name|errorHandlerBuilder
parameter_list|)
block|{
name|super
operator|.
name|setErrorHandlerBuilder
argument_list|(
name|errorHandlerBuilder
argument_list|)
expr_stmt|;
name|getRouteCollection
argument_list|()
operator|.
name|setErrorHandlerFactory
argument_list|(
name|getErrorHandlerBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -----------------------------------------------------------------------
DECL|method|checkInitialized ()
specifier|protected
name|void
name|checkInitialized
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|initialized
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// Set the CamelContext ErrorHandler here
name|ModelCamelContext
name|camelContext
init|=
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelContext
operator|.
name|getErrorHandlerFactory
argument_list|()
operator|instanceof
name|ErrorHandlerBuilder
condition|)
block|{
name|setErrorHandlerBuilder
argument_list|(
operator|(
name|ErrorHandlerBuilder
operator|)
name|camelContext
operator|.
name|getErrorHandlerFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|configure
argument_list|()
expr_stmt|;
comment|// mark all route definitions as custom prepared because
comment|// a route builder prepares the route definitions correctly already
for|for
control|(
name|RouteDefinition
name|route
range|:
name|getRouteCollection
argument_list|()
operator|.
name|getRoutes
argument_list|()
control|)
block|{
name|route
operator|.
name|markPrepared
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|populateRoutes ()
specifier|protected
name|void
name|populateRoutes
parameter_list|()
throws|throws
name|Exception
block|{
name|ModelCamelContext
name|camelContext
init|=
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"CamelContext has not been injected!"
argument_list|)
throw|;
block|}
name|getRouteCollection
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addRouteDefinitions
argument_list|(
name|getRouteCollection
argument_list|()
operator|.
name|getRoutes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|populateRests ()
specifier|protected
name|void
name|populateRests
parameter_list|()
throws|throws
name|Exception
block|{
name|ModelCamelContext
name|camelContext
init|=
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"CamelContext has not been injected!"
argument_list|)
throw|;
block|}
name|getRestCollection
argument_list|()
operator|.
name|setCamelContext
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
comment|// setup rest configuration before adding the rests
if|if
condition|(
name|getRestConfigurations
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RestConfigurationDefinition
argument_list|>
name|entry
range|:
name|getRestConfigurations
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RestConfiguration
name|config
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|asRestConfiguration
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|camelContext
operator|.
name|setRestConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|camelContext
operator|.
name|addRestConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|camelContext
operator|.
name|addRestDefinitions
argument_list|(
name|getRestCollection
argument_list|()
operator|.
name|getRests
argument_list|()
argument_list|)
expr_stmt|;
comment|// convert rests into routes so we they are routes for runtime
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|routes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RestDefinition
name|rest
range|:
name|getRestCollection
argument_list|()
operator|.
name|getRests
argument_list|()
control|)
block|{
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|list
init|=
name|rest
operator|.
name|asRouteDefinition
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|routes
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
comment|// convert rests api-doc into routes so they are routes for runtime
for|for
control|(
name|RestConfiguration
name|config
range|:
name|camelContext
operator|.
name|getRestConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|config
operator|.
name|getApiContextPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// avoid adding rest-api multiple times, in case multiple RouteBuilder classes is added
comment|// to the CamelContext, as we only want to setup rest-api once
comment|// so we check all existing routes if they have rest-api route already added
name|boolean
name|hasRestApi
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RouteDefinition
name|route
range|:
name|camelContext
operator|.
name|getRouteDefinitions
argument_list|()
control|)
block|{
name|FromDefinition
name|from
init|=
name|route
operator|.
name|getInputs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|from
operator|.
name|getUri
argument_list|()
operator|!=
literal|null
operator|&&
name|from
operator|.
name|getUri
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"rest-api:"
argument_list|)
condition|)
block|{
name|hasRestApi
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hasRestApi
condition|)
block|{
name|RouteDefinition
name|route
init|=
name|RestDefinition
operator|.
name|asRouteApiDefinition
argument_list|(
name|camelContext
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Adding routeId: {} as rest-api route"
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|routes
operator|.
name|add
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// add the rest routes
for|for
control|(
name|RouteDefinition
name|route
range|:
name|routes
control|)
block|{
name|getRouteCollection
argument_list|()
operator|.
name|route
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populateTransformers ()
specifier|protected
name|void
name|populateTransformers
parameter_list|()
block|{
name|ModelCamelContext
name|camelContext
init|=
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"CamelContext has not been injected!"
argument_list|)
throw|;
block|}
for|for
control|(
name|TransformerBuilder
name|tdb
range|:
name|transformerBuilders
control|)
block|{
name|tdb
operator|.
name|configure
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populateValidators ()
specifier|protected
name|void
name|populateValidators
parameter_list|()
block|{
name|ModelCamelContext
name|camelContext
init|=
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"CamelContext has not been injected!"
argument_list|)
throw|;
block|}
for|for
control|(
name|ValidatorBuilder
name|vb
range|:
name|validatorBuilders
control|)
block|{
name|vb
operator|.
name|configure
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRestCollection ()
specifier|public
name|RestsDefinition
name|getRestCollection
parameter_list|()
block|{
return|return
name|restCollection
return|;
block|}
DECL|method|getRestConfigurations ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|RestConfigurationDefinition
argument_list|>
name|getRestConfigurations
parameter_list|()
block|{
return|return
name|restConfigurations
return|;
block|}
DECL|method|setRestCollection (RestsDefinition restCollection)
specifier|public
name|void
name|setRestCollection
parameter_list|(
name|RestsDefinition
name|restCollection
parameter_list|)
block|{
name|this
operator|.
name|restCollection
operator|=
name|restCollection
expr_stmt|;
block|}
DECL|method|setRouteCollection (RoutesDefinition routeCollection)
specifier|public
name|void
name|setRouteCollection
parameter_list|(
name|RoutesDefinition
name|routeCollection
parameter_list|)
block|{
name|this
operator|.
name|routeCollection
operator|=
name|routeCollection
expr_stmt|;
block|}
DECL|method|getRouteCollection ()
specifier|public
name|RoutesDefinition
name|getRouteCollection
parameter_list|()
block|{
return|return
name|this
operator|.
name|routeCollection
return|;
block|}
DECL|method|configureRest (RestDefinition rest)
specifier|protected
name|void
name|configureRest
parameter_list|(
name|RestDefinition
name|rest
parameter_list|)
block|{
comment|// noop
block|}
DECL|method|configureRoute (RouteDefinition route)
specifier|protected
name|void
name|configureRoute
parameter_list|(
name|RouteDefinition
name|route
parameter_list|)
block|{
comment|// noop
block|}
block|}
end_class

end_unit

