begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_class
DECL|class|FhirDataformat
specifier|public
specifier|abstract
class|class
name|FhirDataformat
extends|extends
name|DataFormatDefinition
block|{
annotation|@
name|XmlTransient
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|fhirContext
specifier|private
name|Object
name|fhirContext
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|enums
operator|=
literal|"DSTU2,DSTU2_HL7ORG,DSTU2_1,DSTU3,R4"
argument_list|,
name|defaultValue
operator|=
literal|"DSTU3"
argument_list|)
DECL|field|fhirVersion
specifier|private
name|String
name|fhirVersion
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|prettyPrint
specifier|private
name|Boolean
name|prettyPrint
decl_stmt|;
annotation|@
name|XmlTransient
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|parserErrorHandler
specifier|private
name|Object
name|parserErrorHandler
decl_stmt|;
annotation|@
name|XmlTransient
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|parserOptions
specifier|private
name|Object
name|parserOptions
decl_stmt|;
annotation|@
name|XmlTransient
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|preferTypes
specifier|private
name|Object
name|preferTypes
decl_stmt|;
annotation|@
name|XmlTransient
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|forceResourceId
specifier|private
name|Object
name|forceResourceId
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|serverBaseUrl
specifier|private
name|String
name|serverBaseUrl
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|omitResourceId
specifier|private
name|Boolean
name|omitResourceId
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|encodeElementsAppliesToChildResourcesOnly
specifier|private
name|Boolean
name|encodeElementsAppliesToChildResourcesOnly
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|encodeElements
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|encodeElements
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|dontEncodeElements
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|dontEncodeElements
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|stripVersionsFromReferences
specifier|private
name|Boolean
name|stripVersionsFromReferences
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|overrideResourceIdWithBundleEntryFullUrl
specifier|private
name|Boolean
name|overrideResourceIdWithBundleEntryFullUrl
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|summaryMode
specifier|private
name|Boolean
name|summaryMode
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|suppressNarratives
specifier|private
name|Boolean
name|suppressNarratives
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|dontStripVersionsFromReferencesAtPaths
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|dontStripVersionsFromReferencesAtPaths
decl_stmt|;
DECL|method|FhirDataformat (String dataFormatName)
specifier|protected
name|FhirDataformat
parameter_list|(
name|String
name|dataFormatName
parameter_list|)
block|{
name|super
argument_list|(
name|dataFormatName
argument_list|)
expr_stmt|;
block|}
DECL|method|FhirDataformat ()
specifier|protected
name|FhirDataformat
parameter_list|()
block|{
comment|// This constructor is needed by jaxb for schema generation
block|}
DECL|method|getFhirContext ()
specifier|public
name|Object
name|getFhirContext
parameter_list|()
block|{
return|return
name|fhirContext
return|;
block|}
DECL|method|setFhirContext (Object fhirContext)
specifier|public
name|void
name|setFhirContext
parameter_list|(
name|Object
name|fhirContext
parameter_list|)
block|{
name|this
operator|.
name|fhirContext
operator|=
name|fhirContext
expr_stmt|;
block|}
DECL|method|getFhirVersion ()
specifier|public
name|String
name|getFhirVersion
parameter_list|()
block|{
return|return
name|fhirVersion
return|;
block|}
comment|/**      * The version of FHIR to use. Possible values are: DSTU2,DSTU2_HL7ORG,DSTU2_1,DSTU3,R4      */
DECL|method|setFhirVersion (String fhirVersion)
specifier|public
name|void
name|setFhirVersion
parameter_list|(
name|String
name|fhirVersion
parameter_list|)
block|{
name|this
operator|.
name|fhirVersion
operator|=
name|fhirVersion
expr_stmt|;
block|}
DECL|method|isPrettyPrint ()
specifier|public
name|Boolean
name|isPrettyPrint
parameter_list|()
block|{
return|return
name|prettyPrint
return|;
block|}
comment|/**      * Sets the "pretty print" flag, meaning that the parser will encode resources with human-readable spacing and      * newlines between elements instead of condensing output as much as possible.      *      * @param prettyPrint The flag      */
DECL|method|setPrettyPrint (Boolean prettyPrint)
specifier|public
name|void
name|setPrettyPrint
parameter_list|(
name|Boolean
name|prettyPrint
parameter_list|)
block|{
name|this
operator|.
name|prettyPrint
operator|=
name|prettyPrint
expr_stmt|;
block|}
DECL|method|getParserErrorHandler ()
specifier|public
name|Object
name|getParserErrorHandler
parameter_list|()
block|{
return|return
name|parserErrorHandler
return|;
block|}
comment|/**      * Registers an error handler which will be invoked when any parse errors are found      *      * @param parserErrorHandler The error handler to set. Must not be null.      */
DECL|method|setParserErrorHandler (Object parserErrorHandler)
specifier|public
name|void
name|setParserErrorHandler
parameter_list|(
name|Object
name|parserErrorHandler
parameter_list|)
block|{
name|this
operator|.
name|parserErrorHandler
operator|=
name|parserErrorHandler
expr_stmt|;
block|}
DECL|method|getParserOptions ()
specifier|public
name|Object
name|getParserOptions
parameter_list|()
block|{
return|return
name|parserOptions
return|;
block|}
comment|/**      * Sets the parser options object which will be used to supply default      * options to newly created parsers.      *      * @param parserOptions The parser options object      */
DECL|method|setParserOptions (Object parserOptions)
specifier|public
name|void
name|setParserOptions
parameter_list|(
name|Object
name|parserOptions
parameter_list|)
block|{
name|this
operator|.
name|parserOptions
operator|=
name|parserOptions
expr_stmt|;
block|}
DECL|method|getPreferTypes ()
specifier|public
name|Object
name|getPreferTypes
parameter_list|()
block|{
return|return
name|preferTypes
return|;
block|}
comment|/**      * If set, when parsing resources the parser will try to use the given types when possible, in      * the order that they are provided (from highest to lowest priority). For example, if a custom      * type which declares to implement the Patient resource is passed in here, and the      * parser is parsing a Bundle containing a Patient resource, the parser will use the given      * custom type.      *      * @param preferTypes The preferred types, or<code>null</code>      */
DECL|method|setPreferTypes (Object preferTypes)
specifier|public
name|void
name|setPreferTypes
parameter_list|(
name|Object
name|preferTypes
parameter_list|)
block|{
name|this
operator|.
name|preferTypes
operator|=
name|preferTypes
expr_stmt|;
block|}
DECL|method|getForceResourceId ()
specifier|public
name|Object
name|getForceResourceId
parameter_list|()
block|{
return|return
name|forceResourceId
return|;
block|}
comment|/**      * When encoding, force this resource ID to be encoded as the resource ID      */
DECL|method|setForceResourceId (Object forceResourceId)
specifier|public
name|void
name|setForceResourceId
parameter_list|(
name|Object
name|forceResourceId
parameter_list|)
block|{
name|this
operator|.
name|forceResourceId
operator|=
name|forceResourceId
expr_stmt|;
block|}
DECL|method|getServerBaseUrl ()
specifier|public
name|String
name|getServerBaseUrl
parameter_list|()
block|{
return|return
name|serverBaseUrl
return|;
block|}
comment|/**      * Sets the server's base URL used by this parser. If a value is set, resource references will be turned into      * relative references if they are provided as absolute URLs but have a base matching the given base.      *      * @param serverBaseUrl The base URL, e.g. "http://example.com/base"      */
DECL|method|setServerBaseUrl (String serverBaseUrl)
specifier|public
name|void
name|setServerBaseUrl
parameter_list|(
name|String
name|serverBaseUrl
parameter_list|)
block|{
name|this
operator|.
name|serverBaseUrl
operator|=
name|serverBaseUrl
expr_stmt|;
block|}
DECL|method|isOmitResourceId ()
specifier|public
name|Boolean
name|isOmitResourceId
parameter_list|()
block|{
return|return
name|omitResourceId
return|;
block|}
comment|/**      * If set to<code>true</code> (default is<code>false</code>) the ID of any resources being encoded will not be      * included in the output. Note that this does not apply to contained resources, only to root resources. In other      * words, if this is set to<code>true</code>, contained resources will still have local IDs but the outer/containing      * ID will not have an ID.      *      * @param omitResourceId Should resource IDs be omitted      */
DECL|method|setOmitResourceId (Boolean omitResourceId)
specifier|public
name|void
name|setOmitResourceId
parameter_list|(
name|Boolean
name|omitResourceId
parameter_list|)
block|{
name|this
operator|.
name|omitResourceId
operator|=
name|omitResourceId
expr_stmt|;
block|}
DECL|method|isEncodeElementsAppliesToChildResourcesOnly ()
specifier|public
name|Boolean
name|isEncodeElementsAppliesToChildResourcesOnly
parameter_list|()
block|{
return|return
name|encodeElementsAppliesToChildResourcesOnly
return|;
block|}
comment|/**      * If set to<code>true</code> (default is false), the values supplied      * to {@link #setEncodeElements(Set)} will not be applied to the root      * resource (typically a Bundle), but will be applied to any sub-resources      * contained within it (i.e. search result resources in that bundle)      */
DECL|method|setEncodeElementsAppliesToChildResourcesOnly (Boolean encodeElementsAppliesToChildResourcesOnly)
specifier|public
name|void
name|setEncodeElementsAppliesToChildResourcesOnly
parameter_list|(
name|Boolean
name|encodeElementsAppliesToChildResourcesOnly
parameter_list|)
block|{
name|this
operator|.
name|encodeElementsAppliesToChildResourcesOnly
operator|=
name|encodeElementsAppliesToChildResourcesOnly
expr_stmt|;
block|}
DECL|method|getEncodeElements ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getEncodeElements
parameter_list|()
block|{
return|return
name|encodeElements
return|;
block|}
comment|/**      * If provided, specifies the elements which should be encoded, to the exclusion of all others. Valid values for this      * field would include:      *<ul>      *<li><b>Patient</b> - Encode patient and all its children</li>      *<li><b>Patient.name</b> - Encode only the patient's name</li>      *<li><b>Patient.name.family</b> - Encode only the patient's family name</li>      *<li><b>*.text</b> - Encode the text element on any resource (only the very first position may contain a      * wildcard)</li>      *<li><b>*.(mandatory)</b> - This is a special case which causes any mandatory fields (min> 0) to be encoded</li>      *</ul>      *      * @param encodeElements The elements to encode      * @see #setDontEncodeElements(Set)      */
DECL|method|setEncodeElements (Set<String> encodeElements)
specifier|public
name|void
name|setEncodeElements
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|encodeElements
parameter_list|)
block|{
name|this
operator|.
name|encodeElements
operator|=
name|encodeElements
expr_stmt|;
block|}
DECL|method|getDontEncodeElements ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getDontEncodeElements
parameter_list|()
block|{
return|return
name|dontEncodeElements
return|;
block|}
comment|/**      * If provided, specifies the elements which should NOT be encoded. Valid values for this      * field would include:      *<ul>      *<li><b>Patient</b> - Don't encode patient and all its children</li>      *<li><b>Patient.name</b> - Don't encode the patient's name</li>      *<li><b>Patient.name.family</b> - Don't encode the patient's family name</li>      *<li><b>*.text</b> - Don't encode the text element on any resource (only the very first position may contain a      * wildcard)</li>      *</ul>      *<p>      * DSTU2 note: Note that values including meta, such as<code>Patient.meta</code>      * will work for DSTU2 parsers, but values with subelements on meta such      * as<code>Patient.meta.lastUpdated</code> will only work in      * DSTU3+ mode.      *</p>      *      * @param dontEncodeElements The elements to encode      * @see #setEncodeElements(Set)      */
DECL|method|setDontEncodeElements (Set<String> dontEncodeElements)
specifier|public
name|void
name|setDontEncodeElements
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|dontEncodeElements
parameter_list|)
block|{
name|this
operator|.
name|dontEncodeElements
operator|=
name|dontEncodeElements
expr_stmt|;
block|}
DECL|method|getStripVersionsFromReferences ()
specifier|public
name|Boolean
name|getStripVersionsFromReferences
parameter_list|()
block|{
return|return
name|stripVersionsFromReferences
return|;
block|}
comment|/**      * If set to<code>true<code> (which is the default), resource references containing a version      * will have the version removed when the resource is encoded. This is generally good behaviour because      * in most situations, references from one resource to another should be to the resource by ID, not      * by ID and version. In some cases though, it may be desirable to preserve the version in resource      * links. In that case, this value should be set to<code>false</code>.      *<p>      * This method provides the ability to globally disable reference encoding. If finer-grained      * control is needed, use {@link #setDontStripVersionsFromReferencesAtPaths(List)}      *</p>      *      * @param stripVersionsFromReferences Set this to<code>false<code> to prevent the parser from removing resource versions      *                                    from references (or<code>null</code> to apply the default setting from the {@link #setParserOptions(Object)}      * @see #setDontStripVersionsFromReferencesAtPaths(List)      */
DECL|method|setStripVersionsFromReferences (Boolean stripVersionsFromReferences)
specifier|public
name|void
name|setStripVersionsFromReferences
parameter_list|(
name|Boolean
name|stripVersionsFromReferences
parameter_list|)
block|{
name|this
operator|.
name|stripVersionsFromReferences
operator|=
name|stripVersionsFromReferences
expr_stmt|;
block|}
DECL|method|getOverrideResourceIdWithBundleEntryFullUrl ()
specifier|public
name|Boolean
name|getOverrideResourceIdWithBundleEntryFullUrl
parameter_list|()
block|{
return|return
name|overrideResourceIdWithBundleEntryFullUrl
return|;
block|}
comment|/**      * If set to<code>true</code> (which is the default), the Bundle.entry.fullUrl will override the Bundle.entry.resource's      * resource id if the fullUrl is defined. This behavior happens when parsing the source data into a Bundle object. Set this      * to<code>false</code> if this is not the desired behavior (e.g. the client code wishes to perform additional      * validation checks between the fullUrl and the resource id).      *      * @param overrideResourceIdWithBundleEntryFullUrl      *           Set this to<code>false</code> to prevent the parser from overriding resource ids with the      *           Bundle.entry.fullUrl (or<code>null</code> to apply the default setting from the {@link #setParserOptions(Object)})      */
DECL|method|setOverrideResourceIdWithBundleEntryFullUrl (Boolean overrideResourceIdWithBundleEntryFullUrl)
specifier|public
name|void
name|setOverrideResourceIdWithBundleEntryFullUrl
parameter_list|(
name|Boolean
name|overrideResourceIdWithBundleEntryFullUrl
parameter_list|)
block|{
name|this
operator|.
name|overrideResourceIdWithBundleEntryFullUrl
operator|=
name|overrideResourceIdWithBundleEntryFullUrl
expr_stmt|;
block|}
DECL|method|isSummaryMode ()
specifier|public
name|Boolean
name|isSummaryMode
parameter_list|()
block|{
return|return
name|summaryMode
return|;
block|}
comment|/**      * If set to<code>true</code> (default is<code>false</code>) only elements marked by the FHIR specification as      * being "summary elements" will be included.      */
DECL|method|setSummaryMode (Boolean summaryMode)
specifier|public
name|void
name|setSummaryMode
parameter_list|(
name|Boolean
name|summaryMode
parameter_list|)
block|{
name|this
operator|.
name|summaryMode
operator|=
name|summaryMode
expr_stmt|;
block|}
DECL|method|isSuppressNarratives ()
specifier|public
name|Boolean
name|isSuppressNarratives
parameter_list|()
block|{
return|return
name|suppressNarratives
return|;
block|}
comment|/**      * If set to<code>true</code> (default is<code>false</code>), narratives will not be included in the encoded      * values.      */
DECL|method|setSuppressNarratives (Boolean suppressNarratives)
specifier|public
name|void
name|setSuppressNarratives
parameter_list|(
name|Boolean
name|suppressNarratives
parameter_list|)
block|{
name|this
operator|.
name|suppressNarratives
operator|=
name|suppressNarratives
expr_stmt|;
block|}
DECL|method|getDontStripVersionsFromReferencesAtPaths ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDontStripVersionsFromReferencesAtPaths
parameter_list|()
block|{
return|return
name|dontStripVersionsFromReferencesAtPaths
return|;
block|}
comment|/**      * If supplied value(s), any resource references at the specified paths will have their      * resource versions encoded instead of being automatically stripped during the encoding      * process. This setting has no effect on the parsing process.      *<p>      * This method provides a finer-grained level of control than {@link #setStripVersionsFromReferences(Boolean)}      * and any paths specified by this method will be encoded even if {@link #setStripVersionsFromReferences(Boolean)}      * has been set to<code>true</code> (which is the default)      *</p>      *      * @param dontStripVersionsFromReferencesAtPaths      *           A collection of paths for which the resource versions will not be removed automatically      *           when serializing, e.g. "Patient.managingOrganization" or "AuditEvent.object.reference". Note that      *           only resource name and field names with dots separating is allowed here (no repetition      *           indicators, FluentPath expressions, etc.). Set to<code>null</code> to use the value      *           set in the {@link #setParserOptions(Object)}      * @see #setStripVersionsFromReferences(Boolean)      */
DECL|method|setDontStripVersionsFromReferencesAtPaths (List<String> dontStripVersionsFromReferencesAtPaths)
specifier|public
name|void
name|setDontStripVersionsFromReferencesAtPaths
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|dontStripVersionsFromReferencesAtPaths
parameter_list|)
block|{
name|this
operator|.
name|dontStripVersionsFromReferencesAtPaths
operator|=
name|dontStripVersionsFromReferencesAtPaths
expr_stmt|;
block|}
block|}
end_class

end_unit

