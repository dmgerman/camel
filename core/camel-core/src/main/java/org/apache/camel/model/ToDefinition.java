begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PropertiesComponent
import|;
end_import

begin_comment
comment|/**  * Sends the message to a static endpoint  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"eip,endpoint,routing"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"to"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|ToDefinition
specifier|public
class|class
name|ToDefinition
extends|extends
name|SendDefinition
argument_list|<
name|ToDefinition
argument_list|>
implements|implements
name|PropertyPlaceholderAware
block|{
annotation|@
name|XmlAttribute
DECL|field|pattern
specifier|private
name|ExchangePattern
name|pattern
decl_stmt|;
DECL|field|readPlaceholders
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|readPlaceholders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|writePlaceholders
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Consumer
argument_list|<
name|String
argument_list|>
argument_list|>
name|writePlaceholders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|ToDefinition ()
specifier|public
name|ToDefinition
parameter_list|()
block|{
name|readPlaceholders
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|this
operator|::
name|getId
argument_list|)
expr_stmt|;
name|readPlaceholders
operator|.
name|put
argument_list|(
literal|"uri"
argument_list|,
name|this
operator|::
name|getUri
argument_list|)
expr_stmt|;
name|writePlaceholders
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|this
operator|::
name|setId
argument_list|)
expr_stmt|;
name|writePlaceholders
operator|.
name|put
argument_list|(
literal|"uri"
argument_list|,
name|this
operator|::
name|setUri
argument_list|)
expr_stmt|;
block|}
DECL|method|ToDefinition (String uri)
specifier|public
name|ToDefinition
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
DECL|method|ToDefinition (Endpoint endpoint)
specifier|public
name|ToDefinition
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setEndpoint
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|ToDefinition (EndpointProducerBuilder endpointDefinition)
specifier|public
name|ToDefinition
parameter_list|(
name|EndpointProducerBuilder
name|endpointDefinition
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setEndpointProducerBuilder
argument_list|(
name|endpointDefinition
argument_list|)
expr_stmt|;
block|}
DECL|method|ToDefinition (String uri, ExchangePattern pattern)
specifier|public
name|ToDefinition
parameter_list|(
name|String
name|uri
parameter_list|,
name|ExchangePattern
name|pattern
parameter_list|)
block|{
name|this
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
DECL|method|ToDefinition (Endpoint endpoint, ExchangePattern pattern)
specifier|public
name|ToDefinition
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|ExchangePattern
name|pattern
parameter_list|)
block|{
name|this
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
DECL|method|ToDefinition (EndpointProducerBuilder endpoint, ExchangePattern pattern)
specifier|public
name|ToDefinition
parameter_list|(
name|EndpointProducerBuilder
name|endpoint
parameter_list|,
name|ExchangePattern
name|pattern
parameter_list|)
block|{
name|this
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getShortName ()
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
return|return
literal|"to"
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"To["
operator|+
name|getLabel
argument_list|()
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|getPattern ()
specifier|public
name|ExchangePattern
name|getPattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
comment|/**      * Sets the optional {@link ExchangePattern} used to invoke this endpoint      */
DECL|method|setPattern (ExchangePattern pattern)
specifier|public
name|void
name|setPattern
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReadPropertyPlaceholderOptions (final CamelContext camelContext)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|getReadPropertyPlaceholderOptions
parameter_list|(
specifier|final
name|CamelContext
name|camelContext
parameter_list|)
block|{
if|if
condition|(
name|getOtherAttributes
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getOtherAttributes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|answer
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|readPlaceholders
argument_list|)
decl_stmt|;
name|getOtherAttributes
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|Constants
operator|.
name|PLACEHOLDER_QNAME
operator|.
name|equals
argument_list|(
name|k
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|v
operator|instanceof
name|String
condition|)
block|{
comment|// enforce a properties component to be created if none existed
name|camelContext
operator|.
name|getPropertiesComponent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// value must be enclosed with placeholder tokens
name|String
name|s
init|=
operator|(
name|String
operator|)
name|v
decl_stmt|;
name|String
name|prefixToken
init|=
name|PropertiesComponent
operator|.
name|PREFIX_TOKEN
decl_stmt|;
name|String
name|suffixToken
init|=
name|PropertiesComponent
operator|.
name|SUFFIX_TOKEN
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|startsWith
argument_list|(
name|prefixToken
argument_list|)
condition|)
block|{
name|s
operator|=
name|prefixToken
operator|+
name|s
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|s
operator|.
name|endsWith
argument_list|(
name|suffixToken
argument_list|)
condition|)
block|{
name|s
operator|=
name|s
operator|+
name|suffixToken
expr_stmt|;
block|}
specifier|final
name|String
name|value
init|=
name|s
decl_stmt|;
name|answer
operator|.
name|put
argument_list|(
name|k
operator|.
name|getLocalPart
argument_list|()
argument_list|,
parameter_list|()
lambda|->
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
else|else
block|{
return|return
name|readPlaceholders
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getWritePropertyPlaceholderOptions (CamelContext camelContext)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Consumer
argument_list|<
name|String
argument_list|>
argument_list|>
name|getWritePropertyPlaceholderOptions
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
return|return
name|writePlaceholders
return|;
block|}
block|}
end_class

end_unit

