begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiPredicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_class
DECL|class|PredicateClause
specifier|public
class|class
name|PredicateClause
parameter_list|<
name|T
parameter_list|>
implements|implements
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
block|{
DECL|field|parent
specifier|private
specifier|final
name|T
name|parent
decl_stmt|;
DECL|field|predicate
specifier|private
name|Predicate
argument_list|<
name|Exchange
argument_list|>
name|predicate
decl_stmt|;
DECL|method|PredicateClause (T parent)
specifier|public
name|PredicateClause
parameter_list|(
name|T
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|predicate
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches (Exchange exchange)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
operator|(
name|predicate
operator|!=
literal|null
operator|)
condition|?
name|predicate
operator|.
name|test
argument_list|(
name|exchange
argument_list|)
else|:
literal|false
return|;
block|}
comment|// *******************************
comment|// Exchange
comment|// *******************************
comment|/**      * Define a {@link org.apache.camel.Predicate} which targets the Exchange.      */
DECL|method|exchange (final Predicate<Exchange> predicate)
specifier|public
name|T
name|exchange
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|Exchange
argument_list|>
name|predicate
parameter_list|)
block|{
name|this
operator|.
name|predicate
operator|=
name|predicate
operator|::
name|test
expr_stmt|;
return|return
name|parent
return|;
block|}
comment|// *******************************
comment|// Message
comment|// *******************************
comment|/**      * Define a {@link org.apache.camel.Predicate} which targets the Exchange In Message.      *           *<blockquote><pre>{@code      * from("direct:aggregate")      *     .choice()      *         .when()      *            .message(m -> m.getBody() != null)      *            .log("Received ${body}")      *     .endChoice()      * }</pre></blockquote>      */
DECL|method|message (final Predicate<Message> predicate)
specifier|public
name|T
name|message
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|Message
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|exchange
argument_list|(
name|e
lambda|->
name|predicate
operator|.
name|test
argument_list|(
name|e
operator|.
name|getIn
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|// *******************************
comment|// Body
comment|// *******************************
comment|/**      * Define a {@link org.apache.camel.Predicate} which targets the Exchange In Body.      *           *<blockquote><pre>{@code      * from("direct:aggregate")      *     .choice()      *         .when()      *            .body(b -> b != null)      *            .log("Received ${body}")      *     .endChoice()      * }</pre></blockquote>      */
DECL|method|body (final Predicate<Object> predicate)
specifier|public
name|T
name|body
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|Object
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|exchange
argument_list|(
name|e
lambda|->
name|predicate
operator|.
name|test
argument_list|(
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Define a {@link org.apache.camel.Predicate} which targets the typed Exchange In Body.      *           *<blockquote><pre>{@code      * from("direct:aggregate")      *     .choice()      *         .when()      *            .body(Long.class, b -> (b& 1) == 0)      *            .log("Received even number ${body}")      *     .endChoice()      * }</pre></blockquote>      */
DECL|method|body (final Class<B> type, final Predicate<B> predicate)
specifier|public
parameter_list|<
name|B
parameter_list|>
name|T
name|body
parameter_list|(
specifier|final
name|Class
argument_list|<
name|B
argument_list|>
name|type
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|B
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|exchange
argument_list|(
name|e
lambda|->
name|predicate
operator|.
name|test
argument_list|(
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Define a {@link org.apache.camel.Predicate} which targets the Exchange In Body and its Headers.      *           *<blockquote><pre>{@code      * from("direct:aggregate")      *     .choice()      *         .when()      *            .body((b, h) -> b != null || h.containsKy("ToProcess"))      *            .log("Received ${body}")      *     .endChoice()      * }</pre></blockquote>      */
DECL|method|body (final BiPredicate<Object, Map<String, Object>> predicate)
specifier|public
name|T
name|body
parameter_list|(
specifier|final
name|BiPredicate
argument_list|<
name|Object
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|exchange
argument_list|(
name|e
lambda|->
name|predicate
operator|.
name|test
argument_list|(
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|,
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Define a {@link org.apache.camel.Predicate} which targets the typed Exchange In Body and its Headers.      *           *<blockquote><pre>{@code      * from("direct:aggregate")      *     .choice()      *         .when()      *            .body(String.class, (b, h) -> b != null&& !b.isEmpty() || h.containsKy("ToProcess"))      *            .log("Received ${body}")      *     .endChoice()      * }</pre></blockquote>      */
DECL|method|body (final Class<B> type, final BiPredicate<B, Map<String, Object>> predicate)
specifier|public
parameter_list|<
name|B
parameter_list|>
name|T
name|body
parameter_list|(
specifier|final
name|Class
argument_list|<
name|B
argument_list|>
name|type
parameter_list|,
specifier|final
name|BiPredicate
argument_list|<
name|B
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|exchange
argument_list|(
name|e
lambda|->
name|predicate
operator|.
name|test
argument_list|(
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|type
argument_list|)
argument_list|,
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

