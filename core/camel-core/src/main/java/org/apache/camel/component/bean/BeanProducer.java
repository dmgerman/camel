begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bean
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchBeanException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultAsyncProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_comment
comment|/**  * Bean {@link org.apache.camel.Producer}  */
end_comment

begin_class
DECL|class|BeanProducer
specifier|public
class|class
name|BeanProducer
extends|extends
name|DefaultAsyncProducer
block|{
DECL|field|processor
specifier|private
specifier|final
name|BeanProcessor
name|processor
decl_stmt|;
DECL|field|beanStarted
specifier|private
name|boolean
name|beanStarted
decl_stmt|;
DECL|method|BeanProducer (BeanEndpoint endpoint, BeanProcessor processor)
specifier|public
name|BeanProducer
parameter_list|(
name|BeanEndpoint
name|endpoint
parameter_list|,
name|BeanProcessor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
name|this
operator|.
name|beanStarted
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange, AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
return|return
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|processor
operator|.
name|getBeanHolder
argument_list|()
operator|instanceof
name|ConstantBeanHolder
condition|)
block|{
try|try
block|{
comment|// Start the bean if it implements Service interface and if cached
comment|// so meant to be reused
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|processor
operator|.
name|getBean
argument_list|()
argument_list|)
expr_stmt|;
name|beanStarted
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchBeanException
name|e
parameter_list|)
block|{             }
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|beanStarted
condition|)
block|{
try|try
block|{
comment|// Stop the bean if it implements Service interface and if cached
comment|// so meant to be reused
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|processor
operator|.
name|getBean
argument_list|()
argument_list|)
expr_stmt|;
name|beanStarted
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchBeanException
name|e
parameter_list|)
block|{             }
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

