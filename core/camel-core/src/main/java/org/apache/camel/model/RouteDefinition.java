begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElementRef
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ErrorHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ShutdownRoute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ShutdownRunningTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilderRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestBindingDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
operator|.
name|errorhandler
operator|.
name|ErrorHandlerReifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|AsEndpointUri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RoutePolicy
import|;
end_import

begin_comment
comment|/**  * A Camel route  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"configuration"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"route"
argument_list|)
annotation|@
name|XmlType
argument_list|(
name|propOrder
operator|=
block|{
literal|"input"
block|,
literal|"inputType"
block|,
literal|"outputType"
block|,
literal|"outputs"
block|,
literal|"routeProperties"
block|}
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|PROPERTY
argument_list|)
comment|// must use XmlAccessType.PROPERTY as there is some custom logic needed to be executed in the setter methods
DECL|class|RouteDefinition
specifier|public
class|class
name|RouteDefinition
extends|extends
name|ProcessorDefinition
argument_list|<
name|RouteDefinition
argument_list|>
block|{
DECL|field|prepared
specifier|private
specifier|final
name|AtomicBoolean
name|prepared
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|input
specifier|private
name|FromDefinition
name|input
decl_stmt|;
DECL|field|outputs
specifier|private
name|List
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|outputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|group
specifier|private
name|String
name|group
decl_stmt|;
DECL|field|streamCache
specifier|private
name|String
name|streamCache
decl_stmt|;
DECL|field|trace
specifier|private
name|String
name|trace
decl_stmt|;
DECL|field|messageHistory
specifier|private
name|String
name|messageHistory
decl_stmt|;
DECL|field|logMask
specifier|private
name|String
name|logMask
decl_stmt|;
DECL|field|handleFault
specifier|private
name|String
name|handleFault
decl_stmt|;
DECL|field|delayer
specifier|private
name|String
name|delayer
decl_stmt|;
DECL|field|autoStartup
specifier|private
name|String
name|autoStartup
decl_stmt|;
DECL|field|startupOrder
specifier|private
name|Integer
name|startupOrder
decl_stmt|;
DECL|field|routePolicies
specifier|private
name|List
argument_list|<
name|RoutePolicy
argument_list|>
name|routePolicies
decl_stmt|;
DECL|field|routePolicyRef
specifier|private
name|String
name|routePolicyRef
decl_stmt|;
DECL|field|shutdownRoute
specifier|private
name|ShutdownRoute
name|shutdownRoute
decl_stmt|;
DECL|field|shutdownRunningTask
specifier|private
name|ShutdownRunningTask
name|shutdownRunningTask
decl_stmt|;
DECL|field|errorHandlerRef
specifier|private
name|String
name|errorHandlerRef
decl_stmt|;
DECL|field|errorHandlerFactory
specifier|private
name|ErrorHandlerFactory
name|errorHandlerFactory
decl_stmt|;
comment|// keep state whether the error handler is context scoped or not
comment|// (will by default be context scoped of no explicit error handler configured)
DECL|field|contextScopedErrorHandler
specifier|private
name|boolean
name|contextScopedErrorHandler
init|=
literal|true
decl_stmt|;
DECL|field|rest
specifier|private
name|Boolean
name|rest
decl_stmt|;
DECL|field|restDefinition
specifier|private
name|RestDefinition
name|restDefinition
decl_stmt|;
DECL|field|restBindingDefinition
specifier|private
name|RestBindingDefinition
name|restBindingDefinition
decl_stmt|;
DECL|field|inputType
specifier|private
name|InputTypeDefinition
name|inputType
decl_stmt|;
DECL|field|outputType
specifier|private
name|OutputTypeDefinition
name|outputType
decl_stmt|;
DECL|field|routeProperties
specifier|private
name|List
argument_list|<
name|PropertyDefinition
argument_list|>
name|routeProperties
decl_stmt|;
DECL|method|RouteDefinition ()
specifier|public
name|RouteDefinition
parameter_list|()
block|{     }
DECL|method|RouteDefinition (@sEndpointUri String uri)
specifier|public
name|RouteDefinition
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|uri
parameter_list|)
block|{
name|from
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
DECL|method|RouteDefinition (Endpoint endpoint)
specifier|public
name|RouteDefinition
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|from
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
comment|/**      * This route is created from the REST DSL.      */
DECL|method|fromRest (@sEndpointUri String uri)
specifier|public
name|void
name|fromRest
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|uri
parameter_list|)
block|{
name|from
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|rest
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Check if the route has been prepared      *      * @return wether the route has been prepared or not      * @see RouteDefinitionHelper#prepareRoute(ModelCamelContext, RouteDefinition)      */
DECL|method|isPrepared ()
specifier|public
name|boolean
name|isPrepared
parameter_list|()
block|{
return|return
name|prepared
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Marks the route definition as prepared.      *<p/>      * This is needed if routes have been created by components such as      *<tt>camel-spring</tt> or<tt>camel-blueprint</tt>.      * Usually they share logic in the<tt>camel-core-xml</tt> module which prepares the routes.      */
DECL|method|markPrepared ()
specifier|public
name|void
name|markPrepared
parameter_list|()
block|{
name|prepared
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Marks the route definition as un-prepared.      *<p/>      * This is needed if routes have been created by components such as      *<tt>camel-scala</tt>. To unset the prepare so the routes can be prepared      * at a later stage when scala has build the routes completely.      */
DECL|method|markUnprepared ()
specifier|public
name|void
name|markUnprepared
parameter_list|()
block|{
name|prepared
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|"Route("
operator|+
name|getId
argument_list|()
operator|+
literal|")["
operator|+
operator|(
name|input
operator|!=
literal|null
condition|?
name|input
else|:
literal|""
operator|)
operator|+
literal|" -> "
operator|+
name|outputs
operator|+
literal|"]"
return|;
block|}
else|else
block|{
return|return
literal|"Route["
operator|+
name|input
operator|+
literal|" -> "
operator|+
name|outputs
operator|+
literal|"]"
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getShortName ()
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
return|return
literal|"route"
return|;
block|}
comment|// Fluent API
comment|// -----------------------------------------------------------------------
comment|/**      * Creates an input to the route      *      * @param uri the from uri      * @return the builder      */
DECL|method|from (@sEndpointUri String uri)
specifier|public
name|RouteDefinition
name|from
parameter_list|(
annotation|@
name|AsEndpointUri
name|String
name|uri
parameter_list|)
block|{
name|setInput
argument_list|(
operator|new
name|FromDefinition
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Creates an input to the route      *      * @param endpoint the from endpoint      * @return the builder      */
DECL|method|from (Endpoint endpoint)
specifier|public
name|RouteDefinition
name|from
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|setInput
argument_list|(
operator|new
name|FromDefinition
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|from (EndpointConsumerBuilder endpoint)
specifier|public
name|RouteDefinition
name|from
parameter_list|(
name|EndpointConsumerBuilder
name|endpoint
parameter_list|)
block|{
name|setInput
argument_list|(
operator|new
name|FromDefinition
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the group name for this route      *      * @param name the group name      * @return the builder      */
DECL|method|group (String name)
specifier|public
name|RouteDefinition
name|group
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|setGroup
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the route group for this route      *      * @param group the route group      * @return the builder      */
DECL|method|routeGroup (String group)
specifier|public
name|RouteDefinition
name|routeGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|setGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the route id for this route      *      * @param id the route id      * @return the builder      */
DECL|method|routeId (String id)
specifier|public
name|RouteDefinition
name|routeId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|hasCustomIdAssigned
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You can only set routeId one time per route."
argument_list|)
throw|;
block|}
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the route description for this route      *      * @param description the route description      * @return the builder      */
DECL|method|routeDescription (String description)
specifier|public
name|RouteDefinition
name|routeDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|DescriptionDefinition
name|desc
init|=
operator|new
name|DescriptionDefinition
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setText
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disable stream caching for this route.      *      * @return the builder      */
DECL|method|noStreamCaching ()
specifier|public
name|RouteDefinition
name|noStreamCaching
parameter_list|()
block|{
name|setStreamCache
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable stream caching for this route.      *      * @return the builder      */
DECL|method|streamCaching ()
specifier|public
name|RouteDefinition
name|streamCaching
parameter_list|()
block|{
name|setStreamCache
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable stream caching for this route.      *      * @param streamCache whether to use stream caching (true or false), the value can be a property placeholder      * @return the builder      */
DECL|method|streamCaching (String streamCache)
specifier|public
name|RouteDefinition
name|streamCaching
parameter_list|(
name|String
name|streamCache
parameter_list|)
block|{
name|setStreamCache
argument_list|(
name|streamCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disable tracing for this route.      *      * @return the builder      */
DECL|method|noTracing ()
specifier|public
name|RouteDefinition
name|noTracing
parameter_list|()
block|{
name|setTrace
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable tracing for this route.      *      * @return the builder      */
DECL|method|tracing ()
specifier|public
name|RouteDefinition
name|tracing
parameter_list|()
block|{
name|setTrace
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable tracing for this route.      *      * @param tracing whether to use tracing (true or false), the value can be a property placeholder      * @return the builder      */
DECL|method|tracing (String tracing)
specifier|public
name|RouteDefinition
name|tracing
parameter_list|(
name|String
name|tracing
parameter_list|)
block|{
name|setTrace
argument_list|(
name|tracing
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable message history for this route.      *      * @return the builder      */
DECL|method|messageHistory ()
specifier|public
name|RouteDefinition
name|messageHistory
parameter_list|()
block|{
name|setMessageHistory
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable message history for this route.      *      * @param messageHistory whether to use message history (true or false), the value can be a property placeholder      * @return the builder      */
DECL|method|messageHistory (String messageHistory)
specifier|public
name|RouteDefinition
name|messageHistory
parameter_list|(
name|String
name|messageHistory
parameter_list|)
block|{
name|setMessageHistory
argument_list|(
name|messageHistory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable security mask for Logging on this route.      *      * @return the builder      */
DECL|method|logMask ()
specifier|public
name|RouteDefinition
name|logMask
parameter_list|()
block|{
name|setLogMask
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether security mask for logging is enabled on this route.      *      * @param logMask whether to enable security mask for Logging (true or false), the value can be a property placeholder      * @return the builder      */
DECL|method|logMask (String logMask)
specifier|public
name|RouteDefinition
name|logMask
parameter_list|(
name|String
name|logMask
parameter_list|)
block|{
name|setLogMask
argument_list|(
name|logMask
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disable message history for this route.      *      * @return the builder      */
DECL|method|noMessageHistory ()
specifier|public
name|RouteDefinition
name|noMessageHistory
parameter_list|()
block|{
name|setMessageHistory
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disable handle fault for this route.      *      * @return the builder      */
DECL|method|noHandleFault ()
specifier|public
name|RouteDefinition
name|noHandleFault
parameter_list|()
block|{
name|setHandleFault
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable handle fault for this route.      *      * @return the builder      */
DECL|method|handleFault ()
specifier|public
name|RouteDefinition
name|handleFault
parameter_list|()
block|{
name|setHandleFault
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disable delayer for this route.      *      * @return the builder      */
DECL|method|noDelayer ()
specifier|public
name|RouteDefinition
name|noDelayer
parameter_list|()
block|{
name|setDelayer
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enable delayer for this route.      *      * @param delay delay in millis      * @return the builder      */
DECL|method|delayer (long delay)
specifier|public
name|RouteDefinition
name|delayer
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|setDelayer
argument_list|(
literal|""
operator|+
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Installs the given<a href="http://camel.apache.org/error-handler.html">error handler</a> builder.      *      * @param errorHandlerBuilder the error handler to be used by default for all child routes      * @return the current builder with the error handler configured      */
DECL|method|errorHandler (ErrorHandlerFactory errorHandlerBuilder)
specifier|public
name|RouteDefinition
name|errorHandler
parameter_list|(
name|ErrorHandlerFactory
name|errorHandlerBuilder
parameter_list|)
block|{
name|setErrorHandlerFactory
argument_list|(
name|errorHandlerBuilder
argument_list|)
expr_stmt|;
comment|// we are now using a route scoped error handler
name|contextScopedErrorHandler
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Disables this route from being auto started when Camel starts.      *      * @return the builder      */
DECL|method|noAutoStartup ()
specifier|public
name|RouteDefinition
name|noAutoStartup
parameter_list|()
block|{
name|setAutoStartup
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the auto startup property on this route.      *      * @param autoStartup whether to auto startup (true or false), the value can be a property placeholder      * @return the builder      */
DECL|method|autoStartup (String autoStartup)
specifier|public
name|RouteDefinition
name|autoStartup
parameter_list|(
name|String
name|autoStartup
parameter_list|)
block|{
name|setAutoStartup
argument_list|(
name|autoStartup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the auto startup property on this route.      *      * @param autoStartup - boolean indicator      * @return the builder      */
DECL|method|autoStartup (boolean autoStartup)
specifier|public
name|RouteDefinition
name|autoStartup
parameter_list|(
name|boolean
name|autoStartup
parameter_list|)
block|{
name|setAutoStartup
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|autoStartup
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures the startup order for this route      *<p/>      * Camel will reorder routes and star them ordered by 0..N where 0 is the lowest number and N the highest number.      * Camel will stop routes in reverse order when its stopping.      *      * @param order the order represented as a number      * @return the builder      */
DECL|method|startupOrder (int order)
specifier|public
name|RouteDefinition
name|startupOrder
parameter_list|(
name|int
name|order
parameter_list|)
block|{
name|setStartupOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures route policies for this route      *      * @param policies the route policies      * @return the builder      */
DECL|method|routePolicy (RoutePolicy... policies)
specifier|public
name|RouteDefinition
name|routePolicy
parameter_list|(
name|RoutePolicy
modifier|...
name|policies
parameter_list|)
block|{
if|if
condition|(
name|routePolicies
operator|==
literal|null
condition|)
block|{
name|routePolicies
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|RoutePolicy
name|policy
range|:
name|policies
control|)
block|{
name|routePolicies
operator|.
name|add
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Configures a route policy for this route      *      * @param routePolicyRef reference to a {@link RoutePolicy} to lookup and use.      *                       You can specify multiple references by separating using comma.      * @return the builder      */
DECL|method|routePolicyRef (String routePolicyRef)
specifier|public
name|RouteDefinition
name|routePolicyRef
parameter_list|(
name|String
name|routePolicyRef
parameter_list|)
block|{
name|setRoutePolicyRef
argument_list|(
name|routePolicyRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures a shutdown route option.      *      * @param shutdownRoute the option to use when shutting down this route      * @return the builder      */
DECL|method|shutdownRoute (ShutdownRoute shutdownRoute)
specifier|public
name|RouteDefinition
name|shutdownRoute
parameter_list|(
name|ShutdownRoute
name|shutdownRoute
parameter_list|)
block|{
name|setShutdownRoute
argument_list|(
name|shutdownRoute
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures a shutdown running task option.      *      * @param shutdownRunningTask the option to use when shutting down and how to act upon running tasks.      * @return the builder      */
DECL|method|shutdownRunningTask (ShutdownRunningTask shutdownRunningTask)
specifier|public
name|RouteDefinition
name|shutdownRunningTask
parameter_list|(
name|ShutdownRunningTask
name|shutdownRunningTask
parameter_list|)
block|{
name|setShutdownRunningTask
argument_list|(
name|shutdownRunningTask
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Declare the expected data type of the input message. If the actual message type is different      * at runtime, camel look for a required {@link org.apache.camel.spi.Transformer} and apply if exists.      * The type name consists of two parts, 'scheme' and 'name' connected with ':'. For Java type 'name'      * is a fully qualified class name. For example {@code java:java.lang.String}, {@code json:ABCOrder}.      *      * @see org.apache.camel.spi.Transformer      *      * @param urn input type URN      * @return the builder      */
DECL|method|inputType (String urn)
specifier|public
name|RouteDefinition
name|inputType
parameter_list|(
name|String
name|urn
parameter_list|)
block|{
name|inputType
operator|=
operator|new
name|InputTypeDefinition
argument_list|()
expr_stmt|;
name|inputType
operator|.
name|setUrn
argument_list|(
name|urn
argument_list|)
expr_stmt|;
name|inputType
operator|.
name|setValidate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Declare the expected data type of the input message with content validation enabled.      * If the actual message type is different at runtime, camel look for a required      * {@link org.apache.camel.spi.Transformer} and apply if exists, and then applies      * {@link org.apache.camel.spi.Validator} as well.      * The type name consists of two parts, 'scheme' and 'name' connected with ':'. For Java type 'name'      * is a fully qualified class name. For example {@code java:java.lang.String}, {@code json:ABCOrder}.      *      * @see org.apache.camel.spi.Transformer      * @see org.apache.camel.spi.Validator      *      * @param urn input type URN      * @return the builder      */
DECL|method|inputTypeWithValidate (String urn)
specifier|public
name|RouteDefinition
name|inputTypeWithValidate
parameter_list|(
name|String
name|urn
parameter_list|)
block|{
name|inputType
operator|=
operator|new
name|InputTypeDefinition
argument_list|()
expr_stmt|;
name|inputType
operator|.
name|setUrn
argument_list|(
name|urn
argument_list|)
expr_stmt|;
name|inputType
operator|.
name|setValidate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Declare the expected data type of the input message by Java class.      * If the actual message type is different at runtime, camel look for a required      * {@link org.apache.camel.spi.Transformer} and apply if exists.      *      * @see org.apache.camel.spi.Transformer      *      * @param clazz Class object of the input type      * @return the builder      */
DECL|method|inputType (Class clazz)
specifier|public
name|RouteDefinition
name|inputType
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
name|inputType
operator|=
operator|new
name|InputTypeDefinition
argument_list|()
expr_stmt|;
name|inputType
operator|.
name|setJavaClass
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|inputType
operator|.
name|setValidate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Declare the expected data type of the input message by Java class with content validation enabled.      * If the actual message type is different at runtime, camel look for a required      * {@link org.apache.camel.spi.Transformer} and apply if exists, and then applies      * {@link org.apache.camel.spi.Validator} as well.      *      * @see org.apache.camel.spi.Transformer      * @see org.apache.camel.spi.Validator      *      * @param clazz Class object of the input type      * @return the builder      */
DECL|method|inputTypeWithValidate (Class clazz)
specifier|public
name|RouteDefinition
name|inputTypeWithValidate
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
name|inputType
operator|=
operator|new
name|InputTypeDefinition
argument_list|()
expr_stmt|;
name|inputType
operator|.
name|setJavaClass
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|inputType
operator|.
name|setValidate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Declare the expected data type of the output message. If the actual message type is different      * at runtime, camel look for a required {@link org.apache.camel.spi.Transformer} and apply if exists.      * The type name consists of two parts, 'scheme' and 'name' connected with ':'. For Java type 'name'      * is a fully qualified class name. For example {@code java:java.lang.String}, {@code json:ABCOrder}.      *      * @see org.apache.camel.spi.Transformer      *      * @param urn output type URN      * @return the builder      */
DECL|method|outputType (String urn)
specifier|public
name|RouteDefinition
name|outputType
parameter_list|(
name|String
name|urn
parameter_list|)
block|{
name|outputType
operator|=
operator|new
name|OutputTypeDefinition
argument_list|()
expr_stmt|;
name|outputType
operator|.
name|setUrn
argument_list|(
name|urn
argument_list|)
expr_stmt|;
name|outputType
operator|.
name|setValidate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Declare the expected data type of the output message with content validation enabled.      * If the actual message type is different at runtime, Camel look for a required      * {@link org.apache.camel.spi.Transformer} and apply if exists, and then applies      * {@link org.apache.camel.spi.Validator} as well.      * The type name consists of two parts, 'scheme' and 'name' connected with ':'. For Java type 'name'      * is a fully qualified class name. For example {@code java:java.lang.String}, {@code json:ABCOrder}.      *       * @see org.apache.camel.spi.Transformer      * @see org.apache.camel.spi.Validator      *      * @param urn output type URN      * @return the builder      */
DECL|method|outputTypeWithValidate (String urn)
specifier|public
name|RouteDefinition
name|outputTypeWithValidate
parameter_list|(
name|String
name|urn
parameter_list|)
block|{
name|outputType
operator|=
operator|new
name|OutputTypeDefinition
argument_list|()
expr_stmt|;
name|outputType
operator|.
name|setUrn
argument_list|(
name|urn
argument_list|)
expr_stmt|;
name|outputType
operator|.
name|setValidate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Declare the expected data type of the output message by Java class.      * If the actual message type is different at runtime, camel look for a required      * {@link org.apache.camel.spi.Transformer} and apply if exists.      *      * @see org.apache.camel.spi.Transformer      *      * @param clazz Class object of the output type      * @return the builder      */
DECL|method|outputType (Class clazz)
specifier|public
name|RouteDefinition
name|outputType
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
name|outputType
operator|=
operator|new
name|OutputTypeDefinition
argument_list|()
expr_stmt|;
name|outputType
operator|.
name|setJavaClass
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|outputType
operator|.
name|setValidate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Declare the expected data type of the ouput message by Java class with content validation enabled.      * If the actual message type is different at runtime, camel look for a required      * {@link org.apache.camel.spi.Transformer} and apply if exists, and then applies      * {@link org.apache.camel.spi.Validator} as well.      *       * @see org.apache.camel.spi.Transformer      * @see org.apache.camel.spi.Validator      * @param clazz Class object of the output type      * @return the builder      */
DECL|method|outputTypeWithValidate (Class clazz)
specifier|public
name|RouteDefinition
name|outputTypeWithValidate
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
name|outputType
operator|=
operator|new
name|OutputTypeDefinition
argument_list|()
expr_stmt|;
name|outputType
operator|.
name|setJavaClass
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|outputType
operator|.
name|setValidate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Adds a custom property on the route.      */
DECL|method|routeProperty (String key, String value)
specifier|public
name|RouteDefinition
name|routeProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|routeProperties
operator|==
literal|null
condition|)
block|{
name|routeProperties
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|PropertyDefinition
name|prop
init|=
operator|new
name|PropertyDefinition
argument_list|()
decl_stmt|;
name|prop
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|routeProperties
operator|.
name|add
argument_list|(
name|prop
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// Properties
comment|// -----------------------------------------------------------------------
DECL|method|getInput ()
specifier|public
name|FromDefinition
name|getInput
parameter_list|()
block|{
return|return
name|input
return|;
block|}
comment|/**      * Input to the route.      */
annotation|@
name|XmlElementRef
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|method|setInput (FromDefinition input)
specifier|public
name|void
name|setInput
parameter_list|(
name|FromDefinition
name|input
parameter_list|)
block|{
comment|// required = false: in rest-dsl you can embed an in-lined route which
comment|// does not have a<from> as its implied to be the rest endpoint
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
block|}
DECL|method|getOutputs ()
specifier|public
name|List
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|getOutputs
parameter_list|()
block|{
return|return
name|outputs
return|;
block|}
comment|/**      * Outputs are processors that determines how messages are processed by this route.      */
annotation|@
name|XmlElementRef
DECL|method|setOutputs (List<ProcessorDefinition<?>> outputs)
specifier|public
name|void
name|setOutputs
parameter_list|(
name|List
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|outputs
parameter_list|)
block|{
name|this
operator|.
name|outputs
operator|=
name|outputs
expr_stmt|;
if|if
condition|(
name|outputs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|output
range|:
name|outputs
control|)
block|{
name|configureChild
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isOutputSupported ()
specifier|public
name|boolean
name|isOutputSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * The group that this route belongs to; could be the name of the RouteBuilder class      * or be explicitly configured in the XML.      *<p/>      * May be null.      */
DECL|method|getGroup ()
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
comment|/**      * The group that this route belongs to; could be the name of the RouteBuilder class      * or be explicitly configured in the XML.      *<p/>      * May be null.      */
annotation|@
name|XmlAttribute
DECL|method|setGroup (String group)
specifier|public
name|void
name|setGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
block|}
comment|/**      * Whether stream caching is enabled on this route.      */
DECL|method|getStreamCache ()
specifier|public
name|String
name|getStreamCache
parameter_list|()
block|{
return|return
name|streamCache
return|;
block|}
comment|/**      * Whether stream caching is enabled on this route.      */
annotation|@
name|XmlAttribute
DECL|method|setStreamCache (String streamCache)
specifier|public
name|void
name|setStreamCache
parameter_list|(
name|String
name|streamCache
parameter_list|)
block|{
name|this
operator|.
name|streamCache
operator|=
name|streamCache
expr_stmt|;
block|}
comment|/**      * Whether tracing is enabled on this route.      */
DECL|method|getTrace ()
specifier|public
name|String
name|getTrace
parameter_list|()
block|{
return|return
name|trace
return|;
block|}
comment|/**      * Whether tracing is enabled on this route.      */
annotation|@
name|XmlAttribute
DECL|method|setTrace (String trace)
specifier|public
name|void
name|setTrace
parameter_list|(
name|String
name|trace
parameter_list|)
block|{
name|this
operator|.
name|trace
operator|=
name|trace
expr_stmt|;
block|}
comment|/**      * Whether message history is enabled on this route.      */
DECL|method|getMessageHistory ()
specifier|public
name|String
name|getMessageHistory
parameter_list|()
block|{
return|return
name|messageHistory
return|;
block|}
comment|/**      * Whether message history is enabled on this route.      */
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|method|setMessageHistory (String messageHistory)
specifier|public
name|void
name|setMessageHistory
parameter_list|(
name|String
name|messageHistory
parameter_list|)
block|{
name|this
operator|.
name|messageHistory
operator|=
name|messageHistory
expr_stmt|;
block|}
comment|/**      * Whether security mask for Logging is enabled on this route.      */
DECL|method|getLogMask ()
specifier|public
name|String
name|getLogMask
parameter_list|()
block|{
return|return
name|logMask
return|;
block|}
comment|/**      * Whether security mask for Logging is enabled on this route.      */
annotation|@
name|XmlAttribute
DECL|method|setLogMask (String logMask)
specifier|public
name|void
name|setLogMask
parameter_list|(
name|String
name|logMask
parameter_list|)
block|{
name|this
operator|.
name|logMask
operator|=
name|logMask
expr_stmt|;
block|}
comment|/**      * Whether handle fault is enabled on this route.      */
DECL|method|getHandleFault ()
specifier|public
name|String
name|getHandleFault
parameter_list|()
block|{
return|return
name|handleFault
return|;
block|}
comment|/**      * Whether handle fault is enabled on this route.      */
annotation|@
name|XmlAttribute
DECL|method|setHandleFault (String handleFault)
specifier|public
name|void
name|setHandleFault
parameter_list|(
name|String
name|handleFault
parameter_list|)
block|{
name|this
operator|.
name|handleFault
operator|=
name|handleFault
expr_stmt|;
block|}
comment|/**      * Whether to slow down processing messages by a given delay in msec.      */
DECL|method|getDelayer ()
specifier|public
name|String
name|getDelayer
parameter_list|()
block|{
return|return
name|delayer
return|;
block|}
comment|/**      * Whether to slow down processing messages by a given delay in msec.      */
annotation|@
name|XmlAttribute
DECL|method|setDelayer (String delayer)
specifier|public
name|void
name|setDelayer
parameter_list|(
name|String
name|delayer
parameter_list|)
block|{
name|this
operator|.
name|delayer
operator|=
name|delayer
expr_stmt|;
block|}
comment|/**      * Whether to auto start this route      */
DECL|method|getAutoStartup ()
specifier|public
name|String
name|getAutoStartup
parameter_list|()
block|{
return|return
name|autoStartup
return|;
block|}
comment|/**      * Whether to auto start this route      */
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|method|setAutoStartup (String autoStartup)
specifier|public
name|void
name|setAutoStartup
parameter_list|(
name|String
name|autoStartup
parameter_list|)
block|{
name|this
operator|.
name|autoStartup
operator|=
name|autoStartup
expr_stmt|;
block|}
comment|/**      * To configure the ordering of the routes being started      */
DECL|method|getStartupOrder ()
specifier|public
name|Integer
name|getStartupOrder
parameter_list|()
block|{
return|return
name|startupOrder
return|;
block|}
comment|/**      * To configure the ordering of the routes being started      */
annotation|@
name|XmlAttribute
DECL|method|setStartupOrder (Integer startupOrder)
specifier|public
name|void
name|setStartupOrder
parameter_list|(
name|Integer
name|startupOrder
parameter_list|)
block|{
name|this
operator|.
name|startupOrder
operator|=
name|startupOrder
expr_stmt|;
block|}
comment|/**      * Sets the bean ref name of the error handler builder to use on this route      */
annotation|@
name|XmlAttribute
DECL|method|setErrorHandlerRef (String errorHandlerRef)
specifier|public
name|void
name|setErrorHandlerRef
parameter_list|(
name|String
name|errorHandlerRef
parameter_list|)
block|{
name|this
operator|.
name|errorHandlerRef
operator|=
name|errorHandlerRef
expr_stmt|;
comment|// we use an specific error handler ref (from Spring DSL) then wrap that
comment|// with a error handler build ref so Camel knows its not just the default one
name|setErrorHandlerFactory
argument_list|(
operator|new
name|ErrorHandlerBuilderRef
argument_list|(
name|errorHandlerRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the bean ref name of the error handler builder to use on this route      */
DECL|method|getErrorHandlerRef ()
specifier|public
name|String
name|getErrorHandlerRef
parameter_list|()
block|{
return|return
name|errorHandlerRef
return|;
block|}
comment|/**      * Sets the error handler if one is not already set      */
DECL|method|setErrorHandlerFactoryIfNull (ErrorHandlerFactory errorHandlerFactory)
specifier|public
name|void
name|setErrorHandlerFactoryIfNull
parameter_list|(
name|ErrorHandlerFactory
name|errorHandlerFactory
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|errorHandlerFactory
operator|==
literal|null
condition|)
block|{
name|setErrorHandlerFactory
argument_list|(
name|errorHandlerFactory
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Reference to custom {@link org.apache.camel.spi.RoutePolicy} to use by the route.      * Multiple policies can be configured by separating values using comma.      */
annotation|@
name|XmlAttribute
DECL|method|setRoutePolicyRef (String routePolicyRef)
specifier|public
name|void
name|setRoutePolicyRef
parameter_list|(
name|String
name|routePolicyRef
parameter_list|)
block|{
name|this
operator|.
name|routePolicyRef
operator|=
name|routePolicyRef
expr_stmt|;
block|}
comment|/**      * Reference to custom {@link org.apache.camel.spi.RoutePolicy} to use by the route.      * Multiple policies can be configured by separating values using comma.      */
DECL|method|getRoutePolicyRef ()
specifier|public
name|String
name|getRoutePolicyRef
parameter_list|()
block|{
return|return
name|routePolicyRef
return|;
block|}
DECL|method|getRoutePolicies ()
specifier|public
name|List
argument_list|<
name|RoutePolicy
argument_list|>
name|getRoutePolicies
parameter_list|()
block|{
return|return
name|routePolicies
return|;
block|}
annotation|@
name|XmlTransient
DECL|method|setRoutePolicies (List<RoutePolicy> routePolicies)
specifier|public
name|void
name|setRoutePolicies
parameter_list|(
name|List
argument_list|<
name|RoutePolicy
argument_list|>
name|routePolicies
parameter_list|)
block|{
name|this
operator|.
name|routePolicies
operator|=
name|routePolicies
expr_stmt|;
block|}
DECL|method|getShutdownRoute ()
specifier|public
name|ShutdownRoute
name|getShutdownRoute
parameter_list|()
block|{
return|return
name|shutdownRoute
return|;
block|}
comment|/**      * To control how to shutdown the route.      */
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"Default"
argument_list|)
DECL|method|setShutdownRoute (ShutdownRoute shutdownRoute)
specifier|public
name|void
name|setShutdownRoute
parameter_list|(
name|ShutdownRoute
name|shutdownRoute
parameter_list|)
block|{
name|this
operator|.
name|shutdownRoute
operator|=
name|shutdownRoute
expr_stmt|;
block|}
comment|/**      * To control how to shutdown the route.      */
DECL|method|getShutdownRunningTask ()
specifier|public
name|ShutdownRunningTask
name|getShutdownRunningTask
parameter_list|()
block|{
return|return
name|shutdownRunningTask
return|;
block|}
comment|/**      * To control how to shutdown the route.      */
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"CompleteCurrentTaskOnly"
argument_list|)
DECL|method|setShutdownRunningTask (ShutdownRunningTask shutdownRunningTask)
specifier|public
name|void
name|setShutdownRunningTask
parameter_list|(
name|ShutdownRunningTask
name|shutdownRunningTask
parameter_list|)
block|{
name|this
operator|.
name|shutdownRunningTask
operator|=
name|shutdownRunningTask
expr_stmt|;
block|}
DECL|method|createErrorHandlerBuilder ()
specifier|private
name|ErrorHandlerFactory
name|createErrorHandlerBuilder
parameter_list|()
block|{
if|if
condition|(
name|errorHandlerRef
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ErrorHandlerBuilderRef
argument_list|(
name|errorHandlerRef
argument_list|)
return|;
block|}
comment|// return a reference to the default error handler
return|return
operator|new
name|ErrorHandlerBuilderRef
argument_list|(
name|ErrorHandlerReifier
operator|.
name|DEFAULT_ERROR_HANDLER_BUILDER
argument_list|)
return|;
block|}
annotation|@
name|XmlTransient
DECL|method|getErrorHandlerFactory ()
specifier|public
name|ErrorHandlerFactory
name|getErrorHandlerFactory
parameter_list|()
block|{
if|if
condition|(
name|errorHandlerFactory
operator|==
literal|null
condition|)
block|{
name|errorHandlerFactory
operator|=
name|createErrorHandlerBuilder
argument_list|()
expr_stmt|;
block|}
return|return
name|errorHandlerFactory
return|;
block|}
comment|/**      * Sets the error handler to use with processors created by this builder      */
DECL|method|setErrorHandlerFactory (ErrorHandlerFactory errorHandlerFactory)
specifier|public
name|void
name|setErrorHandlerFactory
parameter_list|(
name|ErrorHandlerFactory
name|errorHandlerFactory
parameter_list|)
block|{
name|this
operator|.
name|errorHandlerFactory
operator|=
name|errorHandlerFactory
expr_stmt|;
block|}
annotation|@
name|XmlAttribute
DECL|method|isRest ()
specifier|public
name|Boolean
name|isRest
parameter_list|()
block|{
return|return
name|rest
return|;
block|}
DECL|method|getRestDefinition ()
specifier|public
name|RestDefinition
name|getRestDefinition
parameter_list|()
block|{
return|return
name|restDefinition
return|;
block|}
annotation|@
name|XmlTransient
DECL|method|setRestDefinition (RestDefinition restDefinition)
specifier|public
name|void
name|setRestDefinition
parameter_list|(
name|RestDefinition
name|restDefinition
parameter_list|)
block|{
name|this
operator|.
name|restDefinition
operator|=
name|restDefinition
expr_stmt|;
block|}
DECL|method|getRestBindingDefinition ()
specifier|public
name|RestBindingDefinition
name|getRestBindingDefinition
parameter_list|()
block|{
return|return
name|restBindingDefinition
return|;
block|}
annotation|@
name|XmlTransient
DECL|method|setRestBindingDefinition (RestBindingDefinition restBindingDefinition)
specifier|public
name|void
name|setRestBindingDefinition
parameter_list|(
name|RestBindingDefinition
name|restBindingDefinition
parameter_list|)
block|{
name|this
operator|.
name|restBindingDefinition
operator|=
name|restBindingDefinition
expr_stmt|;
block|}
DECL|method|isContextScopedErrorHandler ()
specifier|public
name|boolean
name|isContextScopedErrorHandler
parameter_list|()
block|{
return|return
name|contextScopedErrorHandler
return|;
block|}
annotation|@
name|XmlElementRef
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|method|setInputType (InputTypeDefinition inputType)
specifier|public
name|void
name|setInputType
parameter_list|(
name|InputTypeDefinition
name|inputType
parameter_list|)
block|{
name|this
operator|.
name|inputType
operator|=
name|inputType
expr_stmt|;
block|}
DECL|method|getInputType ()
specifier|public
name|InputTypeDefinition
name|getInputType
parameter_list|()
block|{
return|return
name|this
operator|.
name|inputType
return|;
block|}
annotation|@
name|XmlElementRef
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|method|setOutputType (OutputTypeDefinition outputType)
specifier|public
name|void
name|setOutputType
parameter_list|(
name|OutputTypeDefinition
name|outputType
parameter_list|)
block|{
name|this
operator|.
name|outputType
operator|=
name|outputType
expr_stmt|;
block|}
DECL|method|getOutputType ()
specifier|public
name|OutputTypeDefinition
name|getOutputType
parameter_list|()
block|{
return|return
name|this
operator|.
name|outputType
return|;
block|}
DECL|method|getRouteProperties ()
specifier|public
name|List
argument_list|<
name|PropertyDefinition
argument_list|>
name|getRouteProperties
parameter_list|()
block|{
return|return
name|routeProperties
return|;
block|}
comment|/**      * To set metadata as properties on the route.      */
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"routeProperty"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|method|setRouteProperties (List<PropertyDefinition> routeProperties)
specifier|public
name|void
name|setRouteProperties
parameter_list|(
name|List
argument_list|<
name|PropertyDefinition
argument_list|>
name|routeProperties
parameter_list|)
block|{
name|this
operator|.
name|routeProperties
operator|=
name|routeProperties
expr_stmt|;
block|}
comment|// ****************************
comment|// Static helpers
comment|// ****************************
DECL|method|fromUri (String uri)
specifier|public
specifier|static
name|RouteDefinition
name|fromUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
operator|new
name|RouteDefinition
argument_list|()
operator|.
name|from
argument_list|(
name|uri
argument_list|)
return|;
block|}
DECL|method|fromEndpoint (Endpoint endpoint)
specifier|public
specifier|static
name|RouteDefinition
name|fromEndpoint
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
return|return
operator|new
name|RouteDefinition
argument_list|()
operator|.
name|from
argument_list|(
name|endpoint
argument_list|)
return|;
block|}
block|}
end_class

end_unit

