begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.simple
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoTypeConversionAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|MethodCallExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExchangeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExpressionAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|MessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|processor
operator|.
name|DefaultExchangeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|OgnlHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|SkipIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_comment
comment|/**  * Expression builder used by the simple language.  */
end_comment

begin_class
DECL|class|SimpleExpressionBuilder
specifier|public
specifier|final
class|class
name|SimpleExpressionBuilder
block|{
DECL|field|OFFSET_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|OFFSET_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([+-])([^+-]+)"
argument_list|)
decl_stmt|;
DECL|method|SimpleExpressionBuilder ()
specifier|private
name|SimpleExpressionBuilder
parameter_list|()
block|{     }
comment|/**      * Returns the expression for the exchanges inbound message header invoking methods defined      * in a simple OGNL notation      *      * @param ognl  methods to invoke on the header in a simple OGNL syntax      */
DECL|method|headersOgnlExpression (final String ognl)
specifier|public
specifier|static
name|Expression
name|headersOgnlExpression
parameter_list|(
specifier|final
name|String
name|ognl
parameter_list|)
block|{
return|return
operator|new
name|KeyedOgnlExpressionAdapter
argument_list|(
name|ognl
argument_list|,
literal|"headerOgnl("
operator|+
name|ognl
operator|+
literal|")"
argument_list|,
operator|new
name|KeyedOgnlExpressionAdapter
operator|.
name|KeyedEntityRetrievalStrategy
argument_list|()
block|{
specifier|public
name|Object
name|getKeyedEntity
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|String
name|text
init|=
name|ExpressionBuilder
operator|.
name|simpleExpression
argument_list|(
name|key
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|text
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Returns the message history (including exchange details or not)      */
DECL|method|messageHistoryExpression (final boolean detailed)
specifier|public
specifier|static
name|Expression
name|messageHistoryExpression
parameter_list|(
specifier|final
name|boolean
name|detailed
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|private
name|ExchangeFormatter
name|formatter
decl_stmt|;
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|ExchangeFormatter
name|ef
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|detailed
condition|)
block|{
comment|// use the exchange formatter to log exchange details
name|ef
operator|=
name|getOrCreateExchangeFormatter
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|MessageHelper
operator|.
name|dumpMessageHistoryStacktrace
argument_list|(
name|exchange
argument_list|,
name|ef
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|ExchangeFormatter
name|getOrCreateExchangeFormatter
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
if|if
condition|(
name|formatter
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|ExchangeFormatter
argument_list|>
name|formatters
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByType
argument_list|(
name|ExchangeFormatter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatters
operator|!=
literal|null
operator|&&
name|formatters
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|formatter
operator|=
name|formatters
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// setup exchange formatter to be used for message history dump
name|DefaultExchangeFormatter
name|def
init|=
operator|new
name|DefaultExchangeFormatter
argument_list|()
decl_stmt|;
name|def
operator|.
name|setShowExchangeId
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|def
operator|.
name|setMultiline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|def
operator|.
name|setShowHeaders
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|def
operator|.
name|setStyle
argument_list|(
name|DefaultExchangeFormatter
operator|.
name|OutputStyle
operator|.
name|Fixed
argument_list|)
expr_stmt|;
try|try
block|{
name|Integer
name|maxChars
init|=
name|CamelContextHelper
operator|.
name|parseInteger
argument_list|(
name|camelContext
argument_list|,
name|camelContext
operator|.
name|getGlobalOption
argument_list|(
name|Exchange
operator|.
name|LOG_DEBUG_BODY_MAX_CHARS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxChars
operator|!=
literal|null
condition|)
block|{
name|def
operator|.
name|setMaxChars
argument_list|(
name|maxChars
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|formatter
operator|=
name|def
expr_stmt|;
block|}
block|}
return|return
name|formatter
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"messageHistory("
operator|+
name|detailed
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an iterator to collate (iterate) the given expression      */
DECL|method|collateExpression (final String expression, final int group)
specifier|public
specifier|static
name|Expression
name|collateExpression
parameter_list|(
specifier|final
name|String
name|expression
parameter_list|,
specifier|final
name|int
name|group
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// use simple language
name|Expression
name|exp
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolveLanguage
argument_list|(
literal|"simple"
argument_list|)
operator|.
name|createExpression
argument_list|(
name|expression
argument_list|)
decl_stmt|;
return|return
name|ExpressionBuilder
operator|.
name|groupIteratorExpression
argument_list|(
name|exp
argument_list|,
literal|null
argument_list|,
literal|""
operator|+
name|group
argument_list|,
literal|false
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"collate("
operator|+
name|expression
operator|+
literal|","
operator|+
name|group
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an iterator to skip (iterate) the given expression      */
DECL|method|skipExpression (final String expression, final int number)
specifier|public
specifier|static
name|Expression
name|skipExpression
parameter_list|(
specifier|final
name|String
name|expression
parameter_list|,
specifier|final
name|int
name|number
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// use simple language
name|Expression
name|exp
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolveLanguage
argument_list|(
literal|"simple"
argument_list|)
operator|.
name|createExpression
argument_list|(
name|expression
argument_list|)
decl_stmt|;
return|return
name|skipIteratorExpression
argument_list|(
name|exp
argument_list|,
name|number
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"skip("
operator|+
name|expression
operator|+
literal|","
operator|+
name|number
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns a random number between min and max (exclusive)      */
DECL|method|randomExpression (final String min, final String max)
specifier|public
specifier|static
name|Expression
name|randomExpression
parameter_list|(
specifier|final
name|String
name|min
parameter_list|,
specifier|final
name|String
name|max
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|int
name|num1
init|=
name|ExpressionBuilder
operator|.
name|simpleExpression
argument_list|(
name|min
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|num2
init|=
name|ExpressionBuilder
operator|.
name|simpleExpression
argument_list|(
name|max
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|randomNum
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|num2
operator|-
name|num1
argument_list|)
operator|+
name|num1
decl_stmt|;
return|return
name|randomNum
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"random("
operator|+
name|min
operator|+
literal|","
operator|+
name|max
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns a random number between 0 and max (exclusive)      */
DECL|method|randomExpression (final int max)
specifier|public
specifier|static
name|Expression
name|randomExpression
parameter_list|(
specifier|final
name|int
name|max
parameter_list|)
block|{
return|return
name|randomExpression
argument_list|(
literal|0
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**      * Returns a random number between min and max (exclusive)      */
DECL|method|randomExpression (final int min, final int max)
specifier|public
specifier|static
name|Expression
name|randomExpression
parameter_list|(
specifier|final
name|int
name|min
parameter_list|,
specifier|final
name|int
name|max
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|randomNum
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|max
operator|-
name|min
argument_list|)
operator|+
name|min
decl_stmt|;
return|return
name|randomNum
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"random("
operator|+
name|min
operator|+
literal|","
operator|+
name|max
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileNameExpression ()
specifier|public
specifier|static
name|Expression
name|fileNameExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:name"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileOnlyNameExpression ()
specifier|public
specifier|static
name|Expression
name|fileOnlyNameExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|answer
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME_ONLY
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|answer
operator|=
name|FileUtil
operator|.
name|stripPath
argument_list|(
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:onlyname"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileNameNoExtensionExpression ()
specifier|public
specifier|static
name|Expression
name|fileNameNoExtensionExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|name
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|FileUtil
operator|.
name|stripExt
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:name.noext"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileNameNoExtensionSingleExpression ()
specifier|public
specifier|static
name|Expression
name|fileNameNoExtensionSingleExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|name
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|FileUtil
operator|.
name|stripExt
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:name.noext.single"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileOnlyNameNoExtensionExpression ()
specifier|public
specifier|static
name|Expression
name|fileOnlyNameNoExtensionExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|name
init|=
name|fileOnlyNameExpression
argument_list|()
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|FileUtil
operator|.
name|stripExt
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:onlyname.noext"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileOnlyNameNoExtensionSingleExpression ()
specifier|public
specifier|static
name|Expression
name|fileOnlyNameNoExtensionSingleExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|name
init|=
name|fileOnlyNameExpression
argument_list|()
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|FileUtil
operator|.
name|stripExt
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:onlyname.noext.single"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileExtensionExpression ()
specifier|public
specifier|static
name|Expression
name|fileExtensionExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|name
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|FileUtil
operator|.
name|onlyExt
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:ext"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileExtensionSingleExpression ()
specifier|public
specifier|static
name|Expression
name|fileExtensionSingleExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|name
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|FileUtil
operator|.
name|onlyExt
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:ext.single"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileParentExpression ()
specifier|public
specifier|static
name|Expression
name|fileParentExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"CamelFileParent"
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:parent"
return|;
block|}
block|}
return|;
block|}
DECL|method|filePathExpression ()
specifier|public
specifier|static
name|Expression
name|filePathExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"CamelFilePath"
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:path"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileAbsolutePathExpression ()
specifier|public
specifier|static
name|Expression
name|fileAbsolutePathExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"CamelFileAbsolutePath"
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:absolute.path"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileAbsoluteExpression ()
specifier|public
specifier|static
name|Expression
name|fileAbsoluteExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"CamelFileAbsolute"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:absolute"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileSizeExpression ()
specifier|public
specifier|static
name|Expression
name|fileSizeExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LENGTH
argument_list|,
name|Long
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:length"
return|;
block|}
block|}
return|;
block|}
DECL|method|fileLastModifiedExpression ()
specifier|public
specifier|static
name|Expression
name|fileLastModifiedExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LAST_MODIFIED
argument_list|,
name|Long
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"file:modified"
return|;
block|}
block|}
return|;
block|}
DECL|method|dateExpression (final String command)
specifier|public
specifier|static
name|Expression
name|dateExpression
parameter_list|(
specifier|final
name|String
name|command
parameter_list|)
block|{
return|return
name|dateExpression
argument_list|(
name|command
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|dateExpression (final String command, final String pattern)
specifier|public
specifier|static
name|Expression
name|dateExpression
parameter_list|(
specifier|final
name|String
name|command
parameter_list|,
specifier|final
name|String
name|pattern
parameter_list|)
block|{
return|return
name|dateExpression
argument_list|(
name|command
argument_list|,
literal|null
argument_list|,
name|pattern
argument_list|)
return|;
block|}
DECL|method|dateExpression (final String commandWithOffsets, final String timezone, final String pattern)
specifier|public
specifier|static
name|Expression
name|dateExpression
parameter_list|(
specifier|final
name|String
name|commandWithOffsets
parameter_list|,
specifier|final
name|String
name|timezone
parameter_list|,
specifier|final
name|String
name|pattern
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// Capture optional time offsets
name|String
name|command
init|=
name|commandWithOffsets
operator|.
name|split
argument_list|(
literal|"[+-]"
argument_list|,
literal|2
argument_list|)
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|offsets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Matcher
name|offsetMatcher
init|=
name|OFFSET_PATTERN
operator|.
name|matcher
argument_list|(
name|commandWithOffsets
argument_list|)
decl_stmt|;
while|while
condition|(
name|offsetMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
try|try
block|{
name|long
name|value
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|long
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|offsetMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|offsets
operator|.
name|add
argument_list|(
name|offsetMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"+"
argument_list|)
condition|?
name|value
else|:
operator|-
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoTypeConversionAvailableException
name|e
parameter_list|)
block|{
throw|throw
name|CamelExecutionException
operator|.
name|wrapCamelExecutionException
argument_list|(
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|Date
name|date
decl_stmt|;
if|if
condition|(
literal|"now"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|date
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"header."
argument_list|)
operator|||
name|command
operator|.
name|startsWith
argument_list|(
literal|"in.header."
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|command
operator|.
name|substring
argument_list|(
name|command
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|date
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|key
argument_list|,
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find java.util.Date object at command: "
operator|+
name|command
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"out.header."
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|command
operator|.
name|substring
argument_list|(
name|command
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|date
operator|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|key
argument_list|,
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find java.util.Date object at command: "
operator|+
name|command
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"exchangeProperty."
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|command
operator|.
name|substring
argument_list|(
name|command
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|date
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|key
argument_list|,
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find java.util.Date object at command: "
operator|+
name|command
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|Long
name|num
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LAST_MODIFIED
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|!=
literal|null
operator|&&
name|num
operator|>
literal|0
condition|)
block|{
name|date
operator|=
operator|new
name|Date
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|date
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LAST_MODIFIED
argument_list|,
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot find "
operator|+
name|Exchange
operator|.
name|FILE_LAST_MODIFIED
operator|+
literal|" header at command: "
operator|+
name|command
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Command not supported for dateExpression: "
operator|+
name|command
argument_list|)
throw|;
block|}
comment|// Apply offsets
name|long
name|dateAsLong
init|=
name|date
operator|.
name|getTime
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|offset
range|:
name|offsets
control|)
block|{
name|dateAsLong
operator|+=
name|offset
expr_stmt|;
block|}
name|date
operator|=
operator|new
name|Date
argument_list|(
name|dateAsLong
argument_list|)
expr_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
operator|&&
operator|!
name|pattern
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|timezone
operator|!=
literal|null
operator|&&
operator|!
name|timezone
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|df
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
name|timezone
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|df
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|date
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"date("
operator|+
name|commandWithOffsets
operator|+
literal|":"
operator|+
name|pattern
operator|+
literal|":"
operator|+
name|timezone
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
DECL|method|skipIteratorExpression (final Expression expression, final int skip)
specifier|public
specifier|static
name|Expression
name|skipIteratorExpression
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|,
specifier|final
name|int
name|skip
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// evaluate expression as iterator
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Iterator
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|it
argument_list|,
literal|"expression: "
operator|+
name|expression
operator|+
literal|" evaluated on "
operator|+
name|exchange
operator|+
literal|" must return an java.util.Iterator"
argument_list|)
expr_stmt|;
return|return
operator|new
name|SkipIterator
argument_list|(
name|it
argument_list|,
name|skip
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"skip "
operator|+
name|expression
operator|+
literal|" "
operator|+
name|skip
operator|+
literal|" times"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the {@code null} value      */
DECL|method|nullExpression ()
specifier|public
specifier|static
name|Expression
name|nullExpression
parameter_list|()
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"null"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges inbound message body converted      * to the given type and invoking methods on the converted body defined in a simple OGNL notation      */
DECL|method|mandatoryBodyOgnlExpression (final String name, final String ognl)
specifier|public
specifier|static
name|Expression
name|mandatoryBodyOgnlExpression
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|ognl
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|text
init|=
name|ExpressionBuilder
operator|.
name|simpleExpression
argument_list|(
name|name
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
try|try
block|{
name|type
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|CamelExecutionException
operator|.
name|wrapCamelExecutionException
argument_list|(
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Object
name|body
decl_stmt|;
try|try
block|{
name|body
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
name|CamelExecutionException
operator|.
name|wrapCamelExecutionException
argument_list|(
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// ognl is able to evaluate method name if it contains nested functions
comment|// so we should not eager evaluate ognl as a string
name|MethodCallExpression
name|call
init|=
operator|new
name|MethodCallExpression
argument_list|(
name|exchange
argument_list|,
name|ognl
argument_list|)
decl_stmt|;
comment|// set the instance to use
name|call
operator|.
name|setInstance
argument_list|(
name|body
argument_list|)
expr_stmt|;
return|return
name|call
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"mandatoryBodyAs["
operator|+
name|name
operator|+
literal|"]("
operator|+
name|ognl
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges inbound message body converted      * to the given type      */
DECL|method|mandatoryBodyExpression (final String name)
specifier|public
specifier|static
name|Expression
name|mandatoryBodyExpression
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|text
init|=
name|ExpressionBuilder
operator|.
name|simpleExpression
argument_list|(
name|name
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
try|try
block|{
name|type
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|CamelExecutionException
operator|.
name|wrapCamelExecutionException
argument_list|(
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|type
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
name|CamelExecutionException
operator|.
name|wrapCamelExecutionException
argument_list|(
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"mandatoryBodyAs["
operator|+
name|name
operator|+
literal|"]"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges inbound message body converted      * to the given type and invoking methods on the converted body defined in a simple OGNL notation      */
DECL|method|bodyOgnlExpression (final String name, final String ognl)
specifier|public
specifier|static
name|Expression
name|bodyOgnlExpression
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|ognl
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|text
init|=
name|ExpressionBuilder
operator|.
name|simpleExpression
argument_list|(
name|name
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
try|try
block|{
name|type
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|CamelExecutionException
operator|.
name|wrapCamelExecutionException
argument_list|(
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
comment|// ognl is able to evaluate method name if it contains nested functions
comment|// so we should not eager evaluate ognl as a string
name|MethodCallExpression
name|call
init|=
operator|new
name|MethodCallExpression
argument_list|(
name|exchange
argument_list|,
name|ognl
argument_list|)
decl_stmt|;
comment|// set the instance to use
name|call
operator|.
name|setInstance
argument_list|(
name|body
argument_list|)
expr_stmt|;
return|return
name|call
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"bodyOgnlAs["
operator|+
name|name
operator|+
literal|"]("
operator|+
name|ognl
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchange invoking methods defined      * in a simple OGNL notation      *      * @param ognl  methods to invoke on the exchange in a simple OGNL syntax      */
DECL|method|exchangeOgnlExpression (final String ognl)
specifier|public
specifier|static
name|Expression
name|exchangeOgnlExpression
parameter_list|(
specifier|final
name|String
name|ognl
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// ognl is able to evaluate method name if it contains nested functions
comment|// so we should not eager evaluate ognl as a string
return|return
operator|new
name|MethodCallExpression
argument_list|(
name|exchange
argument_list|,
name|ognl
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"exchangeOgnl("
operator|+
name|ognl
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges camelContext invoking methods defined      * in a simple OGNL notation      *      * @param ognl  methods to invoke on the context in a simple OGNL syntax      */
DECL|method|camelContextOgnlExpression (final String ognl)
specifier|public
specifier|static
name|Expression
name|camelContextOgnlExpression
parameter_list|(
specifier|final
name|String
name|ognl
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|CamelContext
name|context
init|=
name|exchange
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// ognl is able to evaluate method name if it contains nested functions
comment|// so we should not eager evaluate ognl as a string
return|return
operator|new
name|MethodCallExpression
argument_list|(
name|context
argument_list|,
name|ognl
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"camelContextOgnl("
operator|+
name|ognl
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the expression for the exchanges inbound message body invoking methods defined      * in a simple OGNL notation      *      * @param ognl  methods to invoke on the body in a simple OGNL syntax      */
DECL|method|bodyOgnlExpression (final String ognl)
specifier|public
specifier|static
name|Expression
name|bodyOgnlExpression
parameter_list|(
specifier|final
name|String
name|ognl
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// ognl is able to evaluate method name if it contains nested functions
comment|// so we should not eager evaluate ognl as a string
return|return
operator|new
name|MethodCallExpression
argument_list|(
name|body
argument_list|,
name|ognl
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"bodyOgnl("
operator|+
name|ognl
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression that caches the evaluation of another expression      * and returns the cached value, to avoid re-evaluating the expression.      *      * @param expression  the target expression to cache      * @return the cached value      */
DECL|method|cacheExpression (final Expression expression)
specifier|public
specifier|static
name|Expression
name|cacheExpression
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|cache
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|answer
init|=
name|cache
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|cache
operator|.
name|set
argument_list|(
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|expression
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for a type value      *      * @param name the type name      * @return an expression object which will return the type value      */
DECL|method|typeExpression (final String name)
specifier|public
specifier|static
name|Expression
name|typeExpression
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// it may refer to a class type
name|String
name|text
init|=
name|ExpressionBuilder
operator|.
name|simpleExpression
argument_list|(
name|name
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
return|;
block|}
name|int
name|pos
init|=
name|text
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
name|String
name|before
init|=
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|String
name|after
init|=
name|text
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|type
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
name|before
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|ObjectHelper
operator|.
name|lookupConstantFieldValue
argument_list|(
name|type
argument_list|,
name|after
argument_list|)
return|;
block|}
block|}
throw|throw
name|CamelExecutionException
operator|.
name|wrapCamelExecutionException
argument_list|(
name|exchange
argument_list|,
operator|new
name|ClassNotFoundException
argument_list|(
literal|"Cannot find type "
operator|+
name|text
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"type:"
operator|+
name|name
return|;
block|}
block|}
return|;
block|}
comment|/**      * Returns an expression for the property value of exchange with the given name invoking methods defined      * in a simple OGNL notation      *      * @param ognl  methods to invoke on the property in a simple OGNL syntax      */
DECL|method|propertyOgnlExpression (final String ognl)
specifier|public
specifier|static
name|Expression
name|propertyOgnlExpression
parameter_list|(
specifier|final
name|String
name|ognl
parameter_list|)
block|{
return|return
operator|new
name|KeyedOgnlExpressionAdapter
argument_list|(
name|ognl
argument_list|,
literal|"propertyOgnl("
operator|+
name|ognl
operator|+
literal|")"
argument_list|,
operator|new
name|KeyedOgnlExpressionAdapter
operator|.
name|KeyedEntityRetrievalStrategy
argument_list|()
block|{
specifier|public
name|Object
name|getKeyedEntity
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|String
name|text
init|=
name|ExpressionBuilder
operator|.
name|simpleExpression
argument_list|(
name|key
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|exchange
operator|.
name|getProperty
argument_list|(
name|text
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Returns the expression for the exchanges exception invoking methods defined      * in a simple OGNL notation      *      * @param ognl  methods to invoke on the body in a simple OGNL syntax      */
DECL|method|exchangeExceptionOgnlExpression (final String ognl)
specifier|public
specifier|static
name|Expression
name|exchangeExceptionOgnlExpression
parameter_list|(
specifier|final
name|String
name|ognl
parameter_list|)
block|{
return|return
operator|new
name|ExpressionAdapter
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|exception
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|exception
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// ognl is able to evaluate method name if it contains nested functions
comment|// so we should not eager evaluate ognl as a string
return|return
operator|new
name|MethodCallExpression
argument_list|(
name|exception
argument_list|,
name|ognl
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"exchangeExceptionOgnl("
operator|+
name|ognl
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Expression adapter for OGNL expression from Message Header or Exchange property      */
DECL|class|KeyedOgnlExpressionAdapter
specifier|public
specifier|static
class|class
name|KeyedOgnlExpressionAdapter
extends|extends
name|ExpressionAdapter
block|{
DECL|field|ognl
specifier|private
specifier|final
name|String
name|ognl
decl_stmt|;
DECL|field|toStringValue
specifier|private
specifier|final
name|String
name|toStringValue
decl_stmt|;
DECL|field|keyedEntityRetrievalStrategy
specifier|private
specifier|final
name|KeyedEntityRetrievalStrategy
name|keyedEntityRetrievalStrategy
decl_stmt|;
DECL|method|KeyedOgnlExpressionAdapter (String ognl, String toStringValue, KeyedEntityRetrievalStrategy keyedEntityRetrievalStrategy)
name|KeyedOgnlExpressionAdapter
parameter_list|(
name|String
name|ognl
parameter_list|,
name|String
name|toStringValue
parameter_list|,
name|KeyedEntityRetrievalStrategy
name|keyedEntityRetrievalStrategy
parameter_list|)
block|{
name|this
operator|.
name|ognl
operator|=
name|ognl
expr_stmt|;
name|this
operator|.
name|toStringValue
operator|=
name|toStringValue
expr_stmt|;
name|this
operator|.
name|keyedEntityRetrievalStrategy
operator|=
name|keyedEntityRetrievalStrategy
expr_stmt|;
block|}
DECL|method|evaluate (Exchange exchange)
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// try with full name first
name|Object
name|property
init|=
name|keyedEntityRetrievalStrategy
operator|.
name|getKeyedEntity
argument_list|(
name|exchange
argument_list|,
name|ognl
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
return|return
name|property
return|;
block|}
comment|// Split ognl except when this is not a Map, Array
comment|// and we would like to keep the dots within the key name
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|OgnlHelper
operator|.
name|splitOgnl
argument_list|(
name|ognl
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|keySuffix
init|=
literal|""
decl_stmt|;
comment|// if ognl starts with a key inside brackets (eg: [foo.bar])
comment|// remove starting and ending brackets from key
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
operator|&&
name|key
operator|.
name|endsWith
argument_list|(
literal|"]"
argument_list|)
condition|)
block|{
name|key
operator|=
name|StringHelper
operator|.
name|removeLeadingAndEndingQuotes
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|key
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|keySuffix
operator|=
name|StringHelper
operator|.
name|after
argument_list|(
name|methods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
comment|// remove any OGNL operators so we got the pure key name
name|key
operator|=
name|OgnlHelper
operator|.
name|removeOperators
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|property
operator|=
name|keyedEntityRetrievalStrategy
operator|.
name|getKeyedEntity
argument_list|(
name|exchange
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|property
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// the remainder is the rest of the ognl without the key
name|String
name|remainder
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|ognl
argument_list|,
name|key
operator|+
name|keySuffix
argument_list|)
decl_stmt|;
return|return
operator|new
name|MethodCallExpression
argument_list|(
name|property
argument_list|,
name|remainder
argument_list|)
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toStringValue
return|;
block|}
comment|/**          * Strategy to retrieve the value based on the key          */
DECL|interface|KeyedEntityRetrievalStrategy
specifier|public
interface|interface
name|KeyedEntityRetrievalStrategy
block|{
DECL|method|getKeyedEntity (Exchange exchange, String key)
name|Object
name|getKeyedEntity
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|key
parameter_list|)
function_decl|;
block|}
block|}
block|}
end_class

end_unit

