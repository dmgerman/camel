begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.reifier
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnCompletionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnCompletionMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinitionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|CamelInternalProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|OnCompletionProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_class
DECL|class|OnCompletionReifier
specifier|public
class|class
name|OnCompletionReifier
extends|extends
name|ProcessorReifier
argument_list|<
name|OnCompletionDefinition
argument_list|>
block|{
DECL|method|OnCompletionReifier (ProcessorDefinition<?> definition)
specifier|public
name|OnCompletionReifier
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|OnCompletionDefinition
operator|)
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
comment|// assign whether this was a route scoped onCompletion or not
comment|// we need to know this later when setting the parent, as only route
comment|// scoped should have parent
comment|// Note: this logic can possible be removed when the Camel routing
comment|// engine decides at runtime
comment|// to apply onCompletion in a more dynamic fashion than current code
comment|// base
comment|// and therefore is in a better position to decide among context/route
comment|// scoped OnCompletion at runtime
name|Boolean
name|routeScoped
init|=
name|definition
operator|.
name|getRouteScoped
argument_list|()
decl_stmt|;
if|if
condition|(
name|routeScoped
operator|==
literal|null
condition|)
block|{
name|routeScoped
operator|=
name|definition
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
expr_stmt|;
block|}
name|boolean
name|isOnCompleteOnly
init|=
name|definition
operator|.
name|getOnCompleteOnly
argument_list|()
operator|!=
literal|null
operator|&&
name|definition
operator|.
name|getOnCompleteOnly
argument_list|()
decl_stmt|;
name|boolean
name|isOnFailureOnly
init|=
name|definition
operator|.
name|getOnFailureOnly
argument_list|()
operator|!=
literal|null
operator|&&
name|definition
operator|.
name|getOnFailureOnly
argument_list|()
decl_stmt|;
name|boolean
name|isParallelProcessing
init|=
name|definition
operator|.
name|getParallelProcessing
argument_list|()
operator|!=
literal|null
operator|&&
name|definition
operator|.
name|getParallelProcessing
argument_list|()
decl_stmt|;
name|boolean
name|original
init|=
name|definition
operator|.
name|getUseOriginalMessagePolicy
argument_list|()
operator|!=
literal|null
operator|&&
name|definition
operator|.
name|getUseOriginalMessagePolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|isOnCompleteOnly
operator|&&
name|isOnFailureOnly
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Both onCompleteOnly and onFailureOnly cannot be true. Only one of them can be true. On node: "
operator|+
name|this
argument_list|)
throw|;
block|}
if|if
condition|(
name|original
condition|)
block|{
comment|// ensure allow original is turned on
name|routeContext
operator|.
name|setAllowUseOriginalMessage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|Processor
name|childProcessor
init|=
name|this
operator|.
name|createChildProcessor
argument_list|(
name|routeContext
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// wrap the on completion route in a unit of work processor
name|CamelInternalProcessor
name|internal
init|=
operator|new
name|CamelInternalProcessor
argument_list|(
name|childProcessor
argument_list|)
decl_stmt|;
name|internal
operator|.
name|addAdvice
argument_list|(
operator|new
name|CamelInternalProcessor
operator|.
name|UnitOfWorkProcessorAdvice
argument_list|(
name|routeContext
argument_list|)
argument_list|)
expr_stmt|;
name|routeContext
operator|.
name|setOnCompletion
argument_list|(
name|getId
argument_list|(
name|definition
argument_list|,
name|routeContext
argument_list|)
argument_list|,
name|internal
argument_list|)
expr_stmt|;
name|Predicate
name|when
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|getOnWhen
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|when
operator|=
name|definition
operator|.
name|getOnWhen
argument_list|()
operator|.
name|getExpression
argument_list|()
operator|.
name|createPredicate
argument_list|(
name|routeContext
argument_list|)
expr_stmt|;
block|}
name|boolean
name|shutdownThreadPool
init|=
name|ProcessorDefinitionHelper
operator|.
name|willCreateNewThreadPool
argument_list|(
name|routeContext
argument_list|,
name|definition
argument_list|,
name|isParallelProcessing
argument_list|)
decl_stmt|;
name|ExecutorService
name|threadPool
init|=
name|ProcessorDefinitionHelper
operator|.
name|getConfiguredExecutorService
argument_list|(
name|routeContext
argument_list|,
literal|"OnCompletion"
argument_list|,
name|definition
argument_list|,
name|isParallelProcessing
argument_list|)
decl_stmt|;
comment|// should be after consumer by default
name|boolean
name|afterConsumer
init|=
name|definition
operator|.
name|getMode
argument_list|()
operator|==
literal|null
operator|||
name|definition
operator|.
name|getMode
argument_list|()
operator|==
name|OnCompletionMode
operator|.
name|AfterConsumer
decl_stmt|;
name|OnCompletionProcessor
name|answer
init|=
operator|new
name|OnCompletionProcessor
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|internal
argument_list|,
name|threadPool
argument_list|,
name|shutdownThreadPool
argument_list|,
name|isOnCompleteOnly
argument_list|,
name|isOnFailureOnly
argument_list|,
name|when
argument_list|,
name|original
argument_list|,
name|afterConsumer
argument_list|)
decl_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

