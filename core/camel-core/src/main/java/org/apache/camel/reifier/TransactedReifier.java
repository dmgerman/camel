begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.reifier
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchBeanException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|TransactedDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|WrapProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|TransactedPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|TransactedDefinition
operator|.
name|PROPAGATION_REQUIRED
import|;
end_import

begin_class
DECL|class|TransactedReifier
specifier|public
class|class
name|TransactedReifier
extends|extends
name|ProcessorReifier
argument_list|<
name|TransactedDefinition
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TransactedReifier
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|TransactedReifier (ProcessorDefinition<?> definition)
specifier|public
name|TransactedReifier
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|TransactedDefinition
operator|)
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Policy
name|policy
init|=
name|resolvePolicy
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|policy
argument_list|,
literal|"policy"
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// before wrap
name|policy
operator|.
name|beforeWrap
argument_list|(
name|routeContext
argument_list|,
name|definition
argument_list|)
expr_stmt|;
comment|// create processor after the before wrap
name|Processor
name|childProcessor
init|=
name|this
operator|.
name|createChildProcessor
argument_list|(
name|routeContext
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// wrap
name|Processor
name|target
init|=
name|policy
operator|.
name|wrap
argument_list|(
name|routeContext
argument_list|,
name|childProcessor
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|target
operator|instanceof
name|Service
operator|)
condition|)
block|{
comment|// wrap the target so it becomes a service and we can manage its
comment|// lifecycle
name|target
operator|=
operator|new
name|WrapProcessor
argument_list|(
name|target
argument_list|,
name|childProcessor
argument_list|)
expr_stmt|;
block|}
return|return
name|target
return|;
block|}
DECL|method|resolvePolicy (RouteContext routeContext)
specifier|protected
name|Policy
name|resolvePolicy
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
block|{
return|return
name|resolvePolicy
argument_list|(
name|routeContext
argument_list|,
name|definition
argument_list|)
return|;
block|}
DECL|method|resolvePolicy (RouteContext routeContext, TransactedDefinition definition)
specifier|public
specifier|static
name|Policy
name|resolvePolicy
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|TransactedDefinition
name|definition
parameter_list|)
block|{
if|if
condition|(
name|definition
operator|.
name|getPolicy
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|definition
operator|.
name|getPolicy
argument_list|()
return|;
block|}
return|return
name|resolvePolicy
argument_list|(
name|routeContext
argument_list|,
name|definition
operator|.
name|getRef
argument_list|()
argument_list|,
name|definition
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
DECL|method|resolvePolicy (RouteContext routeContext, String ref, Class<? extends Policy> type)
specifier|public
specifier|static
name|Policy
name|resolvePolicy
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|String
name|ref
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Policy
argument_list|>
name|type
parameter_list|)
block|{
comment|// explicit ref given so lookup by it
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|ref
argument_list|)
condition|)
block|{
return|return
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|ref
argument_list|,
name|Policy
operator|.
name|class
argument_list|)
return|;
block|}
comment|// no explicit reference given from user so we can use some convention
comment|// over configuration here
comment|// try to lookup by scoped type
name|Policy
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
comment|// try find by type, note that this method is not supported by all
comment|// registry
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|types
init|=
name|routeContext
operator|.
name|lookupByType
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// only one policy defined so use it
name|Object
name|found
init|=
name|types
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|found
argument_list|)
condition|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|found
argument_list|)
return|;
block|}
block|}
block|}
comment|// for transacted routing try the default REQUIRED name
if|if
condition|(
name|type
operator|==
name|TransactedPolicy
operator|.
name|class
condition|)
block|{
comment|// still not found try with the default name PROPAGATION_REQUIRED
name|answer
operator|=
name|routeContext
operator|.
name|lookup
argument_list|(
name|PROPAGATION_REQUIRED
argument_list|,
name|TransactedPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// this logic only applies if we are a transacted policy
comment|// still no policy found then try lookup the platform transaction
comment|// manager and use it as policy
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|type
operator|==
name|TransactedPolicy
operator|.
name|class
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|tmClazz
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
literal|"org.springframework.transaction.PlatformTransactionManager"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmClazz
operator|!=
literal|null
condition|)
block|{
comment|// see if we can find the platform transaction manager in the
comment|// registry
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|maps
init|=
name|routeContext
operator|.
name|lookupByType
argument_list|(
name|tmClazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|maps
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// only one platform manager then use it as default and
comment|// create a transacted
comment|// policy with it and default to required
comment|// as we do not want dependency on spring jars in the
comment|// camel-core we use
comment|// reflection to lookup classes and create new objects and
comment|// call methods
comment|// as this is only done during route building it does not
comment|// matter that we
comment|// use reflection as performance is no a concern during
comment|// route building
name|Object
name|transactionManager
init|=
name|maps
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"One instance of PlatformTransactionManager found in registry: {}"
argument_list|,
name|transactionManager
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|txClazz
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
literal|"org.apache.camel.spring.spi.SpringTransactionPolicy"
argument_list|)
decl_stmt|;
if|if
condition|(
name|txClazz
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating a new temporary SpringTransactionPolicy using the PlatformTransactionManager: {}"
argument_list|,
name|transactionManager
argument_list|)
expr_stmt|;
name|TransactedPolicy
name|txPolicy
init|=
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
operator|.
name|newInstance
argument_list|(
name|txClazz
argument_list|,
name|TransactedPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|method
decl_stmt|;
try|try
block|{
name|method
operator|=
name|txClazz
operator|.
name|getMethod
argument_list|(
literal|"setTransactionManager"
argument_list|,
name|tmClazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot get method setTransactionManager(PlatformTransactionManager) on class: "
operator|+
name|txClazz
argument_list|)
throw|;
block|}
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|txPolicy
argument_list|,
name|transactionManager
argument_list|)
expr_stmt|;
return|return
name|txPolicy
return|;
block|}
else|else
block|{
comment|// camel-spring is missing on the classpath
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot create a transacted policy as camel-spring.jar is not on the classpath!"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|maps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchBeanException
argument_list|(
literal|null
argument_list|,
literal|"PlatformTransactionManager"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Found "
operator|+
name|maps
operator|.
name|size
argument_list|()
operator|+
literal|" PlatformTransactionManager in registry. "
operator|+
literal|"Cannot determine which one to use. Please configure a TransactionTemplate on the transacted policy."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

