begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.main
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|FileWatcherReloadStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelBeanPostProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ReloadStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|LifecycleStrategySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
operator|.
name|invokeMethod
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReflectionHelper
operator|.
name|findMethod
import|;
end_import

begin_comment
comment|/**  * Base class for main implementations to allow starting up a JVM with Camel embedded.  */
end_comment

begin_class
DECL|class|MainSupport
specifier|public
specifier|abstract
class|class
name|MainSupport
extends|extends
name|ServiceSupport
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MainSupport
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|UNINITIALIZED_EXIT_CODE
specifier|protected
specifier|static
specifier|final
name|int
name|UNINITIALIZED_EXIT_CODE
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
DECL|field|DEFAULT_EXIT_CODE
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_EXIT_CODE
init|=
literal|0
decl_stmt|;
DECL|field|listeners
specifier|protected
specifier|final
name|List
argument_list|<
name|MainListener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|options
specifier|protected
specifier|final
name|List
argument_list|<
name|Option
argument_list|>
name|options
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|latch
specifier|protected
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|completed
specifier|protected
specifier|final
name|AtomicBoolean
name|completed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|exitCode
specifier|protected
specifier|final
name|AtomicInteger
name|exitCode
init|=
operator|new
name|AtomicInteger
argument_list|(
name|UNINITIALIZED_EXIT_CODE
argument_list|)
decl_stmt|;
DECL|field|duration
specifier|protected
name|long
name|duration
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|durationIdle
specifier|protected
name|long
name|durationIdle
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|durationMaxMessages
specifier|protected
name|int
name|durationMaxMessages
decl_stmt|;
DECL|field|timeUnit
specifier|protected
name|TimeUnit
name|timeUnit
init|=
name|TimeUnit
operator|.
name|SECONDS
decl_stmt|;
DECL|field|trace
specifier|protected
name|boolean
name|trace
decl_stmt|;
DECL|field|camelContext
specifier|protected
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|routeBuilders
specifier|protected
name|List
argument_list|<
name|RouteBuilder
argument_list|>
name|routeBuilders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|routeBuilderClasses
specifier|protected
name|String
name|routeBuilderClasses
decl_stmt|;
DECL|field|configurations
specifier|protected
name|List
argument_list|<
name|Object
argument_list|>
name|configurations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|configurationClasses
specifier|protected
name|String
name|configurationClasses
decl_stmt|;
DECL|field|fileWatchDirectory
specifier|protected
name|String
name|fileWatchDirectory
decl_stmt|;
DECL|field|fileWatchDirectoryRecursively
specifier|protected
name|boolean
name|fileWatchDirectoryRecursively
decl_stmt|;
DECL|field|camelTemplate
specifier|protected
name|ProducerTemplate
name|camelTemplate
decl_stmt|;
DECL|field|hangupInterceptorEnabled
specifier|protected
name|boolean
name|hangupInterceptorEnabled
init|=
literal|true
decl_stmt|;
DECL|field|durationHitExitCode
specifier|protected
name|int
name|durationHitExitCode
init|=
name|DEFAULT_EXIT_CODE
decl_stmt|;
DECL|field|reloadStrategy
specifier|protected
name|ReloadStrategy
name|reloadStrategy
decl_stmt|;
DECL|field|propertyPlaceholderLocations
specifier|protected
name|String
name|propertyPlaceholderLocations
decl_stmt|;
DECL|field|autoConfigurationEnabled
specifier|protected
name|boolean
name|autoConfigurationEnabled
init|=
literal|true
decl_stmt|;
DECL|field|initialProperties
specifier|protected
name|Properties
name|initialProperties
decl_stmt|;
DECL|field|overrideProperties
specifier|protected
name|Properties
name|overrideProperties
decl_stmt|;
comment|/**      * A class for intercepting the hang up signal and do a graceful shutdown of the Camel.      */
DECL|class|HangupInterceptor
specifier|private
specifier|static
specifier|final
class|class
name|HangupInterceptor
extends|extends
name|Thread
block|{
DECL|field|log
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|mainInstance
specifier|final
name|MainSupport
name|mainInstance
decl_stmt|;
DECL|method|HangupInterceptor (MainSupport main)
name|HangupInterceptor
parameter_list|(
name|MainSupport
name|main
parameter_list|)
block|{
name|mainInstance
operator|=
name|main
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Received hang up - stopping the main instance."
argument_list|)
expr_stmt|;
try|try
block|{
name|mainInstance
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error during stopping the main instance."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|MainSupport (Class... configurationClasses)
specifier|protected
name|MainSupport
parameter_list|(
name|Class
modifier|...
name|configurationClasses
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|addConfigurationClass
argument_list|(
name|configurationClasses
argument_list|)
expr_stmt|;
block|}
DECL|method|MainSupport ()
specifier|protected
name|MainSupport
parameter_list|()
block|{
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|"Displays the help screen"
argument_list|)
block|{
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
name|showOptions
argument_list|()
expr_stmt|;
name|completed
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
operator|new
name|ParameterOption
argument_list|(
literal|"r"
argument_list|,
literal|"routers"
argument_list|,
literal|"Sets the router builder classes which will be loaded while starting the camel context"
argument_list|,
literal|"routerBuilderClasses"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|String
name|parameter
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
name|setRouteBuilderClasses
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
operator|new
name|ParameterOption
argument_list|(
literal|"d"
argument_list|,
literal|"duration"
argument_list|,
literal|"Sets the time duration (seconds) that the application will run for before terminating."
argument_list|,
literal|"duration"
argument_list|)
block|{
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|String
name|parameter
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
comment|// skip second marker to be backwards compatible
if|if
condition|(
name|parameter
operator|.
name|endsWith
argument_list|(
literal|"s"
argument_list|)
operator|||
name|parameter
operator|.
name|endsWith
argument_list|(
literal|"S"
argument_list|)
condition|)
block|{
name|parameter
operator|=
name|parameter
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|parameter
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|setDuration
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|parameter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
operator|new
name|ParameterOption
argument_list|(
literal|"dm"
argument_list|,
literal|"durationMaxMessages"
argument_list|,
literal|"Sets the duration of maximum number of messages that the application will process before terminating."
argument_list|,
literal|"durationMaxMessages"
argument_list|)
block|{
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|String
name|parameter
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
name|setDurationMaxMessages
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|parameter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
operator|new
name|ParameterOption
argument_list|(
literal|"di"
argument_list|,
literal|"durationIdle"
argument_list|,
literal|"Sets the idle time duration (seconds) duration that the application can be idle before terminating."
argument_list|,
literal|"durationIdle"
argument_list|)
block|{
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|String
name|parameter
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
comment|// skip second marker to be backwards compatible
if|if
condition|(
name|parameter
operator|.
name|endsWith
argument_list|(
literal|"s"
argument_list|)
operator|||
name|parameter
operator|.
name|endsWith
argument_list|(
literal|"S"
argument_list|)
condition|)
block|{
name|parameter
operator|=
name|parameter
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|parameter
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|setDurationIdle
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|parameter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"t"
argument_list|,
literal|"trace"
argument_list|,
literal|"Enables tracing"
argument_list|)
block|{
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
name|enableTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
operator|new
name|ParameterOption
argument_list|(
literal|"e"
argument_list|,
literal|"exitcode"
argument_list|,
literal|"Sets the exit code if duration was hit"
argument_list|,
literal|"exitcode"
argument_list|)
block|{
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|String
name|parameter
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
name|setDurationHitExitCode
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|parameter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
operator|new
name|ParameterOption
argument_list|(
literal|"watch"
argument_list|,
literal|"fileWatch"
argument_list|,
literal|"Sets a directory to watch for file changes to trigger reloading routes on-the-fly"
argument_list|,
literal|"fileWatch"
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|String
name|parameter
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
name|setFileWatchDirectory
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
operator|new
name|ParameterOption
argument_list|(
literal|"pl"
argument_list|,
literal|"propertiesLocation"
argument_list|,
literal|"Sets location(s) to load properties, such as from classpath or file system."
argument_list|,
literal|"propertiesLocation"
argument_list|)
block|{
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|String
name|parameter
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
name|setPropertyPlaceholderLocations
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Runs this process with the given arguments, and will wait until completed, or the JVM terminates.      */
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|completed
operator|.
name|get
argument_list|()
condition|)
block|{
name|internalBeforeStart
argument_list|()
expr_stmt|;
comment|// if we have an issue starting then propagate the exception to caller
name|beforeStart
argument_list|()
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|afterStart
argument_list|()
expr_stmt|;
name|waitUntilCompleted
argument_list|()
expr_stmt|;
name|internalBeforeStop
argument_list|()
expr_stmt|;
name|beforeStop
argument_list|()
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
name|afterStop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// however while running then just log errors
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed: {}"
argument_list|,
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Disable the hangup support. No graceful stop by calling stop() on a      * Hangup signal.      */
DECL|method|disableHangupSupport ()
specifier|public
name|void
name|disableHangupSupport
parameter_list|()
block|{
name|hangupInterceptorEnabled
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Hangup support is enabled by default.      */
DECL|method|enableHangupSupport ()
specifier|public
name|void
name|enableHangupSupport
parameter_list|()
block|{
name|hangupInterceptorEnabled
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Adds a {@link org.apache.camel.main.MainListener} to receive callbacks when the main is started or stopping      *      * @param listener the listener      */
DECL|method|addMainListener (MainListener listener)
specifier|public
name|void
name|addMainListener
parameter_list|(
name|MainListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes the {@link org.apache.camel.main.MainListener}      *      * @param listener the listener      */
DECL|method|removeMainListener (MainListener listener)
specifier|public
name|void
name|removeMainListener
parameter_list|(
name|MainListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Callback to run custom logic before CamelContext is being started.      *<p/>      * It is recommended to use {@link org.apache.camel.main.MainListener} instead.      */
DECL|method|beforeStart ()
specifier|protected
name|void
name|beforeStart
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|MainListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|beforeStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Callback to run custom logic after CamelContext has been started.      *<p/>      * It is recommended to use {@link org.apache.camel.main.MainListener} instead.      */
DECL|method|afterStart ()
specifier|protected
name|void
name|afterStart
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|MainListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|afterStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|internalBeforeStart ()
specifier|private
name|void
name|internalBeforeStart
parameter_list|()
block|{
if|if
condition|(
name|hangupInterceptorEnabled
condition|)
block|{
name|String
name|threadName
init|=
name|ThreadHelper
operator|.
name|resolveThreadName
argument_list|(
literal|null
argument_list|,
literal|"CamelHangupInterceptor"
argument_list|)
decl_stmt|;
name|Thread
name|task
init|=
operator|new
name|HangupInterceptor
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|task
operator|.
name|setName
argument_list|(
name|threadName
argument_list|)
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Callback to run custom logic before CamelContext is being stopped.      *<p/>      * It is recommended to use {@link org.apache.camel.main.MainListener} instead.      */
DECL|method|beforeStop ()
specifier|protected
name|void
name|beforeStop
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|MainListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|beforeStop
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Callback to run custom logic after CamelContext has been stopped.      *<p/>      * It is recommended to use {@link org.apache.camel.main.MainListener} instead.      */
DECL|method|afterStop ()
specifier|protected
name|void
name|afterStop
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|MainListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|afterStop
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|internalBeforeStop ()
specifier|private
name|void
name|internalBeforeStop
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|camelTemplate
operator|!=
literal|null
condition|)
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|camelTemplate
argument_list|)
expr_stmt|;
name|camelTemplate
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error stopping camelTemplate due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|". This exception is ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Marks this process as being completed.      */
DECL|method|completed ()
specifier|public
name|void
name|completed
parameter_list|()
block|{
name|completed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|exitCode
operator|.
name|compareAndSet
argument_list|(
name|UNINITIALIZED_EXIT_CODE
argument_list|,
name|DEFAULT_EXIT_CODE
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
comment|/**      * Displays the command line options.      */
DECL|method|showOptions ()
specifier|public
name|void
name|showOptions
parameter_list|()
block|{
name|showOptionsHeader
argument_list|()
expr_stmt|;
for|for
control|(
name|Option
name|option
range|:
name|options
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|option
operator|.
name|getInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Parses the command line arguments.      */
DECL|method|parseArguments (String[] arguments)
specifier|public
name|void
name|parseArguments
parameter_list|(
name|String
index|[]
name|arguments
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|arguments
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|valid
init|=
literal|true
decl_stmt|;
while|while
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|arg
init|=
name|args
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
name|boolean
name|handled
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Option
name|option
range|:
name|options
control|)
block|{
if|if
condition|(
name|option
operator|.
name|processOption
argument_list|(
name|arg
argument_list|,
name|args
argument_list|)
condition|)
block|{
name|handled
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|handled
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unknown option: "
operator|+
name|arg
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|valid
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|valid
condition|)
block|{
name|showOptions
argument_list|()
expr_stmt|;
name|completed
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addOption (Option option)
specifier|public
name|void
name|addOption
parameter_list|(
name|Option
name|option
parameter_list|)
block|{
name|options
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
DECL|method|getDuration ()
specifier|public
name|long
name|getDuration
parameter_list|()
block|{
return|return
name|duration
return|;
block|}
comment|/**      * Sets the duration (in seconds) to run the application until it      * should be terminated. Defaults to -1. Any value<= 0 will run forever.      */
DECL|method|setDuration (long duration)
specifier|public
name|void
name|setDuration
parameter_list|(
name|long
name|duration
parameter_list|)
block|{
name|this
operator|.
name|duration
operator|=
name|duration
expr_stmt|;
block|}
DECL|method|getDurationIdle ()
specifier|public
name|long
name|getDurationIdle
parameter_list|()
block|{
return|return
name|durationIdle
return|;
block|}
comment|/**      * Sets the maximum idle duration (in seconds) when running the application, and      * if there has been no message processed after being idle for more than this duration      * then the application should be terminated.      * Defaults to -1. Any value<= 0 will run forever.      */
DECL|method|setDurationIdle (long durationIdle)
specifier|public
name|void
name|setDurationIdle
parameter_list|(
name|long
name|durationIdle
parameter_list|)
block|{
name|this
operator|.
name|durationIdle
operator|=
name|durationIdle
expr_stmt|;
block|}
DECL|method|getDurationMaxMessages ()
specifier|public
name|int
name|getDurationMaxMessages
parameter_list|()
block|{
return|return
name|durationMaxMessages
return|;
block|}
comment|/**      * Sets the duration to run the application to process at most max messages until it      * should be terminated. Defaults to -1. Any value<= 0 will run forever.      */
DECL|method|setDurationMaxMessages (int durationMaxMessages)
specifier|public
name|void
name|setDurationMaxMessages
parameter_list|(
name|int
name|durationMaxMessages
parameter_list|)
block|{
name|this
operator|.
name|durationMaxMessages
operator|=
name|durationMaxMessages
expr_stmt|;
block|}
DECL|method|getTimeUnit ()
specifier|public
name|TimeUnit
name|getTimeUnit
parameter_list|()
block|{
return|return
name|timeUnit
return|;
block|}
comment|/**      * Sets the time unit duration (seconds by default).      */
DECL|method|setTimeUnit (TimeUnit timeUnit)
specifier|public
name|void
name|setTimeUnit
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|this
operator|.
name|timeUnit
operator|=
name|timeUnit
expr_stmt|;
block|}
comment|/**      * Sets the exit code for the application if duration was hit      */
DECL|method|setDurationHitExitCode (int durationHitExitCode)
specifier|public
name|void
name|setDurationHitExitCode
parameter_list|(
name|int
name|durationHitExitCode
parameter_list|)
block|{
name|this
operator|.
name|durationHitExitCode
operator|=
name|durationHitExitCode
expr_stmt|;
block|}
DECL|method|getDurationHitExitCode ()
specifier|public
name|int
name|getDurationHitExitCode
parameter_list|()
block|{
return|return
name|durationHitExitCode
return|;
block|}
DECL|method|getExitCode ()
specifier|public
name|int
name|getExitCode
parameter_list|()
block|{
return|return
name|exitCode
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getConfigurationClasses ()
specifier|public
name|String
name|getConfigurationClasses
parameter_list|()
block|{
return|return
name|configurationClasses
return|;
block|}
DECL|method|setConfigurationClasses (String configurations)
specifier|public
name|void
name|setConfigurationClasses
parameter_list|(
name|String
name|configurations
parameter_list|)
block|{
name|this
operator|.
name|configurationClasses
operator|=
name|configurations
expr_stmt|;
block|}
DECL|method|addConfigurationClass (Class... configuration)
specifier|public
name|void
name|addConfigurationClass
parameter_list|(
name|Class
modifier|...
name|configuration
parameter_list|)
block|{
name|String
name|existing
init|=
name|configurationClasses
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
name|existing
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Class
name|clazz
range|:
name|configuration
control|)
block|{
if|if
condition|(
operator|!
name|existing
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|existing
operator|=
name|existing
operator|+
literal|","
expr_stmt|;
block|}
name|existing
operator|=
name|existing
operator|+
name|clazz
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
name|setConfigurationClasses
argument_list|(
name|existing
argument_list|)
expr_stmt|;
block|}
DECL|method|addConfiguration (Object configuration)
specifier|public
name|void
name|addConfiguration
parameter_list|(
name|Object
name|configuration
parameter_list|)
block|{
name|configurations
operator|.
name|add
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
DECL|method|getRouteBuilderClasses ()
specifier|public
name|String
name|getRouteBuilderClasses
parameter_list|()
block|{
return|return
name|routeBuilderClasses
return|;
block|}
DECL|method|setRouteBuilderClasses (String builders)
specifier|public
name|void
name|setRouteBuilderClasses
parameter_list|(
name|String
name|builders
parameter_list|)
block|{
name|this
operator|.
name|routeBuilderClasses
operator|=
name|builders
expr_stmt|;
block|}
DECL|method|getFileWatchDirectory ()
specifier|public
name|String
name|getFileWatchDirectory
parameter_list|()
block|{
return|return
name|fileWatchDirectory
return|;
block|}
comment|/**      * Sets the directory name to watch XML file changes to trigger live reload of Camel routes.      *<p/>      * Notice you cannot set this value and a custom {@link ReloadStrategy} as well.      */
DECL|method|setFileWatchDirectory (String fileWatchDirectory)
specifier|public
name|void
name|setFileWatchDirectory
parameter_list|(
name|String
name|fileWatchDirectory
parameter_list|)
block|{
name|this
operator|.
name|fileWatchDirectory
operator|=
name|fileWatchDirectory
expr_stmt|;
block|}
DECL|method|isFileWatchDirectoryRecursively ()
specifier|public
name|boolean
name|isFileWatchDirectoryRecursively
parameter_list|()
block|{
return|return
name|fileWatchDirectoryRecursively
return|;
block|}
comment|/**      * Sets the flag to watch directory of XML file changes recursively to trigger live reload of Camel routes.      *<p/>      * Notice you cannot set this value and a custom {@link ReloadStrategy} as well.      */
DECL|method|setFileWatchDirectoryRecursively (boolean fileWatchDirectoryRecursively)
specifier|public
name|void
name|setFileWatchDirectoryRecursively
parameter_list|(
name|boolean
name|fileWatchDirectoryRecursively
parameter_list|)
block|{
name|this
operator|.
name|fileWatchDirectoryRecursively
operator|=
name|fileWatchDirectoryRecursively
expr_stmt|;
block|}
DECL|method|getReloadStrategy ()
specifier|public
name|ReloadStrategy
name|getReloadStrategy
parameter_list|()
block|{
return|return
name|reloadStrategy
return|;
block|}
comment|/**      * Sets a custom {@link ReloadStrategy} to be used.      *<p/>      * Notice you cannot set this value and the fileWatchDirectory as well.      */
DECL|method|setReloadStrategy (ReloadStrategy reloadStrategy)
specifier|public
name|void
name|setReloadStrategy
parameter_list|(
name|ReloadStrategy
name|reloadStrategy
parameter_list|)
block|{
name|this
operator|.
name|reloadStrategy
operator|=
name|reloadStrategy
expr_stmt|;
block|}
DECL|method|getPropertyPlaceholderLocations ()
specifier|public
name|String
name|getPropertyPlaceholderLocations
parameter_list|()
block|{
return|return
name|propertyPlaceholderLocations
return|;
block|}
comment|/**      * A list of locations to add for loading properties.      * You can use comma to separate multiple locations.      */
DECL|method|setPropertyPlaceholderLocations (String location)
specifier|public
name|void
name|setPropertyPlaceholderLocations
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|propertyPlaceholderLocations
operator|=
name|location
expr_stmt|;
block|}
DECL|method|isAutoConfigurationEnabled ()
specifier|public
name|boolean
name|isAutoConfigurationEnabled
parameter_list|()
block|{
return|return
name|autoConfigurationEnabled
return|;
block|}
comment|/**      * Whether auto configuration of components/dataformats/languages is enabled or not.      * When enabled the configuration parameters are loaded from the properties component      * and configured as defaults (similar to spring-boot auto-configuration). You can prefix      * the parameters in the properties file with:      * - camel.component.name.option1=value1      * - camel.component.name.option2=value2      * - camel.dataformat.name.option1=value1      * - camel.dataformat.name.option2=value2      * - camel.language.name.option1=value1      * - camel.language.name.option2=value2      * Where name is the name of the component, dataformat or language such as seda,direct,jaxb.      *<p/>      * The auto configuration also works for any options on components      * that is a complex type (not standard Java type) and there has been an explicit single      * bean instance registered to the Camel registry via the {@link org.apache.camel.spi.Registry#bind(String, Object)} method      * or by using the {@link org.apache.camel.BindToRegistry} annotation style.      *<p/>      * This option is default enabled.      */
DECL|method|setAutoConfigurationEnabled (boolean autoConfigurationEnabled)
specifier|public
name|void
name|setAutoConfigurationEnabled
parameter_list|(
name|boolean
name|autoConfigurationEnabled
parameter_list|)
block|{
name|this
operator|.
name|autoConfigurationEnabled
operator|=
name|autoConfigurationEnabled
expr_stmt|;
block|}
DECL|method|getInitialProperties ()
specifier|public
name|Properties
name|getInitialProperties
parameter_list|()
block|{
return|return
name|initialProperties
return|;
block|}
comment|/**      * Sets initial properties for the properties component,      * which will be used before any locations are resolved.      */
DECL|method|setInitialProperties (Properties initialProperties)
specifier|public
name|void
name|setInitialProperties
parameter_list|(
name|Properties
name|initialProperties
parameter_list|)
block|{
name|this
operator|.
name|initialProperties
operator|=
name|initialProperties
expr_stmt|;
block|}
DECL|method|getOverrideProperties ()
specifier|public
name|Properties
name|getOverrideProperties
parameter_list|()
block|{
return|return
name|overrideProperties
return|;
block|}
comment|/**      * Sets a special list of override properties that take precedence      * and will use first, if a property exist.      */
DECL|method|setOverrideProperties (Properties overrideProperties)
specifier|public
name|void
name|setOverrideProperties
parameter_list|(
name|Properties
name|overrideProperties
parameter_list|)
block|{
name|this
operator|.
name|overrideProperties
operator|=
name|overrideProperties
expr_stmt|;
block|}
DECL|method|isTrace ()
specifier|public
name|boolean
name|isTrace
parameter_list|()
block|{
return|return
name|trace
return|;
block|}
DECL|method|enableTrace ()
specifier|public
name|void
name|enableTrace
parameter_list|()
block|{
name|this
operator|.
name|trace
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// call completed to properly stop as we count down the waiting latch
name|completed
argument_list|()
expr_stmt|;
block|}
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{     }
DECL|method|waitUntilCompleted ()
specifier|protected
name|void
name|waitUntilCompleted
parameter_list|()
block|{
while|while
condition|(
operator|!
name|completed
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|duration
operator|>
literal|0
condition|)
block|{
name|TimeUnit
name|unit
init|=
name|getTimeUnit
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for: {} {}"
argument_list|,
name|duration
argument_list|,
name|unit
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|(
name|duration
argument_list|,
name|unit
argument_list|)
expr_stmt|;
name|exitCode
operator|.
name|compareAndSet
argument_list|(
name|UNINITIALIZED_EXIT_CODE
argument_list|,
name|durationHitExitCode
argument_list|)
expr_stmt|;
name|completed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|durationIdle
operator|>
literal|0
condition|)
block|{
name|TimeUnit
name|unit
init|=
name|getTimeUnit
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting to be idle for: {} {}"
argument_list|,
name|duration
argument_list|,
name|unit
argument_list|)
expr_stmt|;
name|exitCode
operator|.
name|compareAndSet
argument_list|(
name|UNINITIALIZED_EXIT_CODE
argument_list|,
name|durationHitExitCode
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|completed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|durationMaxMessages
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting until: {} messages has been processed"
argument_list|,
name|durationMaxMessages
argument_list|)
expr_stmt|;
name|exitCode
operator|.
name|compareAndSet
argument_list|(
name|UNINITIALIZED_EXIT_CODE
argument_list|,
name|durationHitExitCode
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|completed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Parses the command line arguments then runs the program.      */
DECL|method|run (String[] args)
specifier|public
name|void
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|parseArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|run
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MainSupport exiting code: {}"
argument_list|,
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Displays the header message for the command line options.      */
DECL|method|showOptionsHeader ()
specifier|public
name|void
name|showOptionsHeader
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Apache Camel Runner takes the following options"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
DECL|method|getRouteBuilders ()
specifier|public
name|List
argument_list|<
name|RouteBuilder
argument_list|>
name|getRouteBuilders
parameter_list|()
block|{
return|return
name|routeBuilders
return|;
block|}
DECL|method|setRouteBuilders (List<RouteBuilder> routeBuilders)
specifier|public
name|void
name|setRouteBuilders
parameter_list|(
name|List
argument_list|<
name|RouteBuilder
argument_list|>
name|routeBuilders
parameter_list|)
block|{
name|this
operator|.
name|routeBuilders
operator|=
name|routeBuilders
expr_stmt|;
block|}
DECL|method|getConfigurations ()
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getConfigurations
parameter_list|()
block|{
return|return
name|configurations
return|;
block|}
DECL|method|setConfigurations (List<Object> configurations)
specifier|public
name|void
name|setConfigurations
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|configurations
parameter_list|)
block|{
name|this
operator|.
name|configurations
operator|=
name|configurations
expr_stmt|;
block|}
DECL|method|getRouteDefinitions ()
specifier|public
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|getRouteDefinitions
parameter_list|()
block|{
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelContext
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|addAll
argument_list|(
name|camelContext
operator|.
name|adapt
argument_list|(
name|ModelCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getRouteDefinitions
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getCamelTemplate ()
specifier|public
name|ProducerTemplate
name|getCamelTemplate
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|camelTemplate
operator|==
literal|null
condition|)
block|{
name|camelTemplate
operator|=
name|findOrCreateCamelTemplate
argument_list|()
expr_stmt|;
block|}
return|return
name|camelTemplate
return|;
block|}
DECL|method|findOrCreateCamelTemplate ()
specifier|protected
specifier|abstract
name|ProducerTemplate
name|findOrCreateCamelTemplate
parameter_list|()
function_decl|;
DECL|method|createCamelContext ()
specifier|protected
specifier|abstract
name|CamelContext
name|createCamelContext
parameter_list|()
function_decl|;
DECL|method|initCamelContext ()
specifier|protected
name|void
name|initCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|camelContext
operator|=
name|createCamelContext
argument_list|()
expr_stmt|;
name|postProcessCamelContext
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
DECL|method|loadRouteBuilders (CamelContext camelContext)
specifier|protected
name|void
name|loadRouteBuilders
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
comment|// lets use Camel's bean post processor on any existing route builder classes
comment|// so the instance has some support for dependency injection
name|CamelBeanPostProcessor
name|postProcessor
init|=
name|camelContext
operator|.
name|getBeanPostProcessor
argument_list|()
decl_stmt|;
for|for
control|(
name|RouteBuilder
name|routeBuilder
range|:
name|getRouteBuilders
argument_list|()
control|)
block|{
name|postProcessor
operator|.
name|postProcessBeforeInitialization
argument_list|(
name|routeBuilder
argument_list|,
name|routeBuilder
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|postProcessor
operator|.
name|postProcessAfterInitialization
argument_list|(
name|routeBuilder
argument_list|,
name|routeBuilder
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|routeBuilderClasses
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|routeClasses
init|=
name|routeBuilderClasses
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|routeClass
range|:
name|routeClasses
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|routeClazz
init|=
name|camelContext
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
name|routeClass
argument_list|)
decl_stmt|;
comment|// lets use Camel's injector so the class has some support for dependency injection
name|Object
name|builder
init|=
name|camelContext
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|routeClazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|instanceof
name|RouteBuilder
condition|)
block|{
name|getRouteBuilders
argument_list|()
operator|.
name|add
argument_list|(
operator|(
name|RouteBuilder
operator|)
name|builder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Class {} is not a RouteBuilder class"
argument_list|,
name|routeClazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|loadConfigurations (CamelContext camelContext)
specifier|protected
name|void
name|loadConfigurations
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
comment|// lets use Camel's bean post processor on any existing configuration classes
comment|// so the instance has some support for dependency injection
name|CamelBeanPostProcessor
name|postProcessor
init|=
name|camelContext
operator|.
name|getBeanPostProcessor
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|configuration
range|:
name|getConfigurations
argument_list|()
control|)
block|{
name|postProcessor
operator|.
name|postProcessBeforeInitialization
argument_list|(
name|configuration
argument_list|,
name|configuration
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|postProcessor
operator|.
name|postProcessAfterInitialization
argument_list|(
name|configuration
argument_list|,
name|configuration
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configurationClasses
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|configClasses
init|=
name|configurationClasses
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|configClass
range|:
name|configClasses
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|configClazz
init|=
name|camelContext
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
name|configClass
argument_list|)
decl_stmt|;
comment|// lets use Camel's injector so the class has some support for dependency injection
name|Object
name|config
init|=
name|camelContext
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|configClazz
argument_list|)
decl_stmt|;
name|getConfigurations
argument_list|()
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Object
name|config
range|:
name|getConfigurations
argument_list|()
control|)
block|{
comment|// invoke configure method if exists
name|Method
name|method
init|=
name|findMethod
argument_list|(
name|config
operator|.
name|getClass
argument_list|()
argument_list|,
literal|"configure"
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Calling configure method on configuration class: {}"
argument_list|,
name|config
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|postProcessCamelContext (CamelContext camelContext)
specifier|protected
name|void
name|postProcessCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|propertyPlaceholderLocations
operator|!=
literal|null
condition|)
block|{
name|PropertiesComponent
name|pc
init|=
name|camelContext
operator|.
name|getPropertiesComponent
argument_list|()
decl_stmt|;
name|pc
operator|.
name|addLocation
argument_list|(
name|propertyPlaceholderLocations
argument_list|)
expr_stmt|;
if|if
condition|(
name|initialProperties
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|setInitialProperties
argument_list|(
name|initialProperties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|overrideProperties
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|setOverrideProperties
argument_list|(
name|overrideProperties
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Using properties from: {}"
argument_list|,
name|propertyPlaceholderLocations
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// lets default to application.properties and ignore if its missing
name|PropertiesComponent
name|pc
init|=
name|camelContext
operator|.
name|getPropertiesComponent
argument_list|()
decl_stmt|;
name|pc
operator|.
name|addLocation
argument_list|(
literal|"classpath:application.properties"
argument_list|)
expr_stmt|;
name|pc
operator|.
name|setIgnoreMissingLocation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|initialProperties
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|setInitialProperties
argument_list|(
name|initialProperties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|overrideProperties
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|setOverrideProperties
argument_list|(
name|overrideProperties
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Using optional properties from classpath:application.properties"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trace
condition|)
block|{
name|camelContext
operator|.
name|setTracing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileWatchDirectory
operator|!=
literal|null
condition|)
block|{
name|ReloadStrategy
name|reload
init|=
operator|new
name|FileWatcherReloadStrategy
argument_list|(
name|fileWatchDirectory
argument_list|,
name|fileWatchDirectoryRecursively
argument_list|)
decl_stmt|;
name|camelContext
operator|.
name|setReloadStrategy
argument_list|(
name|reload
argument_list|)
expr_stmt|;
comment|// ensure reload is added as service and started
name|camelContext
operator|.
name|addService
argument_list|(
name|reload
argument_list|)
expr_stmt|;
comment|// and ensure its register in JMX (which requires manually to be added because CamelContext is already started)
name|Object
name|managedObject
init|=
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementObjectStrategy
argument_list|()
operator|.
name|getManagedObjectForService
argument_list|(
name|camelContext
argument_list|,
name|reload
argument_list|)
decl_stmt|;
if|if
condition|(
name|managedObject
operator|==
literal|null
condition|)
block|{
comment|// service should not be managed
return|return;
block|}
comment|// skip already managed services, for example if a route has been restarted
if|if
condition|(
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|isManaged
argument_list|(
name|managedObject
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"The service is already managed: {}"
argument_list|,
name|reload
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|manageObject
argument_list|(
name|managedObject
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not register service: "
operator|+
name|reload
operator|+
literal|" as Service MBean."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|durationMaxMessages
operator|>
literal|0
operator|||
name|durationIdle
operator|>
literal|0
condition|)
block|{
comment|// convert to seconds as that is what event notifier uses
name|long
name|seconds
init|=
name|timeUnit
operator|.
name|toSeconds
argument_list|(
name|durationIdle
argument_list|)
decl_stmt|;
comment|// register lifecycle so we can trigger to shutdown the JVM when maximum number of messages has been processed
name|EventNotifier
name|notifier
init|=
operator|new
name|MainDurationEventNotifier
argument_list|(
name|camelContext
argument_list|,
name|durationMaxMessages
argument_list|,
name|seconds
argument_list|,
name|completed
argument_list|,
name|latch
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// register our event notifier
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|addEventNotifier
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
block|}
comment|// try to load configurations
name|loadConfigurations
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
comment|// conventional configuration via properties to allow configuring options on
comment|// component, dataformat, and languages (like spring-boot auto-configuration)
if|if
condition|(
name|autoConfigurationEnabled
condition|)
block|{
name|autoConfigurationFromRegistry
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
name|autoConfigurationFromProperties
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
comment|// try to load the route builders
name|loadRouteBuilders
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
for|for
control|(
name|RouteBuilder
name|routeBuilder
range|:
name|routeBuilders
control|)
block|{
name|camelContext
operator|.
name|addRoutes
argument_list|(
name|routeBuilder
argument_list|)
expr_stmt|;
block|}
comment|// register lifecycle so we are notified in Camel is stopped from JMX or somewhere else
name|camelContext
operator|.
name|addLifecycleStrategy
argument_list|(
operator|new
name|MainLifecycleStrategy
argument_list|(
name|completed
argument_list|,
name|latch
argument_list|)
argument_list|)
expr_stmt|;
comment|// allow to do configuration before its started
for|for
control|(
name|MainListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|configure
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|autoConfigurationFromProperties (CamelContext camelContext)
specifier|protected
name|void
name|autoConfigurationFromProperties
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
comment|// load properties
name|Properties
name|prop
init|=
name|camelContext
operator|.
name|getPropertiesComponent
argument_list|()
operator|.
name|loadProperties
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|properties
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|prop
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|int
name|dot
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|,
literal|16
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"camel.component."
argument_list|)
operator|&&
name|dot
operator|>
literal|0
condition|)
block|{
comment|// grab component name
name|String
name|name
init|=
name|key
operator|.
name|substring
argument_list|(
literal|16
argument_list|,
name|dot
argument_list|)
decl_stmt|;
name|Component
name|component
init|=
name|camelContext
operator|.
name|getComponent
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// grab the value
name|String
name|value
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|option
init|=
name|key
operator|.
name|substring
argument_list|(
name|dot
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
name|properties
operator|.
name|getOrDefault
argument_list|(
name|component
argument_list|,
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|values
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|component
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|dot
operator|=
name|key
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|,
literal|17
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"camel.dataformat."
argument_list|)
operator|&&
name|dot
operator|>
literal|0
condition|)
block|{
comment|// grab component name
name|String
name|name
init|=
name|key
operator|.
name|substring
argument_list|(
literal|17
argument_list|,
name|dot
argument_list|)
decl_stmt|;
name|DataFormat
name|dataformat
init|=
name|camelContext
operator|.
name|resolveDataFormat
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// grab the value
name|String
name|value
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|option
init|=
name|key
operator|.
name|substring
argument_list|(
name|dot
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
name|properties
operator|.
name|getOrDefault
argument_list|(
name|dataformat
argument_list|,
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|values
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|dataformat
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|dot
operator|=
name|key
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|,
literal|15
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"camel.language."
argument_list|)
operator|&&
name|dot
operator|>
literal|0
condition|)
block|{
comment|// grab component name
name|String
name|name
init|=
name|key
operator|.
name|substring
argument_list|(
literal|15
argument_list|,
name|dot
argument_list|)
decl_stmt|;
name|Language
name|language
init|=
name|camelContext
operator|.
name|resolveLanguage
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// grab the value
name|String
name|value
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|option
init|=
name|key
operator|.
name|substring
argument_list|(
name|dot
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
name|properties
operator|.
name|getOrDefault
argument_list|(
name|language
argument_list|,
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|values
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|language
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|long
name|total
init|=
name|properties
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|Map
operator|::
name|size
argument_list|)
operator|.
name|sum
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Auto configuring {} components/dataformat/languages from loaded properties: {}"
argument_list|,
name|properties
operator|.
name|size
argument_list|()
argument_list|,
name|total
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
name|obj
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
name|properties
operator|.
name|get
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|setCamelProperties
argument_list|(
name|camelContext
argument_list|,
name|obj
argument_list|,
name|values
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|autoConfigurationFromRegistry (CamelContext camelContext)
specifier|protected
name|void
name|autoConfigurationFromRegistry
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
name|camelContext
operator|.
name|addLifecycleStrategy
argument_list|(
operator|new
name|LifecycleStrategySupport
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onComponentAdd
parameter_list|(
name|String
name|name
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
comment|// when adding a component then support auto-configuring complex types
comment|// by looking up from registry, such as DataSource etc
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|component
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// lookup complex types
name|properties
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
comment|// if the property has not been set and its a complex type (not simple or string etc)
name|Class
name|type
init|=
name|getGetterType
argument_list|(
name|component
argument_list|,
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|isComplexType
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Set
name|lookup
init|=
name|findExplicitBindingByType
argument_list|(
name|camelContext
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|lookup
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|v
operator|=
name|lookup
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Auto configuring option: {} on component: {} as one instance of type: {} registered in the Camel Registry"
argument_list|,
name|k
argument_list|,
name|name
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|component
argument_list|,
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot auto configure option: "
operator|+
name|k
operator|+
literal|" on component: "
operator|+
name|name
operator|+
literal|" due to "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**              * Finds any explicit bean bindings that has been added to the registry.              * This means that if there are any, then they have been added by the end user              * and we should favour using the bean if there is a single instance bound for the type.              */
specifier|private
name|Set
name|findExplicitBindingByType
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Class
name|type
parameter_list|)
block|{
if|if
condition|(
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|instanceof
name|MainRegistry
condition|)
block|{
return|return
operator|(
operator|(
name|MainRegistry
operator|)
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|)
operator|.
name|findBindingsByType
argument_list|(
name|type
argument_list|)
return|;
block|}
return|return
name|Collections
operator|.
name|EMPTY_SET
return|;
block|}
specifier|private
name|boolean
name|isComplexType
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
comment|// lets consider all non java as complex types
return|return
name|type
operator|!=
literal|null
operator|&&
operator|!
name|type
operator|.
name|isPrimitive
argument_list|()
operator|&&
operator|!
name|type
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"java"
argument_list|)
return|;
block|}
specifier|private
name|Class
name|getGetterType
parameter_list|(
name|Component
name|component
parameter_list|,
name|String
name|key
parameter_list|)
block|{
try|try
block|{
name|Method
name|getter
init|=
name|IntrospectionSupport
operator|.
name|getPropertyGetter
argument_list|(
name|component
operator|.
name|getClass
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|getter
operator|!=
literal|null
condition|)
block|{
return|return
name|getter
operator|.
name|getReturnType
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|addRouteBuilder (RouteBuilder routeBuilder)
specifier|public
name|void
name|addRouteBuilder
parameter_list|(
name|RouteBuilder
name|routeBuilder
parameter_list|)
block|{
name|getRouteBuilders
argument_list|()
operator|.
name|add
argument_list|(
name|routeBuilder
argument_list|)
expr_stmt|;
block|}
DECL|method|addRouteBuilder (Class... routeBuilder)
specifier|public
name|void
name|addRouteBuilder
parameter_list|(
name|Class
modifier|...
name|routeBuilder
parameter_list|)
block|{
name|String
name|existing
init|=
name|routeBuilderClasses
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
name|existing
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|routeBuilder
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Class
name|clazz
range|:
name|routeBuilder
control|)
block|{
if|if
condition|(
operator|!
name|existing
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|existing
operator|=
name|existing
operator|+
literal|","
expr_stmt|;
block|}
name|existing
operator|=
name|existing
operator|+
name|clazz
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
name|setRouteBuilderClasses
argument_list|(
name|existing
argument_list|)
expr_stmt|;
block|}
DECL|method|setCamelProperties (CamelContext context, Object target, Map<String, Object> properties, boolean failIfNotSet)
specifier|private
specifier|static
name|boolean
name|setCamelProperties
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Object
name|target
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|,
name|boolean
name|failIfNotSet
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|context
argument_list|,
literal|"context"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|target
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|properties
argument_list|,
literal|"properties"
argument_list|)
expr_stmt|;
name|boolean
name|rc
init|=
literal|false
decl_stmt|;
name|Iterator
name|it
init|=
name|properties
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// if the name has dot's then its an OGNL expressions (so lets use simple language to walk down this ognl path)
name|boolean
name|ognl
init|=
name|name
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|ognl
condition|)
block|{
name|Language
name|method
init|=
name|context
operator|.
name|resolveLanguage
argument_list|(
literal|"simple"
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|exp
init|=
name|method
operator|.
name|createExpression
argument_list|(
literal|"${body."
operator|+
name|path
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|Exchange
name|dummy
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|dummy
operator|.
name|getMessage
argument_list|()
operator|.
name|setBody
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|Object
name|newTarget
init|=
name|exp
operator|.
name|evaluate
argument_list|(
name|dummy
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|newTarget
operator|!=
literal|null
condition|)
block|{
name|target
operator|=
name|newTarget
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|stringValue
init|=
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
name|boolean
name|hit
init|=
literal|false
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting property {} on {} with value {}"
argument_list|,
name|name
argument_list|,
name|target
argument_list|,
name|stringValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|EndpointHelper
operator|.
name|isReferenceParameter
argument_list|(
name|stringValue
argument_list|)
condition|)
block|{
name|hit
operator|=
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|stringValue
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|hit
operator|=
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|var12
parameter_list|)
block|{
name|hit
operator|=
name|IntrospectionSupport
operator|.
name|setProperty
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|stringValue
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hit
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|rc
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|failIfNotSet
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot configure option ["
operator|+
name|name
operator|+
literal|"] with value ["
operator|+
name|stringValue
operator|+
literal|"] as the bean class ["
operator|+
name|ObjectHelper
operator|.
name|classCanonicalName
argument_list|(
name|target
argument_list|)
operator|+
literal|"] has no suitable setter method, or not possible to lookup a bean with the id ["
operator|+
name|stringValue
operator|+
literal|"] in Camel registry"
argument_list|)
throw|;
block|}
block|}
return|return
name|rc
return|;
block|}
DECL|class|Option
specifier|public
specifier|abstract
class|class
name|Option
block|{
DECL|field|abbreviation
specifier|private
name|String
name|abbreviation
decl_stmt|;
DECL|field|fullName
specifier|private
name|String
name|fullName
decl_stmt|;
DECL|field|description
specifier|private
name|String
name|description
decl_stmt|;
DECL|method|Option (String abbreviation, String fullName, String description)
specifier|protected
name|Option
parameter_list|(
name|String
name|abbreviation
parameter_list|,
name|String
name|fullName
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|abbreviation
operator|=
literal|"-"
operator|+
name|abbreviation
expr_stmt|;
name|this
operator|.
name|fullName
operator|=
literal|"-"
operator|+
name|fullName
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
DECL|method|processOption (String arg, LinkedList<String> remainingArgs)
specifier|public
name|boolean
name|processOption
parameter_list|(
name|String
name|arg
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
if|if
condition|(
name|arg
operator|.
name|equalsIgnoreCase
argument_list|(
name|abbreviation
argument_list|)
operator|||
name|fullName
operator|.
name|startsWith
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|doProcess
argument_list|(
name|arg
argument_list|,
name|remainingArgs
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getAbbreviation ()
specifier|public
name|String
name|getAbbreviation
parameter_list|()
block|{
return|return
name|abbreviation
return|;
block|}
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
DECL|method|getFullName ()
specifier|public
name|String
name|getFullName
parameter_list|()
block|{
return|return
name|fullName
return|;
block|}
DECL|method|getInformation ()
specifier|public
name|String
name|getInformation
parameter_list|()
block|{
return|return
literal|"  "
operator|+
name|getAbbreviation
argument_list|()
operator|+
literal|" or "
operator|+
name|getFullName
argument_list|()
operator|+
literal|" = "
operator|+
name|getDescription
argument_list|()
return|;
block|}
DECL|method|doProcess (String arg, LinkedList<String> remainingArgs)
specifier|protected
specifier|abstract
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
function_decl|;
block|}
DECL|class|ParameterOption
specifier|public
specifier|abstract
class|class
name|ParameterOption
extends|extends
name|Option
block|{
DECL|field|parameterName
specifier|private
name|String
name|parameterName
decl_stmt|;
DECL|method|ParameterOption (String abbreviation, String fullName, String description, String parameterName)
specifier|protected
name|ParameterOption
parameter_list|(
name|String
name|abbreviation
parameter_list|,
name|String
name|fullName
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|parameterName
parameter_list|)
block|{
name|super
argument_list|(
name|abbreviation
argument_list|,
name|fullName
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|this
operator|.
name|parameterName
operator|=
name|parameterName
expr_stmt|;
block|}
DECL|method|doProcess (String arg, LinkedList<String> remainingArgs)
specifier|protected
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
block|{
if|if
condition|(
name|remainingArgs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Expected fileName for "
argument_list|)
expr_stmt|;
name|showOptions
argument_list|()
expr_stmt|;
name|completed
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|parameter
init|=
name|remainingArgs
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
name|doProcess
argument_list|(
name|arg
argument_list|,
name|parameter
argument_list|,
name|remainingArgs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getInformation ()
specifier|public
name|String
name|getInformation
parameter_list|()
block|{
return|return
literal|"  "
operator|+
name|getAbbreviation
argument_list|()
operator|+
literal|" or "
operator|+
name|getFullName
argument_list|()
operator|+
literal|"<"
operator|+
name|parameterName
operator|+
literal|"> = "
operator|+
name|getDescription
argument_list|()
return|;
block|}
DECL|method|doProcess (String arg, String parameter, LinkedList<String> remainingArgs)
specifier|protected
specifier|abstract
name|void
name|doProcess
parameter_list|(
name|String
name|arg
parameter_list|,
name|String
name|parameter
parameter_list|,
name|LinkedList
argument_list|<
name|String
argument_list|>
name|remainingArgs
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

