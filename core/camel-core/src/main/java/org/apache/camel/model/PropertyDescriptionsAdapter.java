begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|adapters
operator|.
name|XmlAdapter
import|;
end_import

begin_class
DECL|class|PropertyDescriptionsAdapter
specifier|public
class|class
name|PropertyDescriptionsAdapter
extends|extends
name|XmlAdapter
argument_list|<
name|PropertyDefinitions
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
DECL|method|unmarshal (PropertyDefinitions value)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|unmarshal
parameter_list|(
name|PropertyDefinitions
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|value
operator|.
name|getProperties
argument_list|()
operator|.
name|forEach
argument_list|(
name|p
lambda|->
name|ret
operator|.
name|put
argument_list|(
name|p
operator|.
name|getKey
argument_list|()
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|marshal (Map<String, String> value)
specifier|public
name|PropertyDefinitions
name|marshal
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|PropertyDefinitions
name|ret
init|=
operator|new
name|PropertyDefinitions
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|PropertyDefinition
argument_list|>
name|properties
init|=
name|ret
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|value
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|properties
operator|.
name|add
argument_list|(
operator|new
name|PropertyDefinition
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

