begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_class
DECL|class|LogDefinitionPropertiesProvider
specifier|public
class|class
name|LogDefinitionPropertiesProvider
implements|implements
name|PropertyPlaceholderAware
block|{
DECL|field|definition
specifier|private
specifier|final
name|LogDefinition
name|definition
decl_stmt|;
DECL|field|readPlaceholders
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|readPlaceholders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|writePlaceholders
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Consumer
argument_list|<
name|String
argument_list|>
argument_list|>
name|writePlaceholders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|LogDefinitionPropertiesProvider (Object obj)
specifier|public
name|LogDefinitionPropertiesProvider
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|this
operator|.
name|definition
operator|=
operator|(
name|LogDefinition
operator|)
name|obj
expr_stmt|;
name|readPlaceholders
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|definition
operator|::
name|getId
argument_list|)
expr_stmt|;
name|readPlaceholders
operator|.
name|put
argument_list|(
literal|"message"
argument_list|,
name|definition
operator|::
name|getMessage
argument_list|)
expr_stmt|;
name|readPlaceholders
operator|.
name|put
argument_list|(
literal|"logName"
argument_list|,
name|definition
operator|::
name|getLogName
argument_list|)
expr_stmt|;
name|readPlaceholders
operator|.
name|put
argument_list|(
literal|"marker"
argument_list|,
name|definition
operator|::
name|getMarker
argument_list|)
expr_stmt|;
name|readPlaceholders
operator|.
name|put
argument_list|(
literal|"loggerRef"
argument_list|,
name|definition
operator|::
name|getLoggerRef
argument_list|)
expr_stmt|;
name|writePlaceholders
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|definition
operator|::
name|setId
argument_list|)
expr_stmt|;
name|writePlaceholders
operator|.
name|put
argument_list|(
literal|"message"
argument_list|,
name|definition
operator|::
name|setMessage
argument_list|)
expr_stmt|;
name|writePlaceholders
operator|.
name|put
argument_list|(
literal|"logName"
argument_list|,
name|definition
operator|::
name|setLogName
argument_list|)
expr_stmt|;
name|writePlaceholders
operator|.
name|put
argument_list|(
literal|"marker"
argument_list|,
name|definition
operator|::
name|setMarker
argument_list|)
expr_stmt|;
name|writePlaceholders
operator|.
name|put
argument_list|(
literal|"loggerRef"
argument_list|,
name|definition
operator|::
name|setLoggerRef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReadPropertyPlaceholderOptions (CamelContext camelContext)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
argument_list|>
name|getReadPropertyPlaceholderOptions
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
return|return
name|readPlaceholders
return|;
block|}
annotation|@
name|Override
DECL|method|getWritePropertyPlaceholderOptions (CamelContext camelContext)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Consumer
argument_list|<
name|String
argument_list|>
argument_list|>
name|getWritePropertyPlaceholderOptions
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
return|return
name|writePlaceholders
return|;
block|}
block|}
end_class

end_unit

