begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CatalogCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|FailedToStartRouteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilderSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheckRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
operator|.
name|AbstractCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
operator|.
name|BaseRouteService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|transformer
operator|.
name|TransformerKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|validator
operator|.
name|ValidatorKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|HystrixConfigurationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinitionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinitionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RoutesDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|cloud
operator|.
name|ServiceCallConfigurationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestsDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|transformer
operator|.
name|TransformerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|validator
operator|.
name|ValidatorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|MulticastProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
operator|.
name|RouteReifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
operator|.
name|dataformat
operator|.
name|DataFormatReifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|runtimecatalog
operator|.
name|RuntimeCamelCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|TransformerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ValidatorRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_comment
comment|/**  * Represents the context used to configure routes and the policies to use.  */
end_comment

begin_class
DECL|class|AbstractModelCamelContext
specifier|public
specifier|abstract
class|class
name|AbstractModelCamelContext
extends|extends
name|AbstractCamelContext
implements|implements
name|ModelCamelContext
implements|,
name|CatalogCamelContext
block|{
DECL|field|routeDefinitions
specifier|private
specifier|final
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|routeDefinitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|restDefinitions
specifier|private
specifier|final
name|List
argument_list|<
name|RestDefinition
argument_list|>
name|restDefinitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|dataFormats
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DataFormatDefinition
argument_list|>
name|dataFormats
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|transformers
specifier|private
name|List
argument_list|<
name|TransformerDefinition
argument_list|>
name|transformers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|validators
specifier|private
name|List
argument_list|<
name|ValidatorDefinition
argument_list|>
name|validators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|serviceCallConfigurations
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ServiceCallConfigurationDefinition
argument_list|>
name|serviceCallConfigurations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|hystrixConfigurations
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|HystrixConfigurationDefinition
argument_list|>
name|hystrixConfigurations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Creates the {@link CamelContext} using      * {@link org.apache.camel.support.DefaultRegistry} as registry.      *<p/>      * Use one of the other constructors to force use an explicit registry.      */
DECL|method|AbstractModelCamelContext ()
specifier|public
name|AbstractModelCamelContext
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates the {@link CamelContext} using the given registry      *      * @param registry the registry      */
DECL|method|AbstractModelCamelContext (Registry registry)
specifier|public
name|AbstractModelCamelContext
parameter_list|(
name|Registry
name|registry
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setRegistry
argument_list|(
name|registry
argument_list|)
expr_stmt|;
block|}
DECL|method|AbstractModelCamelContext (boolean init)
specifier|public
name|AbstractModelCamelContext
parameter_list|(
name|boolean
name|init
parameter_list|)
block|{
name|super
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setDefaultExtension
argument_list|(
name|HealthCheckRegistry
operator|.
name|class
argument_list|,
name|this
operator|::
name|createHealthCheckRegistry
argument_list|)
expr_stmt|;
name|setDefaultExtension
argument_list|(
name|RuntimeCamelCatalog
operator|.
name|class
argument_list|,
name|this
operator|::
name|createRuntimeCamelCatalog
argument_list|)
expr_stmt|;
if|if
condition|(
name|init
condition|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addRouteDefinitions (InputStream is)
specifier|public
name|void
name|addRouteDefinitions
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|Exception
block|{
name|RoutesDefinition
name|def
init|=
name|ModelHelper
operator|.
name|loadRoutesDefinition
argument_list|(
name|this
argument_list|,
name|is
argument_list|)
decl_stmt|;
if|if
condition|(
name|def
operator|!=
literal|null
condition|)
block|{
name|addRouteDefinitions
argument_list|(
name|def
operator|.
name|getRoutes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addRouteDefinitions (Collection<RouteDefinition> routeDefinitions)
specifier|public
specifier|synchronized
name|void
name|addRouteDefinitions
parameter_list|(
name|Collection
argument_list|<
name|RouteDefinition
argument_list|>
name|routeDefinitions
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|routeDefinitions
operator|==
literal|null
operator|||
name|routeDefinitions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|removeRouteDefinitions
argument_list|(
name|routeDefinitions
argument_list|)
expr_stmt|;
name|this
operator|.
name|routeDefinitions
operator|.
name|addAll
argument_list|(
name|routeDefinitions
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldStartRoutes
argument_list|()
condition|)
block|{
name|startRouteDefinitions
argument_list|(
name|routeDefinitions
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addRouteDefinition (RouteDefinition routeDefinition)
specifier|public
name|void
name|addRouteDefinition
parameter_list|(
name|RouteDefinition
name|routeDefinition
parameter_list|)
throws|throws
name|Exception
block|{
name|addRouteDefinitions
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|routeDefinition
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|removeRouteDefinitions (Collection<RouteDefinition> routeDefinitions)
specifier|public
specifier|synchronized
name|void
name|removeRouteDefinitions
parameter_list|(
name|Collection
argument_list|<
name|RouteDefinition
argument_list|>
name|routeDefinitions
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|RouteDefinition
name|routeDefinition
range|:
name|routeDefinitions
control|)
block|{
name|removeRouteDefinition
argument_list|(
name|routeDefinition
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeRouteDefinition (RouteDefinition routeDefinition)
specifier|public
specifier|synchronized
name|void
name|removeRouteDefinition
parameter_list|(
name|RouteDefinition
name|routeDefinition
parameter_list|)
throws|throws
name|Exception
block|{
name|RouteDefinition
name|toBeRemoved
init|=
name|routeDefinition
decl_stmt|;
name|String
name|id
init|=
name|routeDefinition
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
comment|// remove existing route
name|stopRoute
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|removeRoute
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|toBeRemoved
operator|=
name|getRouteDefinition
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|routeDefinitions
operator|.
name|remove
argument_list|(
name|toBeRemoved
argument_list|)
expr_stmt|;
block|}
DECL|method|getRouteDefinitions ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|getRouteDefinitions
parameter_list|()
block|{
return|return
name|routeDefinitions
return|;
block|}
DECL|method|getRouteDefinition (String id)
specifier|public
specifier|synchronized
name|RouteDefinition
name|getRouteDefinition
parameter_list|(
name|String
name|id
parameter_list|)
block|{
for|for
control|(
name|RouteDefinition
name|route
range|:
name|routeDefinitions
control|)
block|{
if|if
condition|(
name|route
operator|.
name|idOrCreate
argument_list|(
name|getNodeIdFactory
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|route
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getRestDefinitions ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|RestDefinition
argument_list|>
name|getRestDefinitions
parameter_list|()
block|{
return|return
name|restDefinitions
return|;
block|}
DECL|method|addRestDefinitions (InputStream is, boolean addToRoutes)
specifier|public
name|void
name|addRestDefinitions
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|boolean
name|addToRoutes
parameter_list|)
throws|throws
name|Exception
block|{
name|RestsDefinition
name|rests
init|=
name|ModelHelper
operator|.
name|loadRestsDefinition
argument_list|(
name|this
argument_list|,
name|is
argument_list|)
decl_stmt|;
if|if
condition|(
name|rests
operator|!=
literal|null
condition|)
block|{
name|addRestDefinitions
argument_list|(
name|rests
operator|.
name|getRests
argument_list|()
argument_list|,
name|addToRoutes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addRestDefinitions (Collection<RestDefinition> restDefinitions, boolean addToRoutes)
specifier|public
specifier|synchronized
name|void
name|addRestDefinitions
parameter_list|(
name|Collection
argument_list|<
name|RestDefinition
argument_list|>
name|restDefinitions
parameter_list|,
name|boolean
name|addToRoutes
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|restDefinitions
operator|==
literal|null
operator|||
name|restDefinitions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|restDefinitions
operator|.
name|addAll
argument_list|(
name|restDefinitions
argument_list|)
expr_stmt|;
if|if
condition|(
name|addToRoutes
condition|)
block|{
comment|// rests are also routes so need to add them there too
for|for
control|(
specifier|final
name|RestDefinition
name|restDefinition
range|:
name|restDefinitions
control|)
block|{
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|routeDefinitions
init|=
name|restDefinition
operator|.
name|asRouteDefinition
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|addRouteDefinitions
argument_list|(
name|routeDefinitions
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getServiceCallConfiguration (String serviceName)
specifier|public
name|ServiceCallConfigurationDefinition
name|getServiceCallConfiguration
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
if|if
condition|(
name|serviceName
operator|==
literal|null
condition|)
block|{
name|serviceName
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|serviceCallConfigurations
operator|.
name|get
argument_list|(
name|serviceName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setServiceCallConfiguration (ServiceCallConfigurationDefinition configuration)
specifier|public
name|void
name|setServiceCallConfiguration
parameter_list|(
name|ServiceCallConfigurationDefinition
name|configuration
parameter_list|)
block|{
name|serviceCallConfigurations
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setServiceCallConfigurations (List<ServiceCallConfigurationDefinition> configurations)
specifier|public
name|void
name|setServiceCallConfigurations
parameter_list|(
name|List
argument_list|<
name|ServiceCallConfigurationDefinition
argument_list|>
name|configurations
parameter_list|)
block|{
if|if
condition|(
name|configurations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServiceCallConfigurationDefinition
name|configuration
range|:
name|configurations
control|)
block|{
name|serviceCallConfigurations
operator|.
name|put
argument_list|(
name|configuration
operator|.
name|getId
argument_list|()
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|addServiceCallConfiguration (String serviceName, ServiceCallConfigurationDefinition configuration)
specifier|public
name|void
name|addServiceCallConfiguration
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|ServiceCallConfigurationDefinition
name|configuration
parameter_list|)
block|{
name|serviceCallConfigurations
operator|.
name|put
argument_list|(
name|serviceName
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getHystrixConfiguration (String id)
specifier|public
name|HystrixConfigurationDefinition
name|getHystrixConfiguration
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|hystrixConfigurations
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setHystrixConfiguration (HystrixConfigurationDefinition configuration)
specifier|public
name|void
name|setHystrixConfiguration
parameter_list|(
name|HystrixConfigurationDefinition
name|configuration
parameter_list|)
block|{
name|hystrixConfigurations
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setHystrixConfigurations (List<HystrixConfigurationDefinition> configurations)
specifier|public
name|void
name|setHystrixConfigurations
parameter_list|(
name|List
argument_list|<
name|HystrixConfigurationDefinition
argument_list|>
name|configurations
parameter_list|)
block|{
if|if
condition|(
name|configurations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HystrixConfigurationDefinition
name|configuration
range|:
name|configurations
control|)
block|{
name|hystrixConfigurations
operator|.
name|put
argument_list|(
name|configuration
operator|.
name|getId
argument_list|()
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|addHystrixConfiguration (String id, HystrixConfigurationDefinition configuration)
specifier|public
name|void
name|addHystrixConfiguration
parameter_list|(
name|String
name|id
parameter_list|,
name|HystrixConfigurationDefinition
name|configuration
parameter_list|)
block|{
name|hystrixConfigurations
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resolveDataFormatDefinition (String name)
specifier|public
name|DataFormatDefinition
name|resolveDataFormatDefinition
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// lookup type and create the data format from it
name|DataFormatDefinition
name|type
init|=
name|lookup
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|DataFormatDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|&&
name|getDataFormats
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|getDataFormats
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
annotation|@
name|Override
DECL|method|getProcessorDefinition (String id)
specifier|public
name|ProcessorDefinition
name|getProcessorDefinition
parameter_list|(
name|String
name|id
parameter_list|)
block|{
for|for
control|(
name|RouteDefinition
name|route
range|:
name|getRouteDefinitions
argument_list|()
control|)
block|{
name|Iterator
argument_list|<
name|ProcessorDefinition
argument_list|>
name|it
init|=
name|ProcessorDefinitionHelper
operator|.
name|filterTypeInOutputs
argument_list|(
name|route
operator|.
name|getOutputs
argument_list|()
argument_list|,
name|ProcessorDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ProcessorDefinition
name|proc
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|proc
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|proc
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getProcessorDefinition (String id, Class<T> type)
specifier|public
parameter_list|<
name|T
extends|extends
name|ProcessorDefinition
parameter_list|>
name|T
name|getProcessorDefinition
parameter_list|(
name|String
name|id
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|ProcessorDefinition
name|answer
init|=
name|getProcessorDefinition
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|answer
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setDataFormats (Map<String, DataFormatDefinition> dataFormats)
specifier|public
name|void
name|setDataFormats
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|DataFormatDefinition
argument_list|>
name|dataFormats
parameter_list|)
block|{
name|this
operator|.
name|dataFormats
operator|=
name|dataFormats
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDataFormats ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|DataFormatDefinition
argument_list|>
name|getDataFormats
parameter_list|()
block|{
return|return
name|dataFormats
return|;
block|}
annotation|@
name|Override
DECL|method|setTransformers (List<TransformerDefinition> transformers)
specifier|public
name|void
name|setTransformers
parameter_list|(
name|List
argument_list|<
name|TransformerDefinition
argument_list|>
name|transformers
parameter_list|)
block|{
name|this
operator|.
name|transformers
operator|=
name|transformers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTransformers ()
specifier|public
name|List
argument_list|<
name|TransformerDefinition
argument_list|>
name|getTransformers
parameter_list|()
block|{
return|return
name|transformers
return|;
block|}
annotation|@
name|Override
DECL|method|setValidators (List<ValidatorDefinition> validators)
specifier|public
name|void
name|setValidators
parameter_list|(
name|List
argument_list|<
name|ValidatorDefinition
argument_list|>
name|validators
parameter_list|)
block|{
name|this
operator|.
name|validators
operator|=
name|validators
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValidators ()
specifier|public
name|List
argument_list|<
name|ValidatorDefinition
argument_list|>
name|getValidators
parameter_list|()
block|{
return|return
name|validators
return|;
block|}
DECL|method|createValidatorRegistry ()
specifier|protected
name|ValidatorRegistry
argument_list|<
name|ValidatorKey
argument_list|>
name|createValidatorRegistry
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|DefaultValidatorRegistry
argument_list|(
name|this
argument_list|,
name|getValidators
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createTransformerRegistry ()
specifier|protected
name|TransformerRegistry
argument_list|<
name|TransformerKey
argument_list|>
name|createTransformerRegistry
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|DefaultTransformerRegistry
argument_list|(
name|this
argument_list|,
name|getTransformers
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createHealthCheckRegistry ()
specifier|protected
specifier|abstract
name|HealthCheckRegistry
name|createHealthCheckRegistry
parameter_list|()
function_decl|;
DECL|method|createRuntimeCamelCatalog ()
specifier|protected
specifier|abstract
name|RuntimeCamelCatalog
name|createRuntimeCamelCatalog
parameter_list|()
function_decl|;
DECL|method|doStartStandardServices ()
specifier|protected
name|void
name|doStartStandardServices
parameter_list|()
block|{
name|super
operator|.
name|doStartStandardServices
argument_list|()
expr_stmt|;
name|getExtension
argument_list|(
name|RuntimeCamelCatalog
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|doStartEagerServices ()
specifier|protected
name|void
name|doStartEagerServices
parameter_list|()
block|{
name|getExtension
argument_list|(
name|HealthCheckRegistry
operator|.
name|class
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStartEagerServices
argument_list|()
expr_stmt|;
block|}
DECL|method|startRouteDefinitions (Collection<RouteDefinition> list)
specifier|protected
name|void
name|startRouteDefinitions
parameter_list|(
name|Collection
argument_list|<
name|RouteDefinition
argument_list|>
name|list
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RouteDefinition
name|route
range|:
name|list
control|)
block|{
name|startRoute
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|bindDataFormats ()
specifier|protected
name|void
name|bindDataFormats
parameter_list|()
throws|throws
name|Exception
block|{
comment|// eager lookup data formats and bind to registry so the dataformats can
comment|// be looked up and used
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataFormatDefinition
argument_list|>
name|e
range|:
name|dataFormats
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|id
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|DataFormatDefinition
name|def
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Creating Dataformat with id: {} and definition: {}"
argument_list|,
name|id
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|DataFormat
name|df
init|=
name|DataFormatReifier
operator|.
name|reifier
argument_list|(
name|def
argument_list|)
operator|.
name|createDataFormat
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|addService
argument_list|(
name|df
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
name|id
argument_list|,
name|df
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|startRoute (RouteDefinition routeDefinition)
specifier|public
name|void
name|startRoute
parameter_list|(
name|RouteDefinition
name|routeDefinition
parameter_list|)
throws|throws
name|Exception
block|{
comment|// assign ids to the routes and validate that the id's is all unique
name|RouteDefinitionHelper
operator|.
name|forceAssignIds
argument_list|(
name|this
argument_list|,
name|routeDefinitions
argument_list|)
expr_stmt|;
name|String
name|duplicate
init|=
name|RouteDefinitionHelper
operator|.
name|validateUniqueIds
argument_list|(
name|routeDefinition
argument_list|,
name|routeDefinitions
argument_list|)
decl_stmt|;
if|if
condition|(
name|duplicate
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|FailedToStartRouteException
argument_list|(
name|routeDefinition
operator|.
name|getId
argument_list|()
argument_list|,
literal|"duplicate id detected: "
operator|+
name|duplicate
operator|+
literal|". Please correct ids to be unique among all your routes."
argument_list|)
throw|;
block|}
comment|// indicate we are staring the route using this thread so
comment|// we are able to query this if needed
name|setStartingRoutes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
comment|// must ensure route is prepared, before we can start it
if|if
condition|(
operator|!
name|routeDefinition
operator|.
name|isPrepared
argument_list|()
condition|)
block|{
name|RouteDefinitionHelper
operator|.
name|prepareRoute
argument_list|(
name|this
argument_list|,
name|routeDefinition
argument_list|)
expr_stmt|;
name|routeDefinition
operator|.
name|markPrepared
argument_list|()
expr_stmt|;
block|}
name|Route
name|route
init|=
operator|new
name|RouteReifier
argument_list|(
name|routeDefinition
argument_list|)
operator|.
name|addRoutes
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|RouteService
name|routeService
init|=
operator|new
name|RouteService
argument_list|(
name|this
argument_list|,
name|routeDefinition
argument_list|,
name|route
operator|.
name|getRouteContext
argument_list|()
argument_list|,
name|route
argument_list|)
decl_stmt|;
name|startRouteService
argument_list|(
name|routeService
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// we are done staring routes
name|setStartingRoutes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|shutdownRouteService (BaseRouteService routeService)
specifier|protected
specifier|synchronized
name|void
name|shutdownRouteService
parameter_list|(
name|BaseRouteService
name|routeService
parameter_list|)
throws|throws
name|Exception
block|{
comment|// remove the route from ErrorHandlerBuilder if possible
if|if
condition|(
name|getErrorHandlerFactory
argument_list|()
operator|instanceof
name|ErrorHandlerBuilderSupport
condition|)
block|{
name|ErrorHandlerBuilderSupport
name|builder
init|=
operator|(
name|ErrorHandlerBuilderSupport
operator|)
name|getErrorHandlerFactory
argument_list|()
decl_stmt|;
name|builder
operator|.
name|removeOnExceptionList
argument_list|(
name|routeService
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|routeService
operator|instanceof
name|RouteService
condition|)
block|{
name|routeDefinitions
operator|.
name|removeIf
argument_list|(
name|route
lambda|->
name|route
operator|==
operator|(
operator|(
name|RouteService
operator|)
name|routeService
operator|)
operator|.
name|getRouteDefinition
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|shutdownRouteService
argument_list|(
name|routeService
argument_list|)
expr_stmt|;
block|}
DECL|method|isStreamCachingInUse ()
specifier|protected
name|boolean
name|isStreamCachingInUse
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|streamCachingInUse
init|=
name|super
operator|.
name|isStreamCachingInUse
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|streamCachingInUse
condition|)
block|{
for|for
control|(
name|RouteDefinition
name|route
range|:
name|routeDefinitions
control|)
block|{
name|Boolean
name|routeCache
init|=
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|this
argument_list|,
name|route
operator|.
name|getStreamCache
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeCache
operator|!=
literal|null
operator|&&
name|routeCache
condition|)
block|{
name|streamCachingInUse
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|streamCachingInUse
return|;
block|}
annotation|@
name|Override
DECL|method|startRouteDefinitions ()
specifier|protected
name|void
name|startRouteDefinitions
parameter_list|()
throws|throws
name|Exception
block|{
name|startRouteDefinitions
argument_list|(
name|routeDefinitions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createMulticast (Collection<Processor> processors, ExecutorService executor, boolean shutdownExecutorService)
specifier|public
name|AsyncProcessor
name|createMulticast
parameter_list|(
name|Collection
argument_list|<
name|Processor
argument_list|>
name|processors
parameter_list|,
name|ExecutorService
name|executor
parameter_list|,
name|boolean
name|shutdownExecutorService
parameter_list|)
block|{
return|return
operator|new
name|MulticastProcessor
argument_list|(
name|this
argument_list|,
name|processors
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|executor
argument_list|,
name|shutdownExecutorService
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

