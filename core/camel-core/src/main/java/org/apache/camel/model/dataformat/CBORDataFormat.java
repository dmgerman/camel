begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * CBOR data format is used for unmarshal a CBOR payload to POJO or to marshal  * POJO back to CBOR payload.  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|firstVersion
operator|=
literal|"3.0.0"
argument_list|,
name|label
operator|=
literal|"dataformat,transformation,json"
argument_list|,
name|title
operator|=
literal|"CBOR"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"cbor"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|CBORDataFormat
specifier|public
class|class
name|CBORDataFormat
extends|extends
name|DataFormatDefinition
block|{
annotation|@
name|XmlAttribute
DECL|field|objectMapper
specifier|private
name|String
name|objectMapper
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|useDefaultObjectMapper
specifier|private
name|Boolean
name|useDefaultObjectMapper
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|unmarshalType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|collectionType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|collectionType
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|useList
specifier|private
name|Boolean
name|useList
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|allowUnmarshallType
specifier|private
name|Boolean
name|allowUnmarshallType
decl_stmt|;
DECL|method|CBORDataFormat ()
specifier|public
name|CBORDataFormat
parameter_list|()
block|{
name|super
argument_list|(
literal|"cbor"
argument_list|)
expr_stmt|;
block|}
DECL|method|getObjectMapper ()
specifier|public
name|String
name|getObjectMapper
parameter_list|()
block|{
return|return
name|objectMapper
return|;
block|}
comment|/**      * Lookup and use the existing CBOR ObjectMapper with the given id when using      * Jackson.      */
DECL|method|setObjectMapper (String objectMapper)
specifier|public
name|void
name|setObjectMapper
parameter_list|(
name|String
name|objectMapper
parameter_list|)
block|{
name|this
operator|.
name|objectMapper
operator|=
name|objectMapper
expr_stmt|;
block|}
DECL|method|getUseDefaultObjectMapper ()
specifier|public
name|Boolean
name|getUseDefaultObjectMapper
parameter_list|()
block|{
return|return
name|useDefaultObjectMapper
return|;
block|}
comment|/**      * Whether to lookup and use default Jackson CBOR ObjectMapper from the registry.      */
DECL|method|setUseDefaultObjectMapper (Boolean useDefaultObjectMapper)
specifier|public
name|void
name|setUseDefaultObjectMapper
parameter_list|(
name|Boolean
name|useDefaultObjectMapper
parameter_list|)
block|{
name|this
operator|.
name|useDefaultObjectMapper
operator|=
name|useDefaultObjectMapper
expr_stmt|;
block|}
DECL|method|getUnmarshalType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getUnmarshalType
parameter_list|()
block|{
return|return
name|unmarshalType
return|;
block|}
comment|/**      * Class of the java type to use when unarmshalling      */
DECL|method|setUnmarshalType (Class<?> unmarshalType)
specifier|public
name|void
name|setUnmarshalType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|)
block|{
name|this
operator|.
name|unmarshalType
operator|=
name|unmarshalType
expr_stmt|;
block|}
DECL|method|getCollectionType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getCollectionType
parameter_list|()
block|{
return|return
name|collectionType
return|;
block|}
DECL|method|setCollectionType (Class<?> collectionType)
specifier|public
name|void
name|setCollectionType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|collectionType
parameter_list|)
block|{
name|this
operator|.
name|collectionType
operator|=
name|collectionType
expr_stmt|;
block|}
DECL|method|getUseList ()
specifier|public
name|Boolean
name|getUseList
parameter_list|()
block|{
return|return
name|useList
return|;
block|}
comment|/**      * To unarmshal to a List of Map or a List of Pojo.      */
DECL|method|setUseList (Boolean useList)
specifier|public
name|void
name|setUseList
parameter_list|(
name|Boolean
name|useList
parameter_list|)
block|{
name|this
operator|.
name|useList
operator|=
name|useList
expr_stmt|;
block|}
DECL|method|getAllowUnmarshallType ()
specifier|public
name|Boolean
name|getAllowUnmarshallType
parameter_list|()
block|{
return|return
name|allowUnmarshallType
return|;
block|}
comment|/**      * If enabled then Jackson is allowed to attempt to use the      * CamelJacksonUnmarshalType header during the unmarshalling.      *<p/>      * This should only be enabled when desired to be used.      */
DECL|method|setAllowUnmarshallType (Boolean allowUnmarshallType)
specifier|public
name|void
name|setAllowUnmarshallType
parameter_list|(
name|Boolean
name|allowUnmarshallType
parameter_list|)
block|{
name|this
operator|.
name|allowUnmarshallType
operator|=
name|allowUnmarshallType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDataFormatName ()
specifier|public
name|String
name|getDataFormatName
parameter_list|()
block|{
return|return
literal|"cbor"
return|;
block|}
block|}
end_class

end_unit

