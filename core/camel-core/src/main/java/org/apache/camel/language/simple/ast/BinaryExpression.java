begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.simple.ast
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|ast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|PredicateBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ValueBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|types
operator|.
name|BinaryOperatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|types
operator|.
name|SimpleIllegalSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|types
operator|.
name|SimpleParserException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|types
operator|.
name|SimpleToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Represents a binary expression in the AST.  */
end_comment

begin_class
DECL|class|BinaryExpression
specifier|public
class|class
name|BinaryExpression
extends|extends
name|BaseSimpleNode
block|{
comment|// this is special for the range operator where you define the range as from..to (where from and to are numbers)
DECL|field|RANGE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|RANGE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(\\d+)(\\.\\.)(\\d+)$"
argument_list|)
decl_stmt|;
DECL|field|operator
specifier|private
specifier|final
name|BinaryOperatorType
name|operator
decl_stmt|;
DECL|field|left
specifier|private
name|SimpleNode
name|left
decl_stmt|;
DECL|field|right
specifier|private
name|SimpleNode
name|right
decl_stmt|;
DECL|method|BinaryExpression (SimpleToken token)
specifier|public
name|BinaryExpression
parameter_list|(
name|SimpleToken
name|token
parameter_list|)
block|{
name|super
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|operator
operator|=
name|BinaryOperatorType
operator|.
name|asOperator
argument_list|(
name|token
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|left
operator|+
literal|" "
operator|+
name|token
operator|.
name|getText
argument_list|()
operator|+
literal|" "
operator|+
name|right
return|;
block|}
DECL|method|acceptLeftNode (SimpleNode lef)
specifier|public
name|boolean
name|acceptLeftNode
parameter_list|(
name|SimpleNode
name|lef
parameter_list|)
block|{
name|this
operator|.
name|left
operator|=
name|lef
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|acceptRightNode (SimpleNode right)
specifier|public
name|boolean
name|acceptRightNode
parameter_list|(
name|SimpleNode
name|right
parameter_list|)
block|{
name|this
operator|.
name|right
operator|=
name|right
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|getOperator ()
specifier|public
name|BinaryOperatorType
name|getOperator
parameter_list|()
block|{
return|return
name|operator
return|;
block|}
annotation|@
name|Override
DECL|method|createExpression (String expression)
specifier|public
name|Expression
name|createExpression
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|left
argument_list|,
literal|"left node"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|right
argument_list|,
literal|"right node"
argument_list|,
name|this
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|leftExp
init|=
name|left
operator|.
name|createExpression
argument_list|(
name|expression
argument_list|)
decl_stmt|;
specifier|final
name|Expression
name|rightExp
init|=
name|right
operator|.
name|createExpression
argument_list|(
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|EQ
condition|)
block|{
return|return
name|createExpression
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|,
name|PredicateBuilder
operator|.
name|isEqualTo
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|EQ_IGNORE
condition|)
block|{
return|return
name|createExpression
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|,
name|PredicateBuilder
operator|.
name|isEqualToIgnoreCase
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|GT
condition|)
block|{
return|return
name|createExpression
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|,
name|PredicateBuilder
operator|.
name|isGreaterThan
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|GTE
condition|)
block|{
return|return
name|createExpression
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|,
name|PredicateBuilder
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|LT
condition|)
block|{
return|return
name|createExpression
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|,
name|PredicateBuilder
operator|.
name|isLessThan
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|LTE
condition|)
block|{
return|return
name|createExpression
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|,
name|PredicateBuilder
operator|.
name|isLessThanOrEqualTo
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|NOT_EQ
condition|)
block|{
return|return
name|createExpression
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|,
name|PredicateBuilder
operator|.
name|isNotEqualTo
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|CONTAINS
condition|)
block|{
return|return
name|createExpression
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|,
name|PredicateBuilder
operator|.
name|contains
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|NOT_CONTAINS
condition|)
block|{
return|return
name|createExpression
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|,
name|PredicateBuilder
operator|.
name|not
argument_list|(
name|PredicateBuilder
operator|.
name|contains
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|CONTAINS_IGNORECASE
condition|)
block|{
return|return
name|createExpression
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|,
name|PredicateBuilder
operator|.
name|containsIgnoreCase
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|IS
operator|||
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|NOT_IS
condition|)
block|{
return|return
name|createIsExpression
argument_list|(
name|expression
argument_list|,
name|leftExp
argument_list|,
name|rightExp
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|REGEX
operator|||
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|NOT_REGEX
condition|)
block|{
return|return
name|createRegexExpression
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|IN
operator|||
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|NOT_IN
condition|)
block|{
return|return
name|createInExpression
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|RANGE
operator|||
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|NOT_RANGE
condition|)
block|{
return|return
name|createRangeExpression
argument_list|(
name|expression
argument_list|,
name|leftExp
argument_list|,
name|rightExp
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|STARTS_WITH
condition|)
block|{
return|return
name|createExpression
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|,
name|PredicateBuilder
operator|.
name|startsWith
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|ENDS_WITH
condition|)
block|{
return|return
name|createExpression
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|,
name|PredicateBuilder
operator|.
name|endsWith
argument_list|(
name|leftExp
argument_list|,
name|rightExp
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|SimpleParserException
argument_list|(
literal|"Unknown binary operator "
operator|+
name|operator
argument_list|,
name|token
operator|.
name|getIndex
argument_list|()
argument_list|)
throw|;
block|}
DECL|method|createIsExpression (final String expression, final Expression leftExp, final Expression rightExp)
specifier|private
name|Expression
name|createIsExpression
parameter_list|(
specifier|final
name|String
name|expression
parameter_list|,
specifier|final
name|Expression
name|leftExp
parameter_list|,
specifier|final
name|Expression
name|rightExp
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Predicate
name|predicate
decl_stmt|;
name|String
name|name
init|=
name|rightExp
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
literal|"null"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SimpleIllegalSyntaxException
argument_list|(
name|expression
argument_list|,
name|right
operator|.
name|getToken
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|,
name|operator
operator|+
literal|" operator cannot accept null. A class type must be provided."
argument_list|)
throw|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|rightType
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|rightType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SimpleIllegalSyntaxException
argument_list|(
name|expression
argument_list|,
name|right
operator|.
name|getToken
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|,
name|operator
operator|+
literal|" operator cannot find class with name: "
operator|+
name|name
argument_list|)
throw|;
block|}
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|isInstanceOf
argument_list|(
name|leftExp
argument_list|,
name|rightType
argument_list|)
expr_stmt|;
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|NOT_IS
condition|)
block|{
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|not
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
block|}
name|boolean
name|answer
init|=
name|predicate
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|answer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|left
operator|+
literal|" "
operator|+
name|token
operator|.
name|getText
argument_list|()
operator|+
literal|" "
operator|+
name|right
return|;
block|}
block|}
return|;
block|}
DECL|method|createRegexExpression (final Expression leftExp, final Expression rightExp)
specifier|private
name|Expression
name|createRegexExpression
parameter_list|(
specifier|final
name|Expression
name|leftExp
parameter_list|,
specifier|final
name|Expression
name|rightExp
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
comment|// reg ex should use String pattern, so we evaluate the right hand side as a String
name|Predicate
name|predicate
init|=
name|PredicateBuilder
operator|.
name|regex
argument_list|(
name|leftExp
argument_list|,
name|rightExp
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|NOT_REGEX
condition|)
block|{
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|not
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
block|}
name|boolean
name|answer
init|=
name|predicate
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|answer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|left
operator|+
literal|" "
operator|+
name|token
operator|.
name|getText
argument_list|()
operator|+
literal|" "
operator|+
name|right
return|;
block|}
block|}
return|;
block|}
DECL|method|createInExpression (final Expression leftExp, final Expression rightExp)
specifier|private
name|Expression
name|createInExpression
parameter_list|(
specifier|final
name|Expression
name|leftExp
parameter_list|,
specifier|final
name|Expression
name|rightExp
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
comment|// okay the in operator is a bit more complex as we need to build a list of values
comment|// from the right hand side expression.
comment|// each element on the right hand side must be separated by comma (default for create iterator)
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|rightExp
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// then reuse value builder to create the in predicate with the list of values
name|ValueBuilder
name|vb
init|=
operator|new
name|ValueBuilder
argument_list|(
name|leftExp
argument_list|)
decl_stmt|;
name|Predicate
name|predicate
init|=
name|vb
operator|.
name|in
argument_list|(
name|values
operator|.
name|toArray
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|NOT_IN
condition|)
block|{
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|not
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
block|}
name|boolean
name|answer
init|=
name|predicate
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|answer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|left
operator|+
literal|" "
operator|+
name|token
operator|.
name|getText
argument_list|()
operator|+
literal|" "
operator|+
name|right
return|;
block|}
block|}
return|;
block|}
DECL|method|createRangeExpression (final String expression, final Expression leftExp, final Expression rightExp)
specifier|private
name|Expression
name|createRangeExpression
parameter_list|(
specifier|final
name|String
name|expression
parameter_list|,
specifier|final
name|Expression
name|leftExp
parameter_list|,
specifier|final
name|Expression
name|rightExp
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Predicate
name|predicate
decl_stmt|;
name|String
name|range
init|=
name|rightExp
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|RANGE_PATTERN
operator|.
name|matcher
argument_list|(
name|range
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// wrap as constant expression for the from and to values
name|Expression
name|from
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Expression
name|to
init|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
comment|// build a compound predicate for the range
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|isGreaterThanOrEqualTo
argument_list|(
name|leftExp
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|and
argument_list|(
name|predicate
argument_list|,
name|PredicateBuilder
operator|.
name|isLessThanOrEqualTo
argument_list|(
name|leftExp
argument_list|,
name|to
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SimpleIllegalSyntaxException
argument_list|(
name|expression
argument_list|,
name|right
operator|.
name|getToken
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|,
name|operator
operator|+
literal|" operator is not valid. Valid syntax:'from..to' (where from and to are numbers)."
argument_list|)
throw|;
block|}
if|if
condition|(
name|operator
operator|==
name|BinaryOperatorType
operator|.
name|NOT_RANGE
condition|)
block|{
name|predicate
operator|=
name|PredicateBuilder
operator|.
name|not
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
block|}
name|boolean
name|answer
init|=
name|predicate
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|answer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|left
operator|+
literal|" "
operator|+
name|token
operator|.
name|getText
argument_list|()
operator|+
literal|" "
operator|+
name|right
return|;
block|}
block|}
return|;
block|}
DECL|method|createExpression (final Expression left, final Expression right, final Predicate predicate)
specifier|private
name|Expression
name|createExpression
parameter_list|(
specifier|final
name|Expression
name|left
parameter_list|,
specifier|final
name|Expression
name|right
parameter_list|,
specifier|final
name|Predicate
name|predicate
parameter_list|)
block|{
return|return
operator|new
name|Expression
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|boolean
name|answer
init|=
name|predicate
operator|.
name|matches
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|answer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|left
operator|+
literal|" "
operator|+
name|token
operator|.
name|getText
argument_list|()
operator|+
literal|" "
operator|+
name|right
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

