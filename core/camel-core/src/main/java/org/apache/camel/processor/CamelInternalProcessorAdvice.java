begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Ordered
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementInterceptStrategy
operator|.
name|InstrumentationProcessor
import|;
end_import

begin_comment
comment|/**  * An advice (before and after) to execute cross cutting functionality in the Camel routing engine.  *<p/>  * The Camel routing engine will execute the {@link #before(org.apache.camel.Exchange)} and  * {@link #after(org.apache.camel.Exchange, Object)} methods during routing in correct order.  *  * @param<T>  * @see org.apache.camel.processor.CamelInternalProcessor  */
end_comment

begin_interface
DECL|interface|CamelInternalProcessorAdvice
specifier|public
interface|interface
name|CamelInternalProcessorAdvice
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**      * Callback executed before processing a step in the route.      *      * @param exchange  the current exchange      * @return any state to keep and provide as data to the {@link #after(org.apache.camel.Exchange, Object)} method, or use<tt>null</tt> for no state.      * @throws Exception is thrown if error during the call.      */
DECL|method|before (Exchange exchange)
name|T
name|before
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Callback executed after processing a step in the route.      *      * @param exchange  the current exchange      * @param data      the state, if any, returned in the {@link #before(org.apache.camel.Exchange)} method.      * @throws Exception is thrown if error during the call.      */
DECL|method|after (Exchange exchange, T data)
name|void
name|after
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|T
name|data
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Wrap an InstrumentationProcessor into a CamelInternalProcessorAdvice      */
DECL|method|wrap (InstrumentationProcessor<T> instrumentationProcessor)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|CamelInternalProcessorAdvice
argument_list|<
name|T
argument_list|>
name|wrap
parameter_list|(
name|InstrumentationProcessor
argument_list|<
name|T
argument_list|>
name|instrumentationProcessor
parameter_list|)
block|{
if|if
condition|(
name|instrumentationProcessor
operator|instanceof
name|CamelInternalProcessor
condition|)
block|{
return|return
operator|(
name|CamelInternalProcessorAdvice
argument_list|<
name|T
argument_list|>
operator|)
name|instrumentationProcessor
return|;
block|}
else|else
block|{
return|return
operator|new
name|CamelInternalProcessorAdviceWrapper
argument_list|<
name|T
argument_list|>
argument_list|(
name|instrumentationProcessor
argument_list|)
return|;
block|}
block|}
DECL|method|unwrap (CamelInternalProcessorAdvice<?> advice)
specifier|static
name|Object
name|unwrap
parameter_list|(
name|CamelInternalProcessorAdvice
argument_list|<
name|?
argument_list|>
name|advice
parameter_list|)
block|{
if|if
condition|(
name|advice
operator|instanceof
name|CamelInternalProcessorAdviceWrapper
condition|)
block|{
return|return
operator|(
operator|(
name|CamelInternalProcessorAdviceWrapper
operator|)
name|advice
operator|)
operator|.
name|unwrap
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|advice
return|;
block|}
block|}
DECL|class|CamelInternalProcessorAdviceWrapper
class|class
name|CamelInternalProcessorAdviceWrapper
parameter_list|<
name|T
parameter_list|>
implements|implements
name|CamelInternalProcessorAdvice
argument_list|<
name|T
argument_list|>
implements|,
name|Ordered
block|{
DECL|field|instrumentationProcessor
specifier|final
name|InstrumentationProcessor
argument_list|<
name|T
argument_list|>
name|instrumentationProcessor
decl_stmt|;
DECL|method|CamelInternalProcessorAdviceWrapper (InstrumentationProcessor<T> instrumentationProcessor)
specifier|public
name|CamelInternalProcessorAdviceWrapper
parameter_list|(
name|InstrumentationProcessor
argument_list|<
name|T
argument_list|>
name|instrumentationProcessor
parameter_list|)
block|{
name|this
operator|.
name|instrumentationProcessor
operator|=
name|instrumentationProcessor
expr_stmt|;
block|}
DECL|method|unwrap ()
name|InstrumentationProcessor
argument_list|<
name|T
argument_list|>
name|unwrap
parameter_list|()
block|{
return|return
name|instrumentationProcessor
return|;
block|}
annotation|@
name|Override
DECL|method|getOrder ()
specifier|public
name|int
name|getOrder
parameter_list|()
block|{
return|return
name|instrumentationProcessor
operator|.
name|getOrder
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|before (Exchange exchange)
specifier|public
name|T
name|before
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|instrumentationProcessor
operator|.
name|before
argument_list|(
name|exchange
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|after (Exchange exchange, T data)
specifier|public
name|void
name|after
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|T
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|instrumentationProcessor
operator|.
name|after
argument_list|(
name|exchange
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_interface

end_unit

