begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.reifier
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SagaActionUriDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SagaCompletionMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SagaDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SagaOptionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SagaPropagation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|saga
operator|.
name|SagaProcessorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|saga
operator|.
name|CamelSagaService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|saga
operator|.
name|CamelSagaStep
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_class
DECL|class|SagaReifier
class|class
name|SagaReifier
extends|extends
name|ProcessorReifier
argument_list|<
name|SagaDefinition
argument_list|>
block|{
DECL|method|SagaReifier (ProcessorDefinition<?> definition)
name|SagaReifier
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|SagaDefinition
operator|)
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Optional
argument_list|<
name|Endpoint
argument_list|>
name|compensationEndpoint
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|definition
operator|.
name|getCompensation
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|SagaActionUriDefinition
operator|::
name|getUri
argument_list|)
operator|.
name|map
argument_list|(
name|routeContext
operator|::
name|resolveEndpoint
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|Endpoint
argument_list|>
name|completionEndpoint
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|definition
operator|.
name|getCompletion
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|SagaActionUriDefinition
operator|::
name|getUri
argument_list|)
operator|.
name|map
argument_list|(
name|routeContext
operator|::
name|resolveEndpoint
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Expression
argument_list|>
name|optionsMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|getOptions
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SagaOptionDefinition
name|optionDef
range|:
name|definition
operator|.
name|getOptions
argument_list|()
control|)
block|{
name|String
name|optionName
init|=
name|optionDef
operator|.
name|getOptionName
argument_list|()
decl_stmt|;
name|Expression
name|expr
init|=
name|optionDef
operator|.
name|getExpression
argument_list|()
decl_stmt|;
name|optionsMap
operator|.
name|put
argument_list|(
name|optionName
argument_list|,
name|expr
argument_list|)
expr_stmt|;
block|}
block|}
name|CamelSagaStep
name|step
init|=
operator|new
name|CamelSagaStep
argument_list|(
name|compensationEndpoint
argument_list|,
name|completionEndpoint
argument_list|,
name|optionsMap
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|definition
operator|.
name|getTimeoutInMilliseconds
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SagaPropagation
name|propagation
init|=
name|definition
operator|.
name|getPropagation
argument_list|()
decl_stmt|;
if|if
condition|(
name|propagation
operator|==
literal|null
condition|)
block|{
comment|// default propagation mode
name|propagation
operator|=
name|SagaPropagation
operator|.
name|REQUIRED
expr_stmt|;
block|}
name|SagaCompletionMode
name|completionMode
init|=
name|definition
operator|.
name|getCompletionMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|completionMode
operator|==
literal|null
condition|)
block|{
comment|// default completion mode
name|completionMode
operator|=
name|SagaCompletionMode
operator|.
name|defaultCompletionMode
argument_list|()
expr_stmt|;
block|}
name|Processor
name|childProcessor
init|=
name|this
operator|.
name|createChildProcessor
argument_list|(
name|routeContext
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CamelSagaService
name|camelSagaService
init|=
name|findSagaService
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|)
decl_stmt|;
name|camelSagaService
operator|.
name|registerStep
argument_list|(
name|step
argument_list|)
expr_stmt|;
return|return
operator|new
name|SagaProcessorBuilder
argument_list|()
operator|.
name|camelContext
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|)
operator|.
name|childProcessor
argument_list|(
name|childProcessor
argument_list|)
operator|.
name|sagaService
argument_list|(
name|camelSagaService
argument_list|)
operator|.
name|step
argument_list|(
name|step
argument_list|)
operator|.
name|propagation
argument_list|(
name|propagation
argument_list|)
operator|.
name|completionMode
argument_list|(
name|completionMode
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|findSagaService (CamelContext context)
specifier|protected
name|CamelSagaService
name|findSagaService
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|CamelSagaService
name|sagaService
init|=
name|definition
operator|.
name|getSagaService
argument_list|()
decl_stmt|;
if|if
condition|(
name|sagaService
operator|!=
literal|null
condition|)
block|{
return|return
name|sagaService
return|;
block|}
name|sagaService
operator|=
name|context
operator|.
name|hasService
argument_list|(
name|CamelSagaService
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|sagaService
operator|!=
literal|null
condition|)
block|{
return|return
name|sagaService
return|;
block|}
name|sagaService
operator|=
name|CamelContextHelper
operator|.
name|findByType
argument_list|(
name|context
argument_list|,
name|CamelSagaService
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|sagaService
operator|!=
literal|null
condition|)
block|{
return|return
name|sagaService
return|;
block|}
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot find a CamelSagaService"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

