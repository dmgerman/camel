begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NamedNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
operator|.
name|DefaultNodeIdFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|FromDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|VerbDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|NodeIdFactory
import|;
end_import

begin_comment
comment|/**  * Factory for generating route ids based on uris.  *<p>  * For direct/seda routes it returns route name (direct:start -> start).  * For rest routes it returns its method and context path formatted as one string.  *<p>  * When id cannot be generated, falls back to other {@link NodeIdFactory} implementation.  * If none is passed in the constructor, then {@link DefaultNodeIdFactory} is used.  */
end_comment

begin_class
DECL|class|RouteIdFactory
specifier|public
class|class
name|RouteIdFactory
implements|implements
name|NodeIdFactory
block|{
DECL|field|SEPARATOR
specifier|private
specifier|static
specifier|final
name|char
name|SEPARATOR
init|=
literal|'-'
decl_stmt|;
DECL|field|defaultNodeIdFactory
specifier|private
name|NodeIdFactory
name|defaultNodeIdFactory
decl_stmt|;
DECL|method|RouteIdFactory ()
specifier|public
name|RouteIdFactory
parameter_list|()
block|{
name|defaultNodeIdFactory
operator|=
operator|new
name|DefaultNodeIdFactory
argument_list|()
expr_stmt|;
block|}
DECL|method|RouteIdFactory (NodeIdFactory defaultNodeIdFactory)
specifier|public
name|RouteIdFactory
parameter_list|(
name|NodeIdFactory
name|defaultNodeIdFactory
parameter_list|)
block|{
name|this
operator|.
name|defaultNodeIdFactory
operator|=
name|defaultNodeIdFactory
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createId (NamedNode definition)
specifier|public
name|String
name|createId
parameter_list|(
name|NamedNode
name|definition
parameter_list|)
block|{
if|if
condition|(
name|definition
operator|instanceof
name|RouteDefinition
condition|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|id
init|=
name|extractId
argument_list|(
operator|(
name|RouteDefinition
operator|)
name|definition
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|id
operator|.
name|get
argument_list|()
return|;
block|}
name|id
operator|=
name|extractIdFromRestDefinition
argument_list|(
operator|(
name|RouteDefinition
operator|)
name|definition
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|id
operator|.
name|get
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|definition
operator|instanceof
name|VerbDefinition
condition|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|id
init|=
name|extractIdFromVerb
argument_list|(
operator|(
name|VerbDefinition
operator|)
name|definition
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|id
operator|.
name|get
argument_list|()
return|;
block|}
block|}
return|return
name|defaultNodeIdFactory
operator|.
name|createId
argument_list|(
name|definition
argument_list|)
return|;
block|}
comment|/**      * Extract id from routes      */
DECL|method|extractId (RouteDefinition routeDefinition)
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|extractId
parameter_list|(
name|RouteDefinition
name|routeDefinition
parameter_list|)
block|{
if|if
condition|(
name|routeDefinition
operator|.
name|getRestDefinition
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
if|if
condition|(
name|routeDefinition
operator|.
name|getInput
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|FromDefinition
name|from
init|=
name|routeDefinition
operator|.
name|getInput
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
name|from
operator|.
name|getUri
argument_list|()
decl_stmt|;
comment|// we want to use the context-path of the route
name|int
name|colon
init|=
name|uri
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|colon
operator|>
literal|0
condition|)
block|{
name|String
name|name
init|=
name|uri
operator|.
name|substring
argument_list|(
name|colon
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|questionMark
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|"?"
argument_list|)
decl_stmt|;
if|if
condition|(
name|questionMark
operator|>
literal|0
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|questionMark
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/**      * Extract id from a rest route.      */
DECL|method|extractIdFromRestDefinition (RouteDefinition route)
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|extractIdFromRestDefinition
parameter_list|(
name|RouteDefinition
name|route
parameter_list|)
block|{
if|if
condition|(
name|route
operator|.
name|getRestDefinition
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|extractIdFromInput
argument_list|(
name|route
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/**      * Extract id from a rest verb definition.      */
DECL|method|extractIdFromVerb (VerbDefinition verb)
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|extractIdFromVerb
parameter_list|(
name|VerbDefinition
name|verb
parameter_list|)
block|{
name|RestDefinition
name|restDefinition
init|=
name|verb
operator|.
name|getRest
argument_list|()
decl_stmt|;
if|if
condition|(
name|restDefinition
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|routeId
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|routeId
operator|.
name|append
argument_list|(
name|verb
operator|.
name|asVerb
argument_list|()
argument_list|)
expr_stmt|;
name|appendWithSeparator
argument_list|(
name|routeId
argument_list|,
name|prepareUri
argument_list|(
name|restDefinition
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|verb
operator|.
name|getUri
argument_list|()
operator|!=
literal|null
operator|&&
name|verb
operator|.
name|getUri
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|appendWithSeparator
argument_list|(
name|routeId
argument_list|,
name|prepareUri
argument_list|(
name|verb
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|verb
operator|.
name|setUsedForGeneratingNodeId
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|routeId
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/**      * Extract id from rest input uri.      */
DECL|method|extractIdFromInput (RouteDefinition route)
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|extractIdFromInput
parameter_list|(
name|RouteDefinition
name|route
parameter_list|)
block|{
if|if
condition|(
name|route
operator|.
name|getInput
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|FromDefinition
name|from
init|=
name|route
operator|.
name|getInput
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
name|from
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|String
index|[]
name|uriSplitted
init|=
name|uri
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
comment|// needs to have at least 3 fields
if|if
condition|(
name|uriSplitted
operator|.
name|length
operator|<
literal|3
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|String
name|verb
init|=
name|uriSplitted
index|[
literal|1
index|]
decl_stmt|;
name|String
name|contextPath
init|=
name|uriSplitted
index|[
literal|2
index|]
decl_stmt|;
name|String
name|additionalUri
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|uriSplitted
operator|.
name|length
operator|>
literal|3
operator|&&
name|uriSplitted
index|[
literal|3
index|]
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|additionalUri
operator|=
name|uriSplitted
index|[
literal|3
index|]
expr_stmt|;
block|}
name|StringBuilder
name|routeId
init|=
operator|new
name|StringBuilder
argument_list|(
name|verb
operator|.
name|length
argument_list|()
operator|+
name|contextPath
operator|.
name|length
argument_list|()
operator|+
name|additionalUri
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|routeId
operator|.
name|append
argument_list|(
name|verb
argument_list|)
expr_stmt|;
name|appendWithSeparator
argument_list|(
name|routeId
argument_list|,
name|prepareUri
argument_list|(
name|contextPath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|additionalUri
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|appendWithSeparator
argument_list|(
name|routeId
argument_list|,
name|prepareUri
argument_list|(
name|additionalUri
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|routeId
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Prepares uri to be part of the id.      */
DECL|method|prepareUri (String uri)
specifier|private
name|String
name|prepareUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|uri
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uri
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
operator|.
name|replaceAll
argument_list|(
literal|"/"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|SEPARATOR
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Appends new element to the builder.      */
DECL|method|appendWithSeparator (StringBuilder builder, String str)
specifier|private
name|void
name|appendWithSeparator
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|builder
operator|.
name|charAt
argument_list|(
name|builder
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
name|SEPARATOR
condition|)
block|{
if|if
condition|(
name|str
operator|.
name|startsWith
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|SEPARATOR
argument_list|)
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|str
operator|.
name|replaceFirst
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|SEPARATOR
argument_list|)
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|str
operator|.
name|startsWith
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|SEPARATOR
argument_list|)
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

