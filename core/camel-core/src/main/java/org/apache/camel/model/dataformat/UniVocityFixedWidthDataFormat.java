begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * The uniVocity Fixed Length data format is used for working with fixed length flat payloads.  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|firstVersion
operator|=
literal|"2.15.0"
argument_list|,
name|label
operator|=
literal|"dataformat,transformation,csv"
argument_list|,
name|title
operator|=
literal|"uniVocity Fixed Length"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"univocity-fixed"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|UniVocityFixedWidthDataFormat
specifier|public
class|class
name|UniVocityFixedWidthDataFormat
extends|extends
name|UniVocityAbstractDataFormat
block|{
annotation|@
name|XmlAttribute
DECL|field|skipTrailingCharsUntilNewline
specifier|private
name|Boolean
name|skipTrailingCharsUntilNewline
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|recordEndsOnNewline
specifier|private
name|Boolean
name|recordEndsOnNewline
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|padding
specifier|private
name|String
name|padding
decl_stmt|;
DECL|method|UniVocityFixedWidthDataFormat ()
specifier|public
name|UniVocityFixedWidthDataFormat
parameter_list|()
block|{
name|super
argument_list|(
literal|"univocity-fixed"
argument_list|)
expr_stmt|;
block|}
DECL|method|getSkipTrailingCharsUntilNewline ()
specifier|public
name|Boolean
name|getSkipTrailingCharsUntilNewline
parameter_list|()
block|{
return|return
name|skipTrailingCharsUntilNewline
return|;
block|}
comment|/**      * Whether or not the trailing characters until new line must be ignored.      *<p/>      * The default value is false      */
DECL|method|setSkipTrailingCharsUntilNewline (Boolean skipTrailingCharsUntilNewline)
specifier|public
name|void
name|setSkipTrailingCharsUntilNewline
parameter_list|(
name|Boolean
name|skipTrailingCharsUntilNewline
parameter_list|)
block|{
name|this
operator|.
name|skipTrailingCharsUntilNewline
operator|=
name|skipTrailingCharsUntilNewline
expr_stmt|;
block|}
DECL|method|getRecordEndsOnNewline ()
specifier|public
name|Boolean
name|getRecordEndsOnNewline
parameter_list|()
block|{
return|return
name|recordEndsOnNewline
return|;
block|}
comment|/**      * Whether or not the record ends on new line.      *<p/>      * The default value is false      */
DECL|method|setRecordEndsOnNewline (Boolean recordEndsOnNewline)
specifier|public
name|void
name|setRecordEndsOnNewline
parameter_list|(
name|Boolean
name|recordEndsOnNewline
parameter_list|)
block|{
name|this
operator|.
name|recordEndsOnNewline
operator|=
name|recordEndsOnNewline
expr_stmt|;
block|}
DECL|method|getPadding ()
specifier|public
name|String
name|getPadding
parameter_list|()
block|{
return|return
name|padding
return|;
block|}
comment|/**      * The padding character.      *<p/>      * The default value is a space      */
DECL|method|setPadding (String padding)
specifier|public
name|void
name|setPadding
parameter_list|(
name|String
name|padding
parameter_list|)
block|{
name|this
operator|.
name|padding
operator|=
name|padding
expr_stmt|;
block|}
block|}
end_class

end_unit

