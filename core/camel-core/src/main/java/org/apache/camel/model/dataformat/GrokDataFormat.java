begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * The Grok data format is used for unmarshalling unstructured data to objects  * using Logstash based Grok patterns.  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"dataformat,transformation"
argument_list|,
name|title
operator|=
literal|"Grok"
argument_list|,
name|firstVersion
operator|=
literal|"3.0.0"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"grok"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|GrokDataFormat
specifier|public
class|class
name|GrokDataFormat
extends|extends
name|DataFormatDefinition
block|{
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|true
argument_list|)
annotation|@
name|Metadata
DECL|field|pattern
specifier|private
name|String
name|pattern
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|flattened
specifier|private
name|Boolean
name|flattened
init|=
literal|false
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|allowMultipleMatchesPerLine
specifier|private
name|Boolean
name|allowMultipleMatchesPerLine
init|=
literal|true
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|namedOnly
specifier|private
name|Boolean
name|namedOnly
init|=
literal|false
decl_stmt|;
DECL|method|GrokDataFormat ()
specifier|public
name|GrokDataFormat
parameter_list|()
block|{
name|super
argument_list|(
literal|"grok"
argument_list|)
expr_stmt|;
block|}
DECL|method|getPattern ()
specifier|public
name|String
name|getPattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
comment|/**      * The grok pattern to match lines of input      */
DECL|method|setPattern (String pattern)
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
DECL|method|isFlattened ()
specifier|public
name|boolean
name|isFlattened
parameter_list|()
block|{
return|return
name|flattened
return|;
block|}
comment|/**      * Turns on flattened mode. In flattened mode the exception is thrown when      * there are multiple pattern matches with same key.      */
DECL|method|setFlattened (boolean flattened)
specifier|public
name|void
name|setFlattened
parameter_list|(
name|boolean
name|flattened
parameter_list|)
block|{
name|this
operator|.
name|flattened
operator|=
name|flattened
expr_stmt|;
block|}
DECL|method|isAllowMultipleMatchesPerLine ()
specifier|public
name|boolean
name|isAllowMultipleMatchesPerLine
parameter_list|()
block|{
return|return
name|allowMultipleMatchesPerLine
return|;
block|}
comment|/**      * If false, every line of input is matched for pattern only once. Otherwise      * the line can be scanned multiple times when non-terminal pattern is used.      */
DECL|method|setAllowMultipleMatchesPerLine (boolean allowMultipleMatchesPerLine)
specifier|public
name|void
name|setAllowMultipleMatchesPerLine
parameter_list|(
name|boolean
name|allowMultipleMatchesPerLine
parameter_list|)
block|{
name|this
operator|.
name|allowMultipleMatchesPerLine
operator|=
name|allowMultipleMatchesPerLine
expr_stmt|;
block|}
DECL|method|isNamedOnly ()
specifier|public
name|boolean
name|isNamedOnly
parameter_list|()
block|{
return|return
name|namedOnly
return|;
block|}
comment|/**      * Whether to capture named expressions only or not (i.e. %{IP:ip} but not      * ${IP})      */
DECL|method|setNamedOnly (boolean namedOnly)
specifier|public
name|void
name|setNamedOnly
parameter_list|(
name|boolean
name|namedOnly
parameter_list|)
block|{
name|this
operator|.
name|namedOnly
operator|=
name|namedOnly
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"GrokDataFormat["
operator|+
name|pattern
operator|+
literal|']'
return|;
block|}
block|}
end_class

end_unit

