begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NamedNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|event
operator|.
name|DefaultEventFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementObjectNameStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementObjectStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * A default management strategy that does<b>not</b> manage.  *<p/>  * This is default only used if Camel detects that it cannot use the JMX capable  * {@link org.apache.camel.management.JmxManagementStrategy} strategy. Then Camel will  * fallback to use this instead that is basically a simple and<tt>noop</tt> strategy.  *<p/>  * This class can also be used to extend your custom management implement. In fact the JMX capable  * provided by Camel extends this class as well.  *  * @see org.apache.camel.management.JmxManagementStrategy  */
end_comment

begin_class
DECL|class|DefaultManagementStrategy
specifier|public
class|class
name|DefaultManagementStrategy
extends|extends
name|ServiceSupport
implements|implements
name|ManagementStrategy
implements|,
name|CamelContextAware
block|{
DECL|field|eventNotifiers
specifier|private
specifier|final
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|eventNotifiers
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|eventFactory
specifier|private
name|EventFactory
name|eventFactory
init|=
operator|new
name|DefaultEventFactory
argument_list|()
decl_stmt|;
DECL|field|managementObjectNameStrategy
specifier|private
name|ManagementObjectNameStrategy
name|managementObjectNameStrategy
decl_stmt|;
DECL|field|managementObjectStrategy
specifier|private
name|ManagementObjectStrategy
name|managementObjectStrategy
decl_stmt|;
DECL|field|managementAgent
specifier|private
name|ManagementAgent
name|managementAgent
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|method|DefaultManagementStrategy ()
specifier|public
name|DefaultManagementStrategy
parameter_list|()
block|{     }
DECL|method|DefaultManagementStrategy (CamelContext camelContext)
specifier|public
name|DefaultManagementStrategy
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|DefaultManagementStrategy (CamelContext camelContext, ManagementAgent managementAgent)
specifier|public
name|DefaultManagementStrategy
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|ManagementAgent
name|managementAgent
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|managementAgent
operator|=
name|managementAgent
expr_stmt|;
block|}
DECL|method|getEventNotifiers ()
specifier|public
name|List
argument_list|<
name|EventNotifier
argument_list|>
name|getEventNotifiers
parameter_list|()
block|{
return|return
name|eventNotifiers
return|;
block|}
DECL|method|addEventNotifier (EventNotifier eventNotifier)
specifier|public
name|void
name|addEventNotifier
parameter_list|(
name|EventNotifier
name|eventNotifier
parameter_list|)
block|{
name|this
operator|.
name|eventNotifiers
operator|.
name|add
argument_list|(
name|eventNotifier
argument_list|)
expr_stmt|;
block|}
DECL|method|removeEventNotifier (EventNotifier eventNotifier)
specifier|public
name|boolean
name|removeEventNotifier
parameter_list|(
name|EventNotifier
name|eventNotifier
parameter_list|)
block|{
return|return
name|eventNotifiers
operator|.
name|remove
argument_list|(
name|eventNotifier
argument_list|)
return|;
block|}
DECL|method|getEventFactory ()
specifier|public
name|EventFactory
name|getEventFactory
parameter_list|()
block|{
return|return
name|eventFactory
return|;
block|}
DECL|method|setEventFactory (EventFactory eventFactory)
specifier|public
name|void
name|setEventFactory
parameter_list|(
name|EventFactory
name|eventFactory
parameter_list|)
block|{
name|this
operator|.
name|eventFactory
operator|=
name|eventFactory
expr_stmt|;
block|}
DECL|method|getManagementObjectNameStrategy ()
specifier|public
name|ManagementObjectNameStrategy
name|getManagementObjectNameStrategy
parameter_list|()
block|{
if|if
condition|(
name|managementObjectNameStrategy
operator|==
literal|null
condition|)
block|{
name|managementObjectNameStrategy
operator|=
name|createManagementObjectNameStrategy
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|managementObjectNameStrategy
return|;
block|}
DECL|method|setManagementObjectNameStrategy (ManagementObjectNameStrategy managementObjectNameStrategy)
specifier|public
name|void
name|setManagementObjectNameStrategy
parameter_list|(
name|ManagementObjectNameStrategy
name|managementObjectNameStrategy
parameter_list|)
block|{
name|this
operator|.
name|managementObjectNameStrategy
operator|=
name|managementObjectNameStrategy
expr_stmt|;
block|}
DECL|method|getManagementObjectStrategy ()
specifier|public
name|ManagementObjectStrategy
name|getManagementObjectStrategy
parameter_list|()
block|{
if|if
condition|(
name|managementObjectStrategy
operator|==
literal|null
condition|)
block|{
name|managementObjectStrategy
operator|=
name|createManagementObjectStrategy
argument_list|()
expr_stmt|;
block|}
return|return
name|managementObjectStrategy
return|;
block|}
DECL|method|setManagementObjectStrategy (ManagementObjectStrategy managementObjectStrategy)
specifier|public
name|void
name|setManagementObjectStrategy
parameter_list|(
name|ManagementObjectStrategy
name|managementObjectStrategy
parameter_list|)
block|{
name|this
operator|.
name|managementObjectStrategy
operator|=
name|managementObjectStrategy
expr_stmt|;
block|}
DECL|method|getManagementAgent ()
specifier|public
name|ManagementAgent
name|getManagementAgent
parameter_list|()
block|{
return|return
name|managementAgent
return|;
block|}
DECL|method|setManagementAgent (ManagementAgent managementAgent)
specifier|public
name|void
name|setManagementAgent
parameter_list|(
name|ManagementAgent
name|managementAgent
parameter_list|)
block|{
name|this
operator|.
name|managementAgent
operator|=
name|managementAgent
expr_stmt|;
block|}
DECL|method|manageProcessor (NamedNode definition)
specifier|public
name|boolean
name|manageProcessor
parameter_list|(
name|NamedNode
name|definition
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|method|manageObject (Object managedObject)
specifier|public
name|void
name|manageObject
parameter_list|(
name|Object
name|managedObject
parameter_list|)
throws|throws
name|Exception
block|{
comment|// noop
block|}
DECL|method|unmanageObject (Object managedObject)
specifier|public
name|void
name|unmanageObject
parameter_list|(
name|Object
name|managedObject
parameter_list|)
throws|throws
name|Exception
block|{
comment|// noop
block|}
DECL|method|isManaged (Object managedObject)
specifier|public
name|boolean
name|isManaged
parameter_list|(
name|Object
name|managedObject
parameter_list|)
block|{
comment|// noop
return|return
literal|false
return|;
block|}
DECL|method|isManagedName (Object name)
specifier|public
name|boolean
name|isManagedName
parameter_list|(
name|Object
name|name
parameter_list|)
block|{
comment|// noop
return|return
literal|false
return|;
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|notify (CamelEvent event)
specifier|public
name|void
name|notify
parameter_list|(
name|CamelEvent
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|eventNotifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|eventNotifiers
control|)
block|{
if|if
condition|(
name|notifier
operator|.
name|isEnabled
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|notifier
operator|.
name|notify
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"JMX is disabled"
argument_list|)
expr_stmt|;
name|doStartManagementStrategy
argument_list|()
expr_stmt|;
block|}
DECL|method|doStartManagementStrategy ()
specifier|protected
name|void
name|doStartManagementStrategy
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"CamelContext"
argument_list|)
expr_stmt|;
for|for
control|(
name|EventNotifier
name|notifier
range|:
name|eventNotifiers
control|)
block|{
comment|// inject CamelContext if the service is aware
if|if
condition|(
name|notifier
operator|instanceof
name|CamelContextAware
condition|)
block|{
name|CamelContextAware
name|aware
init|=
operator|(
name|CamelContextAware
operator|)
name|notifier
decl_stmt|;
name|aware
operator|.
name|setCamelContext
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|managementAgent
operator|!=
literal|null
condition|)
block|{
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|managementAgent
argument_list|)
expr_stmt|;
comment|// set the naming strategy using the domain name from the agent
if|if
condition|(
name|managementObjectNameStrategy
operator|==
literal|null
condition|)
block|{
name|String
name|domain
init|=
name|managementAgent
operator|.
name|getMBeanObjectDomainName
argument_list|()
decl_stmt|;
name|managementObjectNameStrategy
operator|=
name|createManagementObjectNameStrategy
argument_list|(
name|domain
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|managementObjectNameStrategy
operator|instanceof
name|CamelContextAware
condition|)
block|{
operator|(
operator|(
name|CamelContextAware
operator|)
name|managementObjectNameStrategy
operator|)
operator|.
name|setCamelContext
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|managementAgent
argument_list|,
name|eventNotifiers
argument_list|)
expr_stmt|;
block|}
DECL|method|createManagementObjectNameStrategy (String domain)
specifier|protected
name|ManagementObjectNameStrategy
name|createManagementObjectNameStrategy
parameter_list|(
name|String
name|domain
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|createManagementObjectStrategy ()
specifier|protected
name|ManagementObjectStrategy
name|createManagementObjectStrategy
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

