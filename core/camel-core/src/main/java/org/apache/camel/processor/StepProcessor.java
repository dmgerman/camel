begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|EventHelper
import|;
end_import

begin_class
DECL|class|StepProcessor
specifier|public
class|class
name|StepProcessor
extends|extends
name|Pipeline
block|{
DECL|field|stepId
specifier|private
specifier|final
name|String
name|stepId
decl_stmt|;
DECL|method|StepProcessor (CamelContext camelContext, Collection<Processor> processors, String stepId)
specifier|public
name|StepProcessor
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Collection
argument_list|<
name|Processor
argument_list|>
name|processors
parameter_list|,
name|String
name|stepId
parameter_list|)
block|{
name|super
argument_list|(
name|camelContext
argument_list|,
name|processors
argument_list|)
expr_stmt|;
name|this
operator|.
name|stepId
operator|=
name|stepId
expr_stmt|;
block|}
DECL|method|newInstance (CamelContext camelContext, List<Processor> processors, String stepId)
specifier|public
specifier|static
name|Processor
name|newInstance
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|List
argument_list|<
name|Processor
argument_list|>
name|processors
parameter_list|,
name|String
name|stepId
parameter_list|)
block|{
if|if
condition|(
name|processors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|processors
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|processors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
operator|new
name|StepProcessor
argument_list|(
name|camelContext
argument_list|,
name|processors
argument_list|,
name|stepId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange, final AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
comment|// setup step id on exchange
specifier|final
name|Object
name|oldStepId
init|=
name|exchange
operator|.
name|removeProperty
argument_list|(
name|Exchange
operator|.
name|STEP_ID
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|STEP_ID
argument_list|,
name|stepId
argument_list|)
expr_stmt|;
name|EventHelper
operator|.
name|notifyStepStarted
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|stepId
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
parameter_list|(
name|sync
parameter_list|)
lambda|->
block|{
comment|// then fire event to signal the step is done
name|boolean
name|failed
init|=
name|exchange
operator|.
name|isFailed
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|failed
condition|)
block|{
name|EventHelper
operator|.
name|notifyStepFailed
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|stepId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|EventHelper
operator|.
name|notifyStepDone
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|stepId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// must catch exceptions to ensure synchronizations is also invoked
name|log
operator|.
name|warn
argument_list|(
literal|"Exception occurred during event notification. This exception will be ignored."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|oldStepId
operator|!=
literal|null
condition|)
block|{
comment|// restore step id
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|STEP_ID
argument_list|,
name|oldStepId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// clear step id
name|exchange
operator|.
name|removeProperty
argument_list|(
name|Exchange
operator|.
name|STEP_ID
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|done
argument_list|(
name|sync
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTraceLabel ()
specifier|public
name|String
name|getTraceLabel
parameter_list|()
block|{
return|return
literal|"step"
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Step["
operator|+
name|stepId
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

