begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * Any23 data format is used for parsing data to RDF.  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|firstVersion
operator|=
literal|"1.0.0"
argument_list|,
name|label
operator|=
literal|"dataformat,transformation"
argument_list|,
name|title
operator|=
literal|"Any23"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"any23"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|Any23DataFormat
specifier|public
class|class
name|Any23DataFormat
extends|extends
name|DataFormatDefinition
block|{
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"MODEL"
argument_list|)
DECL|field|outputFormat
specifier|private
name|String
name|outputFormat
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|configurations
specifier|private
name|String
name|configurations
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|extractors
specifier|private
name|String
name|extractors
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|baseuri
specifier|private
name|String
name|baseuri
decl_stmt|;
DECL|method|Any23DataFormat ()
specifier|public
name|Any23DataFormat
parameter_list|()
block|{
name|super
argument_list|(
literal|"any23"
argument_list|)
expr_stmt|;
block|}
DECL|method|Any23DataFormat (String baseuri)
specifier|public
name|Any23DataFormat
parameter_list|(
name|String
name|baseuri
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|baseuri
operator|=
name|baseuri
expr_stmt|;
block|}
DECL|method|Any23DataFormat (String baseuri, String outputFormat)
specifier|public
name|Any23DataFormat
parameter_list|(
name|String
name|baseuri
parameter_list|,
name|String
name|outputFormat
parameter_list|)
block|{
name|this
argument_list|(
name|baseuri
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputFormat
operator|=
name|outputFormat
expr_stmt|;
block|}
DECL|method|Any23DataFormat (String baseuri, String outputFormat, String configurations)
specifier|public
name|Any23DataFormat
parameter_list|(
name|String
name|baseuri
parameter_list|,
name|String
name|outputFormat
parameter_list|,
name|String
name|configurations
parameter_list|)
block|{
name|this
argument_list|(
name|baseuri
argument_list|,
name|outputFormat
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputFormat
operator|=
name|outputFormat
expr_stmt|;
name|this
operator|.
name|configurations
operator|=
name|configurations
expr_stmt|;
block|}
DECL|method|Any23DataFormat (String baseuri, String outputFormat, String configurations, String extractors)
specifier|public
name|Any23DataFormat
parameter_list|(
name|String
name|baseuri
parameter_list|,
name|String
name|outputFormat
parameter_list|,
name|String
name|configurations
parameter_list|,
name|String
name|extractors
parameter_list|)
block|{
name|this
argument_list|(
name|baseuri
argument_list|,
name|outputFormat
argument_list|,
name|configurations
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputFormat
operator|=
name|outputFormat
expr_stmt|;
name|this
operator|.
name|configurations
operator|=
name|configurations
expr_stmt|;
name|this
operator|.
name|extractors
operator|=
name|extractors
expr_stmt|;
block|}
DECL|method|getOutputFormat ()
specifier|public
name|String
name|getOutputFormat
parameter_list|()
block|{
return|return
name|outputFormat
return|;
block|}
DECL|method|setOutputFormat (String outputFormat)
specifier|public
name|void
name|setOutputFormat
parameter_list|(
name|String
name|outputFormat
parameter_list|)
block|{
name|this
operator|.
name|outputFormat
operator|=
name|outputFormat
expr_stmt|;
block|}
DECL|method|getConfigurations ()
specifier|public
name|String
name|getConfigurations
parameter_list|()
block|{
return|return
name|configurations
return|;
block|}
DECL|method|setConfigurations (String configurations)
specifier|public
name|void
name|setConfigurations
parameter_list|(
name|String
name|configurations
parameter_list|)
block|{
name|this
operator|.
name|configurations
operator|=
name|configurations
expr_stmt|;
block|}
DECL|method|getExtractors ()
specifier|public
name|String
name|getExtractors
parameter_list|()
block|{
return|return
name|extractors
return|;
block|}
DECL|method|setExtractors (String extractors)
specifier|public
name|void
name|setExtractors
parameter_list|(
name|String
name|extractors
parameter_list|)
block|{
name|this
operator|.
name|extractors
operator|=
name|extractors
expr_stmt|;
block|}
DECL|method|getBaseuri ()
specifier|public
name|String
name|getBaseuri
parameter_list|()
block|{
return|return
name|baseuri
return|;
block|}
DECL|method|setBaseuri (String baseuri)
specifier|public
name|void
name|setBaseuri
parameter_list|(
name|String
name|baseuri
parameter_list|)
block|{
name|this
operator|.
name|baseuri
operator|=
name|baseuri
expr_stmt|;
block|}
block|}
end_class

end_unit

