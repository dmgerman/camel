begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|UnitOfWorkProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_comment
comment|/**  * A file based {@link org.apache.camel.spi.ReloadStrategy} which watches a file folder  * for modified files and reload on file changes.  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed FileWatcherReloadStrategy"
argument_list|)
DECL|class|FileWatcherReloadStrategy
specifier|public
class|class
name|FileWatcherReloadStrategy
extends|extends
name|ReloadStrategySupport
block|{
DECL|field|folder
specifier|private
name|String
name|folder
decl_stmt|;
DECL|field|isRecursive
specifier|private
name|boolean
name|isRecursive
decl_stmt|;
DECL|field|delay
specifier|private
name|long
name|delay
init|=
literal|500
decl_stmt|;
DECL|field|task
specifier|private
name|Processor
name|task
decl_stmt|;
DECL|field|endpoint
specifier|private
name|Endpoint
name|endpoint
decl_stmt|;
DECL|field|consumer
specifier|private
name|Consumer
name|consumer
decl_stmt|;
DECL|method|FileWatcherReloadStrategy ()
specifier|public
name|FileWatcherReloadStrategy
parameter_list|()
block|{
name|setRecursive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|FileWatcherReloadStrategy (String directory)
specifier|public
name|FileWatcherReloadStrategy
parameter_list|(
name|String
name|directory
parameter_list|)
block|{
name|setFolder
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|setRecursive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|FileWatcherReloadStrategy (String directory, boolean isRecursive)
specifier|public
name|FileWatcherReloadStrategy
parameter_list|(
name|String
name|directory
parameter_list|,
name|boolean
name|isRecursive
parameter_list|)
block|{
name|setFolder
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|setRecursive
argument_list|(
name|isRecursive
argument_list|)
expr_stmt|;
block|}
DECL|method|setFolder (String folder)
specifier|public
name|void
name|setFolder
parameter_list|(
name|String
name|folder
parameter_list|)
block|{
name|this
operator|.
name|folder
operator|=
name|folder
expr_stmt|;
block|}
DECL|method|setRecursive (boolean isRecursive)
specifier|public
name|void
name|setRecursive
parameter_list|(
name|boolean
name|isRecursive
parameter_list|)
block|{
name|this
operator|.
name|isRecursive
operator|=
name|isRecursive
expr_stmt|;
block|}
comment|/**      * Sets the delay in millis between checks for updated files.      * The default is 500 millis.      */
DECL|method|setDelay (long delay)
specifier|public
name|void
name|setDelay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Folder being watched"
argument_list|)
DECL|method|getFolder ()
specifier|public
name|String
name|getFolder
parameter_list|()
block|{
return|return
name|folder
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Whether the reload strategy watches directory recursively"
argument_list|)
DECL|method|isRecursive ()
specifier|public
name|boolean
name|isRecursive
parameter_list|()
block|{
return|return
name|isRecursive
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|folder
operator|==
literal|null
condition|)
block|{
comment|// no folder configured
return|return;
block|}
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
operator|&&
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting ReloadStrategy to watch directory: {}"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
comment|// only include xml files
name|endpoint
operator|=
name|getCamelContext
argument_list|()
operator|.
name|getEndpoint
argument_list|(
literal|"file:"
operator|+
name|dir
operator|+
literal|"?delay="
operator|+
name|delay
operator|+
literal|"&recursive="
operator|+
name|isRecursive
operator|+
literal|"&include=.*xml$&readLock=none&noop=true&idempotentKey=${file:name}-${file:modified}"
argument_list|)
expr_stmt|;
comment|// must wrap in unit of work
name|task
operator|=
operator|new
name|UnitOfWorkProducer
argument_list|(
operator|new
name|UpdatedFileProcessor
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
name|consumer
operator|=
name|endpoint
operator|.
name|createConsumer
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|consumer
operator|!=
literal|null
condition|)
block|{
name|ServiceHelper
operator|.
name|stopAndShutdownServices
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|getCamelContext
argument_list|()
operator|.
name|removeService
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|!=
literal|null
condition|)
block|{
name|ServiceHelper
operator|.
name|stopAndShutdownServices
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|getCamelContext
argument_list|()
operator|.
name|removeEndpoint
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|UpdatedFileProcessor
specifier|private
specifier|final
class|class
name|UpdatedFileProcessor
extends|extends
name|DefaultProducer
block|{
DECL|method|UpdatedFileProcessor (Endpoint endpoint)
specifier|private
name|UpdatedFileProcessor
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Modified/Created file: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|onReloadXml
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|name
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error reloading routes from file: "
operator|+
name|name
operator|+
literal|" due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|". This exception is ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

