begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_class
DECL|class|DefinitionPropertiesProviderHelper
specifier|public
class|class
name|DefinitionPropertiesProviderHelper
block|{
DECL|field|MAP
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|Function
argument_list|<
name|Object
argument_list|,
name|PropertyPlaceholderAware
argument_list|>
argument_list|>
name|MAP
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|Class
argument_list|,
name|Function
argument_list|<
name|Object
argument_list|,
name|PropertyPlaceholderAware
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|FromDefinition
operator|.
name|class
argument_list|,
name|FromDefinitionPropertiesProvider
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|LogDefinition
operator|.
name|class
argument_list|,
name|LogDefinitionPropertiesProvider
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ToDefinition
operator|.
name|class
argument_list|,
name|ToDefinitionPropertiesProvider
operator|::
operator|new
argument_list|)
expr_stmt|;
name|MAP
operator|=
name|map
expr_stmt|;
block|}
DECL|method|provider (Object definition)
specifier|public
specifier|static
name|Optional
argument_list|<
name|PropertyPlaceholderAware
argument_list|>
name|provider
parameter_list|(
name|Object
name|definition
parameter_list|)
block|{
name|Function
argument_list|<
name|Object
argument_list|,
name|PropertyPlaceholderAware
argument_list|>
name|func
init|=
name|MAP
operator|.
name|get
argument_list|(
name|definition
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
operator|!=
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|func
operator|.
name|apply
argument_list|(
name|definition
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

