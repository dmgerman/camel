begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.reifier.transformer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
operator|.
name|transformer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|transformer
operator|.
name|CustomTransformerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|transformer
operator|.
name|DataFormatTransformerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|transformer
operator|.
name|EndpointTransformerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|transformer
operator|.
name|TransformerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Transformer
import|;
end_import

begin_class
DECL|class|TransformerReifier
specifier|public
specifier|abstract
class|class
name|TransformerReifier
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|TRANSFORMERS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Function
argument_list|<
name|TransformerDefinition
argument_list|,
name|TransformerReifier
argument_list|<
name|?
extends|extends
name|TransformerDefinition
argument_list|>
argument_list|>
argument_list|>
name|TRANSFORMERS
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Function
argument_list|<
name|TransformerDefinition
argument_list|,
name|TransformerReifier
argument_list|<
name|?
extends|extends
name|TransformerDefinition
argument_list|>
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|CustomTransformerDefinition
operator|.
name|class
argument_list|,
name|CustomTransformeReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|DataFormatTransformerDefinition
operator|.
name|class
argument_list|,
name|DataFormatTransformeReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|EndpointTransformerDefinition
operator|.
name|class
argument_list|,
name|EndpointTransformeReifier
operator|::
operator|new
argument_list|)
expr_stmt|;
name|TRANSFORMERS
operator|=
name|map
expr_stmt|;
block|}
DECL|field|definition
specifier|protected
specifier|final
name|T
name|definition
decl_stmt|;
DECL|method|TransformerReifier (T definition)
specifier|public
name|TransformerReifier
parameter_list|(
name|T
name|definition
parameter_list|)
block|{
name|this
operator|.
name|definition
operator|=
name|definition
expr_stmt|;
block|}
DECL|method|reifier (TransformerDefinition definition)
specifier|public
specifier|static
name|TransformerReifier
argument_list|<
name|?
extends|extends
name|TransformerDefinition
argument_list|>
name|reifier
parameter_list|(
name|TransformerDefinition
name|definition
parameter_list|)
block|{
name|Function
argument_list|<
name|TransformerDefinition
argument_list|,
name|TransformerReifier
argument_list|<
name|?
extends|extends
name|TransformerDefinition
argument_list|>
argument_list|>
name|reifier
init|=
name|TRANSFORMERS
operator|.
name|get
argument_list|(
name|definition
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reifier
operator|!=
literal|null
condition|)
block|{
return|return
name|reifier
operator|.
name|apply
argument_list|(
name|definition
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported definition: "
operator|+
name|definition
argument_list|)
throw|;
block|}
DECL|method|createTransformer (CamelContext context)
specifier|public
name|Transformer
name|createTransformer
parameter_list|(
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|doCreateTransformer
argument_list|(
name|context
argument_list|)
return|;
block|}
DECL|method|doCreateTransformer (CamelContext context)
specifier|protected
specifier|abstract
name|Transformer
name|doCreateTransformer
parameter_list|(
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
end_class

end_unit

