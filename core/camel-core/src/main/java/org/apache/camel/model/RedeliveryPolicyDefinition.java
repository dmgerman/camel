begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * To configure re-delivery for error handling  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"configuration"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"redeliveryPolicy"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|RedeliveryPolicyDefinition
specifier|public
class|class
name|RedeliveryPolicyDefinition
block|{
annotation|@
name|XmlAttribute
DECL|field|maximumRedeliveries
specifier|private
name|String
name|maximumRedeliveries
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|redeliveryDelay
specifier|private
name|String
name|redeliveryDelay
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|asyncDelayedRedelivery
specifier|private
name|String
name|asyncDelayedRedelivery
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|backOffMultiplier
specifier|private
name|String
name|backOffMultiplier
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|useExponentialBackOff
specifier|private
name|String
name|useExponentialBackOff
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|collisionAvoidanceFactor
specifier|private
name|String
name|collisionAvoidanceFactor
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|useCollisionAvoidance
specifier|private
name|String
name|useCollisionAvoidance
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|maximumRedeliveryDelay
specifier|private
name|String
name|maximumRedeliveryDelay
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|retriesExhaustedLogLevel
specifier|private
name|LoggingLevel
name|retriesExhaustedLogLevel
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|retryAttemptedLogLevel
specifier|private
name|LoggingLevel
name|retryAttemptedLogLevel
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|retryAttemptedLogInterval
specifier|private
name|String
name|retryAttemptedLogInterval
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|logRetryAttempted
specifier|private
name|String
name|logRetryAttempted
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|logStackTrace
specifier|private
name|String
name|logStackTrace
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|logRetryStackTrace
specifier|private
name|String
name|logRetryStackTrace
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|logHandled
specifier|private
name|String
name|logHandled
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|logNewException
specifier|private
name|String
name|logNewException
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|logContinued
specifier|private
name|String
name|logContinued
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|logExhausted
specifier|private
name|String
name|logExhausted
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|logExhaustedMessageHistory
specifier|private
name|String
name|logExhaustedMessageHistory
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|logExhaustedMessageBody
specifier|private
name|String
name|logExhaustedMessageBody
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|disableRedelivery
specifier|private
name|String
name|disableRedelivery
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|delayPattern
specifier|private
name|String
name|delayPattern
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|allowRedeliveryWhileStopping
specifier|private
name|String
name|allowRedeliveryWhileStopping
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|exchangeFormatterRef
specifier|private
name|String
name|exchangeFormatterRef
decl_stmt|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"RedeliveryPolicy[maximumRedeliveries: "
operator|+
name|maximumRedeliveries
operator|+
literal|"]"
return|;
block|}
comment|// Fluent API
comment|//-------------------------------------------------------------------------
comment|/**      * Allow synchronous delayed redelivery. The route, in particular the consumer's component,      * must support the Asynchronous Routing Engine (e.g. seda).      *      * @return the builder      */
DECL|method|asyncDelayedRedelivery ()
specifier|public
name|RedeliveryPolicyDefinition
name|asyncDelayedRedelivery
parameter_list|()
block|{
name|setAsyncDelayedRedelivery
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Controls whether to allow redelivery while stopping/shutting down a route that uses error handling.      *      * @param allowRedeliveryWhileStopping<tt>true</tt> to allow redelivery,<tt>false</tt> to reject redeliveries      * @return the builder      */
DECL|method|allowRedeliveryWhileStopping (boolean allowRedeliveryWhileStopping)
specifier|public
name|RedeliveryPolicyDefinition
name|allowRedeliveryWhileStopping
parameter_list|(
name|boolean
name|allowRedeliveryWhileStopping
parameter_list|)
block|{
return|return
name|allowRedeliveryWhileStopping
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|allowRedeliveryWhileStopping
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Controls whether to allow redelivery while stopping/shutting down a route that uses error handling.      *      * @param allowRedeliveryWhileStopping<tt>true</tt> to allow redelivery,<tt>false</tt> to reject redeliveries      * @return the builder      */
DECL|method|allowRedeliveryWhileStopping (String allowRedeliveryWhileStopping)
specifier|public
name|RedeliveryPolicyDefinition
name|allowRedeliveryWhileStopping
parameter_list|(
name|String
name|allowRedeliveryWhileStopping
parameter_list|)
block|{
name|setAllowRedeliveryWhileStopping
argument_list|(
name|allowRedeliveryWhileStopping
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the back off multiplier      *      * @param backOffMultiplier  the back off multiplier      * @return the builder      */
DECL|method|backOffMultiplier (double backOffMultiplier)
specifier|public
name|RedeliveryPolicyDefinition
name|backOffMultiplier
parameter_list|(
name|double
name|backOffMultiplier
parameter_list|)
block|{
return|return
name|backOffMultiplier
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|backOffMultiplier
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets the back off multiplier (supports property placeholders)      *      * @param backOffMultiplier  the back off multiplier      * @return the builder      */
DECL|method|backOffMultiplier (String backOffMultiplier)
specifier|public
name|RedeliveryPolicyDefinition
name|backOffMultiplier
parameter_list|(
name|String
name|backOffMultiplier
parameter_list|)
block|{
name|setBackOffMultiplier
argument_list|(
name|backOffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the collision avoidance percentage      *      * @param collisionAvoidancePercent  the percentage      * @return the builder      */
DECL|method|collisionAvoidancePercent (double collisionAvoidancePercent)
specifier|public
name|RedeliveryPolicyDefinition
name|collisionAvoidancePercent
parameter_list|(
name|double
name|collisionAvoidancePercent
parameter_list|)
block|{
name|setCollisionAvoidanceFactor
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|collisionAvoidancePercent
operator|*
literal|0.01d
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the collision avoidance factor      *      * @param collisionAvoidanceFactor  the factor      * @return the builder      */
DECL|method|collisionAvoidanceFactor (double collisionAvoidanceFactor)
specifier|public
name|RedeliveryPolicyDefinition
name|collisionAvoidanceFactor
parameter_list|(
name|double
name|collisionAvoidanceFactor
parameter_list|)
block|{
return|return
name|collisionAvoidanceFactor
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|collisionAvoidanceFactor
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets the collision avoidance factor (supports property placeholders)      *      * @param collisionAvoidanceFactor  the factor      * @return the builder      */
DECL|method|collisionAvoidanceFactor (String collisionAvoidanceFactor)
specifier|public
name|RedeliveryPolicyDefinition
name|collisionAvoidanceFactor
parameter_list|(
name|String
name|collisionAvoidanceFactor
parameter_list|)
block|{
name|setCollisionAvoidanceFactor
argument_list|(
name|collisionAvoidanceFactor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the initial redelivery delay      *      * @param delay  delay in millis      * @return the builder      */
DECL|method|redeliveryDelay (long delay)
specifier|public
name|RedeliveryPolicyDefinition
name|redeliveryDelay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
return|return
name|redeliveryDelay
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|delay
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets the initial redelivery delay (supports property placeholders)      *      * @param delay  delay in millis      * @return the builder      */
DECL|method|redeliveryDelay (String delay)
specifier|public
name|RedeliveryPolicyDefinition
name|redeliveryDelay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|setRedeliveryDelay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the logging level to use when retries has exhausted      *      * @param retriesExhaustedLogLevel  the logging level      * @return the builder      */
DECL|method|retriesExhaustedLogLevel (LoggingLevel retriesExhaustedLogLevel)
specifier|public
name|RedeliveryPolicyDefinition
name|retriesExhaustedLogLevel
parameter_list|(
name|LoggingLevel
name|retriesExhaustedLogLevel
parameter_list|)
block|{
name|setRetriesExhaustedLogLevel
argument_list|(
name|retriesExhaustedLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the logging level to use for logging retry attempts      *      * @param retryAttemptedLogLevel  the logging level      * @return the builder      */
DECL|method|retryAttemptedLogLevel (LoggingLevel retryAttemptedLogLevel)
specifier|public
name|RedeliveryPolicyDefinition
name|retryAttemptedLogLevel
parameter_list|(
name|LoggingLevel
name|retryAttemptedLogLevel
parameter_list|)
block|{
name|setRetryAttemptedLogLevel
argument_list|(
name|retryAttemptedLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the interval to use for logging retry attempts      *      * @param retryAttemptedLogInterval  the retry logging interval      * @return the builder      */
DECL|method|retryAttemptedLogInterval (String retryAttemptedLogInterval)
specifier|public
name|RedeliveryPolicyDefinition
name|retryAttemptedLogInterval
parameter_list|(
name|String
name|retryAttemptedLogInterval
parameter_list|)
block|{
name|setRetryAttemptedLogInterval
argument_list|(
name|retryAttemptedLogInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether stack traces should be logged.      * Can be used to include or reduce verbose.      *      * @param logStackTrace  whether stack traces should be logged or not      * @return the builder      */
DECL|method|logStackTrace (boolean logStackTrace)
specifier|public
name|RedeliveryPolicyDefinition
name|logStackTrace
parameter_list|(
name|boolean
name|logStackTrace
parameter_list|)
block|{
return|return
name|logStackTrace
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|logStackTrace
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets whether stack traces should be logged (supports property placeholders)      * Can be used to include or reduce verbose.      *      * @param logStackTrace  whether stack traces should be logged or not      * @return the builder      */
DECL|method|logStackTrace (String logStackTrace)
specifier|public
name|RedeliveryPolicyDefinition
name|logStackTrace
parameter_list|(
name|String
name|logStackTrace
parameter_list|)
block|{
name|setLogStackTrace
argument_list|(
name|logStackTrace
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether stack traces should be logged when an retry attempt failed.      * Can be used to include or reduce verbose.      *      * @param logRetryStackTrace  whether stack traces should be logged or not      * @return the builder      */
DECL|method|logRetryStackTrace (boolean logRetryStackTrace)
specifier|public
name|RedeliveryPolicyDefinition
name|logRetryStackTrace
parameter_list|(
name|boolean
name|logRetryStackTrace
parameter_list|)
block|{
return|return
name|logRetryStackTrace
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|logRetryStackTrace
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets whether stack traces should be logged when an retry attempt failed (supports property placeholders).      * Can be used to include or reduce verbose.      *      * @param logRetryStackTrace  whether stack traces should be logged or not      * @return the builder      */
DECL|method|logRetryStackTrace (String logRetryStackTrace)
specifier|public
name|RedeliveryPolicyDefinition
name|logRetryStackTrace
parameter_list|(
name|String
name|logRetryStackTrace
parameter_list|)
block|{
name|setLogRetryStackTrace
argument_list|(
name|logRetryStackTrace
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether retry attempts should be logged or not.      * Can be used to include or reduce verbose.      *      * @param logRetryAttempted  whether retry attempts should be logged or not      * @return the builder      */
DECL|method|logRetryAttempted (boolean logRetryAttempted)
specifier|public
name|RedeliveryPolicyDefinition
name|logRetryAttempted
parameter_list|(
name|boolean
name|logRetryAttempted
parameter_list|)
block|{
return|return
name|logRetryAttempted
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|logRetryAttempted
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets whether retry attempts should be logged or not (supports property placeholders).      * Can be used to include or reduce verbose.      *      * @param logRetryAttempted  whether retry attempts should be logged or not      * @return the builder      */
DECL|method|logRetryAttempted (String logRetryAttempted)
specifier|public
name|RedeliveryPolicyDefinition
name|logRetryAttempted
parameter_list|(
name|String
name|logRetryAttempted
parameter_list|)
block|{
name|setLogRetryAttempted
argument_list|(
name|logRetryAttempted
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether handled exceptions should be logged or not.      * Can be used to include or reduce verbose.      *      * @param logHandled  whether handled exceptions should be logged or not      * @return the builder      */
DECL|method|logHandled (boolean logHandled)
specifier|public
name|RedeliveryPolicyDefinition
name|logHandled
parameter_list|(
name|boolean
name|logHandled
parameter_list|)
block|{
return|return
name|logHandled
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|logHandled
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets whether handled exceptions should be logged or not (supports property placeholders).      * Can be used to include or reduce verbose.      *      * @param logHandled  whether handled exceptions should be logged or not      * @return the builder      */
DECL|method|logHandled (String logHandled)
specifier|public
name|RedeliveryPolicyDefinition
name|logHandled
parameter_list|(
name|String
name|logHandled
parameter_list|)
block|{
name|setLogHandled
argument_list|(
name|logHandled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether new exceptions should be logged or not.      * Can be used to include or reduce verbose.      *<p/>      * A new exception is an exception that was thrown while handling a previous exception.      *      * @param logNewException  whether new exceptions should be logged or not      * @return the builder      */
DECL|method|logNewException (boolean logNewException)
specifier|public
name|RedeliveryPolicyDefinition
name|logNewException
parameter_list|(
name|boolean
name|logNewException
parameter_list|)
block|{
return|return
name|logNewException
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|logNewException
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets whether new exceptions should be logged or not (supports property placeholders).      * Can be used to include or reduce verbose.      *<p/>      * A new exception is an exception that was thrown while handling a previous exception.      *      * @param logNewException  whether new exceptions should be logged or not      * @return the builder      */
DECL|method|logNewException (String logNewException)
specifier|public
name|RedeliveryPolicyDefinition
name|logNewException
parameter_list|(
name|String
name|logNewException
parameter_list|)
block|{
name|setLogNewException
argument_list|(
name|logNewException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether continued exceptions should be logged or not.      * Can be used to include or reduce verbose.      *      * @param logContinued  whether continued exceptions should be logged or not      * @return the builder      */
DECL|method|logContinued (boolean logContinued)
specifier|public
name|RedeliveryPolicyDefinition
name|logContinued
parameter_list|(
name|boolean
name|logContinued
parameter_list|)
block|{
return|return
name|logContinued
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|logContinued
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets whether continued exceptions should be logged or not (supports property placeholders).      * Can be used to include or reduce verbose.      *      * @param logContinued  whether continued exceptions should be logged or not      * @return the builder      */
DECL|method|logContinued (String logContinued)
specifier|public
name|RedeliveryPolicyDefinition
name|logContinued
parameter_list|(
name|String
name|logContinued
parameter_list|)
block|{
name|setLogContinued
argument_list|(
name|logContinued
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether exhausted exceptions should be logged or not.      * Can be used to include or reduce verbose.      *      * @param logExhausted  whether exhausted exceptions should be logged or not      * @return the builder      */
DECL|method|logExhausted (boolean logExhausted)
specifier|public
name|RedeliveryPolicyDefinition
name|logExhausted
parameter_list|(
name|boolean
name|logExhausted
parameter_list|)
block|{
return|return
name|logExhausted
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|logExhausted
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets whether exhausted exceptions should be logged or not (supports property placeholders).      * Can be used to include or reduce verbose.      *      * @param logExhausted  whether exhausted exceptions should be logged or not      * @return the builder      */
DECL|method|logExhausted (String logExhausted)
specifier|public
name|RedeliveryPolicyDefinition
name|logExhausted
parameter_list|(
name|String
name|logExhausted
parameter_list|)
block|{
name|setLogExhausted
argument_list|(
name|logExhausted
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether exhausted exceptions should be logged including message history or not (supports property placeholders).      * Can be used to include or reduce verbose.      *      * @param logExhaustedMessageHistory  whether exhausted exceptions should be logged with message history      * @return the builder      */
DECL|method|logExhaustedMessageHistory (boolean logExhaustedMessageHistory)
specifier|public
name|RedeliveryPolicyDefinition
name|logExhaustedMessageHistory
parameter_list|(
name|boolean
name|logExhaustedMessageHistory
parameter_list|)
block|{
name|setLogExhaustedMessageHistory
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|logExhaustedMessageHistory
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether exhausted exceptions should be logged including message history or not (supports property placeholders).      * Can be used to include or reduce verbose.      *      * @param logExhaustedMessageHistory  whether exhausted exceptions should be logged with message history      * @return the builder      */
DECL|method|logExhaustedMessageHistory (String logExhaustedMessageHistory)
specifier|public
name|RedeliveryPolicyDefinition
name|logExhaustedMessageHistory
parameter_list|(
name|String
name|logExhaustedMessageHistory
parameter_list|)
block|{
name|setLogExhaustedMessageHistory
argument_list|(
name|logExhaustedMessageHistory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether exhausted message body should be logged including message history or not (supports property placeholders).      * Can be used to include or reduce verbose. Requires<tt>logExhaustedMessageHistory</tt> to be enabled.      *      * @param logExhaustedMessageBody  whether exhausted message body should be logged with message history      * @return the builder      */
DECL|method|logExhaustedMessageBody (boolean logExhaustedMessageBody)
specifier|public
name|RedeliveryPolicyDefinition
name|logExhaustedMessageBody
parameter_list|(
name|boolean
name|logExhaustedMessageBody
parameter_list|)
block|{
name|setLogExhaustedMessageBody
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|logExhaustedMessageBody
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether exhausted message body should be logged including message history or not (supports property placeholders).      * Can be used to include or reduce verbose. Requires<tt>logExhaustedMessageHistory</tt> to be enabled.      *      * @param logExhaustedMessageBody  whether exhausted message body should be logged with message history      * @return the builder      */
DECL|method|logExhaustedMessageBody (String logExhaustedMessageBody)
specifier|public
name|RedeliveryPolicyDefinition
name|logExhaustedMessageBody
parameter_list|(
name|String
name|logExhaustedMessageBody
parameter_list|)
block|{
name|setLogExhaustedMessageBody
argument_list|(
name|logExhaustedMessageBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the maximum redeliveries      *<ul>      *<li>x = redeliver at most x times</li>      *<li>0 = no redeliveries</li>      *<li>-1 = redeliver forever</li>      *</ul>      *      * @param maximumRedeliveries  the value      * @return the builder      */
DECL|method|maximumRedeliveries (int maximumRedeliveries)
specifier|public
name|RedeliveryPolicyDefinition
name|maximumRedeliveries
parameter_list|(
name|int
name|maximumRedeliveries
parameter_list|)
block|{
return|return
name|maximumRedeliveries
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|maximumRedeliveries
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets the maximum redeliveries (supports property placeholders)      *<ul>      *<li>x = redeliver at most x times</li>      *<li>0 = no redeliveries</li>      *<li>-1 = redeliver forever</li>      *</ul>      *      * @param maximumRedeliveries  the value      * @return the builder      */
DECL|method|maximumRedeliveries (String maximumRedeliveries)
specifier|public
name|RedeliveryPolicyDefinition
name|maximumRedeliveries
parameter_list|(
name|String
name|maximumRedeliveries
parameter_list|)
block|{
name|setMaximumRedeliveries
argument_list|(
name|maximumRedeliveries
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Turn on collision avoidance.      *      * @return the builder      */
DECL|method|useCollisionAvoidance ()
specifier|public
name|RedeliveryPolicyDefinition
name|useCollisionAvoidance
parameter_list|()
block|{
name|setUseCollisionAvoidance
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Turn on exponential backk off      *      * @return the builder      */
DECL|method|useExponentialBackOff ()
specifier|public
name|RedeliveryPolicyDefinition
name|useExponentialBackOff
parameter_list|()
block|{
name|setUseExponentialBackOff
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the maximum delay between redelivery      *      * @param maximumRedeliveryDelay  the delay in millis      * @return the builder      */
DECL|method|maximumRedeliveryDelay (long maximumRedeliveryDelay)
specifier|public
name|RedeliveryPolicyDefinition
name|maximumRedeliveryDelay
parameter_list|(
name|long
name|maximumRedeliveryDelay
parameter_list|)
block|{
return|return
name|maximumRedeliveryDelay
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|maximumRedeliveryDelay
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Sets the maximum delay between redelivery (supports property placeholders)      *      * @param maximumRedeliveryDelay  the delay in millis      * @return the builder      */
DECL|method|maximumRedeliveryDelay (String maximumRedeliveryDelay)
specifier|public
name|RedeliveryPolicyDefinition
name|maximumRedeliveryDelay
parameter_list|(
name|String
name|maximumRedeliveryDelay
parameter_list|)
block|{
name|setMaximumRedeliveryDelay
argument_list|(
name|maximumRedeliveryDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the delay pattern with delay intervals.      *      * @param delayPattern the delay pattern      * @return the builder      */
DECL|method|delayPattern (String delayPattern)
specifier|public
name|RedeliveryPolicyDefinition
name|delayPattern
parameter_list|(
name|String
name|delayPattern
parameter_list|)
block|{
name|setDelayPattern
argument_list|(
name|delayPattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the reference of the instance of {@link org.apache.camel.spi.ExchangeFormatter} to generate the log message from exchange.      *      * @param exchangeFormatterRef name of the instance of {@link org.apache.camel.spi.ExchangeFormatter}      * @return the builder      */
DECL|method|exchangeFormatterRef (String exchangeFormatterRef)
specifier|public
name|RedeliveryPolicyDefinition
name|exchangeFormatterRef
parameter_list|(
name|String
name|exchangeFormatterRef
parameter_list|)
block|{
name|setExchangeFormatterRef
argument_list|(
name|exchangeFormatterRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
DECL|method|getMaximumRedeliveries ()
specifier|public
name|String
name|getMaximumRedeliveries
parameter_list|()
block|{
return|return
name|maximumRedeliveries
return|;
block|}
DECL|method|setMaximumRedeliveries (String maximumRedeliveries)
specifier|public
name|void
name|setMaximumRedeliveries
parameter_list|(
name|String
name|maximumRedeliveries
parameter_list|)
block|{
name|this
operator|.
name|maximumRedeliveries
operator|=
name|maximumRedeliveries
expr_stmt|;
block|}
DECL|method|getRedeliveryDelay ()
specifier|public
name|String
name|getRedeliveryDelay
parameter_list|()
block|{
return|return
name|redeliveryDelay
return|;
block|}
DECL|method|setRedeliveryDelay (String redeliveryDelay)
specifier|public
name|void
name|setRedeliveryDelay
parameter_list|(
name|String
name|redeliveryDelay
parameter_list|)
block|{
name|this
operator|.
name|redeliveryDelay
operator|=
name|redeliveryDelay
expr_stmt|;
block|}
DECL|method|getAsyncDelayedRedelivery ()
specifier|public
name|String
name|getAsyncDelayedRedelivery
parameter_list|()
block|{
return|return
name|asyncDelayedRedelivery
return|;
block|}
DECL|method|setAsyncDelayedRedelivery (String asyncDelayedRedelivery)
specifier|public
name|void
name|setAsyncDelayedRedelivery
parameter_list|(
name|String
name|asyncDelayedRedelivery
parameter_list|)
block|{
name|this
operator|.
name|asyncDelayedRedelivery
operator|=
name|asyncDelayedRedelivery
expr_stmt|;
block|}
DECL|method|getBackOffMultiplier ()
specifier|public
name|String
name|getBackOffMultiplier
parameter_list|()
block|{
return|return
name|backOffMultiplier
return|;
block|}
DECL|method|setBackOffMultiplier (String backOffMultiplier)
specifier|public
name|void
name|setBackOffMultiplier
parameter_list|(
name|String
name|backOffMultiplier
parameter_list|)
block|{
name|this
operator|.
name|backOffMultiplier
operator|=
name|backOffMultiplier
expr_stmt|;
block|}
DECL|method|getUseExponentialBackOff ()
specifier|public
name|String
name|getUseExponentialBackOff
parameter_list|()
block|{
return|return
name|useExponentialBackOff
return|;
block|}
DECL|method|setUseExponentialBackOff (String useExponentialBackOff)
specifier|public
name|void
name|setUseExponentialBackOff
parameter_list|(
name|String
name|useExponentialBackOff
parameter_list|)
block|{
name|this
operator|.
name|useExponentialBackOff
operator|=
name|useExponentialBackOff
expr_stmt|;
block|}
DECL|method|getCollisionAvoidanceFactor ()
specifier|public
name|String
name|getCollisionAvoidanceFactor
parameter_list|()
block|{
return|return
name|collisionAvoidanceFactor
return|;
block|}
DECL|method|setCollisionAvoidanceFactor (String collisionAvoidanceFactor)
specifier|public
name|void
name|setCollisionAvoidanceFactor
parameter_list|(
name|String
name|collisionAvoidanceFactor
parameter_list|)
block|{
name|this
operator|.
name|collisionAvoidanceFactor
operator|=
name|collisionAvoidanceFactor
expr_stmt|;
block|}
DECL|method|getUseCollisionAvoidance ()
specifier|public
name|String
name|getUseCollisionAvoidance
parameter_list|()
block|{
return|return
name|useCollisionAvoidance
return|;
block|}
DECL|method|setUseCollisionAvoidance (String useCollisionAvoidance)
specifier|public
name|void
name|setUseCollisionAvoidance
parameter_list|(
name|String
name|useCollisionAvoidance
parameter_list|)
block|{
name|this
operator|.
name|useCollisionAvoidance
operator|=
name|useCollisionAvoidance
expr_stmt|;
block|}
DECL|method|getMaximumRedeliveryDelay ()
specifier|public
name|String
name|getMaximumRedeliveryDelay
parameter_list|()
block|{
return|return
name|maximumRedeliveryDelay
return|;
block|}
DECL|method|setMaximumRedeliveryDelay (String maximumRedeliveryDelay)
specifier|public
name|void
name|setMaximumRedeliveryDelay
parameter_list|(
name|String
name|maximumRedeliveryDelay
parameter_list|)
block|{
name|this
operator|.
name|maximumRedeliveryDelay
operator|=
name|maximumRedeliveryDelay
expr_stmt|;
block|}
DECL|method|getRetriesExhaustedLogLevel ()
specifier|public
name|LoggingLevel
name|getRetriesExhaustedLogLevel
parameter_list|()
block|{
return|return
name|retriesExhaustedLogLevel
return|;
block|}
DECL|method|setRetriesExhaustedLogLevel (LoggingLevel retriesExhaustedLogLevel)
specifier|public
name|void
name|setRetriesExhaustedLogLevel
parameter_list|(
name|LoggingLevel
name|retriesExhaustedLogLevel
parameter_list|)
block|{
name|this
operator|.
name|retriesExhaustedLogLevel
operator|=
name|retriesExhaustedLogLevel
expr_stmt|;
block|}
DECL|method|getRetryAttemptedLogLevel ()
specifier|public
name|LoggingLevel
name|getRetryAttemptedLogLevel
parameter_list|()
block|{
return|return
name|retryAttemptedLogLevel
return|;
block|}
DECL|method|setRetryAttemptedLogLevel (LoggingLevel retryAttemptedLogLevel)
specifier|public
name|void
name|setRetryAttemptedLogLevel
parameter_list|(
name|LoggingLevel
name|retryAttemptedLogLevel
parameter_list|)
block|{
name|this
operator|.
name|retryAttemptedLogLevel
operator|=
name|retryAttemptedLogLevel
expr_stmt|;
block|}
DECL|method|getRetryAttemptedLogInterval ()
specifier|public
name|String
name|getRetryAttemptedLogInterval
parameter_list|()
block|{
return|return
name|retryAttemptedLogInterval
return|;
block|}
DECL|method|setRetryAttemptedLogInterval (String retryAttemptedLogInterval)
specifier|public
name|void
name|setRetryAttemptedLogInterval
parameter_list|(
name|String
name|retryAttemptedLogInterval
parameter_list|)
block|{
name|this
operator|.
name|retryAttemptedLogInterval
operator|=
name|retryAttemptedLogInterval
expr_stmt|;
block|}
DECL|method|getLogRetryAttempted ()
specifier|public
name|String
name|getLogRetryAttempted
parameter_list|()
block|{
return|return
name|logRetryAttempted
return|;
block|}
DECL|method|setLogRetryAttempted (String logRetryAttempted)
specifier|public
name|void
name|setLogRetryAttempted
parameter_list|(
name|String
name|logRetryAttempted
parameter_list|)
block|{
name|this
operator|.
name|logRetryAttempted
operator|=
name|logRetryAttempted
expr_stmt|;
block|}
DECL|method|getLogStackTrace ()
specifier|public
name|String
name|getLogStackTrace
parameter_list|()
block|{
return|return
name|logStackTrace
return|;
block|}
DECL|method|setLogStackTrace (String logStackTrace)
specifier|public
name|void
name|setLogStackTrace
parameter_list|(
name|String
name|logStackTrace
parameter_list|)
block|{
name|this
operator|.
name|logStackTrace
operator|=
name|logStackTrace
expr_stmt|;
block|}
DECL|method|getLogRetryStackTrace ()
specifier|public
name|String
name|getLogRetryStackTrace
parameter_list|()
block|{
return|return
name|logRetryStackTrace
return|;
block|}
DECL|method|setLogRetryStackTrace (String logRetryStackTrace)
specifier|public
name|void
name|setLogRetryStackTrace
parameter_list|(
name|String
name|logRetryStackTrace
parameter_list|)
block|{
name|this
operator|.
name|logRetryStackTrace
operator|=
name|logRetryStackTrace
expr_stmt|;
block|}
DECL|method|getLogHandled ()
specifier|public
name|String
name|getLogHandled
parameter_list|()
block|{
return|return
name|logHandled
return|;
block|}
DECL|method|setLogHandled (String logHandled)
specifier|public
name|void
name|setLogHandled
parameter_list|(
name|String
name|logHandled
parameter_list|)
block|{
name|this
operator|.
name|logHandled
operator|=
name|logHandled
expr_stmt|;
block|}
DECL|method|getLogNewException ()
specifier|public
name|String
name|getLogNewException
parameter_list|()
block|{
return|return
name|logNewException
return|;
block|}
DECL|method|setLogNewException (String logNewException)
specifier|public
name|void
name|setLogNewException
parameter_list|(
name|String
name|logNewException
parameter_list|)
block|{
name|this
operator|.
name|logNewException
operator|=
name|logNewException
expr_stmt|;
block|}
DECL|method|getLogContinued ()
specifier|public
name|String
name|getLogContinued
parameter_list|()
block|{
return|return
name|logContinued
return|;
block|}
DECL|method|setLogContinued (String logContinued)
specifier|public
name|void
name|setLogContinued
parameter_list|(
name|String
name|logContinued
parameter_list|)
block|{
name|this
operator|.
name|logContinued
operator|=
name|logContinued
expr_stmt|;
block|}
DECL|method|getLogExhausted ()
specifier|public
name|String
name|getLogExhausted
parameter_list|()
block|{
return|return
name|logExhausted
return|;
block|}
DECL|method|setLogExhausted (String logExhausted)
specifier|public
name|void
name|setLogExhausted
parameter_list|(
name|String
name|logExhausted
parameter_list|)
block|{
name|this
operator|.
name|logExhausted
operator|=
name|logExhausted
expr_stmt|;
block|}
DECL|method|getLogExhaustedMessageHistory ()
specifier|public
name|String
name|getLogExhaustedMessageHistory
parameter_list|()
block|{
return|return
name|logExhaustedMessageHistory
return|;
block|}
DECL|method|setLogExhaustedMessageHistory (String logExhaustedMessageHistory)
specifier|public
name|void
name|setLogExhaustedMessageHistory
parameter_list|(
name|String
name|logExhaustedMessageHistory
parameter_list|)
block|{
name|this
operator|.
name|logExhaustedMessageHistory
operator|=
name|logExhaustedMessageHistory
expr_stmt|;
block|}
DECL|method|getLogExhaustedMessageBody ()
specifier|public
name|String
name|getLogExhaustedMessageBody
parameter_list|()
block|{
return|return
name|logExhaustedMessageBody
return|;
block|}
DECL|method|setLogExhaustedMessageBody (String logExhaustedMessageBody)
specifier|public
name|void
name|setLogExhaustedMessageBody
parameter_list|(
name|String
name|logExhaustedMessageBody
parameter_list|)
block|{
name|this
operator|.
name|logExhaustedMessageBody
operator|=
name|logExhaustedMessageBody
expr_stmt|;
block|}
DECL|method|getDisableRedelivery ()
specifier|public
name|String
name|getDisableRedelivery
parameter_list|()
block|{
return|return
name|disableRedelivery
return|;
block|}
comment|/**      * Disables redelivery (same as setting maximum redeliveries to 0)      */
DECL|method|setDisableRedelivery (String disableRedelivery)
specifier|public
name|void
name|setDisableRedelivery
parameter_list|(
name|String
name|disableRedelivery
parameter_list|)
block|{
name|this
operator|.
name|disableRedelivery
operator|=
name|disableRedelivery
expr_stmt|;
block|}
DECL|method|getDelayPattern ()
specifier|public
name|String
name|getDelayPattern
parameter_list|()
block|{
return|return
name|delayPattern
return|;
block|}
DECL|method|setDelayPattern (String delayPattern)
specifier|public
name|void
name|setDelayPattern
parameter_list|(
name|String
name|delayPattern
parameter_list|)
block|{
name|this
operator|.
name|delayPattern
operator|=
name|delayPattern
expr_stmt|;
block|}
DECL|method|getAllowRedeliveryWhileStopping ()
specifier|public
name|String
name|getAllowRedeliveryWhileStopping
parameter_list|()
block|{
return|return
name|allowRedeliveryWhileStopping
return|;
block|}
DECL|method|setAllowRedeliveryWhileStopping (String allowRedeliveryWhileStopping)
specifier|public
name|void
name|setAllowRedeliveryWhileStopping
parameter_list|(
name|String
name|allowRedeliveryWhileStopping
parameter_list|)
block|{
name|this
operator|.
name|allowRedeliveryWhileStopping
operator|=
name|allowRedeliveryWhileStopping
expr_stmt|;
block|}
DECL|method|getExchangeFormatterRef ()
specifier|public
name|String
name|getExchangeFormatterRef
parameter_list|()
block|{
return|return
name|exchangeFormatterRef
return|;
block|}
DECL|method|setExchangeFormatterRef (String exchangeFormatterRef)
specifier|public
name|void
name|setExchangeFormatterRef
parameter_list|(
name|String
name|exchangeFormatterRef
parameter_list|)
block|{
name|this
operator|.
name|exchangeFormatterRef
operator|=
name|exchangeFormatterRef
expr_stmt|;
block|}
block|}
end_class

end_unit

