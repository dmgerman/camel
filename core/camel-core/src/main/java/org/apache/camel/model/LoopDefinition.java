begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ExpressionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * Processes a message multiple times  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"eip,routing"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"loop"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|LoopDefinition
specifier|public
class|class
name|LoopDefinition
extends|extends
name|OutputExpressionNode
block|{
annotation|@
name|XmlAttribute
DECL|field|copy
specifier|private
name|Boolean
name|copy
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|doWhile
specifier|private
name|Boolean
name|doWhile
decl_stmt|;
DECL|method|LoopDefinition ()
specifier|public
name|LoopDefinition
parameter_list|()
block|{     }
DECL|method|LoopDefinition (Expression expression)
specifier|public
name|LoopDefinition
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|super
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
DECL|method|LoopDefinition (Predicate predicate)
specifier|public
name|LoopDefinition
parameter_list|(
name|Predicate
name|predicate
parameter_list|)
block|{
name|super
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
name|setDoWhile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|LoopDefinition (ExpressionDefinition expression)
specifier|public
name|LoopDefinition
parameter_list|(
name|ExpressionDefinition
name|expression
parameter_list|)
block|{
name|super
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
comment|/**      * Enables copy mode so a copy of the input Exchange is used for each iteration.      * @return the builder      */
DECL|method|copy ()
specifier|public
name|LoopDefinition
name|copy
parameter_list|()
block|{
name|setCopy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getCopy ()
specifier|public
name|Boolean
name|getCopy
parameter_list|()
block|{
return|return
name|copy
return|;
block|}
DECL|method|getDoWhile ()
specifier|public
name|Boolean
name|getDoWhile
parameter_list|()
block|{
return|return
name|doWhile
return|;
block|}
comment|/**      * Enables the while loop that loops until the predicate evaluates to false or null.      */
DECL|method|setDoWhile (Boolean doWhile)
specifier|public
name|void
name|setDoWhile
parameter_list|(
name|Boolean
name|doWhile
parameter_list|)
block|{
name|this
operator|.
name|doWhile
operator|=
name|doWhile
expr_stmt|;
block|}
comment|/**      * If the copy attribute is true, a copy of the input Exchange is used for each iteration.      * That means each iteration will start from a copy of the same message.      *<p/>      * By default loop will loop the same exchange all over, so each iteration may      * have different message content.      */
DECL|method|setCopy (Boolean copy)
specifier|public
name|void
name|setCopy
parameter_list|(
name|Boolean
name|copy
parameter_list|)
block|{
name|this
operator|.
name|copy
operator|=
name|copy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Loop["
operator|+
name|getExpression
argument_list|()
operator|+
literal|" -> "
operator|+
name|getOutputs
argument_list|()
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortName ()
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
return|return
literal|"loop"
return|;
block|}
annotation|@
name|Override
DECL|method|getLabel ()
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
literal|"loop["
operator|+
name|getExpression
argument_list|()
operator|+
literal|"]"
return|;
block|}
comment|/**      * Expression to define how many times we should loop. Notice the expression is only evaluated once, and should return      * a number as how many times to loop. A value of zero or negative means no looping. The loop is like a for-loop fashion,      * if you want a while loop, then the dynamic router may be a better choice.      */
annotation|@
name|Override
DECL|method|setExpression (ExpressionDefinition expression)
specifier|public
name|void
name|setExpression
parameter_list|(
name|ExpressionDefinition
name|expression
parameter_list|)
block|{
comment|// override to include javadoc what the expression is used for
name|super
operator|.
name|setExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

