begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"configuration"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"configuration"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|ConfigurationOptions
specifier|public
class|class
name|ConfigurationOptions
block|{
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"option"
argument_list|)
DECL|field|globalOptions
specifier|public
name|List
argument_list|<
name|ConfigurationOption
argument_list|>
name|globalOptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|asMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|asMap
parameter_list|()
block|{
return|return
name|globalOptions
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|ConfigurationOption
operator|::
name|name
argument_list|,
name|ConfigurationOption
operator|::
name|value
argument_list|)
argument_list|)
return|;
block|}
DECL|method|from (Map<String, String> map)
specifier|public
specifier|static
name|ConfigurationOptions
name|from
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
specifier|final
name|ConfigurationOptions
name|ret
init|=
operator|new
name|ConfigurationOptions
argument_list|()
decl_stmt|;
name|map
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|ret
operator|.
name|globalOptions
operator|.
name|add
argument_list|(
operator|new
name|ConfigurationOption
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|getGlobalOptions ()
specifier|public
name|List
argument_list|<
name|ConfigurationOption
argument_list|>
name|getGlobalOptions
parameter_list|()
block|{
return|return
name|globalOptions
return|;
block|}
DECL|method|setGlobalOptions (List<ConfigurationOption> globalOptions)
specifier|public
name|void
name|setGlobalOptions
parameter_list|(
name|List
argument_list|<
name|ConfigurationOption
argument_list|>
name|globalOptions
parameter_list|)
block|{
name|this
operator|.
name|globalOptions
operator|=
name|globalOptions
expr_stmt|;
block|}
block|}
end_class

end_unit

