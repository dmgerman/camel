begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|PatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Used for filtering routes to only include routes matching a function.  */
end_comment

begin_class
DECL|class|RouteFilters
specifier|public
class|class
name|RouteFilters
implements|implements
name|Function
argument_list|<
name|RouteDefinition
argument_list|,
name|Boolean
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RouteFilters
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|includesText
specifier|private
specifier|final
name|String
name|includesText
decl_stmt|;
DECL|field|excludesText
specifier|private
specifier|final
name|String
name|excludesText
decl_stmt|;
DECL|field|includes
specifier|private
specifier|final
name|String
index|[]
name|includes
decl_stmt|;
DECL|field|excludes
specifier|private
specifier|final
name|String
index|[]
name|excludes
decl_stmt|;
comment|/**      * Used for filtering routes routes matching the given pattern, which follows the following rules:      *      * - Match by route id      * - Match by route input endpoint uri      *      * The matching is using exact match, by wildcard and regular expression as documented by {@link PatternHelper#matchPattern(String, String)}.      *      * For example to only include routes which starts with foo in their route id's, use: include=foo&#42;      * And to exclude routes which starts from JMS endpoints, use: exclude=jms:&#42;      *      * Multiple patterns can be separated by comma, for example to exclude both foo and bar routes, use: exclude=foo&#42;,bar&#42;      *      * Exclude takes precedence over include.      *      * @param include  the include pattern      * @param exclude  the exclude pattern      */
DECL|method|filterByPattern (String include, String exclude)
specifier|public
specifier|static
name|RouteFilters
name|filterByPattern
parameter_list|(
name|String
name|include
parameter_list|,
name|String
name|exclude
parameter_list|)
block|{
return|return
operator|new
name|RouteFilters
argument_list|(
name|include
argument_list|,
name|exclude
argument_list|)
return|;
block|}
DECL|method|RouteFilters (String include, String exclude)
specifier|private
name|RouteFilters
parameter_list|(
name|String
name|include
parameter_list|,
name|String
name|exclude
parameter_list|)
block|{
name|this
operator|.
name|includesText
operator|=
name|include
expr_stmt|;
name|this
operator|.
name|excludesText
operator|=
name|exclude
expr_stmt|;
name|this
operator|.
name|includes
operator|=
name|include
operator|!=
literal|null
condition|?
name|include
operator|.
name|split
argument_list|(
literal|","
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|excludes
operator|=
name|exclude
operator|!=
literal|null
condition|?
name|exclude
operator|.
name|split
argument_list|(
literal|","
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (RouteDefinition route)
specifier|public
name|Boolean
name|apply
parameter_list|(
name|RouteDefinition
name|route
parameter_list|)
block|{
name|String
name|id
init|=
name|route
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
name|route
operator|.
name|getInput
argument_list|()
operator|!=
literal|null
condition|?
name|route
operator|.
name|getInput
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
else|:
literal|null
decl_stmt|;
name|boolean
name|answer
init|=
name|filter
argument_list|(
name|route
argument_list|,
name|id
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Route filter: include={}, exclude={}, id={}, from={} -> {}"
argument_list|,
name|includesText
argument_list|,
name|excludesText
argument_list|,
name|id
argument_list|,
name|uri
argument_list|,
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|filter (RouteDefinition route, String id, String uri)
specifier|private
name|boolean
name|filter
parameter_list|(
name|RouteDefinition
name|route
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
comment|// exclude takes precedence
if|if
condition|(
name|excludes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|part
range|:
name|excludes
control|)
block|{
if|if
condition|(
name|PatternHelper
operator|.
name|matchPattern
argument_list|(
name|id
argument_list|,
name|part
argument_list|)
operator|||
name|PatternHelper
operator|.
name|matchPattern
argument_list|(
name|uri
argument_list|,
name|part
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|includes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|part
range|:
name|includes
control|)
block|{
if|if
condition|(
name|PatternHelper
operator|.
name|matchPattern
argument_list|(
name|id
argument_list|,
name|part
argument_list|)
operator|||
name|PatternHelper
operator|.
name|matchPattern
argument_list|(
name|uri
argument_list|,
name|part
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
comment|// if include has not been set then, we assume its matched as it was not excluded
name|match
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|match
return|;
block|}
block|}
end_class

end_unit

