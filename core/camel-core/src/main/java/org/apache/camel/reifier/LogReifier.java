begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.reifier
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|LogDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|LogProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|MaskingFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|processor
operator|.
name|DefaultMaskingFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|LogReifier
class|class
name|LogReifier
extends|extends
name|ProcessorReifier
argument_list|<
name|LogDefinition
argument_list|>
block|{
DECL|method|LogReifier (ProcessorDefinition<?> definition)
name|LogReifier
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|LogDefinition
operator|)
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|definition
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"message"
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// use simple language for the message string to give it more power
name|Expression
name|exp
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|resolveLanguage
argument_list|(
literal|"simple"
argument_list|)
operator|.
name|createExpression
argument_list|(
name|definition
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
comment|// get logger explicitely set in the definition
name|Logger
name|logger
init|=
name|definition
operator|.
name|getLogger
argument_list|()
decl_stmt|;
comment|// get logger which may be set in XML definition
if|if
condition|(
name|logger
operator|==
literal|null
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|definition
operator|.
name|getLoggerRef
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|=
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|definition
operator|.
name|getLoggerRef
argument_list|()
argument_list|,
name|Logger
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|==
literal|null
condition|)
block|{
comment|// first - try to lookup single instance in the registry, just like LogComponent
name|Map
argument_list|<
name|String
argument_list|,
name|Logger
argument_list|>
name|availableLoggers
init|=
name|routeContext
operator|.
name|lookupByType
argument_list|(
name|Logger
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|availableLoggers
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|logger
operator|=
name|availableLoggers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Using custom Logger: {}"
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|availableLoggers
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// we should log about this somewhere...
name|log
operator|.
name|debug
argument_list|(
literal|"More than one {} instance found in the registry. Falling back to create logger by name."
argument_list|,
name|Logger
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|logger
operator|==
literal|null
condition|)
block|{
name|String
name|name
init|=
name|definition
operator|.
name|getLogName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getGlobalOption
argument_list|(
name|Exchange
operator|.
name|LOG_EIP_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Using logName from CamelContext properties: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|routeContext
operator|.
name|getRoute
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"LogName is not configured, using route id as logName: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|logger
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// should be INFO by default
name|LoggingLevel
name|level
init|=
name|definition
operator|.
name|getLoggingLevel
argument_list|()
operator|!=
literal|null
condition|?
name|definition
operator|.
name|getLoggingLevel
argument_list|()
else|:
name|LoggingLevel
operator|.
name|INFO
decl_stmt|;
name|CamelLogger
name|camelLogger
init|=
operator|new
name|CamelLogger
argument_list|(
name|logger
argument_list|,
name|level
argument_list|,
name|definition
operator|.
name|getMarker
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|LogProcessor
argument_list|(
name|exp
argument_list|,
name|camelLogger
argument_list|,
name|getMaskingFormatter
argument_list|(
name|routeContext
argument_list|)
argument_list|,
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getLogListeners
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getMaskingFormatter (RouteContext routeContext)
specifier|private
name|MaskingFormatter
name|getMaskingFormatter
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
block|{
if|if
condition|(
name|routeContext
operator|.
name|isLogMask
argument_list|()
condition|)
block|{
name|MaskingFormatter
name|formatter
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByNameAndType
argument_list|(
name|MaskingFormatter
operator|.
name|CUSTOM_LOG_MASK_REF
argument_list|,
name|MaskingFormatter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatter
operator|==
literal|null
condition|)
block|{
name|formatter
operator|=
operator|new
name|DefaultMaskingFormatter
argument_list|()
expr_stmt|;
block|}
return|return
name|formatter
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

