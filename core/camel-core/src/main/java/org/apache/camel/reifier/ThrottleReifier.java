begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.reifier
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinitionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ThrottleDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ExpressionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|Throttler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_class
DECL|class|ThrottleReifier
specifier|public
class|class
name|ThrottleReifier
extends|extends
name|ExpressionReifier
argument_list|<
name|ThrottleDefinition
argument_list|>
block|{
DECL|method|ThrottleReifier (ProcessorDefinition<?> definition)
name|ThrottleReifier
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|ThrottleDefinition
operator|)
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|async
init|=
name|definition
operator|.
name|getAsyncDelayed
argument_list|()
operator|!=
literal|null
operator|&&
name|definition
operator|.
name|getAsyncDelayed
argument_list|()
decl_stmt|;
name|boolean
name|shutdownThreadPool
init|=
name|ProcessorDefinitionHelper
operator|.
name|willCreateNewThreadPool
argument_list|(
name|routeContext
argument_list|,
name|definition
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ScheduledExecutorService
name|threadPool
init|=
name|ProcessorDefinitionHelper
operator|.
name|getConfiguredScheduledExecutorService
argument_list|(
name|routeContext
argument_list|,
literal|"Throttle"
argument_list|,
name|definition
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// should be default 1000 millis
name|long
name|period
init|=
name|definition
operator|.
name|getTimePeriodMillis
argument_list|()
operator|!=
literal|null
condition|?
name|definition
operator|.
name|getTimePeriodMillis
argument_list|()
else|:
literal|1000L
decl_stmt|;
comment|// max requests per period is mandatory
name|Expression
name|maxRequestsExpression
init|=
name|createMaxRequestsPerPeriodExpression
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxRequestsExpression
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"MaxRequestsPerPeriod expression must be provided on "
operator|+
name|this
argument_list|)
throw|;
block|}
name|Expression
name|correlation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|getCorrelationExpression
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|correlation
operator|=
name|definition
operator|.
name|getCorrelationExpression
argument_list|()
operator|.
name|createExpression
argument_list|(
name|routeContext
argument_list|)
expr_stmt|;
block|}
name|boolean
name|reject
init|=
name|definition
operator|.
name|getRejectExecution
argument_list|()
operator|!=
literal|null
operator|&&
name|definition
operator|.
name|getRejectExecution
argument_list|()
decl_stmt|;
name|Throttler
name|answer
init|=
operator|new
name|Throttler
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|maxRequestsExpression
argument_list|,
name|period
argument_list|,
name|threadPool
argument_list|,
name|shutdownThreadPool
argument_list|,
name|reject
argument_list|,
name|correlation
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setAsyncDelayed
argument_list|(
name|async
argument_list|)
expr_stmt|;
if|if
condition|(
name|definition
operator|.
name|getCallerRunsWhenRejected
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// should be true by default
name|answer
operator|.
name|setCallerRunsWhenRejected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|.
name|setCallerRunsWhenRejected
argument_list|(
name|definition
operator|.
name|getCallerRunsWhenRejected
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|createMaxRequestsPerPeriodExpression (RouteContext routeContext)
specifier|private
name|Expression
name|createMaxRequestsPerPeriodExpression
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
block|{
name|ExpressionDefinition
name|expr
init|=
name|definition
operator|.
name|getExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|expr
operator|!=
literal|null
condition|)
block|{
return|return
name|expr
operator|.
name|createExpression
argument_list|(
name|routeContext
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

