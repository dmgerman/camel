begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.reifier
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|BeanDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_class
DECL|class|BeanReifier
class|class
name|BeanReifier
extends|extends
name|ProcessorReifier
argument_list|<
name|BeanDefinition
argument_list|>
block|{
DECL|method|BeanReifier (ProcessorDefinition<?> definition)
name|BeanReifier
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
block|{
name|super
argument_list|(
name|BeanDefinition
operator|.
name|class
operator|.
name|cast
argument_list|(
name|definition
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
decl_stmt|;
name|Object
name|bean
init|=
name|definition
operator|.
name|getBean
argument_list|()
decl_stmt|;
name|String
name|ref
init|=
name|definition
operator|.
name|getRef
argument_list|()
decl_stmt|;
name|String
name|method
init|=
name|definition
operator|.
name|getMethod
argument_list|()
decl_stmt|;
name|String
name|beanType
init|=
name|definition
operator|.
name|getBeanType
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|beanClass
init|=
name|definition
operator|.
name|getBeanClass
argument_list|()
decl_stmt|;
return|return
name|camelContext
operator|.
name|getBeanProcessorFactory
argument_list|()
operator|.
name|createBeanProcessor
argument_list|(
name|camelContext
argument_list|,
name|bean
argument_list|,
name|beanType
argument_list|,
name|beanClass
argument_list|,
name|ref
argument_list|,
name|method
argument_list|,
name|isCacheBean
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isCacheBean ()
specifier|private
name|boolean
name|isCacheBean
parameter_list|()
block|{
return|return
name|definition
operator|.
name|getCache
argument_list|()
operator|==
literal|null
operator|||
name|definition
operator|.
name|getCache
argument_list|()
return|;
block|}
block|}
end_class

end_unit

