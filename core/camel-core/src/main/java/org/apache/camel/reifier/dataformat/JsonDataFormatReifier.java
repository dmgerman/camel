begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.reifier.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|JsonDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|JsonLibrary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_class
DECL|class|JsonDataFormatReifier
specifier|public
class|class
name|JsonDataFormatReifier
extends|extends
name|DataFormatReifier
argument_list|<
name|JsonDataFormat
argument_list|>
block|{
DECL|method|JsonDataFormatReifier (DataFormatDefinition definition)
specifier|public
name|JsonDataFormatReifier
parameter_list|(
name|DataFormatDefinition
name|definition
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|JsonDataFormat
operator|)
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doCreateDataFormat (CamelContext camelContext)
specifier|protected
name|DataFormat
name|doCreateDataFormat
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
if|if
condition|(
name|definition
operator|.
name|getLibrary
argument_list|()
operator|==
name|JsonLibrary
operator|.
name|XStream
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|this
argument_list|,
literal|"dataFormatName"
argument_list|,
literal|"json-xstream"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|definition
operator|.
name|getLibrary
argument_list|()
operator|==
name|JsonLibrary
operator|.
name|Jackson
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|this
argument_list|,
literal|"dataFormatName"
argument_list|,
literal|"json-jackson"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|definition
operator|.
name|getLibrary
argument_list|()
operator|==
name|JsonLibrary
operator|.
name|Gson
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|this
argument_list|,
literal|"dataFormatName"
argument_list|,
literal|"json-gson"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|definition
operator|.
name|getLibrary
argument_list|()
operator|==
name|JsonLibrary
operator|.
name|Fastjson
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|this
argument_list|,
literal|"dataFormatName"
argument_list|,
literal|"json-fastjson"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|this
argument_list|,
literal|"dataFormatName"
argument_list|,
literal|"json-johnzon"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getUnmarshalType
argument_list|()
operator|==
literal|null
operator|&&
name|definition
operator|.
name|getUnmarshalTypeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|definition
operator|.
name|setUnmarshalType
argument_list|(
name|camelContext
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|definition
operator|.
name|getUnmarshalTypeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|definition
operator|.
name|getCollectionType
argument_list|()
operator|==
literal|null
operator|&&
name|definition
operator|.
name|getCollectionTypeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|definition
operator|.
name|setCollectionType
argument_list|(
name|camelContext
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|definition
operator|.
name|getCollectionTypeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|super
operator|.
name|doCreateDataFormat
argument_list|(
name|camelContext
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|configureDataFormat (DataFormat dataFormat, CamelContext camelContext)
specifier|protected
name|void
name|configureDataFormat
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
block|{
if|if
condition|(
name|definition
operator|.
name|getObjectMapper
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// must be a reference value
name|String
name|ref
init|=
name|definition
operator|.
name|getObjectMapper
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|?
name|definition
operator|.
name|getObjectMapper
argument_list|()
else|:
literal|"#"
operator|+
name|definition
operator|.
name|getObjectMapper
argument_list|()
decl_stmt|;
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"objectMapper"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getUseDefaultObjectMapper
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"useDefaultObjectMapper"
argument_list|,
name|definition
operator|.
name|getUseDefaultObjectMapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getUnmarshalType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"unmarshalType"
argument_list|,
name|definition
operator|.
name|getUnmarshalType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getPrettyPrint
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"prettyPrint"
argument_list|,
name|definition
operator|.
name|getPrettyPrint
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getJsonView
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"jsonView"
argument_list|,
name|definition
operator|.
name|getJsonView
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getInclude
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"include"
argument_list|,
name|definition
operator|.
name|getInclude
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getAllowJmsType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"allowJmsType"
argument_list|,
name|definition
operator|.
name|getAllowJmsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getCollectionTypeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"collectionType"
argument_list|,
name|definition
operator|.
name|getCollectionTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getUseList
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"useList"
argument_list|,
name|definition
operator|.
name|getUseList
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getEnableJaxbAnnotationModule
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"enableJaxbAnnotationModule"
argument_list|,
name|definition
operator|.
name|getEnableJaxbAnnotationModule
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getModuleClassNames
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"moduleClassNames"
argument_list|,
name|definition
operator|.
name|getModuleClassNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getModuleRefs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"moduleRefs"
argument_list|,
name|definition
operator|.
name|getModuleRefs
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getEnableFeatures
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"enableFeatures"
argument_list|,
name|definition
operator|.
name|getEnableFeatures
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getDisableFeatures
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"disableFeatures"
argument_list|,
name|definition
operator|.
name|getDisableFeatures
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getPermissions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"permissions"
argument_list|,
name|definition
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getAllowUnmarshallType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"allowUnmarshallType"
argument_list|,
name|definition
operator|.
name|getAllowUnmarshallType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if we have the unmarshal type, but no permission set, then use it to
comment|// be allowed
if|if
condition|(
name|definition
operator|.
name|getPermissions
argument_list|()
operator|==
literal|null
operator|&&
name|definition
operator|.
name|getUnmarshalType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|allow
init|=
literal|"+"
operator|+
name|definition
operator|.
name|getUnmarshalType
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"permissions"
argument_list|,
name|allow
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

