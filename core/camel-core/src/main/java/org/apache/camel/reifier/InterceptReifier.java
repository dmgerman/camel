begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.reifier
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NamedNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InterceptStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_class
DECL|class|InterceptReifier
specifier|public
class|class
name|InterceptReifier
parameter_list|<
name|T
extends|extends
name|InterceptDefinition
parameter_list|>
extends|extends
name|ProcessorReifier
argument_list|<
name|T
argument_list|>
block|{
DECL|method|InterceptReifier (ProcessorDefinition<?> definition)
name|InterceptReifier
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|T
operator|)
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProcessor (final RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
specifier|final
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
comment|// create the output processor
name|Processor
name|output
init|=
name|this
operator|.
name|createChildProcessor
argument_list|(
name|routeContext
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// add the output as a intercept strategy to the route context so its
comment|// invoked on each processing step
name|routeContext
operator|.
name|getInterceptStrategies
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|InterceptStrategy
argument_list|()
block|{
specifier|private
name|Processor
name|interceptedTarget
decl_stmt|;
specifier|public
name|Processor
name|wrapProcessorInInterceptors
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|NamedNode
name|definition
parameter_list|,
name|Processor
name|target
parameter_list|,
name|Processor
name|nextTarget
parameter_list|)
throws|throws
name|Exception
block|{
comment|// store the target we are intercepting
name|this
operator|.
name|interceptedTarget
operator|=
name|target
expr_stmt|;
comment|// remember the target that was intercepted
name|InterceptReifier
operator|.
name|this
operator|.
name|definition
operator|.
name|getIntercepted
argument_list|()
operator|.
name|add
argument_list|(
name|interceptedTarget
argument_list|)
expr_stmt|;
if|if
condition|(
name|interceptedTarget
operator|!=
literal|null
condition|)
block|{
comment|// wrap in a pipeline so we continue routing to the next
return|return
name|Pipeline
operator|.
name|newInstance
argument_list|(
name|context
argument_list|,
name|output
argument_list|,
name|interceptedTarget
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|output
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"intercept["
operator|+
operator|(
name|interceptedTarget
operator|!=
literal|null
condition|?
name|interceptedTarget
else|:
name|output
operator|)
operator|+
literal|"]"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// remove me from the route so I am not invoked in a regular route path
operator|(
operator|(
name|RouteDefinition
operator|)
name|routeContext
operator|.
name|getRoute
argument_list|()
operator|)
operator|.
name|getOutputs
argument_list|()
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// and return no processor to invoke next from me
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

