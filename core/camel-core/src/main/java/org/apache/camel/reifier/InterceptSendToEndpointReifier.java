begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.reifier
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExtendedCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
operator|.
name|DefaultInterceptSendToEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptSendToEndpointDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|InterceptEndpointProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EndpointStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_class
DECL|class|InterceptSendToEndpointReifier
class|class
name|InterceptSendToEndpointReifier
extends|extends
name|ProcessorReifier
argument_list|<
name|InterceptSendToEndpointDefinition
argument_list|>
block|{
DECL|method|InterceptSendToEndpointReifier (ProcessorDefinition<?> definition)
name|InterceptSendToEndpointReifier
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|InterceptSendToEndpointDefinition
operator|)
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProcessor (final RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
specifier|final
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
comment|// create the detour
specifier|final
name|Processor
name|detour
init|=
name|this
operator|.
name|createChildProcessor
argument_list|(
name|routeContext
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|String
name|matchURI
init|=
name|definition
operator|.
name|getUri
argument_list|()
decl_stmt|;
comment|// register endpoint callback so we can proxy the endpoint
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|registerEndpointCallback
argument_list|(
operator|new
name|EndpointStrategy
argument_list|()
block|{
specifier|public
name|Endpoint
name|registerEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
if|if
condition|(
name|endpoint
operator|instanceof
name|DefaultInterceptSendToEndpoint
condition|)
block|{
comment|// endpoint already decorated
return|return
name|endpoint
return|;
block|}
elseif|else
if|if
condition|(
name|matchURI
operator|==
literal|null
operator|||
name|matchPattern
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|uri
argument_list|,
name|matchURI
argument_list|)
condition|)
block|{
comment|// only proxy if the uri is matched decorate endpoint with our proxy
comment|// should be false by default
name|boolean
name|skip
init|=
name|definition
operator|.
name|getSkipSendToOriginalEndpoint
argument_list|()
operator|!=
literal|null
operator|&&
name|definition
operator|.
name|getSkipSendToOriginalEndpoint
argument_list|()
decl_stmt|;
name|DefaultInterceptSendToEndpoint
name|proxy
init|=
operator|new
name|DefaultInterceptSendToEndpoint
argument_list|(
name|endpoint
argument_list|,
name|skip
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|setDetour
argument_list|(
name|detour
argument_list|)
expr_stmt|;
return|return
name|proxy
return|;
block|}
else|else
block|{
comment|// no proxy so return regular endpoint
return|return
name|endpoint
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// remove the original intercepted route from the outputs as we do not intercept as the regular interceptor
comment|// instead we use the proxy endpoints producer do the triggering. That is we trigger when someone sends
comment|// an exchange to the endpoint, see InterceptSendToEndpoint for details.
name|RouteDefinition
name|route
init|=
operator|(
name|RouteDefinition
operator|)
name|routeContext
operator|.
name|getRoute
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
argument_list|>
name|outputs
init|=
name|route
operator|.
name|getOutputs
argument_list|()
decl_stmt|;
name|outputs
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
operator|new
name|InterceptEndpointProcessor
argument_list|(
name|matchURI
argument_list|,
name|detour
argument_list|)
return|;
block|}
comment|/**      * Does the uri match the pattern.      *      * @param camelContext the CamelContext      * @param uri the uri      * @param pattern the pattern, which can be an endpoint uri as well      * @return<tt>true</tt> if matched and we should intercept,<tt>false</tt> if not matched, and not intercept.      */
DECL|method|matchPattern (CamelContext camelContext, String uri, String pattern)
specifier|protected
name|boolean
name|matchPattern
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
comment|// match using the pattern as-is
name|boolean
name|match
init|=
name|EndpointHelper
operator|.
name|matchEndpoint
argument_list|(
name|camelContext
argument_list|,
name|uri
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|match
condition|)
block|{
try|try
block|{
comment|// the pattern could be an uri, so we need to normalize it before matching again
name|pattern
operator|=
name|URISupport
operator|.
name|normalizeUri
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|match
operator|=
name|EndpointHelper
operator|.
name|matchEndpoint
argument_list|(
name|camelContext
argument_list|,
name|uri
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|match
return|;
block|}
block|}
end_class

end_unit

