begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|NamespaceAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|KeyStoreParameters
import|;
end_import

begin_comment
comment|/**  * The XML Security data format facilitates encryption and decryption of XML  * payloads.  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|firstVersion
operator|=
literal|"2.0.0"
argument_list|,
name|label
operator|=
literal|"dataformat,transformation,xml,security"
argument_list|,
name|title
operator|=
literal|"XML Security"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"secureXML"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|XMLSecurityDataFormat
specifier|public
class|class
name|XMLSecurityDataFormat
extends|extends
name|DataFormatDefinition
implements|implements
name|NamespaceAware
block|{
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"TRIPLEDES"
argument_list|)
DECL|field|xmlCipherAlgorithm
specifier|private
name|String
name|xmlCipherAlgorithm
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|passPhrase
specifier|private
name|String
name|passPhrase
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|passPhraseByte
specifier|private
name|byte
index|[]
name|passPhraseByte
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|secureTag
specifier|private
name|String
name|secureTag
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|secureTagContents
specifier|private
name|Boolean
name|secureTagContents
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"RSA_OAEP"
argument_list|)
DECL|field|keyCipherAlgorithm
specifier|private
name|String
name|keyCipherAlgorithm
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|recipientKeyAlias
specifier|private
name|String
name|recipientKeyAlias
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|keyOrTrustStoreParametersRef
specifier|private
name|String
name|keyOrTrustStoreParametersRef
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|keyPassword
specifier|private
name|String
name|keyPassword
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"SHA1"
argument_list|)
DECL|field|digestAlgorithm
specifier|private
name|String
name|digestAlgorithm
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"MGF1_SHA1"
argument_list|)
DECL|field|mgfAlgorithm
specifier|private
name|String
name|mgfAlgorithm
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|addKeyValueForEncryptedKey
specifier|private
name|Boolean
name|addKeyValueForEncryptedKey
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|keyOrTrustStoreParameters
specifier|private
name|KeyStoreParameters
name|keyOrTrustStoreParameters
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|namespaces
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
decl_stmt|;
DECL|method|XMLSecurityDataFormat ()
specifier|public
name|XMLSecurityDataFormat
parameter_list|()
block|{
name|super
argument_list|(
literal|"secureXML"
argument_list|)
expr_stmt|;
block|}
DECL|method|getXmlCipherAlgorithm ()
specifier|public
name|String
name|getXmlCipherAlgorithm
parameter_list|()
block|{
return|return
name|xmlCipherAlgorithm
return|;
block|}
comment|/**      * The cipher algorithm to be used for encryption/decryption of the XML      * message content. The available choices are:      *<ul>      *<li>XMLCipher.TRIPLEDES</li>      *<li>XMLCipher.AES_128</li>      *<li>XMLCipher.AES_128_GCM</li>      *<li>XMLCipher.AES_192</li>      *<li>XMLCipher.AES_192_GCM</li>      *<li>XMLCipher.AES_256</li>      *<li>XMLCipher.AES_256_GCM</li>      *<li>XMLCipher.SEED_128</li>      *<li>XMLCipher.CAMELLIA_128</li>      *<li>XMLCipher.CAMELLIA_192</li>      *<li>XMLCipher.CAMELLIA_256</li>      *</ul>      * The default value is MLCipher.TRIPLEDES      */
DECL|method|setXmlCipherAlgorithm (String xmlCipherAlgorithm)
specifier|public
name|void
name|setXmlCipherAlgorithm
parameter_list|(
name|String
name|xmlCipherAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|xmlCipherAlgorithm
operator|=
name|xmlCipherAlgorithm
expr_stmt|;
block|}
DECL|method|getPassPhrase ()
specifier|public
name|String
name|getPassPhrase
parameter_list|()
block|{
return|return
name|passPhrase
return|;
block|}
comment|/**      * A String used as passPhrase to encrypt/decrypt content. The passPhrase      * has to be provided. If no passPhrase is specified, a default passPhrase      * is used. The passPhrase needs to be put together in conjunction with the      * appropriate encryption algorithm. For example using TRIPLEDES the      * passPhase can be a "Only another 24 Byte key"      */
DECL|method|setPassPhrase (String passPhrase)
specifier|public
name|void
name|setPassPhrase
parameter_list|(
name|String
name|passPhrase
parameter_list|)
block|{
name|this
operator|.
name|passPhrase
operator|=
name|passPhrase
expr_stmt|;
block|}
DECL|method|getPassPhraseByte ()
specifier|public
name|byte
index|[]
name|getPassPhraseByte
parameter_list|()
block|{
return|return
name|passPhraseByte
return|;
block|}
comment|/**      * A byte[] used as passPhrase to encrypt/decrypt content. The passPhrase      * has to be provided. If no passPhrase is specified, a default passPhrase      * is used. The passPhrase needs to be put together in conjunction with the      * appropriate encryption algorithm. For example using TRIPLEDES the      * passPhase can be a "Only another 24 Byte key"      */
DECL|method|setPassPhraseByte (byte[] passPhraseByte)
specifier|public
name|void
name|setPassPhraseByte
parameter_list|(
name|byte
index|[]
name|passPhraseByte
parameter_list|)
block|{
name|this
operator|.
name|passPhraseByte
operator|=
name|passPhraseByte
expr_stmt|;
block|}
DECL|method|getSecureTag ()
specifier|public
name|String
name|getSecureTag
parameter_list|()
block|{
return|return
name|secureTag
return|;
block|}
comment|/**      * The XPath reference to the XML Element selected for      * encryption/decryption. If no tag is specified, the entire payload is      * encrypted/decrypted.      */
DECL|method|setSecureTag (String secureTag)
specifier|public
name|void
name|setSecureTag
parameter_list|(
name|String
name|secureTag
parameter_list|)
block|{
name|this
operator|.
name|secureTag
operator|=
name|secureTag
expr_stmt|;
block|}
DECL|method|getSecureTagContents ()
specifier|public
name|Boolean
name|getSecureTagContents
parameter_list|()
block|{
return|return
name|secureTagContents
return|;
block|}
comment|/**      * A boolean value to specify whether the XML Element is to be encrypted or      * the contents of the XML Element false = Element Level true = Element      * Content Level      */
DECL|method|setSecureTagContents (Boolean secureTagContents)
specifier|public
name|void
name|setSecureTagContents
parameter_list|(
name|Boolean
name|secureTagContents
parameter_list|)
block|{
name|this
operator|.
name|secureTagContents
operator|=
name|secureTagContents
expr_stmt|;
block|}
comment|/**      * The cipher algorithm to be used for encryption/decryption of the      * asymmetric key. The available choices are:      *<ul>      *<li>XMLCipher.RSA_v1dot5</li>      *<li>XMLCipher.RSA_OAEP</li>      *<li>XMLCipher.RSA_OAEP_11</li>      *</ul>      * The default value is XMLCipher.RSA_OAEP      */
DECL|method|setKeyCipherAlgorithm (String keyCipherAlgorithm)
specifier|public
name|void
name|setKeyCipherAlgorithm
parameter_list|(
name|String
name|keyCipherAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|keyCipherAlgorithm
operator|=
name|keyCipherAlgorithm
expr_stmt|;
block|}
DECL|method|getKeyCipherAlgorithm ()
specifier|public
name|String
name|getKeyCipherAlgorithm
parameter_list|()
block|{
return|return
name|keyCipherAlgorithm
return|;
block|}
comment|/**      * The key alias to be used when retrieving the recipient's public or      * private key from a KeyStore when performing asymmetric key encryption or      * decryption.      */
DECL|method|setRecipientKeyAlias (String recipientKeyAlias)
specifier|public
name|void
name|setRecipientKeyAlias
parameter_list|(
name|String
name|recipientKeyAlias
parameter_list|)
block|{
name|this
operator|.
name|recipientKeyAlias
operator|=
name|recipientKeyAlias
expr_stmt|;
block|}
DECL|method|getRecipientKeyAlias ()
specifier|public
name|String
name|getRecipientKeyAlias
parameter_list|()
block|{
return|return
name|recipientKeyAlias
return|;
block|}
comment|/**      * Refers to a KeyStore instance to lookup in the registry, which is used      * for configuration options for creating and loading a KeyStore instance      * that represents the sender's trustStore or recipient's keyStore.      */
DECL|method|setKeyOrTrustStoreParametersRef (String id)
specifier|public
name|void
name|setKeyOrTrustStoreParametersRef
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|keyOrTrustStoreParametersRef
operator|=
name|id
expr_stmt|;
block|}
DECL|method|getKeyOrTrustStoreParametersRef ()
specifier|public
name|String
name|getKeyOrTrustStoreParametersRef
parameter_list|()
block|{
return|return
name|this
operator|.
name|keyOrTrustStoreParametersRef
return|;
block|}
DECL|method|getKeyOrTrustStoreParameters ()
specifier|public
name|KeyStoreParameters
name|getKeyOrTrustStoreParameters
parameter_list|()
block|{
return|return
name|keyOrTrustStoreParameters
return|;
block|}
comment|/**      * Configuration options for creating and loading a KeyStore instance that      * represents the sender's trustStore or recipient's keyStore.      */
DECL|method|setKeyOrTrustStoreParameters (KeyStoreParameters keyOrTrustStoreParameters)
specifier|public
name|void
name|setKeyOrTrustStoreParameters
parameter_list|(
name|KeyStoreParameters
name|keyOrTrustStoreParameters
parameter_list|)
block|{
name|this
operator|.
name|keyOrTrustStoreParameters
operator|=
name|keyOrTrustStoreParameters
expr_stmt|;
block|}
DECL|method|getKeyPassword ()
specifier|public
name|String
name|getKeyPassword
parameter_list|()
block|{
return|return
name|this
operator|.
name|keyPassword
return|;
block|}
comment|/**      * The password to be used for retrieving the private key from the KeyStore.      * This key is used for asymmetric decryption.      */
DECL|method|setKeyPassword (String keyPassword)
specifier|public
name|void
name|setKeyPassword
parameter_list|(
name|String
name|keyPassword
parameter_list|)
block|{
name|this
operator|.
name|keyPassword
operator|=
name|keyPassword
expr_stmt|;
block|}
DECL|method|getDigestAlgorithm ()
specifier|public
name|String
name|getDigestAlgorithm
parameter_list|()
block|{
return|return
name|digestAlgorithm
return|;
block|}
comment|/**      * The digest algorithm to use with the RSA OAEP algorithm. The available      * choices are:      *<ul>      *<li>XMLCipher.SHA1</li>      *<li>XMLCipher.SHA256</li>      *<li>XMLCipher.SHA512</li>      *</ul>      * The default value is XMLCipher.SHA1      */
DECL|method|setDigestAlgorithm (String digestAlgorithm)
specifier|public
name|void
name|setDigestAlgorithm
parameter_list|(
name|String
name|digestAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|digestAlgorithm
operator|=
name|digestAlgorithm
expr_stmt|;
block|}
DECL|method|getMgfAlgorithm ()
specifier|public
name|String
name|getMgfAlgorithm
parameter_list|()
block|{
return|return
name|mgfAlgorithm
return|;
block|}
comment|/**      * The MGF Algorithm to use with the RSA OAEP algorithm. The available      * choices are:      *<ul>      *<li>EncryptionConstants.MGF1_SHA1</li>      *<li>EncryptionConstants.MGF1_SHA256</li>      *<li>EncryptionConstants.MGF1_SHA512</li>      *</ul>      * The default value is EncryptionConstants.MGF1_SHA1      */
DECL|method|setMgfAlgorithm (String mgfAlgorithm)
specifier|public
name|void
name|setMgfAlgorithm
parameter_list|(
name|String
name|mgfAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|mgfAlgorithm
operator|=
name|mgfAlgorithm
expr_stmt|;
block|}
DECL|method|getAddKeyValueForEncryptedKey ()
specifier|public
name|Boolean
name|getAddKeyValueForEncryptedKey
parameter_list|()
block|{
return|return
name|addKeyValueForEncryptedKey
return|;
block|}
comment|/**      * Whether to add the public key used to encrypt the session key as a      * KeyValue in the EncryptedKey structure or not.      */
DECL|method|setAddKeyValueForEncryptedKey (Boolean addKeyValueForEncryptedKey)
specifier|public
name|void
name|setAddKeyValueForEncryptedKey
parameter_list|(
name|Boolean
name|addKeyValueForEncryptedKey
parameter_list|)
block|{
name|this
operator|.
name|addKeyValueForEncryptedKey
operator|=
name|addKeyValueForEncryptedKey
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNamespaces (Map<String, String> nspaces)
specifier|public
name|void
name|setNamespaces
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nspaces
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|namespaces
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|namespaces
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|namespaces
operator|.
name|putAll
argument_list|(
name|nspaces
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNamespaces ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getNamespaces
parameter_list|()
block|{
return|return
name|namespaces
return|;
block|}
block|}
end_class

end_unit

