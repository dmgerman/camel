begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.reifier.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|UniVocityAbstractDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|UniVocityHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_class
DECL|class|UniVocityAbstractDataFormatReifier
specifier|public
class|class
name|UniVocityAbstractDataFormatReifier
parameter_list|<
name|T
extends|extends
name|UniVocityAbstractDataFormat
parameter_list|>
extends|extends
name|DataFormatReifier
argument_list|<
name|T
argument_list|>
block|{
DECL|method|UniVocityAbstractDataFormatReifier (DataFormatDefinition definition)
specifier|public
name|UniVocityAbstractDataFormatReifier
parameter_list|(
name|DataFormatDefinition
name|definition
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|T
operator|)
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configureDataFormat (DataFormat dataFormat, CamelContext camelContext)
specifier|protected
name|void
name|configureDataFormat
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|super
operator|.
name|configureDataFormat
argument_list|(
name|dataFormat
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|definition
operator|.
name|getNullValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"nullValue"
argument_list|,
name|definition
operator|.
name|getNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getSkipEmptyLines
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"skipEmptyLines"
argument_list|,
name|definition
operator|.
name|getSkipEmptyLines
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getIgnoreTrailingWhitespaces
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"ignoreTrailingWhitespaces"
argument_list|,
name|definition
operator|.
name|getIgnoreTrailingWhitespaces
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getIgnoreLeadingWhitespaces
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"ignoreLeadingWhitespaces"
argument_list|,
name|definition
operator|.
name|getIgnoreLeadingWhitespaces
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getHeadersDisabled
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"headersDisabled"
argument_list|,
name|definition
operator|.
name|getHeadersDisabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|validHeaderNames
init|=
name|getValidHeaderNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|validHeaderNames
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"headers"
argument_list|,
name|validHeaderNames
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getHeaderExtractionEnabled
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"headerExtractionEnabled"
argument_list|,
name|definition
operator|.
name|getHeaderExtractionEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getNumberOfRecordsToRead
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"numberOfRecordsToRead"
argument_list|,
name|definition
operator|.
name|getNumberOfRecordsToRead
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getEmptyValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"emptyValue"
argument_list|,
name|definition
operator|.
name|getEmptyValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getLineSeparator
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"lineSeparator"
argument_list|,
name|definition
operator|.
name|getLineSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getNormalizedLineSeparator
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"normalizedLineSeparator"
argument_list|,
name|singleCharOf
argument_list|(
literal|"normalizedLineSeparator"
argument_list|,
name|definition
operator|.
name|getNormalizedLineSeparator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getComment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"comment"
argument_list|,
name|singleCharOf
argument_list|(
literal|"comment"
argument_list|,
name|definition
operator|.
name|getComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getLazyLoad
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"lazyLoad"
argument_list|,
name|definition
operator|.
name|getLazyLoad
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|definition
operator|.
name|getAsMap
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
literal|"asMap"
argument_list|,
name|definition
operator|.
name|getAsMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|singleCharOf (String attributeName, String string)
specifier|protected
specifier|static
name|Character
name|singleCharOf
parameter_list|(
name|String
name|attributeName
parameter_list|,
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only one character must be defined for "
operator|+
name|attributeName
argument_list|)
throw|;
block|}
return|return
name|string
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**      * Gets only the headers with non-null and non-empty names. It returns      * {@code null} if there's no such headers.      *      * @return The headers with non-null and non-empty names      */
DECL|method|getValidHeaderNames ()
specifier|private
name|String
index|[]
name|getValidHeaderNames
parameter_list|()
block|{
if|if
condition|(
name|definition
operator|.
name|getHeaders
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|definition
operator|.
name|getHeaders
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|UniVocityHeader
name|header
range|:
name|definition
operator|.
name|getHeaders
argument_list|()
control|)
block|{
if|if
condition|(
name|header
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|header
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|header
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|names
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|names
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

