begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|AggregationStrategyClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ProcessClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * Routes the same message to multiple paths either sequentially or in parallel.  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"eip,routing"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"multicast"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|MulticastDefinition
specifier|public
class|class
name|MulticastDefinition
extends|extends
name|OutputDefinition
argument_list|<
name|MulticastDefinition
argument_list|>
implements|implements
name|ExecutorServiceAwareDefinition
argument_list|<
name|MulticastDefinition
argument_list|>
block|{
annotation|@
name|XmlAttribute
DECL|field|parallelProcessing
specifier|private
name|String
name|parallelProcessing
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|strategyRef
specifier|private
name|String
name|strategyRef
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|strategyMethodName
specifier|private
name|String
name|strategyMethodName
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|strategyMethodAllowNull
specifier|private
name|String
name|strategyMethodAllowNull
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|executorService
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|executorServiceRef
specifier|private
name|String
name|executorServiceRef
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|streaming
specifier|private
name|String
name|streaming
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|stopOnException
specifier|private
name|String
name|stopOnException
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"0"
argument_list|)
DECL|field|timeout
specifier|private
name|String
name|timeout
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|aggregationStrategy
specifier|private
name|AggregationStrategy
name|aggregationStrategy
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|onPrepareRef
specifier|private
name|String
name|onPrepareRef
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|onPrepare
specifier|private
name|Processor
name|onPrepare
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|shareUnitOfWork
specifier|private
name|String
name|shareUnitOfWork
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|parallelAggregate
specifier|private
name|String
name|parallelAggregate
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|stopOnAggregateException
specifier|private
name|String
name|stopOnAggregateException
decl_stmt|;
DECL|method|MulticastDefinition ()
specifier|public
name|MulticastDefinition
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Multicast["
operator|+
name|getOutputs
argument_list|()
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|getShortName ()
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
return|return
literal|"multicast"
return|;
block|}
annotation|@
name|Override
DECL|method|getLabel ()
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
literal|"multicast"
return|;
block|}
comment|// Fluent API
comment|// -------------------------------------------------------------------------
comment|/**      * Sets the AggregationStrategy to be used to assemble the replies from the      * multicasts, into a single outgoing message from the Multicast using a      * fluent builder.      */
DECL|method|aggregationStrategy ()
specifier|public
name|AggregationStrategyClause
argument_list|<
name|MulticastDefinition
argument_list|>
name|aggregationStrategy
parameter_list|()
block|{
name|AggregationStrategyClause
argument_list|<
name|MulticastDefinition
argument_list|>
name|clause
init|=
operator|new
name|AggregationStrategyClause
argument_list|<>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|setAggregationStrategy
argument_list|(
name|clause
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Sets the AggregationStrategy to be used to assemble the replies from the      * multicasts, into a single outgoing message from the Multicast. By default      * Camel will use the last reply as the outgoing message. You can also use a      * POJO as the AggregationStrategy. If an exception is thrown from the      * aggregate method in the AggregationStrategy, then by default, that      * exception is not handled by the error handler. The error handler can be      * enabled to react if enabling the shareUnitOfWork option.      */
DECL|method|aggregationStrategy (AggregationStrategy aggregationStrategy)
specifier|public
name|MulticastDefinition
name|aggregationStrategy
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the AggregationStrategy to be used to assemble the replies from the      * multicasts, into a single outgoing message from the Multicast. By default      * Camel will use the last reply as the outgoing message. You can also use a      * POJO as the AggregationStrategy. If an exception is thrown from the      * aggregate method in the AggregationStrategy, then by default, that      * exception is not handled by the error handler. The error handler can be      * enabled to react if enabling the shareUnitOfWork option.      */
DECL|method|aggregationStrategy (Supplier<AggregationStrategy> aggregationStrategy)
specifier|public
name|MulticastDefinition
name|aggregationStrategy
parameter_list|(
name|Supplier
argument_list|<
name|AggregationStrategy
argument_list|>
name|aggregationStrategy
parameter_list|)
block|{
name|setAggregationStrategy
argument_list|(
name|aggregationStrategy
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a reference to the AggregationStrategy to be used to assemble the      * replies from the multicasts, into a single outgoing message from the      * Multicast. By default Camel will use the last reply as the outgoing      * message. You can also use a POJO as the AggregationStrategy If an      * exception is thrown from the aggregate method in the AggregationStrategy,      * then by default, that exception is not handled by the error handler. The      * error handler can be enabled to react if enabling the shareUnitOfWork      * option.      */
DECL|method|aggregationStrategyRef (String aggregationStrategyRef)
specifier|public
name|MulticastDefinition
name|aggregationStrategyRef
parameter_list|(
name|String
name|aggregationStrategyRef
parameter_list|)
block|{
name|setStrategyRef
argument_list|(
name|aggregationStrategyRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * This option can be used to explicit declare the method name to use, when      * using POJOs as the AggregationStrategy.      *      * @param methodName the method name to call      * @return the builder      */
DECL|method|aggregationStrategyMethodName (String methodName)
specifier|public
name|MulticastDefinition
name|aggregationStrategyMethodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|setStrategyMethodName
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * If this option is false then the aggregate method is not used if there      * was no data to enrich. If this option is true then null values is used as      * the oldExchange (when no data to enrich), when using POJOs as the      * AggregationStrategy      *      * @return the builder      */
DECL|method|aggregationStrategyMethodAllowNull ()
specifier|public
name|MulticastDefinition
name|aggregationStrategyMethodAllowNull
parameter_list|()
block|{
name|setStrategyMethodAllowNull
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * If enabled then sending messages to the multicasts occurs concurrently.      * Note the caller thread will still wait until all messages has been fully      * processed, before it continues. Its only the sending and processing the      * replies from the multicasts which happens concurrently.      *      * @return the builder      */
DECL|method|parallelProcessing ()
specifier|public
name|MulticastDefinition
name|parallelProcessing
parameter_list|()
block|{
name|setParallelProcessing
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * If enabled then sending messages to the multicasts occurs concurrently.      * Note the caller thread will still wait until all messages has been fully      * processed, before it continues. Its only the sending and processing the      * replies from the multicasts which happens concurrently.      *      * @return the builder      */
DECL|method|parallelProcessing (boolean parallelProcessing)
specifier|public
name|MulticastDefinition
name|parallelProcessing
parameter_list|(
name|boolean
name|parallelProcessing
parameter_list|)
block|{
name|setParallelProcessing
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|parallelProcessing
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * If enabled then the aggregate method on AggregationStrategy can be called      * concurrently. Notice that this would require the implementation of      * AggregationStrategy to be implemented as thread-safe. By default this is      * false meaning that Camel synchronizes the call to the aggregate method.      * Though in some use-cases this can be used to archive higher performance      * when the AggregationStrategy is implemented as thread-safe.      *      * @return the builder      */
DECL|method|parallelAggregate ()
specifier|public
name|MulticastDefinition
name|parallelAggregate
parameter_list|()
block|{
name|setParallelAggregate
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * If enabled, unwind exceptions occurring at aggregation time to the error      * handler when parallelProcessing is used. Currently, aggregation time      * exceptions do not stop the route processing when parallelProcessing is      * used. Enabling this option allows to work around this behavior. The      * default value is<code>false</code> for the sake of backward      * compatibility.      *      * @return the builder      */
DECL|method|stopOnAggregateException ()
specifier|public
name|MulticastDefinition
name|stopOnAggregateException
parameter_list|()
block|{
name|setStopOnAggregateException
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * If enabled then Camel will process replies out-of-order, eg in the order      * they come back. If disabled, Camel will process replies in the same order      * as defined by the multicast.      *      * @return the builder      */
DECL|method|streaming ()
specifier|public
name|MulticastDefinition
name|streaming
parameter_list|()
block|{
name|setStreaming
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Will now stop further processing if an exception or failure occurred      * during processing of an {@link org.apache.camel.Exchange} and the caused      * exception will be thrown.      *<p/>      * Will also stop if processing the exchange failed (has a fault message) or      * an exception was thrown and handled by the error handler (such as using      * onException). In all situations the multicast will stop further      * processing. This is the same behavior as in pipeline, which is used by      * the routing engine.      *<p/>      * The default behavior is to<b>not</b> stop but continue processing till      * the end      *      * @return the builder      */
DECL|method|stopOnException ()
specifier|public
name|MulticastDefinition
name|stopOnException
parameter_list|()
block|{
name|setStopOnException
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * To use a custom Thread Pool to be used for parallel processing. Notice if      * you set this option, then parallel processing is automatic implied, and      * you do not have to enable that option as well.      */
annotation|@
name|Override
DECL|method|executorService (ExecutorService executorService)
specifier|public
name|MulticastDefinition
name|executorService
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|setExecutorService
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Refers to a custom Thread Pool to be used for parallel processing. Notice      * if you set this option, then parallel processing is automatic implied,      * and you do not have to enable that option as well.      */
annotation|@
name|Override
DECL|method|executorServiceRef (String executorServiceRef)
specifier|public
name|MulticastDefinition
name|executorServiceRef
parameter_list|(
name|String
name|executorServiceRef
parameter_list|)
block|{
name|setExecutorServiceRef
argument_list|(
name|executorServiceRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the {@link Processor} to use when preparing the      * {@link org.apache.camel.Exchange} to be send using a fluent builder.      */
DECL|method|onPrepare ()
specifier|public
name|ProcessClause
argument_list|<
name|MulticastDefinition
argument_list|>
name|onPrepare
parameter_list|()
block|{
name|ProcessClause
argument_list|<
name|MulticastDefinition
argument_list|>
name|clause
init|=
operator|new
name|ProcessClause
argument_list|<>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|setOnPrepare
argument_list|(
name|clause
argument_list|)
expr_stmt|;
return|return
name|clause
return|;
block|}
comment|/**      * Uses the {@link Processor} when preparing the      * {@link org.apache.camel.Exchange} to be send. This can be used to      * deep-clone messages that should be send, or any custom logic needed      * before the exchange is send.      *      * @param onPrepare the processor      * @return the builder      */
DECL|method|onPrepare (Processor onPrepare)
specifier|public
name|MulticastDefinition
name|onPrepare
parameter_list|(
name|Processor
name|onPrepare
parameter_list|)
block|{
name|setOnPrepare
argument_list|(
name|onPrepare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Uses the {@link Processor} when preparing the      * {@link org.apache.camel.Exchange} to be send. This can be used to      * deep-clone messages that should be send, or any custom logic needed      * before the exchange is send.      *      * @param onPrepareRef reference to the processor to lookup in the      *            {@link org.apache.camel.spi.Registry}      * @return the builder      */
DECL|method|onPrepareRef (String onPrepareRef)
specifier|public
name|MulticastDefinition
name|onPrepareRef
parameter_list|(
name|String
name|onPrepareRef
parameter_list|)
block|{
name|setOnPrepareRef
argument_list|(
name|onPrepareRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets a total timeout specified in millis, when using parallel processing.      * If the Multicast hasn't been able to send and process all replies within      * the given timeframe, then the timeout triggers and the Multicast breaks      * out and continues. Notice if you provide a      * TimeoutAwareAggregationStrategy then the timeout method is invoked before      * breaking out. If the timeout is reached with running tasks still      * remaining, certain tasks for which it is difficult for Camel to shut down      * in a graceful manner may continue to run. So use this option with a bit      * of care.      *      * @param timeout timeout in millis      * @return the builder      */
DECL|method|timeout (long timeout)
specifier|public
name|MulticastDefinition
name|timeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|setTimeout
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Shares the {@link org.apache.camel.spi.UnitOfWork} with the parent and      * each of the sub messages. Multicast will by default not share unit of      * work between the parent exchange and each multicasted exchange. This      * means each sub exchange has its own individual unit of work.      *      * @return the builder.      */
DECL|method|shareUnitOfWork ()
specifier|public
name|MulticastDefinition
name|shareUnitOfWork
parameter_list|()
block|{
name|setShareUnitOfWork
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getAggregationStrategy ()
specifier|public
name|AggregationStrategy
name|getAggregationStrategy
parameter_list|()
block|{
return|return
name|aggregationStrategy
return|;
block|}
DECL|method|setAggregationStrategy (AggregationStrategy aggregationStrategy)
specifier|public
name|MulticastDefinition
name|setAggregationStrategy
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|this
operator|.
name|aggregationStrategy
operator|=
name|aggregationStrategy
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getParallelProcessing ()
specifier|public
name|String
name|getParallelProcessing
parameter_list|()
block|{
return|return
name|parallelProcessing
return|;
block|}
DECL|method|setParallelProcessing (String parallelProcessing)
specifier|public
name|void
name|setParallelProcessing
parameter_list|(
name|String
name|parallelProcessing
parameter_list|)
block|{
name|this
operator|.
name|parallelProcessing
operator|=
name|parallelProcessing
expr_stmt|;
block|}
DECL|method|getStreaming ()
specifier|public
name|String
name|getStreaming
parameter_list|()
block|{
return|return
name|streaming
return|;
block|}
DECL|method|setStreaming (String streaming)
specifier|public
name|void
name|setStreaming
parameter_list|(
name|String
name|streaming
parameter_list|)
block|{
name|this
operator|.
name|streaming
operator|=
name|streaming
expr_stmt|;
block|}
DECL|method|getStopOnException ()
specifier|public
name|String
name|getStopOnException
parameter_list|()
block|{
return|return
name|stopOnException
return|;
block|}
DECL|method|setStopOnException (String stopOnException)
specifier|public
name|void
name|setStopOnException
parameter_list|(
name|String
name|stopOnException
parameter_list|)
block|{
name|this
operator|.
name|stopOnException
operator|=
name|stopOnException
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExecutorService ()
specifier|public
name|ExecutorService
name|getExecutorService
parameter_list|()
block|{
return|return
name|executorService
return|;
block|}
annotation|@
name|Override
DECL|method|setExecutorService (ExecutorService executorService)
specifier|public
name|void
name|setExecutorService
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|this
operator|.
name|executorService
operator|=
name|executorService
expr_stmt|;
block|}
DECL|method|getStrategyRef ()
specifier|public
name|String
name|getStrategyRef
parameter_list|()
block|{
return|return
name|strategyRef
return|;
block|}
comment|/**      * Refers to an AggregationStrategy to be used to assemble the replies from      * the multicasts, into a single outgoing message from the Multicast. By      * default Camel will use the last reply as the outgoing message. You can      * also use a POJO as the AggregationStrategy      */
DECL|method|setStrategyRef (String strategyRef)
specifier|public
name|void
name|setStrategyRef
parameter_list|(
name|String
name|strategyRef
parameter_list|)
block|{
name|this
operator|.
name|strategyRef
operator|=
name|strategyRef
expr_stmt|;
block|}
DECL|method|getStrategyMethodName ()
specifier|public
name|String
name|getStrategyMethodName
parameter_list|()
block|{
return|return
name|strategyMethodName
return|;
block|}
comment|/**      * This option can be used to explicit declare the method name to use, when      * using POJOs as the AggregationStrategy.      */
DECL|method|setStrategyMethodName (String strategyMethodName)
specifier|public
name|void
name|setStrategyMethodName
parameter_list|(
name|String
name|strategyMethodName
parameter_list|)
block|{
name|this
operator|.
name|strategyMethodName
operator|=
name|strategyMethodName
expr_stmt|;
block|}
DECL|method|getStrategyMethodAllowNull ()
specifier|public
name|String
name|getStrategyMethodAllowNull
parameter_list|()
block|{
return|return
name|strategyMethodAllowNull
return|;
block|}
comment|/**      * If this option is false then the aggregate method is not used if there      * was no data to enrich. If this option is true then null values is used as      * the oldExchange (when no data to enrich), when using POJOs as the      * AggregationStrategy      */
DECL|method|setStrategyMethodAllowNull (String strategyMethodAllowNull)
specifier|public
name|void
name|setStrategyMethodAllowNull
parameter_list|(
name|String
name|strategyMethodAllowNull
parameter_list|)
block|{
name|this
operator|.
name|strategyMethodAllowNull
operator|=
name|strategyMethodAllowNull
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExecutorServiceRef ()
specifier|public
name|String
name|getExecutorServiceRef
parameter_list|()
block|{
return|return
name|executorServiceRef
return|;
block|}
comment|/**      * Refers to a custom Thread Pool to be used for parallel processing. Notice      * if you set this option, then parallel processing is automatic implied,      * and you do not have to enable that option as well.      */
annotation|@
name|Override
DECL|method|setExecutorServiceRef (String executorServiceRef)
specifier|public
name|void
name|setExecutorServiceRef
parameter_list|(
name|String
name|executorServiceRef
parameter_list|)
block|{
name|this
operator|.
name|executorServiceRef
operator|=
name|executorServiceRef
expr_stmt|;
block|}
DECL|method|getTimeout ()
specifier|public
name|String
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
DECL|method|setTimeout (String timeout)
specifier|public
name|void
name|setTimeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
DECL|method|getOnPrepareRef ()
specifier|public
name|String
name|getOnPrepareRef
parameter_list|()
block|{
return|return
name|onPrepareRef
return|;
block|}
DECL|method|setOnPrepareRef (String onPrepareRef)
specifier|public
name|void
name|setOnPrepareRef
parameter_list|(
name|String
name|onPrepareRef
parameter_list|)
block|{
name|this
operator|.
name|onPrepareRef
operator|=
name|onPrepareRef
expr_stmt|;
block|}
DECL|method|getOnPrepare ()
specifier|public
name|Processor
name|getOnPrepare
parameter_list|()
block|{
return|return
name|onPrepare
return|;
block|}
DECL|method|setOnPrepare (Processor onPrepare)
specifier|public
name|void
name|setOnPrepare
parameter_list|(
name|Processor
name|onPrepare
parameter_list|)
block|{
name|this
operator|.
name|onPrepare
operator|=
name|onPrepare
expr_stmt|;
block|}
DECL|method|getShareUnitOfWork ()
specifier|public
name|String
name|getShareUnitOfWork
parameter_list|()
block|{
return|return
name|shareUnitOfWork
return|;
block|}
DECL|method|setShareUnitOfWork (String shareUnitOfWork)
specifier|public
name|void
name|setShareUnitOfWork
parameter_list|(
name|String
name|shareUnitOfWork
parameter_list|)
block|{
name|this
operator|.
name|shareUnitOfWork
operator|=
name|shareUnitOfWork
expr_stmt|;
block|}
DECL|method|getParallelAggregate ()
specifier|public
name|String
name|getParallelAggregate
parameter_list|()
block|{
return|return
name|parallelAggregate
return|;
block|}
DECL|method|setParallelAggregate (String parallelAggregate)
specifier|public
name|void
name|setParallelAggregate
parameter_list|(
name|String
name|parallelAggregate
parameter_list|)
block|{
name|this
operator|.
name|parallelAggregate
operator|=
name|parallelAggregate
expr_stmt|;
block|}
DECL|method|getStopOnAggregateException ()
specifier|public
name|String
name|getStopOnAggregateException
parameter_list|()
block|{
return|return
name|stopOnAggregateException
return|;
block|}
DECL|method|setStopOnAggregateException (String stopOnAggregateException)
specifier|public
name|void
name|setStopOnAggregateException
parameter_list|(
name|String
name|stopOnAggregateException
parameter_list|)
block|{
name|this
operator|.
name|stopOnAggregateException
operator|=
name|stopOnAggregateException
expr_stmt|;
block|}
block|}
end_class

end_unit

