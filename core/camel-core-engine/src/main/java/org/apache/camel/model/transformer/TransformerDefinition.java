begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.transformer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|transformer
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InputTypeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OutputTypeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  *<p>  * Represents a {@link org.apache.camel.spi.Transformer} which declaratively  * transforms message content according to the input type declared by  * {@link InputTypeDefinition} and/or output type declared by  * {@link OutputTypeDefinition}.  *</p>  *<p>  * If you specify from='java:com.example.ABC' and to='xml:XYZ', the transformer  * will be picked up when current message type is 'java:com.example.ABC' and  * expected message type is 'xml:XYZ'. If you specify from='java' to='xml', then  * it will be picked up for all of java to xml transformation. Also it's  * possible to specify scheme='xml' so that the transformer will be picked up  * for all of java to xml and xml to java transformation.  *</p>  * {@see org.apache.camel.spi.Transformer} {@see InputTypeDefinition}  * {@see OutputTypeDefinition}  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"transformation"
argument_list|)
annotation|@
name|XmlType
argument_list|(
name|name
operator|=
literal|"transformer"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|TransformerDefinition
specifier|public
specifier|abstract
class|class
name|TransformerDefinition
block|{
annotation|@
name|XmlAttribute
DECL|field|scheme
specifier|private
name|String
name|scheme
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|fromType
specifier|private
name|String
name|fromType
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|toType
specifier|private
name|String
name|toType
decl_stmt|;
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|scheme
return|;
block|}
comment|/**      * Set a scheme name supported by the transformer. If you specify 'csv', the      * transformer will be picked up for all of 'csv' from/to Java      * transformation. Note that the scheme matching is performed only when no      * exactly matched transformer exists.      *      * @param scheme scheme name      */
DECL|method|setScheme (String scheme)
specifier|public
name|void
name|setScheme
parameter_list|(
name|String
name|scheme
parameter_list|)
block|{
name|this
operator|.
name|scheme
operator|=
name|scheme
expr_stmt|;
block|}
DECL|method|getFromType ()
specifier|public
name|String
name|getFromType
parameter_list|()
block|{
return|return
name|fromType
return|;
block|}
comment|/**      * Set the 'from' data type name. If you specify 'xml:XYZ', the transformer      * will be picked up if source type is 'xml:XYZ'. If you specify just 'xml',      * the transformer matches with all of 'xml' source type like 'xml:ABC' or      * 'xml:DEF'.      *       * @param from 'from' data type name      */
DECL|method|setFromType (String from)
specifier|public
name|void
name|setFromType
parameter_list|(
name|String
name|from
parameter_list|)
block|{
name|this
operator|.
name|fromType
operator|=
name|from
expr_stmt|;
block|}
comment|/**      * Set the 'from' data type using Java class.      *      * @param clazz 'from' Java class      */
DECL|method|setFromType (Class<?> clazz)
specifier|public
name|void
name|setFromType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|fromType
operator|=
operator|new
name|DataType
argument_list|(
name|clazz
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
DECL|method|getToType ()
specifier|public
name|String
name|getToType
parameter_list|()
block|{
return|return
name|toType
return|;
block|}
comment|/**      * Set the 'to' data type name. If you specify 'json:XYZ', the transformer      * will be picked up if destination type is 'json:XYZ'. If you specify just      * 'json', the transformer matches with all of 'json' destination type like      * 'json:ABC' or 'json:DEF'.      *      * @param to 'to' data type name      */
DECL|method|setToType (String to)
specifier|public
name|void
name|setToType
parameter_list|(
name|String
name|to
parameter_list|)
block|{
name|this
operator|.
name|toType
operator|=
name|to
expr_stmt|;
block|}
comment|/**      * Set the 'to' data type using Java class.      *      * @param clazz 'to' Java class      */
DECL|method|setToType (Class<?> clazz)
specifier|public
name|void
name|setToType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|toType
operator|=
operator|new
name|DataType
argument_list|(
name|clazz
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

