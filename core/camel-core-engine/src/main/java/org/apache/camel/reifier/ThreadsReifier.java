begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.reifier
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ThreadPoolProfileBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinitionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ThreadsDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|ThreadsProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExecutorServiceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ThreadPoolProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolRejectedPolicy
import|;
end_import

begin_class
DECL|class|ThreadsReifier
specifier|public
class|class
name|ThreadsReifier
extends|extends
name|ProcessorReifier
argument_list|<
name|ThreadsDefinition
argument_list|>
block|{
DECL|method|ThreadsReifier (ProcessorDefinition<?> definition)
specifier|public
name|ThreadsReifier
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|ThreadsDefinition
operator|)
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
comment|// the threads name
name|String
name|name
init|=
name|definition
operator|.
name|getThreadName
argument_list|()
operator|!=
literal|null
condition|?
name|definition
operator|.
name|getThreadName
argument_list|()
else|:
literal|"Threads"
decl_stmt|;
comment|// prefer any explicit configured executor service
name|boolean
name|shutdownThreadPool
init|=
name|ProcessorDefinitionHelper
operator|.
name|willCreateNewThreadPool
argument_list|(
name|routeContext
argument_list|,
name|definition
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ExecutorService
name|threadPool
init|=
name|ProcessorDefinitionHelper
operator|.
name|getConfiguredExecutorService
argument_list|(
name|routeContext
argument_list|,
name|name
argument_list|,
name|definition
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// resolve what rejected policy to use
name|ThreadPoolRejectedPolicy
name|policy
init|=
name|resolveRejectedPolicy
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|definition
operator|.
name|getCallerRunsWhenRejected
argument_list|()
operator|==
literal|null
operator|||
name|parseBoolean
argument_list|(
name|routeContext
argument_list|,
name|definition
operator|.
name|getCallerRunsWhenRejected
argument_list|()
argument_list|)
condition|)
block|{
comment|// should use caller runs by default if not configured
name|policy
operator|=
name|ThreadPoolRejectedPolicy
operator|.
name|CallerRuns
expr_stmt|;
block|}
else|else
block|{
name|policy
operator|=
name|ThreadPoolRejectedPolicy
operator|.
name|Abort
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Using ThreadPoolRejectedPolicy: {}"
argument_list|,
name|policy
argument_list|)
expr_stmt|;
comment|// if no explicit then create from the options
if|if
condition|(
name|threadPool
operator|==
literal|null
condition|)
block|{
name|ExecutorServiceManager
name|manager
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
decl_stmt|;
comment|// create the thread pool using a builder
name|ThreadPoolProfile
name|profile
init|=
operator|new
name|ThreadPoolProfileBuilder
argument_list|(
name|name
argument_list|)
operator|.
name|poolSize
argument_list|(
name|definition
operator|.
name|getPoolSize
argument_list|()
operator|!=
literal|null
condition|?
name|parseInt
argument_list|(
name|routeContext
argument_list|,
name|definition
operator|.
name|getPoolSize
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
operator|.
name|maxPoolSize
argument_list|(
name|definition
operator|.
name|getMaxPoolSize
argument_list|()
operator|!=
literal|null
condition|?
name|parseInt
argument_list|(
name|routeContext
argument_list|,
name|definition
operator|.
name|getMaxPoolSize
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
operator|.
name|keepAliveTime
argument_list|(
name|definition
operator|.
name|getKeepAliveTime
argument_list|()
operator|!=
literal|null
condition|?
name|parseLong
argument_list|(
name|routeContext
argument_list|,
name|definition
operator|.
name|getKeepAliveTime
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
name|definition
operator|.
name|getTimeUnit
argument_list|()
operator|!=
literal|null
condition|?
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|definition
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
operator|.
name|maxQueueSize
argument_list|(
name|definition
operator|.
name|getMaxQueueSize
argument_list|()
operator|!=
literal|null
condition|?
name|parseInt
argument_list|(
name|routeContext
argument_list|,
name|definition
operator|.
name|getMaxQueueSize
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
operator|.
name|rejectedPolicy
argument_list|(
name|policy
argument_list|)
operator|.
name|allowCoreThreadTimeOut
argument_list|(
name|definition
operator|.
name|getAllowCoreThreadTimeOut
argument_list|()
operator|!=
literal|null
condition|?
name|parseBoolean
argument_list|(
name|routeContext
argument_list|,
name|definition
operator|.
name|getAllowCoreThreadTimeOut
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|threadPool
operator|=
name|manager
operator|.
name|newThreadPool
argument_list|(
name|definition
argument_list|,
name|name
argument_list|,
name|profile
argument_list|)
expr_stmt|;
name|shutdownThreadPool
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|definition
operator|.
name|getThreadName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|definition
operator|.
name|getThreadName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Threads"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ThreadName and executorServiceRef options cannot be used together."
argument_list|)
throw|;
block|}
if|if
condition|(
name|definition
operator|.
name|getPoolSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"PoolSize and executorServiceRef options cannot be used together."
argument_list|)
throw|;
block|}
if|if
condition|(
name|definition
operator|.
name|getMaxPoolSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"MaxPoolSize and executorServiceRef options cannot be used together."
argument_list|)
throw|;
block|}
if|if
condition|(
name|definition
operator|.
name|getKeepAliveTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"KeepAliveTime and executorServiceRef options cannot be used together."
argument_list|)
throw|;
block|}
if|if
condition|(
name|definition
operator|.
name|getTimeUnit
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"TimeUnit and executorServiceRef options cannot be used together."
argument_list|)
throw|;
block|}
if|if
condition|(
name|definition
operator|.
name|getMaxQueueSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"MaxQueueSize and executorServiceRef options cannot be used together."
argument_list|)
throw|;
block|}
if|if
condition|(
name|definition
operator|.
name|getRejectedPolicy
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"RejectedPolicy and executorServiceRef options cannot be used together."
argument_list|)
throw|;
block|}
if|if
condition|(
name|definition
operator|.
name|getAllowCoreThreadTimeOut
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"AllowCoreThreadTimeOut and executorServiceRef options cannot be used together."
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|ThreadsProcessor
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|threadPool
argument_list|,
name|shutdownThreadPool
argument_list|,
name|policy
argument_list|)
return|;
block|}
DECL|method|resolveRejectedPolicy (RouteContext routeContext)
specifier|protected
name|ThreadPoolRejectedPolicy
name|resolveRejectedPolicy
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
block|{
if|if
condition|(
name|definition
operator|.
name|getExecutorServiceRef
argument_list|()
operator|!=
literal|null
operator|&&
name|definition
operator|.
name|getRejectedPolicy
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ThreadPoolProfile
name|threadPoolProfile
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|getThreadPoolProfile
argument_list|(
name|definition
operator|.
name|getExecutorServiceRef
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|threadPoolProfile
operator|!=
literal|null
condition|)
block|{
return|return
name|threadPoolProfile
operator|.
name|getRejectedPolicy
argument_list|()
return|;
block|}
block|}
return|return
name|definition
operator|.
name|getRejectedPolicy
argument_list|()
return|;
block|}
block|}
end_class

end_unit

