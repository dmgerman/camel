begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * YAML is a data format to marshal and unmarshal Java objects to and from YAML.  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|firstVersion
operator|=
literal|"2.17.0"
argument_list|,
name|label
operator|=
literal|"dataformat,transformation,yaml"
argument_list|,
name|title
operator|=
literal|"YAML"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"yaml"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|YAMLDataFormat
specifier|public
class|class
name|YAMLDataFormat
extends|extends
name|DataFormatDefinition
block|{
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"SnakeYAML"
argument_list|)
DECL|field|library
specifier|private
name|YAMLLibrary
name|library
init|=
name|YAMLLibrary
operator|.
name|SnakeYAML
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|classLoader
specifier|private
name|ClassLoader
name|classLoader
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|unmarshalType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|unmarshalTypeName
specifier|private
name|String
name|unmarshalTypeName
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|constructor
specifier|private
name|String
name|constructor
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|representer
specifier|private
name|String
name|representer
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|dumperOptions
specifier|private
name|String
name|dumperOptions
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|resolver
specifier|private
name|String
name|resolver
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|useApplicationContextClassLoader
specifier|private
name|Boolean
name|useApplicationContextClassLoader
init|=
literal|true
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|prettyFlow
specifier|private
name|Boolean
name|prettyFlow
init|=
literal|false
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|allowAnyType
specifier|private
name|Boolean
name|allowAnyType
init|=
literal|false
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"typeFilter"
argument_list|)
DECL|field|typeFilters
specifier|private
name|List
argument_list|<
name|YAMLTypeFilterDefinition
argument_list|>
name|typeFilters
decl_stmt|;
DECL|method|YAMLDataFormat ()
specifier|public
name|YAMLDataFormat
parameter_list|()
block|{
name|this
argument_list|(
name|YAMLLibrary
operator|.
name|SnakeYAML
argument_list|)
expr_stmt|;
block|}
DECL|method|YAMLDataFormat (YAMLLibrary library)
specifier|public
name|YAMLDataFormat
parameter_list|(
name|YAMLLibrary
name|library
parameter_list|)
block|{
name|super
argument_list|(
literal|"yaml-"
operator|+
name|library
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|library
operator|=
name|library
expr_stmt|;
block|}
DECL|method|YAMLDataFormat (YAMLLibrary library, Class<?> unmarshalType)
specifier|public
name|YAMLDataFormat
parameter_list|(
name|YAMLLibrary
name|library
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|unmarshalType
parameter_list|)
block|{
name|super
argument_list|(
literal|"yaml-"
operator|+
name|library
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|library
operator|=
name|library
expr_stmt|;
name|this
operator|.
name|unmarshalType
operator|=
name|unmarshalType
expr_stmt|;
block|}
DECL|method|getLibrary ()
specifier|public
name|YAMLLibrary
name|getLibrary
parameter_list|()
block|{
return|return
name|library
return|;
block|}
comment|/**      * Which yaml library to use.      *<p/>      * By default it is SnakeYAML      */
DECL|method|setLibrary (YAMLLibrary library)
specifier|public
name|void
name|setLibrary
parameter_list|(
name|YAMLLibrary
name|library
parameter_list|)
block|{
name|this
operator|.
name|library
operator|=
name|library
expr_stmt|;
name|setDataFormatName
argument_list|(
literal|"yaml-"
operator|+
name|library
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getUnmarshalType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getUnmarshalType
parameter_list|()
block|{
return|return
name|unmarshalType
return|;
block|}
comment|/**      * Class of the object to be created      */
DECL|method|setUnmarshalType (Class<?> type)
specifier|public
name|void
name|setUnmarshalType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|this
operator|.
name|unmarshalType
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getUnmarshalTypeName ()
specifier|public
name|String
name|getUnmarshalTypeName
parameter_list|()
block|{
return|return
name|unmarshalTypeName
return|;
block|}
comment|/**      * Class name of the java type to use when unarmshalling      */
DECL|method|setUnmarshalTypeName (String unmarshalTypeName)
specifier|public
name|void
name|setUnmarshalTypeName
parameter_list|(
name|String
name|unmarshalTypeName
parameter_list|)
block|{
name|this
operator|.
name|unmarshalTypeName
operator|=
name|unmarshalTypeName
expr_stmt|;
block|}
DECL|method|getClassLoader ()
specifier|public
name|ClassLoader
name|getClassLoader
parameter_list|()
block|{
return|return
name|classLoader
return|;
block|}
comment|/**      * Set a custom classloader      */
DECL|method|setClassLoader (ClassLoader classLoader)
specifier|public
name|void
name|setClassLoader
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|)
block|{
name|this
operator|.
name|classLoader
operator|=
name|classLoader
expr_stmt|;
block|}
DECL|method|getConstructor ()
specifier|public
name|String
name|getConstructor
parameter_list|()
block|{
return|return
name|constructor
return|;
block|}
comment|/**      * BaseConstructor to construct incoming documents.      */
DECL|method|setConstructor (String constructor)
specifier|public
name|void
name|setConstructor
parameter_list|(
name|String
name|constructor
parameter_list|)
block|{
name|this
operator|.
name|constructor
operator|=
name|constructor
expr_stmt|;
block|}
DECL|method|getRepresenter ()
specifier|public
name|String
name|getRepresenter
parameter_list|()
block|{
return|return
name|representer
return|;
block|}
comment|/**      * Representer to emit outgoing objects.      */
DECL|method|setRepresenter (String representer)
specifier|public
name|void
name|setRepresenter
parameter_list|(
name|String
name|representer
parameter_list|)
block|{
name|this
operator|.
name|representer
operator|=
name|representer
expr_stmt|;
block|}
DECL|method|getDumperOptions ()
specifier|public
name|String
name|getDumperOptions
parameter_list|()
block|{
return|return
name|dumperOptions
return|;
block|}
comment|/**      * DumperOptions to configure outgoing objects.      */
DECL|method|setDumperOptions (String dumperOptions)
specifier|public
name|void
name|setDumperOptions
parameter_list|(
name|String
name|dumperOptions
parameter_list|)
block|{
name|this
operator|.
name|dumperOptions
operator|=
name|dumperOptions
expr_stmt|;
block|}
DECL|method|getResolver ()
specifier|public
name|String
name|getResolver
parameter_list|()
block|{
return|return
name|resolver
return|;
block|}
comment|/**      * Resolver to detect implicit type      */
DECL|method|setResolver (String resolver)
specifier|public
name|void
name|setResolver
parameter_list|(
name|String
name|resolver
parameter_list|)
block|{
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
block|}
DECL|method|isUseApplicationContextClassLoader ()
specifier|public
name|boolean
name|isUseApplicationContextClassLoader
parameter_list|()
block|{
return|return
name|useApplicationContextClassLoader
return|;
block|}
comment|/**      * Use ApplicationContextClassLoader as custom ClassLoader      */
DECL|method|setUseApplicationContextClassLoader (boolean useApplicationContextClassLoader)
specifier|public
name|void
name|setUseApplicationContextClassLoader
parameter_list|(
name|boolean
name|useApplicationContextClassLoader
parameter_list|)
block|{
name|this
operator|.
name|useApplicationContextClassLoader
operator|=
name|useApplicationContextClassLoader
expr_stmt|;
block|}
DECL|method|isPrettyFlow ()
specifier|public
name|boolean
name|isPrettyFlow
parameter_list|()
block|{
return|return
name|prettyFlow
return|;
block|}
comment|/**      * Force the emitter to produce a pretty YAML document when using the flow      * style.      */
DECL|method|setPrettyFlow (boolean prettyFlow)
specifier|public
name|void
name|setPrettyFlow
parameter_list|(
name|boolean
name|prettyFlow
parameter_list|)
block|{
name|this
operator|.
name|prettyFlow
operator|=
name|prettyFlow
expr_stmt|;
block|}
DECL|method|isAllowAnyType ()
specifier|public
name|boolean
name|isAllowAnyType
parameter_list|()
block|{
return|return
name|allowAnyType
return|;
block|}
comment|/**      * Allow any class to be un-marshaled      */
DECL|method|setAllowAnyType (boolean allowAnyType)
specifier|public
name|void
name|setAllowAnyType
parameter_list|(
name|boolean
name|allowAnyType
parameter_list|)
block|{
name|this
operator|.
name|allowAnyType
operator|=
name|allowAnyType
expr_stmt|;
block|}
DECL|method|getTypeFilters ()
specifier|public
name|List
argument_list|<
name|YAMLTypeFilterDefinition
argument_list|>
name|getTypeFilters
parameter_list|()
block|{
return|return
name|typeFilters
return|;
block|}
comment|/**      * Set the types SnakeYAML is allowed to un-marshall      */
DECL|method|setTypeFilters (List<YAMLTypeFilterDefinition> typeFilters)
specifier|public
name|void
name|setTypeFilters
parameter_list|(
name|List
argument_list|<
name|YAMLTypeFilterDefinition
argument_list|>
name|typeFilters
parameter_list|)
block|{
name|this
operator|.
name|typeFilters
operator|=
name|typeFilters
expr_stmt|;
block|}
block|}
end_class

end_unit

