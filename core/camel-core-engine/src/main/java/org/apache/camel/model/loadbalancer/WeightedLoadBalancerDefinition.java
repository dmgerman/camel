begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.model.loadbalancer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|loadbalancer
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|LoadBalancerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * Weighted load balancer The weighted load balancing policy allows you to  * specify a processing load distribution ratio for each server with respect to  * others. In addition to the weight, endpoint selection is then further refined  * using random distribution based on weight.  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"eip,routing,loadbalance"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"weighted"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|WeightedLoadBalancerDefinition
specifier|public
class|class
name|WeightedLoadBalancerDefinition
extends|extends
name|LoadBalancerDefinition
block|{
annotation|@
name|XmlAttribute
DECL|field|roundRobin
specifier|private
name|String
name|roundRobin
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|distributionRatio
specifier|private
name|String
name|distributionRatio
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|","
argument_list|)
DECL|field|distributionRatioDelimiter
specifier|private
name|String
name|distributionRatioDelimiter
decl_stmt|;
DECL|method|WeightedLoadBalancerDefinition ()
specifier|public
name|WeightedLoadBalancerDefinition
parameter_list|()
block|{     }
DECL|method|getRoundRobin ()
specifier|public
name|String
name|getRoundRobin
parameter_list|()
block|{
return|return
name|roundRobin
return|;
block|}
comment|/**      * To enable round robin mode. By default the weighted distribution mode is      * used.      *<p/>      * The default value is false.      */
DECL|method|setRoundRobin (String roundRobin)
specifier|public
name|void
name|setRoundRobin
parameter_list|(
name|String
name|roundRobin
parameter_list|)
block|{
name|this
operator|.
name|roundRobin
operator|=
name|roundRobin
expr_stmt|;
block|}
DECL|method|getDistributionRatio ()
specifier|public
name|String
name|getDistributionRatio
parameter_list|()
block|{
return|return
name|distributionRatio
return|;
block|}
comment|/**      * The distribution ratio is a delimited String consisting on integer      * weights separated by delimiters for example "2,3,5". The      * distributionRatio must match the number of endpoints and/or processors      * specified in the load balancer list.      */
DECL|method|setDistributionRatio (String distributionRatio)
specifier|public
name|void
name|setDistributionRatio
parameter_list|(
name|String
name|distributionRatio
parameter_list|)
block|{
name|this
operator|.
name|distributionRatio
operator|=
name|distributionRatio
expr_stmt|;
block|}
DECL|method|getDistributionRatioDelimiter ()
specifier|public
name|String
name|getDistributionRatioDelimiter
parameter_list|()
block|{
return|return
name|distributionRatioDelimiter
operator|==
literal|null
condition|?
literal|","
else|:
name|distributionRatioDelimiter
return|;
block|}
comment|/**      * Delimiter used to specify the distribution ratio.      *<p/>      * The default value is ,      */
DECL|method|setDistributionRatioDelimiter (String distributionRatioDelimiter)
specifier|public
name|void
name|setDistributionRatioDelimiter
parameter_list|(
name|String
name|distributionRatioDelimiter
parameter_list|)
block|{
name|this
operator|.
name|distributionRatioDelimiter
operator|=
name|distributionRatioDelimiter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|roundRobin
operator|==
literal|null
operator|||
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|roundRobin
argument_list|)
condition|)
block|{
return|return
literal|"WeightedRandomLoadBalancer["
operator|+
name|distributionRatio
operator|+
literal|"]"
return|;
block|}
elseif|else
if|if
condition|(
name|roundRobin
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|roundRobin
argument_list|)
condition|)
block|{
return|return
literal|"WeightedRoundRobinLoadBalancer["
operator|+
name|distributionRatio
operator|+
literal|"]"
return|;
block|}
else|else
block|{
return|return
literal|"WeightedLoadBalancer[roundRobin="
operator|+
name|roundRobin
operator|+
literal|","
operator|+
name|distributionRatio
operator|+
literal|"]"
return|;
block|}
block|}
block|}
end_class

end_unit

