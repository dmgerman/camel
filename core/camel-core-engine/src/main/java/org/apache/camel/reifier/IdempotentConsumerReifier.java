begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.reifier
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|IdempotentConsumerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|idempotent
operator|.
name|IdempotentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|IdempotentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|IdempotentConsumerReifier
specifier|public
class|class
name|IdempotentConsumerReifier
extends|extends
name|ExpressionReifier
argument_list|<
name|IdempotentConsumerDefinition
argument_list|>
block|{
DECL|method|IdempotentConsumerReifier (ProcessorDefinition<?> definition)
specifier|public
name|IdempotentConsumerReifier
parameter_list|(
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
block|{
name|super
argument_list|(
name|IdempotentConsumerDefinition
operator|.
name|class
operator|.
name|cast
argument_list|(
name|definition
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Processor
name|childProcessor
init|=
name|this
operator|.
name|createChildProcessor
argument_list|(
name|routeContext
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IdempotentRepository
name|idempotentRepository
init|=
name|resolveMessageIdRepository
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|idempotentRepository
argument_list|,
literal|"idempotentRepository"
argument_list|,
name|definition
argument_list|)
expr_stmt|;
name|Expression
name|expression
init|=
name|definition
operator|.
name|getExpression
argument_list|()
operator|.
name|createExpression
argument_list|(
name|routeContext
argument_list|)
decl_stmt|;
comment|// these boolean should be true by default
name|boolean
name|eager
init|=
name|definition
operator|.
name|getEager
argument_list|()
operator|==
literal|null
operator|||
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|definition
operator|.
name|getEager
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|duplicate
init|=
name|definition
operator|.
name|getSkipDuplicate
argument_list|()
operator|==
literal|null
operator|||
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|definition
operator|.
name|getSkipDuplicate
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|remove
init|=
name|definition
operator|.
name|getRemoveOnFailure
argument_list|()
operator|==
literal|null
operator|||
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|definition
operator|.
name|getRemoveOnFailure
argument_list|()
argument_list|)
decl_stmt|;
comment|// these boolean should be false by default
name|boolean
name|completionEager
init|=
name|definition
operator|.
name|getCompletionEager
argument_list|()
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|definition
operator|.
name|getCompletionEager
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|IdempotentConsumer
argument_list|(
name|expression
argument_list|,
name|idempotentRepository
argument_list|,
name|eager
argument_list|,
name|completionEager
argument_list|,
name|duplicate
argument_list|,
name|remove
argument_list|,
name|childProcessor
argument_list|)
return|;
block|}
comment|/**      * Strategy method to resolve the      * {@link org.apache.camel.spi.IdempotentRepository} to use      *      * @param routeContext route context      * @return the repository      */
DECL|method|resolveMessageIdRepository (RouteContext routeContext)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|IdempotentRepository
name|resolveMessageIdRepository
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|)
block|{
if|if
condition|(
name|definition
operator|.
name|getMessageIdRepositoryRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|definition
operator|.
name|setMessageIdRepository
argument_list|(
name|routeContext
operator|.
name|mandatoryLookup
argument_list|(
name|definition
operator|.
name|getMessageIdRepositoryRef
argument_list|()
argument_list|,
name|IdempotentRepository
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|definition
operator|.
name|getMessageIdRepository
argument_list|()
return|;
block|}
block|}
end_class

end_unit

