begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.reifier.dataformat
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|reifier
operator|.
name|dataformat
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|YAMLDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|YAMLLibrary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|YAMLTypeFilterDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|YAMLTypeFilterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|YAMLDataFormatReifier
specifier|public
class|class
name|YAMLDataFormatReifier
extends|extends
name|DataFormatReifier
argument_list|<
name|YAMLDataFormat
argument_list|>
block|{
DECL|method|YAMLDataFormatReifier (DataFormatDefinition definition)
specifier|public
name|YAMLDataFormatReifier
parameter_list|(
name|DataFormatDefinition
name|definition
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|YAMLDataFormat
operator|)
name|definition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doCreateDataFormat (CamelContext camelContext)
specifier|protected
name|DataFormat
name|doCreateDataFormat
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
if|if
condition|(
name|definition
operator|.
name|getLibrary
argument_list|()
operator|==
name|YAMLLibrary
operator|.
name|SnakeYAML
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|this
argument_list|,
literal|"dataFormatName"
argument_list|,
literal|"yaml-snakeyaml"
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|doCreateDataFormat
argument_list|(
name|camelContext
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|configureDataFormat (DataFormat dataFormat, CamelContext camelContext)
specifier|protected
name|void
name|configureDataFormat
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
block|{
if|if
condition|(
name|definition
operator|.
name|getLibrary
argument_list|()
operator|==
name|YAMLLibrary
operator|.
name|SnakeYAML
condition|)
block|{
name|configureSnakeDataFormat
argument_list|(
name|dataFormat
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|configureSnakeDataFormat (DataFormat dataFormat, CamelContext camelContext)
specifier|protected
name|void
name|configureSnakeDataFormat
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|yamlUnmarshalType
init|=
name|definition
operator|.
name|getUnmarshalType
argument_list|()
decl_stmt|;
if|if
condition|(
name|yamlUnmarshalType
operator|==
literal|null
operator|&&
name|definition
operator|.
name|getUnmarshalTypeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|yamlUnmarshalType
operator|=
name|camelContext
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|definition
operator|.
name|getUnmarshalTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|setProperty
argument_list|(
name|dataFormat
argument_list|,
name|camelContext
argument_list|,
literal|"unmarshalType"
argument_list|,
name|yamlUnmarshalType
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|dataFormat
argument_list|,
name|camelContext
argument_list|,
literal|"classLoader"
argument_list|,
name|definition
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|dataFormat
argument_list|,
name|camelContext
argument_list|,
literal|"useApplicationContextClassLoader"
argument_list|,
name|definition
operator|.
name|isUseApplicationContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|dataFormat
argument_list|,
name|camelContext
argument_list|,
literal|"prettyFlow"
argument_list|,
name|definition
operator|.
name|isPrettyFlow
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|dataFormat
argument_list|,
name|camelContext
argument_list|,
literal|"allowAnyType"
argument_list|,
name|definition
operator|.
name|isAllowAnyType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|definition
operator|.
name|getTypeFilters
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|definition
operator|.
name|getTypeFilters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|typeFilterDefinitions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|definition
operator|.
name|getTypeFilters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|YAMLTypeFilterDefinition
name|definition
range|:
name|definition
operator|.
name|getTypeFilters
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|definition
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|startsWith
argument_list|(
literal|"type"
argument_list|)
operator|&&
operator|!
name|value
operator|.
name|startsWith
argument_list|(
literal|"regexp"
argument_list|)
condition|)
block|{
name|YAMLTypeFilterType
name|type
init|=
name|definition
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|YAMLTypeFilterType
operator|.
name|type
expr_stmt|;
block|}
name|value
operator|=
name|type
operator|.
name|name
argument_list|()
operator|+
literal|":"
operator|+
name|value
expr_stmt|;
block|}
name|typeFilterDefinitions
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|setProperty
argument_list|(
name|dataFormat
argument_list|,
name|camelContext
argument_list|,
literal|"typeFilterDefinitions"
argument_list|,
name|typeFilterDefinitions
argument_list|)
expr_stmt|;
block|}
name|setPropertyRef
argument_list|(
name|dataFormat
argument_list|,
name|camelContext
argument_list|,
literal|"constructor"
argument_list|,
name|definition
operator|.
name|getConstructor
argument_list|()
argument_list|)
expr_stmt|;
name|setPropertyRef
argument_list|(
name|dataFormat
argument_list|,
name|camelContext
argument_list|,
literal|"representer"
argument_list|,
name|definition
operator|.
name|getRepresenter
argument_list|()
argument_list|)
expr_stmt|;
name|setPropertyRef
argument_list|(
name|dataFormat
argument_list|,
name|camelContext
argument_list|,
literal|"dumperOptions"
argument_list|,
name|definition
operator|.
name|getDumperOptions
argument_list|()
argument_list|)
expr_stmt|;
name|setPropertyRef
argument_list|(
name|dataFormat
argument_list|,
name|camelContext
argument_list|,
literal|"resolver"
argument_list|,
name|definition
operator|.
name|getResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setProperty (DataFormat dataFormat, CamelContext camelContext, String propertyName, Object propertyValue)
specifier|protected
name|void
name|setProperty
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Object
name|propertyValue
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|propertyValue
argument_list|)
condition|)
block|{
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
name|propertyName
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setPropertyRef (DataFormat dataFormat, CamelContext camelContext, String propertyName, String propertyValue)
specifier|protected
name|void
name|setPropertyRef
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|propertyValue
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|propertyValue
argument_list|)
condition|)
block|{
comment|// must be a reference value
name|String
name|ref
init|=
name|propertyValue
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|?
name|propertyValue
else|:
literal|"#"
operator|+
name|propertyValue
decl_stmt|;
name|setProperty
argument_list|(
name|camelContext
argument_list|,
name|dataFormat
argument_list|,
name|propertyName
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

