begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.core.osgi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|file
operator|.
name|FileComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|osgi
operator|.
name|test
operator|.
name|MyService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|simple
operator|.
name|SimpleLanguage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ComponentResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LanguageResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|mock
operator|.
name|MockBundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|mock
operator|.
name|MockServiceReference
import|;
end_import

begin_class
DECL|class|CamelMockBundleContext
specifier|public
class|class
name|CamelMockBundleContext
extends|extends
name|MockBundleContext
block|{
DECL|field|SERVICE_PID_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|SERVICE_PID_PREFIX
init|=
literal|"test."
decl_stmt|;
DECL|method|CamelMockBundleContext (Bundle bundle)
specifier|public
name|CamelMockBundleContext
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|super
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
DECL|method|getService (@uppressWarningsR) ServiceReference reference)
specifier|public
name|Object
name|getService
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|ServiceReference
name|reference
parameter_list|)
block|{
name|String
index|[]
name|classNames
init|=
operator|(
name|String
index|[]
operator|)
name|reference
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|)
decl_stmt|;
name|String
name|classNames0
init|=
name|classNames
operator|!=
literal|null
condition|?
name|classNames
index|[
literal|0
index|]
else|:
literal|null
decl_stmt|;
name|String
name|pid
init|=
operator|(
name|String
operator|)
name|reference
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|)
decl_stmt|;
if|if
condition|(
name|classNames0
operator|!=
literal|null
operator|&&
name|classNames0
operator|.
name|equals
argument_list|(
literal|"org.apache.camel.core.osgi.test.MyService"
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyService
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|pid
operator|!=
literal|null
operator|&&
name|pid
operator|.
name|equals
argument_list|(
name|SERVICE_PID_PREFIX
operator|+
literal|"org.apache.camel.core.osgi.test.MyService"
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyService
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|classNames0
operator|!=
literal|null
operator|&&
name|classNames0
operator|.
name|equals
argument_list|(
name|ComponentResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|ComponentResolver
argument_list|()
block|{
specifier|public
name|Component
name|resolveComponent
parameter_list|(
name|String
name|name
parameter_list|,
name|CamelContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"file_test"
argument_list|)
condition|)
block|{
return|return
operator|new
name|FileComponent
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|classNames0
operator|!=
literal|null
operator|&&
name|classNames0
operator|.
name|equals
argument_list|(
name|LanguageResolver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|LanguageResolver
argument_list|()
block|{
specifier|public
name|Language
name|resolveLanguage
parameter_list|(
name|String
name|name
parameter_list|,
name|CamelContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"simple"
argument_list|)
condition|)
block|{
return|return
operator|new
name|SimpleLanguage
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getServiceReference (String clazz)
specifier|public
name|ServiceReference
name|getServiceReference
parameter_list|(
name|String
name|clazz
parameter_list|)
block|{
comment|// lookup Java class if clazz contains dot (.) symbol
if|if
condition|(
name|clazz
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getServiceReference
argument_list|(
name|clazz
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
comment|// class not found so no service reference is returned
block|}
block|}
else|else
block|{
return|return
name|super
operator|.
name|getServiceReference
argument_list|(
name|clazz
argument_list|)
return|;
block|}
block|}
DECL|method|addServicePID (ServiceReference[] srs, String filter)
specifier|private
specifier|static
name|void
name|addServicePID
parameter_list|(
name|ServiceReference
index|[]
name|srs
parameter_list|,
name|String
name|filter
parameter_list|)
block|{
for|for
control|(
name|ServiceReference
name|sr
range|:
name|srs
control|)
block|{
if|if
condition|(
name|sr
operator|instanceof
name|MockServiceReference
condition|)
block|{
name|Dictionary
name|properties
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|String
name|pid
init|=
name|filter
operator|.
name|replace
argument_list|(
literal|"("
operator|+
name|Constants
operator|.
name|SERVICE_PID
operator|+
literal|"="
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|")"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
name|pid
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|sr
operator|.
name|getPropertyKeys
argument_list|()
control|)
block|{
if|if
condition|(
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|sr
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
operator|(
operator|(
name|MockServiceReference
operator|)
name|sr
operator|)
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|getServiceReferences (String clazz, String filter)
specifier|public
name|ServiceReference
index|[]
name|getServiceReferences
parameter_list|(
name|String
name|clazz
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|InvalidSyntaxException
block|{
comment|// just simulate when the bundle context doesn't have right service reference
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|indexOf
argument_list|(
literal|"name=test"
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|ServiceReference
index|[]
name|srs
init|=
name|super
operator|.
name|getServiceReferences
argument_list|(
name|clazz
argument_list|,
name|filter
argument_list|)
decl_stmt|;
comment|// set service.pid property by filter
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|indexOf
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
operator|+
literal|"="
argument_list|)
operator|>
literal|0
condition|)
block|{
name|addServicePID
argument_list|(
name|srs
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
return|return
name|srs
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|getAllServiceReferences (String clazz, String filter)
specifier|public
name|ServiceReference
index|[]
name|getAllServiceReferences
parameter_list|(
name|String
name|clazz
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|InvalidSyntaxException
block|{
comment|// just simulate when the bundle context doesn't have right service reference
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|indexOf
argument_list|(
literal|"name=test"
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MockServiceReference
name|reference
init|=
operator|new
name|MockServiceReference
argument_list|(
name|getBundle
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|clazz
block|}
argument_list|)
decl_stmt|;
comment|// setup the name property with the class name
name|Dictionary
name|properties
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
operator|new
name|ServiceReference
index|[]
block|{
name|reference
block|}
return|;
block|}
block|}
end_class

end_unit

