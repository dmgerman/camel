begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.core.osgi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
operator|.
name|DefaultManagementNameStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_comment
comment|/**  * OSGi enhanced {@link org.apache.camel.spi.ManagementNameStrategy}.  *<p/>  * This {@link org.apache.camel.spi.ManagementNameStrategy} supports the default  * tokens (see {@link DefaultManagementNameStrategy}) and the following additional OSGi specific tokens  *<ul>  *<li>#bundleId# - The bundle id</li>  *<li>#version# - The bundle version</li>  *<li>#symbolicName# - The bundle symbolic name</li>  *</ul>  *<p/>  * This implementation will by default use a name pattern as<tt>#symbolicName#</tt> and in case  * of a clash (such as multiple versions of the same symbolicName),  * then the pattern will fallback to append an unique counter<tt>#symbolicName#-#counter#</tt>.  *  * @see DefaultManagementNameStrategy  */
end_comment

begin_class
DECL|class|OsgiManagementNameStrategy
specifier|public
class|class
name|OsgiManagementNameStrategy
extends|extends
name|DefaultManagementNameStrategy
block|{
DECL|field|CONTEXT_COUNTER
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|CONTEXT_COUNTER
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|bundleContext
specifier|private
specifier|final
name|BundleContext
name|bundleContext
decl_stmt|;
DECL|method|OsgiManagementNameStrategy (CamelContext camelContext, BundleContext bundleContext)
specifier|public
name|OsgiManagementNameStrategy
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|super
argument_list|(
name|camelContext
argument_list|,
literal|"#symbolicName#-#name#"
argument_list|,
literal|"#symbolicName#-#name#-#counter#"
argument_list|)
expr_stmt|;
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|customResolveManagementName (String pattern, String answer)
specifier|protected
name|String
name|customResolveManagementName
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|answer
parameter_list|)
block|{
name|String
name|bundleId
init|=
literal|""
operator|+
name|bundleContext
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
decl_stmt|;
name|String
name|symbolicName
init|=
name|bundleContext
operator|.
name|getBundle
argument_list|()
operator|.
name|getSymbolicName
argument_list|()
decl_stmt|;
if|if
condition|(
name|symbolicName
operator|!=
literal|null
condition|)
block|{
name|symbolicName
operator|=
name|Matcher
operator|.
name|quoteReplacement
argument_list|(
name|symbolicName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|symbolicName
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|version
init|=
name|Matcher
operator|.
name|quoteReplacement
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|answer
operator|=
name|answer
operator|.
name|replaceFirst
argument_list|(
literal|"#bundleId#"
argument_list|,
name|bundleId
argument_list|)
expr_stmt|;
name|answer
operator|=
name|answer
operator|.
name|replaceFirst
argument_list|(
literal|"#symbolicName#"
argument_list|,
name|symbolicName
argument_list|)
expr_stmt|;
name|answer
operator|=
name|answer
operator|.
name|replaceFirst
argument_list|(
literal|"#version#"
argument_list|,
name|version
argument_list|)
expr_stmt|;
comment|// we got a candidate then find a free name
comment|// true = check fist if the candidate as-is is free, if not then use the counter
name|answer
operator|=
name|OsgiNamingHelper
operator|.
name|findFreeCamelContextName
argument_list|(
name|bundleContext
argument_list|,
name|answer
argument_list|,
name|OsgiCamelContextPublisher
operator|.
name|CONTEXT_MANAGEMENT_NAME_PROPERTY
argument_list|,
name|CONTEXT_COUNTER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

