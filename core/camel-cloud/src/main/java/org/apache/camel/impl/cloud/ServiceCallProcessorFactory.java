begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.impl.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExtendedCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceChooser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceChooserAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDiscoveryAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceExpressionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceFilterAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|engine
operator|.
name|TypedProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|cloud
operator|.
name|ServiceCallConfigurationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|cloud
operator|.
name|ServiceCallDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|cloud
operator|.
name|ServiceCallDefinitionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|function
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|function
operator|.
name|ThrowingHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
operator|.
name|findByType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|CamelContextHelper
operator|.
name|lookup
import|;
end_import

begin_class
DECL|class|ServiceCallProcessorFactory
specifier|public
class|class
name|ServiceCallProcessorFactory
extends|extends
name|TypedProcessorFactory
argument_list|<
name|ServiceCallDefinition
argument_list|>
block|{
DECL|field|definition
specifier|private
specifier|volatile
name|ServiceCallDefinition
name|definition
decl_stmt|;
DECL|method|ServiceCallProcessorFactory ()
specifier|public
name|ServiceCallProcessorFactory
parameter_list|()
block|{
name|super
argument_list|(
name|ServiceCallDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// *****************************
comment|// Processor Factory
comment|// *****************************
annotation|@
name|Override
DECL|method|doCreateProcessor (RouteContext routeContext, ServiceCallDefinition definition)
specifier|public
name|Processor
name|doCreateProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|ServiceCallDefinition
name|definition
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|definition
operator|=
name|definition
expr_stmt|;
specifier|final
name|CamelContext
name|camelContext
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
decl_stmt|;
specifier|final
name|ServiceDiscovery
name|serviceDiscovery
init|=
name|retrieveServiceDiscovery
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
specifier|final
name|ServiceFilter
name|serviceFilter
init|=
name|retrieveServiceFilter
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
specifier|final
name|ServiceChooser
name|serviceChooser
init|=
name|retrieveServiceChooser
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
specifier|final
name|ServiceLoadBalancer
name|loadBalancer
init|=
name|retrieveLoadBalancer
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
name|CamelContextAware
operator|.
name|trySetCamelContext
argument_list|(
name|serviceDiscovery
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
name|CamelContextAware
operator|.
name|trySetCamelContext
argument_list|(
name|serviceFilter
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
name|CamelContextAware
operator|.
name|trySetCamelContext
argument_list|(
name|serviceChooser
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
name|CamelContextAware
operator|.
name|trySetCamelContext
argument_list|(
name|loadBalancer
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|loadBalancer
operator|instanceof
name|ServiceDiscoveryAware
condition|)
block|{
operator|(
operator|(
name|ServiceDiscoveryAware
operator|)
name|loadBalancer
operator|)
operator|.
name|setServiceDiscovery
argument_list|(
name|serviceDiscovery
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|loadBalancer
operator|instanceof
name|ServiceFilterAware
condition|)
block|{
operator|(
operator|(
name|ServiceFilterAware
operator|)
name|loadBalancer
operator|)
operator|.
name|setServiceFilter
argument_list|(
name|serviceFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|loadBalancer
operator|instanceof
name|ServiceChooserAware
condition|)
block|{
operator|(
operator|(
name|ServiceChooserAware
operator|)
name|loadBalancer
operator|)
operator|.
name|setServiceChooser
argument_list|(
name|serviceChooser
argument_list|)
expr_stmt|;
block|}
comment|// The component is used to configure the default scheme to use (eg
comment|// camel component name).
comment|// The component configured on EIP takes precedence vs configured on
comment|// configuration.
name|String
name|endpointScheme
init|=
name|definition
operator|.
name|getComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpointScheme
operator|==
literal|null
condition|)
block|{
name|ServiceCallConfigurationDefinition
name|conf
init|=
name|retrieveConfig
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|endpointScheme
operator|=
name|conf
operator|.
name|getComponent
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|endpointScheme
operator|==
literal|null
condition|)
block|{
name|ServiceCallConfigurationDefinition
name|conf
init|=
name|retrieveDefaultConfig
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|endpointScheme
operator|=
name|conf
operator|.
name|getComponent
argument_list|()
expr_stmt|;
block|}
block|}
comment|// The uri is used to tweak the uri.
comment|// The uri configured on EIP takes precedence vs configured on
comment|// configuration.
name|String
name|endpointUri
init|=
name|definition
operator|.
name|getUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpointUri
operator|==
literal|null
condition|)
block|{
name|ServiceCallConfigurationDefinition
name|conf
init|=
name|retrieveConfig
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|endpointUri
operator|=
name|conf
operator|.
name|getUri
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|endpointUri
operator|==
literal|null
condition|)
block|{
name|ServiceCallConfigurationDefinition
name|conf
init|=
name|retrieveDefaultConfig
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|endpointUri
operator|=
name|conf
operator|.
name|getUri
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Service name is mandatory
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|definition
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Service name"
argument_list|)
expr_stmt|;
name|endpointScheme
operator|=
name|ThrowingHelper
operator|.
name|applyIfNotEmpty
argument_list|(
name|endpointScheme
argument_list|,
name|camelContext
operator|::
name|resolvePropertyPlaceholders
argument_list|,
parameter_list|()
lambda|->
name|ServiceCallDefinitionConstants
operator|.
name|DEFAULT_COMPONENT
argument_list|)
expr_stmt|;
name|endpointUri
operator|=
name|ThrowingHelper
operator|.
name|applyIfNotEmpty
argument_list|(
name|endpointUri
argument_list|,
name|camelContext
operator|::
name|resolvePropertyPlaceholders
argument_list|,
parameter_list|()
lambda|->
literal|null
argument_list|)
expr_stmt|;
return|return
operator|new
name|DefaultServiceCallProcessor
argument_list|(
name|camelContext
argument_list|,
name|camelContext
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|definition
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|endpointScheme
argument_list|,
name|endpointUri
argument_list|,
name|definition
operator|.
name|getPattern
argument_list|()
argument_list|,
name|loadBalancer
argument_list|,
name|retrieveExpression
argument_list|(
name|camelContext
argument_list|,
name|endpointScheme
argument_list|)
argument_list|)
return|;
block|}
comment|// *****************************
comment|// Helpers
comment|// *****************************
DECL|method|retrieveDefaultConfig (CamelContext camelContext)
specifier|private
name|ServiceCallConfigurationDefinition
name|retrieveDefaultConfig
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
comment|// check if a default configuration is bound to the registry
name|ServiceCallConfigurationDefinition
name|config
init|=
name|camelContext
operator|.
name|getExtension
argument_list|(
name|Model
operator|.
name|class
argument_list|)
operator|.
name|getServiceCallConfiguration
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
comment|// Or if it is in the registry
name|config
operator|=
name|lookup
argument_list|(
name|camelContext
argument_list|,
name|ServiceCallDefinitionConstants
operator|.
name|DEFAULT_SERVICE_CALL_CONFIG_ID
argument_list|,
name|ServiceCallConfigurationDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
comment|// If no default is set either by searching by name or bound to the
comment|// camel context, assume that if there is a single instance in the
comment|// registry, that is the default one
name|config
operator|=
name|findByType
argument_list|(
name|camelContext
argument_list|,
name|ServiceCallConfigurationDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
DECL|method|retrieveConfig (CamelContext camelContext)
specifier|private
name|ServiceCallConfigurationDefinition
name|retrieveConfig
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|ServiceCallConfigurationDefinition
name|config
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|getConfigurationRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// lookup in registry firstNotNull
name|config
operator|=
name|lookup
argument_list|(
name|camelContext
argument_list|,
name|definition
operator|.
name|getConfigurationRef
argument_list|()
argument_list|,
name|ServiceCallConfigurationDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
comment|// and fallback as service configuration
name|config
operator|=
name|camelContext
operator|.
name|getExtension
argument_list|(
name|Model
operator|.
name|class
argument_list|)
operator|.
name|getServiceCallConfiguration
argument_list|(
name|definition
operator|.
name|getConfigurationRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|config
return|;
block|}
comment|// ******************************************
comment|// ServiceDiscovery
comment|// ******************************************
DECL|method|retrieveServiceDiscovery (CamelContext camelContext, Function<CamelContext, ServiceCallConfigurationDefinition> function)
specifier|private
name|ServiceDiscovery
name|retrieveServiceDiscovery
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Function
argument_list|<
name|CamelContext
argument_list|,
name|ServiceCallConfigurationDefinition
argument_list|>
name|function
parameter_list|)
throws|throws
name|Exception
block|{
name|ServiceDiscovery
name|answer
init|=
literal|null
decl_stmt|;
name|ServiceCallConfigurationDefinition
name|config
init|=
name|function
operator|.
name|apply
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|getServiceDiscoveryConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|config
operator|.
name|getServiceDiscoveryConfiguration
argument_list|()
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
name|retrieve
argument_list|(
name|ServiceDiscovery
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|config
operator|::
name|getServiceDiscovery
argument_list|,
name|config
operator|::
name|getServiceDiscoveryRef
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|retrieveServiceDiscovery (CamelContext camelContext)
specifier|private
name|ServiceDiscovery
name|retrieveServiceDiscovery
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|Suppliers
operator|.
name|firstNotNull
argument_list|(
operator|(
operator|)
operator|->
operator|(
name|definition
operator|.
name|getServiceDiscoveryConfiguration
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|definition
operator|.
name|getServiceDiscoveryConfiguration
argument_list|()
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
else|:
literal|null
argument_list|,
comment|// Local configuration
parameter_list|()
lambda|->
name|retrieve
argument_list|(
name|ServiceDiscovery
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|definition
operator|::
name|getServiceDiscovery
argument_list|,
name|definition
operator|::
name|getServiceDiscoveryRef
argument_list|)
argument_list|,
comment|// Linked configuration
parameter_list|()
lambda|->
name|retrieveServiceDiscovery
argument_list|(
name|camelContext
argument_list|,
name|this
operator|::
name|retrieveConfig
argument_list|)
argument_list|,
comment|// Default configuration
parameter_list|()
lambda|->
name|retrieveServiceDiscovery
argument_list|(
name|camelContext
argument_list|,
name|this
operator|::
name|retrieveDefaultConfig
argument_list|)
argument_list|,
comment|// Check if there is a single instance in the registry
parameter_list|()
lambda|->
name|findByType
argument_list|(
name|camelContext
argument_list|,
name|ServiceDiscovery
operator|.
name|class
argument_list|)
argument_list|,
comment|// From registry
parameter_list|()
lambda|->
name|lookup
argument_list|(
name|camelContext
argument_list|,
name|ServiceCallDefinitionConstants
operator|.
name|DEFAULT_SERVICE_DISCOVERY_ID
argument_list|,
name|ServiceDiscovery
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|orElseGet
argument_list|(
comment|// Default, that's s little ugly but a load balancer may
comment|// live without
comment|// (i.e. the Ribbon one) so let's delegate the null check
comment|// to the actual
comment|// impl.
parameter_list|()
lambda|->
literal|null
argument_list|)
return|;
block|}
comment|// ******************************************
comment|// ServiceFilter
comment|// ******************************************
DECL|method|retrieveServiceFilter (CamelContext camelContext, Function<CamelContext, ServiceCallConfigurationDefinition> function)
specifier|private
name|ServiceFilter
name|retrieveServiceFilter
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Function
argument_list|<
name|CamelContext
argument_list|,
name|ServiceCallConfigurationDefinition
argument_list|>
name|function
parameter_list|)
throws|throws
name|Exception
block|{
name|ServiceFilter
name|answer
init|=
literal|null
decl_stmt|;
name|ServiceCallConfigurationDefinition
name|config
init|=
name|function
operator|.
name|apply
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|getServiceFilterConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|config
operator|.
name|getServiceFilterConfiguration
argument_list|()
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
name|retrieve
argument_list|(
name|ServiceFilter
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|config
operator|::
name|getServiceFilter
argument_list|,
name|config
operator|::
name|getServiceFilterRef
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|String
name|ref
init|=
name|config
operator|.
name|getServiceFilterRef
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|"healthy"
argument_list|,
name|ref
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|HealthyServiceFilter
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|"pass-through"
argument_list|,
name|ref
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|PassThroughServiceFilter
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|"passthrough"
argument_list|,
name|ref
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|PassThroughServiceFilter
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|retrieveServiceFilter (CamelContext camelContext)
specifier|private
name|ServiceFilter
name|retrieveServiceFilter
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|Suppliers
operator|.
name|firstNotNull
argument_list|(
operator|(
operator|)
operator|->
operator|(
name|definition
operator|.
name|getServiceFilterConfiguration
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|definition
operator|.
name|getServiceFilterConfiguration
argument_list|()
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
else|:
literal|null
argument_list|,
comment|// Local configuration
parameter_list|()
lambda|->
name|retrieve
argument_list|(
name|ServiceFilter
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|definition
operator|::
name|getServiceFilter
argument_list|,
name|definition
operator|::
name|getServiceFilterRef
argument_list|)
argument_list|,
comment|// Linked configuration
parameter_list|()
lambda|->
name|retrieveServiceFilter
argument_list|(
name|camelContext
argument_list|,
name|this
operator|::
name|retrieveConfig
argument_list|)
argument_list|,
comment|// Default configuration
parameter_list|()
lambda|->
name|retrieveServiceFilter
argument_list|(
name|camelContext
argument_list|,
name|this
operator|::
name|retrieveDefaultConfig
argument_list|)
argument_list|,
comment|// Check if there is a single instance in
comment|// the registry
parameter_list|()
lambda|->
name|findByType
argument_list|(
name|camelContext
argument_list|,
name|ServiceFilter
operator|.
name|class
argument_list|)
argument_list|,
comment|// From registry
parameter_list|()
lambda|->
name|lookup
argument_list|(
name|camelContext
argument_list|,
name|ServiceCallDefinitionConstants
operator|.
name|DEFAULT_SERVICE_FILTER_ID
argument_list|,
name|ServiceFilter
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|orElseGet
argument_list|(
comment|// Default
parameter_list|()
lambda|->
operator|new
name|HealthyServiceFilter
argument_list|()
argument_list|)
return|;
block|}
comment|// ******************************************
comment|// ServiceChooser
comment|// ******************************************
DECL|method|retrieveServiceChooser (CamelContext camelContext, Function<CamelContext, ServiceCallConfigurationDefinition> function)
specifier|private
name|ServiceChooser
name|retrieveServiceChooser
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Function
argument_list|<
name|CamelContext
argument_list|,
name|ServiceCallConfigurationDefinition
argument_list|>
name|function
parameter_list|)
throws|throws
name|Exception
block|{
name|ServiceChooser
name|answer
init|=
literal|null
decl_stmt|;
name|ServiceCallConfigurationDefinition
name|config
init|=
name|function
operator|.
name|apply
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|retrieve
argument_list|(
name|ServiceChooser
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|config
operator|::
name|getServiceChooser
argument_list|,
name|config
operator|::
name|getServiceChooserRef
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|String
name|ref
init|=
name|config
operator|.
name|getServiceChooserRef
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|"roundrobin"
argument_list|,
name|ref
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|RoundRobinServiceChooser
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|"round-robin"
argument_list|,
name|ref
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|RoundRobinServiceChooser
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|"random"
argument_list|,
name|ref
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|RandomServiceChooser
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|retrieveServiceChooser (CamelContext camelContext)
specifier|private
name|ServiceChooser
name|retrieveServiceChooser
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|Suppliers
operator|.
name|firstNotNull
argument_list|(
comment|// Local configuration
parameter_list|()
lambda|->
name|retrieve
argument_list|(
name|ServiceChooser
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|definition
operator|::
name|getServiceChooser
argument_list|,
name|definition
operator|::
name|getServiceChooserRef
argument_list|)
argument_list|,
comment|// Linked configuration
parameter_list|()
lambda|->
name|retrieveServiceChooser
argument_list|(
name|camelContext
argument_list|,
name|this
operator|::
name|retrieveConfig
argument_list|)
argument_list|,
comment|// Default configuration
parameter_list|()
lambda|->
name|retrieveServiceChooser
argument_list|(
name|camelContext
argument_list|,
name|this
operator|::
name|retrieveDefaultConfig
argument_list|)
argument_list|,
comment|// Check if there is a single instance in
comment|// the registry
parameter_list|()
lambda|->
name|findByType
argument_list|(
name|camelContext
argument_list|,
name|ServiceChooser
operator|.
name|class
argument_list|)
argument_list|,
comment|// From registry
parameter_list|()
lambda|->
name|lookup
argument_list|(
name|camelContext
argument_list|,
name|ServiceCallDefinitionConstants
operator|.
name|DEFAULT_SERVICE_CHOOSER_ID
argument_list|,
name|ServiceChooser
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|orElseGet
argument_list|(
comment|// Default
parameter_list|()
lambda|->
operator|new
name|RoundRobinServiceChooser
argument_list|()
argument_list|)
return|;
block|}
comment|// ******************************************
comment|// LoadBalancer
comment|// ******************************************
DECL|method|retrieveLoadBalancer (CamelContext camelContext, Function<CamelContext, ServiceCallConfigurationDefinition> function)
specifier|private
name|ServiceLoadBalancer
name|retrieveLoadBalancer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Function
argument_list|<
name|CamelContext
argument_list|,
name|ServiceCallConfigurationDefinition
argument_list|>
name|function
parameter_list|)
throws|throws
name|Exception
block|{
name|ServiceLoadBalancer
name|answer
init|=
literal|null
decl_stmt|;
name|ServiceCallConfigurationDefinition
name|config
init|=
name|function
operator|.
name|apply
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|getLoadBalancerConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|config
operator|.
name|getLoadBalancerConfiguration
argument_list|()
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
name|retrieve
argument_list|(
name|ServiceLoadBalancer
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|config
operator|::
name|getLoadBalancer
argument_list|,
name|config
operator|::
name|getLoadBalancerRef
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|retrieveLoadBalancer (CamelContext camelContext)
specifier|private
name|ServiceLoadBalancer
name|retrieveLoadBalancer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|Suppliers
operator|.
name|firstNotNull
argument_list|(
operator|(
operator|)
operator|->
operator|(
name|definition
operator|.
name|getLoadBalancerConfiguration
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|definition
operator|.
name|getLoadBalancerConfiguration
argument_list|()
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
else|:
literal|null
argument_list|,
comment|// Local configuration
parameter_list|()
lambda|->
name|retrieve
argument_list|(
name|ServiceLoadBalancer
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|definition
operator|::
name|getLoadBalancer
argument_list|,
name|definition
operator|::
name|getLoadBalancerRef
argument_list|)
argument_list|,
comment|// Linked configuration
parameter_list|()
lambda|->
name|retrieveLoadBalancer
argument_list|(
name|camelContext
argument_list|,
name|this
operator|::
name|retrieveConfig
argument_list|)
argument_list|,
comment|// Default configuration
parameter_list|()
lambda|->
name|retrieveLoadBalancer
argument_list|(
name|camelContext
argument_list|,
name|this
operator|::
name|retrieveDefaultConfig
argument_list|)
argument_list|,
comment|// Check if there is a single instance in
comment|// the registry
parameter_list|()
lambda|->
name|findByType
argument_list|(
name|camelContext
argument_list|,
name|ServiceLoadBalancer
operator|.
name|class
argument_list|)
argument_list|,
comment|// From registry
parameter_list|()
lambda|->
name|lookup
argument_list|(
name|camelContext
argument_list|,
name|ServiceCallDefinitionConstants
operator|.
name|DEFAULT_LOAD_BALANCER_ID
argument_list|,
name|ServiceLoadBalancer
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|orElseGet
argument_list|(
comment|// Default
parameter_list|()
lambda|->
operator|new
name|DefaultServiceLoadBalancer
argument_list|()
argument_list|)
return|;
block|}
comment|// ******************************************
comment|// Expression
comment|// ******************************************
DECL|method|retrieveExpression (CamelContext camelContext, Function<CamelContext, ServiceCallConfigurationDefinition> function)
specifier|private
name|Expression
name|retrieveExpression
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Function
argument_list|<
name|CamelContext
argument_list|,
name|ServiceCallConfigurationDefinition
argument_list|>
name|function
parameter_list|)
throws|throws
name|Exception
block|{
name|Expression
name|answer
init|=
literal|null
decl_stmt|;
name|ServiceCallConfigurationDefinition
name|config
init|=
name|function
operator|.
name|apply
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|getExpressionConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|config
operator|.
name|getExpressionConfiguration
argument_list|()
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
name|retrieve
argument_list|(
name|Expression
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|config
operator|::
name|getExpression
argument_list|,
name|config
operator|::
name|getExpressionRef
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|retrieveExpression (CamelContext camelContext, String component)
specifier|private
name|Expression
name|retrieveExpression
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|component
parameter_list|)
throws|throws
name|Exception
block|{
name|Optional
argument_list|<
name|Expression
argument_list|>
name|expression
init|=
name|Suppliers
operator|.
name|firstNotNull
argument_list|(
operator|(
operator|)
operator|->
operator|(
name|definition
operator|.
name|getExpressionConfiguration
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|definition
operator|.
name|getExpressionConfiguration
argument_list|()
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
else|:
literal|null
argument_list|,
comment|// Local configuration
parameter_list|()
lambda|->
name|retrieve
argument_list|(
name|Expression
operator|.
name|class
argument_list|,
name|camelContext
argument_list|,
name|definition
operator|::
name|getExpression
argument_list|,
name|definition
operator|::
name|getExpressionRef
argument_list|)
argument_list|,
comment|// Linked configuration
parameter_list|()
lambda|->
name|retrieveExpression
argument_list|(
name|camelContext
argument_list|,
name|this
operator|::
name|retrieveConfig
argument_list|)
argument_list|,
comment|// Default configuration
parameter_list|()
lambda|->
name|retrieveExpression
argument_list|(
name|camelContext
argument_list|,
name|this
operator|::
name|retrieveDefaultConfig
argument_list|)
argument_list|,
comment|// From registry
parameter_list|()
lambda|->
name|lookup
argument_list|(
name|camelContext
argument_list|,
name|ServiceCallDefinitionConstants
operator|.
name|DEFAULT_SERVICE_CALL_EXPRESSION_ID
argument_list|,
name|Expression
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|expression
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|expression
operator|.
name|get
argument_list|()
return|;
block|}
else|else
block|{
name|String
name|lookupName
init|=
name|component
operator|+
literal|"-service-expression"
decl_stmt|;
comment|// First try to find the factory from the registry.
name|ServiceExpressionFactory
name|factory
init|=
name|CamelContextHelper
operator|.
name|lookup
argument_list|(
name|camelContext
argument_list|,
name|lookupName
argument_list|,
name|ServiceExpressionFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
comment|// If a factory is found in the registry do not re-configure it
comment|// as
comment|// it should be pre-configured.
return|return
name|factory
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
return|;
block|}
else|else
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Then use Service factory.
name|type
operator|=
name|camelContext
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getFactoryFinder
argument_list|(
name|ServiceCallDefinitionConstants
operator|.
name|RESOURCE_PATH
argument_list|)
operator|.
name|findClass
argument_list|(
name|lookupName
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                 }
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|ServiceExpressionFactory
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|factory
operator|=
operator|(
name|ServiceExpressionFactory
operator|)
name|camelContext
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|type
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resolving Expression: "
operator|+
name|lookupName
operator|+
literal|" detected type conflict: Not a ServiceExpressionFactory implementation. Found: "
operator|+
name|type
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// If no factory is found, returns the default
name|factory
operator|=
name|context
lambda|->
operator|new
name|DefaultServiceCallExpression
argument_list|()
expr_stmt|;
block|}
return|return
name|factory
operator|.
name|newInstance
argument_list|(
name|camelContext
argument_list|)
return|;
block|}
block|}
block|}
comment|// ************************************
comment|// Helpers
comment|// ************************************
DECL|method|retrieve (Class<T> type, CamelContext camelContext, Supplier<T> instanceSupplier, Supplier<String> refSupplier)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|retrieve
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|,
name|Supplier
argument_list|<
name|T
argument_list|>
name|instanceSupplier
parameter_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
name|refSupplier
parameter_list|)
block|{
name|T
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|instanceSupplier
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|instanceSupplier
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
operator|&&
name|refSupplier
operator|!=
literal|null
condition|)
block|{
name|String
name|ref
init|=
name|refSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|lookup
argument_list|(
name|camelContext
argument_list|,
name|ref
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

