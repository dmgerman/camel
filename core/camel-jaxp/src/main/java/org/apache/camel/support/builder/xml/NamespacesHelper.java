begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support.builder.xml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|builder
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|builder
operator|.
name|Namespaces
import|;
end_import

begin_class
DECL|class|NamespacesHelper
specifier|public
specifier|final
class|class
name|NamespacesHelper
block|{
DECL|method|NamespacesHelper ()
specifier|private
name|NamespacesHelper
parameter_list|()
block|{            }
DECL|method|namespaces (Element element)
specifier|public
specifier|static
name|Namespaces
name|namespaces
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|Namespaces
name|namespaces
init|=
operator|new
name|Namespaces
argument_list|()
decl_stmt|;
name|add
argument_list|(
name|namespaces
argument_list|,
name|element
argument_list|)
expr_stmt|;
return|return
name|namespaces
return|;
block|}
DECL|method|add (Namespaces namespaces, Element element)
specifier|private
specifier|static
name|void
name|add
parameter_list|(
name|Namespaces
name|namespaces
parameter_list|,
name|Element
name|element
parameter_list|)
block|{
comment|// let's set the parent first in case we overload a prefix here
name|Node
name|parentNode
init|=
name|element
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentNode
operator|instanceof
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
condition|)
block|{
name|add
argument_list|(
name|namespaces
argument_list|,
operator|(
name|Element
operator|)
name|parentNode
argument_list|)
expr_stmt|;
block|}
name|NamedNodeMap
name|attributes
init|=
name|element
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|attributes
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Attr
name|node
init|=
operator|(
name|Attr
operator|)
name|attributes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|node
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"xmlns:"
argument_list|)
condition|)
block|{
name|String
name|prefix
init|=
name|name
operator|.
name|substring
argument_list|(
literal|"xmlns:"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|node
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

