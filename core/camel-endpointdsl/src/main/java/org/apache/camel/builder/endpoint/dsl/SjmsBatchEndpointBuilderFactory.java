begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_comment
comment|/**  * The sjms-batch component is a specialized for highly performant,  * transactional batch consumption from a JMS queue.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|SjmsBatchEndpointBuilderFactory
specifier|public
interface|interface
name|SjmsBatchEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint for the Simple JMS Batch component.      */
DECL|interface|SjmsBatchEndpointBuilder
specifier|public
interface|interface
name|SjmsBatchEndpointBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSjmsBatchEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The aggregation strategy to use, which merges all the batched          * messages into a single message.          *           * The option is a:<code>org.apache.camel.AggregationStrategy</code>          * type.          *           * Required: true          * Group: consumer          */
DECL|method|aggregationStrategy ( AggregationStrategy aggregationStrategy)
specifier|default
name|SjmsBatchEndpointBuilder
name|aggregationStrategy
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"aggregationStrategy"
argument_list|,
name|aggregationStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The aggregation strategy to use, which merges all the batched          * messages into a single message.          *           * The option will be converted to a          *<code>org.apache.camel.AggregationStrategy</code> type.          *           * Required: true          * Group: consumer          */
DECL|method|aggregationStrategy ( String aggregationStrategy)
specifier|default
name|SjmsBatchEndpointBuilder
name|aggregationStrategy
parameter_list|(
name|String
name|aggregationStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"aggregationStrategy"
argument_list|,
name|aggregationStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to allow sending messages with no body. If this option is          * false and the message body is null, then an JMSException is thrown.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|allowNullBody (boolean allowNullBody)
specifier|default
name|SjmsBatchEndpointBuilder
name|allowNullBody
parameter_list|(
name|boolean
name|allowNullBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowNullBody"
argument_list|,
name|allowNullBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to allow sending messages with no body. If this option is          * false and the message body is null, then an JMSException is thrown.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|allowNullBody (String allowNullBody)
specifier|default
name|SjmsBatchEndpointBuilder
name|allowNullBody
parameter_list|(
name|String
name|allowNullBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowNullBody"
argument_list|,
name|allowNullBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The completion interval in millis, which causes batches to be          * completed in a scheduled fixed rate every interval. The batch may be          * empty if the timeout triggered and there was no messages in the          * batch. Notice you cannot use both completion timeout and completion          * interval at the same time, only one can be configured.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|completionInterval ( int completionInterval)
specifier|default
name|SjmsBatchEndpointBuilder
name|completionInterval
parameter_list|(
name|int
name|completionInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"completionInterval"
argument_list|,
name|completionInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The completion interval in millis, which causes batches to be          * completed in a scheduled fixed rate every interval. The batch may be          * empty if the timeout triggered and there was no messages in the          * batch. Notice you cannot use both completion timeout and completion          * interval at the same time, only one can be configured.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|completionInterval ( String completionInterval)
specifier|default
name|SjmsBatchEndpointBuilder
name|completionInterval
parameter_list|(
name|String
name|completionInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"completionInterval"
argument_list|,
name|completionInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The completion predicate, which causes batches to be completed when          * the predicate evaluates as true. The predicate can also be configured          * using the simple language using the string syntax. You may want to          * set the option eagerCheckCompletion to true to let the predicate          * match the incoming message, as otherwise it matches the aggregated          * message.          *           * The option is a:<code>org.apache.camel.Predicate</code> type.          *           * Group: consumer          */
DECL|method|completionPredicate ( Predicate completionPredicate)
specifier|default
name|SjmsBatchEndpointBuilder
name|completionPredicate
parameter_list|(
name|Predicate
name|completionPredicate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"completionPredicate"
argument_list|,
name|completionPredicate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The completion predicate, which causes batches to be completed when          * the predicate evaluates as true. The predicate can also be configured          * using the simple language using the string syntax. You may want to          * set the option eagerCheckCompletion to true to let the predicate          * match the incoming message, as otherwise it matches the aggregated          * message.          *           * The option will be converted to a          *<code>org.apache.camel.Predicate</code> type.          *           * Group: consumer          */
DECL|method|completionPredicate ( String completionPredicate)
specifier|default
name|SjmsBatchEndpointBuilder
name|completionPredicate
parameter_list|(
name|String
name|completionPredicate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"completionPredicate"
argument_list|,
name|completionPredicate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of messages consumed at which the batch will be completed.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|completionSize (int completionSize)
specifier|default
name|SjmsBatchEndpointBuilder
name|completionSize
parameter_list|(
name|int
name|completionSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"completionSize"
argument_list|,
name|completionSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of messages consumed at which the batch will be completed.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|completionSize (String completionSize)
specifier|default
name|SjmsBatchEndpointBuilder
name|completionSize
parameter_list|(
name|String
name|completionSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"completionSize"
argument_list|,
name|completionSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timeout in millis from receipt of the first first message when          * the batch will be completed. The batch may be empty if the timeout          * triggered and there was no messages in the batch. Notice you cannot          * use both completion timeout and completion interval at the same time,          * only one can be configured.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|completionTimeout (int completionTimeout)
specifier|default
name|SjmsBatchEndpointBuilder
name|completionTimeout
parameter_list|(
name|int
name|completionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"completionTimeout"
argument_list|,
name|completionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timeout in millis from receipt of the first first message when          * the batch will be completed. The batch may be empty if the timeout          * triggered and there was no messages in the batch. Notice you cannot          * use both completion timeout and completion interval at the same time,          * only one can be configured.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|completionTimeout ( String completionTimeout)
specifier|default
name|SjmsBatchEndpointBuilder
name|completionTimeout
parameter_list|(
name|String
name|completionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"completionTimeout"
argument_list|,
name|completionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of JMS sessions to consume from.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|consumerCount (int consumerCount)
specifier|default
name|SjmsBatchEndpointBuilder
name|consumerCount
parameter_list|(
name|int
name|consumerCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"consumerCount"
argument_list|,
name|consumerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of JMS sessions to consume from.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|consumerCount (String consumerCount)
specifier|default
name|SjmsBatchEndpointBuilder
name|consumerCount
parameter_list|(
name|String
name|consumerCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"consumerCount"
argument_list|,
name|consumerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use eager completion checking which means that the          * completionPredicate will use the incoming Exchange. As opposed to          * without eager completion checking the completionPredicate will use          * the aggregated Exchange.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|eagerCheckCompletion ( boolean eagerCheckCompletion)
specifier|default
name|SjmsBatchEndpointBuilder
name|eagerCheckCompletion
parameter_list|(
name|boolean
name|eagerCheckCompletion
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"eagerCheckCompletion"
argument_list|,
name|eagerCheckCompletion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use eager completion checking which means that the          * completionPredicate will use the incoming Exchange. As opposed to          * without eager completion checking the completionPredicate will use          * the aggregated Exchange.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|eagerCheckCompletion ( String eagerCheckCompletion)
specifier|default
name|SjmsBatchEndpointBuilder
name|eagerCheckCompletion
parameter_list|(
name|String
name|eagerCheckCompletion
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"eagerCheckCompletion"
argument_list|,
name|eagerCheckCompletion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to include all JMSXxxx properties when mapping from JMS to          * Camel Message. Setting this to true will include properties such as          * JMSXAppID, and JMSXUserID etc. Note: If you are using a custom          * headerFilterStrategy then this option does not apply.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|includeAllJMSXProperties ( boolean includeAllJMSXProperties)
specifier|default
name|SjmsBatchEndpointBuilder
name|includeAllJMSXProperties
parameter_list|(
name|boolean
name|includeAllJMSXProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"includeAllJMSXProperties"
argument_list|,
name|includeAllJMSXProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to include all JMSXxxx properties when mapping from JMS to          * Camel Message. Setting this to true will include properties such as          * JMSXAppID, and JMSXUserID etc. Note: If you are using a custom          * headerFilterStrategy then this option does not apply.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|includeAllJMSXProperties ( String includeAllJMSXProperties)
specifier|default
name|SjmsBatchEndpointBuilder
name|includeAllJMSXProperties
parameter_list|(
name|String
name|includeAllJMSXProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"includeAllJMSXProperties"
argument_list|,
name|includeAllJMSXProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether Camel should auto map the received JMS message to a          * suited payload type, such as javax.jms.TextMessage to a String etc.          * See section about how mapping works below for more details.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|mapJmsMessage (boolean mapJmsMessage)
specifier|default
name|SjmsBatchEndpointBuilder
name|mapJmsMessage
parameter_list|(
name|boolean
name|mapJmsMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mapJmsMessage"
argument_list|,
name|mapJmsMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether Camel should auto map the received JMS message to a          * suited payload type, such as javax.jms.TextMessage to a String etc.          * See section about how mapping works below for more details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|mapJmsMessage (String mapJmsMessage)
specifier|default
name|SjmsBatchEndpointBuilder
name|mapJmsMessage
parameter_list|(
name|String
name|mapJmsMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mapJmsMessage"
argument_list|,
name|mapJmsMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The duration in milliseconds of each poll for messages.          * completionTimeOut will be used if it is shorter and a batch has          * started.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|pollDuration (int pollDuration)
specifier|default
name|SjmsBatchEndpointBuilder
name|pollDuration
parameter_list|(
name|int
name|pollDuration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pollDuration"
argument_list|,
name|pollDuration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The duration in milliseconds of each poll for messages.          * completionTimeOut will be used if it is shorter and a batch has          * started.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|pollDuration (String pollDuration)
specifier|default
name|SjmsBatchEndpointBuilder
name|pollDuration
parameter_list|(
name|String
name|pollDuration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pollDuration"
argument_list|,
name|pollDuration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If using completion timeout or interval, then the batch may be empty          * if the timeout triggered and there was no messages in the batch. If          * this option is true and the batch is empty then an empty message is          * added to the batch so an empty message is routed.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( boolean sendEmptyMessageWhenIdle)
specifier|default
name|SjmsBatchEndpointBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|boolean
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If using completion timeout or interval, then the batch may be empty          * if the timeout triggered and there was no messages in the batch. If          * this option is true and the batch is empty then an empty message is          * added to the batch so an empty message is routed.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( String sendEmptyMessageWhenIdle)
specifier|default
name|SjmsBatchEndpointBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|String
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Simple JMS Batch component.      */
DECL|interface|AdvancedSjmsBatchEndpointBuilder
specifier|public
interface|interface
name|AdvancedSjmsBatchEndpointBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SjmsBatchEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SjmsBatchEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether to startup the consumer message listener asynchronously, when          * starting a route. For example if a JmsConsumer cannot get a          * connection to a remote JMS broker, then it may block while retrying          * and/or failover. This will cause Camel to block while starting          * routes. By setting this option to true, you will let routes startup,          * while the JmsConsumer connects to the JMS broker using a dedicated          * thread in asynchronous mode. If this option is used, then beware that          * if the connection could not be established, then an exception is          * logged at WARN level, and the consumer will not be able to receive          * messages; You can then restart the route to retry.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|asyncStartListener ( boolean asyncStartListener)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|asyncStartListener
parameter_list|(
name|boolean
name|asyncStartListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"asyncStartListener"
argument_list|,
name|asyncStartListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to startup the consumer message listener asynchronously, when          * starting a route. For example if a JmsConsumer cannot get a          * connection to a remote JMS broker, then it may block while retrying          * and/or failover. This will cause Camel to block while starting          * routes. By setting this option to true, you will let routes startup,          * while the JmsConsumer connects to the JMS broker using a dedicated          * thread in asynchronous mode. If this option is used, then beware that          * if the connection could not be established, then an exception is          * logged at WARN level, and the consumer will not be able to receive          * messages; You can then restart the route to retry.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|asyncStartListener ( String asyncStartListener)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|asyncStartListener
parameter_list|(
name|String
name|asyncStartListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"asyncStartListener"
argument_list|,
name|asyncStartListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          *           * The option is a:          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          *           * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Pluggable strategy for encoding and decoding JMS keys so they can be          * compliant with the JMS specification. Camel provides two          * implementations out of the box: default and passthrough. The default          * strategy will safely marshal dots and hyphens (. and -). The          * passthrough strategy leaves the key as is. Can be used for JMS          * brokers which do not care whether JMS header keys contain illegal          * characters. You can provide your own implementation of the          * org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it          * using the # notation.          *           * The option is a:          *<code>org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy</code>          * type.          *           * Group: advanced          */
DECL|method|jmsKeyFormatStrategy ( Object jmsKeyFormatStrategy)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|jmsKeyFormatStrategy
parameter_list|(
name|Object
name|jmsKeyFormatStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jmsKeyFormatStrategy"
argument_list|,
name|jmsKeyFormatStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Pluggable strategy for encoding and decoding JMS keys so they can be          * compliant with the JMS specification. Camel provides two          * implementations out of the box: default and passthrough. The default          * strategy will safely marshal dots and hyphens (. and -). The          * passthrough strategy leaves the key as is. Can be used for JMS          * brokers which do not care whether JMS header keys contain illegal          * characters. You can provide your own implementation of the          * org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it          * using the # notation.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy</code>          * type.          *           * Group: advanced          */
DECL|method|jmsKeyFormatStrategy ( String jmsKeyFormatStrategy)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|jmsKeyFormatStrategy
parameter_list|(
name|String
name|jmsKeyFormatStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jmsKeyFormatStrategy"
argument_list|,
name|jmsKeyFormatStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The delay in millis between attempts to re-establish a valid session.          * If this is a positive value the SjmsBatchConsumer will attempt to          * create a new session if it sees an IllegalStateException during          * message consumption. This delay value allows you to pause between          * attempts to prevent spamming the logs. If this is a negative value          * (default is -1) then the SjmsBatchConsumer will behave as it always          * has before - that is it will bail out and the route will shut down if          * it sees an IllegalStateException.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|keepAliveDelay ( int keepAliveDelay)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|keepAliveDelay
parameter_list|(
name|int
name|keepAliveDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAliveDelay"
argument_list|,
name|keepAliveDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The delay in millis between attempts to re-establish a valid session.          * If this is a positive value the SjmsBatchConsumer will attempt to          * create a new session if it sees an IllegalStateException during          * message consumption. This delay value allows you to pause between          * attempts to prevent spamming the logs. If this is a negative value          * (default is -1) then the SjmsBatchConsumer will behave as it always          * has before - that is it will bail out and the route will shut down if          * it sees an IllegalStateException.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|keepAliveDelay ( String keepAliveDelay)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|keepAliveDelay
parameter_list|(
name|String
name|keepAliveDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAliveDelay"
argument_list|,
name|keepAliveDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the given MessageCreatedStrategy which are invoked when Camel          * creates new instances of javax.jms.Message objects when Camel is          * sending a JMS message.          *           * The option is a:          *<code>org.apache.camel.component.sjms.jms.MessageCreatedStrategy</code> type.          *           * Group: advanced          */
DECL|method|messageCreatedStrategy ( Object messageCreatedStrategy)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|messageCreatedStrategy
parameter_list|(
name|Object
name|messageCreatedStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"messageCreatedStrategy"
argument_list|,
name|messageCreatedStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the given MessageCreatedStrategy which are invoked when Camel          * creates new instances of javax.jms.Message objects when Camel is          * sending a JMS message.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.jms.MessageCreatedStrategy</code> type.          *           * Group: advanced          */
DECL|method|messageCreatedStrategy ( String messageCreatedStrategy)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|messageCreatedStrategy
parameter_list|(
name|String
name|messageCreatedStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"messageCreatedStrategy"
argument_list|,
name|messageCreatedStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the interval between recovery attempts, i.e. when a          * connection is being refreshed, in milliseconds. The default is 5000          * ms, that is, 5 seconds.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|recoveryInterval ( int recoveryInterval)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|recoveryInterval
parameter_list|(
name|int
name|recoveryInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"recoveryInterval"
argument_list|,
name|recoveryInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the interval between recovery attempts, i.e. when a          * connection is being refreshed, in milliseconds. The default is 5000          * ms, that is, 5 seconds.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|recoveryInterval ( String recoveryInterval)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|recoveryInterval
parameter_list|(
name|String
name|recoveryInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"recoveryInterval"
argument_list|,
name|recoveryInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If using the completionInterval option a background thread is created          * to trigger the completion interval. Set this option to provide a          * custom thread pool to be used rather than creating a new thread for          * every consumer.          *           * The option is a:          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: advanced          */
DECL|method|timeoutCheckerExecutorService ( ScheduledExecutorService timeoutCheckerExecutorService)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|timeoutCheckerExecutorService
parameter_list|(
name|ScheduledExecutorService
name|timeoutCheckerExecutorService
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeoutCheckerExecutorService"
argument_list|,
name|timeoutCheckerExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If using the completionInterval option a background thread is created          * to trigger the completion interval. Set this option to provide a          * custom thread pool to be used rather than creating a new thread for          * every consumer.          *           * The option will be converted to a          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: advanced          */
DECL|method|timeoutCheckerExecutorService ( String timeoutCheckerExecutorService)
specifier|default
name|AdvancedSjmsBatchEndpointBuilder
name|timeoutCheckerExecutorService
parameter_list|(
name|String
name|timeoutCheckerExecutorService
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeoutCheckerExecutorService"
argument_list|,
name|timeoutCheckerExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Simple JMS Batch (camel-sjms)      * The sjms-batch component is a specialized for highly performant,      * transactional batch consumption from a JMS queue.      *       * Category: messaging      * Available as of version: 2.16      * Maven coordinates: org.apache.camel:camel-sjms      *       * Syntax:<code>sjms-batch:destinationName</code>      *       * Path parameter: destinationName (required)      * The destination name. Only queues are supported, names may be prefixed by      * 'queue:'.      */
DECL|method|sjmsBatch (String path)
specifier|default
name|SjmsBatchEndpointBuilder
name|sjmsBatch
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|SjmsBatchEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|SjmsBatchEndpointBuilder
implements|,
name|AdvancedSjmsBatchEndpointBuilder
block|{
specifier|public
name|SjmsBatchEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"sjms-batch"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SjmsBatchEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

