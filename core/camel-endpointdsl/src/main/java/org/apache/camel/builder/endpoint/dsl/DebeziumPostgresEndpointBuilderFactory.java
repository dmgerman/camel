begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * Represents a Debezium PostgresSQL endpoint which is used to capture changes  * in PostgresSQL database so that that applications can see those changes and  * respond to them.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|DebeziumPostgresEndpointBuilderFactory
specifier|public
interface|interface
name|DebeziumPostgresEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint for the Debezium PostgresSQL Connector component.      */
DECL|interface|DebeziumPostgresEndpointBuilder
specifier|public
interface|interface
name|DebeziumPostgresEndpointBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedDebeziumPostgresEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedDebeziumPostgresEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Converter class that should be used to serialize and deserialize          * key data for offsets. The default is JSON converter.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|internalKeyConverter ( String internalKeyConverter)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|internalKeyConverter
parameter_list|(
name|String
name|internalKeyConverter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"internalKeyConverter"
argument_list|,
name|internalKeyConverter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Converter class that should be used to serialize and deserialize          * value data for offsets. The default is JSON converter.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|internalValueConverter ( String internalValueConverter)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|internalValueConverter
parameter_list|(
name|String
name|internalValueConverter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"internalValueConverter"
argument_list|,
name|internalValueConverter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the Java class of the commit policy. It defines when          * offsets commit has to be triggered based on the number of events          * processed and the time elapsed since the last commit. This class must          * implement the interface 'OffsetCommitPolicy'. The default is a          * periodic commit policy based upon time intervals.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|offsetCommitPolicy ( String offsetCommitPolicy)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|offsetCommitPolicy
parameter_list|(
name|String
name|offsetCommitPolicy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetCommitPolicy"
argument_list|,
name|offsetCommitPolicy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum number of milliseconds to wait for records to flush and          * partition offset data to be committed to offset storage before          * cancelling the process and restoring the offset data to be committed          * in a future attempt. The default is 5 seconds.          *           * The option is a:<code>long</code> type.          *           * Group: consumer          */
DECL|method|offsetCommitTimeoutMs ( long offsetCommitTimeoutMs)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|offsetCommitTimeoutMs
parameter_list|(
name|long
name|offsetCommitTimeoutMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetCommitTimeoutMs"
argument_list|,
name|offsetCommitTimeoutMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum number of milliseconds to wait for records to flush and          * partition offset data to be committed to offset storage before          * cancelling the process and restoring the offset data to be committed          * in a future attempt. The default is 5 seconds.          *           * The option will be converted to a<code>long</code> type.          *           * Group: consumer          */
DECL|method|offsetCommitTimeoutMs ( String offsetCommitTimeoutMs)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|offsetCommitTimeoutMs
parameter_list|(
name|String
name|offsetCommitTimeoutMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetCommitTimeoutMs"
argument_list|,
name|offsetCommitTimeoutMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval at which to try committing offsets. The default is 1 minute.          *           * The option is a:<code>long</code> type.          *           * Group: consumer          */
DECL|method|offsetFlushIntervalMs ( long offsetFlushIntervalMs)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|offsetFlushIntervalMs
parameter_list|(
name|long
name|offsetFlushIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetFlushIntervalMs"
argument_list|,
name|offsetFlushIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval at which to try committing offsets. The default is 1 minute.          *           * The option will be converted to a<code>long</code> type.          *           * Group: consumer          */
DECL|method|offsetFlushIntervalMs ( String offsetFlushIntervalMs)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|offsetFlushIntervalMs
parameter_list|(
name|String
name|offsetFlushIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetFlushIntervalMs"
argument_list|,
name|offsetFlushIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the Java class that is responsible for persistence of          * connector offsets.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|offsetStorage ( String offsetStorage)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|offsetStorage
parameter_list|(
name|String
name|offsetStorage
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorage"
argument_list|,
name|offsetStorage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Path to file where offsets are to be stored. Required when          * offset.storage is set to the FileOffsetBackingStore.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|offsetStorageFileName ( String offsetStorageFileName)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|offsetStorageFileName
parameter_list|(
name|String
name|offsetStorageFileName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorageFileName"
argument_list|,
name|offsetStorageFileName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of partitions used when creating the offset storage topic.          * Required when offset.storage is set to the 'KafkaOffsetBackingStore'.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|offsetStoragePartitions ( int offsetStoragePartitions)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|offsetStoragePartitions
parameter_list|(
name|int
name|offsetStoragePartitions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStoragePartitions"
argument_list|,
name|offsetStoragePartitions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of partitions used when creating the offset storage topic.          * Required when offset.storage is set to the 'KafkaOffsetBackingStore'.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|offsetStoragePartitions ( String offsetStoragePartitions)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|offsetStoragePartitions
parameter_list|(
name|String
name|offsetStoragePartitions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStoragePartitions"
argument_list|,
name|offsetStoragePartitions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Replication factor used when creating the offset storage topic.          * Required when offset.storage is set to the KafkaOffsetBackingStore.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|offsetStorageReplicationFactor ( int offsetStorageReplicationFactor)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|offsetStorageReplicationFactor
parameter_list|(
name|int
name|offsetStorageReplicationFactor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorageReplicationFactor"
argument_list|,
name|offsetStorageReplicationFactor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Replication factor used when creating the offset storage topic.          * Required when offset.storage is set to the KafkaOffsetBackingStore.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|offsetStorageReplicationFactor ( String offsetStorageReplicationFactor)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|offsetStorageReplicationFactor
parameter_list|(
name|String
name|offsetStorageReplicationFactor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorageReplicationFactor"
argument_list|,
name|offsetStorageReplicationFactor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the Kafka topic where offsets are to be stored. Required          * when offset.storage is set to the KafkaOffsetBackingStore.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|offsetStorageTopic ( String offsetStorageTopic)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|offsetStorageTopic
parameter_list|(
name|String
name|offsetStorageTopic
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorageTopic"
argument_list|,
name|offsetStorageTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Description is not available here, please check Debezium website for          * corresponding key 'column.blacklist' description.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|columnBlacklist ( String columnBlacklist)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|columnBlacklist
parameter_list|(
name|String
name|columnBlacklist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"columnBlacklist"
argument_list|,
name|columnBlacklist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the database the connector should be monitoring.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|databaseDbname ( String databaseDbname)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|databaseDbname
parameter_list|(
name|String
name|databaseDbname
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseDbname"
argument_list|,
name|databaseDbname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The path to the file that will be used to record the database          * history.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|databaseHistoryFileFilename ( String databaseHistoryFileFilename)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|databaseHistoryFileFilename
parameter_list|(
name|String
name|databaseHistoryFileFilename
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryFileFilename"
argument_list|,
name|databaseHistoryFileFilename
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Resolvable hostname or IP address of the Postgres database server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|databaseHostname ( String databaseHostname)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|databaseHostname
parameter_list|(
name|String
name|databaseHostname
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHostname"
argument_list|,
name|databaseHostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A semicolon separated list of SQL statements to be executed when a          * JDBC connection to the database is established. Note that the          * connector may establish JDBC connections at its own discretion, so          * this should typically be used for configurationof session parameters          * only, but not for executing DML statements. Use doubled semicolon          * (';;') to use a semicolon as a character and not as a delimiter.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|databaseInitialStatements ( String databaseInitialStatements)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|databaseInitialStatements
parameter_list|(
name|String
name|databaseInitialStatements
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseInitialStatements"
argument_list|,
name|databaseInitialStatements
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password of the Postgres database user to be used when connecting to          * the database.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: postgres          */
DECL|method|databasePassword ( String databasePassword)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|databasePassword
parameter_list|(
name|String
name|databasePassword
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databasePassword"
argument_list|,
name|databasePassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port of the Postgres database server.          *           * The option is a:<code>int</code> type.          *           * Group: postgres          */
DECL|method|databasePort (int databasePort)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|databasePort
parameter_list|(
name|int
name|databasePort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databasePort"
argument_list|,
name|databasePort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port of the Postgres database server.          *           * The option will be converted to a<code>int</code> type.          *           * Group: postgres          */
DECL|method|databasePort (String databasePort)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|databasePort
parameter_list|(
name|String
name|databasePort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databasePort"
argument_list|,
name|databasePort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Unique name that identifies the database server and all recorded          * offsets, and that is used as a prefix for all schemas and topics.          * Each distinct installation should have a separate namespace and be          * monitored by at most one Debezium connector.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: postgres          */
DECL|method|databaseServerName ( String databaseServerName)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|databaseServerName
parameter_list|(
name|String
name|databaseServerName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseServerName"
argument_list|,
name|databaseServerName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * File containing the SSL Certificate for the client. See the Postgres          * SSL docs for further information.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|databaseSslcert ( String databaseSslcert)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|databaseSslcert
parameter_list|(
name|String
name|databaseSslcert
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseSslcert"
argument_list|,
name|databaseSslcert
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A name of class to that creates SSL Sockets. Use          * org.postgresql.ssl.NonValidatingFactory to disable SSL validation in          * development environments.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|databaseSslfactory ( String databaseSslfactory)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|databaseSslfactory
parameter_list|(
name|String
name|databaseSslfactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseSslfactory"
argument_list|,
name|databaseSslfactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * File containing the SSL private key for the client. See the Postgres          * SSL docs for further information.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|databaseSslkey ( String databaseSslkey)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|databaseSslkey
parameter_list|(
name|String
name|databaseSslkey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseSslkey"
argument_list|,
name|databaseSslkey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use an encrypted connection to Postgres. Options          * include'disable' (the default) to use an unencrypted connection;          * 'require' to use a secure (encrypted) connection, and fail if one          * cannot be established; 'verify-ca' like 'required' but additionally          * verify the server TLS certificate against the configured Certificate          * Authority (CA) certificates, or fail if no valid matching CA          * certificates are found; or'verify-full' like 'verify-ca' but          * additionally verify that the server certificate matches the host to          * which the connection is attempted.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|databaseSslmode ( String databaseSslmode)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|databaseSslmode
parameter_list|(
name|String
name|databaseSslmode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseSslmode"
argument_list|,
name|databaseSslmode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password to access the client private key from the file specified by          * 'database.sslkey'. See the Postgres SSL docs for further information.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|databaseSslpassword ( String databaseSslpassword)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|databaseSslpassword
parameter_list|(
name|String
name|databaseSslpassword
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseSslpassword"
argument_list|,
name|databaseSslpassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * File containing the root certificate(s) against which the server is          * validated. See the Postgres JDBC SSL docs for further information.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|databaseSslrootcert ( String databaseSslrootcert)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|databaseSslrootcert
parameter_list|(
name|String
name|databaseSslrootcert
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseSslrootcert"
argument_list|,
name|databaseSslrootcert
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable or disable TCP keep-alive probe to avoid dropping TCP          * connection.          *           * The option is a:<code>boolean</code> type.          *           * Group: postgres          */
DECL|method|databaseTcpkeepalive ( boolean databaseTcpkeepalive)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|databaseTcpkeepalive
parameter_list|(
name|boolean
name|databaseTcpkeepalive
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseTcpkeepalive"
argument_list|,
name|databaseTcpkeepalive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable or disable TCP keep-alive probe to avoid dropping TCP          * connection.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: postgres          */
DECL|method|databaseTcpkeepalive ( String databaseTcpkeepalive)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|databaseTcpkeepalive
parameter_list|(
name|String
name|databaseTcpkeepalive
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseTcpkeepalive"
argument_list|,
name|databaseTcpkeepalive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of the Postgres database user to be used when connecting to the          * database.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|databaseUser (String databaseUser)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|databaseUser
parameter_list|(
name|String
name|databaseUser
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseUser"
argument_list|,
name|databaseUser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify how DECIMAL and NUMERIC columns should be represented in          * change events, including:'precise' (the default) uses          * java.math.BigDecimal to represent values, which are encoded in the          * change events using a binary representation and Kafka Connect's          * 'org.apache.kafka.connect.data.Decimal' type; 'string' uses string to          * represent values; 'double' represents values using Java's 'double',          * which may not offer the precision but will be far easier to use in          * consumers.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|decimalHandlingMode ( String decimalHandlingMode)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|decimalHandlingMode
parameter_list|(
name|String
name|decimalHandlingMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"decimalHandlingMode"
argument_list|,
name|decimalHandlingMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Length of an interval in milli-seconds in in which the connector          * periodically sends heartbeat messages to a heartbeat topic. Use 0 to          * disable heartbeat messages. Disabled by default.          *           * The option is a:<code>int</code> type.          *           * Group: postgres          */
DECL|method|heartbeatIntervalMs ( int heartbeatIntervalMs)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|heartbeatIntervalMs
parameter_list|(
name|int
name|heartbeatIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"heartbeatIntervalMs"
argument_list|,
name|heartbeatIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Length of an interval in milli-seconds in in which the connector          * periodically sends heartbeat messages to a heartbeat topic. Use 0 to          * disable heartbeat messages. Disabled by default.          *           * The option will be converted to a<code>int</code> type.          *           * Group: postgres          */
DECL|method|heartbeatIntervalMs ( String heartbeatIntervalMs)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|heartbeatIntervalMs
parameter_list|(
name|String
name|heartbeatIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"heartbeatIntervalMs"
argument_list|,
name|heartbeatIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The prefix that is used to name heartbeat topics.Defaults to          * __debezium-heartbeat.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|heartbeatTopicsPrefix ( String heartbeatTopicsPrefix)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|heartbeatTopicsPrefix
parameter_list|(
name|String
name|heartbeatTopicsPrefix
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"heartbeatTopicsPrefix"
argument_list|,
name|heartbeatTopicsPrefix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify how HSTORE columns should be represented in change events,          * including:'json' represents values as json string'map' (default)          * represents values using java.util.Map.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|hstoreHandlingMode ( String hstoreHandlingMode)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|hstoreHandlingMode
parameter_list|(
name|String
name|hstoreHandlingMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"hstoreHandlingMode"
argument_list|,
name|hstoreHandlingMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify whether the fields of data type not supported by Debezium          * should be processed:'false' (the default) omits the fields; 'true'          * converts the field into an implementation dependent binary          * representation.          *           * The option is a:<code>boolean</code> type.          *           * Group: postgres          */
DECL|method|includeUnknownDatatypes ( boolean includeUnknownDatatypes)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|includeUnknownDatatypes
parameter_list|(
name|boolean
name|includeUnknownDatatypes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"includeUnknownDatatypes"
argument_list|,
name|includeUnknownDatatypes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify whether the fields of data type not supported by Debezium          * should be processed:'false' (the default) omits the fields; 'true'          * converts the field into an implementation dependent binary          * representation.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: postgres          */
DECL|method|includeUnknownDatatypes ( String includeUnknownDatatypes)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|includeUnknownDatatypes
parameter_list|(
name|String
name|includeUnknownDatatypes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"includeUnknownDatatypes"
argument_list|,
name|includeUnknownDatatypes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of each batch of source records. Defaults to 2048.          *           * The option is a:<code>int</code> type.          *           * Group: postgres          */
DECL|method|maxBatchSize (int maxBatchSize)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|maxBatchSize
parameter_list|(
name|int
name|maxBatchSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxBatchSize"
argument_list|,
name|maxBatchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of each batch of source records. Defaults to 2048.          *           * The option will be converted to a<code>int</code> type.          *           * Group: postgres          */
DECL|method|maxBatchSize (String maxBatchSize)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|maxBatchSize
parameter_list|(
name|String
name|maxBatchSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxBatchSize"
argument_list|,
name|maxBatchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of the queue for change events read from the database          * log but not yet recorded or forwarded. Defaults to 8192, and should          * always be larger than the maximum batch size.          *           * The option is a:<code>int</code> type.          *           * Group: postgres          */
DECL|method|maxQueueSize (int maxQueueSize)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|maxQueueSize
parameter_list|(
name|int
name|maxQueueSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxQueueSize"
argument_list|,
name|maxQueueSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of the queue for change events read from the database          * log but not yet recorded or forwarded. Defaults to 8192, and should          * always be larger than the maximum batch size.          *           * The option will be converted to a<code>int</code> type.          *           * Group: postgres          */
DECL|method|maxQueueSize (String maxQueueSize)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|maxQueueSize
parameter_list|(
name|String
name|maxQueueSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxQueueSize"
argument_list|,
name|maxQueueSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the Postgres logical decoding plugin installed on the          * server. Supported values are 'decoderbufs' and 'wal2json'. Defaults          * to 'decoderbufs'.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|pluginName (String pluginName)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|pluginName
parameter_list|(
name|String
name|pluginName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pluginName"
argument_list|,
name|pluginName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Frequency in milliseconds to wait for new change events to appear          * after receiving no events. Defaults to 500ms.          *           * The option is a:<code>long</code> type.          *           * Group: postgres          */
DECL|method|pollIntervalMs ( long pollIntervalMs)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|pollIntervalMs
parameter_list|(
name|long
name|pollIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollIntervalMs"
argument_list|,
name|pollIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Frequency in milliseconds to wait for new change events to appear          * after receiving no events. Defaults to 500ms.          *           * The option will be converted to a<code>long</code> type.          *           * Group: postgres          */
DECL|method|pollIntervalMs ( String pollIntervalMs)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|pollIntervalMs
parameter_list|(
name|String
name|pollIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollIntervalMs"
argument_list|,
name|pollIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Description is not available here, please check Debezium website for          * corresponding key 'schema.blacklist' description.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|schemaBlacklist ( String schemaBlacklist)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|schemaBlacklist
parameter_list|(
name|String
name|schemaBlacklist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"schemaBlacklist"
argument_list|,
name|schemaBlacklist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify the conditions that trigger a refresh of the in-memory schema          * for a table. 'columns_diff' (the default) is the safest mode,          * ensuring the in-memory schema stays in-sync with the database table's          * schema at all times. 'columns_diff_exclude_unchanged_toast' instructs          * the connector to refresh the in-memory schema cache if there is a          * discrepancy between it and the schema derived from the incoming          * message, unless unchanged TOASTable data fully accounts for the          * discrepancy. This setting can improve connector performance          * significantly if there are frequently-updated tables that have          * TOASTed data that are rarely part of these updates. However, it is          * possible for the in-memory schema to become outdated if TOASTable          * columns are dropped from the table.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|schemaRefreshMode ( String schemaRefreshMode)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|schemaRefreshMode
parameter_list|(
name|String
name|schemaRefreshMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"schemaRefreshMode"
argument_list|,
name|schemaRefreshMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The schemas for which events should be captured.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|schemaWhitelist ( String schemaWhitelist)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|schemaWhitelist
parameter_list|(
name|String
name|schemaWhitelist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"schemaWhitelist"
argument_list|,
name|schemaWhitelist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to drop the logical replication slot when the          * connector finishes orderlyBy default the replication is kept so that          * on restart progress can resume from the last recorded location.          *           * The option is a:<code>boolean</code> type.          *           * Group: postgres          */
DECL|method|slotDropOnStop ( boolean slotDropOnStop)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|slotDropOnStop
parameter_list|(
name|boolean
name|slotDropOnStop
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"slotDropOnStop"
argument_list|,
name|slotDropOnStop
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to drop the logical replication slot when the          * connector finishes orderlyBy default the replication is kept so that          * on restart progress can resume from the last recorded location.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: postgres          */
DECL|method|slotDropOnStop ( String slotDropOnStop)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|slotDropOnStop
parameter_list|(
name|String
name|slotDropOnStop
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"slotDropOnStop"
argument_list|,
name|slotDropOnStop
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the Postgres logical decoding slot created for streaming          * changes from a plugin.Defaults to 'debezium.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|slotName (String slotName)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|slotName
parameter_list|(
name|String
name|slotName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"slotName"
argument_list|,
name|slotName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Any optional parameters used by logical decoding plugin. Semi-colon          * separated. E.g.          * 'add-tables=public.table,public.table2;include-lsn=true'.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|slotStreamParams ( String slotStreamParams)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|slotStreamParams
parameter_list|(
name|String
name|slotStreamParams
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"slotStreamParams"
argument_list|,
name|slotStreamParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When 'snapshot.mode' is set as custom, this setting must be set to          * specify a fully qualified class name to load (via the default class          * loader).This class must implement the 'Snapshotter' interface and is          * called on each app boot to determine whether to do a snapshot and how          * to build queries.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|snapshotCustomClass ( String snapshotCustomClass)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|snapshotCustomClass
parameter_list|(
name|String
name|snapshotCustomClass
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotCustomClass"
argument_list|,
name|snapshotCustomClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of milliseconds to delay before a snapshot will begin.          *           * The option is a:<code>long</code> type.          *           * Group: postgres          */
DECL|method|snapshotDelayMs ( long snapshotDelayMs)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|snapshotDelayMs
parameter_list|(
name|long
name|snapshotDelayMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotDelayMs"
argument_list|,
name|snapshotDelayMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of milliseconds to delay before a snapshot will begin.          *           * The option will be converted to a<code>long</code> type.          *           * Group: postgres          */
DECL|method|snapshotDelayMs ( String snapshotDelayMs)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|snapshotDelayMs
parameter_list|(
name|String
name|snapshotDelayMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotDelayMs"
argument_list|,
name|snapshotDelayMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of records that should be loaded into memory while          * performing a snapshot.          *           * The option is a:<code>int</code> type.          *           * Group: postgres          */
DECL|method|snapshotFetchSize ( int snapshotFetchSize)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|snapshotFetchSize
parameter_list|(
name|int
name|snapshotFetchSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotFetchSize"
argument_list|,
name|snapshotFetchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of records that should be loaded into memory while          * performing a snapshot.          *           * The option will be converted to a<code>int</code> type.          *           * Group: postgres          */
DECL|method|snapshotFetchSize ( String snapshotFetchSize)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|snapshotFetchSize
parameter_list|(
name|String
name|snapshotFetchSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotFetchSize"
argument_list|,
name|snapshotFetchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of millis to wait for table locks at the beginning          * of a snapshot. If locks cannot be acquired in this time frame, the          * snapshot will be aborted. Defaults to 10 seconds.          *           * The option is a:<code>long</code> type.          *           * Group: postgres          */
DECL|method|snapshotLockTimeoutMs ( long snapshotLockTimeoutMs)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|snapshotLockTimeoutMs
parameter_list|(
name|long
name|snapshotLockTimeoutMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotLockTimeoutMs"
argument_list|,
name|snapshotLockTimeoutMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of millis to wait for table locks at the beginning          * of a snapshot. If locks cannot be acquired in this time frame, the          * snapshot will be aborted. Defaults to 10 seconds.          *           * The option will be converted to a<code>long</code> type.          *           * Group: postgres          */
DECL|method|snapshotLockTimeoutMs ( String snapshotLockTimeoutMs)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|snapshotLockTimeoutMs
parameter_list|(
name|String
name|snapshotLockTimeoutMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotLockTimeoutMs"
argument_list|,
name|snapshotLockTimeoutMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The criteria for running a snapshot upon startup of the connector.          * Options include: 'always' to specify that the connector run a          * snapshot each time it starts up; 'initial' (the default) to specify          * the connector can run a snapshot only when no offsets are available          * for the logical server name; 'initial_only' same as 'initial' except          * the connector should stop after completing the snapshot and before it          * would normally start emitting changes;'never' to specify the          * connector should never run a snapshot and that upon first startup the          * connector should read from the last position (LSN) recorded by the          * server; and'custom' to specify a custom class with          * 'snapshot.custom_class' which will be loaded and used to determine          * the snapshot, see docs for more details.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|snapshotMode (String snapshotMode)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|snapshotMode
parameter_list|(
name|String
name|snapshotMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotMode"
argument_list|,
name|snapshotMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This property contains a comma-separated list of fully-qualified          * tables (DB_NAME.TABLE_NAME). Select statements for the individual          * tables are specified in further configuration properties, one for          * each table, identified by the id          * 'snapshot.select.statement.overrides.DB_NAME.TABLE_NAME'. The value          * of those properties is the select statement to use when retrieving          * data from the specific table during snapshotting. A possible use case          * for large append-only tables is setting a specific point where to          * start (resume) snapshotting, in case a previous snapshotting was          * interrupted.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|snapshotSelectStatementOverrides ( String snapshotSelectStatementOverrides)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|snapshotSelectStatementOverrides
parameter_list|(
name|String
name|snapshotSelectStatementOverrides
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotSelectStatementOverrides"
argument_list|,
name|snapshotSelectStatementOverrides
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Frequency in milliseconds for sending replication connection status          * updates to the server. Defaults to 10 seconds (10000 ms).          *           * The option is a:<code>int</code> type.          *           * Group: postgres          */
DECL|method|statusUpdateIntervalMs ( int statusUpdateIntervalMs)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|statusUpdateIntervalMs
parameter_list|(
name|int
name|statusUpdateIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"statusUpdateIntervalMs"
argument_list|,
name|statusUpdateIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Frequency in milliseconds for sending replication connection status          * updates to the server. Defaults to 10 seconds (10000 ms).          *           * The option will be converted to a<code>int</code> type.          *           * Group: postgres          */
DECL|method|statusUpdateIntervalMs ( String statusUpdateIntervalMs)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|statusUpdateIntervalMs
parameter_list|(
name|String
name|statusUpdateIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"statusUpdateIntervalMs"
argument_list|,
name|statusUpdateIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Description is not available here, please check Debezium website for          * corresponding key 'table.blacklist' description.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|tableBlacklist ( String tableBlacklist)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|tableBlacklist
parameter_list|(
name|String
name|tableBlacklist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tableBlacklist"
argument_list|,
name|tableBlacklist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The tables for which changes are to be captured.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|tableWhitelist ( String tableWhitelist)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|tableWhitelist
parameter_list|(
name|String
name|tableWhitelist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tableWhitelist"
argument_list|,
name|tableWhitelist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time, date, and timestamps can be represented with different kinds of          * precisions, including:'adaptive' (the default) bases the precision of          * time, date, and timestamp values on the database column's precision;          * 'adaptive_time_microseconds' like 'adaptive' mode, but TIME fields          * always use microseconds precision;'connect' always represents time,          * date, and timestamp values using Kafka Connect's built-in          * representations for Time, Date, and Timestamp, which uses millisecond          * precision regardless of the database columns' precision .          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|timePrecisionMode ( String timePrecisionMode)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|timePrecisionMode
parameter_list|(
name|String
name|timePrecisionMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timePrecisionMode"
argument_list|,
name|timePrecisionMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether delete operations should be represented by a delete event and          * a subsquenttombstone event (true) or only by a delete event (false).          * Emitting the tombstone event (the default behavior) allows Kafka to          * completely delete all events pertaining to the given key once the          * source record got deleted.          *           * The option is a:<code>boolean</code> type.          *           * Group: postgres          */
DECL|method|tombstonesOnDelete ( boolean tombstonesOnDelete)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|tombstonesOnDelete
parameter_list|(
name|boolean
name|tombstonesOnDelete
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tombstonesOnDelete"
argument_list|,
name|tombstonesOnDelete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether delete operations should be represented by a delete event and          * a subsquenttombstone event (true) or only by a delete event (false).          * Emitting the tombstone event (the default behavior) allows Kafka to          * completely delete all events pertaining to the given key once the          * source record got deleted.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: postgres          */
DECL|method|tombstonesOnDelete ( String tombstonesOnDelete)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|tombstonesOnDelete
parameter_list|(
name|String
name|tombstonesOnDelete
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tombstonesOnDelete"
argument_list|,
name|tombstonesOnDelete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How events received from the DB should be placed on topics. Options          * include'table' (the default) each DB table will have a separate Kafka          * topic; 'schema' there will be one Kafka topic per DB schema; events          * from multiple topics belonging to the same schema will be placed on          * the same topic.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: postgres          */
DECL|method|topicSelectionStrategy ( String topicSelectionStrategy)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|topicSelectionStrategy
parameter_list|(
name|String
name|topicSelectionStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"topicSelectionStrategy"
argument_list|,
name|topicSelectionStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify how often (in ms) the xmin will be fetched from the          * replication slot. This xmin value is exposed by the slot which gives          * a lower bound of where a new replication slot could start from. The          * lower the value, the more likely this value is to be the current          * 'true' value, but the bigger the performance cost. The bigger the          * value, the less likely this value is to be the current 'true' value,          * but the lower the performance penalty. The default is set to 0 ms,          * which disables tracking xmin.          *           * The option is a:<code>long</code> type.          *           * Group: postgres          */
DECL|method|xminFetchIntervalMs ( long xminFetchIntervalMs)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|xminFetchIntervalMs
parameter_list|(
name|long
name|xminFetchIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"xminFetchIntervalMs"
argument_list|,
name|xminFetchIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify how often (in ms) the xmin will be fetched from the          * replication slot. This xmin value is exposed by the slot which gives          * a lower bound of where a new replication slot could start from. The          * lower the value, the more likely this value is to be the current          * 'true' value, but the bigger the performance cost. The bigger the          * value, the less likely this value is to be the current 'true' value,          * but the lower the performance penalty. The default is set to 0 ms,          * which disables tracking xmin.          *           * The option will be converted to a<code>long</code> type.          *           * Group: postgres          */
DECL|method|xminFetchIntervalMs ( String xminFetchIntervalMs)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|xminFetchIntervalMs
parameter_list|(
name|String
name|xminFetchIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"xminFetchIntervalMs"
argument_list|,
name|xminFetchIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Debezium PostgresSQL Connector      * component.      */
DECL|interface|AdvancedDebeziumPostgresEndpointBuilder
specifier|public
interface|interface
name|AdvancedDebeziumPostgresEndpointBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|DebeziumPostgresEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|DebeziumPostgresEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedDebeziumPostgresEndpointBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedDebeziumPostgresEndpointBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedDebeziumPostgresEndpointBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedDebeziumPostgresEndpointBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedDebeziumPostgresEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedDebeziumPostgresEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedDebeziumPostgresEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedDebeziumPostgresEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Debezium PostgresSQL Connector (camel-debezium-postgres)      * Represents a Debezium PostgresSQL endpoint which is used to capture      * changes in PostgresSQL database so that that applications can see those      * changes and respond to them.      *       * Category: database,sql,postgres      * Available as of version: 3.0      * Maven coordinates: org.apache.camel:camel-debezium-postgres      *       * Syntax:<code>debezium-postgres:name</code>      *       * Path parameter: name (required)      * Unique name for the connector. Attempting to register again with the same      * name will fail.      */
DECL|method|debeziumPostgres (String path)
specifier|default
name|DebeziumPostgresEndpointBuilder
name|debeziumPostgres
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|DebeziumPostgresEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|DebeziumPostgresEndpointBuilder
implements|,
name|AdvancedDebeziumPostgresEndpointBuilder
block|{
specifier|public
name|DebeziumPostgresEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"debezium-postgres"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DebeziumPostgresEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

