begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PollingConsumerPollStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ScheduledPollConsumerScheduler
import|;
end_import

begin_comment
comment|/**  * The ssh component enables access to SSH servers such that you can send an SSH  * command, and process the response.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|SshEndpointBuilderFactory
specifier|public
interface|interface
name|SshEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the SSH component.      */
DECL|interface|SshEndpointConsumerBuilder
specifier|public
interface|interface
name|SshEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSshEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSshEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets the hostname of the remote SSH server.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|SshEndpointConsumerBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the port number for the remote SSH server.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|port (int port)
specifier|default
name|SshEndpointConsumerBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the port number for the remote SSH server.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|SshEndpointConsumerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether a connection to an unknown host should fail or not.          * This value is only checked when the property knownHosts is set.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|failOnUnknownHost ( boolean failOnUnknownHost)
specifier|default
name|SshEndpointConsumerBuilder
name|failOnUnknownHost
parameter_list|(
name|boolean
name|failOnUnknownHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"failOnUnknownHost"
argument_list|,
name|failOnUnknownHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether a connection to an unknown host should fail or not.          * This value is only checked when the property knownHosts is set.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|failOnUnknownHost ( String failOnUnknownHost)
specifier|default
name|SshEndpointConsumerBuilder
name|failOnUnknownHost
parameter_list|(
name|String
name|failOnUnknownHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"failOnUnknownHost"
argument_list|,
name|failOnUnknownHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the resource path for a known_hosts file.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|knownHostsResource ( String knownHostsResource)
specifier|default
name|SshEndpointConsumerBuilder
name|knownHostsResource
parameter_list|(
name|String
name|knownHostsResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"knownHostsResource"
argument_list|,
name|knownHostsResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the timeout in milliseconds to wait in establishing the remote          * SSH server connection. Defaults to 30000 milliseconds.          * The option is a<code>long</code> type.          * @group common          */
DECL|method|timeout (long timeout)
specifier|default
name|SshEndpointConsumerBuilder
name|timeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the timeout in milliseconds to wait in establishing the remote          * SSH server connection. Defaults to 30000 milliseconds.          * The option will be converted to a<code>long</code> type.          * @group common          */
DECL|method|timeout (String timeout)
specifier|default
name|SshEndpointConsumerBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|SshEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|SshEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the command string to send to the remote SSH server during every          * poll cycle. Only works with camel-ssh component being used as a          * consumer, i.e. from(ssh://...) You may need to end your command with          * a newline, and that must be URL encoded %0A.          * The option is a<code>java.lang.String</code> type.          * @group consumer          */
DECL|method|pollCommand (String pollCommand)
specifier|default
name|SshEndpointConsumerBuilder
name|pollCommand
parameter_list|(
name|String
name|pollCommand
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pollCommand"
argument_list|,
name|pollCommand
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|sendEmptyMessageWhenIdle ( boolean sendEmptyMessageWhenIdle)
specifier|default
name|SshEndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|boolean
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|sendEmptyMessageWhenIdle ( String sendEmptyMessageWhenIdle)
specifier|default
name|SshEndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|String
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          * The option is a<code>int</code> type.          * @group scheduler          */
DECL|method|backoffErrorThreshold ( int backoffErrorThreshold)
specifier|default
name|SshEndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|int
name|backoffErrorThreshold
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          * The option will be converted to a<code>int</code> type.          * @group scheduler          */
DECL|method|backoffErrorThreshold ( String backoffErrorThreshold)
specifier|default
name|SshEndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|String
name|backoffErrorThreshold
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          * The option is a<code>int</code> type.          * @group scheduler          */
DECL|method|backoffIdleThreshold ( int backoffIdleThreshold)
specifier|default
name|SshEndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|int
name|backoffIdleThreshold
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          * The option will be converted to a<code>int</code> type.          * @group scheduler          */
DECL|method|backoffIdleThreshold ( String backoffIdleThreshold)
specifier|default
name|SshEndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|String
name|backoffIdleThreshold
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          * The option is a<code>int</code> type.          * @group scheduler          */
DECL|method|backoffMultiplier ( int backoffMultiplier)
specifier|default
name|SshEndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|int
name|backoffMultiplier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          * The option will be converted to a<code>int</code> type.          * @group scheduler          */
DECL|method|backoffMultiplier ( String backoffMultiplier)
specifier|default
name|SshEndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|String
name|backoffMultiplier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          * The option is a<code>long</code> type.          * @group scheduler          */
DECL|method|delay (long delay)
specifier|default
name|SshEndpointConsumerBuilder
name|delay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          * The option will be converted to a<code>long</code> type.          * @group scheduler          */
DECL|method|delay (String delay)
specifier|default
name|SshEndpointConsumerBuilder
name|delay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          * The option is a<code>boolean</code> type.          * @group scheduler          */
DECL|method|greedy (boolean greedy)
specifier|default
name|SshEndpointConsumerBuilder
name|greedy
parameter_list|(
name|boolean
name|greedy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          * The option will be converted to a<code>boolean</code> type.          * @group scheduler          */
DECL|method|greedy (String greedy)
specifier|default
name|SshEndpointConsumerBuilder
name|greedy
parameter_list|(
name|String
name|greedy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          * The option is a<code>long</code> type.          * @group scheduler          */
DECL|method|initialDelay (long initialDelay)
specifier|default
name|SshEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|long
name|initialDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          * The option will be converted to a<code>long</code> type.          * @group scheduler          */
DECL|method|initialDelay (String initialDelay)
specifier|default
name|SshEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|String
name|initialDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          * The option is a<code>org.apache.camel.LoggingLevel</code> type.          * @group scheduler          */
DECL|method|runLoggingLevel ( LoggingLevel runLoggingLevel)
specifier|default
name|SshEndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|LoggingLevel
name|runLoggingLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          * @group scheduler          */
DECL|method|runLoggingLevel ( String runLoggingLevel)
specifier|default
name|SshEndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|String
name|runLoggingLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          * The option is a          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          * @group scheduler          */
DECL|method|scheduledExecutorService ( ScheduledExecutorService scheduledExecutorService)
specifier|default
name|SshEndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|ScheduledExecutorService
name|scheduledExecutorService
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          * The option will be converted to a          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          * @group scheduler          */
DECL|method|scheduledExecutorService ( String scheduledExecutorService)
specifier|default
name|SshEndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|String
name|scheduledExecutorService
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a cron scheduler from either camel-spring or camel-quartz2          * component.          * The option is a          *<code>org.apache.camel.spi.ScheduledPollConsumerScheduler</code>          * type.          * @group scheduler          */
DECL|method|scheduler ( ScheduledPollConsumerScheduler scheduler)
specifier|default
name|SshEndpointConsumerBuilder
name|scheduler
parameter_list|(
name|ScheduledPollConsumerScheduler
name|scheduler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scheduler"
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a cron scheduler from either camel-spring or camel-quartz2          * component.          * The option will be converted to a          *<code>org.apache.camel.spi.ScheduledPollConsumerScheduler</code>          * type.          * @group scheduler          */
DECL|method|scheduler (String scheduler)
specifier|default
name|SshEndpointConsumerBuilder
name|scheduler
parameter_list|(
name|String
name|scheduler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scheduler"
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz2, Spring based scheduler.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          * @group scheduler          */
DECL|method|schedulerProperties ( Map<String, Object> schedulerProperties)
specifier|default
name|SshEndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|schedulerProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz2, Spring based scheduler.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          * @group scheduler          */
DECL|method|schedulerProperties ( String schedulerProperties)
specifier|default
name|SshEndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|String
name|schedulerProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          * The option is a<code>boolean</code> type.          * @group scheduler          */
DECL|method|startScheduler (boolean startScheduler)
specifier|default
name|SshEndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|boolean
name|startScheduler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          * The option will be converted to a<code>boolean</code> type.          * @group scheduler          */
DECL|method|startScheduler (String startScheduler)
specifier|default
name|SshEndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|String
name|startScheduler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          * The option is a<code>java.util.concurrent.TimeUnit</code> type.          * @group scheduler          */
DECL|method|timeUnit (TimeUnit timeUnit)
specifier|default
name|SshEndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          * The option will be converted to a          *<code>java.util.concurrent.TimeUnit</code> type.          * @group scheduler          */
DECL|method|timeUnit (String timeUnit)
specifier|default
name|SshEndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|String
name|timeUnit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          * The option is a<code>boolean</code> type.          * @group scheduler          */
DECL|method|useFixedDelay (boolean useFixedDelay)
specifier|default
name|SshEndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|boolean
name|useFixedDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          * The option will be converted to a<code>boolean</code> type.          * @group scheduler          */
DECL|method|useFixedDelay (String useFixedDelay)
specifier|default
name|SshEndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|String
name|useFixedDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the resource path of the certificate to use for Authentication.          * Will use ResourceHelperKeyPairProvider to resolve file based          * certificate, and depends on keyType setting.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|certResource (String certResource)
specifier|default
name|SshEndpointConsumerBuilder
name|certResource
parameter_list|(
name|String
name|certResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"certResource"
argument_list|,
name|certResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the KeyPairProvider reference to use when connecting using          * Certificates to the remote SSH Server.          * The option is a          *<code>org.apache.sshd.common.keyprovider.KeyPairProvider</code> type.          * @group security          */
DECL|method|keyPairProvider ( Object keyPairProvider)
specifier|default
name|SshEndpointConsumerBuilder
name|keyPairProvider
parameter_list|(
name|Object
name|keyPairProvider
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyPairProvider"
argument_list|,
name|keyPairProvider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the KeyPairProvider reference to use when connecting using          * Certificates to the remote SSH Server.          * The option will be converted to a          *<code>org.apache.sshd.common.keyprovider.KeyPairProvider</code> type.          * @group security          */
DECL|method|keyPairProvider ( String keyPairProvider)
specifier|default
name|SshEndpointConsumerBuilder
name|keyPairProvider
parameter_list|(
name|String
name|keyPairProvider
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyPairProvider"
argument_list|,
name|keyPairProvider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the key type to pass to the KeyPairProvider as part of          * authentication. KeyPairProvider.loadKey(...) will be passed this          * value. Defaults to ssh-rsa.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|keyType (String keyType)
specifier|default
name|SshEndpointConsumerBuilder
name|keyType
parameter_list|(
name|String
name|keyType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyType"
argument_list|,
name|keyType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the password to use in connecting to remote SSH server. Requires          * keyPairProvider to be set to null.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|password (String password)
specifier|default
name|SshEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the username to use in logging into the remote SSH server.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|username (String username)
specifier|default
name|SshEndpointConsumerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the SSH component.      */
DECL|interface|AdvancedSshEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedSshEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SshEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SshEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedSshEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedSshEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedSshEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedSshEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          * The option is a          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          * @group consumer (advanced)          */
DECL|method|pollStrategy ( PollingConsumerPollStrategy pollStrategy)
specifier|default
name|AdvancedSshEndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|PollingConsumerPollStrategy
name|pollStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          * The option will be converted to a          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          * @group consumer (advanced)          */
DECL|method|pollStrategy ( String pollStrategy)
specifier|default
name|AdvancedSshEndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|String
name|pollStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSshEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSshEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the channel type to pass to the Channel as part of command          * execution. Defaults to exec.          * The option is a<code>java.lang.String</code> type.          * @group advanced          */
DECL|method|channelType ( String channelType)
specifier|default
name|AdvancedSshEndpointConsumerBuilder
name|channelType
parameter_list|(
name|String
name|channelType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channelType"
argument_list|,
name|channelType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the shellPrompt to be dropped when response is read after          * command execution.          * The option is a<code>java.lang.String</code> type.          * @group advanced          */
DECL|method|shellPrompt ( String shellPrompt)
specifier|default
name|AdvancedSshEndpointConsumerBuilder
name|shellPrompt
parameter_list|(
name|String
name|shellPrompt
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"shellPrompt"
argument_list|,
name|shellPrompt
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the sleep period in milliseconds to wait reading response from          * shell prompt. Defaults to 100 milliseconds.          * The option is a<code>long</code> type.          * @group advanced          */
DECL|method|sleepForShellPrompt ( long sleepForShellPrompt)
specifier|default
name|AdvancedSshEndpointConsumerBuilder
name|sleepForShellPrompt
parameter_list|(
name|long
name|sleepForShellPrompt
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sleepForShellPrompt"
argument_list|,
name|sleepForShellPrompt
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the sleep period in milliseconds to wait reading response from          * shell prompt. Defaults to 100 milliseconds.          * The option will be converted to a<code>long</code> type.          * @group advanced          */
DECL|method|sleepForShellPrompt ( String sleepForShellPrompt)
specifier|default
name|AdvancedSshEndpointConsumerBuilder
name|sleepForShellPrompt
parameter_list|(
name|String
name|sleepForShellPrompt
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sleepForShellPrompt"
argument_list|,
name|sleepForShellPrompt
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSshEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedSshEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the SSH component.      */
DECL|interface|SshEndpointProducerBuilder
specifier|public
specifier|static
interface|interface
name|SshEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSshEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSshEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets the hostname of the remote SSH server.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|SshEndpointProducerBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the port number for the remote SSH server.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|port (int port)
specifier|default
name|SshEndpointProducerBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the port number for the remote SSH server.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|SshEndpointProducerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether a connection to an unknown host should fail or not.          * This value is only checked when the property knownHosts is set.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|failOnUnknownHost ( boolean failOnUnknownHost)
specifier|default
name|SshEndpointProducerBuilder
name|failOnUnknownHost
parameter_list|(
name|boolean
name|failOnUnknownHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"failOnUnknownHost"
argument_list|,
name|failOnUnknownHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether a connection to an unknown host should fail or not.          * This value is only checked when the property knownHosts is set.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|failOnUnknownHost ( String failOnUnknownHost)
specifier|default
name|SshEndpointProducerBuilder
name|failOnUnknownHost
parameter_list|(
name|String
name|failOnUnknownHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"failOnUnknownHost"
argument_list|,
name|failOnUnknownHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the resource path for a known_hosts file.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|knownHostsResource ( String knownHostsResource)
specifier|default
name|SshEndpointProducerBuilder
name|knownHostsResource
parameter_list|(
name|String
name|knownHostsResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"knownHostsResource"
argument_list|,
name|knownHostsResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the timeout in milliseconds to wait in establishing the remote          * SSH server connection. Defaults to 30000 milliseconds.          * The option is a<code>long</code> type.          * @group common          */
DECL|method|timeout (long timeout)
specifier|default
name|SshEndpointProducerBuilder
name|timeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the timeout in milliseconds to wait in establishing the remote          * SSH server connection. Defaults to 30000 milliseconds.          * The option will be converted to a<code>long</code> type.          * @group common          */
DECL|method|timeout (String timeout)
specifier|default
name|SshEndpointProducerBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|SshEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|SshEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the resource path of the certificate to use for Authentication.          * Will use ResourceHelperKeyPairProvider to resolve file based          * certificate, and depends on keyType setting.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|certResource (String certResource)
specifier|default
name|SshEndpointProducerBuilder
name|certResource
parameter_list|(
name|String
name|certResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"certResource"
argument_list|,
name|certResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the KeyPairProvider reference to use when connecting using          * Certificates to the remote SSH Server.          * The option is a          *<code>org.apache.sshd.common.keyprovider.KeyPairProvider</code> type.          * @group security          */
DECL|method|keyPairProvider ( Object keyPairProvider)
specifier|default
name|SshEndpointProducerBuilder
name|keyPairProvider
parameter_list|(
name|Object
name|keyPairProvider
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyPairProvider"
argument_list|,
name|keyPairProvider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the KeyPairProvider reference to use when connecting using          * Certificates to the remote SSH Server.          * The option will be converted to a          *<code>org.apache.sshd.common.keyprovider.KeyPairProvider</code> type.          * @group security          */
DECL|method|keyPairProvider ( String keyPairProvider)
specifier|default
name|SshEndpointProducerBuilder
name|keyPairProvider
parameter_list|(
name|String
name|keyPairProvider
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyPairProvider"
argument_list|,
name|keyPairProvider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the key type to pass to the KeyPairProvider as part of          * authentication. KeyPairProvider.loadKey(...) will be passed this          * value. Defaults to ssh-rsa.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|keyType (String keyType)
specifier|default
name|SshEndpointProducerBuilder
name|keyType
parameter_list|(
name|String
name|keyType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyType"
argument_list|,
name|keyType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the password to use in connecting to remote SSH server. Requires          * keyPairProvider to be set to null.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|password (String password)
specifier|default
name|SshEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the username to use in logging into the remote SSH server.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|username (String username)
specifier|default
name|SshEndpointProducerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the SSH component.      */
DECL|interface|AdvancedSshEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedSshEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SshEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SshEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSshEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSshEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the channel type to pass to the Channel as part of command          * execution. Defaults to exec.          * The option is a<code>java.lang.String</code> type.          * @group advanced          */
DECL|method|channelType ( String channelType)
specifier|default
name|AdvancedSshEndpointProducerBuilder
name|channelType
parameter_list|(
name|String
name|channelType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channelType"
argument_list|,
name|channelType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the shellPrompt to be dropped when response is read after          * command execution.          * The option is a<code>java.lang.String</code> type.          * @group advanced          */
DECL|method|shellPrompt ( String shellPrompt)
specifier|default
name|AdvancedSshEndpointProducerBuilder
name|shellPrompt
parameter_list|(
name|String
name|shellPrompt
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"shellPrompt"
argument_list|,
name|shellPrompt
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the sleep period in milliseconds to wait reading response from          * shell prompt. Defaults to 100 milliseconds.          * The option is a<code>long</code> type.          * @group advanced          */
DECL|method|sleepForShellPrompt ( long sleepForShellPrompt)
specifier|default
name|AdvancedSshEndpointProducerBuilder
name|sleepForShellPrompt
parameter_list|(
name|long
name|sleepForShellPrompt
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sleepForShellPrompt"
argument_list|,
name|sleepForShellPrompt
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the sleep period in milliseconds to wait reading response from          * shell prompt. Defaults to 100 milliseconds.          * The option will be converted to a<code>long</code> type.          * @group advanced          */
DECL|method|sleepForShellPrompt ( String sleepForShellPrompt)
specifier|default
name|AdvancedSshEndpointProducerBuilder
name|sleepForShellPrompt
parameter_list|(
name|String
name|sleepForShellPrompt
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sleepForShellPrompt"
argument_list|,
name|sleepForShellPrompt
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSshEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedSshEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the SSH component.      */
DECL|interface|SshEndpointBuilder
specifier|public
specifier|static
interface|interface
name|SshEndpointBuilder
extends|extends
name|SshEndpointConsumerBuilder
extends|,
name|SshEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSshEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSshEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets the hostname of the remote SSH server.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|SshEndpointBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the port number for the remote SSH server.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|port (int port)
specifier|default
name|SshEndpointBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the port number for the remote SSH server.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|SshEndpointBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether a connection to an unknown host should fail or not.          * This value is only checked when the property knownHosts is set.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|failOnUnknownHost (boolean failOnUnknownHost)
specifier|default
name|SshEndpointBuilder
name|failOnUnknownHost
parameter_list|(
name|boolean
name|failOnUnknownHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"failOnUnknownHost"
argument_list|,
name|failOnUnknownHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether a connection to an unknown host should fail or not.          * This value is only checked when the property knownHosts is set.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|failOnUnknownHost (String failOnUnknownHost)
specifier|default
name|SshEndpointBuilder
name|failOnUnknownHost
parameter_list|(
name|String
name|failOnUnknownHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"failOnUnknownHost"
argument_list|,
name|failOnUnknownHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the resource path for a known_hosts file.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|knownHostsResource (String knownHostsResource)
specifier|default
name|SshEndpointBuilder
name|knownHostsResource
parameter_list|(
name|String
name|knownHostsResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"knownHostsResource"
argument_list|,
name|knownHostsResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the timeout in milliseconds to wait in establishing the remote          * SSH server connection. Defaults to 30000 milliseconds.          * The option is a<code>long</code> type.          * @group common          */
DECL|method|timeout (long timeout)
specifier|default
name|SshEndpointBuilder
name|timeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the timeout in milliseconds to wait in establishing the remote          * SSH server connection. Defaults to 30000 milliseconds.          * The option will be converted to a<code>long</code> type.          * @group common          */
DECL|method|timeout (String timeout)
specifier|default
name|SshEndpointBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the resource path of the certificate to use for Authentication.          * Will use ResourceHelperKeyPairProvider to resolve file based          * certificate, and depends on keyType setting.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|certResource (String certResource)
specifier|default
name|SshEndpointBuilder
name|certResource
parameter_list|(
name|String
name|certResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"certResource"
argument_list|,
name|certResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the KeyPairProvider reference to use when connecting using          * Certificates to the remote SSH Server.          * The option is a          *<code>org.apache.sshd.common.keyprovider.KeyPairProvider</code> type.          * @group security          */
DECL|method|keyPairProvider (Object keyPairProvider)
specifier|default
name|SshEndpointBuilder
name|keyPairProvider
parameter_list|(
name|Object
name|keyPairProvider
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyPairProvider"
argument_list|,
name|keyPairProvider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the KeyPairProvider reference to use when connecting using          * Certificates to the remote SSH Server.          * The option will be converted to a          *<code>org.apache.sshd.common.keyprovider.KeyPairProvider</code> type.          * @group security          */
DECL|method|keyPairProvider (String keyPairProvider)
specifier|default
name|SshEndpointBuilder
name|keyPairProvider
parameter_list|(
name|String
name|keyPairProvider
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyPairProvider"
argument_list|,
name|keyPairProvider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the key type to pass to the KeyPairProvider as part of          * authentication. KeyPairProvider.loadKey(...) will be passed this          * value. Defaults to ssh-rsa.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|keyType (String keyType)
specifier|default
name|SshEndpointBuilder
name|keyType
parameter_list|(
name|String
name|keyType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyType"
argument_list|,
name|keyType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the password to use in connecting to remote SSH server. Requires          * keyPairProvider to be set to null.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|password (String password)
specifier|default
name|SshEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the username to use in logging into the remote SSH server.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|username (String username)
specifier|default
name|SshEndpointBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the SSH component.      */
DECL|interface|AdvancedSshEndpointBuilder
specifier|public
specifier|static
interface|interface
name|AdvancedSshEndpointBuilder
extends|extends
name|AdvancedSshEndpointConsumerBuilder
extends|,
name|AdvancedSshEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SshEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SshEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSshEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSshEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the channel type to pass to the Channel as part of command          * execution. Defaults to exec.          * The option is a<code>java.lang.String</code> type.          * @group advanced          */
DECL|method|channelType (String channelType)
specifier|default
name|AdvancedSshEndpointBuilder
name|channelType
parameter_list|(
name|String
name|channelType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channelType"
argument_list|,
name|channelType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the shellPrompt to be dropped when response is read after          * command execution.          * The option is a<code>java.lang.String</code> type.          * @group advanced          */
DECL|method|shellPrompt (String shellPrompt)
specifier|default
name|AdvancedSshEndpointBuilder
name|shellPrompt
parameter_list|(
name|String
name|shellPrompt
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"shellPrompt"
argument_list|,
name|shellPrompt
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the sleep period in milliseconds to wait reading response from          * shell prompt. Defaults to 100 milliseconds.          * The option is a<code>long</code> type.          * @group advanced          */
DECL|method|sleepForShellPrompt ( long sleepForShellPrompt)
specifier|default
name|AdvancedSshEndpointBuilder
name|sleepForShellPrompt
parameter_list|(
name|long
name|sleepForShellPrompt
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sleepForShellPrompt"
argument_list|,
name|sleepForShellPrompt
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the sleep period in milliseconds to wait reading response from          * shell prompt. Defaults to 100 milliseconds.          * The option will be converted to a<code>long</code> type.          * @group advanced          */
DECL|method|sleepForShellPrompt ( String sleepForShellPrompt)
specifier|default
name|AdvancedSshEndpointBuilder
name|sleepForShellPrompt
parameter_list|(
name|String
name|sleepForShellPrompt
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sleepForShellPrompt"
argument_list|,
name|sleepForShellPrompt
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedSshEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedSshEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * The ssh component enables access to SSH servers such that you can send an      * SSH command, and process the response. Creates a builder to build      * endpoints for the SSH component.      */
DECL|method|ssh (String path)
specifier|default
name|SshEndpointBuilder
name|ssh
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|SshEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|SshEndpointBuilder
implements|,
name|AdvancedSshEndpointBuilder
block|{
specifier|public
name|SshEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"ssh"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SshEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

