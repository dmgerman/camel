begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The fhir component is used for working with the FHIR protocol (health care).  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|FhirEndpointBuilderFactory
specifier|public
interface|interface
name|FhirEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the FHIR component.      */
DECL|interface|FhirEndpointConsumerBuilder
specifier|public
interface|interface
name|FhirEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedFhirEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Encoding to use for all request.          *           * The option is a:<code>ca.uhn.fhir.rest.api.EncodingEnum</code> type.          *           * Group: common          */
DECL|method|encoding (EncodingEnum encoding)
specifier|default
name|FhirEndpointConsumerBuilder
name|encoding
parameter_list|(
name|EncodingEnum
name|encoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Encoding to use for all request.          *           * The option will be converted to a          *<code>ca.uhn.fhir.rest.api.EncodingEnum</code> type.          *           * Group: common          */
DECL|method|encoding (String encoding)
specifier|default
name|FhirEndpointConsumerBuilder
name|encoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The FHIR Version to use.          *           * The option is a:<code>ca.uhn.fhir.context.FhirVersionEnum</code>          * type.          *           * Group: common          */
DECL|method|fhirVersion ( FhirVersionEnum fhirVersion)
specifier|default
name|FhirEndpointConsumerBuilder
name|fhirVersion
parameter_list|(
name|FhirVersionEnum
name|fhirVersion
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fhirVersion"
argument_list|,
name|fhirVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The FHIR Version to use.          *           * The option will be converted to a          *<code>ca.uhn.fhir.context.FhirVersionEnum</code> type.          *           * Group: common          */
DECL|method|fhirVersion (String fhirVersion)
specifier|default
name|FhirEndpointConsumerBuilder
name|fhirVersion
parameter_list|(
name|String
name|fhirVersion
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fhirVersion"
argument_list|,
name|fhirVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|inBody (String inBody)
specifier|default
name|FhirEndpointConsumerBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will log every requests and responses.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|log (boolean log)
specifier|default
name|FhirEndpointConsumerBuilder
name|log
parameter_list|(
name|boolean
name|log
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"log"
argument_list|,
name|log
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will log every requests and responses.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|log (String log)
specifier|default
name|FhirEndpointConsumerBuilder
name|log
parameter_list|(
name|String
name|log
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"log"
argument_list|,
name|log
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Pretty print all request.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|prettyPrint (boolean prettyPrint)
specifier|default
name|FhirEndpointConsumerBuilder
name|prettyPrint
parameter_list|(
name|boolean
name|prettyPrint
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"prettyPrint"
argument_list|,
name|prettyPrint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Pretty print all request.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|prettyPrint (String prettyPrint)
specifier|default
name|FhirEndpointConsumerBuilder
name|prettyPrint
parameter_list|(
name|String
name|prettyPrint
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"prettyPrint"
argument_list|,
name|prettyPrint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The FHIR server base URL.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|serverUrl (String serverUrl)
specifier|default
name|FhirEndpointConsumerBuilder
name|serverUrl
parameter_list|(
name|String
name|serverUrl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverUrl"
argument_list|,
name|serverUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|FhirEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|FhirEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy host.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyHost (String proxyHost)
specifier|default
name|FhirEndpointConsumerBuilder
name|proxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyHost"
argument_list|,
name|proxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy password.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyPassword (String proxyPassword)
specifier|default
name|FhirEndpointConsumerBuilder
name|proxyPassword
parameter_list|(
name|String
name|proxyPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPassword"
argument_list|,
name|proxyPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy port.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: proxy          */
DECL|method|proxyPort (Integer proxyPort)
specifier|default
name|FhirEndpointConsumerBuilder
name|proxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy port.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: proxy          */
DECL|method|proxyPort (String proxyPort)
specifier|default
name|FhirEndpointConsumerBuilder
name|proxyPort
parameter_list|(
name|String
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy username.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyUser (String proxyUser)
specifier|default
name|FhirEndpointConsumerBuilder
name|proxyUser
parameter_list|(
name|String
name|proxyUser
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyUser"
argument_list|,
name|proxyUser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * OAuth access token.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessToken (String accessToken)
specifier|default
name|FhirEndpointConsumerBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username to use for basic authentication.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|FhirEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username to use for basic authentication.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|FhirEndpointConsumerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the FHIR component.      */
DECL|interface|AdvancedFhirEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedFhirEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|FhirEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|FhirEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the custom client.          *           * The option is a:          *<code>ca.uhn.fhir.rest.client.api.IGenericClient</code> type.          *           * Group: advanced          */
DECL|method|client (Object client)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|client
parameter_list|(
name|Object
name|client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the custom client.          *           * The option will be converted to a          *<code>ca.uhn.fhir.rest.client.api.IGenericClient</code> type.          *           * Group: advanced          */
DECL|method|client (String client)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|client
parameter_list|(
name|String
name|client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the custom client factory.          *           * The option is a:          *<code>ca.uhn.fhir.rest.client.api.IRestfulClientFactory</code> type.          *           * Group: advanced          */
DECL|method|clientFactory ( Object clientFactory)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|clientFactory
parameter_list|(
name|Object
name|clientFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientFactory"
argument_list|,
name|clientFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the custom client factory.          *           * The option will be converted to a          *<code>ca.uhn.fhir.rest.client.api.IRestfulClientFactory</code> type.          *           * Group: advanced          */
DECL|method|clientFactory ( String clientFactory)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|clientFactory
parameter_list|(
name|String
name|clientFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientFactory"
argument_list|,
name|clientFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Compresses outgoing (POST/PUT) contents to the GZIP format.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|compress (boolean compress)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|compress
parameter_list|(
name|boolean
name|compress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"compress"
argument_list|,
name|compress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Compresses outgoing (POST/PUT) contents to the GZIP format.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|compress (String compress)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|compress
parameter_list|(
name|String
name|compress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"compress"
argument_list|,
name|compress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to try and establish the initial TCP connection (in ms).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( Integer connectionTimeout)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|connectionTimeout
parameter_list|(
name|Integer
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to try and establish the initial TCP connection (in ms).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( String connectionTimeout)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When this option is set, model classes will not be scanned for          * children until the child list for the given type is actually          * accessed.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|deferModelScanning ( boolean deferModelScanning)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|deferModelScanning
parameter_list|(
name|boolean
name|deferModelScanning
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deferModelScanning"
argument_list|,
name|deferModelScanning
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When this option is set, model classes will not be scanned for          * children until the child list for the given type is actually          * accessed.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|deferModelScanning ( String deferModelScanning)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|deferModelScanning
parameter_list|(
name|String
name|deferModelScanning
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deferModelScanning"
argument_list|,
name|deferModelScanning
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * FhirContext is an expensive object to create. To avoid creating          * multiple instances, it can be set directly.          *           * The option is a:<code>ca.uhn.fhir.context.FhirContext</code> type.          *           * Group: advanced          */
DECL|method|fhirContext ( Object fhirContext)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|fhirContext
parameter_list|(
name|Object
name|fhirContext
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fhirContext"
argument_list|,
name|fhirContext
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * FhirContext is an expensive object to create. To avoid creating          * multiple instances, it can be set directly.          *           * The option will be converted to a          *<code>ca.uhn.fhir.context.FhirContext</code> type.          *           * Group: advanced          */
DECL|method|fhirContext ( String fhirContext)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|fhirContext
parameter_list|(
name|String
name|fhirContext
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fhirContext"
argument_list|,
name|fhirContext
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Force conformance check.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|forceConformanceCheck ( boolean forceConformanceCheck)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|forceConformanceCheck
parameter_list|(
name|boolean
name|forceConformanceCheck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"forceConformanceCheck"
argument_list|,
name|forceConformanceCheck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Force conformance check.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|forceConformanceCheck ( String forceConformanceCheck)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|forceConformanceCheck
parameter_list|(
name|String
name|forceConformanceCheck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"forceConformanceCheck"
argument_list|,
name|forceConformanceCheck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP session cookie to add to every request.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|sessionCookie ( String sessionCookie)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|sessionCookie
parameter_list|(
name|String
name|sessionCookie
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionCookie"
argument_list|,
name|sessionCookie
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to block for individual read/write operations (in ms).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|socketTimeout ( Integer socketTimeout)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|socketTimeout
parameter_list|(
name|Integer
name|socketTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to block for individual read/write operations (in ms).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|socketTimeout ( String socketTimeout)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|socketTimeout
parameter_list|(
name|String
name|socketTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Request that the server modify the response using the _summary param.          *           * The option is a:<code>ca.uhn.fhir.rest.api.SummaryEnum</code> type.          *           * Group: advanced          */
DECL|method|summary (SummaryEnum summary)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|summary
parameter_list|(
name|SummaryEnum
name|summary
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"summary"
argument_list|,
name|summary
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Request that the server modify the response using the _summary param.          *           * The option will be converted to a          *<code>ca.uhn.fhir.rest.api.SummaryEnum</code> type.          *           * Group: advanced          */
DECL|method|summary (String summary)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|summary
parameter_list|(
name|String
name|summary
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"summary"
argument_list|,
name|summary
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When should Camel validate the FHIR Server's conformance statement.          *           * The option is a:          *<code>ca.uhn.fhir.rest.client.api.ServerValidationModeEnum</code>          * type.          *           * Group: advanced          */
DECL|method|validationMode ( ServerValidationModeEnum validationMode)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|validationMode
parameter_list|(
name|ServerValidationModeEnum
name|validationMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"validationMode"
argument_list|,
name|validationMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When should Camel validate the FHIR Server's conformance statement.          *           * The option will be converted to a          *<code>ca.uhn.fhir.rest.client.api.ServerValidationModeEnum</code>          * type.          *           * Group: advanced          */
DECL|method|validationMode ( String validationMode)
specifier|default
name|AdvancedFhirEndpointConsumerBuilder
name|validationMode
parameter_list|(
name|String
name|validationMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"validationMode"
argument_list|,
name|validationMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the FHIR component.      */
DECL|interface|FhirEndpointProducerBuilder
specifier|public
interface|interface
name|FhirEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedFhirEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Encoding to use for all request.          *           * The option is a:<code>ca.uhn.fhir.rest.api.EncodingEnum</code> type.          *           * Group: common          */
DECL|method|encoding (EncodingEnum encoding)
specifier|default
name|FhirEndpointProducerBuilder
name|encoding
parameter_list|(
name|EncodingEnum
name|encoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Encoding to use for all request.          *           * The option will be converted to a          *<code>ca.uhn.fhir.rest.api.EncodingEnum</code> type.          *           * Group: common          */
DECL|method|encoding (String encoding)
specifier|default
name|FhirEndpointProducerBuilder
name|encoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The FHIR Version to use.          *           * The option is a:<code>ca.uhn.fhir.context.FhirVersionEnum</code>          * type.          *           * Group: common          */
DECL|method|fhirVersion ( FhirVersionEnum fhirVersion)
specifier|default
name|FhirEndpointProducerBuilder
name|fhirVersion
parameter_list|(
name|FhirVersionEnum
name|fhirVersion
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fhirVersion"
argument_list|,
name|fhirVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The FHIR Version to use.          *           * The option will be converted to a          *<code>ca.uhn.fhir.context.FhirVersionEnum</code> type.          *           * Group: common          */
DECL|method|fhirVersion (String fhirVersion)
specifier|default
name|FhirEndpointProducerBuilder
name|fhirVersion
parameter_list|(
name|String
name|fhirVersion
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fhirVersion"
argument_list|,
name|fhirVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|inBody (String inBody)
specifier|default
name|FhirEndpointProducerBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will log every requests and responses.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|log (boolean log)
specifier|default
name|FhirEndpointProducerBuilder
name|log
parameter_list|(
name|boolean
name|log
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"log"
argument_list|,
name|log
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will log every requests and responses.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|log (String log)
specifier|default
name|FhirEndpointProducerBuilder
name|log
parameter_list|(
name|String
name|log
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"log"
argument_list|,
name|log
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Pretty print all request.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|prettyPrint (boolean prettyPrint)
specifier|default
name|FhirEndpointProducerBuilder
name|prettyPrint
parameter_list|(
name|boolean
name|prettyPrint
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"prettyPrint"
argument_list|,
name|prettyPrint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Pretty print all request.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|prettyPrint (String prettyPrint)
specifier|default
name|FhirEndpointProducerBuilder
name|prettyPrint
parameter_list|(
name|String
name|prettyPrint
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"prettyPrint"
argument_list|,
name|prettyPrint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The FHIR server base URL.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|serverUrl (String serverUrl)
specifier|default
name|FhirEndpointProducerBuilder
name|serverUrl
parameter_list|(
name|String
name|serverUrl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverUrl"
argument_list|,
name|serverUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|FhirEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|FhirEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy host.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyHost (String proxyHost)
specifier|default
name|FhirEndpointProducerBuilder
name|proxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyHost"
argument_list|,
name|proxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy password.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyPassword (String proxyPassword)
specifier|default
name|FhirEndpointProducerBuilder
name|proxyPassword
parameter_list|(
name|String
name|proxyPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPassword"
argument_list|,
name|proxyPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy port.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: proxy          */
DECL|method|proxyPort (Integer proxyPort)
specifier|default
name|FhirEndpointProducerBuilder
name|proxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy port.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: proxy          */
DECL|method|proxyPort (String proxyPort)
specifier|default
name|FhirEndpointProducerBuilder
name|proxyPort
parameter_list|(
name|String
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy username.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyUser (String proxyUser)
specifier|default
name|FhirEndpointProducerBuilder
name|proxyUser
parameter_list|(
name|String
name|proxyUser
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyUser"
argument_list|,
name|proxyUser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * OAuth access token.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessToken (String accessToken)
specifier|default
name|FhirEndpointProducerBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username to use for basic authentication.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|FhirEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username to use for basic authentication.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|FhirEndpointProducerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the FHIR component.      */
DECL|interface|AdvancedFhirEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedFhirEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|FhirEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|FhirEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the custom client.          *           * The option is a:          *<code>ca.uhn.fhir.rest.client.api.IGenericClient</code> type.          *           * Group: advanced          */
DECL|method|client (Object client)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|client
parameter_list|(
name|Object
name|client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the custom client.          *           * The option will be converted to a          *<code>ca.uhn.fhir.rest.client.api.IGenericClient</code> type.          *           * Group: advanced          */
DECL|method|client (String client)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|client
parameter_list|(
name|String
name|client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the custom client factory.          *           * The option is a:          *<code>ca.uhn.fhir.rest.client.api.IRestfulClientFactory</code> type.          *           * Group: advanced          */
DECL|method|clientFactory ( Object clientFactory)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|clientFactory
parameter_list|(
name|Object
name|clientFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientFactory"
argument_list|,
name|clientFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the custom client factory.          *           * The option will be converted to a          *<code>ca.uhn.fhir.rest.client.api.IRestfulClientFactory</code> type.          *           * Group: advanced          */
DECL|method|clientFactory ( String clientFactory)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|clientFactory
parameter_list|(
name|String
name|clientFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientFactory"
argument_list|,
name|clientFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Compresses outgoing (POST/PUT) contents to the GZIP format.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|compress (boolean compress)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|compress
parameter_list|(
name|boolean
name|compress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"compress"
argument_list|,
name|compress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Compresses outgoing (POST/PUT) contents to the GZIP format.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|compress (String compress)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|compress
parameter_list|(
name|String
name|compress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"compress"
argument_list|,
name|compress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to try and establish the initial TCP connection (in ms).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( Integer connectionTimeout)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|connectionTimeout
parameter_list|(
name|Integer
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to try and establish the initial TCP connection (in ms).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( String connectionTimeout)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When this option is set, model classes will not be scanned for          * children until the child list for the given type is actually          * accessed.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|deferModelScanning ( boolean deferModelScanning)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|deferModelScanning
parameter_list|(
name|boolean
name|deferModelScanning
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deferModelScanning"
argument_list|,
name|deferModelScanning
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When this option is set, model classes will not be scanned for          * children until the child list for the given type is actually          * accessed.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|deferModelScanning ( String deferModelScanning)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|deferModelScanning
parameter_list|(
name|String
name|deferModelScanning
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deferModelScanning"
argument_list|,
name|deferModelScanning
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * FhirContext is an expensive object to create. To avoid creating          * multiple instances, it can be set directly.          *           * The option is a:<code>ca.uhn.fhir.context.FhirContext</code> type.          *           * Group: advanced          */
DECL|method|fhirContext ( Object fhirContext)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|fhirContext
parameter_list|(
name|Object
name|fhirContext
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fhirContext"
argument_list|,
name|fhirContext
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * FhirContext is an expensive object to create. To avoid creating          * multiple instances, it can be set directly.          *           * The option will be converted to a          *<code>ca.uhn.fhir.context.FhirContext</code> type.          *           * Group: advanced          */
DECL|method|fhirContext ( String fhirContext)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|fhirContext
parameter_list|(
name|String
name|fhirContext
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fhirContext"
argument_list|,
name|fhirContext
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Force conformance check.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|forceConformanceCheck ( boolean forceConformanceCheck)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|forceConformanceCheck
parameter_list|(
name|boolean
name|forceConformanceCheck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"forceConformanceCheck"
argument_list|,
name|forceConformanceCheck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Force conformance check.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|forceConformanceCheck ( String forceConformanceCheck)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|forceConformanceCheck
parameter_list|(
name|String
name|forceConformanceCheck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"forceConformanceCheck"
argument_list|,
name|forceConformanceCheck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP session cookie to add to every request.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|sessionCookie ( String sessionCookie)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|sessionCookie
parameter_list|(
name|String
name|sessionCookie
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionCookie"
argument_list|,
name|sessionCookie
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to block for individual read/write operations (in ms).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|socketTimeout ( Integer socketTimeout)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|socketTimeout
parameter_list|(
name|Integer
name|socketTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to block for individual read/write operations (in ms).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|socketTimeout ( String socketTimeout)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|socketTimeout
parameter_list|(
name|String
name|socketTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Request that the server modify the response using the _summary param.          *           * The option is a:<code>ca.uhn.fhir.rest.api.SummaryEnum</code> type.          *           * Group: advanced          */
DECL|method|summary (SummaryEnum summary)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|summary
parameter_list|(
name|SummaryEnum
name|summary
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"summary"
argument_list|,
name|summary
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Request that the server modify the response using the _summary param.          *           * The option will be converted to a          *<code>ca.uhn.fhir.rest.api.SummaryEnum</code> type.          *           * Group: advanced          */
DECL|method|summary (String summary)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|summary
parameter_list|(
name|String
name|summary
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"summary"
argument_list|,
name|summary
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When should Camel validate the FHIR Server's conformance statement.          *           * The option is a:          *<code>ca.uhn.fhir.rest.client.api.ServerValidationModeEnum</code>          * type.          *           * Group: advanced          */
DECL|method|validationMode ( ServerValidationModeEnum validationMode)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|validationMode
parameter_list|(
name|ServerValidationModeEnum
name|validationMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"validationMode"
argument_list|,
name|validationMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When should Camel validate the FHIR Server's conformance statement.          *           * The option will be converted to a          *<code>ca.uhn.fhir.rest.client.api.ServerValidationModeEnum</code>          * type.          *           * Group: advanced          */
DECL|method|validationMode ( String validationMode)
specifier|default
name|AdvancedFhirEndpointProducerBuilder
name|validationMode
parameter_list|(
name|String
name|validationMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"validationMode"
argument_list|,
name|validationMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the FHIR component.      */
DECL|interface|FhirEndpointBuilder
specifier|public
interface|interface
name|FhirEndpointBuilder
extends|extends
name|FhirEndpointConsumerBuilder
extends|,
name|FhirEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedFhirEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedFhirEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Encoding to use for all request.          *           * The option is a:<code>ca.uhn.fhir.rest.api.EncodingEnum</code> type.          *           * Group: common          */
DECL|method|encoding (EncodingEnum encoding)
specifier|default
name|FhirEndpointBuilder
name|encoding
parameter_list|(
name|EncodingEnum
name|encoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Encoding to use for all request.          *           * The option will be converted to a          *<code>ca.uhn.fhir.rest.api.EncodingEnum</code> type.          *           * Group: common          */
DECL|method|encoding (String encoding)
specifier|default
name|FhirEndpointBuilder
name|encoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The FHIR Version to use.          *           * The option is a:<code>ca.uhn.fhir.context.FhirVersionEnum</code>          * type.          *           * Group: common          */
DECL|method|fhirVersion (FhirVersionEnum fhirVersion)
specifier|default
name|FhirEndpointBuilder
name|fhirVersion
parameter_list|(
name|FhirVersionEnum
name|fhirVersion
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fhirVersion"
argument_list|,
name|fhirVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The FHIR Version to use.          *           * The option will be converted to a          *<code>ca.uhn.fhir.context.FhirVersionEnum</code> type.          *           * Group: common          */
DECL|method|fhirVersion (String fhirVersion)
specifier|default
name|FhirEndpointBuilder
name|fhirVersion
parameter_list|(
name|String
name|fhirVersion
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fhirVersion"
argument_list|,
name|fhirVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|inBody (String inBody)
specifier|default
name|FhirEndpointBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will log every requests and responses.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|log (boolean log)
specifier|default
name|FhirEndpointBuilder
name|log
parameter_list|(
name|boolean
name|log
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"log"
argument_list|,
name|log
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will log every requests and responses.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|log (String log)
specifier|default
name|FhirEndpointBuilder
name|log
parameter_list|(
name|String
name|log
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"log"
argument_list|,
name|log
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Pretty print all request.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|prettyPrint (boolean prettyPrint)
specifier|default
name|FhirEndpointBuilder
name|prettyPrint
parameter_list|(
name|boolean
name|prettyPrint
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"prettyPrint"
argument_list|,
name|prettyPrint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Pretty print all request.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|prettyPrint (String prettyPrint)
specifier|default
name|FhirEndpointBuilder
name|prettyPrint
parameter_list|(
name|String
name|prettyPrint
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"prettyPrint"
argument_list|,
name|prettyPrint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The FHIR server base URL.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|serverUrl (String serverUrl)
specifier|default
name|FhirEndpointBuilder
name|serverUrl
parameter_list|(
name|String
name|serverUrl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverUrl"
argument_list|,
name|serverUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy host.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyHost (String proxyHost)
specifier|default
name|FhirEndpointBuilder
name|proxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyHost"
argument_list|,
name|proxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy password.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyPassword (String proxyPassword)
specifier|default
name|FhirEndpointBuilder
name|proxyPassword
parameter_list|(
name|String
name|proxyPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPassword"
argument_list|,
name|proxyPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy port.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: proxy          */
DECL|method|proxyPort (Integer proxyPort)
specifier|default
name|FhirEndpointBuilder
name|proxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy port.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: proxy          */
DECL|method|proxyPort (String proxyPort)
specifier|default
name|FhirEndpointBuilder
name|proxyPort
parameter_list|(
name|String
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy username.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyUser (String proxyUser)
specifier|default
name|FhirEndpointBuilder
name|proxyUser
parameter_list|(
name|String
name|proxyUser
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyUser"
argument_list|,
name|proxyUser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * OAuth access token.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessToken (String accessToken)
specifier|default
name|FhirEndpointBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username to use for basic authentication.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|FhirEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username to use for basic authentication.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|FhirEndpointBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the FHIR component.      */
DECL|interface|AdvancedFhirEndpointBuilder
specifier|public
interface|interface
name|AdvancedFhirEndpointBuilder
extends|extends
name|AdvancedFhirEndpointConsumerBuilder
extends|,
name|AdvancedFhirEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|FhirEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|FhirEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedFhirEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedFhirEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the custom client.          *           * The option is a:          *<code>ca.uhn.fhir.rest.client.api.IGenericClient</code> type.          *           * Group: advanced          */
DECL|method|client (Object client)
specifier|default
name|AdvancedFhirEndpointBuilder
name|client
parameter_list|(
name|Object
name|client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the custom client.          *           * The option will be converted to a          *<code>ca.uhn.fhir.rest.client.api.IGenericClient</code> type.          *           * Group: advanced          */
DECL|method|client (String client)
specifier|default
name|AdvancedFhirEndpointBuilder
name|client
parameter_list|(
name|String
name|client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the custom client factory.          *           * The option is a:          *<code>ca.uhn.fhir.rest.client.api.IRestfulClientFactory</code> type.          *           * Group: advanced          */
DECL|method|clientFactory (Object clientFactory)
specifier|default
name|AdvancedFhirEndpointBuilder
name|clientFactory
parameter_list|(
name|Object
name|clientFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientFactory"
argument_list|,
name|clientFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the custom client factory.          *           * The option will be converted to a          *<code>ca.uhn.fhir.rest.client.api.IRestfulClientFactory</code> type.          *           * Group: advanced          */
DECL|method|clientFactory (String clientFactory)
specifier|default
name|AdvancedFhirEndpointBuilder
name|clientFactory
parameter_list|(
name|String
name|clientFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientFactory"
argument_list|,
name|clientFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Compresses outgoing (POST/PUT) contents to the GZIP format.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|compress (boolean compress)
specifier|default
name|AdvancedFhirEndpointBuilder
name|compress
parameter_list|(
name|boolean
name|compress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"compress"
argument_list|,
name|compress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Compresses outgoing (POST/PUT) contents to the GZIP format.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|compress (String compress)
specifier|default
name|AdvancedFhirEndpointBuilder
name|compress
parameter_list|(
name|String
name|compress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"compress"
argument_list|,
name|compress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to try and establish the initial TCP connection (in ms).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( Integer connectionTimeout)
specifier|default
name|AdvancedFhirEndpointBuilder
name|connectionTimeout
parameter_list|(
name|Integer
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to try and establish the initial TCP connection (in ms).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( String connectionTimeout)
specifier|default
name|AdvancedFhirEndpointBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When this option is set, model classes will not be scanned for          * children until the child list for the given type is actually          * accessed.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|deferModelScanning ( boolean deferModelScanning)
specifier|default
name|AdvancedFhirEndpointBuilder
name|deferModelScanning
parameter_list|(
name|boolean
name|deferModelScanning
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deferModelScanning"
argument_list|,
name|deferModelScanning
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When this option is set, model classes will not be scanned for          * children until the child list for the given type is actually          * accessed.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|deferModelScanning ( String deferModelScanning)
specifier|default
name|AdvancedFhirEndpointBuilder
name|deferModelScanning
parameter_list|(
name|String
name|deferModelScanning
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deferModelScanning"
argument_list|,
name|deferModelScanning
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * FhirContext is an expensive object to create. To avoid creating          * multiple instances, it can be set directly.          *           * The option is a:<code>ca.uhn.fhir.context.FhirContext</code> type.          *           * Group: advanced          */
DECL|method|fhirContext (Object fhirContext)
specifier|default
name|AdvancedFhirEndpointBuilder
name|fhirContext
parameter_list|(
name|Object
name|fhirContext
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fhirContext"
argument_list|,
name|fhirContext
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * FhirContext is an expensive object to create. To avoid creating          * multiple instances, it can be set directly.          *           * The option will be converted to a          *<code>ca.uhn.fhir.context.FhirContext</code> type.          *           * Group: advanced          */
DECL|method|fhirContext (String fhirContext)
specifier|default
name|AdvancedFhirEndpointBuilder
name|fhirContext
parameter_list|(
name|String
name|fhirContext
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fhirContext"
argument_list|,
name|fhirContext
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Force conformance check.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|forceConformanceCheck ( boolean forceConformanceCheck)
specifier|default
name|AdvancedFhirEndpointBuilder
name|forceConformanceCheck
parameter_list|(
name|boolean
name|forceConformanceCheck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"forceConformanceCheck"
argument_list|,
name|forceConformanceCheck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Force conformance check.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|forceConformanceCheck ( String forceConformanceCheck)
specifier|default
name|AdvancedFhirEndpointBuilder
name|forceConformanceCheck
parameter_list|(
name|String
name|forceConformanceCheck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"forceConformanceCheck"
argument_list|,
name|forceConformanceCheck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP session cookie to add to every request.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|sessionCookie (String sessionCookie)
specifier|default
name|AdvancedFhirEndpointBuilder
name|sessionCookie
parameter_list|(
name|String
name|sessionCookie
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionCookie"
argument_list|,
name|sessionCookie
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to block for individual read/write operations (in ms).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|socketTimeout (Integer socketTimeout)
specifier|default
name|AdvancedFhirEndpointBuilder
name|socketTimeout
parameter_list|(
name|Integer
name|socketTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to block for individual read/write operations (in ms).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|socketTimeout (String socketTimeout)
specifier|default
name|AdvancedFhirEndpointBuilder
name|socketTimeout
parameter_list|(
name|String
name|socketTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Request that the server modify the response using the _summary param.          *           * The option is a:<code>ca.uhn.fhir.rest.api.SummaryEnum</code> type.          *           * Group: advanced          */
DECL|method|summary (SummaryEnum summary)
specifier|default
name|AdvancedFhirEndpointBuilder
name|summary
parameter_list|(
name|SummaryEnum
name|summary
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"summary"
argument_list|,
name|summary
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Request that the server modify the response using the _summary param.          *           * The option will be converted to a          *<code>ca.uhn.fhir.rest.api.SummaryEnum</code> type.          *           * Group: advanced          */
DECL|method|summary (String summary)
specifier|default
name|AdvancedFhirEndpointBuilder
name|summary
parameter_list|(
name|String
name|summary
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"summary"
argument_list|,
name|summary
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedFhirEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedFhirEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When should Camel validate the FHIR Server's conformance statement.          *           * The option is a:          *<code>ca.uhn.fhir.rest.client.api.ServerValidationModeEnum</code>          * type.          *           * Group: advanced          */
DECL|method|validationMode ( ServerValidationModeEnum validationMode)
specifier|default
name|AdvancedFhirEndpointBuilder
name|validationMode
parameter_list|(
name|ServerValidationModeEnum
name|validationMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"validationMode"
argument_list|,
name|validationMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When should Camel validate the FHIR Server's conformance statement.          *           * The option will be converted to a          *<code>ca.uhn.fhir.rest.client.api.ServerValidationModeEnum</code>          * type.          *           * Group: advanced          */
DECL|method|validationMode (String validationMode)
specifier|default
name|AdvancedFhirEndpointBuilder
name|validationMode
parameter_list|(
name|String
name|validationMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"validationMode"
argument_list|,
name|validationMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for<code>ca.uhn.fhir.rest.api.EncodingEnum</code> enum.      */
DECL|enum|EncodingEnum
enum|enum
name|EncodingEnum
block|{
DECL|enumConstant|JSON
name|JSON
block|,
DECL|enumConstant|XML
name|XML
block|;     }
comment|/**      * Proxy enum for<code>ca.uhn.fhir.context.FhirVersionEnum</code> enum.      */
DECL|enum|FhirVersionEnum
enum|enum
name|FhirVersionEnum
block|{
DECL|enumConstant|DSTU2
name|DSTU2
block|,
DECL|enumConstant|DSTU2_HL7ORG
name|DSTU2_HL7ORG
block|,
DECL|enumConstant|DSTU2_1
name|DSTU2_1
block|,
DECL|enumConstant|DSTU3
name|DSTU3
block|,
DECL|enumConstant|R4
name|R4
block|;     }
comment|/**      * Proxy enum for<code>ca.uhn.fhir.rest.api.SummaryEnum</code> enum.      */
DECL|enum|SummaryEnum
enum|enum
name|SummaryEnum
block|{
DECL|enumConstant|COUNT
name|COUNT
block|,
DECL|enumConstant|TEXT
name|TEXT
block|,
DECL|enumConstant|DATA
name|DATA
block|,
DECL|enumConstant|TRUE
name|TRUE
block|,
DECL|enumConstant|FALSE
name|FALSE
block|;     }
comment|/**      * Proxy enum for      *<code>ca.uhn.fhir.rest.client.api.ServerValidationModeEnum</code> enum.      */
DECL|enum|ServerValidationModeEnum
enum|enum
name|ServerValidationModeEnum
block|{
DECL|enumConstant|NEVER
name|NEVER
block|,
DECL|enumConstant|ONCE
name|ONCE
block|;     }
comment|/**      * FHIR (camel-fhir)      * The fhir component is used for working with the FHIR protocol (health      * care).      *       * Category: hl7,api      * Available as of version: 2.23      * Maven coordinates: org.apache.camel:camel-fhir      *       * Syntax:<code>fhir:apiName/methodName</code>      *       * Path parameter: apiName (required)      * What kind of operation to perform      * The value can be one of:      * capabilities,create,delete,history,load-page,meta,patch,read,search,transaction,update,validate      *       * Path parameter: methodName (required)      * What sub operation to use for the selected operation      */
DECL|method|fhir (String path)
specifier|default
name|FhirEndpointBuilder
name|fhir
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|FhirEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|FhirEndpointBuilder
implements|,
name|AdvancedFhirEndpointBuilder
block|{
specifier|public
name|FhirEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"fhir"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|FhirEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

