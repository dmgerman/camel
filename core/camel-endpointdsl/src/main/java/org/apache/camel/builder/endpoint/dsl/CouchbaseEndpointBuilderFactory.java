begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PollingConsumerPollStrategy
import|;
end_import

begin_comment
comment|/**  * Represents a Couchbase endpoint that can query Views with a Poll strategy  * and/or produce various type of operations.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|CouchbaseEndpointBuilderFactory
specifier|public
interface|interface
name|CouchbaseEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Couchbase component.      */
DECL|interface|CouchbaseEndpointConsumerBuilder
specifier|public
interface|interface
name|CouchbaseEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCouchbaseEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The bucket to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|bucket (String bucket)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|bucket
parameter_list|(
name|String
name|bucket
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bucket"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The key to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|key (String key)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|key
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"key"
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the consumer Processed strategy to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|consumerProcessedStrategy ( String consumerProcessedStrategy)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|consumerProcessedStrategy
parameter_list|(
name|String
name|consumerProcessedStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"consumerProcessedStrategy"
argument_list|,
name|consumerProcessedStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if this operation is descending or not.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|descending (boolean descending)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|descending
parameter_list|(
name|boolean
name|descending
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"descending"
argument_list|,
name|descending
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if this operation is descending or not.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|descending (String descending)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|descending
parameter_list|(
name|String
name|descending
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"descending"
argument_list|,
name|descending
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The design document name to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|designDocumentName ( String designDocumentName)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|designDocumentName
parameter_list|(
name|String
name|designDocumentName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"designDocumentName"
argument_list|,
name|designDocumentName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The output limit to use.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|limit (int limit)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|limit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"limit"
argument_list|,
name|limit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The output limit to use.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|limit (String limit)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|limit
parameter_list|(
name|String
name|limit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"limit"
argument_list|,
name|limit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define a range for the end key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|rangeEndKey (String rangeEndKey)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|rangeEndKey
parameter_list|(
name|String
name|rangeEndKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"rangeEndKey"
argument_list|,
name|rangeEndKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define a range for the start key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|rangeStartKey ( String rangeStartKey)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|rangeStartKey
parameter_list|(
name|String
name|rangeStartKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"rangeStartKey"
argument_list|,
name|rangeStartKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( boolean sendEmptyMessageWhenIdle)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|boolean
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( String sendEmptyMessageWhenIdle)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|String
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the skip to use.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|skip (int skip)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|skip
parameter_list|(
name|int
name|skip
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"skip"
argument_list|,
name|skip
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the skip to use.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|skip (String skip)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|skip
parameter_list|(
name|String
name|skip
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"skip"
argument_list|,
name|skip
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The view name to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|viewName (String viewName)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|viewName
parameter_list|(
name|String
name|viewName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"viewName"
argument_list|,
name|viewName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( int backoffErrorThreshold)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|int
name|backoffErrorThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( String backoffErrorThreshold)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|String
name|backoffErrorThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( int backoffIdleThreshold)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|int
name|backoffIdleThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( String backoffIdleThreshold)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|String
name|backoffIdleThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( int backoffMultiplier)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|int
name|backoffMultiplier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( String backoffMultiplier)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|String
name|backoffMultiplier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (long delay)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|delay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (String delay)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|delay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy (boolean greedy)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|greedy
parameter_list|(
name|boolean
name|greedy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy (String greedy)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|greedy
parameter_list|(
name|String
name|greedy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay (long initialDelay)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|long
name|initialDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay ( String initialDelay)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|String
name|initialDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option is a:<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( LoggingLevel runLoggingLevel)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|LoggingLevel
name|runLoggingLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( String runLoggingLevel)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|String
name|runLoggingLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option is a:          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( ScheduledExecutorService scheduledExecutorService)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|ScheduledExecutorService
name|scheduledExecutorService
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option will be converted to a          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( String scheduledExecutorService)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|String
name|scheduledExecutorService
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a cron scheduler from either camel-spring or camel-quartz          * component.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: scheduler          */
DECL|method|scheduler (String scheduler)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|scheduler
parameter_list|(
name|String
name|scheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduler"
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz, Spring based scheduler.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( Map<String, Object> schedulerProperties)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|schedulerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz, Spring based scheduler.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( String schedulerProperties)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|String
name|schedulerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler ( boolean startScheduler)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|boolean
name|startScheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler ( String startScheduler)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|String
name|startScheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option is a:<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit (TimeUnit timeUnit)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option will be converted to a          *<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit (String timeUnit)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|String
name|timeUnit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay ( boolean useFixedDelay)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|boolean
name|useFixedDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay ( String useFixedDelay)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|String
name|useFixedDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The password to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The username to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Couchbase component.      */
DECL|interface|AdvancedCouchbaseEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedCouchbaseEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CouchbaseEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CouchbaseEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option is a:          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( PollingConsumerPollStrategy pollStrategy)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|PollingConsumerPollStrategy
name|pollStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option will be converted to a          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( String pollStrategy)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|String
name|pollStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The additional hosts.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|additionalHosts ( String additionalHosts)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|additionalHosts
parameter_list|(
name|String
name|additionalHosts
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"additionalHosts"
argument_list|,
name|additionalHosts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the max delay during a reconnection.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|maxReconnectDelay ( long maxReconnectDelay)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|maxReconnectDelay
parameter_list|(
name|long
name|maxReconnectDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxReconnectDelay"
argument_list|,
name|maxReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the max delay during a reconnection.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|maxReconnectDelay ( String maxReconnectDelay)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|maxReconnectDelay
parameter_list|(
name|String
name|maxReconnectDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxReconnectDelay"
argument_list|,
name|maxReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the observation polling interval.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|obsPollInterval ( long obsPollInterval)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|obsPollInterval
parameter_list|(
name|long
name|obsPollInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"obsPollInterval"
argument_list|,
name|obsPollInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the observation polling interval.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|obsPollInterval ( String obsPollInterval)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|obsPollInterval
parameter_list|(
name|String
name|obsPollInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"obsPollInterval"
argument_list|,
name|obsPollInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the observation timeout.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|obsTimeout ( long obsTimeout)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|obsTimeout
parameter_list|(
name|long
name|obsTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"obsTimeout"
argument_list|,
name|obsTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the observation timeout.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|obsTimeout ( String obsTimeout)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|obsTimeout
parameter_list|(
name|String
name|obsTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"obsTimeout"
argument_list|,
name|obsTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the max time an operation can be in queue blocked.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|opQueueMaxBlockTime ( long opQueueMaxBlockTime)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|opQueueMaxBlockTime
parameter_list|(
name|long
name|opQueueMaxBlockTime
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"opQueueMaxBlockTime"
argument_list|,
name|opQueueMaxBlockTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the max time an operation can be in queue blocked.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|opQueueMaxBlockTime ( String opQueueMaxBlockTime)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|opQueueMaxBlockTime
parameter_list|(
name|String
name|opQueueMaxBlockTime
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"opQueueMaxBlockTime"
argument_list|,
name|opQueueMaxBlockTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the operation timeout.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|opTimeOut ( long opTimeOut)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|opTimeOut
parameter_list|(
name|long
name|opTimeOut
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"opTimeOut"
argument_list|,
name|opTimeOut
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the operation timeout.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|opTimeOut ( String opTimeOut)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|opTimeOut
parameter_list|(
name|String
name|opTimeOut
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"opTimeOut"
argument_list|,
name|opTimeOut
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the buffer size.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|readBufferSize ( int readBufferSize)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|readBufferSize
parameter_list|(
name|int
name|readBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"readBufferSize"
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the buffer size.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|readBufferSize ( String readBufferSize)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|readBufferSize
parameter_list|(
name|String
name|readBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"readBufferSize"
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if we want to use optimization or not where possible.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|shouldOptimize ( boolean shouldOptimize)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|shouldOptimize
parameter_list|(
name|boolean
name|shouldOptimize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"shouldOptimize"
argument_list|,
name|shouldOptimize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if we want to use optimization or not where possible.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|shouldOptimize ( String shouldOptimize)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|shouldOptimize
parameter_list|(
name|String
name|shouldOptimize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"shouldOptimize"
argument_list|,
name|shouldOptimize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the threshold for throwing a timeout Exception.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|timeoutExceptionThreshold ( int timeoutExceptionThreshold)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|timeoutExceptionThreshold
parameter_list|(
name|int
name|timeoutExceptionThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeoutExceptionThreshold"
argument_list|,
name|timeoutExceptionThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the threshold for throwing a timeout Exception.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|timeoutExceptionThreshold ( String timeoutExceptionThreshold)
specifier|default
name|AdvancedCouchbaseEndpointConsumerBuilder
name|timeoutExceptionThreshold
parameter_list|(
name|String
name|timeoutExceptionThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeoutExceptionThreshold"
argument_list|,
name|timeoutExceptionThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Couchbase component.      */
DECL|interface|CouchbaseEndpointProducerBuilder
specifier|public
interface|interface
name|CouchbaseEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCouchbaseEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The bucket to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|bucket (String bucket)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|bucket
parameter_list|(
name|String
name|bucket
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bucket"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The key to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|key (String key)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|key
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"key"
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if we want an autostart Id when we are doing an insert          * operation.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|autoStartIdForInserts ( boolean autoStartIdForInserts)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|autoStartIdForInserts
parameter_list|(
name|boolean
name|autoStartIdForInserts
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoStartIdForInserts"
argument_list|,
name|autoStartIdForInserts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if we want an autostart Id when we are doing an insert          * operation.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|autoStartIdForInserts ( String autoStartIdForInserts)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|autoStartIdForInserts
parameter_list|(
name|String
name|autoStartIdForInserts
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoStartIdForInserts"
argument_list|,
name|autoStartIdForInserts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The operation to do.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|operation (String operation)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Where to persist the data.          *           * The option is a:<code>int</code> type.          *           * Group: producer          */
DECL|method|persistTo (int persistTo)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|persistTo
parameter_list|(
name|int
name|persistTo
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"persistTo"
argument_list|,
name|persistTo
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Where to persist the data.          *           * The option will be converted to a<code>int</code> type.          *           * Group: producer          */
DECL|method|persistTo (String persistTo)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|persistTo
parameter_list|(
name|String
name|persistTo
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"persistTo"
argument_list|,
name|persistTo
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the number of retry attempts.          *           * The option is a:<code>int</code> type.          *           * Group: producer          */
DECL|method|producerRetryAttempts ( int producerRetryAttempts)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|producerRetryAttempts
parameter_list|(
name|int
name|producerRetryAttempts
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"producerRetryAttempts"
argument_list|,
name|producerRetryAttempts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the number of retry attempts.          *           * The option will be converted to a<code>int</code> type.          *           * Group: producer          */
DECL|method|producerRetryAttempts ( String producerRetryAttempts)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|producerRetryAttempts
parameter_list|(
name|String
name|producerRetryAttempts
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"producerRetryAttempts"
argument_list|,
name|producerRetryAttempts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the retry pause between different attempts.          *           * The option is a:<code>int</code> type.          *           * Group: producer          */
DECL|method|producerRetryPause ( int producerRetryPause)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|producerRetryPause
parameter_list|(
name|int
name|producerRetryPause
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"producerRetryPause"
argument_list|,
name|producerRetryPause
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the retry pause between different attempts.          *           * The option will be converted to a<code>int</code> type.          *           * Group: producer          */
DECL|method|producerRetryPause ( String producerRetryPause)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|producerRetryPause
parameter_list|(
name|String
name|producerRetryPause
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"producerRetryPause"
argument_list|,
name|producerRetryPause
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Where to replicate the data.          *           * The option is a:<code>int</code> type.          *           * Group: producer          */
DECL|method|replicateTo (int replicateTo)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|replicateTo
parameter_list|(
name|int
name|replicateTo
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"replicateTo"
argument_list|,
name|replicateTo
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Where to replicate the data.          *           * The option will be converted to a<code>int</code> type.          *           * Group: producer          */
DECL|method|replicateTo (String replicateTo)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|replicateTo
parameter_list|(
name|String
name|replicateTo
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"replicateTo"
argument_list|,
name|replicateTo
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the starting Id where we are doing an insert operation.          *           * The option is a:<code>long</code> type.          *           * Group: producer          */
DECL|method|startingIdForInsertsFrom ( long startingIdForInsertsFrom)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|startingIdForInsertsFrom
parameter_list|(
name|long
name|startingIdForInsertsFrom
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startingIdForInsertsFrom"
argument_list|,
name|startingIdForInsertsFrom
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the starting Id where we are doing an insert operation.          *           * The option will be converted to a<code>long</code> type.          *           * Group: producer          */
DECL|method|startingIdForInsertsFrom ( String startingIdForInsertsFrom)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|startingIdForInsertsFrom
parameter_list|(
name|String
name|startingIdForInsertsFrom
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startingIdForInsertsFrom"
argument_list|,
name|startingIdForInsertsFrom
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The password to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The username to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|CouchbaseEndpointProducerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Couchbase component.      */
DECL|interface|AdvancedCouchbaseEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedCouchbaseEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CouchbaseEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CouchbaseEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The additional hosts.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|additionalHosts ( String additionalHosts)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|additionalHosts
parameter_list|(
name|String
name|additionalHosts
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"additionalHosts"
argument_list|,
name|additionalHosts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the max delay during a reconnection.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|maxReconnectDelay ( long maxReconnectDelay)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|maxReconnectDelay
parameter_list|(
name|long
name|maxReconnectDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxReconnectDelay"
argument_list|,
name|maxReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the max delay during a reconnection.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|maxReconnectDelay ( String maxReconnectDelay)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|maxReconnectDelay
parameter_list|(
name|String
name|maxReconnectDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxReconnectDelay"
argument_list|,
name|maxReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the observation polling interval.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|obsPollInterval ( long obsPollInterval)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|obsPollInterval
parameter_list|(
name|long
name|obsPollInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"obsPollInterval"
argument_list|,
name|obsPollInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the observation polling interval.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|obsPollInterval ( String obsPollInterval)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|obsPollInterval
parameter_list|(
name|String
name|obsPollInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"obsPollInterval"
argument_list|,
name|obsPollInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the observation timeout.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|obsTimeout ( long obsTimeout)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|obsTimeout
parameter_list|(
name|long
name|obsTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"obsTimeout"
argument_list|,
name|obsTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the observation timeout.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|obsTimeout ( String obsTimeout)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|obsTimeout
parameter_list|(
name|String
name|obsTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"obsTimeout"
argument_list|,
name|obsTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the max time an operation can be in queue blocked.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|opQueueMaxBlockTime ( long opQueueMaxBlockTime)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|opQueueMaxBlockTime
parameter_list|(
name|long
name|opQueueMaxBlockTime
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"opQueueMaxBlockTime"
argument_list|,
name|opQueueMaxBlockTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the max time an operation can be in queue blocked.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|opQueueMaxBlockTime ( String opQueueMaxBlockTime)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|opQueueMaxBlockTime
parameter_list|(
name|String
name|opQueueMaxBlockTime
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"opQueueMaxBlockTime"
argument_list|,
name|opQueueMaxBlockTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the operation timeout.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|opTimeOut ( long opTimeOut)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|opTimeOut
parameter_list|(
name|long
name|opTimeOut
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"opTimeOut"
argument_list|,
name|opTimeOut
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the operation timeout.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|opTimeOut ( String opTimeOut)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|opTimeOut
parameter_list|(
name|String
name|opTimeOut
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"opTimeOut"
argument_list|,
name|opTimeOut
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the buffer size.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|readBufferSize ( int readBufferSize)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|readBufferSize
parameter_list|(
name|int
name|readBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"readBufferSize"
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the buffer size.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|readBufferSize ( String readBufferSize)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|readBufferSize
parameter_list|(
name|String
name|readBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"readBufferSize"
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if we want to use optimization or not where possible.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|shouldOptimize ( boolean shouldOptimize)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|shouldOptimize
parameter_list|(
name|boolean
name|shouldOptimize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"shouldOptimize"
argument_list|,
name|shouldOptimize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if we want to use optimization or not where possible.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|shouldOptimize ( String shouldOptimize)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|shouldOptimize
parameter_list|(
name|String
name|shouldOptimize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"shouldOptimize"
argument_list|,
name|shouldOptimize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the threshold for throwing a timeout Exception.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|timeoutExceptionThreshold ( int timeoutExceptionThreshold)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|timeoutExceptionThreshold
parameter_list|(
name|int
name|timeoutExceptionThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeoutExceptionThreshold"
argument_list|,
name|timeoutExceptionThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the threshold for throwing a timeout Exception.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|timeoutExceptionThreshold ( String timeoutExceptionThreshold)
specifier|default
name|AdvancedCouchbaseEndpointProducerBuilder
name|timeoutExceptionThreshold
parameter_list|(
name|String
name|timeoutExceptionThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeoutExceptionThreshold"
argument_list|,
name|timeoutExceptionThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Couchbase component.      */
DECL|interface|CouchbaseEndpointBuilder
specifier|public
interface|interface
name|CouchbaseEndpointBuilder
extends|extends
name|CouchbaseEndpointConsumerBuilder
extends|,
name|CouchbaseEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCouchbaseEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The bucket to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|bucket (String bucket)
specifier|default
name|CouchbaseEndpointBuilder
name|bucket
parameter_list|(
name|String
name|bucket
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bucket"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The key to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|key (String key)
specifier|default
name|CouchbaseEndpointBuilder
name|key
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"key"
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The password to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|CouchbaseEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The username to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|CouchbaseEndpointBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Couchbase component.      */
DECL|interface|AdvancedCouchbaseEndpointBuilder
specifier|public
interface|interface
name|AdvancedCouchbaseEndpointBuilder
extends|extends
name|AdvancedCouchbaseEndpointConsumerBuilder
extends|,
name|AdvancedCouchbaseEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CouchbaseEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CouchbaseEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The additional hosts.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|additionalHosts ( String additionalHosts)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|additionalHosts
parameter_list|(
name|String
name|additionalHosts
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"additionalHosts"
argument_list|,
name|additionalHosts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the max delay during a reconnection.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|maxReconnectDelay ( long maxReconnectDelay)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|maxReconnectDelay
parameter_list|(
name|long
name|maxReconnectDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxReconnectDelay"
argument_list|,
name|maxReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the max delay during a reconnection.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|maxReconnectDelay ( String maxReconnectDelay)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|maxReconnectDelay
parameter_list|(
name|String
name|maxReconnectDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxReconnectDelay"
argument_list|,
name|maxReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the observation polling interval.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|obsPollInterval ( long obsPollInterval)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|obsPollInterval
parameter_list|(
name|long
name|obsPollInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"obsPollInterval"
argument_list|,
name|obsPollInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the observation polling interval.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|obsPollInterval ( String obsPollInterval)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|obsPollInterval
parameter_list|(
name|String
name|obsPollInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"obsPollInterval"
argument_list|,
name|obsPollInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the observation timeout.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|obsTimeout (long obsTimeout)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|obsTimeout
parameter_list|(
name|long
name|obsTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"obsTimeout"
argument_list|,
name|obsTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the observation timeout.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|obsTimeout (String obsTimeout)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|obsTimeout
parameter_list|(
name|String
name|obsTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"obsTimeout"
argument_list|,
name|obsTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the max time an operation can be in queue blocked.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|opQueueMaxBlockTime ( long opQueueMaxBlockTime)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|opQueueMaxBlockTime
parameter_list|(
name|long
name|opQueueMaxBlockTime
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"opQueueMaxBlockTime"
argument_list|,
name|opQueueMaxBlockTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the max time an operation can be in queue blocked.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|opQueueMaxBlockTime ( String opQueueMaxBlockTime)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|opQueueMaxBlockTime
parameter_list|(
name|String
name|opQueueMaxBlockTime
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"opQueueMaxBlockTime"
argument_list|,
name|opQueueMaxBlockTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the operation timeout.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|opTimeOut (long opTimeOut)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|opTimeOut
parameter_list|(
name|long
name|opTimeOut
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"opTimeOut"
argument_list|,
name|opTimeOut
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the operation timeout.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|opTimeOut (String opTimeOut)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|opTimeOut
parameter_list|(
name|String
name|opTimeOut
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"opTimeOut"
argument_list|,
name|opTimeOut
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the buffer size.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|readBufferSize ( int readBufferSize)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|readBufferSize
parameter_list|(
name|int
name|readBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"readBufferSize"
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the buffer size.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|readBufferSize ( String readBufferSize)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|readBufferSize
parameter_list|(
name|String
name|readBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"readBufferSize"
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if we want to use optimization or not where possible.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|shouldOptimize ( boolean shouldOptimize)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|shouldOptimize
parameter_list|(
name|boolean
name|shouldOptimize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"shouldOptimize"
argument_list|,
name|shouldOptimize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if we want to use optimization or not where possible.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|shouldOptimize ( String shouldOptimize)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|shouldOptimize
parameter_list|(
name|String
name|shouldOptimize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"shouldOptimize"
argument_list|,
name|shouldOptimize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the threshold for throwing a timeout Exception.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|timeoutExceptionThreshold ( int timeoutExceptionThreshold)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|timeoutExceptionThreshold
parameter_list|(
name|int
name|timeoutExceptionThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeoutExceptionThreshold"
argument_list|,
name|timeoutExceptionThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the threshold for throwing a timeout Exception.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|timeoutExceptionThreshold ( String timeoutExceptionThreshold)
specifier|default
name|AdvancedCouchbaseEndpointBuilder
name|timeoutExceptionThreshold
parameter_list|(
name|String
name|timeoutExceptionThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeoutExceptionThreshold"
argument_list|,
name|timeoutExceptionThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Couchbase (camel-couchbase)      * Represents a Couchbase endpoint that can query Views with a Poll strategy      * and/or produce various type of operations.      *       * Category: database,nosql      * Available as of version: 2.19      * Maven coordinates: org.apache.camel:camel-couchbase      *       * Syntax:<code>couchbase:protocol:hostname:port</code>      *       * Path parameter: protocol (required)      * The protocol to use      *       * Path parameter: hostname (required)      * The hostname to use      *       * Path parameter: port      * The port number to use      * Default value: 8091      */
DECL|method|couchbase (String path)
specifier|default
name|CouchbaseEndpointBuilder
name|couchbase
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|CouchbaseEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|CouchbaseEndpointBuilder
implements|,
name|AdvancedCouchbaseEndpointBuilder
block|{
specifier|public
name|CouchbaseEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"couchbase"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|CouchbaseEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

