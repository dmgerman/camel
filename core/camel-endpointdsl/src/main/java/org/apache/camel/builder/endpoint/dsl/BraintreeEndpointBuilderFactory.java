begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The braintree component is used for integrating with the Braintree Payment  * System.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|BraintreeEndpointBuilderFactory
specifier|public
interface|interface
name|BraintreeEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Braintree component.      */
DECL|interface|BraintreeEndpointConsumerBuilder
specifier|public
interface|interface
name|BraintreeEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedBraintreeEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedBraintreeEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option is a          *<code>org.apache.camel.component.braintree.internal.BraintreeApiName</code> type.          * @group common          */
DECL|method|apiName ( BraintreeApiName apiName)
specifier|default
name|BraintreeEndpointConsumerBuilder
name|apiName
parameter_list|(
name|BraintreeApiName
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option will be converted to a          *<code>org.apache.camel.component.braintree.internal.BraintreeApiName</code> type.          * @group common          */
DECL|method|apiName (String apiName)
specifier|default
name|BraintreeEndpointConsumerBuilder
name|apiName
parameter_list|(
name|String
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What sub operation to use for the selected operation.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|methodName (String methodName)
specifier|default
name|BraintreeEndpointConsumerBuilder
name|methodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"methodName"
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The environment Either SANDBOX or PRODUCTION.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|environment (String environment)
specifier|default
name|BraintreeEndpointConsumerBuilder
name|environment
parameter_list|(
name|String
name|environment
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"environment"
argument_list|,
name|environment
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|inBody (String inBody)
specifier|default
name|BraintreeEndpointConsumerBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The merchant id provided by Braintree.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|merchantId (String merchantId)
specifier|default
name|BraintreeEndpointConsumerBuilder
name|merchantId
parameter_list|(
name|String
name|merchantId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"merchantId"
argument_list|,
name|merchantId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The private key provided by Braintree.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|privateKey (String privateKey)
specifier|default
name|BraintreeEndpointConsumerBuilder
name|privateKey
parameter_list|(
name|String
name|privateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"privateKey"
argument_list|,
name|privateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The public key provided by Braintree.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|publicKey (String publicKey)
specifier|default
name|BraintreeEndpointConsumerBuilder
name|publicKey
parameter_list|(
name|String
name|publicKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publicKey"
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|BraintreeEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|BraintreeEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy host.          * The option is a<code>java.lang.String</code> type.          * @group proxy          */
DECL|method|proxyHost (String proxyHost)
specifier|default
name|BraintreeEndpointConsumerBuilder
name|proxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyHost"
argument_list|,
name|proxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy port.          * The option is a<code>java.lang.Integer</code> type.          * @group proxy          */
DECL|method|proxyPort (Integer proxyPort)
specifier|default
name|BraintreeEndpointConsumerBuilder
name|proxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy port.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group proxy          */
DECL|method|proxyPort (String proxyPort)
specifier|default
name|BraintreeEndpointConsumerBuilder
name|proxyPort
parameter_list|(
name|String
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Braintree component.      */
DECL|interface|AdvancedBraintreeEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedBraintreeEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|BraintreeEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|BraintreeEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedBraintreeEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedBraintreeEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedBraintreeEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedBraintreeEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The access token granted by a merchant to another in order to process          * transactions on their behalf. Used in place of environment, merchant          * id, public key and private key fields.          * The option is a<code>java.lang.String</code> type.          * @group advanced          */
DECL|method|accessToken ( String accessToken)
specifier|default
name|AdvancedBraintreeEndpointConsumerBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedBraintreeEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedBraintreeEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set read timeout for http calls.          * The option is a<code>java.lang.Integer</code> type.          * @group advanced          */
DECL|method|httpReadTimeout ( Integer httpReadTimeout)
specifier|default
name|AdvancedBraintreeEndpointConsumerBuilder
name|httpReadTimeout
parameter_list|(
name|Integer
name|httpReadTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpReadTimeout"
argument_list|,
name|httpReadTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set read timeout for http calls.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group advanced          */
DECL|method|httpReadTimeout ( String httpReadTimeout)
specifier|default
name|AdvancedBraintreeEndpointConsumerBuilder
name|httpReadTimeout
parameter_list|(
name|String
name|httpReadTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpReadTimeout"
argument_list|,
name|httpReadTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedBraintreeEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedBraintreeEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set logging level for http calls, see java.util.logging.Level.          * The option is a<code>java.util.logging.Level</code> type.          * @group logging          */
DECL|method|httpLogLevel ( Level httpLogLevel)
specifier|default
name|AdvancedBraintreeEndpointConsumerBuilder
name|httpLogLevel
parameter_list|(
name|Level
name|httpLogLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpLogLevel"
argument_list|,
name|httpLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set logging level for http calls, see java.util.logging.Level.          * The option will be converted to a          *<code>java.util.logging.Level</code> type.          * @group logging          */
DECL|method|httpLogLevel ( String httpLogLevel)
specifier|default
name|AdvancedBraintreeEndpointConsumerBuilder
name|httpLogLevel
parameter_list|(
name|String
name|httpLogLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpLogLevel"
argument_list|,
name|httpLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Braintree component.      */
DECL|interface|BraintreeEndpointProducerBuilder
specifier|public
interface|interface
name|BraintreeEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedBraintreeEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedBraintreeEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option is a          *<code>org.apache.camel.component.braintree.internal.BraintreeApiName</code> type.          * @group common          */
DECL|method|apiName ( BraintreeApiName apiName)
specifier|default
name|BraintreeEndpointProducerBuilder
name|apiName
parameter_list|(
name|BraintreeApiName
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option will be converted to a          *<code>org.apache.camel.component.braintree.internal.BraintreeApiName</code> type.          * @group common          */
DECL|method|apiName (String apiName)
specifier|default
name|BraintreeEndpointProducerBuilder
name|apiName
parameter_list|(
name|String
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What sub operation to use for the selected operation.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|methodName (String methodName)
specifier|default
name|BraintreeEndpointProducerBuilder
name|methodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"methodName"
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The environment Either SANDBOX or PRODUCTION.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|environment (String environment)
specifier|default
name|BraintreeEndpointProducerBuilder
name|environment
parameter_list|(
name|String
name|environment
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"environment"
argument_list|,
name|environment
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|inBody (String inBody)
specifier|default
name|BraintreeEndpointProducerBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The merchant id provided by Braintree.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|merchantId (String merchantId)
specifier|default
name|BraintreeEndpointProducerBuilder
name|merchantId
parameter_list|(
name|String
name|merchantId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"merchantId"
argument_list|,
name|merchantId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The private key provided by Braintree.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|privateKey (String privateKey)
specifier|default
name|BraintreeEndpointProducerBuilder
name|privateKey
parameter_list|(
name|String
name|privateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"privateKey"
argument_list|,
name|privateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The public key provided by Braintree.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|publicKey (String publicKey)
specifier|default
name|BraintreeEndpointProducerBuilder
name|publicKey
parameter_list|(
name|String
name|publicKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publicKey"
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|BraintreeEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|BraintreeEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy host.          * The option is a<code>java.lang.String</code> type.          * @group proxy          */
DECL|method|proxyHost (String proxyHost)
specifier|default
name|BraintreeEndpointProducerBuilder
name|proxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyHost"
argument_list|,
name|proxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy port.          * The option is a<code>java.lang.Integer</code> type.          * @group proxy          */
DECL|method|proxyPort (Integer proxyPort)
specifier|default
name|BraintreeEndpointProducerBuilder
name|proxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy port.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group proxy          */
DECL|method|proxyPort (String proxyPort)
specifier|default
name|BraintreeEndpointProducerBuilder
name|proxyPort
parameter_list|(
name|String
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Braintree component.      */
DECL|interface|AdvancedBraintreeEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedBraintreeEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|BraintreeEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|BraintreeEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The access token granted by a merchant to another in order to process          * transactions on their behalf. Used in place of environment, merchant          * id, public key and private key fields.          * The option is a<code>java.lang.String</code> type.          * @group advanced          */
DECL|method|accessToken ( String accessToken)
specifier|default
name|AdvancedBraintreeEndpointProducerBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedBraintreeEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedBraintreeEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set read timeout for http calls.          * The option is a<code>java.lang.Integer</code> type.          * @group advanced          */
DECL|method|httpReadTimeout ( Integer httpReadTimeout)
specifier|default
name|AdvancedBraintreeEndpointProducerBuilder
name|httpReadTimeout
parameter_list|(
name|Integer
name|httpReadTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpReadTimeout"
argument_list|,
name|httpReadTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set read timeout for http calls.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group advanced          */
DECL|method|httpReadTimeout ( String httpReadTimeout)
specifier|default
name|AdvancedBraintreeEndpointProducerBuilder
name|httpReadTimeout
parameter_list|(
name|String
name|httpReadTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpReadTimeout"
argument_list|,
name|httpReadTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedBraintreeEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedBraintreeEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set logging level for http calls, see java.util.logging.Level.          * The option is a<code>java.util.logging.Level</code> type.          * @group logging          */
DECL|method|httpLogLevel ( Level httpLogLevel)
specifier|default
name|AdvancedBraintreeEndpointProducerBuilder
name|httpLogLevel
parameter_list|(
name|Level
name|httpLogLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpLogLevel"
argument_list|,
name|httpLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set logging level for http calls, see java.util.logging.Level.          * The option will be converted to a          *<code>java.util.logging.Level</code> type.          * @group logging          */
DECL|method|httpLogLevel ( String httpLogLevel)
specifier|default
name|AdvancedBraintreeEndpointProducerBuilder
name|httpLogLevel
parameter_list|(
name|String
name|httpLogLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpLogLevel"
argument_list|,
name|httpLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Braintree component.      */
DECL|interface|BraintreeEndpointBuilder
specifier|public
interface|interface
name|BraintreeEndpointBuilder
extends|extends
name|BraintreeEndpointConsumerBuilder
extends|,
name|BraintreeEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedBraintreeEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedBraintreeEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option is a          *<code>org.apache.camel.component.braintree.internal.BraintreeApiName</code> type.          * @group common          */
DECL|method|apiName (BraintreeApiName apiName)
specifier|default
name|BraintreeEndpointBuilder
name|apiName
parameter_list|(
name|BraintreeApiName
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option will be converted to a          *<code>org.apache.camel.component.braintree.internal.BraintreeApiName</code> type.          * @group common          */
DECL|method|apiName (String apiName)
specifier|default
name|BraintreeEndpointBuilder
name|apiName
parameter_list|(
name|String
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What sub operation to use for the selected operation.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|methodName (String methodName)
specifier|default
name|BraintreeEndpointBuilder
name|methodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"methodName"
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The environment Either SANDBOX or PRODUCTION.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|environment (String environment)
specifier|default
name|BraintreeEndpointBuilder
name|environment
parameter_list|(
name|String
name|environment
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"environment"
argument_list|,
name|environment
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|inBody (String inBody)
specifier|default
name|BraintreeEndpointBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The merchant id provided by Braintree.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|merchantId (String merchantId)
specifier|default
name|BraintreeEndpointBuilder
name|merchantId
parameter_list|(
name|String
name|merchantId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"merchantId"
argument_list|,
name|merchantId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The private key provided by Braintree.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|privateKey (String privateKey)
specifier|default
name|BraintreeEndpointBuilder
name|privateKey
parameter_list|(
name|String
name|privateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"privateKey"
argument_list|,
name|privateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The public key provided by Braintree.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|publicKey (String publicKey)
specifier|default
name|BraintreeEndpointBuilder
name|publicKey
parameter_list|(
name|String
name|publicKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publicKey"
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy host.          * The option is a<code>java.lang.String</code> type.          * @group proxy          */
DECL|method|proxyHost (String proxyHost)
specifier|default
name|BraintreeEndpointBuilder
name|proxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyHost"
argument_list|,
name|proxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy port.          * The option is a<code>java.lang.Integer</code> type.          * @group proxy          */
DECL|method|proxyPort (Integer proxyPort)
specifier|default
name|BraintreeEndpointBuilder
name|proxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy port.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group proxy          */
DECL|method|proxyPort (String proxyPort)
specifier|default
name|BraintreeEndpointBuilder
name|proxyPort
parameter_list|(
name|String
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Braintree component.      */
DECL|interface|AdvancedBraintreeEndpointBuilder
specifier|public
interface|interface
name|AdvancedBraintreeEndpointBuilder
extends|extends
name|AdvancedBraintreeEndpointConsumerBuilder
extends|,
name|AdvancedBraintreeEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|BraintreeEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|BraintreeEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The access token granted by a merchant to another in order to process          * transactions on their behalf. Used in place of environment, merchant          * id, public key and private key fields.          * The option is a<code>java.lang.String</code> type.          * @group advanced          */
DECL|method|accessToken (String accessToken)
specifier|default
name|AdvancedBraintreeEndpointBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedBraintreeEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedBraintreeEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set read timeout for http calls.          * The option is a<code>java.lang.Integer</code> type.          * @group advanced          */
DECL|method|httpReadTimeout ( Integer httpReadTimeout)
specifier|default
name|AdvancedBraintreeEndpointBuilder
name|httpReadTimeout
parameter_list|(
name|Integer
name|httpReadTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpReadTimeout"
argument_list|,
name|httpReadTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set read timeout for http calls.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group advanced          */
DECL|method|httpReadTimeout ( String httpReadTimeout)
specifier|default
name|AdvancedBraintreeEndpointBuilder
name|httpReadTimeout
parameter_list|(
name|String
name|httpReadTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpReadTimeout"
argument_list|,
name|httpReadTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedBraintreeEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedBraintreeEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set logging level for http calls, see java.util.logging.Level.          * The option is a<code>java.util.logging.Level</code> type.          * @group logging          */
DECL|method|httpLogLevel (Level httpLogLevel)
specifier|default
name|AdvancedBraintreeEndpointBuilder
name|httpLogLevel
parameter_list|(
name|Level
name|httpLogLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpLogLevel"
argument_list|,
name|httpLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set logging level for http calls, see java.util.logging.Level.          * The option will be converted to a          *<code>java.util.logging.Level</code> type.          * @group logging          */
DECL|method|httpLogLevel ( String httpLogLevel)
specifier|default
name|AdvancedBraintreeEndpointBuilder
name|httpLogLevel
parameter_list|(
name|String
name|httpLogLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpLogLevel"
argument_list|,
name|httpLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.braintree.internal.BraintreeApiName</code> enum.      */
DECL|enum|BraintreeApiName
specifier|public
specifier|static
enum|enum
name|BraintreeApiName
block|{
DECL|enumConstant|ADDON
DECL|enumConstant|ADDRESS
DECL|enumConstant|CLIENTTOKEN
DECL|enumConstant|CREDITCARDVERIFICATION
DECL|enumConstant|CUSTOMER
DECL|enumConstant|DISCOUNT
DECL|enumConstant|DISPUTE
DECL|enumConstant|DOCUMENTUPLOAD
DECL|enumConstant|MERCHANTACCOUNT
DECL|enumConstant|PAYMENTMETHOD
DECL|enumConstant|PAYMENTMETHODNONCE
DECL|enumConstant|PLAN
DECL|enumConstant|REPORT
DECL|enumConstant|SETTLEMENTBATCHSUMMARY
DECL|enumConstant|SUBSCRIPTION
DECL|enumConstant|TRANSACTION
DECL|enumConstant|WEBHOOKNOTIFICATION
name|ADDON
block|,
name|ADDRESS
block|,
name|CLIENTTOKEN
block|,
name|CREDITCARDVERIFICATION
block|,
name|CUSTOMER
block|,
name|DISCOUNT
block|,
name|DISPUTE
block|,
name|DOCUMENTUPLOAD
block|,
name|MERCHANTACCOUNT
block|,
name|PAYMENTMETHOD
block|,
name|PAYMENTMETHODNONCE
block|,
name|PLAN
block|,
name|REPORT
block|,
name|SETTLEMENTBATCHSUMMARY
block|,
name|SUBSCRIPTION
block|,
name|TRANSACTION
block|,
name|WEBHOOKNOTIFICATION
block|;     }
comment|/**      * The braintree component is used for integrating with the Braintree      * Payment System. Creates a builder to build endpoints for the Braintree      * component.      */
DECL|method|braintree (String path)
specifier|default
name|BraintreeEndpointBuilder
name|braintree
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|BraintreeEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|BraintreeEndpointBuilder
implements|,
name|AdvancedBraintreeEndpointBuilder
block|{
specifier|public
name|BraintreeEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"braintree"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BraintreeEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

