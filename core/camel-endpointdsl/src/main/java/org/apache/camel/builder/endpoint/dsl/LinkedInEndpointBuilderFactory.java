begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The linkedin component is used for retrieving LinkedIn user profiles,  * connections, companies, groups, posts, etc.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|LinkedInEndpointBuilderFactory
specifier|public
interface|interface
name|LinkedInEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Linkedin component.      */
DECL|interface|LinkedInEndpointConsumerBuilder
specifier|public
interface|interface
name|LinkedInEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedLinkedInEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedLinkedInEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * LinkedIn access token to avoid username and password login procedure.          * LinkedIn responds to login forms by using a CAPTCHA. This makes it          * impossible for a standalone, headless process to log in to LinkedIn          * by specifying a username and password. To work around this, obtain a          * LinkedIn access token and provide the token as the setting of the          * accessToken parameter. Obtaining a LinkedIn access token is a          * multi-step procedure. You must configure your LinkedIn application,          * obtain a LinkedIn authorization code, and exchange that code for the          * LinkedIn access token. For details, see:          * https://developer.linkedin.com/docs/oauth2 The default behavior is          * that the access token expires after 60 days. To change this, specify          * a value for the expiryTime paramter. If the access token expires, the          * LinkedIn component tries to log in to LinkedIn by providing a          * username and password, which results in a CAPTCHA so the login fails.          * The LinkedIn component cannot refresh the access token. You must          * manually obtain a new access token each time an access token expires.          * When you update the access token you must restart the application so          * that it uses the new token.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|accessToken (String accessToken)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * LinkedIn application client ID.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientId (String clientId)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientId"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * LinkedIn application client secret.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientSecret (String clientSecret)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|clientSecret
parameter_list|(
name|String
name|clientSecret
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientSecret"
argument_list|,
name|clientSecret
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A number of milliseconds since the UNIX Epoch. The default is 60          * days. A LinkedIn access token expires when this amount of time          * elapses after the token is in use.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|expiryTime (Long expiryTime)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|expiryTime
parameter_list|(
name|Long
name|expiryTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"expiryTime"
argument_list|,
name|expiryTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A number of milliseconds since the UNIX Epoch. The default is 60          * days. A LinkedIn access token expires when this amount of time          * elapses after the token is in use.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|expiryTime (String expiryTime)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|expiryTime
parameter_list|(
name|String
name|expiryTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"expiryTime"
argument_list|,
name|expiryTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP parameters, for example, proxy host and port. Use          * constants from AllClientPNames.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: common          */
DECL|method|httpParams ( Map<String, Object> httpParams)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|httpParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpParams
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpParams"
argument_list|,
name|httpParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP parameters, for example, proxy host and port. Use          * constants from AllClientPNames.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: common          */
DECL|method|httpParams (String httpParams)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|httpParams
parameter_list|(
name|String
name|httpParams
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpParams"
argument_list|,
name|httpParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|inBody (String inBody)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Flag to enable/disable lazy OAuth, default is true. When enabled,          * OAuth token retrieval or generation is not done until the first REST          * call.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|lazyAuth (boolean lazyAuth)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|lazyAuth
parameter_list|(
name|boolean
name|lazyAuth
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyAuth"
argument_list|,
name|lazyAuth
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Flag to enable/disable lazy OAuth, default is true. When enabled,          * OAuth token retrieval or generation is not done until the first REST          * call.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|lazyAuth (String lazyAuth)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|lazyAuth
parameter_list|(
name|String
name|lazyAuth
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyAuth"
argument_list|,
name|lazyAuth
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Application redirect URI, although the component never redirects to          * this page to avoid having to have a functioning redirect server. For          * testing, one could use https://localhost.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|redirectUri (String redirectUri)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|redirectUri
parameter_list|(
name|String
name|redirectUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"redirectUri"
argument_list|,
name|redirectUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * List of LinkedIn scopes as specified at          * https://developer.linkedin.com/documents/authentication#granting.          *           * The option is a:          *<code>org.apache.camel.component.linkedin.api.OAuthScope[]</code>          * type.          *           * Group: common          */
DECL|method|scopes (OAuthScope[] scopes)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|scopes
parameter_list|(
name|OAuthScope
index|[]
name|scopes
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scopes"
argument_list|,
name|scopes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * List of LinkedIn scopes as specified at          * https://developer.linkedin.com/documents/authentication#granting.          *           * The option will be converted to a          *<code>org.apache.camel.component.linkedin.api.OAuthScope[]</code>          * type.          *           * Group: common          */
DECL|method|scopes (String scopes)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|scopes
parameter_list|(
name|String
name|scopes
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scopes"
argument_list|,
name|scopes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Callback interface for providing an OAuth token or to store the token          * generated by the component. The callback should return null on the          * first call and then save the created token in the saveToken()          * callback. If the callback returns null the first time, a userPassword          * MUST be provided.          *           * The option is a:          *<code>org.apache.camel.component.linkedin.api.OAuthSecureStorage</code> type.          *           * Group: common          */
DECL|method|secureStorage ( Object secureStorage)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|secureStorage
parameter_list|(
name|Object
name|secureStorage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secureStorage"
argument_list|,
name|secureStorage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Callback interface for providing an OAuth token or to store the token          * generated by the component. The callback should return null on the          * first call and then save the created token in the saveToken()          * callback. If the callback returns null the first time, a userPassword          * MUST be provided.          *           * The option will be converted to a          *<code>org.apache.camel.component.linkedin.api.OAuthSecureStorage</code> type.          *           * Group: common          */
DECL|method|secureStorage ( String secureStorage)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|secureStorage
parameter_list|(
name|String
name|secureStorage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secureStorage"
argument_list|,
name|secureStorage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * LinkedIn user account name, MUST be provided.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|userName (String userName)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|userName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * LinkedIn account password.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|userPassword (String userPassword)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|userPassword
parameter_list|(
name|String
name|userPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userPassword"
argument_list|,
name|userPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|LinkedInEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Linkedin component.      */
DECL|interface|AdvancedLinkedInEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedLinkedInEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|LinkedInEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|LinkedInEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedLinkedInEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedLinkedInEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedLinkedInEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedLinkedInEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedLinkedInEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedLinkedInEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedLinkedInEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedLinkedInEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Linkedin component.      */
DECL|interface|LinkedInEndpointProducerBuilder
specifier|public
interface|interface
name|LinkedInEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedLinkedInEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedLinkedInEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * LinkedIn access token to avoid username and password login procedure.          * LinkedIn responds to login forms by using a CAPTCHA. This makes it          * impossible for a standalone, headless process to log in to LinkedIn          * by specifying a username and password. To work around this, obtain a          * LinkedIn access token and provide the token as the setting of the          * accessToken parameter. Obtaining a LinkedIn access token is a          * multi-step procedure. You must configure your LinkedIn application,          * obtain a LinkedIn authorization code, and exchange that code for the          * LinkedIn access token. For details, see:          * https://developer.linkedin.com/docs/oauth2 The default behavior is          * that the access token expires after 60 days. To change this, specify          * a value for the expiryTime paramter. If the access token expires, the          * LinkedIn component tries to log in to LinkedIn by providing a          * username and password, which results in a CAPTCHA so the login fails.          * The LinkedIn component cannot refresh the access token. You must          * manually obtain a new access token each time an access token expires.          * When you update the access token you must restart the application so          * that it uses the new token.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|accessToken (String accessToken)
specifier|default
name|LinkedInEndpointProducerBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * LinkedIn application client ID.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientId (String clientId)
specifier|default
name|LinkedInEndpointProducerBuilder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientId"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * LinkedIn application client secret.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientSecret (String clientSecret)
specifier|default
name|LinkedInEndpointProducerBuilder
name|clientSecret
parameter_list|(
name|String
name|clientSecret
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientSecret"
argument_list|,
name|clientSecret
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A number of milliseconds since the UNIX Epoch. The default is 60          * days. A LinkedIn access token expires when this amount of time          * elapses after the token is in use.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|expiryTime (Long expiryTime)
specifier|default
name|LinkedInEndpointProducerBuilder
name|expiryTime
parameter_list|(
name|Long
name|expiryTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"expiryTime"
argument_list|,
name|expiryTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A number of milliseconds since the UNIX Epoch. The default is 60          * days. A LinkedIn access token expires when this amount of time          * elapses after the token is in use.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|expiryTime (String expiryTime)
specifier|default
name|LinkedInEndpointProducerBuilder
name|expiryTime
parameter_list|(
name|String
name|expiryTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"expiryTime"
argument_list|,
name|expiryTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP parameters, for example, proxy host and port. Use          * constants from AllClientPNames.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: common          */
DECL|method|httpParams ( Map<String, Object> httpParams)
specifier|default
name|LinkedInEndpointProducerBuilder
name|httpParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpParams
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpParams"
argument_list|,
name|httpParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP parameters, for example, proxy host and port. Use          * constants from AllClientPNames.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: common          */
DECL|method|httpParams (String httpParams)
specifier|default
name|LinkedInEndpointProducerBuilder
name|httpParams
parameter_list|(
name|String
name|httpParams
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpParams"
argument_list|,
name|httpParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|inBody (String inBody)
specifier|default
name|LinkedInEndpointProducerBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Flag to enable/disable lazy OAuth, default is true. When enabled,          * OAuth token retrieval or generation is not done until the first REST          * call.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|lazyAuth (boolean lazyAuth)
specifier|default
name|LinkedInEndpointProducerBuilder
name|lazyAuth
parameter_list|(
name|boolean
name|lazyAuth
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyAuth"
argument_list|,
name|lazyAuth
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Flag to enable/disable lazy OAuth, default is true. When enabled,          * OAuth token retrieval or generation is not done until the first REST          * call.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|lazyAuth (String lazyAuth)
specifier|default
name|LinkedInEndpointProducerBuilder
name|lazyAuth
parameter_list|(
name|String
name|lazyAuth
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyAuth"
argument_list|,
name|lazyAuth
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Application redirect URI, although the component never redirects to          * this page to avoid having to have a functioning redirect server. For          * testing, one could use https://localhost.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|redirectUri (String redirectUri)
specifier|default
name|LinkedInEndpointProducerBuilder
name|redirectUri
parameter_list|(
name|String
name|redirectUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"redirectUri"
argument_list|,
name|redirectUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * List of LinkedIn scopes as specified at          * https://developer.linkedin.com/documents/authentication#granting.          *           * The option is a:          *<code>org.apache.camel.component.linkedin.api.OAuthScope[]</code>          * type.          *           * Group: common          */
DECL|method|scopes (OAuthScope[] scopes)
specifier|default
name|LinkedInEndpointProducerBuilder
name|scopes
parameter_list|(
name|OAuthScope
index|[]
name|scopes
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scopes"
argument_list|,
name|scopes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * List of LinkedIn scopes as specified at          * https://developer.linkedin.com/documents/authentication#granting.          *           * The option will be converted to a          *<code>org.apache.camel.component.linkedin.api.OAuthScope[]</code>          * type.          *           * Group: common          */
DECL|method|scopes (String scopes)
specifier|default
name|LinkedInEndpointProducerBuilder
name|scopes
parameter_list|(
name|String
name|scopes
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scopes"
argument_list|,
name|scopes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Callback interface for providing an OAuth token or to store the token          * generated by the component. The callback should return null on the          * first call and then save the created token in the saveToken()          * callback. If the callback returns null the first time, a userPassword          * MUST be provided.          *           * The option is a:          *<code>org.apache.camel.component.linkedin.api.OAuthSecureStorage</code> type.          *           * Group: common          */
DECL|method|secureStorage ( Object secureStorage)
specifier|default
name|LinkedInEndpointProducerBuilder
name|secureStorage
parameter_list|(
name|Object
name|secureStorage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secureStorage"
argument_list|,
name|secureStorage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Callback interface for providing an OAuth token or to store the token          * generated by the component. The callback should return null on the          * first call and then save the created token in the saveToken()          * callback. If the callback returns null the first time, a userPassword          * MUST be provided.          *           * The option will be converted to a          *<code>org.apache.camel.component.linkedin.api.OAuthSecureStorage</code> type.          *           * Group: common          */
DECL|method|secureStorage ( String secureStorage)
specifier|default
name|LinkedInEndpointProducerBuilder
name|secureStorage
parameter_list|(
name|String
name|secureStorage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secureStorage"
argument_list|,
name|secureStorage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * LinkedIn user account name, MUST be provided.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|userName (String userName)
specifier|default
name|LinkedInEndpointProducerBuilder
name|userName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * LinkedIn account password.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|userPassword (String userPassword)
specifier|default
name|LinkedInEndpointProducerBuilder
name|userPassword
parameter_list|(
name|String
name|userPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userPassword"
argument_list|,
name|userPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|LinkedInEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|LinkedInEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Linkedin component.      */
DECL|interface|AdvancedLinkedInEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedLinkedInEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|LinkedInEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|LinkedInEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedLinkedInEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedLinkedInEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedLinkedInEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedLinkedInEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Linkedin component.      */
DECL|interface|LinkedInEndpointBuilder
specifier|public
interface|interface
name|LinkedInEndpointBuilder
extends|extends
name|LinkedInEndpointConsumerBuilder
extends|,
name|LinkedInEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedLinkedInEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedLinkedInEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * LinkedIn access token to avoid username and password login procedure.          * LinkedIn responds to login forms by using a CAPTCHA. This makes it          * impossible for a standalone, headless process to log in to LinkedIn          * by specifying a username and password. To work around this, obtain a          * LinkedIn access token and provide the token as the setting of the          * accessToken parameter. Obtaining a LinkedIn access token is a          * multi-step procedure. You must configure your LinkedIn application,          * obtain a LinkedIn authorization code, and exchange that code for the          * LinkedIn access token. For details, see:          * https://developer.linkedin.com/docs/oauth2 The default behavior is          * that the access token expires after 60 days. To change this, specify          * a value for the expiryTime paramter. If the access token expires, the          * LinkedIn component tries to log in to LinkedIn by providing a          * username and password, which results in a CAPTCHA so the login fails.          * The LinkedIn component cannot refresh the access token. You must          * manually obtain a new access token each time an access token expires.          * When you update the access token you must restart the application so          * that it uses the new token.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|accessToken (String accessToken)
specifier|default
name|LinkedInEndpointBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * LinkedIn application client ID.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientId (String clientId)
specifier|default
name|LinkedInEndpointBuilder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientId"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * LinkedIn application client secret.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientSecret (String clientSecret)
specifier|default
name|LinkedInEndpointBuilder
name|clientSecret
parameter_list|(
name|String
name|clientSecret
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientSecret"
argument_list|,
name|clientSecret
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A number of milliseconds since the UNIX Epoch. The default is 60          * days. A LinkedIn access token expires when this amount of time          * elapses after the token is in use.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|expiryTime (Long expiryTime)
specifier|default
name|LinkedInEndpointBuilder
name|expiryTime
parameter_list|(
name|Long
name|expiryTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"expiryTime"
argument_list|,
name|expiryTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A number of milliseconds since the UNIX Epoch. The default is 60          * days. A LinkedIn access token expires when this amount of time          * elapses after the token is in use.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|expiryTime (String expiryTime)
specifier|default
name|LinkedInEndpointBuilder
name|expiryTime
parameter_list|(
name|String
name|expiryTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"expiryTime"
argument_list|,
name|expiryTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP parameters, for example, proxy host and port. Use          * constants from AllClientPNames.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: common          */
DECL|method|httpParams ( Map<String, Object> httpParams)
specifier|default
name|LinkedInEndpointBuilder
name|httpParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpParams
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpParams"
argument_list|,
name|httpParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP parameters, for example, proxy host and port. Use          * constants from AllClientPNames.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: common          */
DECL|method|httpParams (String httpParams)
specifier|default
name|LinkedInEndpointBuilder
name|httpParams
parameter_list|(
name|String
name|httpParams
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpParams"
argument_list|,
name|httpParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|inBody (String inBody)
specifier|default
name|LinkedInEndpointBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Flag to enable/disable lazy OAuth, default is true. When enabled,          * OAuth token retrieval or generation is not done until the first REST          * call.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|lazyAuth (boolean lazyAuth)
specifier|default
name|LinkedInEndpointBuilder
name|lazyAuth
parameter_list|(
name|boolean
name|lazyAuth
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyAuth"
argument_list|,
name|lazyAuth
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Flag to enable/disable lazy OAuth, default is true. When enabled,          * OAuth token retrieval or generation is not done until the first REST          * call.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|lazyAuth (String lazyAuth)
specifier|default
name|LinkedInEndpointBuilder
name|lazyAuth
parameter_list|(
name|String
name|lazyAuth
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyAuth"
argument_list|,
name|lazyAuth
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Application redirect URI, although the component never redirects to          * this page to avoid having to have a functioning redirect server. For          * testing, one could use https://localhost.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|redirectUri (String redirectUri)
specifier|default
name|LinkedInEndpointBuilder
name|redirectUri
parameter_list|(
name|String
name|redirectUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"redirectUri"
argument_list|,
name|redirectUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * List of LinkedIn scopes as specified at          * https://developer.linkedin.com/documents/authentication#granting.          *           * The option is a:          *<code>org.apache.camel.component.linkedin.api.OAuthScope[]</code>          * type.          *           * Group: common          */
DECL|method|scopes (OAuthScope[] scopes)
specifier|default
name|LinkedInEndpointBuilder
name|scopes
parameter_list|(
name|OAuthScope
index|[]
name|scopes
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scopes"
argument_list|,
name|scopes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * List of LinkedIn scopes as specified at          * https://developer.linkedin.com/documents/authentication#granting.          *           * The option will be converted to a          *<code>org.apache.camel.component.linkedin.api.OAuthScope[]</code>          * type.          *           * Group: common          */
DECL|method|scopes (String scopes)
specifier|default
name|LinkedInEndpointBuilder
name|scopes
parameter_list|(
name|String
name|scopes
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scopes"
argument_list|,
name|scopes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Callback interface for providing an OAuth token or to store the token          * generated by the component. The callback should return null on the          * first call and then save the created token in the saveToken()          * callback. If the callback returns null the first time, a userPassword          * MUST be provided.          *           * The option is a:          *<code>org.apache.camel.component.linkedin.api.OAuthSecureStorage</code> type.          *           * Group: common          */
DECL|method|secureStorage (Object secureStorage)
specifier|default
name|LinkedInEndpointBuilder
name|secureStorage
parameter_list|(
name|Object
name|secureStorage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secureStorage"
argument_list|,
name|secureStorage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Callback interface for providing an OAuth token or to store the token          * generated by the component. The callback should return null on the          * first call and then save the created token in the saveToken()          * callback. If the callback returns null the first time, a userPassword          * MUST be provided.          *           * The option will be converted to a          *<code>org.apache.camel.component.linkedin.api.OAuthSecureStorage</code> type.          *           * Group: common          */
DECL|method|secureStorage (String secureStorage)
specifier|default
name|LinkedInEndpointBuilder
name|secureStorage
parameter_list|(
name|String
name|secureStorage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secureStorage"
argument_list|,
name|secureStorage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * LinkedIn user account name, MUST be provided.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|userName (String userName)
specifier|default
name|LinkedInEndpointBuilder
name|userName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * LinkedIn account password.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|userPassword (String userPassword)
specifier|default
name|LinkedInEndpointBuilder
name|userPassword
parameter_list|(
name|String
name|userPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userPassword"
argument_list|,
name|userPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Linkedin component.      */
DECL|interface|AdvancedLinkedInEndpointBuilder
specifier|public
interface|interface
name|AdvancedLinkedInEndpointBuilder
extends|extends
name|AdvancedLinkedInEndpointConsumerBuilder
extends|,
name|AdvancedLinkedInEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|LinkedInEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|LinkedInEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedLinkedInEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedLinkedInEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedLinkedInEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedLinkedInEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.linkedin.api.OAuthScope</code> enum.      */
DECL|enum|OAuthScope
enum|enum
name|OAuthScope
block|{
DECL|enumConstant|R_BASICPROFILE
name|R_BASICPROFILE
block|,
DECL|enumConstant|R_FULLPROFILE
name|R_FULLPROFILE
block|,
DECL|enumConstant|R_EMAILADDRESS
name|R_EMAILADDRESS
block|,
DECL|enumConstant|R_NETWORK
name|R_NETWORK
block|,
DECL|enumConstant|R_CONTACTINFO
name|R_CONTACTINFO
block|,
DECL|enumConstant|RW_NUS
name|RW_NUS
block|,
DECL|enumConstant|RW_COMPANY_ADMIN
name|RW_COMPANY_ADMIN
block|,
DECL|enumConstant|RW_GROUPS
name|RW_GROUPS
block|,
DECL|enumConstant|W_MESSAGES
name|W_MESSAGES
block|,
DECL|enumConstant|W_SHARE
name|W_SHARE
block|;     }
comment|/**      * Linkedin (camel-linkedin)      * The linkedin component is used for retrieving LinkedIn user profiles,      * connections, companies, groups, posts, etc.      *       * Category: api,cloud,social      * Available as of version: 2.14      * Maven coordinates: org.apache.camel:camel-linkedin      *       * Syntax:<code>linkedin:apiName/methodName</code>      *       * Path parameter: apiName (required)      * What kind of operation to perform      * The value can be one of: comments, companies, groups, jobs, people,      * posts, search      *       * Path parameter: methodName (required)      * What sub operation to use for the selected operation      * The value can be one of: addActivity, addComment,      * addCompanyUpdateComment, addCompanyUpdateCommentAsCompany,      * addGroupMembership, addInvite, addJob, addJobBookmark, addPost, addShare,      * addUpdateComment, editJob, flagCategory, followCompany, followPost,      * getComment, getCompanies, getCompanyById, getCompanyByName,      * getCompanyUpdateComments, getCompanyUpdateLikes, getCompanyUpdates,      * getConnections, getConnectionsById, getConnectionsByUrl,      * getFollowedCompanies, getGroup, getGroupMemberships,      * getGroupMembershipSettings, getHistoricalFollowStatistics,      * getHistoricalStatusUpdateStatistics, getJob, getJobBookmarks,      * getNetworkStats, getNetworkUpdates, getNetworkUpdatesById,      * getNumberOfFollowers, getPerson, getPersonById, getPersonByUrl, getPost,      * getPostComments, getPosts, getStatistics, getSuggestedCompanies,      * getSuggestedGroupPosts, getSuggestedGroups, getSuggestedJobs,      * getUpdateComments, getUpdateLikes, isShareEnabled, isViewerShareEnabled,      * likeCompanyUpdate, likePost, likeUpdate, removeComment,      * removeGroupMembership, removeGroupSuggestion, removeJob,      * removeJobBookmark, removePost, searchCompanies, searchJobs, searchPeople,      * share, stopFollowingCompany, updateGroupMembership      */
DECL|method|linkedIn (String path)
specifier|default
name|LinkedInEndpointBuilder
name|linkedIn
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|LinkedInEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|LinkedInEndpointBuilder
implements|,
name|AdvancedLinkedInEndpointBuilder
block|{
specifier|public
name|LinkedInEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"linkedin"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|LinkedInEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

