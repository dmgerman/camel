begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_comment
comment|/**  * The language component allows you to send a message to an endpoint which  * executes a script by any of the supported Languages in Camel.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|LanguageEndpointBuilderFactory
specifier|public
interface|interface
name|LanguageEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint for the Language component.      */
DECL|interface|LanguageEndpointBuilder
specifier|public
interface|interface
name|LanguageEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedLanguageEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedLanguageEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the script is binary content or text content. By default the          * script is read as text content (eg java.lang.String).          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|binary (boolean binary)
specifier|default
name|LanguageEndpointBuilder
name|binary
parameter_list|(
name|boolean
name|binary
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"binary"
argument_list|,
name|binary
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the script is binary content or text content. By default the          * script is read as text content (eg java.lang.String).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|binary (String binary)
specifier|default
name|LanguageEndpointBuilder
name|binary
parameter_list|(
name|String
name|binary
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"binary"
argument_list|,
name|binary
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to cache the compiled script and reuse Notice reusing the          * script can cause side effects from processing one Camel          * org.apache.camel.Exchange to the next org.apache.camel.Exchange.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|cacheScript (boolean cacheScript)
specifier|default
name|LanguageEndpointBuilder
name|cacheScript
parameter_list|(
name|boolean
name|cacheScript
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheScript"
argument_list|,
name|cacheScript
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to cache the compiled script and reuse Notice reusing the          * script can cause side effects from processing one Camel          * org.apache.camel.Exchange to the next org.apache.camel.Exchange.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|cacheScript (String cacheScript)
specifier|default
name|LanguageEndpointBuilder
name|cacheScript
parameter_list|(
name|String
name|cacheScript
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheScript"
argument_list|,
name|cacheScript
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to use resource content cache or not.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|contentCache (boolean contentCache)
specifier|default
name|LanguageEndpointBuilder
name|contentCache
parameter_list|(
name|boolean
name|contentCache
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"contentCache"
argument_list|,
name|contentCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to use resource content cache or not.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|contentCache (String contentCache)
specifier|default
name|LanguageEndpointBuilder
name|contentCache
parameter_list|(
name|String
name|contentCache
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"contentCache"
argument_list|,
name|contentCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the script to execute.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|script (String script)
specifier|default
name|LanguageEndpointBuilder
name|script
parameter_list|(
name|String
name|script
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"script"
argument_list|,
name|script
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the result of the script should be used as message          * body. This options is default true.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|transform (boolean transform)
specifier|default
name|LanguageEndpointBuilder
name|transform
parameter_list|(
name|boolean
name|transform
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transform"
argument_list|,
name|transform
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the result of the script should be used as message          * body. This options is default true.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|transform (String transform)
specifier|default
name|LanguageEndpointBuilder
name|transform
parameter_list|(
name|String
name|transform
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transform"
argument_list|,
name|transform
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Language component.      */
DECL|interface|AdvancedLanguageEndpointBuilder
specifier|public
interface|interface
name|AdvancedLanguageEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|LanguageEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|LanguageEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedLanguageEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedLanguageEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedLanguageEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedLanguageEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Language (camel-language)      * The language component allows you to send a message to an endpoint which      * executes a script by any of the supported Languages in Camel.      *       * Syntax:<code>language:languageName:resourceUri</code>      * Category: core,script      * Available as of version: 2.5      * Maven coordinates: org.apache.camel:camel-language      */
DECL|method|language (String path)
specifier|default
name|LanguageEndpointBuilder
name|language
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|LanguageEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|LanguageEndpointBuilder
implements|,
name|AdvancedLanguageEndpointBuilder
block|{
specifier|public
name|LanguageEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"language"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|LanguageEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

