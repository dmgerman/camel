begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * Component used for transferring data secure and reliable over the internet  * using the AS2 protocol.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|AS2EndpointBuilderFactory
specifier|public
interface|interface
name|AS2EndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the AS2 component.      */
DECL|interface|AS2EndpointConsumerBuilder
specifier|public
interface|interface
name|AS2EndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedAS2EndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedAS2EndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The value of the AS2From header of AS2 message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|as2From (String as2From)
specifier|default
name|AS2EndpointConsumerBuilder
name|as2From
parameter_list|(
name|String
name|as2From
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"as2From"
argument_list|,
name|as2From
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The structure of AS2 Message. One of: PLAIN - No encryption, no          * signature, SIGNED - No encryption, signature, ENCRYPTED - Encryption,          * no signature, ENCRYPTED_SIGNED - Encryption, signature.          *           * The option is a:          *<code>org.apache.camel.component.as2.api.AS2MessageStructure</code>          * type.          *           * Group: common          */
DECL|method|as2MessageStructure ( AS2MessageStructure as2MessageStructure)
specifier|default
name|AS2EndpointConsumerBuilder
name|as2MessageStructure
parameter_list|(
name|AS2MessageStructure
name|as2MessageStructure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"as2MessageStructure"
argument_list|,
name|as2MessageStructure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The structure of AS2 Message. One of: PLAIN - No encryption, no          * signature, SIGNED - No encryption, signature, ENCRYPTED - Encryption,          * no signature, ENCRYPTED_SIGNED - Encryption, signature.          *           * The option will be converted to a          *<code>org.apache.camel.component.as2.api.AS2MessageStructure</code>          * type.          *           * Group: common          */
DECL|method|as2MessageStructure ( String as2MessageStructure)
specifier|default
name|AS2EndpointConsumerBuilder
name|as2MessageStructure
parameter_list|(
name|String
name|as2MessageStructure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"as2MessageStructure"
argument_list|,
name|as2MessageStructure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value of the AS2To header of AS2 message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|as2To (String as2To)
specifier|default
name|AS2EndpointConsumerBuilder
name|as2To
parameter_list|(
name|String
name|as2To
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"as2To"
argument_list|,
name|as2To
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The version of the AS2 protocol.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|as2Version (String as2Version)
specifier|default
name|AS2EndpointConsumerBuilder
name|as2Version
parameter_list|(
name|String
name|as2Version
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"as2Version"
argument_list|,
name|as2Version
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Client Fully Qualified Domain Name (FQDN). Used in message ids          * sent by endpoint.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientFqdn (String clientFqdn)
specifier|default
name|AS2EndpointConsumerBuilder
name|clientFqdn
parameter_list|(
name|String
name|clientFqdn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientFqdn"
argument_list|,
name|clientFqdn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to compress EDI message.          *           * The option is a:          *<code>org.apache.camel.component.as2.api.AS2CompressionAlgorithm</code> type.          *           * Group: common          */
DECL|method|compressionAlgorithm ( AS2CompressionAlgorithm compressionAlgorithm)
specifier|default
name|AS2EndpointConsumerBuilder
name|compressionAlgorithm
parameter_list|(
name|AS2CompressionAlgorithm
name|compressionAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"compressionAlgorithm"
argument_list|,
name|compressionAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to compress EDI message.          *           * The option will be converted to a          *<code>org.apache.camel.component.as2.api.AS2CompressionAlgorithm</code> type.          *           * Group: common          */
DECL|method|compressionAlgorithm ( String compressionAlgorithm)
specifier|default
name|AS2EndpointConsumerBuilder
name|compressionAlgorithm
parameter_list|(
name|String
name|compressionAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"compressionAlgorithm"
argument_list|,
name|compressionAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The key used to encrypt the EDI message.          *           * The option is a:<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|decryptingPrivateKey ( PrivateKey decryptingPrivateKey)
specifier|default
name|AS2EndpointConsumerBuilder
name|decryptingPrivateKey
parameter_list|(
name|PrivateKey
name|decryptingPrivateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decryptingPrivateKey"
argument_list|,
name|decryptingPrivateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The key used to encrypt the EDI message.          *           * The option will be converted to a          *<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|decryptingPrivateKey ( String decryptingPrivateKey)
specifier|default
name|AS2EndpointConsumerBuilder
name|decryptingPrivateKey
parameter_list|(
name|String
name|decryptingPrivateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decryptingPrivateKey"
argument_list|,
name|decryptingPrivateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value of the Disposition-Notification-To header. Assigning a          * value to this parameter requests a message disposition notification          * (MDN) for the AS2 message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|dispositionNotificationTo ( String dispositionNotificationTo)
specifier|default
name|AS2EndpointConsumerBuilder
name|dispositionNotificationTo
parameter_list|(
name|String
name|dispositionNotificationTo
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dispositionNotificationTo"
argument_list|,
name|dispositionNotificationTo
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The transfer encoding of EDI message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|ediMessageTransferEncoding ( String ediMessageTransferEncoding)
specifier|default
name|AS2EndpointConsumerBuilder
name|ediMessageTransferEncoding
parameter_list|(
name|String
name|ediMessageTransferEncoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ediMessageTransferEncoding"
argument_list|,
name|ediMessageTransferEncoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The content type of EDI message. One of application/edifact,          * application/edi-x12, application/edi-consent.          *           * The option is a:<code>org.apache.http.entity.ContentType</code>          * type.          *           * Group: common          */
DECL|method|ediMessageType (Object ediMessageType)
specifier|default
name|AS2EndpointConsumerBuilder
name|ediMessageType
parameter_list|(
name|Object
name|ediMessageType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ediMessageType"
argument_list|,
name|ediMessageType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The content type of EDI message. One of application/edifact,          * application/edi-x12, application/edi-consent.          *           * The option will be converted to a          *<code>org.apache.http.entity.ContentType</code> type.          *           * Group: common          */
DECL|method|ediMessageType (String ediMessageType)
specifier|default
name|AS2EndpointConsumerBuilder
name|ediMessageType
parameter_list|(
name|String
name|ediMessageType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ediMessageType"
argument_list|,
name|ediMessageType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to encrypt EDI message.          *           * The option is a:          *<code>org.apache.camel.component.as2.api.AS2EncryptionAlgorithm</code> type.          *           * Group: common          */
DECL|method|encryptingAlgorithm ( AS2EncryptionAlgorithm encryptingAlgorithm)
specifier|default
name|AS2EndpointConsumerBuilder
name|encryptingAlgorithm
parameter_list|(
name|AS2EncryptionAlgorithm
name|encryptingAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptingAlgorithm"
argument_list|,
name|encryptingAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to encrypt EDI message.          *           * The option will be converted to a          *<code>org.apache.camel.component.as2.api.AS2EncryptionAlgorithm</code> type.          *           * Group: common          */
DECL|method|encryptingAlgorithm ( String encryptingAlgorithm)
specifier|default
name|AS2EndpointConsumerBuilder
name|encryptingAlgorithm
parameter_list|(
name|String
name|encryptingAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptingAlgorithm"
argument_list|,
name|encryptingAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The chain of certificates used to encrypt EDI message.          *           * The option is a:<code>java.security.cert.Certificate[]</code> type.          *           * Group: common          */
DECL|method|encryptingCertificateChain ( Certificate[] encryptingCertificateChain)
specifier|default
name|AS2EndpointConsumerBuilder
name|encryptingCertificateChain
parameter_list|(
name|Certificate
index|[]
name|encryptingCertificateChain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptingCertificateChain"
argument_list|,
name|encryptingCertificateChain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The chain of certificates used to encrypt EDI message.          *           * The option will be converted to a          *<code>java.security.cert.Certificate[]</code> type.          *           * Group: common          */
DECL|method|encryptingCertificateChain ( String encryptingCertificateChain)
specifier|default
name|AS2EndpointConsumerBuilder
name|encryptingCertificateChain
parameter_list|(
name|String
name|encryptingCertificateChain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptingCertificateChain"
argument_list|,
name|encryptingCertificateChain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value of the From header of AS2 message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|from (String from)
specifier|default
name|AS2EndpointConsumerBuilder
name|from
parameter_list|(
name|String
name|from
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"from"
argument_list|,
name|from
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|inBody (String inBody)
specifier|default
name|AS2EndpointConsumerBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The template used to format MDN message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mdnMessageTemplate ( String mdnMessageTemplate)
specifier|default
name|AS2EndpointConsumerBuilder
name|mdnMessageTemplate
parameter_list|(
name|String
name|mdnMessageTemplate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mdnMessageTemplate"
argument_list|,
name|mdnMessageTemplate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The request URI of EDI message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|requestUri (String requestUri)
specifier|default
name|AS2EndpointConsumerBuilder
name|requestUri
parameter_list|(
name|String
name|requestUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestUri"
argument_list|,
name|requestUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value included in the Server message header identifying the AS2          * Server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|server (String server)
specifier|default
name|AS2EndpointConsumerBuilder
name|server
parameter_list|(
name|String
name|server
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"server"
argument_list|,
name|server
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Server Fully Qualified Domain Name (FQDN). Used in message ids          * sent by endpoint.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|serverFqdn (String serverFqdn)
specifier|default
name|AS2EndpointConsumerBuilder
name|serverFqdn
parameter_list|(
name|String
name|serverFqdn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverFqdn"
argument_list|,
name|serverFqdn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of server.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|serverPortNumber ( Integer serverPortNumber)
specifier|default
name|AS2EndpointConsumerBuilder
name|serverPortNumber
parameter_list|(
name|Integer
name|serverPortNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverPortNumber"
argument_list|,
name|serverPortNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of server.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|serverPortNumber ( String serverPortNumber)
specifier|default
name|AS2EndpointConsumerBuilder
name|serverPortNumber
parameter_list|(
name|String
name|serverPortNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverPortNumber"
argument_list|,
name|serverPortNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The list of algorithms, in order of preference, requested to generate          * a message integrity check (MIC) returned in message dispostion          * notification (MDN).          *           * The option is a:<code>java.lang.String[]</code> type.          *           * Group: common          */
DECL|method|signedReceiptMicAlgorithms ( String[] signedReceiptMicAlgorithms)
specifier|default
name|AS2EndpointConsumerBuilder
name|signedReceiptMicAlgorithms
parameter_list|(
name|String
index|[]
name|signedReceiptMicAlgorithms
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signedReceiptMicAlgorithms"
argument_list|,
name|signedReceiptMicAlgorithms
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The list of algorithms, in order of preference, requested to generate          * a message integrity check (MIC) returned in message dispostion          * notification (MDN).          *           * The option will be converted to a<code>java.lang.String[]</code>          * type.          *           * Group: common          */
DECL|method|signedReceiptMicAlgorithms ( String signedReceiptMicAlgorithms)
specifier|default
name|AS2EndpointConsumerBuilder
name|signedReceiptMicAlgorithms
parameter_list|(
name|String
name|signedReceiptMicAlgorithms
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signedReceiptMicAlgorithms"
argument_list|,
name|signedReceiptMicAlgorithms
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to sign EDI message.          *           * The option is a:          *<code>org.apache.camel.component.as2.api.AS2SignatureAlgorithm</code>          * type.          *           * Group: common          */
DECL|method|signingAlgorithm ( AS2SignatureAlgorithm signingAlgorithm)
specifier|default
name|AS2EndpointConsumerBuilder
name|signingAlgorithm
parameter_list|(
name|AS2SignatureAlgorithm
name|signingAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingAlgorithm"
argument_list|,
name|signingAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to sign EDI message.          *           * The option will be converted to a          *<code>org.apache.camel.component.as2.api.AS2SignatureAlgorithm</code>          * type.          *           * Group: common          */
DECL|method|signingAlgorithm ( String signingAlgorithm)
specifier|default
name|AS2EndpointConsumerBuilder
name|signingAlgorithm
parameter_list|(
name|String
name|signingAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingAlgorithm"
argument_list|,
name|signingAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The chain of certificates used to sign EDI message.          *           * The option is a:<code>java.security.cert.Certificate[]</code> type.          *           * Group: common          */
DECL|method|signingCertificateChain ( Certificate[] signingCertificateChain)
specifier|default
name|AS2EndpointConsumerBuilder
name|signingCertificateChain
parameter_list|(
name|Certificate
index|[]
name|signingCertificateChain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingCertificateChain"
argument_list|,
name|signingCertificateChain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The chain of certificates used to sign EDI message.          *           * The option will be converted to a          *<code>java.security.cert.Certificate[]</code> type.          *           * Group: common          */
DECL|method|signingCertificateChain ( String signingCertificateChain)
specifier|default
name|AS2EndpointConsumerBuilder
name|signingCertificateChain
parameter_list|(
name|String
name|signingCertificateChain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingCertificateChain"
argument_list|,
name|signingCertificateChain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The key used to sign the EDI message.          *           * The option is a:<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|signingPrivateKey ( PrivateKey signingPrivateKey)
specifier|default
name|AS2EndpointConsumerBuilder
name|signingPrivateKey
parameter_list|(
name|PrivateKey
name|signingPrivateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingPrivateKey"
argument_list|,
name|signingPrivateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The key used to sign the EDI message.          *           * The option will be converted to a          *<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|signingPrivateKey ( String signingPrivateKey)
specifier|default
name|AS2EndpointConsumerBuilder
name|signingPrivateKey
parameter_list|(
name|String
name|signingPrivateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingPrivateKey"
argument_list|,
name|signingPrivateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value of Subject header of AS2 message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|subject (String subject)
specifier|default
name|AS2EndpointConsumerBuilder
name|subject
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"subject"
argument_list|,
name|subject
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The host name (IP or DNS name) of target host.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|targetHostname (String targetHostname)
specifier|default
name|AS2EndpointConsumerBuilder
name|targetHostname
parameter_list|(
name|String
name|targetHostname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"targetHostname"
argument_list|,
name|targetHostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of target host. -1 indicates the scheme default port.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|targetPortNumber ( Integer targetPortNumber)
specifier|default
name|AS2EndpointConsumerBuilder
name|targetPortNumber
parameter_list|(
name|Integer
name|targetPortNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"targetPortNumber"
argument_list|,
name|targetPortNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of target host. -1 indicates the scheme default port.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|targetPortNumber ( String targetPortNumber)
specifier|default
name|AS2EndpointConsumerBuilder
name|targetPortNumber
parameter_list|(
name|String
name|targetPortNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"targetPortNumber"
argument_list|,
name|targetPortNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value included in the User-Agent message header identifying the          * AS2 user agent.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|userAgent (String userAgent)
specifier|default
name|AS2EndpointConsumerBuilder
name|userAgent
parameter_list|(
name|String
name|userAgent
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userAgent"
argument_list|,
name|userAgent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|AS2EndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|AS2EndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the AS2 component.      */
DECL|interface|AdvancedAS2EndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedAS2EndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|AS2EndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|AS2EndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedAS2EndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedAS2EndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedAS2EndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedAS2EndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedAS2EndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedAS2EndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedAS2EndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedAS2EndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the AS2 component.      */
DECL|interface|AS2EndpointProducerBuilder
specifier|public
interface|interface
name|AS2EndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedAS2EndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedAS2EndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The value of the AS2From header of AS2 message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|as2From (String as2From)
specifier|default
name|AS2EndpointProducerBuilder
name|as2From
parameter_list|(
name|String
name|as2From
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"as2From"
argument_list|,
name|as2From
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The structure of AS2 Message. One of: PLAIN - No encryption, no          * signature, SIGNED - No encryption, signature, ENCRYPTED - Encryption,          * no signature, ENCRYPTED_SIGNED - Encryption, signature.          *           * The option is a:          *<code>org.apache.camel.component.as2.api.AS2MessageStructure</code>          * type.          *           * Group: common          */
DECL|method|as2MessageStructure ( AS2MessageStructure as2MessageStructure)
specifier|default
name|AS2EndpointProducerBuilder
name|as2MessageStructure
parameter_list|(
name|AS2MessageStructure
name|as2MessageStructure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"as2MessageStructure"
argument_list|,
name|as2MessageStructure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The structure of AS2 Message. One of: PLAIN - No encryption, no          * signature, SIGNED - No encryption, signature, ENCRYPTED - Encryption,          * no signature, ENCRYPTED_SIGNED - Encryption, signature.          *           * The option will be converted to a          *<code>org.apache.camel.component.as2.api.AS2MessageStructure</code>          * type.          *           * Group: common          */
DECL|method|as2MessageStructure ( String as2MessageStructure)
specifier|default
name|AS2EndpointProducerBuilder
name|as2MessageStructure
parameter_list|(
name|String
name|as2MessageStructure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"as2MessageStructure"
argument_list|,
name|as2MessageStructure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value of the AS2To header of AS2 message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|as2To (String as2To)
specifier|default
name|AS2EndpointProducerBuilder
name|as2To
parameter_list|(
name|String
name|as2To
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"as2To"
argument_list|,
name|as2To
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The version of the AS2 protocol.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|as2Version (String as2Version)
specifier|default
name|AS2EndpointProducerBuilder
name|as2Version
parameter_list|(
name|String
name|as2Version
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"as2Version"
argument_list|,
name|as2Version
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Client Fully Qualified Domain Name (FQDN). Used in message ids          * sent by endpoint.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientFqdn (String clientFqdn)
specifier|default
name|AS2EndpointProducerBuilder
name|clientFqdn
parameter_list|(
name|String
name|clientFqdn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientFqdn"
argument_list|,
name|clientFqdn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to compress EDI message.          *           * The option is a:          *<code>org.apache.camel.component.as2.api.AS2CompressionAlgorithm</code> type.          *           * Group: common          */
DECL|method|compressionAlgorithm ( AS2CompressionAlgorithm compressionAlgorithm)
specifier|default
name|AS2EndpointProducerBuilder
name|compressionAlgorithm
parameter_list|(
name|AS2CompressionAlgorithm
name|compressionAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"compressionAlgorithm"
argument_list|,
name|compressionAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to compress EDI message.          *           * The option will be converted to a          *<code>org.apache.camel.component.as2.api.AS2CompressionAlgorithm</code> type.          *           * Group: common          */
DECL|method|compressionAlgorithm ( String compressionAlgorithm)
specifier|default
name|AS2EndpointProducerBuilder
name|compressionAlgorithm
parameter_list|(
name|String
name|compressionAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"compressionAlgorithm"
argument_list|,
name|compressionAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The key used to encrypt the EDI message.          *           * The option is a:<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|decryptingPrivateKey ( PrivateKey decryptingPrivateKey)
specifier|default
name|AS2EndpointProducerBuilder
name|decryptingPrivateKey
parameter_list|(
name|PrivateKey
name|decryptingPrivateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decryptingPrivateKey"
argument_list|,
name|decryptingPrivateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The key used to encrypt the EDI message.          *           * The option will be converted to a          *<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|decryptingPrivateKey ( String decryptingPrivateKey)
specifier|default
name|AS2EndpointProducerBuilder
name|decryptingPrivateKey
parameter_list|(
name|String
name|decryptingPrivateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decryptingPrivateKey"
argument_list|,
name|decryptingPrivateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value of the Disposition-Notification-To header. Assigning a          * value to this parameter requests a message disposition notification          * (MDN) for the AS2 message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|dispositionNotificationTo ( String dispositionNotificationTo)
specifier|default
name|AS2EndpointProducerBuilder
name|dispositionNotificationTo
parameter_list|(
name|String
name|dispositionNotificationTo
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dispositionNotificationTo"
argument_list|,
name|dispositionNotificationTo
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The transfer encoding of EDI message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|ediMessageTransferEncoding ( String ediMessageTransferEncoding)
specifier|default
name|AS2EndpointProducerBuilder
name|ediMessageTransferEncoding
parameter_list|(
name|String
name|ediMessageTransferEncoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ediMessageTransferEncoding"
argument_list|,
name|ediMessageTransferEncoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The content type of EDI message. One of application/edifact,          * application/edi-x12, application/edi-consent.          *           * The option is a:<code>org.apache.http.entity.ContentType</code>          * type.          *           * Group: common          */
DECL|method|ediMessageType (Object ediMessageType)
specifier|default
name|AS2EndpointProducerBuilder
name|ediMessageType
parameter_list|(
name|Object
name|ediMessageType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ediMessageType"
argument_list|,
name|ediMessageType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The content type of EDI message. One of application/edifact,          * application/edi-x12, application/edi-consent.          *           * The option will be converted to a          *<code>org.apache.http.entity.ContentType</code> type.          *           * Group: common          */
DECL|method|ediMessageType (String ediMessageType)
specifier|default
name|AS2EndpointProducerBuilder
name|ediMessageType
parameter_list|(
name|String
name|ediMessageType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ediMessageType"
argument_list|,
name|ediMessageType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to encrypt EDI message.          *           * The option is a:          *<code>org.apache.camel.component.as2.api.AS2EncryptionAlgorithm</code> type.          *           * Group: common          */
DECL|method|encryptingAlgorithm ( AS2EncryptionAlgorithm encryptingAlgorithm)
specifier|default
name|AS2EndpointProducerBuilder
name|encryptingAlgorithm
parameter_list|(
name|AS2EncryptionAlgorithm
name|encryptingAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptingAlgorithm"
argument_list|,
name|encryptingAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to encrypt EDI message.          *           * The option will be converted to a          *<code>org.apache.camel.component.as2.api.AS2EncryptionAlgorithm</code> type.          *           * Group: common          */
DECL|method|encryptingAlgorithm ( String encryptingAlgorithm)
specifier|default
name|AS2EndpointProducerBuilder
name|encryptingAlgorithm
parameter_list|(
name|String
name|encryptingAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptingAlgorithm"
argument_list|,
name|encryptingAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The chain of certificates used to encrypt EDI message.          *           * The option is a:<code>java.security.cert.Certificate[]</code> type.          *           * Group: common          */
DECL|method|encryptingCertificateChain ( Certificate[] encryptingCertificateChain)
specifier|default
name|AS2EndpointProducerBuilder
name|encryptingCertificateChain
parameter_list|(
name|Certificate
index|[]
name|encryptingCertificateChain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptingCertificateChain"
argument_list|,
name|encryptingCertificateChain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The chain of certificates used to encrypt EDI message.          *           * The option will be converted to a          *<code>java.security.cert.Certificate[]</code> type.          *           * Group: common          */
DECL|method|encryptingCertificateChain ( String encryptingCertificateChain)
specifier|default
name|AS2EndpointProducerBuilder
name|encryptingCertificateChain
parameter_list|(
name|String
name|encryptingCertificateChain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptingCertificateChain"
argument_list|,
name|encryptingCertificateChain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value of the From header of AS2 message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|from (String from)
specifier|default
name|AS2EndpointProducerBuilder
name|from
parameter_list|(
name|String
name|from
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"from"
argument_list|,
name|from
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|inBody (String inBody)
specifier|default
name|AS2EndpointProducerBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The template used to format MDN message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mdnMessageTemplate ( String mdnMessageTemplate)
specifier|default
name|AS2EndpointProducerBuilder
name|mdnMessageTemplate
parameter_list|(
name|String
name|mdnMessageTemplate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mdnMessageTemplate"
argument_list|,
name|mdnMessageTemplate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The request URI of EDI message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|requestUri (String requestUri)
specifier|default
name|AS2EndpointProducerBuilder
name|requestUri
parameter_list|(
name|String
name|requestUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestUri"
argument_list|,
name|requestUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value included in the Server message header identifying the AS2          * Server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|server (String server)
specifier|default
name|AS2EndpointProducerBuilder
name|server
parameter_list|(
name|String
name|server
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"server"
argument_list|,
name|server
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Server Fully Qualified Domain Name (FQDN). Used in message ids          * sent by endpoint.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|serverFqdn (String serverFqdn)
specifier|default
name|AS2EndpointProducerBuilder
name|serverFqdn
parameter_list|(
name|String
name|serverFqdn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverFqdn"
argument_list|,
name|serverFqdn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of server.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|serverPortNumber ( Integer serverPortNumber)
specifier|default
name|AS2EndpointProducerBuilder
name|serverPortNumber
parameter_list|(
name|Integer
name|serverPortNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverPortNumber"
argument_list|,
name|serverPortNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of server.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|serverPortNumber ( String serverPortNumber)
specifier|default
name|AS2EndpointProducerBuilder
name|serverPortNumber
parameter_list|(
name|String
name|serverPortNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverPortNumber"
argument_list|,
name|serverPortNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The list of algorithms, in order of preference, requested to generate          * a message integrity check (MIC) returned in message dispostion          * notification (MDN).          *           * The option is a:<code>java.lang.String[]</code> type.          *           * Group: common          */
DECL|method|signedReceiptMicAlgorithms ( String[] signedReceiptMicAlgorithms)
specifier|default
name|AS2EndpointProducerBuilder
name|signedReceiptMicAlgorithms
parameter_list|(
name|String
index|[]
name|signedReceiptMicAlgorithms
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signedReceiptMicAlgorithms"
argument_list|,
name|signedReceiptMicAlgorithms
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The list of algorithms, in order of preference, requested to generate          * a message integrity check (MIC) returned in message dispostion          * notification (MDN).          *           * The option will be converted to a<code>java.lang.String[]</code>          * type.          *           * Group: common          */
DECL|method|signedReceiptMicAlgorithms ( String signedReceiptMicAlgorithms)
specifier|default
name|AS2EndpointProducerBuilder
name|signedReceiptMicAlgorithms
parameter_list|(
name|String
name|signedReceiptMicAlgorithms
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signedReceiptMicAlgorithms"
argument_list|,
name|signedReceiptMicAlgorithms
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to sign EDI message.          *           * The option is a:          *<code>org.apache.camel.component.as2.api.AS2SignatureAlgorithm</code>          * type.          *           * Group: common          */
DECL|method|signingAlgorithm ( AS2SignatureAlgorithm signingAlgorithm)
specifier|default
name|AS2EndpointProducerBuilder
name|signingAlgorithm
parameter_list|(
name|AS2SignatureAlgorithm
name|signingAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingAlgorithm"
argument_list|,
name|signingAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to sign EDI message.          *           * The option will be converted to a          *<code>org.apache.camel.component.as2.api.AS2SignatureAlgorithm</code>          * type.          *           * Group: common          */
DECL|method|signingAlgorithm ( String signingAlgorithm)
specifier|default
name|AS2EndpointProducerBuilder
name|signingAlgorithm
parameter_list|(
name|String
name|signingAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingAlgorithm"
argument_list|,
name|signingAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The chain of certificates used to sign EDI message.          *           * The option is a:<code>java.security.cert.Certificate[]</code> type.          *           * Group: common          */
DECL|method|signingCertificateChain ( Certificate[] signingCertificateChain)
specifier|default
name|AS2EndpointProducerBuilder
name|signingCertificateChain
parameter_list|(
name|Certificate
index|[]
name|signingCertificateChain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingCertificateChain"
argument_list|,
name|signingCertificateChain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The chain of certificates used to sign EDI message.          *           * The option will be converted to a          *<code>java.security.cert.Certificate[]</code> type.          *           * Group: common          */
DECL|method|signingCertificateChain ( String signingCertificateChain)
specifier|default
name|AS2EndpointProducerBuilder
name|signingCertificateChain
parameter_list|(
name|String
name|signingCertificateChain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingCertificateChain"
argument_list|,
name|signingCertificateChain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The key used to sign the EDI message.          *           * The option is a:<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|signingPrivateKey ( PrivateKey signingPrivateKey)
specifier|default
name|AS2EndpointProducerBuilder
name|signingPrivateKey
parameter_list|(
name|PrivateKey
name|signingPrivateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingPrivateKey"
argument_list|,
name|signingPrivateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The key used to sign the EDI message.          *           * The option will be converted to a          *<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|signingPrivateKey ( String signingPrivateKey)
specifier|default
name|AS2EndpointProducerBuilder
name|signingPrivateKey
parameter_list|(
name|String
name|signingPrivateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingPrivateKey"
argument_list|,
name|signingPrivateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value of Subject header of AS2 message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|subject (String subject)
specifier|default
name|AS2EndpointProducerBuilder
name|subject
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"subject"
argument_list|,
name|subject
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The host name (IP or DNS name) of target host.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|targetHostname (String targetHostname)
specifier|default
name|AS2EndpointProducerBuilder
name|targetHostname
parameter_list|(
name|String
name|targetHostname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"targetHostname"
argument_list|,
name|targetHostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of target host. -1 indicates the scheme default port.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|targetPortNumber ( Integer targetPortNumber)
specifier|default
name|AS2EndpointProducerBuilder
name|targetPortNumber
parameter_list|(
name|Integer
name|targetPortNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"targetPortNumber"
argument_list|,
name|targetPortNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of target host. -1 indicates the scheme default port.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|targetPortNumber ( String targetPortNumber)
specifier|default
name|AS2EndpointProducerBuilder
name|targetPortNumber
parameter_list|(
name|String
name|targetPortNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"targetPortNumber"
argument_list|,
name|targetPortNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value included in the User-Agent message header identifying the          * AS2 user agent.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|userAgent (String userAgent)
specifier|default
name|AS2EndpointProducerBuilder
name|userAgent
parameter_list|(
name|String
name|userAgent
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userAgent"
argument_list|,
name|userAgent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|AS2EndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|AS2EndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the AS2 component.      */
DECL|interface|AdvancedAS2EndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedAS2EndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|AS2EndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|AS2EndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedAS2EndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedAS2EndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedAS2EndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedAS2EndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the AS2 component.      */
DECL|interface|AS2EndpointBuilder
specifier|public
interface|interface
name|AS2EndpointBuilder
extends|extends
name|AS2EndpointConsumerBuilder
extends|,
name|AS2EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedAS2EndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedAS2EndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The value of the AS2From header of AS2 message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|as2From (String as2From)
specifier|default
name|AS2EndpointBuilder
name|as2From
parameter_list|(
name|String
name|as2From
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"as2From"
argument_list|,
name|as2From
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The structure of AS2 Message. One of: PLAIN - No encryption, no          * signature, SIGNED - No encryption, signature, ENCRYPTED - Encryption,          * no signature, ENCRYPTED_SIGNED - Encryption, signature.          *           * The option is a:          *<code>org.apache.camel.component.as2.api.AS2MessageStructure</code>          * type.          *           * Group: common          */
DECL|method|as2MessageStructure ( AS2MessageStructure as2MessageStructure)
specifier|default
name|AS2EndpointBuilder
name|as2MessageStructure
parameter_list|(
name|AS2MessageStructure
name|as2MessageStructure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"as2MessageStructure"
argument_list|,
name|as2MessageStructure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The structure of AS2 Message. One of: PLAIN - No encryption, no          * signature, SIGNED - No encryption, signature, ENCRYPTED - Encryption,          * no signature, ENCRYPTED_SIGNED - Encryption, signature.          *           * The option will be converted to a          *<code>org.apache.camel.component.as2.api.AS2MessageStructure</code>          * type.          *           * Group: common          */
DECL|method|as2MessageStructure ( String as2MessageStructure)
specifier|default
name|AS2EndpointBuilder
name|as2MessageStructure
parameter_list|(
name|String
name|as2MessageStructure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"as2MessageStructure"
argument_list|,
name|as2MessageStructure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value of the AS2To header of AS2 message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|as2To (String as2To)
specifier|default
name|AS2EndpointBuilder
name|as2To
parameter_list|(
name|String
name|as2To
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"as2To"
argument_list|,
name|as2To
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The version of the AS2 protocol.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|as2Version (String as2Version)
specifier|default
name|AS2EndpointBuilder
name|as2Version
parameter_list|(
name|String
name|as2Version
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"as2Version"
argument_list|,
name|as2Version
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Client Fully Qualified Domain Name (FQDN). Used in message ids          * sent by endpoint.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientFqdn (String clientFqdn)
specifier|default
name|AS2EndpointBuilder
name|clientFqdn
parameter_list|(
name|String
name|clientFqdn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientFqdn"
argument_list|,
name|clientFqdn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to compress EDI message.          *           * The option is a:          *<code>org.apache.camel.component.as2.api.AS2CompressionAlgorithm</code> type.          *           * Group: common          */
DECL|method|compressionAlgorithm ( AS2CompressionAlgorithm compressionAlgorithm)
specifier|default
name|AS2EndpointBuilder
name|compressionAlgorithm
parameter_list|(
name|AS2CompressionAlgorithm
name|compressionAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"compressionAlgorithm"
argument_list|,
name|compressionAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to compress EDI message.          *           * The option will be converted to a          *<code>org.apache.camel.component.as2.api.AS2CompressionAlgorithm</code> type.          *           * Group: common          */
DECL|method|compressionAlgorithm ( String compressionAlgorithm)
specifier|default
name|AS2EndpointBuilder
name|compressionAlgorithm
parameter_list|(
name|String
name|compressionAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"compressionAlgorithm"
argument_list|,
name|compressionAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The key used to encrypt the EDI message.          *           * The option is a:<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|decryptingPrivateKey ( PrivateKey decryptingPrivateKey)
specifier|default
name|AS2EndpointBuilder
name|decryptingPrivateKey
parameter_list|(
name|PrivateKey
name|decryptingPrivateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decryptingPrivateKey"
argument_list|,
name|decryptingPrivateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The key used to encrypt the EDI message.          *           * The option will be converted to a          *<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|decryptingPrivateKey ( String decryptingPrivateKey)
specifier|default
name|AS2EndpointBuilder
name|decryptingPrivateKey
parameter_list|(
name|String
name|decryptingPrivateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decryptingPrivateKey"
argument_list|,
name|decryptingPrivateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value of the Disposition-Notification-To header. Assigning a          * value to this parameter requests a message disposition notification          * (MDN) for the AS2 message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|dispositionNotificationTo ( String dispositionNotificationTo)
specifier|default
name|AS2EndpointBuilder
name|dispositionNotificationTo
parameter_list|(
name|String
name|dispositionNotificationTo
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dispositionNotificationTo"
argument_list|,
name|dispositionNotificationTo
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The transfer encoding of EDI message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|ediMessageTransferEncoding ( String ediMessageTransferEncoding)
specifier|default
name|AS2EndpointBuilder
name|ediMessageTransferEncoding
parameter_list|(
name|String
name|ediMessageTransferEncoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ediMessageTransferEncoding"
argument_list|,
name|ediMessageTransferEncoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The content type of EDI message. One of application/edifact,          * application/edi-x12, application/edi-consent.          *           * The option is a:<code>org.apache.http.entity.ContentType</code>          * type.          *           * Group: common          */
DECL|method|ediMessageType (Object ediMessageType)
specifier|default
name|AS2EndpointBuilder
name|ediMessageType
parameter_list|(
name|Object
name|ediMessageType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ediMessageType"
argument_list|,
name|ediMessageType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The content type of EDI message. One of application/edifact,          * application/edi-x12, application/edi-consent.          *           * The option will be converted to a          *<code>org.apache.http.entity.ContentType</code> type.          *           * Group: common          */
DECL|method|ediMessageType (String ediMessageType)
specifier|default
name|AS2EndpointBuilder
name|ediMessageType
parameter_list|(
name|String
name|ediMessageType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ediMessageType"
argument_list|,
name|ediMessageType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to encrypt EDI message.          *           * The option is a:          *<code>org.apache.camel.component.as2.api.AS2EncryptionAlgorithm</code> type.          *           * Group: common          */
DECL|method|encryptingAlgorithm ( AS2EncryptionAlgorithm encryptingAlgorithm)
specifier|default
name|AS2EndpointBuilder
name|encryptingAlgorithm
parameter_list|(
name|AS2EncryptionAlgorithm
name|encryptingAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptingAlgorithm"
argument_list|,
name|encryptingAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to encrypt EDI message.          *           * The option will be converted to a          *<code>org.apache.camel.component.as2.api.AS2EncryptionAlgorithm</code> type.          *           * Group: common          */
DECL|method|encryptingAlgorithm ( String encryptingAlgorithm)
specifier|default
name|AS2EndpointBuilder
name|encryptingAlgorithm
parameter_list|(
name|String
name|encryptingAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptingAlgorithm"
argument_list|,
name|encryptingAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The chain of certificates used to encrypt EDI message.          *           * The option is a:<code>java.security.cert.Certificate[]</code> type.          *           * Group: common          */
DECL|method|encryptingCertificateChain ( Certificate[] encryptingCertificateChain)
specifier|default
name|AS2EndpointBuilder
name|encryptingCertificateChain
parameter_list|(
name|Certificate
index|[]
name|encryptingCertificateChain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptingCertificateChain"
argument_list|,
name|encryptingCertificateChain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The chain of certificates used to encrypt EDI message.          *           * The option will be converted to a          *<code>java.security.cert.Certificate[]</code> type.          *           * Group: common          */
DECL|method|encryptingCertificateChain ( String encryptingCertificateChain)
specifier|default
name|AS2EndpointBuilder
name|encryptingCertificateChain
parameter_list|(
name|String
name|encryptingCertificateChain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptingCertificateChain"
argument_list|,
name|encryptingCertificateChain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value of the From header of AS2 message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|from (String from)
specifier|default
name|AS2EndpointBuilder
name|from
parameter_list|(
name|String
name|from
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"from"
argument_list|,
name|from
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|inBody (String inBody)
specifier|default
name|AS2EndpointBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The template used to format MDN message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mdnMessageTemplate (String mdnMessageTemplate)
specifier|default
name|AS2EndpointBuilder
name|mdnMessageTemplate
parameter_list|(
name|String
name|mdnMessageTemplate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mdnMessageTemplate"
argument_list|,
name|mdnMessageTemplate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The request URI of EDI message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|requestUri (String requestUri)
specifier|default
name|AS2EndpointBuilder
name|requestUri
parameter_list|(
name|String
name|requestUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestUri"
argument_list|,
name|requestUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value included in the Server message header identifying the AS2          * Server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|server (String server)
specifier|default
name|AS2EndpointBuilder
name|server
parameter_list|(
name|String
name|server
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"server"
argument_list|,
name|server
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Server Fully Qualified Domain Name (FQDN). Used in message ids          * sent by endpoint.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|serverFqdn (String serverFqdn)
specifier|default
name|AS2EndpointBuilder
name|serverFqdn
parameter_list|(
name|String
name|serverFqdn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverFqdn"
argument_list|,
name|serverFqdn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of server.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|serverPortNumber (Integer serverPortNumber)
specifier|default
name|AS2EndpointBuilder
name|serverPortNumber
parameter_list|(
name|Integer
name|serverPortNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverPortNumber"
argument_list|,
name|serverPortNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of server.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|serverPortNumber (String serverPortNumber)
specifier|default
name|AS2EndpointBuilder
name|serverPortNumber
parameter_list|(
name|String
name|serverPortNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverPortNumber"
argument_list|,
name|serverPortNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The list of algorithms, in order of preference, requested to generate          * a message integrity check (MIC) returned in message dispostion          * notification (MDN).          *           * The option is a:<code>java.lang.String[]</code> type.          *           * Group: common          */
DECL|method|signedReceiptMicAlgorithms ( String[] signedReceiptMicAlgorithms)
specifier|default
name|AS2EndpointBuilder
name|signedReceiptMicAlgorithms
parameter_list|(
name|String
index|[]
name|signedReceiptMicAlgorithms
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signedReceiptMicAlgorithms"
argument_list|,
name|signedReceiptMicAlgorithms
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The list of algorithms, in order of preference, requested to generate          * a message integrity check (MIC) returned in message dispostion          * notification (MDN).          *           * The option will be converted to a<code>java.lang.String[]</code>          * type.          *           * Group: common          */
DECL|method|signedReceiptMicAlgorithms ( String signedReceiptMicAlgorithms)
specifier|default
name|AS2EndpointBuilder
name|signedReceiptMicAlgorithms
parameter_list|(
name|String
name|signedReceiptMicAlgorithms
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signedReceiptMicAlgorithms"
argument_list|,
name|signedReceiptMicAlgorithms
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to sign EDI message.          *           * The option is a:          *<code>org.apache.camel.component.as2.api.AS2SignatureAlgorithm</code>          * type.          *           * Group: common          */
DECL|method|signingAlgorithm ( AS2SignatureAlgorithm signingAlgorithm)
specifier|default
name|AS2EndpointBuilder
name|signingAlgorithm
parameter_list|(
name|AS2SignatureAlgorithm
name|signingAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingAlgorithm"
argument_list|,
name|signingAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The algorithm used to sign EDI message.          *           * The option will be converted to a          *<code>org.apache.camel.component.as2.api.AS2SignatureAlgorithm</code>          * type.          *           * Group: common          */
DECL|method|signingAlgorithm (String signingAlgorithm)
specifier|default
name|AS2EndpointBuilder
name|signingAlgorithm
parameter_list|(
name|String
name|signingAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingAlgorithm"
argument_list|,
name|signingAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The chain of certificates used to sign EDI message.          *           * The option is a:<code>java.security.cert.Certificate[]</code> type.          *           * Group: common          */
DECL|method|signingCertificateChain ( Certificate[] signingCertificateChain)
specifier|default
name|AS2EndpointBuilder
name|signingCertificateChain
parameter_list|(
name|Certificate
index|[]
name|signingCertificateChain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingCertificateChain"
argument_list|,
name|signingCertificateChain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The chain of certificates used to sign EDI message.          *           * The option will be converted to a          *<code>java.security.cert.Certificate[]</code> type.          *           * Group: common          */
DECL|method|signingCertificateChain ( String signingCertificateChain)
specifier|default
name|AS2EndpointBuilder
name|signingCertificateChain
parameter_list|(
name|String
name|signingCertificateChain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingCertificateChain"
argument_list|,
name|signingCertificateChain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The key used to sign the EDI message.          *           * The option is a:<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|signingPrivateKey ( PrivateKey signingPrivateKey)
specifier|default
name|AS2EndpointBuilder
name|signingPrivateKey
parameter_list|(
name|PrivateKey
name|signingPrivateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingPrivateKey"
argument_list|,
name|signingPrivateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The key used to sign the EDI message.          *           * The option will be converted to a          *<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|signingPrivateKey (String signingPrivateKey)
specifier|default
name|AS2EndpointBuilder
name|signingPrivateKey
parameter_list|(
name|String
name|signingPrivateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"signingPrivateKey"
argument_list|,
name|signingPrivateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value of Subject header of AS2 message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|subject (String subject)
specifier|default
name|AS2EndpointBuilder
name|subject
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"subject"
argument_list|,
name|subject
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The host name (IP or DNS name) of target host.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|targetHostname (String targetHostname)
specifier|default
name|AS2EndpointBuilder
name|targetHostname
parameter_list|(
name|String
name|targetHostname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"targetHostname"
argument_list|,
name|targetHostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of target host. -1 indicates the scheme default port.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|targetPortNumber (Integer targetPortNumber)
specifier|default
name|AS2EndpointBuilder
name|targetPortNumber
parameter_list|(
name|Integer
name|targetPortNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"targetPortNumber"
argument_list|,
name|targetPortNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of target host. -1 indicates the scheme default port.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|targetPortNumber (String targetPortNumber)
specifier|default
name|AS2EndpointBuilder
name|targetPortNumber
parameter_list|(
name|String
name|targetPortNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"targetPortNumber"
argument_list|,
name|targetPortNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value included in the User-Agent message header identifying the          * AS2 user agent.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|userAgent (String userAgent)
specifier|default
name|AS2EndpointBuilder
name|userAgent
parameter_list|(
name|String
name|userAgent
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userAgent"
argument_list|,
name|userAgent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the AS2 component.      */
DECL|interface|AdvancedAS2EndpointBuilder
specifier|public
interface|interface
name|AdvancedAS2EndpointBuilder
extends|extends
name|AdvancedAS2EndpointConsumerBuilder
extends|,
name|AdvancedAS2EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|AS2EndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|AS2EndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedAS2EndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedAS2EndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedAS2EndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedAS2EndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.as2.api.AS2MessageStructure</code> enum.      */
DECL|enum|AS2MessageStructure
enum|enum
name|AS2MessageStructure
block|{
DECL|enumConstant|PLAIN
name|PLAIN
block|,
DECL|enumConstant|SIGNED
name|SIGNED
block|,
DECL|enumConstant|ENCRYPTED
name|ENCRYPTED
block|,
DECL|enumConstant|SIGNED_ENCRYPTED
name|SIGNED_ENCRYPTED
block|,
DECL|enumConstant|PLAIN_COMPRESSED
name|PLAIN_COMPRESSED
block|,
DECL|enumConstant|SIGNED_COMPRESSED
name|SIGNED_COMPRESSED
block|,
DECL|enumConstant|ENCRYPTED_COMPRESSED
name|ENCRYPTED_COMPRESSED
block|,
DECL|enumConstant|ENCRYPTED_COMPRESSED_SIGNED
name|ENCRYPTED_COMPRESSED_SIGNED
block|;     }
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.as2.api.AS2CompressionAlgorithm</code>      * enum.      */
DECL|enum|AS2CompressionAlgorithm
enum|enum
name|AS2CompressionAlgorithm
block|{
DECL|enumConstant|ZLIB
name|ZLIB
block|;     }
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.as2.api.AS2EncryptionAlgorithm</code>      * enum.      */
DECL|enum|AS2EncryptionAlgorithm
enum|enum
name|AS2EncryptionAlgorithm
block|{
DECL|enumConstant|AES128_CBC
name|AES128_CBC
block|,
DECL|enumConstant|AES192_CBC
name|AES192_CBC
block|,
DECL|enumConstant|AES256_CBC
name|AES256_CBC
block|,
DECL|enumConstant|AES128_CCM
name|AES128_CCM
block|,
DECL|enumConstant|AES192_CCM
name|AES192_CCM
block|,
DECL|enumConstant|AES256_CCM
name|AES256_CCM
block|,
DECL|enumConstant|AES128_GCM
name|AES128_GCM
block|,
DECL|enumConstant|AES192_GCM
name|AES192_GCM
block|,
DECL|enumConstant|AES256_GCM
name|AES256_GCM
block|,
DECL|enumConstant|CAMELLIA128_CBC
name|CAMELLIA128_CBC
block|,
DECL|enumConstant|CAMELLIA192_CBC
name|CAMELLIA192_CBC
block|,
DECL|enumConstant|CAMELLIA256_CBC
name|CAMELLIA256_CBC
block|,
DECL|enumConstant|CAST5_CBC
name|CAST5_CBC
block|,
DECL|enumConstant|DES_CBC
name|DES_CBC
block|,
DECL|enumConstant|DES_EDE3_CBC
name|DES_EDE3_CBC
block|,
DECL|enumConstant|GOST28147_GCFB
name|GOST28147_GCFB
block|,
DECL|enumConstant|IDEA_CBC
name|IDEA_CBC
block|,
DECL|enumConstant|RC2_CBC
name|RC2_CBC
block|,
DECL|enumConstant|RC4
name|RC4
block|,
DECL|enumConstant|SEED_CBC
name|SEED_CBC
block|;     }
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.as2.api.AS2SignatureAlgorithm</code>      * enum.      */
DECL|enum|AS2SignatureAlgorithm
enum|enum
name|AS2SignatureAlgorithm
block|{
DECL|enumConstant|SHA3_224WITHRSA
name|SHA3_224WITHRSA
block|,
DECL|enumConstant|SHA3_256WITHRSA
name|SHA3_256WITHRSA
block|,
DECL|enumConstant|SHA3_384withRSA
name|SHA3_384withRSA
block|,
DECL|enumConstant|SHA3_512WITHRSA
name|SHA3_512WITHRSA
block|,
DECL|enumConstant|MD5WITHRSA
name|MD5WITHRSA
block|,
DECL|enumConstant|SHA1WITHRSA
name|SHA1WITHRSA
block|,
DECL|enumConstant|MD2WITHRSA
name|MD2WITHRSA
block|,
DECL|enumConstant|SHA224WITHRSA
name|SHA224WITHRSA
block|,
DECL|enumConstant|SHA256WITHRSA
name|SHA256WITHRSA
block|,
DECL|enumConstant|SHA384WITHRSA
name|SHA384WITHRSA
block|,
DECL|enumConstant|SHA512WITHRSA
name|SHA512WITHRSA
block|,
DECL|enumConstant|RIPEMD128WITHRSA
name|RIPEMD128WITHRSA
block|,
DECL|enumConstant|RIPEMD160WITHRSA
name|RIPEMD160WITHRSA
block|,
DECL|enumConstant|RIPEMD256WITHRSA
name|RIPEMD256WITHRSA
block|,
DECL|enumConstant|SHA224WITHDSA
name|SHA224WITHDSA
block|,
DECL|enumConstant|SHA256WITHDSA
name|SHA256WITHDSA
block|,
DECL|enumConstant|SHA384WITHDSA
name|SHA384WITHDSA
block|,
DECL|enumConstant|SHA512WITHDSA
name|SHA512WITHDSA
block|,
DECL|enumConstant|SHA3_224WITHDSA
name|SHA3_224WITHDSA
block|,
DECL|enumConstant|SHA3_256WITHDSA
name|SHA3_256WITHDSA
block|,
DECL|enumConstant|SHA3_384WITHDSA
name|SHA3_384WITHDSA
block|,
DECL|enumConstant|SHA3_512WITHDSA
name|SHA3_512WITHDSA
block|,
DECL|enumConstant|SHA1WITHDSA
name|SHA1WITHDSA
block|,
DECL|enumConstant|SHA3_224WITHECDSA
name|SHA3_224WITHECDSA
block|,
DECL|enumConstant|SHA3_256WITHECDSA
name|SHA3_256WITHECDSA
block|,
DECL|enumConstant|SHA3_384WITHECDSA
name|SHA3_384WITHECDSA
block|,
DECL|enumConstant|SHA3_512WITHECDSA
name|SHA3_512WITHECDSA
block|,
DECL|enumConstant|SHA1WITHECDSA
name|SHA1WITHECDSA
block|,
DECL|enumConstant|SHA224WITHECDSA
name|SHA224WITHECDSA
block|,
DECL|enumConstant|SHA256WITHECDSA
name|SHA256WITHECDSA
block|,
DECL|enumConstant|SHA384WITHECDSA
name|SHA384WITHECDSA
block|,
DECL|enumConstant|SHA512WITHECDSA
name|SHA512WITHECDSA
block|,
DECL|enumConstant|SHA1WITHPLAIN_ECDSA
name|SHA1WITHPLAIN_ECDSA
block|,
DECL|enumConstant|SHA224WITHPLAIN_ECDSA
name|SHA224WITHPLAIN_ECDSA
block|,
DECL|enumConstant|SHA256WITHPLAIN_ECDSA
name|SHA256WITHPLAIN_ECDSA
block|,
DECL|enumConstant|SHA384WITHPLAIN_ECDSA
name|SHA384WITHPLAIN_ECDSA
block|,
DECL|enumConstant|SHA512WITHPLAIN_ECDSA
name|SHA512WITHPLAIN_ECDSA
block|,
DECL|enumConstant|RIPEMD160WITHPLAIN_ECDSA
name|RIPEMD160WITHPLAIN_ECDSA
block|,
DECL|enumConstant|SHA1WITHRSAANDMGF1
name|SHA1WITHRSAANDMGF1
block|,
DECL|enumConstant|SHA224WITHRSAANDMGF1
name|SHA224WITHRSAANDMGF1
block|,
DECL|enumConstant|SHA256WITHRSAANDMGF1
name|SHA256WITHRSAANDMGF1
block|,
DECL|enumConstant|SHA384WITHRSAANDMGF1
name|SHA384WITHRSAANDMGF1
block|,
DECL|enumConstant|SHA512WITHRSAANDMGF1
name|SHA512WITHRSAANDMGF1
block|,
DECL|enumConstant|SHA3_224WITHRSAANDMGF1
name|SHA3_224WITHRSAANDMGF1
block|,
DECL|enumConstant|SHA3_256WITHRSAANDMGF1
name|SHA3_256WITHRSAANDMGF1
block|,
DECL|enumConstant|SHA3_384WITHRSAANDMGF1
name|SHA3_384WITHRSAANDMGF1
block|,
DECL|enumConstant|SHA3_512WITHRSAANDMGF1
name|SHA3_512WITHRSAANDMGF1
block|;     }
comment|/**      * AS2 (camel-as2)      * Component used for transferring data secure and reliable over the      * internet using the AS2 protocol.      *       * Category: AS2      * Available as of version: 2.22      * Maven coordinates: org.apache.camel:camel-as2      *       * Syntax:<code>as2:apiName/methodName</code>      *       * Path parameter: apiName (required)      * What kind of operation to perform      * The value can be one of: CLIENT, SERVER      *       * Path parameter: methodName (required)      * What sub operation to use for the selected operation      */
DECL|method|aS2 (String path)
specifier|default
name|AS2EndpointBuilder
name|aS2
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|AS2EndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|AS2EndpointBuilder
implements|,
name|AdvancedAS2EndpointBuilder
block|{
specifier|public
name|AS2EndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"as2"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|AS2EndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

