begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The cmis component uses the Apache Chemistry client API and allows you to  * add/read nodes to/from a CMIS compliant content repositories.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|CMISEndpointBuilderFactory
specifier|public
interface|interface
name|CMISEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the CMIS component.      */
DECL|interface|CMISEndpointConsumerBuilder
specifier|public
interface|interface
name|CMISEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|public
specifier|default
name|AdvancedCMISEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCMISEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * URL to the cmis repository.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|cmsUrl (String cmsUrl)
specifier|public
specifier|default
name|CMISEndpointConsumerBuilder
name|cmsUrl
parameter_list|(
name|String
name|cmsUrl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cmsUrl"
argument_list|,
name|cmsUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of nodes to retrieve per page.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|pageSize (int pageSize)
specifier|public
specifier|default
name|CMISEndpointConsumerBuilder
name|pageSize
parameter_list|(
name|int
name|pageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pageSize"
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of nodes to retrieve per page.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|pageSize (String pageSize)
specifier|public
specifier|default
name|CMISEndpointConsumerBuilder
name|pageSize
parameter_list|(
name|String
name|pageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pageSize"
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set to true, the content of document node will be retrieved in          * addition to the properties.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|readContent ( boolean readContent)
specifier|public
specifier|default
name|CMISEndpointConsumerBuilder
name|readContent
parameter_list|(
name|boolean
name|readContent
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readContent"
argument_list|,
name|readContent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set to true, the content of document node will be retrieved in          * addition to the properties.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|readContent ( String readContent)
specifier|public
specifier|default
name|CMISEndpointConsumerBuilder
name|readContent
parameter_list|(
name|String
name|readContent
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readContent"
argument_list|,
name|readContent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Max number of nodes to read.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|readCount (int readCount)
specifier|public
specifier|default
name|CMISEndpointConsumerBuilder
name|readCount
parameter_list|(
name|int
name|readCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readCount"
argument_list|,
name|readCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Max number of nodes to read.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|readCount (String readCount)
specifier|public
specifier|default
name|CMISEndpointConsumerBuilder
name|readCount
parameter_list|(
name|String
name|readCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readCount"
argument_list|,
name|readCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Id of the repository to use. If not specified the first available          * repository is used.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|repositoryId ( String repositoryId)
specifier|public
specifier|default
name|CMISEndpointConsumerBuilder
name|repositoryId
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"repositoryId"
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|public
specifier|default
name|CMISEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|public
specifier|default
name|CMISEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cmis query to execute against the repository. If not specified,          * the consumer will retrieve every node from the content repository by          * iterating the content tree recursively.          * The option is a<code>java.lang.String</code> type.          * @group consumer          */
DECL|method|query (String query)
specifier|public
specifier|default
name|CMISEndpointConsumerBuilder
name|query
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"query"
argument_list|,
name|query
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for the cmis repository.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|password (String password)
specifier|public
specifier|default
name|CMISEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username for the cmis repository.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|username (String username)
specifier|public
specifier|default
name|CMISEndpointConsumerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the CMIS component.      */
DECL|interface|AdvancedCMISEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedCMISEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|public
specifier|default
name|CMISEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CMISEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|public
specifier|default
name|AdvancedCMISEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|public
specifier|default
name|AdvancedCMISEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|public
specifier|default
name|AdvancedCMISEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|public
specifier|default
name|AdvancedCMISEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedCMISEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedCMISEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CMISSessionFacadeFactory to create the          * CMISSessionFacade instances.          * The option is a          *<code>org.apache.camel.component.cmis.CMISSessionFacadeFactory</code>          * type.          * @group advanced          */
DECL|method|sessionFacadeFactory ( Object sessionFacadeFactory)
specifier|public
specifier|default
name|AdvancedCMISEndpointConsumerBuilder
name|sessionFacadeFactory
parameter_list|(
name|Object
name|sessionFacadeFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionFacadeFactory"
argument_list|,
name|sessionFacadeFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CMISSessionFacadeFactory to create the          * CMISSessionFacade instances.          * The option will be converted to a          *<code>org.apache.camel.component.cmis.CMISSessionFacadeFactory</code>          * type.          * @group advanced          */
DECL|method|sessionFacadeFactory ( String sessionFacadeFactory)
specifier|public
specifier|default
name|AdvancedCMISEndpointConsumerBuilder
name|sessionFacadeFactory
parameter_list|(
name|String
name|sessionFacadeFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionFacadeFactory"
argument_list|,
name|sessionFacadeFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|public
specifier|default
name|AdvancedCMISEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|public
specifier|default
name|AdvancedCMISEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the CMIS component.      */
DECL|interface|CMISEndpointProducerBuilder
specifier|public
specifier|static
interface|interface
name|CMISEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|public
specifier|default
name|AdvancedCMISEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCMISEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * URL to the cmis repository.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|cmsUrl (String cmsUrl)
specifier|public
specifier|default
name|CMISEndpointProducerBuilder
name|cmsUrl
parameter_list|(
name|String
name|cmsUrl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cmsUrl"
argument_list|,
name|cmsUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of nodes to retrieve per page.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|pageSize (int pageSize)
specifier|public
specifier|default
name|CMISEndpointProducerBuilder
name|pageSize
parameter_list|(
name|int
name|pageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pageSize"
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of nodes to retrieve per page.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|pageSize (String pageSize)
specifier|public
specifier|default
name|CMISEndpointProducerBuilder
name|pageSize
parameter_list|(
name|String
name|pageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pageSize"
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set to true, the content of document node will be retrieved in          * addition to the properties.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|readContent ( boolean readContent)
specifier|public
specifier|default
name|CMISEndpointProducerBuilder
name|readContent
parameter_list|(
name|boolean
name|readContent
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readContent"
argument_list|,
name|readContent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set to true, the content of document node will be retrieved in          * addition to the properties.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|readContent ( String readContent)
specifier|public
specifier|default
name|CMISEndpointProducerBuilder
name|readContent
parameter_list|(
name|String
name|readContent
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readContent"
argument_list|,
name|readContent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Max number of nodes to read.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|readCount (int readCount)
specifier|public
specifier|default
name|CMISEndpointProducerBuilder
name|readCount
parameter_list|(
name|int
name|readCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readCount"
argument_list|,
name|readCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Max number of nodes to read.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|readCount (String readCount)
specifier|public
specifier|default
name|CMISEndpointProducerBuilder
name|readCount
parameter_list|(
name|String
name|readCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readCount"
argument_list|,
name|readCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Id of the repository to use. If not specified the first available          * repository is used.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|repositoryId ( String repositoryId)
specifier|public
specifier|default
name|CMISEndpointProducerBuilder
name|repositoryId
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"repositoryId"
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|public
specifier|default
name|CMISEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|public
specifier|default
name|CMISEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, will execute the cmis query from the message body and return          * result, otherwise will create a node in the cmis repository.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|queryMode (boolean queryMode)
specifier|public
specifier|default
name|CMISEndpointProducerBuilder
name|queryMode
parameter_list|(
name|boolean
name|queryMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"queryMode"
argument_list|,
name|queryMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, will execute the cmis query from the message body and return          * result, otherwise will create a node in the cmis repository.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|queryMode (String queryMode)
specifier|public
specifier|default
name|CMISEndpointProducerBuilder
name|queryMode
parameter_list|(
name|String
name|queryMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"queryMode"
argument_list|,
name|queryMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for the cmis repository.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|password (String password)
specifier|public
specifier|default
name|CMISEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username for the cmis repository.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|username (String username)
specifier|public
specifier|default
name|CMISEndpointProducerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the CMIS component.      */
DECL|interface|AdvancedCMISEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedCMISEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|public
specifier|default
name|CMISEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CMISEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedCMISEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedCMISEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CMISSessionFacadeFactory to create the          * CMISSessionFacade instances.          * The option is a          *<code>org.apache.camel.component.cmis.CMISSessionFacadeFactory</code>          * type.          * @group advanced          */
DECL|method|sessionFacadeFactory ( Object sessionFacadeFactory)
specifier|public
specifier|default
name|AdvancedCMISEndpointProducerBuilder
name|sessionFacadeFactory
parameter_list|(
name|Object
name|sessionFacadeFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionFacadeFactory"
argument_list|,
name|sessionFacadeFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CMISSessionFacadeFactory to create the          * CMISSessionFacade instances.          * The option will be converted to a          *<code>org.apache.camel.component.cmis.CMISSessionFacadeFactory</code>          * type.          * @group advanced          */
DECL|method|sessionFacadeFactory ( String sessionFacadeFactory)
specifier|public
specifier|default
name|AdvancedCMISEndpointProducerBuilder
name|sessionFacadeFactory
parameter_list|(
name|String
name|sessionFacadeFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionFacadeFactory"
argument_list|,
name|sessionFacadeFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|public
specifier|default
name|AdvancedCMISEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|public
specifier|default
name|AdvancedCMISEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the CMIS component.      */
DECL|interface|CMISEndpointBuilder
specifier|public
specifier|static
interface|interface
name|CMISEndpointBuilder
extends|extends
name|CMISEndpointConsumerBuilder
extends|,
name|CMISEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|public
specifier|default
name|AdvancedCMISEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCMISEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * URL to the cmis repository.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|cmsUrl (String cmsUrl)
specifier|public
specifier|default
name|CMISEndpointBuilder
name|cmsUrl
parameter_list|(
name|String
name|cmsUrl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cmsUrl"
argument_list|,
name|cmsUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of nodes to retrieve per page.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|pageSize (int pageSize)
specifier|public
specifier|default
name|CMISEndpointBuilder
name|pageSize
parameter_list|(
name|int
name|pageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pageSize"
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of nodes to retrieve per page.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|pageSize (String pageSize)
specifier|public
specifier|default
name|CMISEndpointBuilder
name|pageSize
parameter_list|(
name|String
name|pageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pageSize"
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set to true, the content of document node will be retrieved in          * addition to the properties.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|readContent (boolean readContent)
specifier|public
specifier|default
name|CMISEndpointBuilder
name|readContent
parameter_list|(
name|boolean
name|readContent
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readContent"
argument_list|,
name|readContent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set to true, the content of document node will be retrieved in          * addition to the properties.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|readContent (String readContent)
specifier|public
specifier|default
name|CMISEndpointBuilder
name|readContent
parameter_list|(
name|String
name|readContent
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readContent"
argument_list|,
name|readContent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Max number of nodes to read.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|readCount (int readCount)
specifier|public
specifier|default
name|CMISEndpointBuilder
name|readCount
parameter_list|(
name|int
name|readCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readCount"
argument_list|,
name|readCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Max number of nodes to read.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|readCount (String readCount)
specifier|public
specifier|default
name|CMISEndpointBuilder
name|readCount
parameter_list|(
name|String
name|readCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readCount"
argument_list|,
name|readCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Id of the repository to use. If not specified the first available          * repository is used.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|repositoryId (String repositoryId)
specifier|public
specifier|default
name|CMISEndpointBuilder
name|repositoryId
parameter_list|(
name|String
name|repositoryId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"repositoryId"
argument_list|,
name|repositoryId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for the cmis repository.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|password (String password)
specifier|public
specifier|default
name|CMISEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username for the cmis repository.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|username (String username)
specifier|public
specifier|default
name|CMISEndpointBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the CMIS component.      */
DECL|interface|AdvancedCMISEndpointBuilder
specifier|public
specifier|static
interface|interface
name|AdvancedCMISEndpointBuilder
extends|extends
name|AdvancedCMISEndpointConsumerBuilder
extends|,
name|AdvancedCMISEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|public
specifier|default
name|CMISEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CMISEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedCMISEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedCMISEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CMISSessionFacadeFactory to create the          * CMISSessionFacade instances.          * The option is a          *<code>org.apache.camel.component.cmis.CMISSessionFacadeFactory</code>          * type.          * @group advanced          */
DECL|method|sessionFacadeFactory ( Object sessionFacadeFactory)
specifier|public
specifier|default
name|AdvancedCMISEndpointBuilder
name|sessionFacadeFactory
parameter_list|(
name|Object
name|sessionFacadeFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionFacadeFactory"
argument_list|,
name|sessionFacadeFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CMISSessionFacadeFactory to create the          * CMISSessionFacade instances.          * The option will be converted to a          *<code>org.apache.camel.component.cmis.CMISSessionFacadeFactory</code>          * type.          * @group advanced          */
DECL|method|sessionFacadeFactory ( String sessionFacadeFactory)
specifier|public
specifier|default
name|AdvancedCMISEndpointBuilder
name|sessionFacadeFactory
parameter_list|(
name|String
name|sessionFacadeFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionFacadeFactory"
argument_list|,
name|sessionFacadeFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|public
specifier|default
name|AdvancedCMISEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|public
specifier|default
name|AdvancedCMISEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * The cmis component uses the Apache Chemistry client API and allows you to      * add/read nodes to/from a CMIS compliant content repositories. Creates a      * builder to build endpoints for the CMIS component.      */
DECL|method|cMIS (String path)
specifier|public
specifier|default
name|CMISEndpointBuilder
name|cMIS
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|CMISEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|CMISEndpointBuilder
implements|,
name|AdvancedCMISEndpointBuilder
block|{
specifier|public
name|CMISEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"cmis"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|CMISEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

