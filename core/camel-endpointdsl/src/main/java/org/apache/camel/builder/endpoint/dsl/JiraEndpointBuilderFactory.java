begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The jira component interacts with the JIRA issue tracker.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|JiraEndpointBuilderFactory
specifier|public
interface|interface
name|JiraEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Jira component.      */
DECL|interface|JiraEndpointConsumerBuilder
specifier|public
interface|interface
name|JiraEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJiraEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJiraEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Operation to perform. Consumers: NewIssues, NewComments. Producers:          * AddIssue, AttachFile, DeleteIssue, TransitionIssue, UpdateIssue,          * Watchers. See this class javadoc description for more information.          *           * The option is a:          *<code>org.apache.camel.component.jira.JiraType</code> type.          *           * Group: common          */
DECL|method|type (JiraType type)
specifier|default
name|JiraEndpointConsumerBuilder
name|type
parameter_list|(
name|JiraType
name|type
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Operation to perform. Consumers: NewIssues, NewComments. Producers:          * AddIssue, AttachFile, DeleteIssue, TransitionIssue, UpdateIssue,          * Watchers. See this class javadoc description for more information.          *           * The option will be converted to a          *<code>org.apache.camel.component.jira.JiraType</code> type.          *           * Group: common          */
DECL|method|type (String type)
specifier|default
name|JiraEndpointConsumerBuilder
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time in milliseconds to elapse for the next poll.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|delay (Integer delay)
specifier|default
name|JiraEndpointConsumerBuilder
name|delay
parameter_list|(
name|Integer
name|delay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time in milliseconds to elapse for the next poll.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|delay (String delay)
specifier|default
name|JiraEndpointConsumerBuilder
name|delay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Jira server url, example: http://my_jira.com:8081.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: common          */
DECL|method|jiraUrl (String jiraUrl)
specifier|default
name|JiraEndpointConsumerBuilder
name|jiraUrl
parameter_list|(
name|String
name|jiraUrl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jiraUrl"
argument_list|,
name|jiraUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|JiraEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|JiraEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JQL is the query language from JIRA which allows you to retrieve the          * data you want. For example jql=project=MyProject Where MyProject is          * the product key in Jira. It is important to use the RAW() and set the          * JQL inside it to prevent camel parsing it, example: RAW(project in          * (MYP, COM) AND resolution = Unresolved).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|jql (String jql)
specifier|default
name|JiraEndpointConsumerBuilder
name|jql
parameter_list|(
name|String
name|jql
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jql"
argument_list|,
name|jql
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Max number of issues to search for.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: consumer          */
DECL|method|maxResults (Integer maxResults)
specifier|default
name|JiraEndpointConsumerBuilder
name|maxResults
parameter_list|(
name|Integer
name|maxResults
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxResults"
argument_list|,
name|maxResults
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Max number of issues to search for.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: consumer          */
DECL|method|maxResults (String maxResults)
specifier|default
name|JiraEndpointConsumerBuilder
name|maxResults
parameter_list|(
name|String
name|maxResults
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxResults"
argument_list|,
name|maxResults
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (OAuth only) The access token generated by the Jira server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessToken (String accessToken)
specifier|default
name|JiraEndpointConsumerBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (OAuth only) The consumer key from Jira settings.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|consumerKey (String consumerKey)
specifier|default
name|JiraEndpointConsumerBuilder
name|consumerKey
parameter_list|(
name|String
name|consumerKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"consumerKey"
argument_list|,
name|consumerKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (Basic authentication only) The password to authenticate to the Jira          * server. Use only if username basic authentication is used.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|JiraEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (OAuth only) The private key generated by the client to encrypt the          * conversation to the server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|privateKey (String privateKey)
specifier|default
name|JiraEndpointConsumerBuilder
name|privateKey
parameter_list|(
name|String
name|privateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"privateKey"
argument_list|,
name|privateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (Basic authentication only) The username to authenticate to the Jira          * server. Use only if OAuth is not enabled on the Jira server. Do not          * set the username and OAuth token parameter, if they are both set, the          * username basic authentication takes precedence.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|JiraEndpointConsumerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (OAuth only) The verification code from Jira generated in the first          * step of the authorization proccess.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|verificationCode ( String verificationCode)
specifier|default
name|JiraEndpointConsumerBuilder
name|verificationCode
parameter_list|(
name|String
name|verificationCode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"verificationCode"
argument_list|,
name|verificationCode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Jira component.      */
DECL|interface|AdvancedJiraEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedJiraEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|JiraEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|JiraEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedJiraEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedJiraEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedJiraEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedJiraEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJiraEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJiraEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedJiraEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedJiraEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Jira component.      */
DECL|interface|JiraEndpointProducerBuilder
specifier|public
interface|interface
name|JiraEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJiraEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJiraEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Operation to perform. Consumers: NewIssues, NewComments. Producers:          * AddIssue, AttachFile, DeleteIssue, TransitionIssue, UpdateIssue,          * Watchers. See this class javadoc description for more information.          *           * The option is a:          *<code>org.apache.camel.component.jira.JiraType</code> type.          *           * Group: common          */
DECL|method|type (JiraType type)
specifier|default
name|JiraEndpointProducerBuilder
name|type
parameter_list|(
name|JiraType
name|type
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Operation to perform. Consumers: NewIssues, NewComments. Producers:          * AddIssue, AttachFile, DeleteIssue, TransitionIssue, UpdateIssue,          * Watchers. See this class javadoc description for more information.          *           * The option will be converted to a          *<code>org.apache.camel.component.jira.JiraType</code> type.          *           * Group: common          */
DECL|method|type (String type)
specifier|default
name|JiraEndpointProducerBuilder
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time in milliseconds to elapse for the next poll.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|delay (Integer delay)
specifier|default
name|JiraEndpointProducerBuilder
name|delay
parameter_list|(
name|Integer
name|delay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time in milliseconds to elapse for the next poll.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|delay (String delay)
specifier|default
name|JiraEndpointProducerBuilder
name|delay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Jira server url, example: http://my_jira.com:8081.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: common          */
DECL|method|jiraUrl (String jiraUrl)
specifier|default
name|JiraEndpointProducerBuilder
name|jiraUrl
parameter_list|(
name|String
name|jiraUrl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jiraUrl"
argument_list|,
name|jiraUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|JiraEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|JiraEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (OAuth only) The access token generated by the Jira server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessToken (String accessToken)
specifier|default
name|JiraEndpointProducerBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (OAuth only) The consumer key from Jira settings.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|consumerKey (String consumerKey)
specifier|default
name|JiraEndpointProducerBuilder
name|consumerKey
parameter_list|(
name|String
name|consumerKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"consumerKey"
argument_list|,
name|consumerKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (Basic authentication only) The password to authenticate to the Jira          * server. Use only if username basic authentication is used.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|JiraEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (OAuth only) The private key generated by the client to encrypt the          * conversation to the server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|privateKey (String privateKey)
specifier|default
name|JiraEndpointProducerBuilder
name|privateKey
parameter_list|(
name|String
name|privateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"privateKey"
argument_list|,
name|privateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (Basic authentication only) The username to authenticate to the Jira          * server. Use only if OAuth is not enabled on the Jira server. Do not          * set the username and OAuth token parameter, if they are both set, the          * username basic authentication takes precedence.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|JiraEndpointProducerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (OAuth only) The verification code from Jira generated in the first          * step of the authorization proccess.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|verificationCode ( String verificationCode)
specifier|default
name|JiraEndpointProducerBuilder
name|verificationCode
parameter_list|(
name|String
name|verificationCode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"verificationCode"
argument_list|,
name|verificationCode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Jira component.      */
DECL|interface|AdvancedJiraEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedJiraEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|JiraEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|JiraEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJiraEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJiraEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedJiraEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedJiraEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Jira component.      */
DECL|interface|JiraEndpointBuilder
specifier|public
interface|interface
name|JiraEndpointBuilder
extends|extends
name|JiraEndpointConsumerBuilder
extends|,
name|JiraEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJiraEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJiraEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Operation to perform. Consumers: NewIssues, NewComments. Producers:          * AddIssue, AttachFile, DeleteIssue, TransitionIssue, UpdateIssue,          * Watchers. See this class javadoc description for more information.          *           * The option is a:          *<code>org.apache.camel.component.jira.JiraType</code> type.          *           * Group: common          */
DECL|method|type (JiraType type)
specifier|default
name|JiraEndpointBuilder
name|type
parameter_list|(
name|JiraType
name|type
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Operation to perform. Consumers: NewIssues, NewComments. Producers:          * AddIssue, AttachFile, DeleteIssue, TransitionIssue, UpdateIssue,          * Watchers. See this class javadoc description for more information.          *           * The option will be converted to a          *<code>org.apache.camel.component.jira.JiraType</code> type.          *           * Group: common          */
DECL|method|type (String type)
specifier|default
name|JiraEndpointBuilder
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time in milliseconds to elapse for the next poll.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|delay (Integer delay)
specifier|default
name|JiraEndpointBuilder
name|delay
parameter_list|(
name|Integer
name|delay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time in milliseconds to elapse for the next poll.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|delay (String delay)
specifier|default
name|JiraEndpointBuilder
name|delay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Jira server url, example: http://my_jira.com:8081.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: common          */
DECL|method|jiraUrl (String jiraUrl)
specifier|default
name|JiraEndpointBuilder
name|jiraUrl
parameter_list|(
name|String
name|jiraUrl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jiraUrl"
argument_list|,
name|jiraUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (OAuth only) The access token generated by the Jira server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessToken (String accessToken)
specifier|default
name|JiraEndpointBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (OAuth only) The consumer key from Jira settings.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|consumerKey (String consumerKey)
specifier|default
name|JiraEndpointBuilder
name|consumerKey
parameter_list|(
name|String
name|consumerKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"consumerKey"
argument_list|,
name|consumerKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (Basic authentication only) The password to authenticate to the Jira          * server. Use only if username basic authentication is used.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|JiraEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (OAuth only) The private key generated by the client to encrypt the          * conversation to the server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|privateKey (String privateKey)
specifier|default
name|JiraEndpointBuilder
name|privateKey
parameter_list|(
name|String
name|privateKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"privateKey"
argument_list|,
name|privateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (Basic authentication only) The username to authenticate to the Jira          * server. Use only if OAuth is not enabled on the Jira server. Do not          * set the username and OAuth token parameter, if they are both set, the          * username basic authentication takes precedence.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|JiraEndpointBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * (OAuth only) The verification code from Jira generated in the first          * step of the authorization proccess.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|verificationCode (String verificationCode)
specifier|default
name|JiraEndpointBuilder
name|verificationCode
parameter_list|(
name|String
name|verificationCode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"verificationCode"
argument_list|,
name|verificationCode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Jira component.      */
DECL|interface|AdvancedJiraEndpointBuilder
specifier|public
interface|interface
name|AdvancedJiraEndpointBuilder
extends|extends
name|AdvancedJiraEndpointConsumerBuilder
extends|,
name|AdvancedJiraEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|JiraEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|JiraEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJiraEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJiraEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedJiraEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedJiraEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for<code>org.apache.camel.component.jira.JiraType</code>      * enum.      */
DECL|enum|JiraType
enum|enum
name|JiraType
block|{
DECL|enumConstant|ADDCOMMENT
name|ADDCOMMENT
block|,
DECL|enumConstant|ADDISSUE
name|ADDISSUE
block|,
DECL|enumConstant|ATTACH
name|ATTACH
block|,
DECL|enumConstant|DELETEISSUE
name|DELETEISSUE
block|,
DECL|enumConstant|NEWISSUES
name|NEWISSUES
block|,
DECL|enumConstant|NEWCOMMENTS
name|NEWCOMMENTS
block|,
DECL|enumConstant|UPDATEISSUE
name|UPDATEISSUE
block|,
DECL|enumConstant|TRANSITIONISSUE
name|TRANSITIONISSUE
block|,
DECL|enumConstant|WATCHERS
name|WATCHERS
block|;     }
comment|/**      * Jira (camel-jira)      * The jira component interacts with the JIRA issue tracker.      *       * Syntax:<code>jira:type</code>      * Category: api,reporting      * Available as of version: 3.0      * Maven coordinates: org.apache.camel:camel-jira      */
DECL|method|jira (String path)
specifier|default
name|JiraEndpointBuilder
name|jira
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|JiraEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|JiraEndpointBuilder
implements|,
name|AdvancedJiraEndpointBuilder
block|{
specifier|public
name|JiraEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"jira"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|JiraEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

