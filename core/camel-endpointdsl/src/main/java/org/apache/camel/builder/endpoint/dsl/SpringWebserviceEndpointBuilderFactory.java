begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The spring-ws component is used for SOAP WebServices using Spring  * WebServices.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|SpringWebserviceEndpointBuilderFactory
specifier|public
interface|interface
name|SpringWebserviceEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Spring WebService component.      */
DECL|interface|SpringWebserviceEndpointConsumerBuilder
specifier|public
interface|interface
name|SpringWebserviceEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSpringWebserviceEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSpringWebserviceEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Option to provide a custom MessageFilter. For example when you want          * to process your headers or attachments by your own.          *           * The option is a:          *<code>org.apache.camel.component.spring.ws.filter.MessageFilter</code> type.          *           * Group: common          */
DECL|method|messageFilter ( Object messageFilter)
specifier|default
name|SpringWebserviceEndpointConsumerBuilder
name|messageFilter
parameter_list|(
name|Object
name|messageFilter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageFilter"
argument_list|,
name|messageFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to provide a custom MessageFilter. For example when you want          * to process your headers or attachments by your own.          *           * The option will be converted to a          *<code>org.apache.camel.component.spring.ws.filter.MessageFilter</code> type.          *           * Group: common          */
DECL|method|messageFilter ( String messageFilter)
specifier|default
name|SpringWebserviceEndpointConsumerBuilder
name|messageFilter
parameter_list|(
name|String
name|messageFilter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageFilter"
argument_list|,
name|messageFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|SpringWebserviceEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|SpringWebserviceEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Spring org.springframework.ws.server.endpoint.MessageEndpoint for          * dispatching messages received by Spring-WS to a Camel endpoint, to          * integrate with existing (legacy) endpoint mappings like          * PayloadRootQNameEndpointMapping, SoapActionEndpointMapping, etc.          *           * The option is a:          *<code>org.apache.camel.component.spring.ws.bean.CamelEndpointDispatcher</code> type.          *           * Group: consumer          */
DECL|method|endpointDispatcher ( Object endpointDispatcher)
specifier|default
name|SpringWebserviceEndpointConsumerBuilder
name|endpointDispatcher
parameter_list|(
name|Object
name|endpointDispatcher
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"endpointDispatcher"
argument_list|,
name|endpointDispatcher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Spring org.springframework.ws.server.endpoint.MessageEndpoint for          * dispatching messages received by Spring-WS to a Camel endpoint, to          * integrate with existing (legacy) endpoint mappings like          * PayloadRootQNameEndpointMapping, SoapActionEndpointMapping, etc.          *           * The option will be converted to a          *<code>org.apache.camel.component.spring.ws.bean.CamelEndpointDispatcher</code> type.          *           * Group: consumer          */
DECL|method|endpointDispatcher ( String endpointDispatcher)
specifier|default
name|SpringWebserviceEndpointConsumerBuilder
name|endpointDispatcher
parameter_list|(
name|String
name|endpointDispatcher
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"endpointDispatcher"
argument_list|,
name|endpointDispatcher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to an instance of          * org.apache.camel.component.spring.ws.bean.CamelEndpointMapping in the          * Registry/ApplicationContext. Only one bean is required in the          * registry to serve all Camel/Spring-WS endpoints. This bean is          * auto-discovered by the MessageDispatcher and used to map requests to          * Camel endpoints based on characteristics specified on the endpoint          * (like root QName, SOAP action, etc).          *           * The option is a:          *<code>org.apache.camel.component.spring.ws.bean.CamelSpringWSEndpointMapping</code> type.          *           * Group: consumer          */
DECL|method|endpointMapping ( Object endpointMapping)
specifier|default
name|SpringWebserviceEndpointConsumerBuilder
name|endpointMapping
parameter_list|(
name|Object
name|endpointMapping
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"endpointMapping"
argument_list|,
name|endpointMapping
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to an instance of          * org.apache.camel.component.spring.ws.bean.CamelEndpointMapping in the          * Registry/ApplicationContext. Only one bean is required in the          * registry to serve all Camel/Spring-WS endpoints. This bean is          * auto-discovered by the MessageDispatcher and used to map requests to          * Camel endpoints based on characteristics specified on the endpoint          * (like root QName, SOAP action, etc).          *           * The option will be converted to a          *<code>org.apache.camel.component.spring.ws.bean.CamelSpringWSEndpointMapping</code> type.          *           * Group: consumer          */
DECL|method|endpointMapping ( String endpointMapping)
specifier|default
name|SpringWebserviceEndpointConsumerBuilder
name|endpointMapping
parameter_list|(
name|String
name|endpointMapping
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"endpointMapping"
argument_list|,
name|endpointMapping
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|SpringWebserviceEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|SpringWebserviceEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Spring WebService      * component.      */
DECL|interface|AdvancedSpringWebserviceEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedSpringWebserviceEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SpringWebserviceEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SpringWebserviceEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedSpringWebserviceEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedSpringWebserviceEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedSpringWebserviceEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedSpringWebserviceEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSpringWebserviceEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSpringWebserviceEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSpringWebserviceEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedSpringWebserviceEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Spring WebService component.      */
DECL|interface|SpringWebserviceEndpointProducerBuilder
specifier|public
interface|interface
name|SpringWebserviceEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSpringWebserviceEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSpringWebserviceEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Option to provide a custom MessageFilter. For example when you want          * to process your headers or attachments by your own.          *           * The option is a:          *<code>org.apache.camel.component.spring.ws.filter.MessageFilter</code> type.          *           * Group: common          */
DECL|method|messageFilter ( Object messageFilter)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|messageFilter
parameter_list|(
name|Object
name|messageFilter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageFilter"
argument_list|,
name|messageFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to provide a custom MessageFilter. For example when you want          * to process your headers or attachments by your own.          *           * The option will be converted to a          *<code>org.apache.camel.component.spring.ws.filter.MessageFilter</code> type.          *           * Group: common          */
DECL|method|messageFilter ( String messageFilter)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|messageFilter
parameter_list|(
name|String
name|messageFilter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageFilter"
argument_list|,
name|messageFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to override soap response attachments in in/out exchange with          * attachments from the actual service layer. If the invoked service          * appends or rewrites the soap attachments this option when set to          * true, allows the modified soap attachments to be overwritten in          * in/out message attachments.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|allowResponseAttachmentOverride ( boolean allowResponseAttachmentOverride)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|allowResponseAttachmentOverride
parameter_list|(
name|boolean
name|allowResponseAttachmentOverride
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowResponseAttachmentOverride"
argument_list|,
name|allowResponseAttachmentOverride
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to override soap response attachments in in/out exchange with          * attachments from the actual service layer. If the invoked service          * appends or rewrites the soap attachments this option when set to          * true, allows the modified soap attachments to be overwritten in          * in/out message attachments.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|allowResponseAttachmentOverride ( String allowResponseAttachmentOverride)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|allowResponseAttachmentOverride
parameter_list|(
name|String
name|allowResponseAttachmentOverride
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowResponseAttachmentOverride"
argument_list|,
name|allowResponseAttachmentOverride
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to override soap response header in in/out exchange with          * header info from the actual service layer. If the invoked service          * appends or rewrites the soap header this option when set to true,          * allows the modified soap header to be overwritten in in/out message          * headers.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|allowResponseHeaderOverride ( boolean allowResponseHeaderOverride)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|allowResponseHeaderOverride
parameter_list|(
name|boolean
name|allowResponseHeaderOverride
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowResponseHeaderOverride"
argument_list|,
name|allowResponseHeaderOverride
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to override soap response header in in/out exchange with          * header info from the actual service layer. If the invoked service          * appends or rewrites the soap header this option when set to true,          * allows the modified soap header to be overwritten in in/out message          * headers.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|allowResponseHeaderOverride ( String allowResponseHeaderOverride)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|allowResponseHeaderOverride
parameter_list|(
name|String
name|allowResponseHeaderOverride
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowResponseHeaderOverride"
argument_list|,
name|allowResponseHeaderOverride
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Signifies the value for the faultAction response WS-Addressing Fault          * Action header that is provided by the method.          *           * The option is a:<code>java.net.URI</code> type.          *           * Group: producer          */
DECL|method|faultAction ( URI faultAction)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|faultAction
parameter_list|(
name|URI
name|faultAction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"faultAction"
argument_list|,
name|faultAction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Signifies the value for the faultAction response WS-Addressing Fault          * Action header that is provided by the method.          *           * The option will be converted to a<code>java.net.URI</code> type.          *           * Group: producer          */
DECL|method|faultAction ( String faultAction)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|faultAction
parameter_list|(
name|String
name|faultAction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"faultAction"
argument_list|,
name|faultAction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Signifies the value for the faultAction response WS-Addressing          * FaultTo header that is provided by the method.          *           * The option is a:<code>java.net.URI</code> type.          *           * Group: producer          */
DECL|method|faultTo (URI faultTo)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|faultTo
parameter_list|(
name|URI
name|faultTo
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"faultTo"
argument_list|,
name|faultTo
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Signifies the value for the faultAction response WS-Addressing          * FaultTo header that is provided by the method.          *           * The option will be converted to a<code>java.net.URI</code> type.          *           * Group: producer          */
DECL|method|faultTo (String faultTo)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|faultTo
parameter_list|(
name|String
name|faultTo
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"faultTo"
argument_list|,
name|faultTo
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to provide a custom WebServiceMessageFactory. For example when          * you want Apache Axiom to handle web service messages instead of SAAJ.          *           * The option is a:          *<code>org.springframework.ws.WebServiceMessageFactory</code> type.          *           * Group: producer          */
DECL|method|messageFactory ( Object messageFactory)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|messageFactory
parameter_list|(
name|Object
name|messageFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageFactory"
argument_list|,
name|messageFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to provide a custom WebServiceMessageFactory. For example when          * you want Apache Axiom to handle web service messages instead of SAAJ.          *           * The option will be converted to a          *<code>org.springframework.ws.WebServiceMessageFactory</code> type.          *           * Group: producer          */
DECL|method|messageFactory ( String messageFactory)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|messageFactory
parameter_list|(
name|String
name|messageFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageFactory"
argument_list|,
name|messageFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to provide a custom MessageIdStrategy to control generation of          * unique message ids.          *           * The option is a:          *<code>org.springframework.ws.soap.addressing.messageid.MessageIdStrategy</code> type.          *           * Group: producer          */
DECL|method|messageIdStrategy ( Object messageIdStrategy)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|messageIdStrategy
parameter_list|(
name|Object
name|messageIdStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageIdStrategy"
argument_list|,
name|messageIdStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to provide a custom MessageIdStrategy to control generation of          * unique message ids.          *           * The option will be converted to a          *<code>org.springframework.ws.soap.addressing.messageid.MessageIdStrategy</code> type.          *           * Group: producer          */
DECL|method|messageIdStrategy ( String messageIdStrategy)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|messageIdStrategy
parameter_list|(
name|String
name|messageIdStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageIdStrategy"
argument_list|,
name|messageIdStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to provide a custom WebServiceMessageSender. For example to          * perform authentication or use alternative transports.          *           * The option is a:          *<code>org.springframework.ws.transport.WebServiceMessageSender</code>          * type.          *           * Group: producer          */
DECL|method|messageSender ( Object messageSender)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|messageSender
parameter_list|(
name|Object
name|messageSender
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageSender"
argument_list|,
name|messageSender
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to provide a custom WebServiceMessageSender. For example to          * perform authentication or use alternative transports.          *           * The option will be converted to a          *<code>org.springframework.ws.transport.WebServiceMessageSender</code>          * type.          *           * Group: producer          */
DECL|method|messageSender ( String messageSender)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|messageSender
parameter_list|(
name|String
name|messageSender
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageSender"
argument_list|,
name|messageSender
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Signifies the value for the response WS-Addressing Action header that          * is provided by the method.          *           * The option is a:<code>java.net.URI</code> type.          *           * Group: producer          */
DECL|method|outputAction ( URI outputAction)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|outputAction
parameter_list|(
name|URI
name|outputAction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputAction"
argument_list|,
name|outputAction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Signifies the value for the response WS-Addressing Action header that          * is provided by the method.          *           * The option will be converted to a<code>java.net.URI</code> type.          *           * Group: producer          */
DECL|method|outputAction ( String outputAction)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|outputAction
parameter_list|(
name|String
name|outputAction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputAction"
argument_list|,
name|outputAction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Signifies the value for the replyTo response WS-Addressing ReplyTo          * header that is provided by the method.          *           * The option is a:<code>java.net.URI</code> type.          *           * Group: producer          */
DECL|method|replyTo (URI replyTo)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|replyTo
parameter_list|(
name|URI
name|replyTo
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"replyTo"
argument_list|,
name|replyTo
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Signifies the value for the replyTo response WS-Addressing ReplyTo          * header that is provided by the method.          *           * The option will be converted to a<code>java.net.URI</code> type.          *           * Group: producer          */
DECL|method|replyTo (String replyTo)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|replyTo
parameter_list|(
name|String
name|replyTo
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"replyTo"
argument_list|,
name|replyTo
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * SOAP action to include inside a SOAP request when accessing remote          * web services.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|soapAction ( String soapAction)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|soapAction
parameter_list|(
name|String
name|soapAction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"soapAction"
argument_list|,
name|soapAction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the socket read timeout (in milliseconds) while invoking a          * webservice using the producer, see URLConnection.setReadTimeout() and          * CommonsHttpMessageSender.setReadTimeout(). This option works when          * using the built-in message sender implementations:          * CommonsHttpMessageSender and HttpUrlConnectionMessageSender. One of          * these implementations will be used by default for HTTP based services          * unless you customize the Spring WS configuration options supplied to          * the component. If you are using a non-standard sender, it is assumed          * that you will handle your own timeout configuration. The built-in          * message sender HttpComponentsMessageSender is considered instead of          * CommonsHttpMessageSender which has been deprecated, see          * HttpComponentsMessageSender.setReadTimeout().          *           * The option is a:<code>int</code> type.          *           * Group: producer          */
DECL|method|timeout (int timeout)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|timeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the socket read timeout (in milliseconds) while invoking a          * webservice using the producer, see URLConnection.setReadTimeout() and          * CommonsHttpMessageSender.setReadTimeout(). This option works when          * using the built-in message sender implementations:          * CommonsHttpMessageSender and HttpUrlConnectionMessageSender. One of          * these implementations will be used by default for HTTP based services          * unless you customize the Spring WS configuration options supplied to          * the component. If you are using a non-standard sender, it is assumed          * that you will handle your own timeout configuration. The built-in          * message sender HttpComponentsMessageSender is considered instead of          * CommonsHttpMessageSender which has been deprecated, see          * HttpComponentsMessageSender.setReadTimeout().          *           * The option will be converted to a<code>int</code> type.          *           * Group: producer          */
DECL|method|timeout (String timeout)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to provide a custom WebServiceTemplate. This allows for full          * control over client-side web services handling; like adding a custom          * interceptor or specifying a fault resolver, message sender or message          * factory.          *           * The option is a:          *<code>org.springframework.ws.client.core.WebServiceTemplate</code>          * type.          *           * Group: producer          */
DECL|method|webServiceTemplate ( Object webServiceTemplate)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|webServiceTemplate
parameter_list|(
name|Object
name|webServiceTemplate
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"webServiceTemplate"
argument_list|,
name|webServiceTemplate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to provide a custom WebServiceTemplate. This allows for full          * control over client-side web services handling; like adding a custom          * interceptor or specifying a fault resolver, message sender or message          * factory.          *           * The option will be converted to a          *<code>org.springframework.ws.client.core.WebServiceTemplate</code>          * type.          *           * Group: producer          */
DECL|method|webServiceTemplate ( String webServiceTemplate)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|webServiceTemplate
parameter_list|(
name|String
name|webServiceTemplate
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"webServiceTemplate"
argument_list|,
name|webServiceTemplate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * WS-Addressing 1.0 action header to include when accessing web          * services. The To header is set to the address of the web service as          * specified in the endpoint URI (default Spring-WS behavior).          *           * The option is a:<code>java.net.URI</code> type.          *           * Group: producer          */
DECL|method|wsAddressingAction ( URI wsAddressingAction)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|wsAddressingAction
parameter_list|(
name|URI
name|wsAddressingAction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"wsAddressingAction"
argument_list|,
name|wsAddressingAction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * WS-Addressing 1.0 action header to include when accessing web          * services. The To header is set to the address of the web service as          * specified in the endpoint URI (default Spring-WS behavior).          *           * The option will be converted to a<code>java.net.URI</code> type.          *           * Group: producer          */
DECL|method|wsAddressingAction ( String wsAddressingAction)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|wsAddressingAction
parameter_list|(
name|String
name|wsAddressingAction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"wsAddressingAction"
argument_list|,
name|wsAddressingAction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Spring WebService      * component.      */
DECL|interface|AdvancedSpringWebserviceEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedSpringWebserviceEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SpringWebserviceEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SpringWebserviceEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSpringWebserviceEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSpringWebserviceEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSpringWebserviceEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedSpringWebserviceEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Spring WebService component.      */
DECL|interface|SpringWebserviceEndpointBuilder
specifier|public
interface|interface
name|SpringWebserviceEndpointBuilder
extends|extends
name|SpringWebserviceEndpointConsumerBuilder
extends|,
name|SpringWebserviceEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSpringWebserviceEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSpringWebserviceEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Option to provide a custom MessageFilter. For example when you want          * to process your headers or attachments by your own.          *           * The option is a:          *<code>org.apache.camel.component.spring.ws.filter.MessageFilter</code> type.          *           * Group: common          */
DECL|method|messageFilter ( Object messageFilter)
specifier|default
name|SpringWebserviceEndpointBuilder
name|messageFilter
parameter_list|(
name|Object
name|messageFilter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageFilter"
argument_list|,
name|messageFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to provide a custom MessageFilter. For example when you want          * to process your headers or attachments by your own.          *           * The option will be converted to a          *<code>org.apache.camel.component.spring.ws.filter.MessageFilter</code> type.          *           * Group: common          */
DECL|method|messageFilter ( String messageFilter)
specifier|default
name|SpringWebserviceEndpointBuilder
name|messageFilter
parameter_list|(
name|String
name|messageFilter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageFilter"
argument_list|,
name|messageFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|SpringWebserviceEndpointBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|SpringWebserviceEndpointBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Spring WebService component.      */
DECL|interface|AdvancedSpringWebserviceEndpointBuilder
specifier|public
interface|interface
name|AdvancedSpringWebserviceEndpointBuilder
extends|extends
name|AdvancedSpringWebserviceEndpointConsumerBuilder
extends|,
name|AdvancedSpringWebserviceEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SpringWebserviceEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SpringWebserviceEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSpringWebserviceEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSpringWebserviceEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSpringWebserviceEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedSpringWebserviceEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Spring WebService (camel-spring-ws)      * The spring-ws component is used for SOAP WebServices using Spring      * WebServices.      *       * Category: spring,soap,webservice      * Available as of version: 2.6      * Maven coordinates: org.apache.camel:camel-spring-ws      *       * Syntax:<code>spring-ws:type:lookupKey:webServiceEndpointUri</code>      *       * Path parameter: type      * Endpoint mapping type if endpoint mapping is used. rootqname - Offers the      * option to map web service requests based on the qualified name of the      * root element contained in the message. soapaction - Used to map web      * service requests based on the SOAP action specified in the header of the      * message. uri - In order to map web service requests that target a      * specific URI. xpathresult - Used to map web service requests based on the      * evaluation of an XPath expression against the incoming message. The      * result of the evaluation should match the XPath result specified in the      * endpoint URI. beanname - Allows you to reference an      * org.apache.camel.component.spring.ws.bean.CamelEndpointDispatcher object      * in order to integrate with existing (legacy) endpoint mappings like      * PayloadRootQNameEndpointMapping, SoapActionEndpointMapping, etc      * The value can be one of: ROOT_QNAME, ACTION, TO, SOAP_ACTION,      * XPATHRESULT, URI, URI_PATH, BEANNAME      *       * Path parameter: lookupKey      * Endpoint mapping key if endpoint mapping is used      *       * Path parameter: webServiceEndpointUri      * The default Web Service endpoint uri to use for the producer.      *       * Path parameter: expression      * The XPath expression to use when option type=xpathresult. Then this      * option is required to be configured.      */
DECL|method|springWs (String path)
specifier|default
name|SpringWebserviceEndpointBuilder
name|springWs
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|SpringWebserviceEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|SpringWebserviceEndpointBuilder
implements|,
name|AdvancedSpringWebserviceEndpointBuilder
block|{
specifier|public
name|SpringWebserviceEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"spring-ws"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SpringWebserviceEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

