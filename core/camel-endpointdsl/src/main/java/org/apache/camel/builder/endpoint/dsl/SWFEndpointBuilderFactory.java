begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The aws-swf component is used for managing workflows from Amazon Simple  * Workflow.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|SWFEndpointBuilderFactory
specifier|public
interface|interface
name|SWFEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the AWS Simple Workflow component.      */
DECL|interface|SWFEndpointConsumerBuilder
specifier|public
interface|interface
name|SWFEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSWFEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSWFEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To use the given AmazonSimpleWorkflowClient as client.          *           * The option is a:          *<code>com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflowClient</code> type.          *           * Group: common          */
DECL|method|amazonSWClient (Object amazonSWClient)
specifier|default
name|SWFEndpointConsumerBuilder
name|amazonSWClient
parameter_list|(
name|Object
name|amazonSWClient
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"amazonSWClient"
argument_list|,
name|amazonSWClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the given AmazonSimpleWorkflowClient as client.          *           * The option will be converted to a          *<code>com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflowClient</code> type.          *           * Group: common          */
DECL|method|amazonSWClient (String amazonSWClient)
specifier|default
name|SWFEndpointConsumerBuilder
name|amazonSWClient
parameter_list|(
name|String
name|amazonSWClient
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"amazonSWClient"
argument_list|,
name|amazonSWClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An instance of          * com.amazonaws.services.simpleworkflow.flow.DataConverter to use for          * serializing/deserializing the data.          *           * The option is a:          *<code>com.amazonaws.services.simpleworkflow.flow.DataConverter</code>          * type.          *           * Group: common          */
DECL|method|dataConverter (Object dataConverter)
specifier|default
name|SWFEndpointConsumerBuilder
name|dataConverter
parameter_list|(
name|Object
name|dataConverter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataConverter"
argument_list|,
name|dataConverter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An instance of          * com.amazonaws.services.simpleworkflow.flow.DataConverter to use for          * serializing/deserializing the data.          *           * The option will be converted to a          *<code>com.amazonaws.services.simpleworkflow.flow.DataConverter</code>          * type.          *           * Group: common          */
DECL|method|dataConverter (String dataConverter)
specifier|default
name|SWFEndpointConsumerBuilder
name|dataConverter
parameter_list|(
name|String
name|dataConverter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataConverter"
argument_list|,
name|dataConverter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The workflow domain to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|domainName (String domainName)
specifier|default
name|SWFEndpointConsumerBuilder
name|domainName
parameter_list|(
name|String
name|domainName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"domainName"
argument_list|,
name|domainName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The workflow or activity event name to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|eventName (String eventName)
specifier|default
name|SWFEndpointConsumerBuilder
name|eventName
parameter_list|(
name|String
name|eventName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventName"
argument_list|,
name|eventName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Region. When using this parameter, the configuration will          * expect the capitalized name of the region (for example AP_EAST_1)          * You'll need to use the name Regions.EU_WEST_1.name().          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|region (String region)
specifier|default
name|SWFEndpointConsumerBuilder
name|region
parameter_list|(
name|String
name|region
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"region"
argument_list|,
name|region
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The workflow or activity event version to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|version (String version)
specifier|default
name|SWFEndpointConsumerBuilder
name|version
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|SWFEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|SWFEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The list name to consume activities from.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: activity          */
DECL|method|activityList (String activityList)
specifier|default
name|SWFEndpointConsumerBuilder
name|activityList
parameter_list|(
name|String
name|activityList
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"activityList"
argument_list|,
name|activityList
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum number of threads in work pool for activity.          *           * The option is a:<code>int</code> type.          *           * Group: activity          */
DECL|method|activityThreadPoolSize ( int activityThreadPoolSize)
specifier|default
name|SWFEndpointConsumerBuilder
name|activityThreadPoolSize
parameter_list|(
name|int
name|activityThreadPoolSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"activityThreadPoolSize"
argument_list|,
name|activityThreadPoolSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum number of threads in work pool for activity.          *           * The option will be converted to a<code>int</code> type.          *           * Group: activity          */
DECL|method|activityThreadPoolSize ( String activityThreadPoolSize)
specifier|default
name|SWFEndpointConsumerBuilder
name|activityThreadPoolSize
parameter_list|(
name|String
name|activityThreadPoolSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"activityThreadPoolSize"
argument_list|,
name|activityThreadPoolSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Activity execution options.          *           * The option is a:          *<code>com.amazonaws.services.simpleworkflow.flow.worker.ActivityTypeExecutionOptions</code> type.          *           * Group: activity          */
DECL|method|activityTypeExecutionOptions ( Object activityTypeExecutionOptions)
specifier|default
name|SWFEndpointConsumerBuilder
name|activityTypeExecutionOptions
parameter_list|(
name|Object
name|activityTypeExecutionOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"activityTypeExecutionOptions"
argument_list|,
name|activityTypeExecutionOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Activity execution options.          *           * The option will be converted to a          *<code>com.amazonaws.services.simpleworkflow.flow.worker.ActivityTypeExecutionOptions</code> type.          *           * Group: activity          */
DECL|method|activityTypeExecutionOptions ( String activityTypeExecutionOptions)
specifier|default
name|SWFEndpointConsumerBuilder
name|activityTypeExecutionOptions
parameter_list|(
name|String
name|activityTypeExecutionOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"activityTypeExecutionOptions"
argument_list|,
name|activityTypeExecutionOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Activity registration options.          *           * The option is a:          *<code>com.amazonaws.services.simpleworkflow.flow.worker.ActivityTypeRegistrationOptions</code> type.          *           * Group: activity          */
DECL|method|activityTypeRegistrationOptions ( Object activityTypeRegistrationOptions)
specifier|default
name|SWFEndpointConsumerBuilder
name|activityTypeRegistrationOptions
parameter_list|(
name|Object
name|activityTypeRegistrationOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"activityTypeRegistrationOptions"
argument_list|,
name|activityTypeRegistrationOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Activity registration options.          *           * The option will be converted to a          *<code>com.amazonaws.services.simpleworkflow.flow.worker.ActivityTypeRegistrationOptions</code> type.          *           * Group: activity          */
DECL|method|activityTypeRegistrationOptions ( String activityTypeRegistrationOptions)
specifier|default
name|SWFEndpointConsumerBuilder
name|activityTypeRegistrationOptions
parameter_list|(
name|String
name|activityTypeRegistrationOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"activityTypeRegistrationOptions"
argument_list|,
name|activityTypeRegistrationOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The list name to consume workflows from.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: workflow          */
DECL|method|workflowList (String workflowList)
specifier|default
name|SWFEndpointConsumerBuilder
name|workflowList
parameter_list|(
name|String
name|workflowList
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workflowList"
argument_list|,
name|workflowList
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Workflow registration options.          *           * The option is a:          *<code>com.amazonaws.services.simpleworkflow.flow.WorkflowTypeRegistrationOptions</code> type.          *           * Group: workflow          */
DECL|method|workflowTypeRegistrationOptions ( Object workflowTypeRegistrationOptions)
specifier|default
name|SWFEndpointConsumerBuilder
name|workflowTypeRegistrationOptions
parameter_list|(
name|Object
name|workflowTypeRegistrationOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workflowTypeRegistrationOptions"
argument_list|,
name|workflowTypeRegistrationOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Workflow registration options.          *           * The option will be converted to a          *<code>com.amazonaws.services.simpleworkflow.flow.WorkflowTypeRegistrationOptions</code> type.          *           * Group: workflow          */
DECL|method|workflowTypeRegistrationOptions ( String workflowTypeRegistrationOptions)
specifier|default
name|SWFEndpointConsumerBuilder
name|workflowTypeRegistrationOptions
parameter_list|(
name|String
name|workflowTypeRegistrationOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workflowTypeRegistrationOptions"
argument_list|,
name|workflowTypeRegistrationOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Access Key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessKey (String accessKey)
specifier|default
name|SWFEndpointConsumerBuilder
name|accessKey
parameter_list|(
name|String
name|accessKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"accessKey"
argument_list|,
name|accessKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Secret Key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|secretKey (String secretKey)
specifier|default
name|SWFEndpointConsumerBuilder
name|secretKey
parameter_list|(
name|String
name|secretKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"secretKey"
argument_list|,
name|secretKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the AWS Simple Workflow      * component.      */
DECL|interface|AdvancedSWFEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedSWFEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SWFEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SWFEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedSWFEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedSWFEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedSWFEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedSWFEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSWFEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSWFEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the ClientConfiguration using the key/values from the          * Map.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|clientConfigurationParameters ( Map<String, Object> clientConfigurationParameters)
specifier|default
name|AdvancedSWFEndpointConsumerBuilder
name|clientConfigurationParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|clientConfigurationParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientConfigurationParameters"
argument_list|,
name|clientConfigurationParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the ClientConfiguration using the key/values from the          * Map.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|clientConfigurationParameters ( String clientConfigurationParameters)
specifier|default
name|AdvancedSWFEndpointConsumerBuilder
name|clientConfigurationParameters
parameter_list|(
name|String
name|clientConfigurationParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientConfigurationParameters"
argument_list|,
name|clientConfigurationParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the StartWorkflowOptions using the key/values from the          * Map.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|startWorkflowOptionsParameters ( Map<String, Object> startWorkflowOptionsParameters)
specifier|default
name|AdvancedSWFEndpointConsumerBuilder
name|startWorkflowOptionsParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|startWorkflowOptionsParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startWorkflowOptionsParameters"
argument_list|,
name|startWorkflowOptionsParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the StartWorkflowOptions using the key/values from the          * Map.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|startWorkflowOptionsParameters ( String startWorkflowOptionsParameters)
specifier|default
name|AdvancedSWFEndpointConsumerBuilder
name|startWorkflowOptionsParameters
parameter_list|(
name|String
name|startWorkflowOptionsParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startWorkflowOptionsParameters"
argument_list|,
name|startWorkflowOptionsParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the AmazonSimpleWorkflowClient using the key/values from          * the Map.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|sWClientParameters ( Map<String, Object> sWClientParameters)
specifier|default
name|AdvancedSWFEndpointConsumerBuilder
name|sWClientParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sWClientParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sWClientParameters"
argument_list|,
name|sWClientParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the AmazonSimpleWorkflowClient using the key/values from          * the Map.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|sWClientParameters ( String sWClientParameters)
specifier|default
name|AdvancedSWFEndpointConsumerBuilder
name|sWClientParameters
parameter_list|(
name|String
name|sWClientParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sWClientParameters"
argument_list|,
name|sWClientParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSWFEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedSWFEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the AWS Simple Workflow component.      */
DECL|interface|SWFEndpointProducerBuilder
specifier|public
interface|interface
name|SWFEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSWFEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSWFEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To use the given AmazonSimpleWorkflowClient as client.          *           * The option is a:          *<code>com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflowClient</code> type.          *           * Group: common          */
DECL|method|amazonSWClient (Object amazonSWClient)
specifier|default
name|SWFEndpointProducerBuilder
name|amazonSWClient
parameter_list|(
name|Object
name|amazonSWClient
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"amazonSWClient"
argument_list|,
name|amazonSWClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the given AmazonSimpleWorkflowClient as client.          *           * The option will be converted to a          *<code>com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflowClient</code> type.          *           * Group: common          */
DECL|method|amazonSWClient (String amazonSWClient)
specifier|default
name|SWFEndpointProducerBuilder
name|amazonSWClient
parameter_list|(
name|String
name|amazonSWClient
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"amazonSWClient"
argument_list|,
name|amazonSWClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An instance of          * com.amazonaws.services.simpleworkflow.flow.DataConverter to use for          * serializing/deserializing the data.          *           * The option is a:          *<code>com.amazonaws.services.simpleworkflow.flow.DataConverter</code>          * type.          *           * Group: common          */
DECL|method|dataConverter (Object dataConverter)
specifier|default
name|SWFEndpointProducerBuilder
name|dataConverter
parameter_list|(
name|Object
name|dataConverter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataConverter"
argument_list|,
name|dataConverter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An instance of          * com.amazonaws.services.simpleworkflow.flow.DataConverter to use for          * serializing/deserializing the data.          *           * The option will be converted to a          *<code>com.amazonaws.services.simpleworkflow.flow.DataConverter</code>          * type.          *           * Group: common          */
DECL|method|dataConverter (String dataConverter)
specifier|default
name|SWFEndpointProducerBuilder
name|dataConverter
parameter_list|(
name|String
name|dataConverter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataConverter"
argument_list|,
name|dataConverter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The workflow domain to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|domainName (String domainName)
specifier|default
name|SWFEndpointProducerBuilder
name|domainName
parameter_list|(
name|String
name|domainName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"domainName"
argument_list|,
name|domainName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The workflow or activity event name to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|eventName (String eventName)
specifier|default
name|SWFEndpointProducerBuilder
name|eventName
parameter_list|(
name|String
name|eventName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventName"
argument_list|,
name|eventName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Region. When using this parameter, the configuration will          * expect the capitalized name of the region (for example AP_EAST_1)          * You'll need to use the name Regions.EU_WEST_1.name().          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|region (String region)
specifier|default
name|SWFEndpointProducerBuilder
name|region
parameter_list|(
name|String
name|region
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"region"
argument_list|,
name|region
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The workflow or activity event version to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|version (String version)
specifier|default
name|SWFEndpointProducerBuilder
name|version
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|SWFEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|SWFEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Activity scheduling options.          *           * The option is a:          *<code>com.amazonaws.services.simpleworkflow.flow.ActivitySchedulingOptions</code> type.          *           * Group: activity          */
DECL|method|activitySchedulingOptions ( Object activitySchedulingOptions)
specifier|default
name|SWFEndpointProducerBuilder
name|activitySchedulingOptions
parameter_list|(
name|Object
name|activitySchedulingOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"activitySchedulingOptions"
argument_list|,
name|activitySchedulingOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Activity scheduling options.          *           * The option will be converted to a          *<code>com.amazonaws.services.simpleworkflow.flow.ActivitySchedulingOptions</code> type.          *           * Group: activity          */
DECL|method|activitySchedulingOptions ( String activitySchedulingOptions)
specifier|default
name|SWFEndpointProducerBuilder
name|activitySchedulingOptions
parameter_list|(
name|String
name|activitySchedulingOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"activitySchedulingOptions"
argument_list|,
name|activitySchedulingOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The policy to use on child workflows when terminating a workflow.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: workflow          */
DECL|method|childPolicy (String childPolicy)
specifier|default
name|SWFEndpointProducerBuilder
name|childPolicy
parameter_list|(
name|String
name|childPolicy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"childPolicy"
argument_list|,
name|childPolicy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the execution start to close timeout.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: workflow          */
DECL|method|executionStartToCloseTimeout ( String executionStartToCloseTimeout)
specifier|default
name|SWFEndpointProducerBuilder
name|executionStartToCloseTimeout
parameter_list|(
name|String
name|executionStartToCloseTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"executionStartToCloseTimeout"
argument_list|,
name|executionStartToCloseTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Workflow operation.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: workflow          */
DECL|method|operation (String operation)
specifier|default
name|SWFEndpointProducerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the signal to send to the workflow.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: workflow          */
DECL|method|signalName (String signalName)
specifier|default
name|SWFEndpointProducerBuilder
name|signalName
parameter_list|(
name|String
name|signalName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"signalName"
argument_list|,
name|signalName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The type of the result when a workflow state is queried.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: workflow          */
DECL|method|stateResultType ( String stateResultType)
specifier|default
name|SWFEndpointProducerBuilder
name|stateResultType
parameter_list|(
name|String
name|stateResultType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"stateResultType"
argument_list|,
name|stateResultType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the task start to close timeout.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: workflow          */
DECL|method|taskStartToCloseTimeout ( String taskStartToCloseTimeout)
specifier|default
name|SWFEndpointProducerBuilder
name|taskStartToCloseTimeout
parameter_list|(
name|String
name|taskStartToCloseTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"taskStartToCloseTimeout"
argument_list|,
name|taskStartToCloseTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Details for terminating a workflow.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: workflow          */
DECL|method|terminationDetails ( String terminationDetails)
specifier|default
name|SWFEndpointProducerBuilder
name|terminationDetails
parameter_list|(
name|String
name|terminationDetails
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"terminationDetails"
argument_list|,
name|terminationDetails
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The reason for terminating a workflow.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: workflow          */
DECL|method|terminationReason ( String terminationReason)
specifier|default
name|SWFEndpointProducerBuilder
name|terminationReason
parameter_list|(
name|String
name|terminationReason
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"terminationReason"
argument_list|,
name|terminationReason
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Access Key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessKey (String accessKey)
specifier|default
name|SWFEndpointProducerBuilder
name|accessKey
parameter_list|(
name|String
name|accessKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"accessKey"
argument_list|,
name|accessKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Secret Key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|secretKey (String secretKey)
specifier|default
name|SWFEndpointProducerBuilder
name|secretKey
parameter_list|(
name|String
name|secretKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"secretKey"
argument_list|,
name|secretKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the AWS Simple Workflow      * component.      */
DECL|interface|AdvancedSWFEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedSWFEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SWFEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SWFEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSWFEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSWFEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the ClientConfiguration using the key/values from the          * Map.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|clientConfigurationParameters ( Map<String, Object> clientConfigurationParameters)
specifier|default
name|AdvancedSWFEndpointProducerBuilder
name|clientConfigurationParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|clientConfigurationParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientConfigurationParameters"
argument_list|,
name|clientConfigurationParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the ClientConfiguration using the key/values from the          * Map.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|clientConfigurationParameters ( String clientConfigurationParameters)
specifier|default
name|AdvancedSWFEndpointProducerBuilder
name|clientConfigurationParameters
parameter_list|(
name|String
name|clientConfigurationParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientConfigurationParameters"
argument_list|,
name|clientConfigurationParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the StartWorkflowOptions using the key/values from the          * Map.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|startWorkflowOptionsParameters ( Map<String, Object> startWorkflowOptionsParameters)
specifier|default
name|AdvancedSWFEndpointProducerBuilder
name|startWorkflowOptionsParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|startWorkflowOptionsParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startWorkflowOptionsParameters"
argument_list|,
name|startWorkflowOptionsParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the StartWorkflowOptions using the key/values from the          * Map.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|startWorkflowOptionsParameters ( String startWorkflowOptionsParameters)
specifier|default
name|AdvancedSWFEndpointProducerBuilder
name|startWorkflowOptionsParameters
parameter_list|(
name|String
name|startWorkflowOptionsParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startWorkflowOptionsParameters"
argument_list|,
name|startWorkflowOptionsParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the AmazonSimpleWorkflowClient using the key/values from          * the Map.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|sWClientParameters ( Map<String, Object> sWClientParameters)
specifier|default
name|AdvancedSWFEndpointProducerBuilder
name|sWClientParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sWClientParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sWClientParameters"
argument_list|,
name|sWClientParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the AmazonSimpleWorkflowClient using the key/values from          * the Map.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|sWClientParameters ( String sWClientParameters)
specifier|default
name|AdvancedSWFEndpointProducerBuilder
name|sWClientParameters
parameter_list|(
name|String
name|sWClientParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sWClientParameters"
argument_list|,
name|sWClientParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSWFEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedSWFEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the AWS Simple Workflow component.      */
DECL|interface|SWFEndpointBuilder
specifier|public
interface|interface
name|SWFEndpointBuilder
extends|extends
name|SWFEndpointConsumerBuilder
extends|,
name|SWFEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSWFEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSWFEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To use the given AmazonSimpleWorkflowClient as client.          *           * The option is a:          *<code>com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflowClient</code> type.          *           * Group: common          */
DECL|method|amazonSWClient (Object amazonSWClient)
specifier|default
name|SWFEndpointBuilder
name|amazonSWClient
parameter_list|(
name|Object
name|amazonSWClient
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"amazonSWClient"
argument_list|,
name|amazonSWClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the given AmazonSimpleWorkflowClient as client.          *           * The option will be converted to a          *<code>com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflowClient</code> type.          *           * Group: common          */
DECL|method|amazonSWClient (String amazonSWClient)
specifier|default
name|SWFEndpointBuilder
name|amazonSWClient
parameter_list|(
name|String
name|amazonSWClient
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"amazonSWClient"
argument_list|,
name|amazonSWClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An instance of          * com.amazonaws.services.simpleworkflow.flow.DataConverter to use for          * serializing/deserializing the data.          *           * The option is a:          *<code>com.amazonaws.services.simpleworkflow.flow.DataConverter</code>          * type.          *           * Group: common          */
DECL|method|dataConverter (Object dataConverter)
specifier|default
name|SWFEndpointBuilder
name|dataConverter
parameter_list|(
name|Object
name|dataConverter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataConverter"
argument_list|,
name|dataConverter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An instance of          * com.amazonaws.services.simpleworkflow.flow.DataConverter to use for          * serializing/deserializing the data.          *           * The option will be converted to a          *<code>com.amazonaws.services.simpleworkflow.flow.DataConverter</code>          * type.          *           * Group: common          */
DECL|method|dataConverter (String dataConverter)
specifier|default
name|SWFEndpointBuilder
name|dataConverter
parameter_list|(
name|String
name|dataConverter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataConverter"
argument_list|,
name|dataConverter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The workflow domain to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|domainName (String domainName)
specifier|default
name|SWFEndpointBuilder
name|domainName
parameter_list|(
name|String
name|domainName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"domainName"
argument_list|,
name|domainName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The workflow or activity event name to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|eventName (String eventName)
specifier|default
name|SWFEndpointBuilder
name|eventName
parameter_list|(
name|String
name|eventName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventName"
argument_list|,
name|eventName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Region. When using this parameter, the configuration will          * expect the capitalized name of the region (for example AP_EAST_1)          * You'll need to use the name Regions.EU_WEST_1.name().          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|region (String region)
specifier|default
name|SWFEndpointBuilder
name|region
parameter_list|(
name|String
name|region
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"region"
argument_list|,
name|region
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The workflow or activity event version to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|version (String version)
specifier|default
name|SWFEndpointBuilder
name|version
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Access Key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessKey (String accessKey)
specifier|default
name|SWFEndpointBuilder
name|accessKey
parameter_list|(
name|String
name|accessKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"accessKey"
argument_list|,
name|accessKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Secret Key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|secretKey (String secretKey)
specifier|default
name|SWFEndpointBuilder
name|secretKey
parameter_list|(
name|String
name|secretKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"secretKey"
argument_list|,
name|secretKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the AWS Simple Workflow component.      */
DECL|interface|AdvancedSWFEndpointBuilder
specifier|public
interface|interface
name|AdvancedSWFEndpointBuilder
extends|extends
name|AdvancedSWFEndpointConsumerBuilder
extends|,
name|AdvancedSWFEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SWFEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SWFEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSWFEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSWFEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the ClientConfiguration using the key/values from the          * Map.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|clientConfigurationParameters ( Map<String, Object> clientConfigurationParameters)
specifier|default
name|AdvancedSWFEndpointBuilder
name|clientConfigurationParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|clientConfigurationParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientConfigurationParameters"
argument_list|,
name|clientConfigurationParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the ClientConfiguration using the key/values from the          * Map.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|clientConfigurationParameters ( String clientConfigurationParameters)
specifier|default
name|AdvancedSWFEndpointBuilder
name|clientConfigurationParameters
parameter_list|(
name|String
name|clientConfigurationParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientConfigurationParameters"
argument_list|,
name|clientConfigurationParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the StartWorkflowOptions using the key/values from the          * Map.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|startWorkflowOptionsParameters ( Map<String, Object> startWorkflowOptionsParameters)
specifier|default
name|AdvancedSWFEndpointBuilder
name|startWorkflowOptionsParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|startWorkflowOptionsParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startWorkflowOptionsParameters"
argument_list|,
name|startWorkflowOptionsParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the StartWorkflowOptions using the key/values from the          * Map.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|startWorkflowOptionsParameters ( String startWorkflowOptionsParameters)
specifier|default
name|AdvancedSWFEndpointBuilder
name|startWorkflowOptionsParameters
parameter_list|(
name|String
name|startWorkflowOptionsParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startWorkflowOptionsParameters"
argument_list|,
name|startWorkflowOptionsParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the AmazonSimpleWorkflowClient using the key/values from          * the Map.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|sWClientParameters ( Map<String, Object> sWClientParameters)
specifier|default
name|AdvancedSWFEndpointBuilder
name|sWClientParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sWClientParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sWClientParameters"
argument_list|,
name|sWClientParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the AmazonSimpleWorkflowClient using the key/values from          * the Map.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|sWClientParameters ( String sWClientParameters)
specifier|default
name|AdvancedSWFEndpointBuilder
name|sWClientParameters
parameter_list|(
name|String
name|sWClientParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sWClientParameters"
argument_list|,
name|sWClientParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedSWFEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedSWFEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * AWS Simple Workflow (camel-aws-swf)      * The aws-swf component is used for managing workflows from Amazon Simple      * Workflow.      *       * Category: cloud,workflow      * Available as of version: 2.13      * Maven coordinates: org.apache.camel:camel-aws-swf      *       * Syntax:<code>aws-swf:type</code>      *       * Path parameter: type (required)      * Activity or workflow      * The value can be one of: activity, workflow      */
DECL|method|sWF (String path)
specifier|default
name|SWFEndpointBuilder
name|sWF
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|SWFEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|SWFEndpointBuilder
implements|,
name|AdvancedSWFEndpointBuilder
block|{
specifier|public
name|SWFEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"aws-swf"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SWFEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

