begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The atomix-set component is used to access Atomix's distributed set.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|AtomixSetEndpointBuilderFactory
specifier|public
interface|interface
name|AtomixSetEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Atomix Set component.      */
DECL|interface|AtomixSetEndpointConsumerBuilder
specifier|public
interface|interface
name|AtomixSetEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedAtomixSetEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The distributed resource name.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|resourceName ( String resourceName)
specifier|default
name|AtomixSetEndpointConsumerBuilder
name|resourceName
parameter_list|(
name|String
name|resourceName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceName"
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Atomix instance to use.          * The option is a<code>io.atomix.AtomixClient</code> type.          * @group common          */
DECL|method|atomix (Object atomix)
specifier|default
name|AtomixSetEndpointConsumerBuilder
name|atomix
parameter_list|(
name|Object
name|atomix
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"atomix"
argument_list|,
name|atomix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Atomix instance to use.          * The option will be converted to a<code>io.atomix.AtomixClient</code>          * type.          * @group common          */
DECL|method|atomix (String atomix)
specifier|default
name|AtomixSetEndpointConsumerBuilder
name|atomix
parameter_list|(
name|String
name|atomix
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"atomix"
argument_list|,
name|atomix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Atomix configuration uri.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|configurationUri ( String configurationUri)
specifier|default
name|AtomixSetEndpointConsumerBuilder
name|configurationUri
parameter_list|(
name|String
name|configurationUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"configurationUri"
argument_list|,
name|configurationUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default action.          * The option is a          *<code>org.apache.camel.component.atomix.client.set.AtomixSet$Action</code> type.          * @group common          */
DECL|method|defaultAction ( Action defaultAction)
specifier|default
name|AtomixSetEndpointConsumerBuilder
name|defaultAction
parameter_list|(
name|Action
name|defaultAction
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultAction"
argument_list|,
name|defaultAction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default action.          * The option will be converted to a          *<code>org.apache.camel.component.atomix.client.set.AtomixSet$Action</code> type.          * @group common          */
DECL|method|defaultAction ( String defaultAction)
specifier|default
name|AtomixSetEndpointConsumerBuilder
name|defaultAction
parameter_list|(
name|String
name|defaultAction
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultAction"
argument_list|,
name|defaultAction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The address of the nodes composing the cluster.          * The option is a          *<code>java.util.List&lt;io.atomix.catalyst.transport.Address&gt;</code> type.          * @group common          */
DECL|method|nodes (List<Object> nodes)
specifier|default
name|AtomixSetEndpointConsumerBuilder
name|nodes
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|nodes
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nodes"
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The address of the nodes composing the cluster.          * The option will be converted to a          *<code>java.util.List&lt;io.atomix.catalyst.transport.Address&gt;</code> type.          * @group common          */
DECL|method|nodes (String nodes)
specifier|default
name|AtomixSetEndpointConsumerBuilder
name|nodes
parameter_list|(
name|String
name|nodes
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nodes"
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The header that wil carry the result.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|resultHeader ( String resultHeader)
specifier|default
name|AtomixSetEndpointConsumerBuilder
name|resultHeader
parameter_list|(
name|String
name|resultHeader
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resultHeader"
argument_list|,
name|resultHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Atomix transport.          * The option is a          *<code>java.lang.Class&lt;io.atomix.catalyst.transport.Transport&gt;</code> type.          * @group common          */
DECL|method|transport ( Class<Object> transport)
specifier|default
name|AtomixSetEndpointConsumerBuilder
name|transport
parameter_list|(
name|Class
argument_list|<
name|Object
argument_list|>
name|transport
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transport"
argument_list|,
name|transport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Atomix transport.          * The option will be converted to a          *<code>java.lang.Class&lt;io.atomix.catalyst.transport.Transport&gt;</code> type.          * @group common          */
DECL|method|transport (String transport)
specifier|default
name|AtomixSetEndpointConsumerBuilder
name|transport
parameter_list|(
name|String
name|transport
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transport"
argument_list|,
name|transport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The resource ttl.          * The option is a<code>long</code> type.          * @group common          */
DECL|method|ttl (long ttl)
specifier|default
name|AtomixSetEndpointConsumerBuilder
name|ttl
parameter_list|(
name|long
name|ttl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ttl"
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The resource ttl.          * The option will be converted to a<code>long</code> type.          * @group common          */
DECL|method|ttl (String ttl)
specifier|default
name|AtomixSetEndpointConsumerBuilder
name|ttl
parameter_list|(
name|String
name|ttl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ttl"
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|AtomixSetEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|AtomixSetEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Atomix Set component.      */
DECL|interface|AdvancedAtomixSetEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedAtomixSetEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|AtomixSetEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|AtomixSetEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cluster wide default resource configuration.          * The option is a<code>java.util.Properties</code> type.          * @group advanced          */
DECL|method|defaultResourceConfig ( Properties defaultResourceConfig)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|defaultResourceConfig
parameter_list|(
name|Properties
name|defaultResourceConfig
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultResourceConfig"
argument_list|,
name|defaultResourceConfig
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cluster wide default resource configuration.          * The option will be converted to a<code>java.util.Properties</code>          * type.          * @group advanced          */
DECL|method|defaultResourceConfig ( String defaultResourceConfig)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|defaultResourceConfig
parameter_list|(
name|String
name|defaultResourceConfig
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultResourceConfig"
argument_list|,
name|defaultResourceConfig
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The local default resource options.          * The option is a<code>java.util.Properties</code> type.          * @group advanced          */
DECL|method|defaultResourceOptions ( Properties defaultResourceOptions)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|defaultResourceOptions
parameter_list|(
name|Properties
name|defaultResourceOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultResourceOptions"
argument_list|,
name|defaultResourceOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The local default resource options.          * The option will be converted to a<code>java.util.Properties</code>          * type.          * @group advanced          */
DECL|method|defaultResourceOptions ( String defaultResourceOptions)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|defaultResourceOptions
parameter_list|(
name|String
name|defaultResourceOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultResourceOptions"
argument_list|,
name|defaultResourceOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets if the local member should join groups as PersistentMember or          * not. If set to ephemeral the local member will receive an auto          * generated ID thus the local one is ignored.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|ephemeral ( boolean ephemeral)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|ephemeral
parameter_list|(
name|boolean
name|ephemeral
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ephemeral"
argument_list|,
name|ephemeral
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets if the local member should join groups as PersistentMember or          * not. If set to ephemeral the local member will receive an auto          * generated ID thus the local one is ignored.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|ephemeral ( String ephemeral)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|ephemeral
parameter_list|(
name|String
name|ephemeral
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ephemeral"
argument_list|,
name|ephemeral
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The read consistency level.          * The option is a<code>io.atomix.resource.ReadConsistency</code> type.          * @group advanced          */
DECL|method|readConsistency ( ReadConsistency readConsistency)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|readConsistency
parameter_list|(
name|ReadConsistency
name|readConsistency
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readConsistency"
argument_list|,
name|readConsistency
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The read consistency level.          * The option will be converted to a          *<code>io.atomix.resource.ReadConsistency</code> type.          * @group advanced          */
DECL|method|readConsistency ( String readConsistency)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|readConsistency
parameter_list|(
name|String
name|readConsistency
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readConsistency"
argument_list|,
name|readConsistency
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Cluster wide resources configuration.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.util.Properties&gt;</code> type.          * @group advanced          */
DECL|method|resourceConfigs ( Map<String, Properties> resourceConfigs)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|resourceConfigs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|resourceConfigs
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceConfigs"
argument_list|,
name|resourceConfigs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Cluster wide resources configuration.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String,          * java.util.Properties&gt;</code> type.          * @group advanced          */
DECL|method|resourceConfigs ( String resourceConfigs)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|resourceConfigs
parameter_list|(
name|String
name|resourceConfigs
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceConfigs"
argument_list|,
name|resourceConfigs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Local resources configurations.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.util.Properties&gt;</code> type.          * @group advanced          */
DECL|method|resourceOptions ( Map<String, Properties> resourceOptions)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|resourceOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|resourceOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceOptions"
argument_list|,
name|resourceOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Local resources configurations.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String,          * java.util.Properties&gt;</code> type.          * @group advanced          */
DECL|method|resourceOptions ( String resourceOptions)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|resourceOptions
parameter_list|(
name|String
name|resourceOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceOptions"
argument_list|,
name|resourceOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedAtomixSetEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Atomix Set component.      */
DECL|interface|AtomixSetEndpointProducerBuilder
specifier|public
specifier|static
interface|interface
name|AtomixSetEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedAtomixSetEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedAtomixSetEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The distributed resource name.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|resourceName ( String resourceName)
specifier|default
name|AtomixSetEndpointProducerBuilder
name|resourceName
parameter_list|(
name|String
name|resourceName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceName"
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Atomix instance to use.          * The option is a<code>io.atomix.AtomixClient</code> type.          * @group common          */
DECL|method|atomix (Object atomix)
specifier|default
name|AtomixSetEndpointProducerBuilder
name|atomix
parameter_list|(
name|Object
name|atomix
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"atomix"
argument_list|,
name|atomix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Atomix instance to use.          * The option will be converted to a<code>io.atomix.AtomixClient</code>          * type.          * @group common          */
DECL|method|atomix (String atomix)
specifier|default
name|AtomixSetEndpointProducerBuilder
name|atomix
parameter_list|(
name|String
name|atomix
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"atomix"
argument_list|,
name|atomix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Atomix configuration uri.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|configurationUri ( String configurationUri)
specifier|default
name|AtomixSetEndpointProducerBuilder
name|configurationUri
parameter_list|(
name|String
name|configurationUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"configurationUri"
argument_list|,
name|configurationUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default action.          * The option is a          *<code>org.apache.camel.component.atomix.client.set.AtomixSet$Action</code> type.          * @group common          */
DECL|method|defaultAction ( Action defaultAction)
specifier|default
name|AtomixSetEndpointProducerBuilder
name|defaultAction
parameter_list|(
name|Action
name|defaultAction
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultAction"
argument_list|,
name|defaultAction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default action.          * The option will be converted to a          *<code>org.apache.camel.component.atomix.client.set.AtomixSet$Action</code> type.          * @group common          */
DECL|method|defaultAction ( String defaultAction)
specifier|default
name|AtomixSetEndpointProducerBuilder
name|defaultAction
parameter_list|(
name|String
name|defaultAction
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultAction"
argument_list|,
name|defaultAction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The address of the nodes composing the cluster.          * The option is a          *<code>java.util.List&lt;io.atomix.catalyst.transport.Address&gt;</code> type.          * @group common          */
DECL|method|nodes (List<Object> nodes)
specifier|default
name|AtomixSetEndpointProducerBuilder
name|nodes
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|nodes
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nodes"
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The address of the nodes composing the cluster.          * The option will be converted to a          *<code>java.util.List&lt;io.atomix.catalyst.transport.Address&gt;</code> type.          * @group common          */
DECL|method|nodes (String nodes)
specifier|default
name|AtomixSetEndpointProducerBuilder
name|nodes
parameter_list|(
name|String
name|nodes
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nodes"
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The header that wil carry the result.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|resultHeader ( String resultHeader)
specifier|default
name|AtomixSetEndpointProducerBuilder
name|resultHeader
parameter_list|(
name|String
name|resultHeader
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resultHeader"
argument_list|,
name|resultHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Atomix transport.          * The option is a          *<code>java.lang.Class&lt;io.atomix.catalyst.transport.Transport&gt;</code> type.          * @group common          */
DECL|method|transport ( Class<Object> transport)
specifier|default
name|AtomixSetEndpointProducerBuilder
name|transport
parameter_list|(
name|Class
argument_list|<
name|Object
argument_list|>
name|transport
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transport"
argument_list|,
name|transport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Atomix transport.          * The option will be converted to a          *<code>java.lang.Class&lt;io.atomix.catalyst.transport.Transport&gt;</code> type.          * @group common          */
DECL|method|transport (String transport)
specifier|default
name|AtomixSetEndpointProducerBuilder
name|transport
parameter_list|(
name|String
name|transport
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transport"
argument_list|,
name|transport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The resource ttl.          * The option is a<code>long</code> type.          * @group common          */
DECL|method|ttl (long ttl)
specifier|default
name|AtomixSetEndpointProducerBuilder
name|ttl
parameter_list|(
name|long
name|ttl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ttl"
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The resource ttl.          * The option will be converted to a<code>long</code> type.          * @group common          */
DECL|method|ttl (String ttl)
specifier|default
name|AtomixSetEndpointProducerBuilder
name|ttl
parameter_list|(
name|String
name|ttl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ttl"
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|AtomixSetEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|AtomixSetEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Atomix Set component.      */
DECL|interface|AdvancedAtomixSetEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedAtomixSetEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|AtomixSetEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|AtomixSetEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedAtomixSetEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedAtomixSetEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cluster wide default resource configuration.          * The option is a<code>java.util.Properties</code> type.          * @group advanced          */
DECL|method|defaultResourceConfig ( Properties defaultResourceConfig)
specifier|default
name|AdvancedAtomixSetEndpointProducerBuilder
name|defaultResourceConfig
parameter_list|(
name|Properties
name|defaultResourceConfig
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultResourceConfig"
argument_list|,
name|defaultResourceConfig
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cluster wide default resource configuration.          * The option will be converted to a<code>java.util.Properties</code>          * type.          * @group advanced          */
DECL|method|defaultResourceConfig ( String defaultResourceConfig)
specifier|default
name|AdvancedAtomixSetEndpointProducerBuilder
name|defaultResourceConfig
parameter_list|(
name|String
name|defaultResourceConfig
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultResourceConfig"
argument_list|,
name|defaultResourceConfig
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The local default resource options.          * The option is a<code>java.util.Properties</code> type.          * @group advanced          */
DECL|method|defaultResourceOptions ( Properties defaultResourceOptions)
specifier|default
name|AdvancedAtomixSetEndpointProducerBuilder
name|defaultResourceOptions
parameter_list|(
name|Properties
name|defaultResourceOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultResourceOptions"
argument_list|,
name|defaultResourceOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The local default resource options.          * The option will be converted to a<code>java.util.Properties</code>          * type.          * @group advanced          */
DECL|method|defaultResourceOptions ( String defaultResourceOptions)
specifier|default
name|AdvancedAtomixSetEndpointProducerBuilder
name|defaultResourceOptions
parameter_list|(
name|String
name|defaultResourceOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultResourceOptions"
argument_list|,
name|defaultResourceOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets if the local member should join groups as PersistentMember or          * not. If set to ephemeral the local member will receive an auto          * generated ID thus the local one is ignored.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|ephemeral ( boolean ephemeral)
specifier|default
name|AdvancedAtomixSetEndpointProducerBuilder
name|ephemeral
parameter_list|(
name|boolean
name|ephemeral
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ephemeral"
argument_list|,
name|ephemeral
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets if the local member should join groups as PersistentMember or          * not. If set to ephemeral the local member will receive an auto          * generated ID thus the local one is ignored.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|ephemeral ( String ephemeral)
specifier|default
name|AdvancedAtomixSetEndpointProducerBuilder
name|ephemeral
parameter_list|(
name|String
name|ephemeral
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ephemeral"
argument_list|,
name|ephemeral
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The read consistency level.          * The option is a<code>io.atomix.resource.ReadConsistency</code> type.          * @group advanced          */
DECL|method|readConsistency ( ReadConsistency readConsistency)
specifier|default
name|AdvancedAtomixSetEndpointProducerBuilder
name|readConsistency
parameter_list|(
name|ReadConsistency
name|readConsistency
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readConsistency"
argument_list|,
name|readConsistency
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The read consistency level.          * The option will be converted to a          *<code>io.atomix.resource.ReadConsistency</code> type.          * @group advanced          */
DECL|method|readConsistency ( String readConsistency)
specifier|default
name|AdvancedAtomixSetEndpointProducerBuilder
name|readConsistency
parameter_list|(
name|String
name|readConsistency
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readConsistency"
argument_list|,
name|readConsistency
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Cluster wide resources configuration.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.util.Properties&gt;</code> type.          * @group advanced          */
DECL|method|resourceConfigs ( Map<String, Properties> resourceConfigs)
specifier|default
name|AdvancedAtomixSetEndpointProducerBuilder
name|resourceConfigs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|resourceConfigs
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceConfigs"
argument_list|,
name|resourceConfigs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Cluster wide resources configuration.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String,          * java.util.Properties&gt;</code> type.          * @group advanced          */
DECL|method|resourceConfigs ( String resourceConfigs)
specifier|default
name|AdvancedAtomixSetEndpointProducerBuilder
name|resourceConfigs
parameter_list|(
name|String
name|resourceConfigs
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceConfigs"
argument_list|,
name|resourceConfigs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Local resources configurations.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.util.Properties&gt;</code> type.          * @group advanced          */
DECL|method|resourceOptions ( Map<String, Properties> resourceOptions)
specifier|default
name|AdvancedAtomixSetEndpointProducerBuilder
name|resourceOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|resourceOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceOptions"
argument_list|,
name|resourceOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Local resources configurations.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String,          * java.util.Properties&gt;</code> type.          * @group advanced          */
DECL|method|resourceOptions ( String resourceOptions)
specifier|default
name|AdvancedAtomixSetEndpointProducerBuilder
name|resourceOptions
parameter_list|(
name|String
name|resourceOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceOptions"
argument_list|,
name|resourceOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedAtomixSetEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedAtomixSetEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Atomix Set component.      */
DECL|interface|AtomixSetEndpointBuilder
specifier|public
specifier|static
interface|interface
name|AtomixSetEndpointBuilder
extends|extends
name|AtomixSetEndpointConsumerBuilder
extends|,
name|AtomixSetEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedAtomixSetEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedAtomixSetEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The distributed resource name.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|resourceName (String resourceName)
specifier|default
name|AtomixSetEndpointBuilder
name|resourceName
parameter_list|(
name|String
name|resourceName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceName"
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Atomix instance to use.          * The option is a<code>io.atomix.AtomixClient</code> type.          * @group common          */
DECL|method|atomix (Object atomix)
specifier|default
name|AtomixSetEndpointBuilder
name|atomix
parameter_list|(
name|Object
name|atomix
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"atomix"
argument_list|,
name|atomix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Atomix instance to use.          * The option will be converted to a<code>io.atomix.AtomixClient</code>          * type.          * @group common          */
DECL|method|atomix (String atomix)
specifier|default
name|AtomixSetEndpointBuilder
name|atomix
parameter_list|(
name|String
name|atomix
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"atomix"
argument_list|,
name|atomix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Atomix configuration uri.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|configurationUri ( String configurationUri)
specifier|default
name|AtomixSetEndpointBuilder
name|configurationUri
parameter_list|(
name|String
name|configurationUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"configurationUri"
argument_list|,
name|configurationUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default action.          * The option is a          *<code>org.apache.camel.component.atomix.client.set.AtomixSet$Action</code> type.          * @group common          */
DECL|method|defaultAction (Action defaultAction)
specifier|default
name|AtomixSetEndpointBuilder
name|defaultAction
parameter_list|(
name|Action
name|defaultAction
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultAction"
argument_list|,
name|defaultAction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default action.          * The option will be converted to a          *<code>org.apache.camel.component.atomix.client.set.AtomixSet$Action</code> type.          * @group common          */
DECL|method|defaultAction (String defaultAction)
specifier|default
name|AtomixSetEndpointBuilder
name|defaultAction
parameter_list|(
name|String
name|defaultAction
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultAction"
argument_list|,
name|defaultAction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The address of the nodes composing the cluster.          * The option is a          *<code>java.util.List&lt;io.atomix.catalyst.transport.Address&gt;</code> type.          * @group common          */
DECL|method|nodes (List<Object> nodes)
specifier|default
name|AtomixSetEndpointBuilder
name|nodes
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|nodes
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nodes"
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The address of the nodes composing the cluster.          * The option will be converted to a          *<code>java.util.List&lt;io.atomix.catalyst.transport.Address&gt;</code> type.          * @group common          */
DECL|method|nodes (String nodes)
specifier|default
name|AtomixSetEndpointBuilder
name|nodes
parameter_list|(
name|String
name|nodes
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nodes"
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The header that wil carry the result.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|resultHeader (String resultHeader)
specifier|default
name|AtomixSetEndpointBuilder
name|resultHeader
parameter_list|(
name|String
name|resultHeader
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resultHeader"
argument_list|,
name|resultHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Atomix transport.          * The option is a          *<code>java.lang.Class&lt;io.atomix.catalyst.transport.Transport&gt;</code> type.          * @group common          */
DECL|method|transport (Class<Object> transport)
specifier|default
name|AtomixSetEndpointBuilder
name|transport
parameter_list|(
name|Class
argument_list|<
name|Object
argument_list|>
name|transport
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transport"
argument_list|,
name|transport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Atomix transport.          * The option will be converted to a          *<code>java.lang.Class&lt;io.atomix.catalyst.transport.Transport&gt;</code> type.          * @group common          */
DECL|method|transport (String transport)
specifier|default
name|AtomixSetEndpointBuilder
name|transport
parameter_list|(
name|String
name|transport
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transport"
argument_list|,
name|transport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The resource ttl.          * The option is a<code>long</code> type.          * @group common          */
DECL|method|ttl (long ttl)
specifier|default
name|AtomixSetEndpointBuilder
name|ttl
parameter_list|(
name|long
name|ttl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ttl"
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The resource ttl.          * The option will be converted to a<code>long</code> type.          * @group common          */
DECL|method|ttl (String ttl)
specifier|default
name|AtomixSetEndpointBuilder
name|ttl
parameter_list|(
name|String
name|ttl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ttl"
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Atomix Set component.      */
DECL|interface|AdvancedAtomixSetEndpointBuilder
specifier|public
specifier|static
interface|interface
name|AdvancedAtomixSetEndpointBuilder
extends|extends
name|AdvancedAtomixSetEndpointConsumerBuilder
extends|,
name|AdvancedAtomixSetEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|AtomixSetEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|AtomixSetEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedAtomixSetEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedAtomixSetEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cluster wide default resource configuration.          * The option is a<code>java.util.Properties</code> type.          * @group advanced          */
DECL|method|defaultResourceConfig ( Properties defaultResourceConfig)
specifier|default
name|AdvancedAtomixSetEndpointBuilder
name|defaultResourceConfig
parameter_list|(
name|Properties
name|defaultResourceConfig
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultResourceConfig"
argument_list|,
name|defaultResourceConfig
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cluster wide default resource configuration.          * The option will be converted to a<code>java.util.Properties</code>          * type.          * @group advanced          */
DECL|method|defaultResourceConfig ( String defaultResourceConfig)
specifier|default
name|AdvancedAtomixSetEndpointBuilder
name|defaultResourceConfig
parameter_list|(
name|String
name|defaultResourceConfig
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultResourceConfig"
argument_list|,
name|defaultResourceConfig
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The local default resource options.          * The option is a<code>java.util.Properties</code> type.          * @group advanced          */
DECL|method|defaultResourceOptions ( Properties defaultResourceOptions)
specifier|default
name|AdvancedAtomixSetEndpointBuilder
name|defaultResourceOptions
parameter_list|(
name|Properties
name|defaultResourceOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultResourceOptions"
argument_list|,
name|defaultResourceOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The local default resource options.          * The option will be converted to a<code>java.util.Properties</code>          * type.          * @group advanced          */
DECL|method|defaultResourceOptions ( String defaultResourceOptions)
specifier|default
name|AdvancedAtomixSetEndpointBuilder
name|defaultResourceOptions
parameter_list|(
name|String
name|defaultResourceOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultResourceOptions"
argument_list|,
name|defaultResourceOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets if the local member should join groups as PersistentMember or          * not. If set to ephemeral the local member will receive an auto          * generated ID thus the local one is ignored.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|ephemeral (boolean ephemeral)
specifier|default
name|AdvancedAtomixSetEndpointBuilder
name|ephemeral
parameter_list|(
name|boolean
name|ephemeral
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ephemeral"
argument_list|,
name|ephemeral
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets if the local member should join groups as PersistentMember or          * not. If set to ephemeral the local member will receive an auto          * generated ID thus the local one is ignored.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|ephemeral (String ephemeral)
specifier|default
name|AdvancedAtomixSetEndpointBuilder
name|ephemeral
parameter_list|(
name|String
name|ephemeral
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ephemeral"
argument_list|,
name|ephemeral
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The read consistency level.          * The option is a<code>io.atomix.resource.ReadConsistency</code> type.          * @group advanced          */
DECL|method|readConsistency ( ReadConsistency readConsistency)
specifier|default
name|AdvancedAtomixSetEndpointBuilder
name|readConsistency
parameter_list|(
name|ReadConsistency
name|readConsistency
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readConsistency"
argument_list|,
name|readConsistency
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The read consistency level.          * The option will be converted to a          *<code>io.atomix.resource.ReadConsistency</code> type.          * @group advanced          */
DECL|method|readConsistency ( String readConsistency)
specifier|default
name|AdvancedAtomixSetEndpointBuilder
name|readConsistency
parameter_list|(
name|String
name|readConsistency
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readConsistency"
argument_list|,
name|readConsistency
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Cluster wide resources configuration.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.util.Properties&gt;</code> type.          * @group advanced          */
DECL|method|resourceConfigs ( Map<String, Properties> resourceConfigs)
specifier|default
name|AdvancedAtomixSetEndpointBuilder
name|resourceConfigs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|resourceConfigs
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceConfigs"
argument_list|,
name|resourceConfigs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Cluster wide resources configuration.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String,          * java.util.Properties&gt;</code> type.          * @group advanced          */
DECL|method|resourceConfigs ( String resourceConfigs)
specifier|default
name|AdvancedAtomixSetEndpointBuilder
name|resourceConfigs
parameter_list|(
name|String
name|resourceConfigs
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceConfigs"
argument_list|,
name|resourceConfigs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Local resources configurations.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.util.Properties&gt;</code> type.          * @group advanced          */
DECL|method|resourceOptions ( Map<String, Properties> resourceOptions)
specifier|default
name|AdvancedAtomixSetEndpointBuilder
name|resourceOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|resourceOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceOptions"
argument_list|,
name|resourceOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Local resources configurations.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String,          * java.util.Properties&gt;</code> type.          * @group advanced          */
DECL|method|resourceOptions ( String resourceOptions)
specifier|default
name|AdvancedAtomixSetEndpointBuilder
name|resourceOptions
parameter_list|(
name|String
name|resourceOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceOptions"
argument_list|,
name|resourceOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedAtomixSetEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedAtomixSetEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.atomix.client.set.AtomixSet$Action</code> enum.      */
DECL|enum|Action
specifier|public
specifier|static
enum|enum
name|Action
block|{
DECL|enumConstant|ADD
DECL|enumConstant|CLEAR
DECL|enumConstant|CONTAINS
DECL|enumConstant|IS_EMPTY
DECL|enumConstant|REMOVE
DECL|enumConstant|SIZE
name|ADD
block|,
name|CLEAR
block|,
name|CONTAINS
block|,
name|IS_EMPTY
block|,
name|REMOVE
block|,
name|SIZE
block|;     }
comment|/**      * Proxy enum for<code>io.atomix.resource.ReadConsistency</code> enum.      */
DECL|enum|ReadConsistency
specifier|public
specifier|static
enum|enum
name|ReadConsistency
block|{
DECL|enumConstant|ATOMIC
DECL|enumConstant|ATOMIC_LEASE
DECL|enumConstant|SEQUENTIAL
DECL|enumConstant|LOCAL
name|ATOMIC
block|,
name|ATOMIC_LEASE
block|,
name|SEQUENTIAL
block|,
name|LOCAL
block|;     }
comment|/**      * The atomix-set component is used to access Atomix's distributed set.      * Creates a builder to build endpoints for the Atomix Set component.      */
DECL|method|atomixSet (String path)
specifier|default
name|AtomixSetEndpointBuilder
name|atomixSet
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|AtomixSetEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|AtomixSetEndpointBuilder
implements|,
name|AdvancedAtomixSetEndpointBuilder
block|{
specifier|public
name|AtomixSetEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"atomix-set"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|AtomixSetEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

