begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The spring-redis component allows sending and receiving messages from Redis.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|RedisEndpointBuilderFactory
specifier|public
interface|interface
name|RedisEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Spring Redis component.      */
DECL|interface|RedisEndpointConsumerBuilder
specifier|public
interface|interface
name|RedisEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|public
specifier|default
name|AdvancedRedisEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedRedisEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The host where Redis server is running.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|public
specifier|default
name|RedisEndpointConsumerBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Redis server port number.          * The option is a<code>java.lang.Integer</code> type.          * @group common          */
DECL|method|port (Integer port)
specifier|public
specifier|default
name|RedisEndpointConsumerBuilder
name|port
parameter_list|(
name|Integer
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Redis server port number.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group common          */
DECL|method|port (String port)
specifier|public
specifier|default
name|RedisEndpointConsumerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * List of topic names or name patterns to subscribe to. Multiple names          * can be separated by comma.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|channels (String channels)
specifier|public
specifier|default
name|RedisEndpointConsumerBuilder
name|channels
parameter_list|(
name|String
name|channels
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channels"
argument_list|,
name|channels
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Default command, which can be overridden by message header. Notice          * the consumer only supports the following commands: PSUBSCRIBE and          * SUBSCRIBE.          * The option is a<code>org.apache.camel.component.redis.Command</code>          * type.          * @group common          */
DECL|method|command (Command command)
specifier|public
specifier|default
name|RedisEndpointConsumerBuilder
name|command
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"command"
argument_list|,
name|command
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Default command, which can be overridden by message header. Notice          * the consumer only supports the following commands: PSUBSCRIBE and          * SUBSCRIBE.          * The option will be converted to a          *<code>org.apache.camel.component.redis.Command</code> type.          * @group common          */
DECL|method|command (String command)
specifier|public
specifier|default
name|RedisEndpointConsumerBuilder
name|command
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"command"
argument_list|,
name|command
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisConnectionFactory instance to use.          * The option is a          *<code>org.springframework.data.redis.connection.RedisConnectionFactory</code> type.          * @group common          */
DECL|method|connectionFactory ( Object connectionFactory)
specifier|public
specifier|default
name|RedisEndpointConsumerBuilder
name|connectionFactory
parameter_list|(
name|Object
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisConnectionFactory instance to use.          * The option will be converted to a          *<code>org.springframework.data.redis.connection.RedisConnectionFactory</code> type.          * @group common          */
DECL|method|connectionFactory ( String connectionFactory)
specifier|public
specifier|default
name|RedisEndpointConsumerBuilder
name|connectionFactory
parameter_list|(
name|String
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisTemplate instance to use.          * The option is a          *<code>org.springframework.data.redis.core.RedisTemplate</code> type.          * @group common          */
DECL|method|redisTemplate ( Object redisTemplate)
specifier|public
specifier|default
name|RedisEndpointConsumerBuilder
name|redisTemplate
parameter_list|(
name|Object
name|redisTemplate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"redisTemplate"
argument_list|,
name|redisTemplate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisTemplate instance to use.          * The option will be converted to a          *<code>org.springframework.data.redis.core.RedisTemplate</code> type.          * @group common          */
DECL|method|redisTemplate ( String redisTemplate)
specifier|public
specifier|default
name|RedisEndpointConsumerBuilder
name|redisTemplate
parameter_list|(
name|String
name|redisTemplate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"redisTemplate"
argument_list|,
name|redisTemplate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisSerializer instance to use.          * The option is a          *<code>org.springframework.data.redis.serializer.RedisSerializer</code> type.          * @group common          */
DECL|method|serializer (Object serializer)
specifier|public
specifier|default
name|RedisEndpointConsumerBuilder
name|serializer
parameter_list|(
name|Object
name|serializer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serializer"
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisSerializer instance to use.          * The option will be converted to a          *<code>org.springframework.data.redis.serializer.RedisSerializer</code> type.          * @group common          */
DECL|method|serializer (String serializer)
specifier|public
specifier|default
name|RedisEndpointConsumerBuilder
name|serializer
parameter_list|(
name|String
name|serializer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serializer"
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|public
specifier|default
name|RedisEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|public
specifier|default
name|RedisEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Spring Redis component.      */
DECL|interface|AdvancedRedisEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedRedisEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|public
specifier|default
name|RedisEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|RedisEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|public
specifier|default
name|AdvancedRedisEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|public
specifier|default
name|AdvancedRedisEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|public
specifier|default
name|AdvancedRedisEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|public
specifier|default
name|AdvancedRedisEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisMessageListenerContainer instance          * to use.          * The option is a          *<code>org.springframework.data.redis.listener.RedisMessageListenerContainer</code> type.          * @group consumer (advanced)          */
DECL|method|listenerContainer ( Object listenerContainer)
specifier|public
specifier|default
name|AdvancedRedisEndpointConsumerBuilder
name|listenerContainer
parameter_list|(
name|Object
name|listenerContainer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"listenerContainer"
argument_list|,
name|listenerContainer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisMessageListenerContainer instance          * to use.          * The option will be converted to a          *<code>org.springframework.data.redis.listener.RedisMessageListenerContainer</code> type.          * @group consumer (advanced)          */
DECL|method|listenerContainer ( String listenerContainer)
specifier|public
specifier|default
name|AdvancedRedisEndpointConsumerBuilder
name|listenerContainer
parameter_list|(
name|String
name|listenerContainer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"listenerContainer"
argument_list|,
name|listenerContainer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedRedisEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedRedisEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|public
specifier|default
name|AdvancedRedisEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|public
specifier|default
name|AdvancedRedisEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Spring Redis component.      */
DECL|interface|RedisEndpointProducerBuilder
specifier|public
specifier|static
interface|interface
name|RedisEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|public
specifier|default
name|AdvancedRedisEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedRedisEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The host where Redis server is running.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|public
specifier|default
name|RedisEndpointProducerBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Redis server port number.          * The option is a<code>java.lang.Integer</code> type.          * @group common          */
DECL|method|port (Integer port)
specifier|public
specifier|default
name|RedisEndpointProducerBuilder
name|port
parameter_list|(
name|Integer
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Redis server port number.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group common          */
DECL|method|port (String port)
specifier|public
specifier|default
name|RedisEndpointProducerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * List of topic names or name patterns to subscribe to. Multiple names          * can be separated by comma.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|channels (String channels)
specifier|public
specifier|default
name|RedisEndpointProducerBuilder
name|channels
parameter_list|(
name|String
name|channels
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channels"
argument_list|,
name|channels
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Default command, which can be overridden by message header. Notice          * the consumer only supports the following commands: PSUBSCRIBE and          * SUBSCRIBE.          * The option is a<code>org.apache.camel.component.redis.Command</code>          * type.          * @group common          */
DECL|method|command (Command command)
specifier|public
specifier|default
name|RedisEndpointProducerBuilder
name|command
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"command"
argument_list|,
name|command
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Default command, which can be overridden by message header. Notice          * the consumer only supports the following commands: PSUBSCRIBE and          * SUBSCRIBE.          * The option will be converted to a          *<code>org.apache.camel.component.redis.Command</code> type.          * @group common          */
DECL|method|command (String command)
specifier|public
specifier|default
name|RedisEndpointProducerBuilder
name|command
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"command"
argument_list|,
name|command
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisConnectionFactory instance to use.          * The option is a          *<code>org.springframework.data.redis.connection.RedisConnectionFactory</code> type.          * @group common          */
DECL|method|connectionFactory ( Object connectionFactory)
specifier|public
specifier|default
name|RedisEndpointProducerBuilder
name|connectionFactory
parameter_list|(
name|Object
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisConnectionFactory instance to use.          * The option will be converted to a          *<code>org.springframework.data.redis.connection.RedisConnectionFactory</code> type.          * @group common          */
DECL|method|connectionFactory ( String connectionFactory)
specifier|public
specifier|default
name|RedisEndpointProducerBuilder
name|connectionFactory
parameter_list|(
name|String
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisTemplate instance to use.          * The option is a          *<code>org.springframework.data.redis.core.RedisTemplate</code> type.          * @group common          */
DECL|method|redisTemplate ( Object redisTemplate)
specifier|public
specifier|default
name|RedisEndpointProducerBuilder
name|redisTemplate
parameter_list|(
name|Object
name|redisTemplate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"redisTemplate"
argument_list|,
name|redisTemplate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisTemplate instance to use.          * The option will be converted to a          *<code>org.springframework.data.redis.core.RedisTemplate</code> type.          * @group common          */
DECL|method|redisTemplate ( String redisTemplate)
specifier|public
specifier|default
name|RedisEndpointProducerBuilder
name|redisTemplate
parameter_list|(
name|String
name|redisTemplate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"redisTemplate"
argument_list|,
name|redisTemplate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisSerializer instance to use.          * The option is a          *<code>org.springframework.data.redis.serializer.RedisSerializer</code> type.          * @group common          */
DECL|method|serializer (Object serializer)
specifier|public
specifier|default
name|RedisEndpointProducerBuilder
name|serializer
parameter_list|(
name|Object
name|serializer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serializer"
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisSerializer instance to use.          * The option will be converted to a          *<code>org.springframework.data.redis.serializer.RedisSerializer</code> type.          * @group common          */
DECL|method|serializer (String serializer)
specifier|public
specifier|default
name|RedisEndpointProducerBuilder
name|serializer
parameter_list|(
name|String
name|serializer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serializer"
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|public
specifier|default
name|RedisEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|public
specifier|default
name|RedisEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Spring Redis component.      */
DECL|interface|AdvancedRedisEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedRedisEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|public
specifier|default
name|RedisEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|RedisEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedRedisEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedRedisEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|public
specifier|default
name|AdvancedRedisEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|public
specifier|default
name|AdvancedRedisEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Spring Redis component.      */
DECL|interface|RedisEndpointBuilder
specifier|public
specifier|static
interface|interface
name|RedisEndpointBuilder
extends|extends
name|RedisEndpointConsumerBuilder
extends|,
name|RedisEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|public
specifier|default
name|AdvancedRedisEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedRedisEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The host where Redis server is running.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|public
specifier|default
name|RedisEndpointBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Redis server port number.          * The option is a<code>java.lang.Integer</code> type.          * @group common          */
DECL|method|port (Integer port)
specifier|public
specifier|default
name|RedisEndpointBuilder
name|port
parameter_list|(
name|Integer
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Redis server port number.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group common          */
DECL|method|port (String port)
specifier|public
specifier|default
name|RedisEndpointBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * List of topic names or name patterns to subscribe to. Multiple names          * can be separated by comma.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|channels (String channels)
specifier|public
specifier|default
name|RedisEndpointBuilder
name|channels
parameter_list|(
name|String
name|channels
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channels"
argument_list|,
name|channels
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Default command, which can be overridden by message header. Notice          * the consumer only supports the following commands: PSUBSCRIBE and          * SUBSCRIBE.          * The option is a<code>org.apache.camel.component.redis.Command</code>          * type.          * @group common          */
DECL|method|command (Command command)
specifier|public
specifier|default
name|RedisEndpointBuilder
name|command
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"command"
argument_list|,
name|command
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Default command, which can be overridden by message header. Notice          * the consumer only supports the following commands: PSUBSCRIBE and          * SUBSCRIBE.          * The option will be converted to a          *<code>org.apache.camel.component.redis.Command</code> type.          * @group common          */
DECL|method|command (String command)
specifier|public
specifier|default
name|RedisEndpointBuilder
name|command
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"command"
argument_list|,
name|command
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisConnectionFactory instance to use.          * The option is a          *<code>org.springframework.data.redis.connection.RedisConnectionFactory</code> type.          * @group common          */
DECL|method|connectionFactory ( Object connectionFactory)
specifier|public
specifier|default
name|RedisEndpointBuilder
name|connectionFactory
parameter_list|(
name|Object
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisConnectionFactory instance to use.          * The option will be converted to a          *<code>org.springframework.data.redis.connection.RedisConnectionFactory</code> type.          * @group common          */
DECL|method|connectionFactory ( String connectionFactory)
specifier|public
specifier|default
name|RedisEndpointBuilder
name|connectionFactory
parameter_list|(
name|String
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisTemplate instance to use.          * The option is a          *<code>org.springframework.data.redis.core.RedisTemplate</code> type.          * @group common          */
DECL|method|redisTemplate (Object redisTemplate)
specifier|public
specifier|default
name|RedisEndpointBuilder
name|redisTemplate
parameter_list|(
name|Object
name|redisTemplate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"redisTemplate"
argument_list|,
name|redisTemplate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisTemplate instance to use.          * The option will be converted to a          *<code>org.springframework.data.redis.core.RedisTemplate</code> type.          * @group common          */
DECL|method|redisTemplate (String redisTemplate)
specifier|public
specifier|default
name|RedisEndpointBuilder
name|redisTemplate
parameter_list|(
name|String
name|redisTemplate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"redisTemplate"
argument_list|,
name|redisTemplate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisSerializer instance to use.          * The option is a          *<code>org.springframework.data.redis.serializer.RedisSerializer</code> type.          * @group common          */
DECL|method|serializer (Object serializer)
specifier|public
specifier|default
name|RedisEndpointBuilder
name|serializer
parameter_list|(
name|Object
name|serializer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serializer"
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a pre-configured RedisSerializer instance to use.          * The option will be converted to a          *<code>org.springframework.data.redis.serializer.RedisSerializer</code> type.          * @group common          */
DECL|method|serializer (String serializer)
specifier|public
specifier|default
name|RedisEndpointBuilder
name|serializer
parameter_list|(
name|String
name|serializer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serializer"
argument_list|,
name|serializer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Spring Redis component.      */
DECL|interface|AdvancedRedisEndpointBuilder
specifier|public
specifier|static
interface|interface
name|AdvancedRedisEndpointBuilder
extends|extends
name|AdvancedRedisEndpointConsumerBuilder
extends|,
name|AdvancedRedisEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|public
specifier|default
name|RedisEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|RedisEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedRedisEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedRedisEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|public
specifier|default
name|AdvancedRedisEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|public
specifier|default
name|AdvancedRedisEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for<code>org.apache.camel.component.redis.Command</code>      * enum.      */
DECL|enum|Command
specifier|public
specifier|static
enum|enum
name|Command
block|{
DECL|enumConstant|PING
DECL|enumConstant|SET
DECL|enumConstant|GET
DECL|enumConstant|QUIT
DECL|enumConstant|EXISTS
DECL|enumConstant|DEL
DECL|enumConstant|TYPE
DECL|enumConstant|FLUSHDB
DECL|enumConstant|KEYS
DECL|enumConstant|RANDOMKEY
DECL|enumConstant|RENAME
DECL|enumConstant|RENAMENX
DECL|enumConstant|RENAMEX
DECL|enumConstant|DBSIZE
DECL|enumConstant|EXPIRE
DECL|enumConstant|EXPIREAT
DECL|enumConstant|TTL
DECL|enumConstant|SELECT
DECL|enumConstant|MOVE
DECL|enumConstant|FLUSHALL
DECL|enumConstant|GETSET
DECL|enumConstant|MGET
DECL|enumConstant|SETNX
DECL|enumConstant|SETEX
DECL|enumConstant|MSET
DECL|enumConstant|MSETNX
DECL|enumConstant|DECRBY
DECL|enumConstant|DECR
DECL|enumConstant|INCRBY
DECL|enumConstant|INCR
DECL|enumConstant|APPEND
DECL|enumConstant|SUBSTR
DECL|enumConstant|HSET
DECL|enumConstant|HGET
DECL|enumConstant|HSETNX
DECL|enumConstant|HMSET
DECL|enumConstant|HMGET
DECL|enumConstant|HINCRBY
DECL|enumConstant|HEXISTS
DECL|enumConstant|HDEL
DECL|enumConstant|HLEN
DECL|enumConstant|HKEYS
DECL|enumConstant|HVALS
DECL|enumConstant|HGETALL
DECL|enumConstant|RPUSH
DECL|enumConstant|LPUSH
DECL|enumConstant|LLEN
DECL|enumConstant|LRANGE
DECL|enumConstant|LTRIM
DECL|enumConstant|LINDEX
DECL|enumConstant|LSET
DECL|enumConstant|LREM
DECL|enumConstant|LPOP
DECL|enumConstant|RPOP
DECL|enumConstant|RPOPLPUSH
DECL|enumConstant|SADD
DECL|enumConstant|SMEMBERS
DECL|enumConstant|SREM
DECL|enumConstant|SPOP
DECL|enumConstant|SMOVE
DECL|enumConstant|SCARD
DECL|enumConstant|SISMEMBER
DECL|enumConstant|SINTER
DECL|enumConstant|SINTERSTORE
DECL|enumConstant|SUNION
DECL|enumConstant|SUNIONSTORE
DECL|enumConstant|SDIFF
DECL|enumConstant|SDIFFSTORE
DECL|enumConstant|SRANDMEMBER
DECL|enumConstant|ZADD
DECL|enumConstant|ZRANGE
DECL|enumConstant|ZREM
DECL|enumConstant|ZINCRBY
DECL|enumConstant|ZRANK
DECL|enumConstant|ZREVRANK
DECL|enumConstant|ZREVRANGE
DECL|enumConstant|ZCARD
DECL|enumConstant|ZSCORE
DECL|enumConstant|MULTI
DECL|enumConstant|DISCARD
DECL|enumConstant|EXEC
DECL|enumConstant|WATCH
DECL|enumConstant|UNWATCH
DECL|enumConstant|SORT
DECL|enumConstant|BLPOP
DECL|enumConstant|BRPOP
DECL|enumConstant|AUTH
DECL|enumConstant|SUBSCRIBE
DECL|enumConstant|PUBLISH
DECL|enumConstant|UNSUBSCRIBE
DECL|enumConstant|PSUBSCRIBE
DECL|enumConstant|PUNSUBSCRIBE
DECL|enumConstant|ZCOUNT
DECL|enumConstant|ZRANGEBYSCORE
DECL|enumConstant|ZREVRANGEBYSCORE
DECL|enumConstant|ZREMRANGEBYRANK
DECL|enumConstant|ZREMRANGEBYSCORE
DECL|enumConstant|ZUNIONSTORE
DECL|enumConstant|ZINTERSTORE
DECL|enumConstant|SAVE
DECL|enumConstant|BGSAVE
DECL|enumConstant|BGREWRITEAOF
DECL|enumConstant|LASTSAVE
DECL|enumConstant|SHUTDOWN
DECL|enumConstant|INFO
DECL|enumConstant|MONITOR
DECL|enumConstant|SLAVEOF
DECL|enumConstant|CONFIG
DECL|enumConstant|STRLEN
DECL|enumConstant|SYNC
DECL|enumConstant|LPUSHX
DECL|enumConstant|PERSIST
DECL|enumConstant|RPUSHX
DECL|enumConstant|ECHO
DECL|enumConstant|LINSERT
DECL|enumConstant|DEBUG
DECL|enumConstant|BRPOPLPUSH
DECL|enumConstant|SETBIT
DECL|enumConstant|GETBIT
DECL|enumConstant|SETRANGE
DECL|enumConstant|GETRANGE
DECL|enumConstant|PEXPIRE
DECL|enumConstant|PEXPIREAT
DECL|enumConstant|GEOADD
DECL|enumConstant|GEODIST
DECL|enumConstant|GEOHASH
DECL|enumConstant|GEOPOS
DECL|enumConstant|GEORADIUS
DECL|enumConstant|GEORADIUSBYMEMBER
name|PING
block|,
name|SET
block|,
name|GET
block|,
name|QUIT
block|,
name|EXISTS
block|,
name|DEL
block|,
name|TYPE
block|,
name|FLUSHDB
block|,
name|KEYS
block|,
name|RANDOMKEY
block|,
name|RENAME
block|,
name|RENAMENX
block|,
name|RENAMEX
block|,
name|DBSIZE
block|,
name|EXPIRE
block|,
name|EXPIREAT
block|,
name|TTL
block|,
name|SELECT
block|,
name|MOVE
block|,
name|FLUSHALL
block|,
name|GETSET
block|,
name|MGET
block|,
name|SETNX
block|,
name|SETEX
block|,
name|MSET
block|,
name|MSETNX
block|,
name|DECRBY
block|,
name|DECR
block|,
name|INCRBY
block|,
name|INCR
block|,
name|APPEND
block|,
name|SUBSTR
block|,
name|HSET
block|,
name|HGET
block|,
name|HSETNX
block|,
name|HMSET
block|,
name|HMGET
block|,
name|HINCRBY
block|,
name|HEXISTS
block|,
name|HDEL
block|,
name|HLEN
block|,
name|HKEYS
block|,
name|HVALS
block|,
name|HGETALL
block|,
name|RPUSH
block|,
name|LPUSH
block|,
name|LLEN
block|,
name|LRANGE
block|,
name|LTRIM
block|,
name|LINDEX
block|,
name|LSET
block|,
name|LREM
block|,
name|LPOP
block|,
name|RPOP
block|,
name|RPOPLPUSH
block|,
name|SADD
block|,
name|SMEMBERS
block|,
name|SREM
block|,
name|SPOP
block|,
name|SMOVE
block|,
name|SCARD
block|,
name|SISMEMBER
block|,
name|SINTER
block|,
name|SINTERSTORE
block|,
name|SUNION
block|,
name|SUNIONSTORE
block|,
name|SDIFF
block|,
name|SDIFFSTORE
block|,
name|SRANDMEMBER
block|,
name|ZADD
block|,
name|ZRANGE
block|,
name|ZREM
block|,
name|ZINCRBY
block|,
name|ZRANK
block|,
name|ZREVRANK
block|,
name|ZREVRANGE
block|,
name|ZCARD
block|,
name|ZSCORE
block|,
name|MULTI
block|,
name|DISCARD
block|,
name|EXEC
block|,
name|WATCH
block|,
name|UNWATCH
block|,
name|SORT
block|,
name|BLPOP
block|,
name|BRPOP
block|,
name|AUTH
block|,
name|SUBSCRIBE
block|,
name|PUBLISH
block|,
name|UNSUBSCRIBE
block|,
name|PSUBSCRIBE
block|,
name|PUNSUBSCRIBE
block|,
name|ZCOUNT
block|,
name|ZRANGEBYSCORE
block|,
name|ZREVRANGEBYSCORE
block|,
name|ZREMRANGEBYRANK
block|,
name|ZREMRANGEBYSCORE
block|,
name|ZUNIONSTORE
block|,
name|ZINTERSTORE
block|,
name|SAVE
block|,
name|BGSAVE
block|,
name|BGREWRITEAOF
block|,
name|LASTSAVE
block|,
name|SHUTDOWN
block|,
name|INFO
block|,
name|MONITOR
block|,
name|SLAVEOF
block|,
name|CONFIG
block|,
name|STRLEN
block|,
name|SYNC
block|,
name|LPUSHX
block|,
name|PERSIST
block|,
name|RPUSHX
block|,
name|ECHO
block|,
name|LINSERT
block|,
name|DEBUG
block|,
name|BRPOPLPUSH
block|,
name|SETBIT
block|,
name|GETBIT
block|,
name|SETRANGE
block|,
name|GETRANGE
block|,
name|PEXPIRE
block|,
name|PEXPIREAT
block|,
name|GEOADD
block|,
name|GEODIST
block|,
name|GEOHASH
block|,
name|GEOPOS
block|,
name|GEORADIUS
block|,
name|GEORADIUSBYMEMBER
block|;     }
comment|/**      * The spring-redis component allows sending and receiving messages from      * Redis. Creates a builder to build endpoints for the Spring Redis      * component.      */
DECL|method|redis (String path)
specifier|public
specifier|default
name|RedisEndpointBuilder
name|redis
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|RedisEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|RedisEndpointBuilder
implements|,
name|AdvancedRedisEndpointBuilder
block|{
specifier|public
name|RedisEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"spring-redis"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|RedisEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

