begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The docker component is used for managing Docker containers.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|DockerEndpointBuilderFactory
specifier|public
interface|interface
name|DockerEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Docker component.      */
DECL|interface|DockerEndpointConsumerBuilder
specifier|public
interface|interface
name|DockerEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedDockerEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Which operation to use.          * The option is a          *<code>org.apache.camel.component.docker.DockerOperation</code> type.          * @group common          */
DECL|method|operation ( DockerOperation operation)
specifier|default
name|DockerEndpointConsumerBuilder
name|operation
parameter_list|(
name|DockerOperation
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which operation to use.          * The option will be converted to a          *<code>org.apache.camel.component.docker.DockerOperation</code> type.          * @group common          */
DECL|method|operation (String operation)
specifier|default
name|DockerEndpointConsumerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Email address associated with the user.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|email (String email)
specifier|default
name|DockerEndpointConsumerBuilder
name|email
parameter_list|(
name|String
name|email
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"email"
argument_list|,
name|email
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Docker host.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|DockerEndpointConsumerBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Docker port.          * The option is a<code>java.lang.Integer</code> type.          * @group common          */
DECL|method|port (Integer port)
specifier|default
name|DockerEndpointConsumerBuilder
name|port
parameter_list|(
name|Integer
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Docker port.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|DockerEndpointConsumerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Request timeout for response (in seconds).          * The option is a<code>java.lang.Integer</code> type.          * @group common          */
DECL|method|requestTimeout ( Integer requestTimeout)
specifier|default
name|DockerEndpointConsumerBuilder
name|requestTimeout
parameter_list|(
name|Integer
name|requestTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeout"
argument_list|,
name|requestTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Request timeout for response (in seconds).          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group common          */
DECL|method|requestTimeout ( String requestTimeout)
specifier|default
name|DockerEndpointConsumerBuilder
name|requestTimeout
parameter_list|(
name|String
name|requestTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeout"
argument_list|,
name|requestTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|DockerEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|DockerEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Location containing the SSL certificate chain.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|certPath (String certPath)
specifier|default
name|DockerEndpointConsumerBuilder
name|certPath
parameter_list|(
name|String
name|certPath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"certPath"
argument_list|,
name|certPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password to authenticate with.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|password (String password)
specifier|default
name|DockerEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use HTTPS communication.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|secure (boolean secure)
specifier|default
name|DockerEndpointConsumerBuilder
name|secure
parameter_list|(
name|boolean
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use HTTPS communication.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|secure (String secure)
specifier|default
name|DockerEndpointConsumerBuilder
name|secure
parameter_list|(
name|String
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Check TLS.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|tlsVerify (boolean tlsVerify)
specifier|default
name|DockerEndpointConsumerBuilder
name|tlsVerify
parameter_list|(
name|boolean
name|tlsVerify
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tlsVerify"
argument_list|,
name|tlsVerify
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Check TLS.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|tlsVerify (String tlsVerify)
specifier|default
name|DockerEndpointConsumerBuilder
name|tlsVerify
parameter_list|(
name|String
name|tlsVerify
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tlsVerify"
argument_list|,
name|tlsVerify
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * User name to authenticate with.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|username (String username)
specifier|default
name|DockerEndpointConsumerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Docker component.      */
DECL|interface|AdvancedDockerEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedDockerEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|DockerEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|DockerEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The fully qualified class name of the DockerCmdExecFactory          * implementation to use.          * The option is a<code>java.lang.String</code> type.          * @group advanced          */
DECL|method|cmdExecFactory ( String cmdExecFactory)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|cmdExecFactory
parameter_list|(
name|String
name|cmdExecFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cmdExecFactory"
argument_list|,
name|cmdExecFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to follow redirect filter.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|followRedirectFilter ( boolean followRedirectFilter)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|followRedirectFilter
parameter_list|(
name|boolean
name|followRedirectFilter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"followRedirectFilter"
argument_list|,
name|followRedirectFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to follow redirect filter.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|followRedirectFilter ( String followRedirectFilter)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|followRedirectFilter
parameter_list|(
name|String
name|followRedirectFilter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"followRedirectFilter"
argument_list|,
name|followRedirectFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use logging filter.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|loggingFilter ( boolean loggingFilter)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|loggingFilter
parameter_list|(
name|boolean
name|loggingFilter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFilter"
argument_list|,
name|loggingFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use logging filter.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|loggingFilter ( String loggingFilter)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|loggingFilter
parameter_list|(
name|String
name|loggingFilter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFilter"
argument_list|,
name|loggingFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum route connections.          * The option is a<code>java.lang.Integer</code> type.          * @group advanced          */
DECL|method|maxPerRouteConnections ( Integer maxPerRouteConnections)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|maxPerRouteConnections
parameter_list|(
name|Integer
name|maxPerRouteConnections
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxPerRouteConnections"
argument_list|,
name|maxPerRouteConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum route connections.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group advanced          */
DECL|method|maxPerRouteConnections ( String maxPerRouteConnections)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|maxPerRouteConnections
parameter_list|(
name|String
name|maxPerRouteConnections
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxPerRouteConnections"
argument_list|,
name|maxPerRouteConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum total connections.          * The option is a<code>java.lang.Integer</code> type.          * @group advanced          */
DECL|method|maxTotalConnections ( Integer maxTotalConnections)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|maxTotalConnections
parameter_list|(
name|Integer
name|maxTotalConnections
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxTotalConnections"
argument_list|,
name|maxTotalConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum total connections.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group advanced          */
DECL|method|maxTotalConnections ( String maxTotalConnections)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|maxTotalConnections
parameter_list|(
name|String
name|maxTotalConnections
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxTotalConnections"
argument_list|,
name|maxTotalConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server address for docker registry.          * The option is a<code>java.lang.String</code> type.          * @group advanced          */
DECL|method|serverAddress ( String serverAddress)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|serverAddress
parameter_list|(
name|String
name|serverAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverAddress"
argument_list|,
name|serverAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Socket connection mode.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|socket (boolean socket)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|socket
parameter_list|(
name|boolean
name|socket
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socket"
argument_list|,
name|socket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Socket connection mode.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|socket (String socket)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|socket
parameter_list|(
name|String
name|socket
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socket"
argument_list|,
name|socket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedDockerEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Docker component.      */
DECL|interface|DockerEndpointProducerBuilder
specifier|public
interface|interface
name|DockerEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedDockerEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedDockerEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Which operation to use.          * The option is a          *<code>org.apache.camel.component.docker.DockerOperation</code> type.          * @group common          */
DECL|method|operation ( DockerOperation operation)
specifier|default
name|DockerEndpointProducerBuilder
name|operation
parameter_list|(
name|DockerOperation
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which operation to use.          * The option will be converted to a          *<code>org.apache.camel.component.docker.DockerOperation</code> type.          * @group common          */
DECL|method|operation (String operation)
specifier|default
name|DockerEndpointProducerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Email address associated with the user.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|email (String email)
specifier|default
name|DockerEndpointProducerBuilder
name|email
parameter_list|(
name|String
name|email
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"email"
argument_list|,
name|email
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Docker host.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|DockerEndpointProducerBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Docker port.          * The option is a<code>java.lang.Integer</code> type.          * @group common          */
DECL|method|port (Integer port)
specifier|default
name|DockerEndpointProducerBuilder
name|port
parameter_list|(
name|Integer
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Docker port.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|DockerEndpointProducerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Request timeout for response (in seconds).          * The option is a<code>java.lang.Integer</code> type.          * @group common          */
DECL|method|requestTimeout ( Integer requestTimeout)
specifier|default
name|DockerEndpointProducerBuilder
name|requestTimeout
parameter_list|(
name|Integer
name|requestTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeout"
argument_list|,
name|requestTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Request timeout for response (in seconds).          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group common          */
DECL|method|requestTimeout ( String requestTimeout)
specifier|default
name|DockerEndpointProducerBuilder
name|requestTimeout
parameter_list|(
name|String
name|requestTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeout"
argument_list|,
name|requestTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|DockerEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|DockerEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Location containing the SSL certificate chain.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|certPath (String certPath)
specifier|default
name|DockerEndpointProducerBuilder
name|certPath
parameter_list|(
name|String
name|certPath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"certPath"
argument_list|,
name|certPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password to authenticate with.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|password (String password)
specifier|default
name|DockerEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use HTTPS communication.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|secure (boolean secure)
specifier|default
name|DockerEndpointProducerBuilder
name|secure
parameter_list|(
name|boolean
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use HTTPS communication.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|secure (String secure)
specifier|default
name|DockerEndpointProducerBuilder
name|secure
parameter_list|(
name|String
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Check TLS.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|tlsVerify (boolean tlsVerify)
specifier|default
name|DockerEndpointProducerBuilder
name|tlsVerify
parameter_list|(
name|boolean
name|tlsVerify
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tlsVerify"
argument_list|,
name|tlsVerify
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Check TLS.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|tlsVerify (String tlsVerify)
specifier|default
name|DockerEndpointProducerBuilder
name|tlsVerify
parameter_list|(
name|String
name|tlsVerify
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tlsVerify"
argument_list|,
name|tlsVerify
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * User name to authenticate with.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|username (String username)
specifier|default
name|DockerEndpointProducerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Docker component.      */
DECL|interface|AdvancedDockerEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedDockerEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|DockerEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|DockerEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedDockerEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedDockerEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The fully qualified class name of the DockerCmdExecFactory          * implementation to use.          * The option is a<code>java.lang.String</code> type.          * @group advanced          */
DECL|method|cmdExecFactory ( String cmdExecFactory)
specifier|default
name|AdvancedDockerEndpointProducerBuilder
name|cmdExecFactory
parameter_list|(
name|String
name|cmdExecFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cmdExecFactory"
argument_list|,
name|cmdExecFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to follow redirect filter.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|followRedirectFilter ( boolean followRedirectFilter)
specifier|default
name|AdvancedDockerEndpointProducerBuilder
name|followRedirectFilter
parameter_list|(
name|boolean
name|followRedirectFilter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"followRedirectFilter"
argument_list|,
name|followRedirectFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to follow redirect filter.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|followRedirectFilter ( String followRedirectFilter)
specifier|default
name|AdvancedDockerEndpointProducerBuilder
name|followRedirectFilter
parameter_list|(
name|String
name|followRedirectFilter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"followRedirectFilter"
argument_list|,
name|followRedirectFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use logging filter.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|loggingFilter ( boolean loggingFilter)
specifier|default
name|AdvancedDockerEndpointProducerBuilder
name|loggingFilter
parameter_list|(
name|boolean
name|loggingFilter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFilter"
argument_list|,
name|loggingFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use logging filter.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|loggingFilter ( String loggingFilter)
specifier|default
name|AdvancedDockerEndpointProducerBuilder
name|loggingFilter
parameter_list|(
name|String
name|loggingFilter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFilter"
argument_list|,
name|loggingFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum route connections.          * The option is a<code>java.lang.Integer</code> type.          * @group advanced          */
DECL|method|maxPerRouteConnections ( Integer maxPerRouteConnections)
specifier|default
name|AdvancedDockerEndpointProducerBuilder
name|maxPerRouteConnections
parameter_list|(
name|Integer
name|maxPerRouteConnections
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxPerRouteConnections"
argument_list|,
name|maxPerRouteConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum route connections.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group advanced          */
DECL|method|maxPerRouteConnections ( String maxPerRouteConnections)
specifier|default
name|AdvancedDockerEndpointProducerBuilder
name|maxPerRouteConnections
parameter_list|(
name|String
name|maxPerRouteConnections
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxPerRouteConnections"
argument_list|,
name|maxPerRouteConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum total connections.          * The option is a<code>java.lang.Integer</code> type.          * @group advanced          */
DECL|method|maxTotalConnections ( Integer maxTotalConnections)
specifier|default
name|AdvancedDockerEndpointProducerBuilder
name|maxTotalConnections
parameter_list|(
name|Integer
name|maxTotalConnections
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxTotalConnections"
argument_list|,
name|maxTotalConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum total connections.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group advanced          */
DECL|method|maxTotalConnections ( String maxTotalConnections)
specifier|default
name|AdvancedDockerEndpointProducerBuilder
name|maxTotalConnections
parameter_list|(
name|String
name|maxTotalConnections
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxTotalConnections"
argument_list|,
name|maxTotalConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server address for docker registry.          * The option is a<code>java.lang.String</code> type.          * @group advanced          */
DECL|method|serverAddress ( String serverAddress)
specifier|default
name|AdvancedDockerEndpointProducerBuilder
name|serverAddress
parameter_list|(
name|String
name|serverAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverAddress"
argument_list|,
name|serverAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Socket connection mode.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|socket (boolean socket)
specifier|default
name|AdvancedDockerEndpointProducerBuilder
name|socket
parameter_list|(
name|boolean
name|socket
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socket"
argument_list|,
name|socket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Socket connection mode.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|socket (String socket)
specifier|default
name|AdvancedDockerEndpointProducerBuilder
name|socket
parameter_list|(
name|String
name|socket
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socket"
argument_list|,
name|socket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedDockerEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedDockerEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Docker component.      */
DECL|interface|DockerEndpointBuilder
specifier|public
interface|interface
name|DockerEndpointBuilder
extends|extends
name|DockerEndpointConsumerBuilder
extends|,
name|DockerEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedDockerEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedDockerEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Which operation to use.          * The option is a          *<code>org.apache.camel.component.docker.DockerOperation</code> type.          * @group common          */
DECL|method|operation (DockerOperation operation)
specifier|default
name|DockerEndpointBuilder
name|operation
parameter_list|(
name|DockerOperation
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which operation to use.          * The option will be converted to a          *<code>org.apache.camel.component.docker.DockerOperation</code> type.          * @group common          */
DECL|method|operation (String operation)
specifier|default
name|DockerEndpointBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Email address associated with the user.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|email (String email)
specifier|default
name|DockerEndpointBuilder
name|email
parameter_list|(
name|String
name|email
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"email"
argument_list|,
name|email
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Docker host.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|DockerEndpointBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Docker port.          * The option is a<code>java.lang.Integer</code> type.          * @group common          */
DECL|method|port (Integer port)
specifier|default
name|DockerEndpointBuilder
name|port
parameter_list|(
name|Integer
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Docker port.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|DockerEndpointBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Request timeout for response (in seconds).          * The option is a<code>java.lang.Integer</code> type.          * @group common          */
DECL|method|requestTimeout (Integer requestTimeout)
specifier|default
name|DockerEndpointBuilder
name|requestTimeout
parameter_list|(
name|Integer
name|requestTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeout"
argument_list|,
name|requestTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Request timeout for response (in seconds).          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group common          */
DECL|method|requestTimeout (String requestTimeout)
specifier|default
name|DockerEndpointBuilder
name|requestTimeout
parameter_list|(
name|String
name|requestTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeout"
argument_list|,
name|requestTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Location containing the SSL certificate chain.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|certPath (String certPath)
specifier|default
name|DockerEndpointBuilder
name|certPath
parameter_list|(
name|String
name|certPath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"certPath"
argument_list|,
name|certPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password to authenticate with.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|password (String password)
specifier|default
name|DockerEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use HTTPS communication.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|secure (boolean secure)
specifier|default
name|DockerEndpointBuilder
name|secure
parameter_list|(
name|boolean
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use HTTPS communication.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|secure (String secure)
specifier|default
name|DockerEndpointBuilder
name|secure
parameter_list|(
name|String
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Check TLS.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|tlsVerify (boolean tlsVerify)
specifier|default
name|DockerEndpointBuilder
name|tlsVerify
parameter_list|(
name|boolean
name|tlsVerify
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tlsVerify"
argument_list|,
name|tlsVerify
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Check TLS.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|tlsVerify (String tlsVerify)
specifier|default
name|DockerEndpointBuilder
name|tlsVerify
parameter_list|(
name|String
name|tlsVerify
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tlsVerify"
argument_list|,
name|tlsVerify
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * User name to authenticate with.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|username (String username)
specifier|default
name|DockerEndpointBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Docker component.      */
DECL|interface|AdvancedDockerEndpointBuilder
specifier|public
interface|interface
name|AdvancedDockerEndpointBuilder
extends|extends
name|AdvancedDockerEndpointConsumerBuilder
extends|,
name|AdvancedDockerEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|DockerEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|DockerEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedDockerEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedDockerEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The fully qualified class name of the DockerCmdExecFactory          * implementation to use.          * The option is a<code>java.lang.String</code> type.          * @group advanced          */
DECL|method|cmdExecFactory ( String cmdExecFactory)
specifier|default
name|AdvancedDockerEndpointBuilder
name|cmdExecFactory
parameter_list|(
name|String
name|cmdExecFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cmdExecFactory"
argument_list|,
name|cmdExecFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to follow redirect filter.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|followRedirectFilter ( boolean followRedirectFilter)
specifier|default
name|AdvancedDockerEndpointBuilder
name|followRedirectFilter
parameter_list|(
name|boolean
name|followRedirectFilter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"followRedirectFilter"
argument_list|,
name|followRedirectFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to follow redirect filter.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|followRedirectFilter ( String followRedirectFilter)
specifier|default
name|AdvancedDockerEndpointBuilder
name|followRedirectFilter
parameter_list|(
name|String
name|followRedirectFilter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"followRedirectFilter"
argument_list|,
name|followRedirectFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use logging filter.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|loggingFilter ( boolean loggingFilter)
specifier|default
name|AdvancedDockerEndpointBuilder
name|loggingFilter
parameter_list|(
name|boolean
name|loggingFilter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFilter"
argument_list|,
name|loggingFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use logging filter.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|loggingFilter (String loggingFilter)
specifier|default
name|AdvancedDockerEndpointBuilder
name|loggingFilter
parameter_list|(
name|String
name|loggingFilter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFilter"
argument_list|,
name|loggingFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum route connections.          * The option is a<code>java.lang.Integer</code> type.          * @group advanced          */
DECL|method|maxPerRouteConnections ( Integer maxPerRouteConnections)
specifier|default
name|AdvancedDockerEndpointBuilder
name|maxPerRouteConnections
parameter_list|(
name|Integer
name|maxPerRouteConnections
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxPerRouteConnections"
argument_list|,
name|maxPerRouteConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum route connections.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group advanced          */
DECL|method|maxPerRouteConnections ( String maxPerRouteConnections)
specifier|default
name|AdvancedDockerEndpointBuilder
name|maxPerRouteConnections
parameter_list|(
name|String
name|maxPerRouteConnections
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxPerRouteConnections"
argument_list|,
name|maxPerRouteConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum total connections.          * The option is a<code>java.lang.Integer</code> type.          * @group advanced          */
DECL|method|maxTotalConnections ( Integer maxTotalConnections)
specifier|default
name|AdvancedDockerEndpointBuilder
name|maxTotalConnections
parameter_list|(
name|Integer
name|maxTotalConnections
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxTotalConnections"
argument_list|,
name|maxTotalConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum total connections.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group advanced          */
DECL|method|maxTotalConnections ( String maxTotalConnections)
specifier|default
name|AdvancedDockerEndpointBuilder
name|maxTotalConnections
parameter_list|(
name|String
name|maxTotalConnections
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxTotalConnections"
argument_list|,
name|maxTotalConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server address for docker registry.          * The option is a<code>java.lang.String</code> type.          * @group advanced          */
DECL|method|serverAddress (String serverAddress)
specifier|default
name|AdvancedDockerEndpointBuilder
name|serverAddress
parameter_list|(
name|String
name|serverAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverAddress"
argument_list|,
name|serverAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Socket connection mode.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|socket (boolean socket)
specifier|default
name|AdvancedDockerEndpointBuilder
name|socket
parameter_list|(
name|boolean
name|socket
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socket"
argument_list|,
name|socket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Socket connection mode.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|socket (String socket)
specifier|default
name|AdvancedDockerEndpointBuilder
name|socket
parameter_list|(
name|String
name|socket
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socket"
argument_list|,
name|socket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedDockerEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedDockerEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.docker.DockerOperation</code> enum.      */
DECL|enum|DockerOperation
specifier|public
specifier|static
enum|enum
name|DockerOperation
block|{
DECL|enumConstant|events
DECL|enumConstant|stats
DECL|enumConstant|auth
DECL|enumConstant|info
DECL|enumConstant|ping
DECL|enumConstant|version
DECL|enumConstant|imagebuild
DECL|enumConstant|imagecreate
DECL|enumConstant|imageinspect
DECL|enumConstant|imagelist
DECL|enumConstant|imagepull
DECL|enumConstant|imagepush
DECL|enumConstant|imageremove
DECL|enumConstant|imagesearch
DECL|enumConstant|imagetag
DECL|enumConstant|containerattach
DECL|enumConstant|containercommit
DECL|enumConstant|containercopyfile
DECL|enumConstant|containercreate
DECL|enumConstant|containerdiff
DECL|enumConstant|inspectcontainer
DECL|enumConstant|containerkill
DECL|enumConstant|containerlist
DECL|enumConstant|containerlog
DECL|enumConstant|containerpause
DECL|enumConstant|containerrestart
DECL|enumConstant|containerremove
DECL|enumConstant|containerstart
DECL|enumConstant|containerstop
DECL|enumConstant|containertop
DECL|enumConstant|containerunpause
DECL|enumConstant|networkcreate
DECL|enumConstant|networkremove
DECL|enumConstant|networkconnect
DECL|enumConstant|containerwait
DECL|enumConstant|execcreate
DECL|enumConstant|execstart
name|events
block|,
name|stats
block|,
name|auth
block|,
name|info
block|,
name|ping
block|,
name|version
block|,
name|imagebuild
block|,
name|imagecreate
block|,
name|imageinspect
block|,
name|imagelist
block|,
name|imagepull
block|,
name|imagepush
block|,
name|imageremove
block|,
name|imagesearch
block|,
name|imagetag
block|,
name|containerattach
block|,
name|containercommit
block|,
name|containercopyfile
block|,
name|containercreate
block|,
name|containerdiff
block|,
name|inspectcontainer
block|,
name|containerkill
block|,
name|containerlist
block|,
name|containerlog
block|,
name|containerpause
block|,
name|containerrestart
block|,
name|containerremove
block|,
name|containerstart
block|,
name|containerstop
block|,
name|containertop
block|,
name|containerunpause
block|,
name|networkcreate
block|,
name|networkremove
block|,
name|networkconnect
block|,
name|containerwait
block|,
name|execcreate
block|,
name|execstart
block|;     }
comment|/**      * The docker component is used for managing Docker containers. Creates a      * builder to build endpoints for the Docker component.      */
DECL|method|docker (String path)
specifier|default
name|DockerEndpointBuilder
name|docker
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|DockerEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|DockerEndpointBuilder
implements|,
name|AdvancedDockerEndpointBuilder
block|{
specifier|public
name|DockerEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"docker"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DockerEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

