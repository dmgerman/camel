begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The jbpm component provides integration with jBPM (Business Process  * Management).  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|JBPMEndpointBuilderFactory
specifier|public
interface|interface
name|JBPMEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the JBPM component.      */
DECL|interface|JBPMEndpointConsumerBuilder
specifier|public
interface|interface
name|JBPMEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJBPMEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJBPMEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * attachId to use when retrieving attachments.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|attachmentId (Long attachmentId)
specifier|default
name|JBPMEndpointConsumerBuilder
name|attachmentId
parameter_list|(
name|Long
name|attachmentId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"attachmentId"
argument_list|,
name|attachmentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * attachId to use when retrieving attachments.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|attachmentId (String attachmentId)
specifier|default
name|JBPMEndpointConsumerBuilder
name|attachmentId
parameter_list|(
name|String
name|attachmentId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"attachmentId"
argument_list|,
name|attachmentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * contentId to use when retrieving attachments.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|contentId (Long contentId)
specifier|default
name|JBPMEndpointConsumerBuilder
name|contentId
parameter_list|(
name|Long
name|contentId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentId"
argument_list|,
name|contentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * contentId to use when retrieving attachments.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|contentId (String contentId)
specifier|default
name|JBPMEndpointConsumerBuilder
name|contentId
parameter_list|(
name|String
name|contentId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentId"
argument_list|,
name|contentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The id of the deployment.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: common          */
DECL|method|deploymentId (String deploymentId)
specifier|default
name|JBPMEndpointConsumerBuilder
name|deploymentId
parameter_list|(
name|String
name|deploymentId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"deploymentId"
argument_list|,
name|deploymentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets if event produced by emitter should be sent as single items or          * complete collection.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: common          */
DECL|method|emitterSendItems ( Boolean emitterSendItems)
specifier|default
name|JBPMEndpointConsumerBuilder
name|emitterSendItems
parameter_list|(
name|Boolean
name|emitterSendItems
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"emitterSendItems"
argument_list|,
name|emitterSendItems
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets if event produced by emitter should be sent as single items or          * complete collection.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: common          */
DECL|method|emitterSendItems ( String emitterSendItems)
specifier|default
name|JBPMEndpointConsumerBuilder
name|emitterSendItems
parameter_list|(
name|String
name|emitterSendItems
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"emitterSendItems"
argument_list|,
name|emitterSendItems
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the data associated with this event when signalEvent operation is          * performed.          *           * The option is a:<code>java.lang.Object</code> type.          *           * Group: common          */
DECL|method|event (Object event)
specifier|default
name|JBPMEndpointConsumerBuilder
name|event
parameter_list|(
name|Object
name|event
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"event"
argument_list|,
name|event
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the data associated with this event when signalEvent operation is          * performed.          *           * The option will be converted to a<code>java.lang.Object</code> type.          *           * Group: common          */
DECL|method|event (String event)
specifier|default
name|JBPMEndpointConsumerBuilder
name|event
parameter_list|(
name|String
name|event
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"event"
argument_list|,
name|event
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the type of event to use when signalEvent operation is performed.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|eventType (String eventType)
specifier|default
name|JBPMEndpointConsumerBuilder
name|eventType
parameter_list|(
name|String
name|eventType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventType"
argument_list|,
name|eventType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * identifier the global identifier.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|identifier (String identifier)
specifier|default
name|JBPMEndpointConsumerBuilder
name|identifier
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"identifier"
argument_list|,
name|identifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the maximum number of rules that should be fired.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|maxNumber (Integer maxNumber)
specifier|default
name|JBPMEndpointConsumerBuilder
name|maxNumber
parameter_list|(
name|Integer
name|maxNumber
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxNumber"
argument_list|,
name|maxNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the maximum number of rules that should be fired.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|maxNumber (String maxNumber)
specifier|default
name|JBPMEndpointConsumerBuilder
name|maxNumber
parameter_list|(
name|String
name|maxNumber
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxNumber"
argument_list|,
name|maxNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The page to use when retrieving user tasks.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|page (Integer page)
specifier|default
name|JBPMEndpointConsumerBuilder
name|page
parameter_list|(
name|Integer
name|page
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"page"
argument_list|,
name|page
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The page to use when retrieving user tasks.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|page (String page)
specifier|default
name|JBPMEndpointConsumerBuilder
name|page
parameter_list|(
name|String
name|page
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"page"
argument_list|,
name|page
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The page size to use when retrieving user tasks.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|pageSize (Integer pageSize)
specifier|default
name|JBPMEndpointConsumerBuilder
name|pageSize
parameter_list|(
name|Integer
name|pageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pageSize"
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The page size to use when retrieving user tasks.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|pageSize (String pageSize)
specifier|default
name|JBPMEndpointConsumerBuilder
name|pageSize
parameter_list|(
name|String
name|pageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pageSize"
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the process that should be acted upon.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|processId (String processId)
specifier|default
name|JBPMEndpointConsumerBuilder
name|processId
parameter_list|(
name|String
name|processId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"processId"
argument_list|,
name|processId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the process instance.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|processInstanceId ( Long processInstanceId)
specifier|default
name|JBPMEndpointConsumerBuilder
name|processInstanceId
parameter_list|(
name|Long
name|processInstanceId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"processInstanceId"
argument_list|,
name|processInstanceId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the process instance.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|processInstanceId ( String processInstanceId)
specifier|default
name|JBPMEndpointConsumerBuilder
name|processInstanceId
parameter_list|(
name|String
name|processInstanceId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"processInstanceId"
argument_list|,
name|processInstanceId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The targetUserId used when delegating a task.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|targetUserId (String targetUserId)
specifier|default
name|JBPMEndpointConsumerBuilder
name|targetUserId
parameter_list|(
name|String
name|targetUserId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"targetUserId"
argument_list|,
name|targetUserId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The task instance to use with task operations.          *           * The option is a:<code>org.kie.api.task.model.Task</code> type.          *           * Group: common          */
DECL|method|task (Object task)
specifier|default
name|JBPMEndpointConsumerBuilder
name|task
parameter_list|(
name|Object
name|task
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"task"
argument_list|,
name|task
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The task instance to use with task operations.          *           * The option will be converted to a          *<code>org.kie.api.task.model.Task</code> type.          *           * Group: common          */
DECL|method|task (String task)
specifier|default
name|JBPMEndpointConsumerBuilder
name|task
parameter_list|(
name|String
name|task
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"task"
argument_list|,
name|task
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the task.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|taskId (Long taskId)
specifier|default
name|JBPMEndpointConsumerBuilder
name|taskId
parameter_list|(
name|Long
name|taskId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"taskId"
argument_list|,
name|taskId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the task.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|taskId (String taskId)
specifier|default
name|JBPMEndpointConsumerBuilder
name|taskId
parameter_list|(
name|String
name|taskId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"taskId"
argument_list|,
name|taskId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A timeout value.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|timeout (Integer timeout)
specifier|default
name|JBPMEndpointConsumerBuilder
name|timeout
parameter_list|(
name|Integer
name|timeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A timeout value.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|timeout (String timeout)
specifier|default
name|JBPMEndpointConsumerBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * userId to use with task operations.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|userId (String userId)
specifier|default
name|JBPMEndpointConsumerBuilder
name|userId
parameter_list|(
name|String
name|userId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"userId"
argument_list|,
name|userId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the value to assign to the global identifier.          *           * The option is a:<code>java.lang.Object</code> type.          *           * Group: common          */
DECL|method|value (Object value)
specifier|default
name|JBPMEndpointConsumerBuilder
name|value
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the value to assign to the global identifier.          *           * The option will be converted to a<code>java.lang.Object</code> type.          *           * Group: common          */
DECL|method|value (String value)
specifier|default
name|JBPMEndpointConsumerBuilder
name|value
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the work item.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|workItemId (Long workItemId)
specifier|default
name|JBPMEndpointConsumerBuilder
name|workItemId
parameter_list|(
name|Long
name|workItemId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workItemId"
argument_list|,
name|workItemId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the work item.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|workItemId (String workItemId)
specifier|default
name|JBPMEndpointConsumerBuilder
name|workItemId
parameter_list|(
name|String
name|workItemId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workItemId"
argument_list|,
name|workItemId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|JBPMEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|JBPMEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The list of status to use when filtering tasks.          *           * The option is a:<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          *           * Group: filter          */
DECL|method|statuses (List<String> statuses)
specifier|default
name|JBPMEndpointConsumerBuilder
name|statuses
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|statuses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"statuses"
argument_list|,
name|statuses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The list of status to use when filtering tasks.          *           * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          *           * Group: filter          */
DECL|method|statuses (String statuses)
specifier|default
name|JBPMEndpointConsumerBuilder
name|statuses
parameter_list|(
name|String
name|statuses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"statuses"
argument_list|,
name|statuses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for authentication.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|JBPMEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username for authentication.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|userName (String userName)
specifier|default
name|JBPMEndpointConsumerBuilder
name|userName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the JBPM component.      */
DECL|interface|AdvancedJBPMEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedJBPMEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|JBPMEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|JBPMEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedJBPMEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedJBPMEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedJBPMEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedJBPMEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJBPMEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJBPMEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The potentialOwners when nominateTask operation is performed.          *           * The option is a:<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|entities ( List<String> entities)
specifier|default
name|AdvancedJBPMEndpointConsumerBuilder
name|entities
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|entities
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"entities"
argument_list|,
name|entities
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The potentialOwners when nominateTask operation is performed.          *           * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          *           * Group: advanced          */
DECL|method|entities (String entities)
specifier|default
name|AdvancedJBPMEndpointConsumerBuilder
name|entities
parameter_list|(
name|String
name|entities
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"entities"
argument_list|,
name|entities
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To load additional classes when working with XML.          *           * The option is a:<code>java.lang.Class[]</code> type.          *           * Group: advanced          */
DECL|method|extraJaxbClasses ( Class[] extraJaxbClasses)
specifier|default
name|AdvancedJBPMEndpointConsumerBuilder
name|extraJaxbClasses
parameter_list|(
name|Class
index|[]
name|extraJaxbClasses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"extraJaxbClasses"
argument_list|,
name|extraJaxbClasses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To load additional classes when working with XML.          *           * The option will be converted to a<code>java.lang.Class[]</code>          * type.          *           * Group: advanced          */
DECL|method|extraJaxbClasses ( String extraJaxbClasses)
specifier|default
name|AdvancedJBPMEndpointConsumerBuilder
name|extraJaxbClasses
parameter_list|(
name|String
name|extraJaxbClasses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"extraJaxbClasses"
argument_list|,
name|extraJaxbClasses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the variables that should be set for various operations.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|parameters ( Map<String, Object> parameters)
specifier|default
name|AdvancedJBPMEndpointConsumerBuilder
name|parameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"parameters"
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the variables that should be set for various operations.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|parameters (String parameters)
specifier|default
name|AdvancedJBPMEndpointConsumerBuilder
name|parameters
parameter_list|(
name|String
name|parameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"parameters"
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedJBPMEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedJBPMEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the JBPM component.      */
DECL|interface|JBPMEndpointProducerBuilder
specifier|public
interface|interface
name|JBPMEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJBPMEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJBPMEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * attachId to use when retrieving attachments.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|attachmentId (Long attachmentId)
specifier|default
name|JBPMEndpointProducerBuilder
name|attachmentId
parameter_list|(
name|Long
name|attachmentId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"attachmentId"
argument_list|,
name|attachmentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * attachId to use when retrieving attachments.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|attachmentId (String attachmentId)
specifier|default
name|JBPMEndpointProducerBuilder
name|attachmentId
parameter_list|(
name|String
name|attachmentId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"attachmentId"
argument_list|,
name|attachmentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * contentId to use when retrieving attachments.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|contentId (Long contentId)
specifier|default
name|JBPMEndpointProducerBuilder
name|contentId
parameter_list|(
name|Long
name|contentId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentId"
argument_list|,
name|contentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * contentId to use when retrieving attachments.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|contentId (String contentId)
specifier|default
name|JBPMEndpointProducerBuilder
name|contentId
parameter_list|(
name|String
name|contentId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentId"
argument_list|,
name|contentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The id of the deployment.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: common          */
DECL|method|deploymentId (String deploymentId)
specifier|default
name|JBPMEndpointProducerBuilder
name|deploymentId
parameter_list|(
name|String
name|deploymentId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"deploymentId"
argument_list|,
name|deploymentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets if event produced by emitter should be sent as single items or          * complete collection.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: common          */
DECL|method|emitterSendItems ( Boolean emitterSendItems)
specifier|default
name|JBPMEndpointProducerBuilder
name|emitterSendItems
parameter_list|(
name|Boolean
name|emitterSendItems
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"emitterSendItems"
argument_list|,
name|emitterSendItems
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets if event produced by emitter should be sent as single items or          * complete collection.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: common          */
DECL|method|emitterSendItems ( String emitterSendItems)
specifier|default
name|JBPMEndpointProducerBuilder
name|emitterSendItems
parameter_list|(
name|String
name|emitterSendItems
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"emitterSendItems"
argument_list|,
name|emitterSendItems
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the data associated with this event when signalEvent operation is          * performed.          *           * The option is a:<code>java.lang.Object</code> type.          *           * Group: common          */
DECL|method|event (Object event)
specifier|default
name|JBPMEndpointProducerBuilder
name|event
parameter_list|(
name|Object
name|event
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"event"
argument_list|,
name|event
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the data associated with this event when signalEvent operation is          * performed.          *           * The option will be converted to a<code>java.lang.Object</code> type.          *           * Group: common          */
DECL|method|event (String event)
specifier|default
name|JBPMEndpointProducerBuilder
name|event
parameter_list|(
name|String
name|event
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"event"
argument_list|,
name|event
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the type of event to use when signalEvent operation is performed.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|eventType (String eventType)
specifier|default
name|JBPMEndpointProducerBuilder
name|eventType
parameter_list|(
name|String
name|eventType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventType"
argument_list|,
name|eventType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * identifier the global identifier.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|identifier (String identifier)
specifier|default
name|JBPMEndpointProducerBuilder
name|identifier
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"identifier"
argument_list|,
name|identifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the maximum number of rules that should be fired.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|maxNumber (Integer maxNumber)
specifier|default
name|JBPMEndpointProducerBuilder
name|maxNumber
parameter_list|(
name|Integer
name|maxNumber
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxNumber"
argument_list|,
name|maxNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the maximum number of rules that should be fired.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|maxNumber (String maxNumber)
specifier|default
name|JBPMEndpointProducerBuilder
name|maxNumber
parameter_list|(
name|String
name|maxNumber
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxNumber"
argument_list|,
name|maxNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The page to use when retrieving user tasks.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|page (Integer page)
specifier|default
name|JBPMEndpointProducerBuilder
name|page
parameter_list|(
name|Integer
name|page
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"page"
argument_list|,
name|page
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The page to use when retrieving user tasks.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|page (String page)
specifier|default
name|JBPMEndpointProducerBuilder
name|page
parameter_list|(
name|String
name|page
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"page"
argument_list|,
name|page
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The page size to use when retrieving user tasks.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|pageSize (Integer pageSize)
specifier|default
name|JBPMEndpointProducerBuilder
name|pageSize
parameter_list|(
name|Integer
name|pageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pageSize"
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The page size to use when retrieving user tasks.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|pageSize (String pageSize)
specifier|default
name|JBPMEndpointProducerBuilder
name|pageSize
parameter_list|(
name|String
name|pageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pageSize"
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the process that should be acted upon.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|processId (String processId)
specifier|default
name|JBPMEndpointProducerBuilder
name|processId
parameter_list|(
name|String
name|processId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"processId"
argument_list|,
name|processId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the process instance.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|processInstanceId ( Long processInstanceId)
specifier|default
name|JBPMEndpointProducerBuilder
name|processInstanceId
parameter_list|(
name|Long
name|processInstanceId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"processInstanceId"
argument_list|,
name|processInstanceId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the process instance.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|processInstanceId ( String processInstanceId)
specifier|default
name|JBPMEndpointProducerBuilder
name|processInstanceId
parameter_list|(
name|String
name|processInstanceId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"processInstanceId"
argument_list|,
name|processInstanceId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The targetUserId used when delegating a task.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|targetUserId (String targetUserId)
specifier|default
name|JBPMEndpointProducerBuilder
name|targetUserId
parameter_list|(
name|String
name|targetUserId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"targetUserId"
argument_list|,
name|targetUserId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The task instance to use with task operations.          *           * The option is a:<code>org.kie.api.task.model.Task</code> type.          *           * Group: common          */
DECL|method|task (Object task)
specifier|default
name|JBPMEndpointProducerBuilder
name|task
parameter_list|(
name|Object
name|task
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"task"
argument_list|,
name|task
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The task instance to use with task operations.          *           * The option will be converted to a          *<code>org.kie.api.task.model.Task</code> type.          *           * Group: common          */
DECL|method|task (String task)
specifier|default
name|JBPMEndpointProducerBuilder
name|task
parameter_list|(
name|String
name|task
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"task"
argument_list|,
name|task
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the task.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|taskId (Long taskId)
specifier|default
name|JBPMEndpointProducerBuilder
name|taskId
parameter_list|(
name|Long
name|taskId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"taskId"
argument_list|,
name|taskId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the task.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|taskId (String taskId)
specifier|default
name|JBPMEndpointProducerBuilder
name|taskId
parameter_list|(
name|String
name|taskId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"taskId"
argument_list|,
name|taskId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A timeout value.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|timeout (Integer timeout)
specifier|default
name|JBPMEndpointProducerBuilder
name|timeout
parameter_list|(
name|Integer
name|timeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A timeout value.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|timeout (String timeout)
specifier|default
name|JBPMEndpointProducerBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * userId to use with task operations.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|userId (String userId)
specifier|default
name|JBPMEndpointProducerBuilder
name|userId
parameter_list|(
name|String
name|userId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"userId"
argument_list|,
name|userId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the value to assign to the global identifier.          *           * The option is a:<code>java.lang.Object</code> type.          *           * Group: common          */
DECL|method|value (Object value)
specifier|default
name|JBPMEndpointProducerBuilder
name|value
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the value to assign to the global identifier.          *           * The option will be converted to a<code>java.lang.Object</code> type.          *           * Group: common          */
DECL|method|value (String value)
specifier|default
name|JBPMEndpointProducerBuilder
name|value
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the work item.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|workItemId (Long workItemId)
specifier|default
name|JBPMEndpointProducerBuilder
name|workItemId
parameter_list|(
name|Long
name|workItemId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workItemId"
argument_list|,
name|workItemId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the work item.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|workItemId (String workItemId)
specifier|default
name|JBPMEndpointProducerBuilder
name|workItemId
parameter_list|(
name|String
name|workItemId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workItemId"
argument_list|,
name|workItemId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|JBPMEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|JBPMEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The operation to perform.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|operation (String operation)
specifier|default
name|JBPMEndpointProducerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The list of status to use when filtering tasks.          *           * The option is a:<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          *           * Group: filter          */
DECL|method|statuses (List<String> statuses)
specifier|default
name|JBPMEndpointProducerBuilder
name|statuses
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|statuses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"statuses"
argument_list|,
name|statuses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The list of status to use when filtering tasks.          *           * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          *           * Group: filter          */
DECL|method|statuses (String statuses)
specifier|default
name|JBPMEndpointProducerBuilder
name|statuses
parameter_list|(
name|String
name|statuses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"statuses"
argument_list|,
name|statuses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for authentication.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|JBPMEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username for authentication.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|userName (String userName)
specifier|default
name|JBPMEndpointProducerBuilder
name|userName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the JBPM component.      */
DECL|interface|AdvancedJBPMEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedJBPMEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|JBPMEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|JBPMEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJBPMEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJBPMEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The potentialOwners when nominateTask operation is performed.          *           * The option is a:<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|entities ( List<String> entities)
specifier|default
name|AdvancedJBPMEndpointProducerBuilder
name|entities
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|entities
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"entities"
argument_list|,
name|entities
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The potentialOwners when nominateTask operation is performed.          *           * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          *           * Group: advanced          */
DECL|method|entities (String entities)
specifier|default
name|AdvancedJBPMEndpointProducerBuilder
name|entities
parameter_list|(
name|String
name|entities
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"entities"
argument_list|,
name|entities
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To load additional classes when working with XML.          *           * The option is a:<code>java.lang.Class[]</code> type.          *           * Group: advanced          */
DECL|method|extraJaxbClasses ( Class[] extraJaxbClasses)
specifier|default
name|AdvancedJBPMEndpointProducerBuilder
name|extraJaxbClasses
parameter_list|(
name|Class
index|[]
name|extraJaxbClasses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"extraJaxbClasses"
argument_list|,
name|extraJaxbClasses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To load additional classes when working with XML.          *           * The option will be converted to a<code>java.lang.Class[]</code>          * type.          *           * Group: advanced          */
DECL|method|extraJaxbClasses ( String extraJaxbClasses)
specifier|default
name|AdvancedJBPMEndpointProducerBuilder
name|extraJaxbClasses
parameter_list|(
name|String
name|extraJaxbClasses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"extraJaxbClasses"
argument_list|,
name|extraJaxbClasses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the variables that should be set for various operations.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|parameters ( Map<String, Object> parameters)
specifier|default
name|AdvancedJBPMEndpointProducerBuilder
name|parameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"parameters"
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the variables that should be set for various operations.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|parameters (String parameters)
specifier|default
name|AdvancedJBPMEndpointProducerBuilder
name|parameters
parameter_list|(
name|String
name|parameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"parameters"
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedJBPMEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedJBPMEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the JBPM component.      */
DECL|interface|JBPMEndpointBuilder
specifier|public
interface|interface
name|JBPMEndpointBuilder
extends|extends
name|JBPMEndpointConsumerBuilder
extends|,
name|JBPMEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJBPMEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJBPMEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * attachId to use when retrieving attachments.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|attachmentId (Long attachmentId)
specifier|default
name|JBPMEndpointBuilder
name|attachmentId
parameter_list|(
name|Long
name|attachmentId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"attachmentId"
argument_list|,
name|attachmentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * attachId to use when retrieving attachments.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|attachmentId (String attachmentId)
specifier|default
name|JBPMEndpointBuilder
name|attachmentId
parameter_list|(
name|String
name|attachmentId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"attachmentId"
argument_list|,
name|attachmentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * contentId to use when retrieving attachments.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|contentId (Long contentId)
specifier|default
name|JBPMEndpointBuilder
name|contentId
parameter_list|(
name|Long
name|contentId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentId"
argument_list|,
name|contentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * contentId to use when retrieving attachments.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|contentId (String contentId)
specifier|default
name|JBPMEndpointBuilder
name|contentId
parameter_list|(
name|String
name|contentId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentId"
argument_list|,
name|contentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The id of the deployment.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: common          */
DECL|method|deploymentId (String deploymentId)
specifier|default
name|JBPMEndpointBuilder
name|deploymentId
parameter_list|(
name|String
name|deploymentId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"deploymentId"
argument_list|,
name|deploymentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets if event produced by emitter should be sent as single items or          * complete collection.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: common          */
DECL|method|emitterSendItems (Boolean emitterSendItems)
specifier|default
name|JBPMEndpointBuilder
name|emitterSendItems
parameter_list|(
name|Boolean
name|emitterSendItems
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"emitterSendItems"
argument_list|,
name|emitterSendItems
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets if event produced by emitter should be sent as single items or          * complete collection.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: common          */
DECL|method|emitterSendItems (String emitterSendItems)
specifier|default
name|JBPMEndpointBuilder
name|emitterSendItems
parameter_list|(
name|String
name|emitterSendItems
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"emitterSendItems"
argument_list|,
name|emitterSendItems
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the data associated with this event when signalEvent operation is          * performed.          *           * The option is a:<code>java.lang.Object</code> type.          *           * Group: common          */
DECL|method|event (Object event)
specifier|default
name|JBPMEndpointBuilder
name|event
parameter_list|(
name|Object
name|event
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"event"
argument_list|,
name|event
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the data associated with this event when signalEvent operation is          * performed.          *           * The option will be converted to a<code>java.lang.Object</code> type.          *           * Group: common          */
DECL|method|event (String event)
specifier|default
name|JBPMEndpointBuilder
name|event
parameter_list|(
name|String
name|event
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"event"
argument_list|,
name|event
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the type of event to use when signalEvent operation is performed.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|eventType (String eventType)
specifier|default
name|JBPMEndpointBuilder
name|eventType
parameter_list|(
name|String
name|eventType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventType"
argument_list|,
name|eventType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * identifier the global identifier.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|identifier (String identifier)
specifier|default
name|JBPMEndpointBuilder
name|identifier
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"identifier"
argument_list|,
name|identifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the maximum number of rules that should be fired.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|maxNumber (Integer maxNumber)
specifier|default
name|JBPMEndpointBuilder
name|maxNumber
parameter_list|(
name|Integer
name|maxNumber
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxNumber"
argument_list|,
name|maxNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the maximum number of rules that should be fired.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|maxNumber (String maxNumber)
specifier|default
name|JBPMEndpointBuilder
name|maxNumber
parameter_list|(
name|String
name|maxNumber
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxNumber"
argument_list|,
name|maxNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The page to use when retrieving user tasks.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|page (Integer page)
specifier|default
name|JBPMEndpointBuilder
name|page
parameter_list|(
name|Integer
name|page
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"page"
argument_list|,
name|page
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The page to use when retrieving user tasks.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|page (String page)
specifier|default
name|JBPMEndpointBuilder
name|page
parameter_list|(
name|String
name|page
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"page"
argument_list|,
name|page
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The page size to use when retrieving user tasks.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|pageSize (Integer pageSize)
specifier|default
name|JBPMEndpointBuilder
name|pageSize
parameter_list|(
name|Integer
name|pageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pageSize"
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The page size to use when retrieving user tasks.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|pageSize (String pageSize)
specifier|default
name|JBPMEndpointBuilder
name|pageSize
parameter_list|(
name|String
name|pageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pageSize"
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the process that should be acted upon.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|processId (String processId)
specifier|default
name|JBPMEndpointBuilder
name|processId
parameter_list|(
name|String
name|processId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"processId"
argument_list|,
name|processId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the process instance.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|processInstanceId (Long processInstanceId)
specifier|default
name|JBPMEndpointBuilder
name|processInstanceId
parameter_list|(
name|Long
name|processInstanceId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"processInstanceId"
argument_list|,
name|processInstanceId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the process instance.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|processInstanceId (String processInstanceId)
specifier|default
name|JBPMEndpointBuilder
name|processInstanceId
parameter_list|(
name|String
name|processInstanceId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"processInstanceId"
argument_list|,
name|processInstanceId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The targetUserId used when delegating a task.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|targetUserId (String targetUserId)
specifier|default
name|JBPMEndpointBuilder
name|targetUserId
parameter_list|(
name|String
name|targetUserId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"targetUserId"
argument_list|,
name|targetUserId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The task instance to use with task operations.          *           * The option is a:<code>org.kie.api.task.model.Task</code> type.          *           * Group: common          */
DECL|method|task (Object task)
specifier|default
name|JBPMEndpointBuilder
name|task
parameter_list|(
name|Object
name|task
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"task"
argument_list|,
name|task
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The task instance to use with task operations.          *           * The option will be converted to a          *<code>org.kie.api.task.model.Task</code> type.          *           * Group: common          */
DECL|method|task (String task)
specifier|default
name|JBPMEndpointBuilder
name|task
parameter_list|(
name|String
name|task
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"task"
argument_list|,
name|task
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the task.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|taskId (Long taskId)
specifier|default
name|JBPMEndpointBuilder
name|taskId
parameter_list|(
name|Long
name|taskId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"taskId"
argument_list|,
name|taskId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the task.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|taskId (String taskId)
specifier|default
name|JBPMEndpointBuilder
name|taskId
parameter_list|(
name|String
name|taskId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"taskId"
argument_list|,
name|taskId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A timeout value.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|timeout (Integer timeout)
specifier|default
name|JBPMEndpointBuilder
name|timeout
parameter_list|(
name|Integer
name|timeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A timeout value.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|timeout (String timeout)
specifier|default
name|JBPMEndpointBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * userId to use with task operations.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|userId (String userId)
specifier|default
name|JBPMEndpointBuilder
name|userId
parameter_list|(
name|String
name|userId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"userId"
argument_list|,
name|userId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the value to assign to the global identifier.          *           * The option is a:<code>java.lang.Object</code> type.          *           * Group: common          */
DECL|method|value (Object value)
specifier|default
name|JBPMEndpointBuilder
name|value
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the value to assign to the global identifier.          *           * The option will be converted to a<code>java.lang.Object</code> type.          *           * Group: common          */
DECL|method|value (String value)
specifier|default
name|JBPMEndpointBuilder
name|value
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the work item.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|workItemId (Long workItemId)
specifier|default
name|JBPMEndpointBuilder
name|workItemId
parameter_list|(
name|Long
name|workItemId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workItemId"
argument_list|,
name|workItemId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the id of the work item.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: common          */
DECL|method|workItemId (String workItemId)
specifier|default
name|JBPMEndpointBuilder
name|workItemId
parameter_list|(
name|String
name|workItemId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workItemId"
argument_list|,
name|workItemId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The list of status to use when filtering tasks.          *           * The option is a:<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          *           * Group: filter          */
DECL|method|statuses (List<String> statuses)
specifier|default
name|JBPMEndpointBuilder
name|statuses
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|statuses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"statuses"
argument_list|,
name|statuses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The list of status to use when filtering tasks.          *           * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          *           * Group: filter          */
DECL|method|statuses (String statuses)
specifier|default
name|JBPMEndpointBuilder
name|statuses
parameter_list|(
name|String
name|statuses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"statuses"
argument_list|,
name|statuses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for authentication.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|JBPMEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username for authentication.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|userName (String userName)
specifier|default
name|JBPMEndpointBuilder
name|userName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the JBPM component.      */
DECL|interface|AdvancedJBPMEndpointBuilder
specifier|public
interface|interface
name|AdvancedJBPMEndpointBuilder
extends|extends
name|AdvancedJBPMEndpointConsumerBuilder
extends|,
name|AdvancedJBPMEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|JBPMEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|JBPMEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJBPMEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJBPMEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The potentialOwners when nominateTask operation is performed.          *           * The option is a:<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|entities (List<String> entities)
specifier|default
name|AdvancedJBPMEndpointBuilder
name|entities
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|entities
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"entities"
argument_list|,
name|entities
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The potentialOwners when nominateTask operation is performed.          *           * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          *           * Group: advanced          */
DECL|method|entities (String entities)
specifier|default
name|AdvancedJBPMEndpointBuilder
name|entities
parameter_list|(
name|String
name|entities
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"entities"
argument_list|,
name|entities
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To load additional classes when working with XML.          *           * The option is a:<code>java.lang.Class[]</code> type.          *           * Group: advanced          */
DECL|method|extraJaxbClasses ( Class[] extraJaxbClasses)
specifier|default
name|AdvancedJBPMEndpointBuilder
name|extraJaxbClasses
parameter_list|(
name|Class
index|[]
name|extraJaxbClasses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"extraJaxbClasses"
argument_list|,
name|extraJaxbClasses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To load additional classes when working with XML.          *           * The option will be converted to a<code>java.lang.Class[]</code>          * type.          *           * Group: advanced          */
DECL|method|extraJaxbClasses ( String extraJaxbClasses)
specifier|default
name|AdvancedJBPMEndpointBuilder
name|extraJaxbClasses
parameter_list|(
name|String
name|extraJaxbClasses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"extraJaxbClasses"
argument_list|,
name|extraJaxbClasses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the variables that should be set for various operations.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|parameters ( Map<String, Object> parameters)
specifier|default
name|AdvancedJBPMEndpointBuilder
name|parameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"parameters"
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the variables that should be set for various operations.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|parameters (String parameters)
specifier|default
name|AdvancedJBPMEndpointBuilder
name|parameters
parameter_list|(
name|String
name|parameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"parameters"
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedJBPMEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedJBPMEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * JBPM (camel-jbpm)      * The jbpm component provides integration with jBPM (Business Process      * Management).      *       * Category: process      * Available as of version: 2.6      * Maven coordinates: org.apache.camel:camel-jbpm      *       * Syntax:<code>jbpm:connectionURL</code>      *       * Path parameter: connectionURL (required)      * The URL to the jBPM server.      *       * Path parameter: eventListenerType      * Sets the event listener type to attach to      */
DECL|method|jbpm (String path)
specifier|default
name|JBPMEndpointBuilder
name|jbpm
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|JBPMEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|JBPMEndpointBuilder
implements|,
name|AdvancedJBPMEndpointBuilder
block|{
specifier|public
name|JBPMEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"jbpm"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|JBPMEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

