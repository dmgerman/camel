begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The file-watch is used to monitor file events in directory using  * java.nio.file.WatchService  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|FileWatchEndpointBuilderFactory
specifier|public
interface|interface
name|FileWatchEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint for the file-watch component.      */
DECL|interface|FileWatchEndpointBuilder
specifier|public
interface|interface
name|FileWatchEndpointBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedFileWatchEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedFileWatchEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * ANT style pattern to match files. The file is matched against path          * relative to endpoint path. Pattern must be also relative (not          * starting with slash).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|antInclude (String antInclude)
specifier|default
name|FileWatchEndpointBuilder
name|antInclude
parameter_list|(
name|String
name|antInclude
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"antInclude"
argument_list|,
name|antInclude
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Auto create directory if does not exists.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|autoCreate (boolean autoCreate)
specifier|default
name|FileWatchEndpointBuilder
name|autoCreate
parameter_list|(
name|boolean
name|autoCreate
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoCreate"
argument_list|,
name|autoCreate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Auto create directory if does not exists.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|autoCreate (String autoCreate)
specifier|default
name|FileWatchEndpointBuilder
name|autoCreate
parameter_list|(
name|String
name|autoCreate
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoCreate"
argument_list|,
name|autoCreate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|FileWatchEndpointBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|FileWatchEndpointBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of concurrent consumers. Increase this value, if your          * route is slow to prevent buffering in queue.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|concurrentConsumers ( int concurrentConsumers)
specifier|default
name|FileWatchEndpointBuilder
name|concurrentConsumers
parameter_list|(
name|int
name|concurrentConsumers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"concurrentConsumers"
argument_list|,
name|concurrentConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of concurrent consumers. Increase this value, if your          * route is slow to prevent buffering in queue.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|concurrentConsumers ( String concurrentConsumers)
specifier|default
name|FileWatchEndpointBuilder
name|concurrentConsumers
parameter_list|(
name|String
name|concurrentConsumers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"concurrentConsumers"
argument_list|,
name|concurrentConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Comma separated list of events to watch.          *           * The option is a:          *<code>java.util.Set&lt;org.apache.camel.component.file.watch.constants.FileEventEnum&gt;</code> type.          *           * Group: consumer          */
DECL|method|events (Set<FileEventEnum> events)
specifier|default
name|FileWatchEndpointBuilder
name|events
parameter_list|(
name|Set
argument_list|<
name|FileEventEnum
argument_list|>
name|events
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"events"
argument_list|,
name|events
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Comma separated list of events to watch.          *           * The option will be converted to a          *<code>java.util.Set&lt;org.apache.camel.component.file.watch.constants.FileEventEnum&gt;</code> type.          *           * Group: consumer          */
DECL|method|events (String events)
specifier|default
name|FileWatchEndpointBuilder
name|events
parameter_list|(
name|String
name|events
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"events"
argument_list|,
name|events
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to io.methvin.watcher.hashing.FileHasher. This prevents          * emitting duplicate events on some platforms. For working with large          * files and if you dont need detect multiple modifications per second          * per file, use #lastModifiedTimeFileHasher. You can also provide          * custom implementation in registry.          *           * The option is a:<code>io.methvin.watcher.hashing.FileHasher</code>          * type.          *           * Group: consumer          */
DECL|method|fileHasher (Object fileHasher)
specifier|default
name|FileWatchEndpointBuilder
name|fileHasher
parameter_list|(
name|Object
name|fileHasher
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fileHasher"
argument_list|,
name|fileHasher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to io.methvin.watcher.hashing.FileHasher. This prevents          * emitting duplicate events on some platforms. For working with large          * files and if you dont need detect multiple modifications per second          * per file, use #lastModifiedTimeFileHasher. You can also provide          * custom implementation in registry.          *           * The option will be converted to a          *<code>io.methvin.watcher.hashing.FileHasher</code> type.          *           * Group: consumer          */
DECL|method|fileHasher (String fileHasher)
specifier|default
name|FileWatchEndpointBuilder
name|fileHasher
parameter_list|(
name|String
name|fileHasher
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fileHasher"
argument_list|,
name|fileHasher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of threads polling WatchService. Increase this value, if          * you see OVERFLOW messages in log.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|pollThreads (int pollThreads)
specifier|default
name|FileWatchEndpointBuilder
name|pollThreads
parameter_list|(
name|int
name|pollThreads
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollThreads"
argument_list|,
name|pollThreads
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of threads polling WatchService. Increase this value, if          * you see OVERFLOW messages in log.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|pollThreads (String pollThreads)
specifier|default
name|FileWatchEndpointBuilder
name|pollThreads
parameter_list|(
name|String
name|pollThreads
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollThreads"
argument_list|,
name|pollThreads
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of queue between WatchService and consumer. Unbounded by          * default.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|queueSize (int queueSize)
specifier|default
name|FileWatchEndpointBuilder
name|queueSize
parameter_list|(
name|int
name|queueSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queueSize"
argument_list|,
name|queueSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of queue between WatchService and consumer. Unbounded by          * default.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|queueSize (String queueSize)
specifier|default
name|FileWatchEndpointBuilder
name|queueSize
parameter_list|(
name|String
name|queueSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queueSize"
argument_list|,
name|queueSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Watch recursive in current and child directories (including newly          * created directories).          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|recursive (boolean recursive)
specifier|default
name|FileWatchEndpointBuilder
name|recursive
parameter_list|(
name|boolean
name|recursive
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"recursive"
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Watch recursive in current and child directories (including newly          * created directories).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|recursive (String recursive)
specifier|default
name|FileWatchEndpointBuilder
name|recursive
parameter_list|(
name|String
name|recursive
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"recursive"
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables or disables file hashing to detect duplicate events. If you          * disable this, you can get some events multiple times on some          * platforms and JDKs. Check java.nio.file.WatchService limitations for          * your target platform.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|useFileHashing (boolean useFileHashing)
specifier|default
name|FileWatchEndpointBuilder
name|useFileHashing
parameter_list|(
name|boolean
name|useFileHashing
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useFileHashing"
argument_list|,
name|useFileHashing
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables or disables file hashing to detect duplicate events. If you          * disable this, you can get some events multiple times on some          * platforms and JDKs. Check java.nio.file.WatchService limitations for          * your target platform.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|useFileHashing (String useFileHashing)
specifier|default
name|FileWatchEndpointBuilder
name|useFileHashing
parameter_list|(
name|String
name|useFileHashing
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useFileHashing"
argument_list|,
name|useFileHashing
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the file-watch component.      */
DECL|interface|AdvancedFileWatchEndpointBuilder
specifier|public
interface|interface
name|AdvancedFileWatchEndpointBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|FileWatchEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|FileWatchEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedFileWatchEndpointBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedFileWatchEndpointBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedFileWatchEndpointBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedFileWatchEndpointBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedFileWatchEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedFileWatchEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedFileWatchEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedFileWatchEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.file.watch.constants.FileEventEnum</code> enum.      */
DECL|enum|FileEventEnum
enum|enum
name|FileEventEnum
block|{
DECL|enumConstant|CREATE
name|CREATE
block|,
DECL|enumConstant|DELETE
name|DELETE
block|,
DECL|enumConstant|MODIFY
name|MODIFY
block|;     }
comment|/**      * file-watch (camel-file-watch)      * The file-watch is used to monitor file events in directory using      * java.nio.file.WatchService      *       * Category: file      * Available as of version: 3.0      * Maven coordinates: org.apache.camel:camel-file-watch      *       * Syntax:<code>file-watch:path</code>      *       * Path parameter: path (required)      * Path of directory to consume events from.      */
DECL|method|fileWatch (String path)
specifier|default
name|FileWatchEndpointBuilder
name|fileWatch
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|FileWatchEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|FileWatchEndpointBuilder
implements|,
name|AdvancedFileWatchEndpointBuilder
block|{
specifier|public
name|FileWatchEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"file-watch"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|FileWatchEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

