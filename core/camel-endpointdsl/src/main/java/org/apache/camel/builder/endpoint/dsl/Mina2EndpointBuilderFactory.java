begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * Socket level networking using TCP or UDP with the Apache Mina 2.x library.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|Mina2EndpointBuilderFactory
specifier|public
interface|interface
name|Mina2EndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Mina2 component.      */
DECL|interface|Mina2EndpointConsumerBuilder
specifier|public
interface|interface
name|Mina2EndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedMina2EndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Protocol to use.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|protocol (String protocol)
specifier|default
name|Mina2EndpointConsumerBuilder
name|protocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"protocol"
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Hostname to use. Use localhost or 0.0.0.0 for local server as          * consumer. For producer use the hostname or ip address of the remote          * server.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|Mina2EndpointConsumerBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|port (int port)
specifier|default
name|Mina2EndpointConsumerBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|Mina2EndpointConsumerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Mina session right after          * use. Can be used for both consumer and producer.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|disconnect (boolean disconnect)
specifier|default
name|Mina2EndpointConsumerBuilder
name|disconnect
parameter_list|(
name|boolean
name|disconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Mina session right after          * use. Can be used for both consumer and producer.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|disconnect (String disconnect)
specifier|default
name|Mina2EndpointConsumerBuilder
name|disconnect
parameter_list|(
name|String
name|disconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can enable the Apache MINA logging filter. Apache MINA uses slf4j          * logging at INFO level to log all input and output.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|minaLogger (boolean minaLogger)
specifier|default
name|Mina2EndpointConsumerBuilder
name|minaLogger
parameter_list|(
name|boolean
name|minaLogger
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"minaLogger"
argument_list|,
name|minaLogger
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can enable the Apache MINA logging filter. Apache MINA uses slf4j          * logging at INFO level to log all input and output.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|minaLogger (String minaLogger)
specifier|default
name|Mina2EndpointConsumerBuilder
name|minaLogger
parameter_list|(
name|String
name|minaLogger
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"minaLogger"
argument_list|,
name|minaLogger
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|sync (boolean sync)
specifier|default
name|Mina2EndpointConsumerBuilder
name|sync
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|sync (String sync)
specifier|default
name|Mina2EndpointConsumerBuilder
name|sync
parameter_list|(
name|String
name|sync
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can configure the timeout that specifies how long to wait for a          * response from a remote server. The timeout unit is in milliseconds,          * so 60000 is 60 seconds.          * The option is a<code>long</code> type.          * @group common          */
DECL|method|timeout (long timeout)
specifier|default
name|Mina2EndpointConsumerBuilder
name|timeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can configure the timeout that specifies how long to wait for a          * response from a remote server. The timeout unit is in milliseconds,          * so 60000 is 60 seconds.          * The option will be converted to a<code>long</code> type.          * @group common          */
DECL|method|timeout (String timeout)
specifier|default
name|Mina2EndpointConsumerBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum amount of time it should take to send data to the MINA          * session. Default is 10000 milliseconds.          * The option is a<code>long</code> type.          * @group common          */
DECL|method|writeTimeout (long writeTimeout)
specifier|default
name|Mina2EndpointConsumerBuilder
name|writeTimeout
parameter_list|(
name|long
name|writeTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeTimeout"
argument_list|,
name|writeTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum amount of time it should take to send data to the MINA          * session. Default is 10000 milliseconds.          * The option will be converted to a<code>long</code> type.          * @group common          */
DECL|method|writeTimeout (String writeTimeout)
specifier|default
name|Mina2EndpointConsumerBuilder
name|writeTimeout
parameter_list|(
name|String
name|writeTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeTimeout"
argument_list|,
name|writeTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|Mina2EndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|Mina2EndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the clientMode is true, mina consumer will connect the address as          * a TCP client.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|clientMode (boolean clientMode)
specifier|default
name|Mina2EndpointConsumerBuilder
name|clientMode
parameter_list|(
name|boolean
name|clientMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientMode"
argument_list|,
name|clientMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the clientMode is true, mina consumer will connect the address as          * a TCP client.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|clientMode (String clientMode)
specifier|default
name|Mina2EndpointConsumerBuilder
name|clientMode
parameter_list|(
name|String
name|clientMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientMode"
argument_list|,
name|clientMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The mina component installs a default codec if both, codec is null          * and textline is false. Setting allowDefaultCodec to false prevents          * the mina component from installing a default codec as the first          * element in the filter chain. This is useful in scenarios where          * another filter must be the first in the filter chain, like the SSL          * filter.          * The option is a<code>boolean</code> type.          * @group codec          */
DECL|method|allowDefaultCodec ( boolean allowDefaultCodec)
specifier|default
name|Mina2EndpointConsumerBuilder
name|allowDefaultCodec
parameter_list|(
name|boolean
name|allowDefaultCodec
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowDefaultCodec"
argument_list|,
name|allowDefaultCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The mina component installs a default codec if both, codec is null          * and textline is false. Setting allowDefaultCodec to false prevents          * the mina component from installing a default codec as the first          * element in the filter chain. This is useful in scenarios where          * another filter must be the first in the filter chain, like the SSL          * filter.          * The option will be converted to a<code>boolean</code> type.          * @group codec          */
DECL|method|allowDefaultCodec ( String allowDefaultCodec)
specifier|default
name|Mina2EndpointConsumerBuilder
name|allowDefaultCodec
parameter_list|(
name|String
name|allowDefaultCodec
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowDefaultCodec"
argument_list|,
name|allowDefaultCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom minda codec implementation.          * The option is a          *<code>org.apache.mina.filter.codec.ProtocolCodecFactory</code> type.          * @group codec          */
DECL|method|codec (Object codec)
specifier|default
name|Mina2EndpointConsumerBuilder
name|codec
parameter_list|(
name|Object
name|codec
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"codec"
argument_list|,
name|codec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom minda codec implementation.          * The option will be converted to a          *<code>org.apache.mina.filter.codec.ProtocolCodecFactory</code> type.          * @group codec          */
DECL|method|codec (String codec)
specifier|default
name|Mina2EndpointConsumerBuilder
name|codec
parameter_list|(
name|String
name|codec
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"codec"
argument_list|,
name|codec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set the textline protocol decoder max line length. By default the          * default value of Mina itself is used which are 1024.          * The option is a<code>int</code> type.          * @group codec          */
DECL|method|decoderMaxLineLength ( int decoderMaxLineLength)
specifier|default
name|Mina2EndpointConsumerBuilder
name|decoderMaxLineLength
parameter_list|(
name|int
name|decoderMaxLineLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoderMaxLineLength"
argument_list|,
name|decoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set the textline protocol decoder max line length. By default the          * default value of Mina itself is used which are 1024.          * The option will be converted to a<code>int</code> type.          * @group codec          */
DECL|method|decoderMaxLineLength ( String decoderMaxLineLength)
specifier|default
name|Mina2EndpointConsumerBuilder
name|decoderMaxLineLength
parameter_list|(
name|String
name|decoderMaxLineLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoderMaxLineLength"
argument_list|,
name|decoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set the textline protocol encoder max line length. By default the          * default value of Mina itself is used which are Integer.MAX_VALUE.          * The option is a<code>int</code> type.          * @group codec          */
DECL|method|encoderMaxLineLength ( int encoderMaxLineLength)
specifier|default
name|Mina2EndpointConsumerBuilder
name|encoderMaxLineLength
parameter_list|(
name|int
name|encoderMaxLineLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoderMaxLineLength"
argument_list|,
name|encoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set the textline protocol encoder max line length. By default the          * default value of Mina itself is used which are Integer.MAX_VALUE.          * The option will be converted to a<code>int</code> type.          * @group codec          */
DECL|method|encoderMaxLineLength ( String encoderMaxLineLength)
specifier|default
name|Mina2EndpointConsumerBuilder
name|encoderMaxLineLength
parameter_list|(
name|String
name|encoderMaxLineLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoderMaxLineLength"
argument_list|,
name|encoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can configure the encoding (a charset name) to use for the TCP          * textline codec and the UDP protocol. If not provided, Camel will use          * the JVM default Charset.          * The option is a<code>java.lang.String</code> type.          * @group codec          */
DECL|method|encoding (String encoding)
specifier|default
name|Mina2EndpointConsumerBuilder
name|encoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can set a list of Mina IoFilters to use.          * The option is a          *<code>java.util.List&lt;org.apache.mina.core.filterchain.IoFilter&gt;</code> type.          * @group codec          */
DECL|method|filters (List<Object> filters)
specifier|default
name|Mina2EndpointConsumerBuilder
name|filters
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|filters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filters"
argument_list|,
name|filters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can set a list of Mina IoFilters to use.          * The option will be converted to a          *<code>java.util.List&lt;org.apache.mina.core.filterchain.IoFilter&gt;</code> type.          * @group codec          */
DECL|method|filters (String filters)
specifier|default
name|Mina2EndpointConsumerBuilder
name|filters
parameter_list|(
name|String
name|filters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filters"
argument_list|,
name|filters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. If no codec is specified, you can use this flag to          * indicate a text line based codec; if not specified or the value is          * false, then Object Serialization is assumed over TCP.          * The option is a<code>boolean</code> type.          * @group codec          */
DECL|method|textline (boolean textline)
specifier|default
name|Mina2EndpointConsumerBuilder
name|textline
parameter_list|(
name|boolean
name|textline
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"textline"
argument_list|,
name|textline
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. If no codec is specified, you can use this flag to          * indicate a text line based codec; if not specified or the value is          * false, then Object Serialization is assumed over TCP.          * The option will be converted to a<code>boolean</code> type.          * @group codec          */
DECL|method|textline (String textline)
specifier|default
name|Mina2EndpointConsumerBuilder
name|textline
parameter_list|(
name|String
name|textline
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"textline"
argument_list|,
name|textline
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP and if textline=true. Sets the text line delimiter          * to use. If none provided, Camel will use DEFAULT. This delimiter is          * used to mark the end of text.          * The option is a          *<code>org.apache.camel.component.mina2.Mina2TextLineDelimiter</code>          * type.          * @group codec          */
DECL|method|textlineDelimiter ( Mina2TextLineDelimiter textlineDelimiter)
specifier|default
name|Mina2EndpointConsumerBuilder
name|textlineDelimiter
parameter_list|(
name|Mina2TextLineDelimiter
name|textlineDelimiter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"textlineDelimiter"
argument_list|,
name|textlineDelimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP and if textline=true. Sets the text line delimiter          * to use. If none provided, Camel will use DEFAULT. This delimiter is          * used to mark the end of text.          * The option will be converted to a          *<code>org.apache.camel.component.mina2.Mina2TextLineDelimiter</code>          * type.          * @group codec          */
DECL|method|textlineDelimiter ( String textlineDelimiter)
specifier|default
name|Mina2EndpointConsumerBuilder
name|textlineDelimiter
parameter_list|(
name|String
name|textlineDelimiter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"textlineDelimiter"
argument_list|,
name|textlineDelimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to auto start SSL handshake.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|autoStartTls (boolean autoStartTls)
specifier|default
name|Mina2EndpointConsumerBuilder
name|autoStartTls
parameter_list|(
name|boolean
name|autoStartTls
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoStartTls"
argument_list|,
name|autoStartTls
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to auto start SSL handshake.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|autoStartTls (String autoStartTls)
specifier|default
name|Mina2EndpointConsumerBuilder
name|autoStartTls
parameter_list|(
name|String
name|autoStartTls
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoStartTls"
argument_list|,
name|autoStartTls
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure SSL security.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|Mina2EndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure SSL security.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|Mina2EndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Mina2 component.      */
DECL|interface|AdvancedMina2EndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedMina2EndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|Mina2EndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|Mina2EndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * If sync is enabled then this option dictates MinaConsumer if it          * should disconnect where there is no reply to send back.          * The option is a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|disconnectOnNoReply ( boolean disconnectOnNoReply)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|disconnectOnNoReply
parameter_list|(
name|boolean
name|disconnectOnNoReply
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnectOnNoReply"
argument_list|,
name|disconnectOnNoReply
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If sync is enabled then this option dictates MinaConsumer if it          * should disconnect where there is no reply to send back.          * The option will be converted to a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|disconnectOnNoReply ( String disconnectOnNoReply)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|disconnectOnNoReply
parameter_list|(
name|String
name|disconnectOnNoReply
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnectOnNoReply"
argument_list|,
name|disconnectOnNoReply
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If sync is enabled this option dictates MinaConsumer which logging          * level to use when logging a there is no reply to send back.          * The option is a<code>org.apache.camel.LoggingLevel</code> type.          * @group consumer (advanced)          */
DECL|method|noReplyLogLevel ( LoggingLevel noReplyLogLevel)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|noReplyLogLevel
parameter_list|(
name|LoggingLevel
name|noReplyLogLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"noReplyLogLevel"
argument_list|,
name|noReplyLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If sync is enabled this option dictates MinaConsumer which logging          * level to use when logging a there is no reply to send back.          * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          * @group consumer (advanced)          */
DECL|method|noReplyLogLevel ( String noReplyLogLevel)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|noReplyLogLevel
parameter_list|(
name|String
name|noReplyLogLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"noReplyLogLevel"
argument_list|,
name|noReplyLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of worker threads in the worker pool for TCP and UDP.          * The option is a<code>int</code> type.          * @group advanced          */
DECL|method|maximumPoolSize ( int maximumPoolSize)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|maximumPoolSize
parameter_list|(
name|int
name|maximumPoolSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maximumPoolSize"
argument_list|,
name|maximumPoolSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of worker threads in the worker pool for TCP and UDP.          * The option will be converted to a<code>int</code> type.          * @group advanced          */
DECL|method|maximumPoolSize ( String maximumPoolSize)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|maximumPoolSize
parameter_list|(
name|String
name|maximumPoolSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maximumPoolSize"
argument_list|,
name|maximumPoolSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use ordered thread pool, to ensure events are processed          * orderly on the same channel.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|orderedThreadPoolExecutor ( boolean orderedThreadPoolExecutor)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|orderedThreadPoolExecutor
parameter_list|(
name|boolean
name|orderedThreadPoolExecutor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"orderedThreadPoolExecutor"
argument_list|,
name|orderedThreadPoolExecutor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use ordered thread pool, to ensure events are processed          * orderly on the same channel.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|orderedThreadPoolExecutor ( String orderedThreadPoolExecutor)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|orderedThreadPoolExecutor
parameter_list|(
name|String
name|orderedThreadPoolExecutor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"orderedThreadPoolExecutor"
argument_list|,
name|orderedThreadPoolExecutor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferExchange ( boolean transferExchange)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|transferExchange
parameter_list|(
name|boolean
name|transferExchange
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferExchange ( String transferExchange)
specifier|default
name|AdvancedMina2EndpointConsumerBuilder
name|transferExchange
parameter_list|(
name|String
name|transferExchange
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Mina2 component.      */
DECL|interface|Mina2EndpointProducerBuilder
specifier|public
interface|interface
name|Mina2EndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedMina2EndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedMina2EndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Protocol to use.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|protocol (String protocol)
specifier|default
name|Mina2EndpointProducerBuilder
name|protocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"protocol"
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Hostname to use. Use localhost or 0.0.0.0 for local server as          * consumer. For producer use the hostname or ip address of the remote          * server.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|Mina2EndpointProducerBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|port (int port)
specifier|default
name|Mina2EndpointProducerBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|Mina2EndpointProducerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Mina session right after          * use. Can be used for both consumer and producer.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|disconnect (boolean disconnect)
specifier|default
name|Mina2EndpointProducerBuilder
name|disconnect
parameter_list|(
name|boolean
name|disconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Mina session right after          * use. Can be used for both consumer and producer.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|disconnect (String disconnect)
specifier|default
name|Mina2EndpointProducerBuilder
name|disconnect
parameter_list|(
name|String
name|disconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can enable the Apache MINA logging filter. Apache MINA uses slf4j          * logging at INFO level to log all input and output.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|minaLogger (boolean minaLogger)
specifier|default
name|Mina2EndpointProducerBuilder
name|minaLogger
parameter_list|(
name|boolean
name|minaLogger
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"minaLogger"
argument_list|,
name|minaLogger
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can enable the Apache MINA logging filter. Apache MINA uses slf4j          * logging at INFO level to log all input and output.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|minaLogger (String minaLogger)
specifier|default
name|Mina2EndpointProducerBuilder
name|minaLogger
parameter_list|(
name|String
name|minaLogger
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"minaLogger"
argument_list|,
name|minaLogger
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|sync (boolean sync)
specifier|default
name|Mina2EndpointProducerBuilder
name|sync
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|sync (String sync)
specifier|default
name|Mina2EndpointProducerBuilder
name|sync
parameter_list|(
name|String
name|sync
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can configure the timeout that specifies how long to wait for a          * response from a remote server. The timeout unit is in milliseconds,          * so 60000 is 60 seconds.          * The option is a<code>long</code> type.          * @group common          */
DECL|method|timeout (long timeout)
specifier|default
name|Mina2EndpointProducerBuilder
name|timeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can configure the timeout that specifies how long to wait for a          * response from a remote server. The timeout unit is in milliseconds,          * so 60000 is 60 seconds.          * The option will be converted to a<code>long</code> type.          * @group common          */
DECL|method|timeout (String timeout)
specifier|default
name|Mina2EndpointProducerBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum amount of time it should take to send data to the MINA          * session. Default is 10000 milliseconds.          * The option is a<code>long</code> type.          * @group common          */
DECL|method|writeTimeout (long writeTimeout)
specifier|default
name|Mina2EndpointProducerBuilder
name|writeTimeout
parameter_list|(
name|long
name|writeTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeTimeout"
argument_list|,
name|writeTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum amount of time it should take to send data to the MINA          * session. Default is 10000 milliseconds.          * The option will be converted to a<code>long</code> type.          * @group common          */
DECL|method|writeTimeout (String writeTimeout)
specifier|default
name|Mina2EndpointProducerBuilder
name|writeTimeout
parameter_list|(
name|String
name|writeTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeTimeout"
argument_list|,
name|writeTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|Mina2EndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|Mina2EndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The mina component installs a default codec if both, codec is null          * and textline is false. Setting allowDefaultCodec to false prevents          * the mina component from installing a default codec as the first          * element in the filter chain. This is useful in scenarios where          * another filter must be the first in the filter chain, like the SSL          * filter.          * The option is a<code>boolean</code> type.          * @group codec          */
DECL|method|allowDefaultCodec ( boolean allowDefaultCodec)
specifier|default
name|Mina2EndpointProducerBuilder
name|allowDefaultCodec
parameter_list|(
name|boolean
name|allowDefaultCodec
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowDefaultCodec"
argument_list|,
name|allowDefaultCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The mina component installs a default codec if both, codec is null          * and textline is false. Setting allowDefaultCodec to false prevents          * the mina component from installing a default codec as the first          * element in the filter chain. This is useful in scenarios where          * another filter must be the first in the filter chain, like the SSL          * filter.          * The option will be converted to a<code>boolean</code> type.          * @group codec          */
DECL|method|allowDefaultCodec ( String allowDefaultCodec)
specifier|default
name|Mina2EndpointProducerBuilder
name|allowDefaultCodec
parameter_list|(
name|String
name|allowDefaultCodec
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowDefaultCodec"
argument_list|,
name|allowDefaultCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom minda codec implementation.          * The option is a          *<code>org.apache.mina.filter.codec.ProtocolCodecFactory</code> type.          * @group codec          */
DECL|method|codec (Object codec)
specifier|default
name|Mina2EndpointProducerBuilder
name|codec
parameter_list|(
name|Object
name|codec
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"codec"
argument_list|,
name|codec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom minda codec implementation.          * The option will be converted to a          *<code>org.apache.mina.filter.codec.ProtocolCodecFactory</code> type.          * @group codec          */
DECL|method|codec (String codec)
specifier|default
name|Mina2EndpointProducerBuilder
name|codec
parameter_list|(
name|String
name|codec
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"codec"
argument_list|,
name|codec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set the textline protocol decoder max line length. By default the          * default value of Mina itself is used which are 1024.          * The option is a<code>int</code> type.          * @group codec          */
DECL|method|decoderMaxLineLength ( int decoderMaxLineLength)
specifier|default
name|Mina2EndpointProducerBuilder
name|decoderMaxLineLength
parameter_list|(
name|int
name|decoderMaxLineLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoderMaxLineLength"
argument_list|,
name|decoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set the textline protocol decoder max line length. By default the          * default value of Mina itself is used which are 1024.          * The option will be converted to a<code>int</code> type.          * @group codec          */
DECL|method|decoderMaxLineLength ( String decoderMaxLineLength)
specifier|default
name|Mina2EndpointProducerBuilder
name|decoderMaxLineLength
parameter_list|(
name|String
name|decoderMaxLineLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoderMaxLineLength"
argument_list|,
name|decoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set the textline protocol encoder max line length. By default the          * default value of Mina itself is used which are Integer.MAX_VALUE.          * The option is a<code>int</code> type.          * @group codec          */
DECL|method|encoderMaxLineLength ( int encoderMaxLineLength)
specifier|default
name|Mina2EndpointProducerBuilder
name|encoderMaxLineLength
parameter_list|(
name|int
name|encoderMaxLineLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoderMaxLineLength"
argument_list|,
name|encoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set the textline protocol encoder max line length. By default the          * default value of Mina itself is used which are Integer.MAX_VALUE.          * The option will be converted to a<code>int</code> type.          * @group codec          */
DECL|method|encoderMaxLineLength ( String encoderMaxLineLength)
specifier|default
name|Mina2EndpointProducerBuilder
name|encoderMaxLineLength
parameter_list|(
name|String
name|encoderMaxLineLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoderMaxLineLength"
argument_list|,
name|encoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can configure the encoding (a charset name) to use for the TCP          * textline codec and the UDP protocol. If not provided, Camel will use          * the JVM default Charset.          * The option is a<code>java.lang.String</code> type.          * @group codec          */
DECL|method|encoding (String encoding)
specifier|default
name|Mina2EndpointProducerBuilder
name|encoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can set a list of Mina IoFilters to use.          * The option is a          *<code>java.util.List&lt;org.apache.mina.core.filterchain.IoFilter&gt;</code> type.          * @group codec          */
DECL|method|filters (List<Object> filters)
specifier|default
name|Mina2EndpointProducerBuilder
name|filters
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|filters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filters"
argument_list|,
name|filters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can set a list of Mina IoFilters to use.          * The option will be converted to a          *<code>java.util.List&lt;org.apache.mina.core.filterchain.IoFilter&gt;</code> type.          * @group codec          */
DECL|method|filters (String filters)
specifier|default
name|Mina2EndpointProducerBuilder
name|filters
parameter_list|(
name|String
name|filters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filters"
argument_list|,
name|filters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. If no codec is specified, you can use this flag to          * indicate a text line based codec; if not specified or the value is          * false, then Object Serialization is assumed over TCP.          * The option is a<code>boolean</code> type.          * @group codec          */
DECL|method|textline (boolean textline)
specifier|default
name|Mina2EndpointProducerBuilder
name|textline
parameter_list|(
name|boolean
name|textline
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"textline"
argument_list|,
name|textline
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. If no codec is specified, you can use this flag to          * indicate a text line based codec; if not specified or the value is          * false, then Object Serialization is assumed over TCP.          * The option will be converted to a<code>boolean</code> type.          * @group codec          */
DECL|method|textline (String textline)
specifier|default
name|Mina2EndpointProducerBuilder
name|textline
parameter_list|(
name|String
name|textline
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"textline"
argument_list|,
name|textline
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP and if textline=true. Sets the text line delimiter          * to use. If none provided, Camel will use DEFAULT. This delimiter is          * used to mark the end of text.          * The option is a          *<code>org.apache.camel.component.mina2.Mina2TextLineDelimiter</code>          * type.          * @group codec          */
DECL|method|textlineDelimiter ( Mina2TextLineDelimiter textlineDelimiter)
specifier|default
name|Mina2EndpointProducerBuilder
name|textlineDelimiter
parameter_list|(
name|Mina2TextLineDelimiter
name|textlineDelimiter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"textlineDelimiter"
argument_list|,
name|textlineDelimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP and if textline=true. Sets the text line delimiter          * to use. If none provided, Camel will use DEFAULT. This delimiter is          * used to mark the end of text.          * The option will be converted to a          *<code>org.apache.camel.component.mina2.Mina2TextLineDelimiter</code>          * type.          * @group codec          */
DECL|method|textlineDelimiter ( String textlineDelimiter)
specifier|default
name|Mina2EndpointProducerBuilder
name|textlineDelimiter
parameter_list|(
name|String
name|textlineDelimiter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"textlineDelimiter"
argument_list|,
name|textlineDelimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to auto start SSL handshake.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|autoStartTls (boolean autoStartTls)
specifier|default
name|Mina2EndpointProducerBuilder
name|autoStartTls
parameter_list|(
name|boolean
name|autoStartTls
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoStartTls"
argument_list|,
name|autoStartTls
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to auto start SSL handshake.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|autoStartTls (String autoStartTls)
specifier|default
name|Mina2EndpointProducerBuilder
name|autoStartTls
parameter_list|(
name|String
name|autoStartTls
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoStartTls"
argument_list|,
name|autoStartTls
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure SSL security.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|Mina2EndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure SSL security.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|Mina2EndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Mina2 component.      */
DECL|interface|AdvancedMina2EndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedMina2EndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|Mina2EndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|Mina2EndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether to create the InetAddress once and reuse. Setting this to          * false allows to pickup DNS changes in the network.          * The option is a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|cachedAddress ( boolean cachedAddress)
specifier|default
name|AdvancedMina2EndpointProducerBuilder
name|cachedAddress
parameter_list|(
name|boolean
name|cachedAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cachedAddress"
argument_list|,
name|cachedAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to create the InetAddress once and reuse. Setting this to          * false allows to pickup DNS changes in the network.          * The option will be converted to a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|cachedAddress ( String cachedAddress)
specifier|default
name|AdvancedMina2EndpointProducerBuilder
name|cachedAddress
parameter_list|(
name|String
name|cachedAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cachedAddress"
argument_list|,
name|cachedAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sessions can be lazily created to avoid exceptions, if the remote          * server is not up and running when the Camel producer is started.          * The option is a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|lazySessionCreation ( boolean lazySessionCreation)
specifier|default
name|AdvancedMina2EndpointProducerBuilder
name|lazySessionCreation
parameter_list|(
name|boolean
name|lazySessionCreation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazySessionCreation"
argument_list|,
name|lazySessionCreation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sessions can be lazily created to avoid exceptions, if the remote          * server is not up and running when the Camel producer is started.          * The option will be converted to a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|lazySessionCreation ( String lazySessionCreation)
specifier|default
name|AdvancedMina2EndpointProducerBuilder
name|lazySessionCreation
parameter_list|(
name|String
name|lazySessionCreation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazySessionCreation"
argument_list|,
name|lazySessionCreation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedMina2EndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedMina2EndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of worker threads in the worker pool for TCP and UDP.          * The option is a<code>int</code> type.          * @group advanced          */
DECL|method|maximumPoolSize ( int maximumPoolSize)
specifier|default
name|AdvancedMina2EndpointProducerBuilder
name|maximumPoolSize
parameter_list|(
name|int
name|maximumPoolSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maximumPoolSize"
argument_list|,
name|maximumPoolSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of worker threads in the worker pool for TCP and UDP.          * The option will be converted to a<code>int</code> type.          * @group advanced          */
DECL|method|maximumPoolSize ( String maximumPoolSize)
specifier|default
name|AdvancedMina2EndpointProducerBuilder
name|maximumPoolSize
parameter_list|(
name|String
name|maximumPoolSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maximumPoolSize"
argument_list|,
name|maximumPoolSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use ordered thread pool, to ensure events are processed          * orderly on the same channel.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|orderedThreadPoolExecutor ( boolean orderedThreadPoolExecutor)
specifier|default
name|AdvancedMina2EndpointProducerBuilder
name|orderedThreadPoolExecutor
parameter_list|(
name|boolean
name|orderedThreadPoolExecutor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"orderedThreadPoolExecutor"
argument_list|,
name|orderedThreadPoolExecutor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use ordered thread pool, to ensure events are processed          * orderly on the same channel.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|orderedThreadPoolExecutor ( String orderedThreadPoolExecutor)
specifier|default
name|AdvancedMina2EndpointProducerBuilder
name|orderedThreadPoolExecutor
parameter_list|(
name|String
name|orderedThreadPoolExecutor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"orderedThreadPoolExecutor"
argument_list|,
name|orderedThreadPoolExecutor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedMina2EndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedMina2EndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferExchange ( boolean transferExchange)
specifier|default
name|AdvancedMina2EndpointProducerBuilder
name|transferExchange
parameter_list|(
name|boolean
name|transferExchange
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferExchange ( String transferExchange)
specifier|default
name|AdvancedMina2EndpointProducerBuilder
name|transferExchange
parameter_list|(
name|String
name|transferExchange
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Mina2 component.      */
DECL|interface|Mina2EndpointBuilder
specifier|public
interface|interface
name|Mina2EndpointBuilder
extends|extends
name|Mina2EndpointConsumerBuilder
extends|,
name|Mina2EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedMina2EndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedMina2EndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Protocol to use.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|protocol (String protocol)
specifier|default
name|Mina2EndpointBuilder
name|protocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"protocol"
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Hostname to use. Use localhost or 0.0.0.0 for local server as          * consumer. For producer use the hostname or ip address of the remote          * server.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|Mina2EndpointBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|port (int port)
specifier|default
name|Mina2EndpointBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|Mina2EndpointBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Mina session right after          * use. Can be used for both consumer and producer.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|disconnect (boolean disconnect)
specifier|default
name|Mina2EndpointBuilder
name|disconnect
parameter_list|(
name|boolean
name|disconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Mina session right after          * use. Can be used for both consumer and producer.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|disconnect (String disconnect)
specifier|default
name|Mina2EndpointBuilder
name|disconnect
parameter_list|(
name|String
name|disconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can enable the Apache MINA logging filter. Apache MINA uses slf4j          * logging at INFO level to log all input and output.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|minaLogger (boolean minaLogger)
specifier|default
name|Mina2EndpointBuilder
name|minaLogger
parameter_list|(
name|boolean
name|minaLogger
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"minaLogger"
argument_list|,
name|minaLogger
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can enable the Apache MINA logging filter. Apache MINA uses slf4j          * logging at INFO level to log all input and output.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|minaLogger (String minaLogger)
specifier|default
name|Mina2EndpointBuilder
name|minaLogger
parameter_list|(
name|String
name|minaLogger
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"minaLogger"
argument_list|,
name|minaLogger
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|sync (boolean sync)
specifier|default
name|Mina2EndpointBuilder
name|sync
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|sync (String sync)
specifier|default
name|Mina2EndpointBuilder
name|sync
parameter_list|(
name|String
name|sync
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can configure the timeout that specifies how long to wait for a          * response from a remote server. The timeout unit is in milliseconds,          * so 60000 is 60 seconds.          * The option is a<code>long</code> type.          * @group common          */
DECL|method|timeout (long timeout)
specifier|default
name|Mina2EndpointBuilder
name|timeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can configure the timeout that specifies how long to wait for a          * response from a remote server. The timeout unit is in milliseconds,          * so 60000 is 60 seconds.          * The option will be converted to a<code>long</code> type.          * @group common          */
DECL|method|timeout (String timeout)
specifier|default
name|Mina2EndpointBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum amount of time it should take to send data to the MINA          * session. Default is 10000 milliseconds.          * The option is a<code>long</code> type.          * @group common          */
DECL|method|writeTimeout (long writeTimeout)
specifier|default
name|Mina2EndpointBuilder
name|writeTimeout
parameter_list|(
name|long
name|writeTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeTimeout"
argument_list|,
name|writeTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum amount of time it should take to send data to the MINA          * session. Default is 10000 milliseconds.          * The option will be converted to a<code>long</code> type.          * @group common          */
DECL|method|writeTimeout (String writeTimeout)
specifier|default
name|Mina2EndpointBuilder
name|writeTimeout
parameter_list|(
name|String
name|writeTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeTimeout"
argument_list|,
name|writeTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The mina component installs a default codec if both, codec is null          * and textline is false. Setting allowDefaultCodec to false prevents          * the mina component from installing a default codec as the first          * element in the filter chain. This is useful in scenarios where          * another filter must be the first in the filter chain, like the SSL          * filter.          * The option is a<code>boolean</code> type.          * @group codec          */
DECL|method|allowDefaultCodec (boolean allowDefaultCodec)
specifier|default
name|Mina2EndpointBuilder
name|allowDefaultCodec
parameter_list|(
name|boolean
name|allowDefaultCodec
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowDefaultCodec"
argument_list|,
name|allowDefaultCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The mina component installs a default codec if both, codec is null          * and textline is false. Setting allowDefaultCodec to false prevents          * the mina component from installing a default codec as the first          * element in the filter chain. This is useful in scenarios where          * another filter must be the first in the filter chain, like the SSL          * filter.          * The option will be converted to a<code>boolean</code> type.          * @group codec          */
DECL|method|allowDefaultCodec (String allowDefaultCodec)
specifier|default
name|Mina2EndpointBuilder
name|allowDefaultCodec
parameter_list|(
name|String
name|allowDefaultCodec
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowDefaultCodec"
argument_list|,
name|allowDefaultCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom minda codec implementation.          * The option is a          *<code>org.apache.mina.filter.codec.ProtocolCodecFactory</code> type.          * @group codec          */
DECL|method|codec (Object codec)
specifier|default
name|Mina2EndpointBuilder
name|codec
parameter_list|(
name|Object
name|codec
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"codec"
argument_list|,
name|codec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom minda codec implementation.          * The option will be converted to a          *<code>org.apache.mina.filter.codec.ProtocolCodecFactory</code> type.          * @group codec          */
DECL|method|codec (String codec)
specifier|default
name|Mina2EndpointBuilder
name|codec
parameter_list|(
name|String
name|codec
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"codec"
argument_list|,
name|codec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set the textline protocol decoder max line length. By default the          * default value of Mina itself is used which are 1024.          * The option is a<code>int</code> type.          * @group codec          */
DECL|method|decoderMaxLineLength ( int decoderMaxLineLength)
specifier|default
name|Mina2EndpointBuilder
name|decoderMaxLineLength
parameter_list|(
name|int
name|decoderMaxLineLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoderMaxLineLength"
argument_list|,
name|decoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set the textline protocol decoder max line length. By default the          * default value of Mina itself is used which are 1024.          * The option will be converted to a<code>int</code> type.          * @group codec          */
DECL|method|decoderMaxLineLength ( String decoderMaxLineLength)
specifier|default
name|Mina2EndpointBuilder
name|decoderMaxLineLength
parameter_list|(
name|String
name|decoderMaxLineLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoderMaxLineLength"
argument_list|,
name|decoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set the textline protocol encoder max line length. By default the          * default value of Mina itself is used which are Integer.MAX_VALUE.          * The option is a<code>int</code> type.          * @group codec          */
DECL|method|encoderMaxLineLength ( int encoderMaxLineLength)
specifier|default
name|Mina2EndpointBuilder
name|encoderMaxLineLength
parameter_list|(
name|int
name|encoderMaxLineLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoderMaxLineLength"
argument_list|,
name|encoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set the textline protocol encoder max line length. By default the          * default value of Mina itself is used which are Integer.MAX_VALUE.          * The option will be converted to a<code>int</code> type.          * @group codec          */
DECL|method|encoderMaxLineLength ( String encoderMaxLineLength)
specifier|default
name|Mina2EndpointBuilder
name|encoderMaxLineLength
parameter_list|(
name|String
name|encoderMaxLineLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoderMaxLineLength"
argument_list|,
name|encoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can configure the encoding (a charset name) to use for the TCP          * textline codec and the UDP protocol. If not provided, Camel will use          * the JVM default Charset.          * The option is a<code>java.lang.String</code> type.          * @group codec          */
DECL|method|encoding (String encoding)
specifier|default
name|Mina2EndpointBuilder
name|encoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can set a list of Mina IoFilters to use.          * The option is a          *<code>java.util.List&lt;org.apache.mina.core.filterchain.IoFilter&gt;</code> type.          * @group codec          */
DECL|method|filters (List<Object> filters)
specifier|default
name|Mina2EndpointBuilder
name|filters
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|filters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filters"
argument_list|,
name|filters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can set a list of Mina IoFilters to use.          * The option will be converted to a          *<code>java.util.List&lt;org.apache.mina.core.filterchain.IoFilter&gt;</code> type.          * @group codec          */
DECL|method|filters (String filters)
specifier|default
name|Mina2EndpointBuilder
name|filters
parameter_list|(
name|String
name|filters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filters"
argument_list|,
name|filters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. If no codec is specified, you can use this flag to          * indicate a text line based codec; if not specified or the value is          * false, then Object Serialization is assumed over TCP.          * The option is a<code>boolean</code> type.          * @group codec          */
DECL|method|textline (boolean textline)
specifier|default
name|Mina2EndpointBuilder
name|textline
parameter_list|(
name|boolean
name|textline
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"textline"
argument_list|,
name|textline
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. If no codec is specified, you can use this flag to          * indicate a text line based codec; if not specified or the value is          * false, then Object Serialization is assumed over TCP.          * The option will be converted to a<code>boolean</code> type.          * @group codec          */
DECL|method|textline (String textline)
specifier|default
name|Mina2EndpointBuilder
name|textline
parameter_list|(
name|String
name|textline
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"textline"
argument_list|,
name|textline
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP and if textline=true. Sets the text line delimiter          * to use. If none provided, Camel will use DEFAULT. This delimiter is          * used to mark the end of text.          * The option is a          *<code>org.apache.camel.component.mina2.Mina2TextLineDelimiter</code>          * type.          * @group codec          */
DECL|method|textlineDelimiter ( Mina2TextLineDelimiter textlineDelimiter)
specifier|default
name|Mina2EndpointBuilder
name|textlineDelimiter
parameter_list|(
name|Mina2TextLineDelimiter
name|textlineDelimiter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"textlineDelimiter"
argument_list|,
name|textlineDelimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP and if textline=true. Sets the text line delimiter          * to use. If none provided, Camel will use DEFAULT. This delimiter is          * used to mark the end of text.          * The option will be converted to a          *<code>org.apache.camel.component.mina2.Mina2TextLineDelimiter</code>          * type.          * @group codec          */
DECL|method|textlineDelimiter (String textlineDelimiter)
specifier|default
name|Mina2EndpointBuilder
name|textlineDelimiter
parameter_list|(
name|String
name|textlineDelimiter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"textlineDelimiter"
argument_list|,
name|textlineDelimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to auto start SSL handshake.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|autoStartTls (boolean autoStartTls)
specifier|default
name|Mina2EndpointBuilder
name|autoStartTls
parameter_list|(
name|boolean
name|autoStartTls
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoStartTls"
argument_list|,
name|autoStartTls
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to auto start SSL handshake.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|autoStartTls (String autoStartTls)
specifier|default
name|Mina2EndpointBuilder
name|autoStartTls
parameter_list|(
name|String
name|autoStartTls
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoStartTls"
argument_list|,
name|autoStartTls
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure SSL security.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|Mina2EndpointBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure SSL security.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|Mina2EndpointBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Mina2 component.      */
DECL|interface|AdvancedMina2EndpointBuilder
specifier|public
interface|interface
name|AdvancedMina2EndpointBuilder
extends|extends
name|AdvancedMina2EndpointConsumerBuilder
extends|,
name|AdvancedMina2EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|Mina2EndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|Mina2EndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedMina2EndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedMina2EndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of worker threads in the worker pool for TCP and UDP.          * The option is a<code>int</code> type.          * @group advanced          */
DECL|method|maximumPoolSize (int maximumPoolSize)
specifier|default
name|AdvancedMina2EndpointBuilder
name|maximumPoolSize
parameter_list|(
name|int
name|maximumPoolSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maximumPoolSize"
argument_list|,
name|maximumPoolSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of worker threads in the worker pool for TCP and UDP.          * The option will be converted to a<code>int</code> type.          * @group advanced          */
DECL|method|maximumPoolSize ( String maximumPoolSize)
specifier|default
name|AdvancedMina2EndpointBuilder
name|maximumPoolSize
parameter_list|(
name|String
name|maximumPoolSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maximumPoolSize"
argument_list|,
name|maximumPoolSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use ordered thread pool, to ensure events are processed          * orderly on the same channel.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|orderedThreadPoolExecutor ( boolean orderedThreadPoolExecutor)
specifier|default
name|AdvancedMina2EndpointBuilder
name|orderedThreadPoolExecutor
parameter_list|(
name|boolean
name|orderedThreadPoolExecutor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"orderedThreadPoolExecutor"
argument_list|,
name|orderedThreadPoolExecutor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use ordered thread pool, to ensure events are processed          * orderly on the same channel.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|orderedThreadPoolExecutor ( String orderedThreadPoolExecutor)
specifier|default
name|AdvancedMina2EndpointBuilder
name|orderedThreadPoolExecutor
parameter_list|(
name|String
name|orderedThreadPoolExecutor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"orderedThreadPoolExecutor"
argument_list|,
name|orderedThreadPoolExecutor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedMina2EndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedMina2EndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferExchange ( boolean transferExchange)
specifier|default
name|AdvancedMina2EndpointBuilder
name|transferExchange
parameter_list|(
name|boolean
name|transferExchange
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferExchange ( String transferExchange)
specifier|default
name|AdvancedMina2EndpointBuilder
name|transferExchange
parameter_list|(
name|String
name|transferExchange
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.mina2.Mina2TextLineDelimiter</code>      * enum.      */
DECL|enum|Mina2TextLineDelimiter
enum|enum
name|Mina2TextLineDelimiter
block|{
DECL|enumConstant|DEFAULT
name|DEFAULT
block|,
DECL|enumConstant|AUTO
name|AUTO
block|,
DECL|enumConstant|UNIX
name|UNIX
block|,
DECL|enumConstant|WINDOWS
name|WINDOWS
block|,
DECL|enumConstant|MAC
name|MAC
block|;     }
comment|/**      * Socket level networking using TCP or UDP with the Apache Mina 2.x      * library. Creates a builder to build endpoints for the Mina2 component.      */
DECL|method|mina2 (String path)
specifier|default
name|Mina2EndpointBuilder
name|mina2
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|Mina2EndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|Mina2EndpointBuilder
implements|,
name|AdvancedMina2EndpointBuilder
block|{
specifier|public
name|Mina2EndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"mina"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Mina2EndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

