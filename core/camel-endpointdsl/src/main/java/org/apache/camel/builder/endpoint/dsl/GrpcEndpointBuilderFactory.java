begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The gRPC component allows to call and expose remote procedures via HTTP/2  * with protobuf dataformat  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|GrpcEndpointBuilderFactory
specifier|public
interface|interface
name|GrpcEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the gRPC component.      */
DECL|interface|GrpcEndpointConsumerBuilder
specifier|public
interface|interface
name|GrpcEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedGrpcEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedGrpcEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The HTTP/2 flow control window size (MiB).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|flowControlWindow ( int flowControlWindow)
specifier|default
name|GrpcEndpointConsumerBuilder
name|flowControlWindow
parameter_list|(
name|int
name|flowControlWindow
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"flowControlWindow"
argument_list|,
name|flowControlWindow
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The HTTP/2 flow control window size (MiB).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|flowControlWindow ( String flowControlWindow)
specifier|default
name|GrpcEndpointConsumerBuilder
name|flowControlWindow
parameter_list|(
name|String
name|flowControlWindow
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"flowControlWindow"
argument_list|,
name|flowControlWindow
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum message size allowed to be received/sent (MiB).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxMessageSize (int maxMessageSize)
specifier|default
name|GrpcEndpointConsumerBuilder
name|maxMessageSize
parameter_list|(
name|int
name|maxMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessageSize"
argument_list|,
name|maxMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum message size allowed to be received/sent (MiB).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxMessageSize (String maxMessageSize)
specifier|default
name|GrpcEndpointConsumerBuilder
name|maxMessageSize
parameter_list|(
name|String
name|maxMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessageSize"
argument_list|,
name|maxMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|GrpcEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|GrpcEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option specifies the top-level strategy for processing service          * requests and responses in streaming mode. If an aggregation strategy          * is selected, all requests will be accumulated in the list, then          * transferred to the flow, and the accumulated responses will be sent          * to the sender. If a propagation strategy is selected, request is sent          * to the stream, and the response will be immediately sent back to the          * sender.          *           * The option is a:          *<code>org.apache.camel.component.grpc.GrpcConsumerStrategy</code>          * type.          *           * Group: consumer          */
DECL|method|consumerStrategy ( GrpcConsumerStrategy consumerStrategy)
specifier|default
name|GrpcEndpointConsumerBuilder
name|consumerStrategy
parameter_list|(
name|GrpcConsumerStrategy
name|consumerStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"consumerStrategy"
argument_list|,
name|consumerStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option specifies the top-level strategy for processing service          * requests and responses in streaming mode. If an aggregation strategy          * is selected, all requests will be accumulated in the list, then          * transferred to the flow, and the accumulated responses will be sent          * to the sender. If a propagation strategy is selected, request is sent          * to the stream, and the response will be immediately sent back to the          * sender.          *           * The option will be converted to a          *<code>org.apache.camel.component.grpc.GrpcConsumerStrategy</code>          * type.          *           * Group: consumer          */
DECL|method|consumerStrategy ( String consumerStrategy)
specifier|default
name|GrpcEndpointConsumerBuilder
name|consumerStrategy
parameter_list|(
name|String
name|consumerStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"consumerStrategy"
argument_list|,
name|consumerStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Determines if onCompleted events should be pushed to the Camel route.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|forwardOnCompleted ( boolean forwardOnCompleted)
specifier|default
name|GrpcEndpointConsumerBuilder
name|forwardOnCompleted
parameter_list|(
name|boolean
name|forwardOnCompleted
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"forwardOnCompleted"
argument_list|,
name|forwardOnCompleted
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Determines if onCompleted events should be pushed to the Camel route.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|forwardOnCompleted ( String forwardOnCompleted)
specifier|default
name|GrpcEndpointConsumerBuilder
name|forwardOnCompleted
parameter_list|(
name|String
name|forwardOnCompleted
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"forwardOnCompleted"
argument_list|,
name|forwardOnCompleted
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Determines if onError events should be pushed to the Camel route.          * Exceptions will be set as message body.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|forwardOnError ( boolean forwardOnError)
specifier|default
name|GrpcEndpointConsumerBuilder
name|forwardOnError
parameter_list|(
name|boolean
name|forwardOnError
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"forwardOnError"
argument_list|,
name|forwardOnError
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Determines if onError events should be pushed to the Camel route.          * Exceptions will be set as message body.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|forwardOnError (String forwardOnError)
specifier|default
name|GrpcEndpointConsumerBuilder
name|forwardOnError
parameter_list|(
name|String
name|forwardOnError
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"forwardOnError"
argument_list|,
name|forwardOnError
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of concurrent calls permitted for each incoming          * server connection.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|maxConcurrentCallsPerConnection ( int maxConcurrentCallsPerConnection)
specifier|default
name|GrpcEndpointConsumerBuilder
name|maxConcurrentCallsPerConnection
parameter_list|(
name|int
name|maxConcurrentCallsPerConnection
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxConcurrentCallsPerConnection"
argument_list|,
name|maxConcurrentCallsPerConnection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of concurrent calls permitted for each incoming          * server connection.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|maxConcurrentCallsPerConnection ( String maxConcurrentCallsPerConnection)
specifier|default
name|GrpcEndpointConsumerBuilder
name|maxConcurrentCallsPerConnection
parameter_list|(
name|String
name|maxConcurrentCallsPerConnection
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxConcurrentCallsPerConnection"
argument_list|,
name|maxConcurrentCallsPerConnection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Authentication method type in advance to the SSL/TLS negotiation.          *           * The option is a:          *<code>org.apache.camel.component.grpc.GrpcAuthType</code> type.          *           * Group: security          */
DECL|method|authenticationType ( GrpcAuthType authenticationType)
specifier|default
name|GrpcEndpointConsumerBuilder
name|authenticationType
parameter_list|(
name|GrpcAuthType
name|authenticationType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"authenticationType"
argument_list|,
name|authenticationType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Authentication method type in advance to the SSL/TLS negotiation.          *           * The option will be converted to a          *<code>org.apache.camel.component.grpc.GrpcAuthType</code> type.          *           * Group: security          */
DECL|method|authenticationType ( String authenticationType)
specifier|default
name|GrpcEndpointConsumerBuilder
name|authenticationType
parameter_list|(
name|String
name|authenticationType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"authenticationType"
argument_list|,
name|authenticationType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JSON Web Token sign algorithm.          *           * The option is a:          *<code>org.apache.camel.component.grpc.auth.jwt.JwtAlgorithm</code>          * type.          *           * Group: security          */
DECL|method|jwtAlgorithm ( JwtAlgorithm jwtAlgorithm)
specifier|default
name|GrpcEndpointConsumerBuilder
name|jwtAlgorithm
parameter_list|(
name|JwtAlgorithm
name|jwtAlgorithm
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"jwtAlgorithm"
argument_list|,
name|jwtAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JSON Web Token sign algorithm.          *           * The option will be converted to a          *<code>org.apache.camel.component.grpc.auth.jwt.JwtAlgorithm</code>          * type.          *           * Group: security          */
DECL|method|jwtAlgorithm (String jwtAlgorithm)
specifier|default
name|GrpcEndpointConsumerBuilder
name|jwtAlgorithm
parameter_list|(
name|String
name|jwtAlgorithm
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"jwtAlgorithm"
argument_list|,
name|jwtAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JSON Web Token issuer.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|jwtIssuer (String jwtIssuer)
specifier|default
name|GrpcEndpointConsumerBuilder
name|jwtIssuer
parameter_list|(
name|String
name|jwtIssuer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"jwtIssuer"
argument_list|,
name|jwtIssuer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JSON Web Token secret.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|jwtSecret (String jwtSecret)
specifier|default
name|GrpcEndpointConsumerBuilder
name|jwtSecret
parameter_list|(
name|String
name|jwtSecret
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"jwtSecret"
argument_list|,
name|jwtSecret
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JSON Web Token subject.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|jwtSubject (String jwtSubject)
specifier|default
name|GrpcEndpointConsumerBuilder
name|jwtSubject
parameter_list|(
name|String
name|jwtSubject
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"jwtSubject"
argument_list|,
name|jwtSubject
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The X.509 certificate chain file resource in PEM format link.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|keyCertChainResource ( String keyCertChainResource)
specifier|default
name|GrpcEndpointConsumerBuilder
name|keyCertChainResource
parameter_list|(
name|String
name|keyCertChainResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyCertChainResource"
argument_list|,
name|keyCertChainResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The PKCS#8 private key file password.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|keyPassword (String keyPassword)
specifier|default
name|GrpcEndpointConsumerBuilder
name|keyPassword
parameter_list|(
name|String
name|keyPassword
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyPassword"
argument_list|,
name|keyPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The PKCS#8 private key file resource in PEM format link.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|keyResource (String keyResource)
specifier|default
name|GrpcEndpointConsumerBuilder
name|keyResource
parameter_list|(
name|String
name|keyResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyResource"
argument_list|,
name|keyResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Identifies the security negotiation type used for HTTP/2          * communication.          *           * The option is a:<code>io.grpc.netty.NegotiationType</code> type.          *           * Group: security          */
DECL|method|negotiationType ( NegotiationType negotiationType)
specifier|default
name|GrpcEndpointConsumerBuilder
name|negotiationType
parameter_list|(
name|NegotiationType
name|negotiationType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"negotiationType"
argument_list|,
name|negotiationType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Identifies the security negotiation type used for HTTP/2          * communication.          *           * The option will be converted to a          *<code>io.grpc.netty.NegotiationType</code> type.          *           * Group: security          */
DECL|method|negotiationType ( String negotiationType)
specifier|default
name|GrpcEndpointConsumerBuilder
name|negotiationType
parameter_list|(
name|String
name|negotiationType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"negotiationType"
argument_list|,
name|negotiationType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Service Account key file in JSON format resource link supported by          * the Google Cloud SDK.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|serviceAccountResource ( String serviceAccountResource)
specifier|default
name|GrpcEndpointConsumerBuilder
name|serviceAccountResource
parameter_list|(
name|String
name|serviceAccountResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"serviceAccountResource"
argument_list|,
name|serviceAccountResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The trusted certificates collection file resource in PEM format for          * verifying the remote endpoint's certificate.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|trustCertCollectionResource ( String trustCertCollectionResource)
specifier|default
name|GrpcEndpointConsumerBuilder
name|trustCertCollectionResource
parameter_list|(
name|String
name|trustCertCollectionResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustCertCollectionResource"
argument_list|,
name|trustCertCollectionResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the gRPC component.      */
DECL|interface|AdvancedGrpcEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedGrpcEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|GrpcEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|GrpcEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedGrpcEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedGrpcEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedGrpcEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedGrpcEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedGrpcEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedGrpcEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedGrpcEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedGrpcEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the gRPC component.      */
DECL|interface|GrpcEndpointProducerBuilder
specifier|public
interface|interface
name|GrpcEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedGrpcEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedGrpcEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The HTTP/2 flow control window size (MiB).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|flowControlWindow ( int flowControlWindow)
specifier|default
name|GrpcEndpointProducerBuilder
name|flowControlWindow
parameter_list|(
name|int
name|flowControlWindow
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"flowControlWindow"
argument_list|,
name|flowControlWindow
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The HTTP/2 flow control window size (MiB).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|flowControlWindow ( String flowControlWindow)
specifier|default
name|GrpcEndpointProducerBuilder
name|flowControlWindow
parameter_list|(
name|String
name|flowControlWindow
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"flowControlWindow"
argument_list|,
name|flowControlWindow
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum message size allowed to be received/sent (MiB).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxMessageSize (int maxMessageSize)
specifier|default
name|GrpcEndpointProducerBuilder
name|maxMessageSize
parameter_list|(
name|int
name|maxMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessageSize"
argument_list|,
name|maxMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum message size allowed to be received/sent (MiB).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxMessageSize (String maxMessageSize)
specifier|default
name|GrpcEndpointProducerBuilder
name|maxMessageSize
parameter_list|(
name|String
name|maxMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessageSize"
argument_list|,
name|maxMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|GrpcEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|GrpcEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * gRPC method name.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|method (String method)
specifier|default
name|GrpcEndpointProducerBuilder
name|method
parameter_list|(
name|String
name|method
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"method"
argument_list|,
name|method
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The mode used to communicate with a remote gRPC server. In SIMPLE          * mode a single exchange is translated into a remote procedure call. In          * STREAMING mode all exchanges will be sent within the same request          * (input and output of the recipient gRPC service must be of type          * 'stream').          *           * The option is a:          *<code>org.apache.camel.component.grpc.GrpcProducerStrategy</code>          * type.          *           * Group: producer          */
DECL|method|producerStrategy ( GrpcProducerStrategy producerStrategy)
specifier|default
name|GrpcEndpointProducerBuilder
name|producerStrategy
parameter_list|(
name|GrpcProducerStrategy
name|producerStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"producerStrategy"
argument_list|,
name|producerStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The mode used to communicate with a remote gRPC server. In SIMPLE          * mode a single exchange is translated into a remote procedure call. In          * STREAMING mode all exchanges will be sent within the same request          * (input and output of the recipient gRPC service must be of type          * 'stream').          *           * The option will be converted to a          *<code>org.apache.camel.component.grpc.GrpcProducerStrategy</code>          * type.          *           * Group: producer          */
DECL|method|producerStrategy ( String producerStrategy)
specifier|default
name|GrpcEndpointProducerBuilder
name|producerStrategy
parameter_list|(
name|String
name|producerStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"producerStrategy"
argument_list|,
name|producerStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When using STREAMING client mode, it indicates the endpoint where          * responses should be forwarded.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|streamRepliesTo ( String streamRepliesTo)
specifier|default
name|GrpcEndpointProducerBuilder
name|streamRepliesTo
parameter_list|(
name|String
name|streamRepliesTo
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"streamRepliesTo"
argument_list|,
name|streamRepliesTo
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The user agent header passed to the server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|userAgent (String userAgent)
specifier|default
name|GrpcEndpointProducerBuilder
name|userAgent
parameter_list|(
name|String
name|userAgent
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"userAgent"
argument_list|,
name|userAgent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Authentication method type in advance to the SSL/TLS negotiation.          *           * The option is a:          *<code>org.apache.camel.component.grpc.GrpcAuthType</code> type.          *           * Group: security          */
DECL|method|authenticationType ( GrpcAuthType authenticationType)
specifier|default
name|GrpcEndpointProducerBuilder
name|authenticationType
parameter_list|(
name|GrpcAuthType
name|authenticationType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"authenticationType"
argument_list|,
name|authenticationType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Authentication method type in advance to the SSL/TLS negotiation.          *           * The option will be converted to a          *<code>org.apache.camel.component.grpc.GrpcAuthType</code> type.          *           * Group: security          */
DECL|method|authenticationType ( String authenticationType)
specifier|default
name|GrpcEndpointProducerBuilder
name|authenticationType
parameter_list|(
name|String
name|authenticationType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"authenticationType"
argument_list|,
name|authenticationType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JSON Web Token sign algorithm.          *           * The option is a:          *<code>org.apache.camel.component.grpc.auth.jwt.JwtAlgorithm</code>          * type.          *           * Group: security          */
DECL|method|jwtAlgorithm ( JwtAlgorithm jwtAlgorithm)
specifier|default
name|GrpcEndpointProducerBuilder
name|jwtAlgorithm
parameter_list|(
name|JwtAlgorithm
name|jwtAlgorithm
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"jwtAlgorithm"
argument_list|,
name|jwtAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JSON Web Token sign algorithm.          *           * The option will be converted to a          *<code>org.apache.camel.component.grpc.auth.jwt.JwtAlgorithm</code>          * type.          *           * Group: security          */
DECL|method|jwtAlgorithm (String jwtAlgorithm)
specifier|default
name|GrpcEndpointProducerBuilder
name|jwtAlgorithm
parameter_list|(
name|String
name|jwtAlgorithm
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"jwtAlgorithm"
argument_list|,
name|jwtAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JSON Web Token issuer.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|jwtIssuer (String jwtIssuer)
specifier|default
name|GrpcEndpointProducerBuilder
name|jwtIssuer
parameter_list|(
name|String
name|jwtIssuer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"jwtIssuer"
argument_list|,
name|jwtIssuer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JSON Web Token secret.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|jwtSecret (String jwtSecret)
specifier|default
name|GrpcEndpointProducerBuilder
name|jwtSecret
parameter_list|(
name|String
name|jwtSecret
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"jwtSecret"
argument_list|,
name|jwtSecret
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JSON Web Token subject.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|jwtSubject (String jwtSubject)
specifier|default
name|GrpcEndpointProducerBuilder
name|jwtSubject
parameter_list|(
name|String
name|jwtSubject
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"jwtSubject"
argument_list|,
name|jwtSubject
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The X.509 certificate chain file resource in PEM format link.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|keyCertChainResource ( String keyCertChainResource)
specifier|default
name|GrpcEndpointProducerBuilder
name|keyCertChainResource
parameter_list|(
name|String
name|keyCertChainResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyCertChainResource"
argument_list|,
name|keyCertChainResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The PKCS#8 private key file password.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|keyPassword (String keyPassword)
specifier|default
name|GrpcEndpointProducerBuilder
name|keyPassword
parameter_list|(
name|String
name|keyPassword
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyPassword"
argument_list|,
name|keyPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The PKCS#8 private key file resource in PEM format link.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|keyResource (String keyResource)
specifier|default
name|GrpcEndpointProducerBuilder
name|keyResource
parameter_list|(
name|String
name|keyResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyResource"
argument_list|,
name|keyResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Identifies the security negotiation type used for HTTP/2          * communication.          *           * The option is a:<code>io.grpc.netty.NegotiationType</code> type.          *           * Group: security          */
DECL|method|negotiationType ( NegotiationType negotiationType)
specifier|default
name|GrpcEndpointProducerBuilder
name|negotiationType
parameter_list|(
name|NegotiationType
name|negotiationType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"negotiationType"
argument_list|,
name|negotiationType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Identifies the security negotiation type used for HTTP/2          * communication.          *           * The option will be converted to a          *<code>io.grpc.netty.NegotiationType</code> type.          *           * Group: security          */
DECL|method|negotiationType ( String negotiationType)
specifier|default
name|GrpcEndpointProducerBuilder
name|negotiationType
parameter_list|(
name|String
name|negotiationType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"negotiationType"
argument_list|,
name|negotiationType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Service Account key file in JSON format resource link supported by          * the Google Cloud SDK.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|serviceAccountResource ( String serviceAccountResource)
specifier|default
name|GrpcEndpointProducerBuilder
name|serviceAccountResource
parameter_list|(
name|String
name|serviceAccountResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"serviceAccountResource"
argument_list|,
name|serviceAccountResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The trusted certificates collection file resource in PEM format for          * verifying the remote endpoint's certificate.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|trustCertCollectionResource ( String trustCertCollectionResource)
specifier|default
name|GrpcEndpointProducerBuilder
name|trustCertCollectionResource
parameter_list|(
name|String
name|trustCertCollectionResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustCertCollectionResource"
argument_list|,
name|trustCertCollectionResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the gRPC component.      */
DECL|interface|AdvancedGrpcEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedGrpcEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|GrpcEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|GrpcEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedGrpcEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedGrpcEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedGrpcEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedGrpcEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the gRPC component.      */
DECL|interface|GrpcEndpointBuilder
specifier|public
interface|interface
name|GrpcEndpointBuilder
extends|extends
name|GrpcEndpointConsumerBuilder
extends|,
name|GrpcEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedGrpcEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedGrpcEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The HTTP/2 flow control window size (MiB).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|flowControlWindow (int flowControlWindow)
specifier|default
name|GrpcEndpointBuilder
name|flowControlWindow
parameter_list|(
name|int
name|flowControlWindow
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"flowControlWindow"
argument_list|,
name|flowControlWindow
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The HTTP/2 flow control window size (MiB).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|flowControlWindow (String flowControlWindow)
specifier|default
name|GrpcEndpointBuilder
name|flowControlWindow
parameter_list|(
name|String
name|flowControlWindow
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"flowControlWindow"
argument_list|,
name|flowControlWindow
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum message size allowed to be received/sent (MiB).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxMessageSize (int maxMessageSize)
specifier|default
name|GrpcEndpointBuilder
name|maxMessageSize
parameter_list|(
name|int
name|maxMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessageSize"
argument_list|,
name|maxMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum message size allowed to be received/sent (MiB).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxMessageSize (String maxMessageSize)
specifier|default
name|GrpcEndpointBuilder
name|maxMessageSize
parameter_list|(
name|String
name|maxMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessageSize"
argument_list|,
name|maxMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Authentication method type in advance to the SSL/TLS negotiation.          *           * The option is a:          *<code>org.apache.camel.component.grpc.GrpcAuthType</code> type.          *           * Group: security          */
DECL|method|authenticationType ( GrpcAuthType authenticationType)
specifier|default
name|GrpcEndpointBuilder
name|authenticationType
parameter_list|(
name|GrpcAuthType
name|authenticationType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"authenticationType"
argument_list|,
name|authenticationType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Authentication method type in advance to the SSL/TLS negotiation.          *           * The option will be converted to a          *<code>org.apache.camel.component.grpc.GrpcAuthType</code> type.          *           * Group: security          */
DECL|method|authenticationType (String authenticationType)
specifier|default
name|GrpcEndpointBuilder
name|authenticationType
parameter_list|(
name|String
name|authenticationType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"authenticationType"
argument_list|,
name|authenticationType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JSON Web Token sign algorithm.          *           * The option is a:          *<code>org.apache.camel.component.grpc.auth.jwt.JwtAlgorithm</code>          * type.          *           * Group: security          */
DECL|method|jwtAlgorithm (JwtAlgorithm jwtAlgorithm)
specifier|default
name|GrpcEndpointBuilder
name|jwtAlgorithm
parameter_list|(
name|JwtAlgorithm
name|jwtAlgorithm
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"jwtAlgorithm"
argument_list|,
name|jwtAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JSON Web Token sign algorithm.          *           * The option will be converted to a          *<code>org.apache.camel.component.grpc.auth.jwt.JwtAlgorithm</code>          * type.          *           * Group: security          */
DECL|method|jwtAlgorithm (String jwtAlgorithm)
specifier|default
name|GrpcEndpointBuilder
name|jwtAlgorithm
parameter_list|(
name|String
name|jwtAlgorithm
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"jwtAlgorithm"
argument_list|,
name|jwtAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JSON Web Token issuer.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|jwtIssuer (String jwtIssuer)
specifier|default
name|GrpcEndpointBuilder
name|jwtIssuer
parameter_list|(
name|String
name|jwtIssuer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"jwtIssuer"
argument_list|,
name|jwtIssuer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JSON Web Token secret.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|jwtSecret (String jwtSecret)
specifier|default
name|GrpcEndpointBuilder
name|jwtSecret
parameter_list|(
name|String
name|jwtSecret
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"jwtSecret"
argument_list|,
name|jwtSecret
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JSON Web Token subject.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|jwtSubject (String jwtSubject)
specifier|default
name|GrpcEndpointBuilder
name|jwtSubject
parameter_list|(
name|String
name|jwtSubject
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"jwtSubject"
argument_list|,
name|jwtSubject
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The X.509 certificate chain file resource in PEM format link.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|keyCertChainResource ( String keyCertChainResource)
specifier|default
name|GrpcEndpointBuilder
name|keyCertChainResource
parameter_list|(
name|String
name|keyCertChainResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyCertChainResource"
argument_list|,
name|keyCertChainResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The PKCS#8 private key file password.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|keyPassword (String keyPassword)
specifier|default
name|GrpcEndpointBuilder
name|keyPassword
parameter_list|(
name|String
name|keyPassword
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyPassword"
argument_list|,
name|keyPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The PKCS#8 private key file resource in PEM format link.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|keyResource (String keyResource)
specifier|default
name|GrpcEndpointBuilder
name|keyResource
parameter_list|(
name|String
name|keyResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyResource"
argument_list|,
name|keyResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Identifies the security negotiation type used for HTTP/2          * communication.          *           * The option is a:<code>io.grpc.netty.NegotiationType</code> type.          *           * Group: security          */
DECL|method|negotiationType ( NegotiationType negotiationType)
specifier|default
name|GrpcEndpointBuilder
name|negotiationType
parameter_list|(
name|NegotiationType
name|negotiationType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"negotiationType"
argument_list|,
name|negotiationType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Identifies the security negotiation type used for HTTP/2          * communication.          *           * The option will be converted to a          *<code>io.grpc.netty.NegotiationType</code> type.          *           * Group: security          */
DECL|method|negotiationType (String negotiationType)
specifier|default
name|GrpcEndpointBuilder
name|negotiationType
parameter_list|(
name|String
name|negotiationType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"negotiationType"
argument_list|,
name|negotiationType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Service Account key file in JSON format resource link supported by          * the Google Cloud SDK.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|serviceAccountResource ( String serviceAccountResource)
specifier|default
name|GrpcEndpointBuilder
name|serviceAccountResource
parameter_list|(
name|String
name|serviceAccountResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"serviceAccountResource"
argument_list|,
name|serviceAccountResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The trusted certificates collection file resource in PEM format for          * verifying the remote endpoint's certificate.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|trustCertCollectionResource ( String trustCertCollectionResource)
specifier|default
name|GrpcEndpointBuilder
name|trustCertCollectionResource
parameter_list|(
name|String
name|trustCertCollectionResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustCertCollectionResource"
argument_list|,
name|trustCertCollectionResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the gRPC component.      */
DECL|interface|AdvancedGrpcEndpointBuilder
specifier|public
interface|interface
name|AdvancedGrpcEndpointBuilder
extends|extends
name|AdvancedGrpcEndpointConsumerBuilder
extends|,
name|AdvancedGrpcEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|GrpcEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|GrpcEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedGrpcEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedGrpcEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedGrpcEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedGrpcEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.grpc.GrpcConsumerStrategy</code> enum.      */
DECL|enum|GrpcConsumerStrategy
enum|enum
name|GrpcConsumerStrategy
block|{
DECL|enumConstant|AGGREGATION
name|AGGREGATION
block|,
DECL|enumConstant|PROPAGATION
name|PROPAGATION
block|;     }
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.grpc.GrpcProducerStrategy</code> enum.      */
DECL|enum|GrpcProducerStrategy
enum|enum
name|GrpcProducerStrategy
block|{
DECL|enumConstant|SIMPLE
name|SIMPLE
block|,
DECL|enumConstant|STREAMING
name|STREAMING
block|;     }
comment|/**      * Proxy enum for<code>org.apache.camel.component.grpc.GrpcAuthType</code>      * enum.      */
DECL|enum|GrpcAuthType
enum|enum
name|GrpcAuthType
block|{
DECL|enumConstant|NONE
name|NONE
block|,
DECL|enumConstant|GOOGLE
name|GOOGLE
block|,
DECL|enumConstant|JWT
name|JWT
block|;     }
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.grpc.auth.jwt.JwtAlgorithm</code> enum.      */
DECL|enum|JwtAlgorithm
enum|enum
name|JwtAlgorithm
block|{
DECL|enumConstant|HMAC256
name|HMAC256
block|,
DECL|enumConstant|HMAC384
name|HMAC384
block|,
DECL|enumConstant|HMAC512
name|HMAC512
block|;     }
comment|/**      * Proxy enum for<code>io.grpc.netty.NegotiationType</code> enum.      */
DECL|enum|NegotiationType
enum|enum
name|NegotiationType
block|{
DECL|enumConstant|TLS
name|TLS
block|,
DECL|enumConstant|PLAINTEXT_UPGRADE
name|PLAINTEXT_UPGRADE
block|,
DECL|enumConstant|PLAINTEXT
name|PLAINTEXT
block|;     }
comment|/**      * gRPC (camel-grpc)      * The gRPC component allows to call and expose remote procedures via HTTP/2      * with protobuf dataformat      *       * Category: rpc      * Since: 2.19      * Maven coordinates: org.apache.camel:camel-grpc      *       * Syntax:<code>grpc:host:port/service</code>      *       * Path parameter: host (required)      * The gRPC server host name. This is localhost or 0.0.0.0 when being a      * consumer or remote server host name when using producer.      *       * Path parameter: port (required)      * The gRPC local or remote server port      *       * Path parameter: service (required)      * Fully qualified service name from the protocol buffer descriptor file      * (package dot service definition name)      */
DECL|method|grpc (String path)
specifier|default
name|GrpcEndpointBuilder
name|grpc
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|GrpcEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|GrpcEndpointBuilder
implements|,
name|AdvancedGrpcEndpointBuilder
block|{
specifier|public
name|GrpcEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"grpc"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|GrpcEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

