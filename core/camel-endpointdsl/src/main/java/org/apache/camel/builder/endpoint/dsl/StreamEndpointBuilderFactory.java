begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The stream: component provides access to the system-in, system-out and  * system-err streams as well as allowing streaming of file and URL.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|StreamEndpointBuilderFactory
specifier|public
interface|interface
name|StreamEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Stream component.      */
DECL|interface|StreamEndpointConsumerBuilder
specifier|public
interface|interface
name|StreamEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedStreamEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedStreamEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * You can configure the encoding (is a charset name) to use text-based          * streams (for example, message body is a String object). If not          * provided, Camel uses the JVM default Charset.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|encoding (String encoding)
specifier|default
name|StreamEndpointConsumerBuilder
name|encoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When using the stream:file URI format, this option specifies the          * filename to stream to/from.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|fileName (String fileName)
specifier|default
name|StreamEndpointConsumerBuilder
name|fileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fileName"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When using the stream:url URI format, this option specifies the URL          * to stream to/from. The input/output stream will be opened using the          * JDK URLConnection facility.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|url (String url)
specifier|default
name|StreamEndpointConsumerBuilder
name|url
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"url"
argument_list|,
name|url
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|StreamEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|StreamEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use JVM file watcher to listen for file change events to support          * re-loading files that may be overwritten, somewhat like tail --retry.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|fileWatcher (boolean fileWatcher)
specifier|default
name|StreamEndpointConsumerBuilder
name|fileWatcher
parameter_list|(
name|boolean
name|fileWatcher
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fileWatcher"
argument_list|,
name|fileWatcher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use JVM file watcher to listen for file change events to support          * re-loading files that may be overwritten, somewhat like tail --retry.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|fileWatcher (String fileWatcher)
specifier|default
name|StreamEndpointConsumerBuilder
name|fileWatcher
parameter_list|(
name|String
name|fileWatcher
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fileWatcher"
argument_list|,
name|fileWatcher
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To group X number of lines in the consumer. For example to group 10          * lines and therefore only spit out an Exchange with 10 lines, instead          * of 1 Exchange per line.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|groupLines (int groupLines)
specifier|default
name|StreamEndpointConsumerBuilder
name|groupLines
parameter_list|(
name|int
name|groupLines
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"groupLines"
argument_list|,
name|groupLines
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To group X number of lines in the consumer. For example to group 10          * lines and therefore only spit out an Exchange with 10 lines, instead          * of 1 Exchange per line.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|groupLines (String groupLines)
specifier|default
name|StreamEndpointConsumerBuilder
name|groupLines
parameter_list|(
name|String
name|groupLines
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"groupLines"
argument_list|,
name|groupLines
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to use a custom GroupStrategy to control how to group lines.          *           * The option is a:          *<code>org.apache.camel.component.stream.GroupStrategy</code> type.          *           * Group: consumer          */
DECL|method|groupStrategy (Object groupStrategy)
specifier|default
name|StreamEndpointConsumerBuilder
name|groupStrategy
parameter_list|(
name|Object
name|groupStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"groupStrategy"
argument_list|,
name|groupStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to use a custom GroupStrategy to control how to group lines.          *           * The option will be converted to a          *<code>org.apache.camel.component.stream.GroupStrategy</code> type.          *           * Group: consumer          */
DECL|method|groupStrategy (String groupStrategy)
specifier|default
name|StreamEndpointConsumerBuilder
name|groupStrategy
parameter_list|(
name|String
name|groupStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"groupStrategy"
argument_list|,
name|groupStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Initial delay in milliseconds before showing the message prompt. This          * delay occurs only once. Can be used during system startup to avoid          * message prompts being written while other logging is done to the          * system out.          *           * The option is a:<code>long</code> type.          *           * Group: consumer          */
DECL|method|initialPromptDelay ( long initialPromptDelay)
specifier|default
name|StreamEndpointConsumerBuilder
name|initialPromptDelay
parameter_list|(
name|long
name|initialPromptDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"initialPromptDelay"
argument_list|,
name|initialPromptDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Initial delay in milliseconds before showing the message prompt. This          * delay occurs only once. Can be used during system startup to avoid          * message prompts being written while other logging is done to the          * system out.          *           * The option will be converted to a<code>long</code> type.          *           * Group: consumer          */
DECL|method|initialPromptDelay ( String initialPromptDelay)
specifier|default
name|StreamEndpointConsumerBuilder
name|initialPromptDelay
parameter_list|(
name|String
name|initialPromptDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"initialPromptDelay"
argument_list|,
name|initialPromptDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Optional delay in milliseconds before showing the message prompt.          *           * The option is a:<code>long</code> type.          *           * Group: consumer          */
DECL|method|promptDelay (long promptDelay)
specifier|default
name|StreamEndpointConsumerBuilder
name|promptDelay
parameter_list|(
name|long
name|promptDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"promptDelay"
argument_list|,
name|promptDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Optional delay in milliseconds before showing the message prompt.          *           * The option will be converted to a<code>long</code> type.          *           * Group: consumer          */
DECL|method|promptDelay (String promptDelay)
specifier|default
name|StreamEndpointConsumerBuilder
name|promptDelay
parameter_list|(
name|String
name|promptDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"promptDelay"
argument_list|,
name|promptDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Message prompt to use when reading from stream:in; for example, you          * could set this to Enter a command:.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|promptMessage (String promptMessage)
specifier|default
name|StreamEndpointConsumerBuilder
name|promptMessage
parameter_list|(
name|String
name|promptMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"promptMessage"
argument_list|,
name|promptMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will retry opening the stream if it's overwritten, somewhat like tail          * --retry If reading from files then you should also enable the          * fileWatcher option, to make it work reliable.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|retry (boolean retry)
specifier|default
name|StreamEndpointConsumerBuilder
name|retry
parameter_list|(
name|boolean
name|retry
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retry"
argument_list|,
name|retry
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will retry opening the stream if it's overwritten, somewhat like tail          * --retry If reading from files then you should also enable the          * fileWatcher option, to make it work reliable.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|retry (String retry)
specifier|default
name|StreamEndpointConsumerBuilder
name|retry
parameter_list|(
name|String
name|retry
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retry"
argument_list|,
name|retry
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To be used for continuously reading a stream such as the unix tail          * command.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|scanStream (boolean scanStream)
specifier|default
name|StreamEndpointConsumerBuilder
name|scanStream
parameter_list|(
name|boolean
name|scanStream
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scanStream"
argument_list|,
name|scanStream
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To be used for continuously reading a stream such as the unix tail          * command.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|scanStream (String scanStream)
specifier|default
name|StreamEndpointConsumerBuilder
name|scanStream
parameter_list|(
name|String
name|scanStream
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scanStream"
argument_list|,
name|scanStream
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delay in milliseconds between read attempts when using scanStream.          *           * The option is a:<code>long</code> type.          *           * Group: consumer          */
DECL|method|scanStreamDelay ( long scanStreamDelay)
specifier|default
name|StreamEndpointConsumerBuilder
name|scanStreamDelay
parameter_list|(
name|long
name|scanStreamDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scanStreamDelay"
argument_list|,
name|scanStreamDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delay in milliseconds between read attempts when using scanStream.          *           * The option will be converted to a<code>long</code> type.          *           * Group: consumer          */
DECL|method|scanStreamDelay ( String scanStreamDelay)
specifier|default
name|StreamEndpointConsumerBuilder
name|scanStreamDelay
parameter_list|(
name|String
name|scanStreamDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scanStreamDelay"
argument_list|,
name|scanStreamDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Stream component.      */
DECL|interface|AdvancedStreamEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedStreamEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|StreamEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|StreamEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedStreamEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedStreamEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedStreamEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedStreamEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedStreamEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedStreamEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a specified timeout value, in milliseconds, to be used when          * opening a communications link to the resource referenced by this          * URLConnection. If the timeout expires before the connection can be          * established, a java.net.SocketTimeoutException is raised. A timeout          * of zero is interpreted as an infinite timeout.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectTimeout ( int connectTimeout)
specifier|default
name|AdvancedStreamEndpointConsumerBuilder
name|connectTimeout
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a specified timeout value, in milliseconds, to be used when          * opening a communications link to the resource referenced by this          * URLConnection. If the timeout expires before the connection can be          * established, a java.net.SocketTimeoutException is raised. A timeout          * of zero is interpreted as an infinite timeout.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectTimeout ( String connectTimeout)
specifier|default
name|AdvancedStreamEndpointConsumerBuilder
name|connectTimeout
parameter_list|(
name|String
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Optional http headers to use in request when using HTTP URL.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|httpHeaders ( Map<String, Object> httpHeaders)
specifier|default
name|AdvancedStreamEndpointConsumerBuilder
name|httpHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Optional http headers to use in request when using HTTP URL.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|httpHeaders ( String httpHeaders)
specifier|default
name|AdvancedStreamEndpointConsumerBuilder
name|httpHeaders
parameter_list|(
name|String
name|httpHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the read timeout to a specified timeout, in milliseconds. A          * non-zero value specifies the timeout when reading from Input stream          * when a connection is established to a resource. If the timeout          * expires before there is data available for read, a          * java.net.SocketTimeoutException is raised. A timeout of zero is          * interpreted as an infinite timeout.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|readTimeout ( int readTimeout)
specifier|default
name|AdvancedStreamEndpointConsumerBuilder
name|readTimeout
parameter_list|(
name|int
name|readTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readTimeout"
argument_list|,
name|readTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the read timeout to a specified timeout, in milliseconds. A          * non-zero value specifies the timeout when reading from Input stream          * when a connection is established to a resource. If the timeout          * expires before there is data available for read, a          * java.net.SocketTimeoutException is raised. A timeout of zero is          * interpreted as an infinite timeout.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|readTimeout ( String readTimeout)
specifier|default
name|AdvancedStreamEndpointConsumerBuilder
name|readTimeout
parameter_list|(
name|String
name|readTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readTimeout"
argument_list|,
name|readTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedStreamEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedStreamEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Stream component.      */
DECL|interface|StreamEndpointProducerBuilder
specifier|public
interface|interface
name|StreamEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedStreamEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedStreamEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * You can configure the encoding (is a charset name) to use text-based          * streams (for example, message body is a String object). If not          * provided, Camel uses the JVM default Charset.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|encoding (String encoding)
specifier|default
name|StreamEndpointProducerBuilder
name|encoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When using the stream:file URI format, this option specifies the          * filename to stream to/from.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|fileName (String fileName)
specifier|default
name|StreamEndpointProducerBuilder
name|fileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fileName"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When using the stream:url URI format, this option specifies the URL          * to stream to/from. The input/output stream will be opened using the          * JDK URLConnection facility.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|url (String url)
specifier|default
name|StreamEndpointProducerBuilder
name|url
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"url"
argument_list|,
name|url
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of messages to process before closing stream on Producer side.          * Never close stream by default (only when Producer is stopped). If          * more messages are sent, the stream is reopened for another          * autoCloseCount batch.          *           * The option is a:<code>int</code> type.          *           * Group: producer          */
DECL|method|autoCloseCount (int autoCloseCount)
specifier|default
name|StreamEndpointProducerBuilder
name|autoCloseCount
parameter_list|(
name|int
name|autoCloseCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoCloseCount"
argument_list|,
name|autoCloseCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of messages to process before closing stream on Producer side.          * Never close stream by default (only when Producer is stopped). If          * more messages are sent, the stream is reopened for another          * autoCloseCount batch.          *           * The option will be converted to a<code>int</code> type.          *           * Group: producer          */
DECL|method|autoCloseCount ( String autoCloseCount)
specifier|default
name|StreamEndpointProducerBuilder
name|autoCloseCount
parameter_list|(
name|String
name|autoCloseCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoCloseCount"
argument_list|,
name|autoCloseCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used in combination with Splitter and streaming to the          * same file. The idea is to keep the stream open and only close when          * the Splitter is done, to improve performance. Mind this requires that          * you only stream to the same file, and not 2 or more files.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|closeOnDone (boolean closeOnDone)
specifier|default
name|StreamEndpointProducerBuilder
name|closeOnDone
parameter_list|(
name|boolean
name|closeOnDone
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"closeOnDone"
argument_list|,
name|closeOnDone
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used in combination with Splitter and streaming to the          * same file. The idea is to keep the stream open and only close when          * the Splitter is done, to improve performance. Mind this requires that          * you only stream to the same file, and not 2 or more files.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|closeOnDone (String closeOnDone)
specifier|default
name|StreamEndpointProducerBuilder
name|closeOnDone
parameter_list|(
name|String
name|closeOnDone
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"closeOnDone"
argument_list|,
name|closeOnDone
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Initial delay in milliseconds before producing the stream.          *           * The option is a:<code>long</code> type.          *           * Group: producer          */
DECL|method|delay (long delay)
specifier|default
name|StreamEndpointProducerBuilder
name|delay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Initial delay in milliseconds before producing the stream.          *           * The option will be converted to a<code>long</code> type.          *           * Group: producer          */
DECL|method|delay (String delay)
specifier|default
name|StreamEndpointProducerBuilder
name|delay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|StreamEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|StreamEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Stream component.      */
DECL|interface|AdvancedStreamEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedStreamEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|StreamEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|StreamEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedStreamEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedStreamEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a specified timeout value, in milliseconds, to be used when          * opening a communications link to the resource referenced by this          * URLConnection. If the timeout expires before the connection can be          * established, a java.net.SocketTimeoutException is raised. A timeout          * of zero is interpreted as an infinite timeout.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectTimeout ( int connectTimeout)
specifier|default
name|AdvancedStreamEndpointProducerBuilder
name|connectTimeout
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a specified timeout value, in milliseconds, to be used when          * opening a communications link to the resource referenced by this          * URLConnection. If the timeout expires before the connection can be          * established, a java.net.SocketTimeoutException is raised. A timeout          * of zero is interpreted as an infinite timeout.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectTimeout ( String connectTimeout)
specifier|default
name|AdvancedStreamEndpointProducerBuilder
name|connectTimeout
parameter_list|(
name|String
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Optional http headers to use in request when using HTTP URL.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|httpHeaders ( Map<String, Object> httpHeaders)
specifier|default
name|AdvancedStreamEndpointProducerBuilder
name|httpHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Optional http headers to use in request when using HTTP URL.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|httpHeaders ( String httpHeaders)
specifier|default
name|AdvancedStreamEndpointProducerBuilder
name|httpHeaders
parameter_list|(
name|String
name|httpHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the read timeout to a specified timeout, in milliseconds. A          * non-zero value specifies the timeout when reading from Input stream          * when a connection is established to a resource. If the timeout          * expires before there is data available for read, a          * java.net.SocketTimeoutException is raised. A timeout of zero is          * interpreted as an infinite timeout.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|readTimeout ( int readTimeout)
specifier|default
name|AdvancedStreamEndpointProducerBuilder
name|readTimeout
parameter_list|(
name|int
name|readTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readTimeout"
argument_list|,
name|readTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the read timeout to a specified timeout, in milliseconds. A          * non-zero value specifies the timeout when reading from Input stream          * when a connection is established to a resource. If the timeout          * expires before there is data available for read, a          * java.net.SocketTimeoutException is raised. A timeout of zero is          * interpreted as an infinite timeout.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|readTimeout ( String readTimeout)
specifier|default
name|AdvancedStreamEndpointProducerBuilder
name|readTimeout
parameter_list|(
name|String
name|readTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readTimeout"
argument_list|,
name|readTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedStreamEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedStreamEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Stream component.      */
DECL|interface|StreamEndpointBuilder
specifier|public
interface|interface
name|StreamEndpointBuilder
extends|extends
name|StreamEndpointConsumerBuilder
extends|,
name|StreamEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedStreamEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedStreamEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * You can configure the encoding (is a charset name) to use text-based          * streams (for example, message body is a String object). If not          * provided, Camel uses the JVM default Charset.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|encoding (String encoding)
specifier|default
name|StreamEndpointBuilder
name|encoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When using the stream:file URI format, this option specifies the          * filename to stream to/from.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|fileName (String fileName)
specifier|default
name|StreamEndpointBuilder
name|fileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fileName"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When using the stream:url URI format, this option specifies the URL          * to stream to/from. The input/output stream will be opened using the          * JDK URLConnection facility.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|url (String url)
specifier|default
name|StreamEndpointBuilder
name|url
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"url"
argument_list|,
name|url
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Stream component.      */
DECL|interface|AdvancedStreamEndpointBuilder
specifier|public
interface|interface
name|AdvancedStreamEndpointBuilder
extends|extends
name|AdvancedStreamEndpointConsumerBuilder
extends|,
name|AdvancedStreamEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|StreamEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|StreamEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedStreamEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedStreamEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a specified timeout value, in milliseconds, to be used when          * opening a communications link to the resource referenced by this          * URLConnection. If the timeout expires before the connection can be          * established, a java.net.SocketTimeoutException is raised. A timeout          * of zero is interpreted as an infinite timeout.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectTimeout (int connectTimeout)
specifier|default
name|AdvancedStreamEndpointBuilder
name|connectTimeout
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a specified timeout value, in milliseconds, to be used when          * opening a communications link to the resource referenced by this          * URLConnection. If the timeout expires before the connection can be          * established, a java.net.SocketTimeoutException is raised. A timeout          * of zero is interpreted as an infinite timeout.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectTimeout ( String connectTimeout)
specifier|default
name|AdvancedStreamEndpointBuilder
name|connectTimeout
parameter_list|(
name|String
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Optional http headers to use in request when using HTTP URL.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|httpHeaders ( Map<String, Object> httpHeaders)
specifier|default
name|AdvancedStreamEndpointBuilder
name|httpHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Optional http headers to use in request when using HTTP URL.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|httpHeaders (String httpHeaders)
specifier|default
name|AdvancedStreamEndpointBuilder
name|httpHeaders
parameter_list|(
name|String
name|httpHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the read timeout to a specified timeout, in milliseconds. A          * non-zero value specifies the timeout when reading from Input stream          * when a connection is established to a resource. If the timeout          * expires before there is data available for read, a          * java.net.SocketTimeoutException is raised. A timeout of zero is          * interpreted as an infinite timeout.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|readTimeout (int readTimeout)
specifier|default
name|AdvancedStreamEndpointBuilder
name|readTimeout
parameter_list|(
name|int
name|readTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readTimeout"
argument_list|,
name|readTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the read timeout to a specified timeout, in milliseconds. A          * non-zero value specifies the timeout when reading from Input stream          * when a connection is established to a resource. If the timeout          * expires before there is data available for read, a          * java.net.SocketTimeoutException is raised. A timeout of zero is          * interpreted as an infinite timeout.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|readTimeout (String readTimeout)
specifier|default
name|AdvancedStreamEndpointBuilder
name|readTimeout
parameter_list|(
name|String
name|readTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readTimeout"
argument_list|,
name|readTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedStreamEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedStreamEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Stream (camel-stream)      * The stream: component provides access to the system-in, system-out and      * system-err streams as well as allowing streaming of file and URL.      *       * Syntax:<code>stream:kind</code>      * Category: file,system      * Available as of version: 1.3      * Maven coordinates: org.apache.camel:camel-stream      */
DECL|method|stream (String path)
specifier|default
name|StreamEndpointBuilder
name|stream
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|StreamEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|StreamEndpointBuilder
implements|,
name|AdvancedStreamEndpointBuilder
block|{
specifier|public
name|StreamEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"stream"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|StreamEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

