begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_comment
comment|/**  * To send and receive messages from a XMPP (chat) server.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|XmppEndpointBuilderFactory
specifier|public
interface|interface
name|XmppEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the XMPP component.      */
DECL|interface|XmppEndpointConsumerBuilder
specifier|public
interface|interface
name|XmppEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedXmppEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedXmppEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Hostname for the chat server.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|XmppEndpointConsumerBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the chat server.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|port (int port)
specifier|default
name|XmppEndpointConsumerBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the chat server.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|XmppEndpointConsumerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JID (Jabber ID) of person to receive messages. room parameter has          * precedence over participant.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|participant (String participant)
specifier|default
name|XmppEndpointConsumerBuilder
name|participant
parameter_list|(
name|String
name|participant
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"participant"
argument_list|,
name|participant
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to login the user.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|login (boolean login)
specifier|default
name|XmppEndpointConsumerBuilder
name|login
parameter_list|(
name|boolean
name|login
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"login"
argument_list|,
name|login
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to login the user.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|login (String login)
specifier|default
name|XmppEndpointConsumerBuilder
name|login
parameter_list|(
name|String
name|login
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"login"
argument_list|,
name|login
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use nickname when joining room. If room is specified and nickname is          * not, user will be used for the nickname.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|nickname (String nickname)
specifier|default
name|XmppEndpointConsumerBuilder
name|nickname
parameter_list|(
name|String
name|nickname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nickname"
argument_list|,
name|nickname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Accept pubsub packets on input, default is false.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|pubsub (boolean pubsub)
specifier|default
name|XmppEndpointConsumerBuilder
name|pubsub
parameter_list|(
name|boolean
name|pubsub
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pubsub"
argument_list|,
name|pubsub
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Accept pubsub packets on input, default is false.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|pubsub (String pubsub)
specifier|default
name|XmppEndpointConsumerBuilder
name|pubsub
parameter_list|(
name|String
name|pubsub
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pubsub"
argument_list|,
name|pubsub
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is specified, the component will connect to MUC (Multi          * User Chat). Usually, the domain name for MUC is different from the          * login domain. For example, if you are supermanjabber.org and want to          * join the krypton room, then the room URL is          * kryptonconference.jabber.org. Note the conference part. It is not a          * requirement to provide the full room JID. If the room parameter does          * not contain the symbol, the domain part will be discovered and added          * by Camel.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|room (String room)
specifier|default
name|XmppEndpointConsumerBuilder
name|room
parameter_list|(
name|String
name|room
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"room"
argument_list|,
name|room
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the service you are connecting to. For Google Talk, this          * would be gmail.com.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|serviceName (String serviceName)
specifier|default
name|XmppEndpointConsumerBuilder
name|serviceName
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceName"
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to test the connection on startup. This is used to          * ensure that the XMPP client has a valid connection to the XMPP server          * when the route starts. Camel throws an exception on startup if a          * connection cannot be established. When this option is set to false,          * Camel will attempt to establish a lazy connection when needed by a          * producer, and will poll for a consumer connection until the          * connection is established. Default is true.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|testConnectionOnStartup ( boolean testConnectionOnStartup)
specifier|default
name|XmppEndpointConsumerBuilder
name|testConnectionOnStartup
parameter_list|(
name|boolean
name|testConnectionOnStartup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"testConnectionOnStartup"
argument_list|,
name|testConnectionOnStartup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to test the connection on startup. This is used to          * ensure that the XMPP client has a valid connection to the XMPP server          * when the route starts. Camel throws an exception on startup if a          * connection cannot be established. When this option is set to false,          * Camel will attempt to establish a lazy connection when needed by a          * producer, and will poll for a consumer connection until the          * connection is established. Default is true.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|testConnectionOnStartup ( String testConnectionOnStartup)
specifier|default
name|XmppEndpointConsumerBuilder
name|testConnectionOnStartup
parameter_list|(
name|String
name|testConnectionOnStartup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"testConnectionOnStartup"
argument_list|,
name|testConnectionOnStartup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|XmppEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|XmppEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The amount of time in seconds between polls (in seconds) to verify          * the health of the XMPP connection, or between attempts to establish          * an initial consumer connection. Camel will try to re-establish a          * connection if it has become inactive. Default is 10 seconds.          * The option is a<code>int</code> type.          * @group consumer          */
DECL|method|connectionPollDelay ( int connectionPollDelay)
specifier|default
name|XmppEndpointConsumerBuilder
name|connectionPollDelay
parameter_list|(
name|int
name|connectionPollDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionPollDelay"
argument_list|,
name|connectionPollDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The amount of time in seconds between polls (in seconds) to verify          * the health of the XMPP connection, or between attempts to establish          * an initial consumer connection. Camel will try to re-establish a          * connection if it has become inactive. Default is 10 seconds.          * The option will be converted to a<code>int</code> type.          * @group consumer          */
DECL|method|connectionPollDelay ( String connectionPollDelay)
specifier|default
name|XmppEndpointConsumerBuilder
name|connectionPollDelay
parameter_list|(
name|String
name|connectionPollDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionPollDelay"
argument_list|,
name|connectionPollDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a doc header on the IN message containing a Document form of the          * incoming packet; default is true if presence or pubsub are true,          * otherwise false.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|doc (boolean doc)
specifier|default
name|XmppEndpointConsumerBuilder
name|doc
parameter_list|(
name|boolean
name|doc
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"doc"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a doc header on the IN message containing a Document form of the          * incoming packet; default is true if presence or pubsub are true,          * otherwise false.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|doc (String doc)
specifier|default
name|XmppEndpointConsumerBuilder
name|doc
parameter_list|(
name|String
name|doc
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"doc"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option is a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group filter          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|XmppEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group filter          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|XmppEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for login.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|password (String password)
specifier|default
name|XmppEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * User name (without server name). If not specified, anonymous login          * will be attempted.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|user (String user)
specifier|default
name|XmppEndpointConsumerBuilder
name|user
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"user"
argument_list|,
name|user
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the XMPP component.      */
DECL|interface|AdvancedXmppEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedXmppEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|XmppEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|XmppEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * If true, an attempt to create an account will be made. Default is          * false.          * The option is a<code>boolean</code> type.          * @group common (advanced)          */
DECL|method|createAccount ( boolean createAccount)
specifier|default
name|AdvancedXmppEndpointConsumerBuilder
name|createAccount
parameter_list|(
name|boolean
name|createAccount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createAccount"
argument_list|,
name|createAccount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, an attempt to create an account will be made. Default is          * false.          * The option will be converted to a<code>boolean</code> type.          * @group common (advanced)          */
DECL|method|createAccount ( String createAccount)
specifier|default
name|AdvancedXmppEndpointConsumerBuilder
name|createAccount
parameter_list|(
name|String
name|createAccount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createAccount"
argument_list|,
name|createAccount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * XMPP resource. The default is Camel.          * The option is a<code>java.lang.String</code> type.          * @group common (advanced)          */
DECL|method|resource (String resource)
specifier|default
name|AdvancedXmppEndpointConsumerBuilder
name|resource
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resource"
argument_list|,
name|resource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedXmppEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedXmppEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedXmppEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedXmppEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedXmppEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedXmppEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing connection configuration. Currently          * org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration is only          * supported (XMPP over TCP).          * The option is a          *<code>org.jivesoftware.smack.ConnectionConfiguration</code> type.          * @group advanced          */
DECL|method|connectionConfig ( Object connectionConfig)
specifier|default
name|AdvancedXmppEndpointConsumerBuilder
name|connectionConfig
parameter_list|(
name|Object
name|connectionConfig
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionConfig"
argument_list|,
name|connectionConfig
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing connection configuration. Currently          * org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration is only          * supported (XMPP over TCP).          * The option will be converted to a          *<code>org.jivesoftware.smack.ConnectionConfiguration</code> type.          * @group advanced          */
DECL|method|connectionConfig ( String connectionConfig)
specifier|default
name|AdvancedXmppEndpointConsumerBuilder
name|connectionConfig
parameter_list|(
name|String
name|connectionConfig
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionConfig"
argument_list|,
name|connectionConfig
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedXmppEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedXmppEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the XMPP component.      */
DECL|interface|XmppEndpointProducerBuilder
specifier|public
interface|interface
name|XmppEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedXmppEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedXmppEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Hostname for the chat server.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|XmppEndpointProducerBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the chat server.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|port (int port)
specifier|default
name|XmppEndpointProducerBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the chat server.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|XmppEndpointProducerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JID (Jabber ID) of person to receive messages. room parameter has          * precedence over participant.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|participant (String participant)
specifier|default
name|XmppEndpointProducerBuilder
name|participant
parameter_list|(
name|String
name|participant
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"participant"
argument_list|,
name|participant
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to login the user.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|login (boolean login)
specifier|default
name|XmppEndpointProducerBuilder
name|login
parameter_list|(
name|boolean
name|login
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"login"
argument_list|,
name|login
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to login the user.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|login (String login)
specifier|default
name|XmppEndpointProducerBuilder
name|login
parameter_list|(
name|String
name|login
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"login"
argument_list|,
name|login
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use nickname when joining room. If room is specified and nickname is          * not, user will be used for the nickname.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|nickname (String nickname)
specifier|default
name|XmppEndpointProducerBuilder
name|nickname
parameter_list|(
name|String
name|nickname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nickname"
argument_list|,
name|nickname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Accept pubsub packets on input, default is false.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|pubsub (boolean pubsub)
specifier|default
name|XmppEndpointProducerBuilder
name|pubsub
parameter_list|(
name|boolean
name|pubsub
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pubsub"
argument_list|,
name|pubsub
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Accept pubsub packets on input, default is false.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|pubsub (String pubsub)
specifier|default
name|XmppEndpointProducerBuilder
name|pubsub
parameter_list|(
name|String
name|pubsub
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pubsub"
argument_list|,
name|pubsub
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is specified, the component will connect to MUC (Multi          * User Chat). Usually, the domain name for MUC is different from the          * login domain. For example, if you are supermanjabber.org and want to          * join the krypton room, then the room URL is          * kryptonconference.jabber.org. Note the conference part. It is not a          * requirement to provide the full room JID. If the room parameter does          * not contain the symbol, the domain part will be discovered and added          * by Camel.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|room (String room)
specifier|default
name|XmppEndpointProducerBuilder
name|room
parameter_list|(
name|String
name|room
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"room"
argument_list|,
name|room
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the service you are connecting to. For Google Talk, this          * would be gmail.com.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|serviceName (String serviceName)
specifier|default
name|XmppEndpointProducerBuilder
name|serviceName
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceName"
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to test the connection on startup. This is used to          * ensure that the XMPP client has a valid connection to the XMPP server          * when the route starts. Camel throws an exception on startup if a          * connection cannot be established. When this option is set to false,          * Camel will attempt to establish a lazy connection when needed by a          * producer, and will poll for a consumer connection until the          * connection is established. Default is true.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|testConnectionOnStartup ( boolean testConnectionOnStartup)
specifier|default
name|XmppEndpointProducerBuilder
name|testConnectionOnStartup
parameter_list|(
name|boolean
name|testConnectionOnStartup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"testConnectionOnStartup"
argument_list|,
name|testConnectionOnStartup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to test the connection on startup. This is used to          * ensure that the XMPP client has a valid connection to the XMPP server          * when the route starts. Camel throws an exception on startup if a          * connection cannot be established. When this option is set to false,          * Camel will attempt to establish a lazy connection when needed by a          * producer, and will poll for a consumer connection until the          * connection is established. Default is true.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|testConnectionOnStartup ( String testConnectionOnStartup)
specifier|default
name|XmppEndpointProducerBuilder
name|testConnectionOnStartup
parameter_list|(
name|String
name|testConnectionOnStartup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"testConnectionOnStartup"
argument_list|,
name|testConnectionOnStartup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|XmppEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|XmppEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option is a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group filter          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|XmppEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group filter          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|XmppEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for login.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|password (String password)
specifier|default
name|XmppEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * User name (without server name). If not specified, anonymous login          * will be attempted.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|user (String user)
specifier|default
name|XmppEndpointProducerBuilder
name|user
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"user"
argument_list|,
name|user
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the XMPP component.      */
DECL|interface|AdvancedXmppEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedXmppEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|XmppEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|XmppEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * If true, an attempt to create an account will be made. Default is          * false.          * The option is a<code>boolean</code> type.          * @group common (advanced)          */
DECL|method|createAccount ( boolean createAccount)
specifier|default
name|AdvancedXmppEndpointProducerBuilder
name|createAccount
parameter_list|(
name|boolean
name|createAccount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createAccount"
argument_list|,
name|createAccount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, an attempt to create an account will be made. Default is          * false.          * The option will be converted to a<code>boolean</code> type.          * @group common (advanced)          */
DECL|method|createAccount ( String createAccount)
specifier|default
name|AdvancedXmppEndpointProducerBuilder
name|createAccount
parameter_list|(
name|String
name|createAccount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createAccount"
argument_list|,
name|createAccount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * XMPP resource. The default is Camel.          * The option is a<code>java.lang.String</code> type.          * @group common (advanced)          */
DECL|method|resource (String resource)
specifier|default
name|AdvancedXmppEndpointProducerBuilder
name|resource
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resource"
argument_list|,
name|resource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedXmppEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedXmppEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing connection configuration. Currently          * org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration is only          * supported (XMPP over TCP).          * The option is a          *<code>org.jivesoftware.smack.ConnectionConfiguration</code> type.          * @group advanced          */
DECL|method|connectionConfig ( Object connectionConfig)
specifier|default
name|AdvancedXmppEndpointProducerBuilder
name|connectionConfig
parameter_list|(
name|Object
name|connectionConfig
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionConfig"
argument_list|,
name|connectionConfig
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing connection configuration. Currently          * org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration is only          * supported (XMPP over TCP).          * The option will be converted to a          *<code>org.jivesoftware.smack.ConnectionConfiguration</code> type.          * @group advanced          */
DECL|method|connectionConfig ( String connectionConfig)
specifier|default
name|AdvancedXmppEndpointProducerBuilder
name|connectionConfig
parameter_list|(
name|String
name|connectionConfig
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionConfig"
argument_list|,
name|connectionConfig
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedXmppEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedXmppEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the XMPP component.      */
DECL|interface|XmppEndpointBuilder
specifier|public
interface|interface
name|XmppEndpointBuilder
extends|extends
name|XmppEndpointConsumerBuilder
extends|,
name|XmppEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedXmppEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedXmppEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Hostname for the chat server.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|XmppEndpointBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the chat server.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|port (int port)
specifier|default
name|XmppEndpointBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the chat server.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|XmppEndpointBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JID (Jabber ID) of person to receive messages. room parameter has          * precedence over participant.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|participant (String participant)
specifier|default
name|XmppEndpointBuilder
name|participant
parameter_list|(
name|String
name|participant
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"participant"
argument_list|,
name|participant
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to login the user.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|login (boolean login)
specifier|default
name|XmppEndpointBuilder
name|login
parameter_list|(
name|boolean
name|login
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"login"
argument_list|,
name|login
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to login the user.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|login (String login)
specifier|default
name|XmppEndpointBuilder
name|login
parameter_list|(
name|String
name|login
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"login"
argument_list|,
name|login
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use nickname when joining room. If room is specified and nickname is          * not, user will be used for the nickname.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|nickname (String nickname)
specifier|default
name|XmppEndpointBuilder
name|nickname
parameter_list|(
name|String
name|nickname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nickname"
argument_list|,
name|nickname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Accept pubsub packets on input, default is false.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|pubsub (boolean pubsub)
specifier|default
name|XmppEndpointBuilder
name|pubsub
parameter_list|(
name|boolean
name|pubsub
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pubsub"
argument_list|,
name|pubsub
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Accept pubsub packets on input, default is false.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|pubsub (String pubsub)
specifier|default
name|XmppEndpointBuilder
name|pubsub
parameter_list|(
name|String
name|pubsub
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pubsub"
argument_list|,
name|pubsub
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is specified, the component will connect to MUC (Multi          * User Chat). Usually, the domain name for MUC is different from the          * login domain. For example, if you are supermanjabber.org and want to          * join the krypton room, then the room URL is          * kryptonconference.jabber.org. Note the conference part. It is not a          * requirement to provide the full room JID. If the room parameter does          * not contain the symbol, the domain part will be discovered and added          * by Camel.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|room (String room)
specifier|default
name|XmppEndpointBuilder
name|room
parameter_list|(
name|String
name|room
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"room"
argument_list|,
name|room
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the service you are connecting to. For Google Talk, this          * would be gmail.com.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|serviceName (String serviceName)
specifier|default
name|XmppEndpointBuilder
name|serviceName
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceName"
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to test the connection on startup. This is used to          * ensure that the XMPP client has a valid connection to the XMPP server          * when the route starts. Camel throws an exception on startup if a          * connection cannot be established. When this option is set to false,          * Camel will attempt to establish a lazy connection when needed by a          * producer, and will poll for a consumer connection until the          * connection is established. Default is true.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|testConnectionOnStartup ( boolean testConnectionOnStartup)
specifier|default
name|XmppEndpointBuilder
name|testConnectionOnStartup
parameter_list|(
name|boolean
name|testConnectionOnStartup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"testConnectionOnStartup"
argument_list|,
name|testConnectionOnStartup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to test the connection on startup. This is used to          * ensure that the XMPP client has a valid connection to the XMPP server          * when the route starts. Camel throws an exception on startup if a          * connection cannot be established. When this option is set to false,          * Camel will attempt to establish a lazy connection when needed by a          * producer, and will poll for a consumer connection until the          * connection is established. Default is true.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|testConnectionOnStartup ( String testConnectionOnStartup)
specifier|default
name|XmppEndpointBuilder
name|testConnectionOnStartup
parameter_list|(
name|String
name|testConnectionOnStartup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"testConnectionOnStartup"
argument_list|,
name|testConnectionOnStartup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option is a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group filter          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|XmppEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group filter          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|XmppEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for login.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|password (String password)
specifier|default
name|XmppEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * User name (without server name). If not specified, anonymous login          * will be attempted.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|user (String user)
specifier|default
name|XmppEndpointBuilder
name|user
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"user"
argument_list|,
name|user
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the XMPP component.      */
DECL|interface|AdvancedXmppEndpointBuilder
specifier|public
interface|interface
name|AdvancedXmppEndpointBuilder
extends|extends
name|AdvancedXmppEndpointConsumerBuilder
extends|,
name|AdvancedXmppEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|XmppEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|XmppEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * If true, an attempt to create an account will be made. Default is          * false.          * The option is a<code>boolean</code> type.          * @group common (advanced)          */
DECL|method|createAccount (boolean createAccount)
specifier|default
name|AdvancedXmppEndpointBuilder
name|createAccount
parameter_list|(
name|boolean
name|createAccount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createAccount"
argument_list|,
name|createAccount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, an attempt to create an account will be made. Default is          * false.          * The option will be converted to a<code>boolean</code> type.          * @group common (advanced)          */
DECL|method|createAccount (String createAccount)
specifier|default
name|AdvancedXmppEndpointBuilder
name|createAccount
parameter_list|(
name|String
name|createAccount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createAccount"
argument_list|,
name|createAccount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * XMPP resource. The default is Camel.          * The option is a<code>java.lang.String</code> type.          * @group common (advanced)          */
DECL|method|resource (String resource)
specifier|default
name|AdvancedXmppEndpointBuilder
name|resource
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resource"
argument_list|,
name|resource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedXmppEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedXmppEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing connection configuration. Currently          * org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration is only          * supported (XMPP over TCP).          * The option is a          *<code>org.jivesoftware.smack.ConnectionConfiguration</code> type.          * @group advanced          */
DECL|method|connectionConfig ( Object connectionConfig)
specifier|default
name|AdvancedXmppEndpointBuilder
name|connectionConfig
parameter_list|(
name|Object
name|connectionConfig
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionConfig"
argument_list|,
name|connectionConfig
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing connection configuration. Currently          * org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration is only          * supported (XMPP over TCP).          * The option will be converted to a          *<code>org.jivesoftware.smack.ConnectionConfiguration</code> type.          * @group advanced          */
DECL|method|connectionConfig ( String connectionConfig)
specifier|default
name|AdvancedXmppEndpointBuilder
name|connectionConfig
parameter_list|(
name|String
name|connectionConfig
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionConfig"
argument_list|,
name|connectionConfig
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedXmppEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedXmppEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * To send and receive messages from a XMPP (chat) server.      * Maven coordinates: org.apache.camel:camel-xmpp      */
DECL|method|xmpp (String path)
specifier|default
name|XmppEndpointBuilder
name|xmpp
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|XmppEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|XmppEndpointBuilder
implements|,
name|AdvancedXmppEndpointBuilder
block|{
specifier|public
name|XmppEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"xmpp"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|XmppEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

