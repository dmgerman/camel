begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * Represents a Debezium SQL Server endpoint which is used to capture changes in  * SQL Server database so that that applications can see those changes and  * respond to them.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|DebeziumSqlserverEndpointBuilderFactory
specifier|public
interface|interface
name|DebeziumSqlserverEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint for the Debezium SQL Server Connector component.      */
DECL|interface|DebeziumSqlserverEndpointBuilder
specifier|public
interface|interface
name|DebeziumSqlserverEndpointBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedDebeziumSqlserverEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedDebeziumSqlserverEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Converter class that should be used to serialize and deserialize          * key data for offsets. The default is JSON converter.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|internalKeyConverter ( String internalKeyConverter)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|internalKeyConverter
parameter_list|(
name|String
name|internalKeyConverter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"internalKeyConverter"
argument_list|,
name|internalKeyConverter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Converter class that should be used to serialize and deserialize          * value data for offsets. The default is JSON converter.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|internalValueConverter ( String internalValueConverter)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|internalValueConverter
parameter_list|(
name|String
name|internalValueConverter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"internalValueConverter"
argument_list|,
name|internalValueConverter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the Java class of the commit policy. It defines when          * offsets commit has to be triggered based on the number of events          * processed and the time elapsed since the last commit. This class must          * implement the interface 'OffsetCommitPolicy'. The default is a          * periodic commit policy based upon time intervals.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|offsetCommitPolicy ( String offsetCommitPolicy)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|offsetCommitPolicy
parameter_list|(
name|String
name|offsetCommitPolicy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetCommitPolicy"
argument_list|,
name|offsetCommitPolicy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum number of milliseconds to wait for records to flush and          * partition offset data to be committed to offset storage before          * cancelling the process and restoring the offset data to be committed          * in a future attempt. The default is 5 seconds.          *           * The option is a:<code>long</code> type.          *           * Group: consumer          */
DECL|method|offsetCommitTimeoutMs ( long offsetCommitTimeoutMs)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|offsetCommitTimeoutMs
parameter_list|(
name|long
name|offsetCommitTimeoutMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetCommitTimeoutMs"
argument_list|,
name|offsetCommitTimeoutMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum number of milliseconds to wait for records to flush and          * partition offset data to be committed to offset storage before          * cancelling the process and restoring the offset data to be committed          * in a future attempt. The default is 5 seconds.          *           * The option will be converted to a<code>long</code> type.          *           * Group: consumer          */
DECL|method|offsetCommitTimeoutMs ( String offsetCommitTimeoutMs)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|offsetCommitTimeoutMs
parameter_list|(
name|String
name|offsetCommitTimeoutMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetCommitTimeoutMs"
argument_list|,
name|offsetCommitTimeoutMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval at which to try committing offsets. The default is 1 minute.          *           * The option is a:<code>long</code> type.          *           * Group: consumer          */
DECL|method|offsetFlushIntervalMs ( long offsetFlushIntervalMs)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|offsetFlushIntervalMs
parameter_list|(
name|long
name|offsetFlushIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetFlushIntervalMs"
argument_list|,
name|offsetFlushIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval at which to try committing offsets. The default is 1 minute.          *           * The option will be converted to a<code>long</code> type.          *           * Group: consumer          */
DECL|method|offsetFlushIntervalMs ( String offsetFlushIntervalMs)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|offsetFlushIntervalMs
parameter_list|(
name|String
name|offsetFlushIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetFlushIntervalMs"
argument_list|,
name|offsetFlushIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the Java class that is responsible for persistence of          * connector offsets.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|offsetStorage ( String offsetStorage)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|offsetStorage
parameter_list|(
name|String
name|offsetStorage
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorage"
argument_list|,
name|offsetStorage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Path to file where offsets are to be stored. Required when          * offset.storage is set to the FileOffsetBackingStore.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|offsetStorageFileName ( String offsetStorageFileName)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|offsetStorageFileName
parameter_list|(
name|String
name|offsetStorageFileName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorageFileName"
argument_list|,
name|offsetStorageFileName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of partitions used when creating the offset storage topic.          * Required when offset.storage is set to the 'KafkaOffsetBackingStore'.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|offsetStoragePartitions ( int offsetStoragePartitions)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|offsetStoragePartitions
parameter_list|(
name|int
name|offsetStoragePartitions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStoragePartitions"
argument_list|,
name|offsetStoragePartitions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of partitions used when creating the offset storage topic.          * Required when offset.storage is set to the 'KafkaOffsetBackingStore'.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|offsetStoragePartitions ( String offsetStoragePartitions)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|offsetStoragePartitions
parameter_list|(
name|String
name|offsetStoragePartitions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStoragePartitions"
argument_list|,
name|offsetStoragePartitions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Replication factor used when creating the offset storage topic.          * Required when offset.storage is set to the KafkaOffsetBackingStore.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|offsetStorageReplicationFactor ( int offsetStorageReplicationFactor)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|offsetStorageReplicationFactor
parameter_list|(
name|int
name|offsetStorageReplicationFactor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorageReplicationFactor"
argument_list|,
name|offsetStorageReplicationFactor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Replication factor used when creating the offset storage topic.          * Required when offset.storage is set to the KafkaOffsetBackingStore.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|offsetStorageReplicationFactor ( String offsetStorageReplicationFactor)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|offsetStorageReplicationFactor
parameter_list|(
name|String
name|offsetStorageReplicationFactor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorageReplicationFactor"
argument_list|,
name|offsetStorageReplicationFactor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the Kafka topic where offsets are to be stored. Required          * when offset.storage is set to the KafkaOffsetBackingStore.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|offsetStorageTopic ( String offsetStorageTopic)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|offsetStorageTopic
parameter_list|(
name|String
name|offsetStorageTopic
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorageTopic"
argument_list|,
name|offsetStorageTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Description is not available here, please check Debezium website for          * corresponding key 'column.blacklist' description.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: sqlserver          */
DECL|method|columnBlacklist ( String columnBlacklist)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|columnBlacklist
parameter_list|(
name|String
name|columnBlacklist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"columnBlacklist"
argument_list|,
name|columnBlacklist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the database the connector should be monitoring. When          * working with a multi-tenant set-up, must be set to the CDB name.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: sqlserver          */
DECL|method|databaseDbname ( String databaseDbname)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|databaseDbname
parameter_list|(
name|String
name|databaseDbname
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseDbname"
argument_list|,
name|databaseDbname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the DatabaseHistory class that should be used to store          * and recover database schema changes. The configuration properties for          * the history are prefixed with the 'database.history.' string.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: sqlserver          */
DECL|method|databaseHistory ( String databaseHistory)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|databaseHistory
parameter_list|(
name|String
name|databaseHistory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistory"
argument_list|,
name|databaseHistory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The path to the file that will be used to record the database          * history.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: sqlserver          */
DECL|method|databaseHistoryFileFilename ( String databaseHistoryFileFilename)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|databaseHistoryFileFilename
parameter_list|(
name|String
name|databaseHistoryFileFilename
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryFileFilename"
argument_list|,
name|databaseHistoryFileFilename
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of host/port pairs that the connector will use for          * establishing the initial connection to the Kafka cluster for          * retrieving database schema history previously stored by the          * connector. This should point to the same Kafka cluster used by the          * Kafka Connect process.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: sqlserver          */
DECL|method|databaseHistoryKafkaBootstrapServers ( String databaseHistoryKafkaBootstrapServers)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|databaseHistoryKafkaBootstrapServers
parameter_list|(
name|String
name|databaseHistoryKafkaBootstrapServers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryKafkaBootstrapServers"
argument_list|,
name|databaseHistoryKafkaBootstrapServers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of attempts in a row that no data are returned from Kafka          * before recover completes. The maximum amount of time to wait after          * receiving no data is (recovery.attempts) x          * (recovery.poll.interval.ms).          *           * The option is a:<code>int</code> type.          *           * Group: sqlserver          */
DECL|method|databaseHistoryKafkaRecoveryAttempts ( int databaseHistoryKafkaRecoveryAttempts)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|databaseHistoryKafkaRecoveryAttempts
parameter_list|(
name|int
name|databaseHistoryKafkaRecoveryAttempts
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryKafkaRecoveryAttempts"
argument_list|,
name|databaseHistoryKafkaRecoveryAttempts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of attempts in a row that no data are returned from Kafka          * before recover completes. The maximum amount of time to wait after          * receiving no data is (recovery.attempts) x          * (recovery.poll.interval.ms).          *           * The option will be converted to a<code>int</code> type.          *           * Group: sqlserver          */
DECL|method|databaseHistoryKafkaRecoveryAttempts ( String databaseHistoryKafkaRecoveryAttempts)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|databaseHistoryKafkaRecoveryAttempts
parameter_list|(
name|String
name|databaseHistoryKafkaRecoveryAttempts
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryKafkaRecoveryAttempts"
argument_list|,
name|databaseHistoryKafkaRecoveryAttempts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of milliseconds to wait while polling for persisted data          * during recovery.          *           * The option is a:<code>int</code> type.          *           * Group: sqlserver          */
DECL|method|databaseHistoryKafkaRecoveryPollIntervalMs ( int databaseHistoryKafkaRecoveryPollIntervalMs)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|databaseHistoryKafkaRecoveryPollIntervalMs
parameter_list|(
name|int
name|databaseHistoryKafkaRecoveryPollIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryKafkaRecoveryPollIntervalMs"
argument_list|,
name|databaseHistoryKafkaRecoveryPollIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of milliseconds to wait while polling for persisted data          * during recovery.          *           * The option will be converted to a<code>int</code> type.          *           * Group: sqlserver          */
DECL|method|databaseHistoryKafkaRecoveryPollIntervalMs ( String databaseHistoryKafkaRecoveryPollIntervalMs)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|databaseHistoryKafkaRecoveryPollIntervalMs
parameter_list|(
name|String
name|databaseHistoryKafkaRecoveryPollIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryKafkaRecoveryPollIntervalMs"
argument_list|,
name|databaseHistoryKafkaRecoveryPollIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the topic for the database schema history.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: sqlserver          */
DECL|method|databaseHistoryKafkaTopic ( String databaseHistoryKafkaTopic)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|databaseHistoryKafkaTopic
parameter_list|(
name|String
name|databaseHistoryKafkaTopic
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryKafkaTopic"
argument_list|,
name|databaseHistoryKafkaTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Resolvable hostname or IP address of the SQL Server database server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: sqlserver          */
DECL|method|databaseHostname ( String databaseHostname)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|databaseHostname
parameter_list|(
name|String
name|databaseHostname
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHostname"
argument_list|,
name|databaseHostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password of the SQL Server database user to be used when connecting          * to the database.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: sqlserver          */
DECL|method|databasePassword ( String databasePassword)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|databasePassword
parameter_list|(
name|String
name|databasePassword
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databasePassword"
argument_list|,
name|databasePassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port of the SQL Server database server.          *           * The option is a:<code>int</code> type.          *           * Group: sqlserver          */
DECL|method|databasePort (int databasePort)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|databasePort
parameter_list|(
name|int
name|databasePort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databasePort"
argument_list|,
name|databasePort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port of the SQL Server database server.          *           * The option will be converted to a<code>int</code> type.          *           * Group: sqlserver          */
DECL|method|databasePort ( String databasePort)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|databasePort
parameter_list|(
name|String
name|databasePort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databasePort"
argument_list|,
name|databasePort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Unique name that identifies the database server and all recorded          * offsets, and that is used as a prefix for all schemas and topics.          * Each distinct installation should have a separate namespace and be          * monitored by at most one Debezium connector.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: sqlserver          */
DECL|method|databaseServerName ( String databaseServerName)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|databaseServerName
parameter_list|(
name|String
name|databaseServerName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseServerName"
argument_list|,
name|databaseServerName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of the SQL Server database user to be used when connecting to          * the database.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: sqlserver          */
DECL|method|databaseUser ( String databaseUser)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|databaseUser
parameter_list|(
name|String
name|databaseUser
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseUser"
argument_list|,
name|databaseUser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify how DECIMAL and NUMERIC columns should be represented in          * change events, including:'precise' (the default) uses          * java.math.BigDecimal to represent values, which are encoded in the          * change events using a binary representation and Kafka Connect's          * 'org.apache.kafka.connect.data.Decimal' type; 'string' uses string to          * represent values; 'double' represents values using Java's 'double',          * which may not offer the precision but will be far easier to use in          * consumers.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: sqlserver          */
DECL|method|decimalHandlingMode ( String decimalHandlingMode)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|decimalHandlingMode
parameter_list|(
name|String
name|decimalHandlingMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"decimalHandlingMode"
argument_list|,
name|decimalHandlingMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Length of an interval in milli-seconds in in which the connector          * periodically sends heartbeat messages to a heartbeat topic. Use 0 to          * disable heartbeat messages. Disabled by default.          *           * The option is a:<code>int</code> type.          *           * Group: sqlserver          */
DECL|method|heartbeatIntervalMs ( int heartbeatIntervalMs)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|heartbeatIntervalMs
parameter_list|(
name|int
name|heartbeatIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"heartbeatIntervalMs"
argument_list|,
name|heartbeatIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Length of an interval in milli-seconds in in which the connector          * periodically sends heartbeat messages to a heartbeat topic. Use 0 to          * disable heartbeat messages. Disabled by default.          *           * The option will be converted to a<code>int</code> type.          *           * Group: sqlserver          */
DECL|method|heartbeatIntervalMs ( String heartbeatIntervalMs)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|heartbeatIntervalMs
parameter_list|(
name|String
name|heartbeatIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"heartbeatIntervalMs"
argument_list|,
name|heartbeatIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The prefix that is used to name heartbeat topics.Defaults to          * __debezium-heartbeat.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: sqlserver          */
DECL|method|heartbeatTopicsPrefix ( String heartbeatTopicsPrefix)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|heartbeatTopicsPrefix
parameter_list|(
name|String
name|heartbeatTopicsPrefix
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"heartbeatTopicsPrefix"
argument_list|,
name|heartbeatTopicsPrefix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of each batch of source records. Defaults to 2048.          *           * The option is a:<code>int</code> type.          *           * Group: sqlserver          */
DECL|method|maxBatchSize (int maxBatchSize)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|maxBatchSize
parameter_list|(
name|int
name|maxBatchSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxBatchSize"
argument_list|,
name|maxBatchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of each batch of source records. Defaults to 2048.          *           * The option will be converted to a<code>int</code> type.          *           * Group: sqlserver          */
DECL|method|maxBatchSize ( String maxBatchSize)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|maxBatchSize
parameter_list|(
name|String
name|maxBatchSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxBatchSize"
argument_list|,
name|maxBatchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of the queue for change events read from the database          * log but not yet recorded or forwarded. Defaults to 8192, and should          * always be larger than the maximum batch size.          *           * The option is a:<code>int</code> type.          *           * Group: sqlserver          */
DECL|method|maxQueueSize (int maxQueueSize)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|maxQueueSize
parameter_list|(
name|int
name|maxQueueSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxQueueSize"
argument_list|,
name|maxQueueSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of the queue for change events read from the database          * log but not yet recorded or forwarded. Defaults to 8192, and should          * always be larger than the maximum batch size.          *           * The option will be converted to a<code>int</code> type.          *           * Group: sqlserver          */
DECL|method|maxQueueSize ( String maxQueueSize)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|maxQueueSize
parameter_list|(
name|String
name|maxQueueSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxQueueSize"
argument_list|,
name|maxQueueSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A semicolon-separated list of expressions that match fully-qualified          * tables and column(s) to be used as message key. Each expression must          * match the pattern ':',where the table names could be defined as          * (DB_NAME.TABLE_NAME) or (SCHEMA_NAME.TABLE_NAME), depending on the          * specific connector,and the key columns are a comma-separated list of          * columns representing the custom key. For any table without an          * explicit key configuration the table's primary key column(s) will be          * used as message key.Example:          * dbserver1.inventory.orderlines:orderId,orderLineId;dbserver1.inventory.orders:id.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: sqlserver          */
DECL|method|messageKeyColumns ( String messageKeyColumns)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|messageKeyColumns
parameter_list|(
name|String
name|messageKeyColumns
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageKeyColumns"
argument_list|,
name|messageKeyColumns
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Frequency in milliseconds to wait for new change events to appear          * after receiving no events. Defaults to 500ms.          *           * The option is a:<code>long</code> type.          *           * Group: sqlserver          */
DECL|method|pollIntervalMs ( long pollIntervalMs)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|pollIntervalMs
parameter_list|(
name|long
name|pollIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollIntervalMs"
argument_list|,
name|pollIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Frequency in milliseconds to wait for new change events to appear          * after receiving no events. Defaults to 500ms.          *           * The option will be converted to a<code>long</code> type.          *           * Group: sqlserver          */
DECL|method|pollIntervalMs ( String pollIntervalMs)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|pollIntervalMs
parameter_list|(
name|String
name|pollIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollIntervalMs"
argument_list|,
name|pollIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of milliseconds to delay before a snapshot will begin.          *           * The option is a:<code>long</code> type.          *           * Group: sqlserver          */
DECL|method|snapshotDelayMs ( long snapshotDelayMs)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|snapshotDelayMs
parameter_list|(
name|long
name|snapshotDelayMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotDelayMs"
argument_list|,
name|snapshotDelayMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of milliseconds to delay before a snapshot will begin.          *           * The option will be converted to a<code>long</code> type.          *           * Group: sqlserver          */
DECL|method|snapshotDelayMs ( String snapshotDelayMs)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|snapshotDelayMs
parameter_list|(
name|String
name|snapshotDelayMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotDelayMs"
argument_list|,
name|snapshotDelayMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of records that should be loaded into memory while          * performing a snapshot.          *           * The option is a:<code>int</code> type.          *           * Group: sqlserver          */
DECL|method|snapshotFetchSize ( int snapshotFetchSize)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|snapshotFetchSize
parameter_list|(
name|int
name|snapshotFetchSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotFetchSize"
argument_list|,
name|snapshotFetchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of records that should be loaded into memory while          * performing a snapshot.          *           * The option will be converted to a<code>int</code> type.          *           * Group: sqlserver          */
DECL|method|snapshotFetchSize ( String snapshotFetchSize)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|snapshotFetchSize
parameter_list|(
name|String
name|snapshotFetchSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotFetchSize"
argument_list|,
name|snapshotFetchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of millis to wait for table locks at the beginning          * of a snapshot. If locks cannot be acquired in this time frame, the          * snapshot will be aborted. Defaults to 10 seconds.          *           * The option is a:<code>long</code> type.          *           * Group: sqlserver          */
DECL|method|snapshotLockTimeoutMs ( long snapshotLockTimeoutMs)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|snapshotLockTimeoutMs
parameter_list|(
name|long
name|snapshotLockTimeoutMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotLockTimeoutMs"
argument_list|,
name|snapshotLockTimeoutMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of millis to wait for table locks at the beginning          * of a snapshot. If locks cannot be acquired in this time frame, the          * snapshot will be aborted. Defaults to 10 seconds.          *           * The option will be converted to a<code>long</code> type.          *           * Group: sqlserver          */
DECL|method|snapshotLockTimeoutMs ( String snapshotLockTimeoutMs)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|snapshotLockTimeoutMs
parameter_list|(
name|String
name|snapshotLockTimeoutMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotLockTimeoutMs"
argument_list|,
name|snapshotLockTimeoutMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The criteria for running a snapshot upon startup of the connector.          * Options include: 'initial' (the default) to specify the connector          * should run a snapshot only when no offsets are available for the          * logical server name; 'initial_schema_only' to specify the connector          * should run a snapshot of the schema when no offsets are available for          * the logical server name.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: sqlserver          */
DECL|method|snapshotMode ( String snapshotMode)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|snapshotMode
parameter_list|(
name|String
name|snapshotMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotMode"
argument_list|,
name|snapshotMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This property contains a comma-separated list of fully-qualified          * tables (DB_NAME.TABLE_NAME) or (SCHEMA_NAME.TABLE_NAME), depending on          * thespecific connectors . Select statements for the individual tables          * are specified in further configuration properties, one for each          * table, identified by the id          * 'snapshot.select.statement.overrides.DB_NAME.TABLE_NAME' or          * 'snapshot.select.statement.overrides.SCHEMA_NAME.TABLE_NAME',          * respectively. The value of those properties is the select statement          * to use when retrieving data from the specific table during          * snapshotting. A possible use case for large append-only tables is          * setting a specific point where to start (resume) snapshotting, in          * case a previous snapshotting was interrupted.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: sqlserver          */
DECL|method|snapshotSelectStatementOverrides ( String snapshotSelectStatementOverrides)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|snapshotSelectStatementOverrides
parameter_list|(
name|String
name|snapshotSelectStatementOverrides
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotSelectStatementOverrides"
argument_list|,
name|snapshotSelectStatementOverrides
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A version of the format of the publicly visible source part in the          * message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: sqlserver          */
DECL|method|sourceStructVersion ( String sourceStructVersion)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|sourceStructVersion
parameter_list|(
name|String
name|sourceStructVersion
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sourceStructVersion"
argument_list|,
name|sourceStructVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Description is not available here, please check Debezium website for          * corresponding key 'table.blacklist' description.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: sqlserver          */
DECL|method|tableBlacklist ( String tableBlacklist)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|tableBlacklist
parameter_list|(
name|String
name|tableBlacklist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tableBlacklist"
argument_list|,
name|tableBlacklist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Flag specifying whether built-in tables should be ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: sqlserver          */
DECL|method|tableIgnoreBuiltin ( boolean tableIgnoreBuiltin)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|tableIgnoreBuiltin
parameter_list|(
name|boolean
name|tableIgnoreBuiltin
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tableIgnoreBuiltin"
argument_list|,
name|tableIgnoreBuiltin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Flag specifying whether built-in tables should be ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: sqlserver          */
DECL|method|tableIgnoreBuiltin ( String tableIgnoreBuiltin)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|tableIgnoreBuiltin
parameter_list|(
name|String
name|tableIgnoreBuiltin
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tableIgnoreBuiltin"
argument_list|,
name|tableIgnoreBuiltin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The tables for which changes are to be captured.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: sqlserver          */
DECL|method|tableWhitelist ( String tableWhitelist)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|tableWhitelist
parameter_list|(
name|String
name|tableWhitelist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tableWhitelist"
argument_list|,
name|tableWhitelist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time, date, and timestamps can be represented with different kinds of          * precisions, including:'adaptive' (the default) bases the precision of          * time, date, and timestamp values on the database column's precision;          * 'adaptive_time_microseconds' like 'adaptive' mode, but TIME fields          * always use microseconds precision;'connect' always represents time,          * date, and timestamp values using Kafka Connect's built-in          * representations for Time, Date, and Timestamp, which uses millisecond          * precision regardless of the database columns' precision .          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: sqlserver          */
DECL|method|timePrecisionMode ( String timePrecisionMode)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|timePrecisionMode
parameter_list|(
name|String
name|timePrecisionMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timePrecisionMode"
argument_list|,
name|timePrecisionMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Debezium SQL Server Connector      * component.      */
DECL|interface|AdvancedDebeziumSqlserverEndpointBuilder
specifier|public
interface|interface
name|AdvancedDebeziumSqlserverEndpointBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|DebeziumSqlserverEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedDebeziumSqlserverEndpointBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedDebeziumSqlserverEndpointBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedDebeziumSqlserverEndpointBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedDebeziumSqlserverEndpointBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedDebeziumSqlserverEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedDebeziumSqlserverEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedDebeziumSqlserverEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedDebeziumSqlserverEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Debezium SQL Server Connector (camel-debezium-sqlserver)      * Represents a Debezium SQL Server endpoint which is used to capture      * changes in SQL Server database so that that applications can see those      * changes and respond to them.      *       * Category: database,sql,sqlserver      * Since: 3.0      * Maven coordinates: org.apache.camel:camel-debezium-sqlserver      *       * Syntax:<code>debezium-sqlserver:name</code>      *       * Path parameter: name (required)      * Unique name for the connector. Attempting to register again with the same      * name will fail.      */
DECL|method|debeziumSqlserver (String path)
specifier|default
name|DebeziumSqlserverEndpointBuilder
name|debeziumSqlserver
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|DebeziumSqlserverEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|DebeziumSqlserverEndpointBuilder
implements|,
name|AdvancedDebeziumSqlserverEndpointBuilder
block|{
specifier|public
name|DebeziumSqlserverEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"debezium-sqlserver"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DebeziumSqlserverEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

