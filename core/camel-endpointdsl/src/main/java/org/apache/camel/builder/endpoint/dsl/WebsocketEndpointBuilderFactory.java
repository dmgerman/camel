begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The websocket component provides websocket endpoints with Jetty for  * communicating with clients using websocket.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|WebsocketEndpointBuilderFactory
specifier|public
interface|interface
name|WebsocketEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Jetty Websocket component.      */
DECL|interface|WebsocketEndpointConsumerBuilder
specifier|public
interface|interface
name|WebsocketEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedWebsocketEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedWebsocketEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Can be used to set the size in bytes that the websocket created by          * the websocketServlet may be accept before closing. (Default is -1 -          * or unlimited).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|maxBinaryMessageSize ( Integer maxBinaryMessageSize)
specifier|default
name|WebsocketEndpointConsumerBuilder
name|maxBinaryMessageSize
parameter_list|(
name|Integer
name|maxBinaryMessageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxBinaryMessageSize"
argument_list|,
name|maxBinaryMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Can be used to set the size in bytes that the websocket created by          * the websocketServlet may be accept before closing. (Default is -1 -          * or unlimited).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|maxBinaryMessageSize ( String maxBinaryMessageSize)
specifier|default
name|WebsocketEndpointConsumerBuilder
name|maxBinaryMessageSize
parameter_list|(
name|String
name|maxBinaryMessageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxBinaryMessageSize"
argument_list|,
name|maxBinaryMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|WebsocketEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|WebsocketEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to enable session support which enables HttpSession for each          * http request.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sessionSupport ( boolean sessionSupport)
specifier|default
name|WebsocketEndpointConsumerBuilder
name|sessionSupport
parameter_list|(
name|boolean
name|sessionSupport
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionSupport"
argument_list|,
name|sessionSupport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to enable session support which enables HttpSession for each          * http request.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sessionSupport ( String sessionSupport)
specifier|default
name|WebsocketEndpointConsumerBuilder
name|sessionSupport
parameter_list|(
name|String
name|sessionSupport
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionSupport"
argument_list|,
name|sessionSupport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a resource path for static resources (such as .html files etc).          * The resources can be loaded from classpath, if you prefix with          * classpath:, otherwise the resources is loaded from file system or          * from JAR files. For example to load from root classpath use          * classpath:., or classpath:WEB-INF/static If not configured (eg null)          * then no static resource is in use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|staticResources ( String staticResources)
specifier|default
name|WebsocketEndpointConsumerBuilder
name|staticResources
parameter_list|(
name|String
name|staticResources
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"staticResources"
argument_list|,
name|staticResources
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CORS allowed origins. Use to allow all.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: cors          */
DECL|method|allowedOrigins ( String allowedOrigins)
specifier|default
name|WebsocketEndpointConsumerBuilder
name|allowedOrigins
parameter_list|(
name|String
name|allowedOrigins
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowedOrigins"
argument_list|,
name|allowedOrigins
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to enable CORS.          *           * The option is a:<code>boolean</code> type.          *           * Group: cors          */
DECL|method|crossOriginFilterOn ( boolean crossOriginFilterOn)
specifier|default
name|WebsocketEndpointConsumerBuilder
name|crossOriginFilterOn
parameter_list|(
name|boolean
name|crossOriginFilterOn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"crossOriginFilterOn"
argument_list|,
name|crossOriginFilterOn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to enable CORS.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: cors          */
DECL|method|crossOriginFilterOn ( String crossOriginFilterOn)
specifier|default
name|WebsocketEndpointConsumerBuilder
name|crossOriginFilterOn
parameter_list|(
name|String
name|crossOriginFilterOn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"crossOriginFilterOn"
argument_list|,
name|crossOriginFilterOn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Context path for filtering CORS.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: cors          */
DECL|method|filterPath (String filterPath)
specifier|default
name|WebsocketEndpointConsumerBuilder
name|filterPath
parameter_list|(
name|String
name|filterPath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filterPath"
argument_list|,
name|filterPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is true, Jetty JMX support will be enabled for this          * endpoint. See Jetty JMX support for more details.          *           * The option is a:<code>boolean</code> type.          *           * Group: monitoring          */
DECL|method|enableJmx (boolean enableJmx)
specifier|default
name|WebsocketEndpointConsumerBuilder
name|enableJmx
parameter_list|(
name|boolean
name|enableJmx
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enableJmx"
argument_list|,
name|enableJmx
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is true, Jetty JMX support will be enabled for this          * endpoint. See Jetty JMX support for more details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: monitoring          */
DECL|method|enableJmx (String enableJmx)
specifier|default
name|WebsocketEndpointConsumerBuilder
name|enableJmx
parameter_list|(
name|String
name|enableJmx
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enableJmx"
argument_list|,
name|enableJmx
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|WebsocketEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|WebsocketEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Jetty Websocket      * component.      */
DECL|interface|AdvancedWebsocketEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedWebsocketEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|WebsocketEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|WebsocketEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedWebsocketEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedWebsocketEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedWebsocketEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedWebsocketEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedWebsocketEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedWebsocketEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the buffer size of the websocketServlet, which is also the max          * frame byte size (default 8192).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|bufferSize ( Integer bufferSize)
specifier|default
name|AdvancedWebsocketEndpointConsumerBuilder
name|bufferSize
parameter_list|(
name|Integer
name|bufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bufferSize"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the buffer size of the websocketServlet, which is also the max          * frame byte size (default 8192).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|bufferSize ( String bufferSize)
specifier|default
name|AdvancedWebsocketEndpointConsumerBuilder
name|bufferSize
parameter_list|(
name|String
name|bufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bufferSize"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the time in ms that the websocket created by the websocketServlet          * may be idle before closing. (default is 300000).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|maxIdleTime ( Integer maxIdleTime)
specifier|default
name|AdvancedWebsocketEndpointConsumerBuilder
name|maxIdleTime
parameter_list|(
name|Integer
name|maxIdleTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxIdleTime"
argument_list|,
name|maxIdleTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the time in ms that the websocket created by the websocketServlet          * may be idle before closing. (default is 300000).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|maxIdleTime ( String maxIdleTime)
specifier|default
name|AdvancedWebsocketEndpointConsumerBuilder
name|maxIdleTime
parameter_list|(
name|String
name|maxIdleTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxIdleTime"
argument_list|,
name|maxIdleTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Can be used to set the size in characters that the websocket created          * by the websocketServlet may be accept before closing.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|maxTextMessageSize ( Integer maxTextMessageSize)
specifier|default
name|AdvancedWebsocketEndpointConsumerBuilder
name|maxTextMessageSize
parameter_list|(
name|Integer
name|maxTextMessageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxTextMessageSize"
argument_list|,
name|maxTextMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Can be used to set the size in characters that the websocket created          * by the websocketServlet may be accept before closing.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|maxTextMessageSize ( String maxTextMessageSize)
specifier|default
name|AdvancedWebsocketEndpointConsumerBuilder
name|maxTextMessageSize
parameter_list|(
name|String
name|maxTextMessageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxTextMessageSize"
argument_list|,
name|maxTextMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Can be used to set the minimum protocol version accepted for the          * websocketServlet. (Default 13 - the RFC6455 version).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|minVersion ( Integer minVersion)
specifier|default
name|AdvancedWebsocketEndpointConsumerBuilder
name|minVersion
parameter_list|(
name|Integer
name|minVersion
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"minVersion"
argument_list|,
name|minVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Can be used to set the minimum protocol version accepted for the          * websocketServlet. (Default 13 - the RFC6455 version).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|minVersion ( String minVersion)
specifier|default
name|AdvancedWebsocketEndpointConsumerBuilder
name|minVersion
parameter_list|(
name|String
name|minVersion
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"minVersion"
argument_list|,
name|minVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedWebsocketEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedWebsocketEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Jetty Websocket component.      */
DECL|interface|WebsocketEndpointProducerBuilder
specifier|public
interface|interface
name|WebsocketEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedWebsocketEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedWebsocketEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Can be used to set the size in bytes that the websocket created by          * the websocketServlet may be accept before closing. (Default is -1 -          * or unlimited).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|maxBinaryMessageSize ( Integer maxBinaryMessageSize)
specifier|default
name|WebsocketEndpointProducerBuilder
name|maxBinaryMessageSize
parameter_list|(
name|Integer
name|maxBinaryMessageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxBinaryMessageSize"
argument_list|,
name|maxBinaryMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Can be used to set the size in bytes that the websocket created by          * the websocketServlet may be accept before closing. (Default is -1 -          * or unlimited).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|maxBinaryMessageSize ( String maxBinaryMessageSize)
specifier|default
name|WebsocketEndpointProducerBuilder
name|maxBinaryMessageSize
parameter_list|(
name|String
name|maxBinaryMessageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxBinaryMessageSize"
argument_list|,
name|maxBinaryMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|WebsocketEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|WebsocketEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout in millis when sending to a websocket channel. The default          * timeout is 30000 (30 seconds).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: producer          */
DECL|method|sendTimeout (Integer sendTimeout)
specifier|default
name|WebsocketEndpointProducerBuilder
name|sendTimeout
parameter_list|(
name|Integer
name|sendTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendTimeout"
argument_list|,
name|sendTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout in millis when sending to a websocket channel. The default          * timeout is 30000 (30 seconds).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: producer          */
DECL|method|sendTimeout (String sendTimeout)
specifier|default
name|WebsocketEndpointProducerBuilder
name|sendTimeout
parameter_list|(
name|String
name|sendTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendTimeout"
argument_list|,
name|sendTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To send to all websocket subscribers. Can be used to configure on          * endpoint level, instead of having to use the          * WebsocketConstants.SEND_TO_ALL header on the message.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: producer          */
DECL|method|sendToAll (Boolean sendToAll)
specifier|default
name|WebsocketEndpointProducerBuilder
name|sendToAll
parameter_list|(
name|Boolean
name|sendToAll
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendToAll"
argument_list|,
name|sendToAll
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To send to all websocket subscribers. Can be used to configure on          * endpoint level, instead of having to use the          * WebsocketConstants.SEND_TO_ALL header on the message.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: producer          */
DECL|method|sendToAll (String sendToAll)
specifier|default
name|WebsocketEndpointProducerBuilder
name|sendToAll
parameter_list|(
name|String
name|sendToAll
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendToAll"
argument_list|,
name|sendToAll
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CORS allowed origins. Use to allow all.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: cors          */
DECL|method|allowedOrigins ( String allowedOrigins)
specifier|default
name|WebsocketEndpointProducerBuilder
name|allowedOrigins
parameter_list|(
name|String
name|allowedOrigins
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowedOrigins"
argument_list|,
name|allowedOrigins
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to enable CORS.          *           * The option is a:<code>boolean</code> type.          *           * Group: cors          */
DECL|method|crossOriginFilterOn ( boolean crossOriginFilterOn)
specifier|default
name|WebsocketEndpointProducerBuilder
name|crossOriginFilterOn
parameter_list|(
name|boolean
name|crossOriginFilterOn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"crossOriginFilterOn"
argument_list|,
name|crossOriginFilterOn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to enable CORS.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: cors          */
DECL|method|crossOriginFilterOn ( String crossOriginFilterOn)
specifier|default
name|WebsocketEndpointProducerBuilder
name|crossOriginFilterOn
parameter_list|(
name|String
name|crossOriginFilterOn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"crossOriginFilterOn"
argument_list|,
name|crossOriginFilterOn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Context path for filtering CORS.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: cors          */
DECL|method|filterPath (String filterPath)
specifier|default
name|WebsocketEndpointProducerBuilder
name|filterPath
parameter_list|(
name|String
name|filterPath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filterPath"
argument_list|,
name|filterPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is true, Jetty JMX support will be enabled for this          * endpoint. See Jetty JMX support for more details.          *           * The option is a:<code>boolean</code> type.          *           * Group: monitoring          */
DECL|method|enableJmx (boolean enableJmx)
specifier|default
name|WebsocketEndpointProducerBuilder
name|enableJmx
parameter_list|(
name|boolean
name|enableJmx
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enableJmx"
argument_list|,
name|enableJmx
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is true, Jetty JMX support will be enabled for this          * endpoint. See Jetty JMX support for more details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: monitoring          */
DECL|method|enableJmx (String enableJmx)
specifier|default
name|WebsocketEndpointProducerBuilder
name|enableJmx
parameter_list|(
name|String
name|enableJmx
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enableJmx"
argument_list|,
name|enableJmx
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|WebsocketEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|WebsocketEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Jetty Websocket      * component.      */
DECL|interface|AdvancedWebsocketEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedWebsocketEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|WebsocketEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|WebsocketEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedWebsocketEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedWebsocketEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the buffer size of the websocketServlet, which is also the max          * frame byte size (default 8192).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|bufferSize ( Integer bufferSize)
specifier|default
name|AdvancedWebsocketEndpointProducerBuilder
name|bufferSize
parameter_list|(
name|Integer
name|bufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bufferSize"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the buffer size of the websocketServlet, which is also the max          * frame byte size (default 8192).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|bufferSize ( String bufferSize)
specifier|default
name|AdvancedWebsocketEndpointProducerBuilder
name|bufferSize
parameter_list|(
name|String
name|bufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bufferSize"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the time in ms that the websocket created by the websocketServlet          * may be idle before closing. (default is 300000).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|maxIdleTime ( Integer maxIdleTime)
specifier|default
name|AdvancedWebsocketEndpointProducerBuilder
name|maxIdleTime
parameter_list|(
name|Integer
name|maxIdleTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxIdleTime"
argument_list|,
name|maxIdleTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the time in ms that the websocket created by the websocketServlet          * may be idle before closing. (default is 300000).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|maxIdleTime ( String maxIdleTime)
specifier|default
name|AdvancedWebsocketEndpointProducerBuilder
name|maxIdleTime
parameter_list|(
name|String
name|maxIdleTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxIdleTime"
argument_list|,
name|maxIdleTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Can be used to set the size in characters that the websocket created          * by the websocketServlet may be accept before closing.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|maxTextMessageSize ( Integer maxTextMessageSize)
specifier|default
name|AdvancedWebsocketEndpointProducerBuilder
name|maxTextMessageSize
parameter_list|(
name|Integer
name|maxTextMessageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxTextMessageSize"
argument_list|,
name|maxTextMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Can be used to set the size in characters that the websocket created          * by the websocketServlet may be accept before closing.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|maxTextMessageSize ( String maxTextMessageSize)
specifier|default
name|AdvancedWebsocketEndpointProducerBuilder
name|maxTextMessageSize
parameter_list|(
name|String
name|maxTextMessageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxTextMessageSize"
argument_list|,
name|maxTextMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Can be used to set the minimum protocol version accepted for the          * websocketServlet. (Default 13 - the RFC6455 version).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|minVersion ( Integer minVersion)
specifier|default
name|AdvancedWebsocketEndpointProducerBuilder
name|minVersion
parameter_list|(
name|Integer
name|minVersion
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"minVersion"
argument_list|,
name|minVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Can be used to set the minimum protocol version accepted for the          * websocketServlet. (Default 13 - the RFC6455 version).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|minVersion ( String minVersion)
specifier|default
name|AdvancedWebsocketEndpointProducerBuilder
name|minVersion
parameter_list|(
name|String
name|minVersion
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"minVersion"
argument_list|,
name|minVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedWebsocketEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedWebsocketEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Jetty Websocket component.      */
DECL|interface|WebsocketEndpointBuilder
specifier|public
interface|interface
name|WebsocketEndpointBuilder
extends|extends
name|WebsocketEndpointConsumerBuilder
extends|,
name|WebsocketEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedWebsocketEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedWebsocketEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Can be used to set the size in bytes that the websocket created by          * the websocketServlet may be accept before closing. (Default is -1 -          * or unlimited).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|maxBinaryMessageSize ( Integer maxBinaryMessageSize)
specifier|default
name|WebsocketEndpointBuilder
name|maxBinaryMessageSize
parameter_list|(
name|Integer
name|maxBinaryMessageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxBinaryMessageSize"
argument_list|,
name|maxBinaryMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Can be used to set the size in bytes that the websocket created by          * the websocketServlet may be accept before closing. (Default is -1 -          * or unlimited).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|maxBinaryMessageSize ( String maxBinaryMessageSize)
specifier|default
name|WebsocketEndpointBuilder
name|maxBinaryMessageSize
parameter_list|(
name|String
name|maxBinaryMessageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxBinaryMessageSize"
argument_list|,
name|maxBinaryMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CORS allowed origins. Use to allow all.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: cors          */
DECL|method|allowedOrigins (String allowedOrigins)
specifier|default
name|WebsocketEndpointBuilder
name|allowedOrigins
parameter_list|(
name|String
name|allowedOrigins
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowedOrigins"
argument_list|,
name|allowedOrigins
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to enable CORS.          *           * The option is a:<code>boolean</code> type.          *           * Group: cors          */
DECL|method|crossOriginFilterOn ( boolean crossOriginFilterOn)
specifier|default
name|WebsocketEndpointBuilder
name|crossOriginFilterOn
parameter_list|(
name|boolean
name|crossOriginFilterOn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"crossOriginFilterOn"
argument_list|,
name|crossOriginFilterOn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to enable CORS.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: cors          */
DECL|method|crossOriginFilterOn ( String crossOriginFilterOn)
specifier|default
name|WebsocketEndpointBuilder
name|crossOriginFilterOn
parameter_list|(
name|String
name|crossOriginFilterOn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"crossOriginFilterOn"
argument_list|,
name|crossOriginFilterOn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Context path for filtering CORS.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: cors          */
DECL|method|filterPath (String filterPath)
specifier|default
name|WebsocketEndpointBuilder
name|filterPath
parameter_list|(
name|String
name|filterPath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filterPath"
argument_list|,
name|filterPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is true, Jetty JMX support will be enabled for this          * endpoint. See Jetty JMX support for more details.          *           * The option is a:<code>boolean</code> type.          *           * Group: monitoring          */
DECL|method|enableJmx (boolean enableJmx)
specifier|default
name|WebsocketEndpointBuilder
name|enableJmx
parameter_list|(
name|boolean
name|enableJmx
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enableJmx"
argument_list|,
name|enableJmx
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is true, Jetty JMX support will be enabled for this          * endpoint. See Jetty JMX support for more details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: monitoring          */
DECL|method|enableJmx (String enableJmx)
specifier|default
name|WebsocketEndpointBuilder
name|enableJmx
parameter_list|(
name|String
name|enableJmx
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enableJmx"
argument_list|,
name|enableJmx
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|WebsocketEndpointBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|WebsocketEndpointBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Jetty Websocket component.      */
DECL|interface|AdvancedWebsocketEndpointBuilder
specifier|public
interface|interface
name|AdvancedWebsocketEndpointBuilder
extends|extends
name|AdvancedWebsocketEndpointConsumerBuilder
extends|,
name|AdvancedWebsocketEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|WebsocketEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|WebsocketEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedWebsocketEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedWebsocketEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the buffer size of the websocketServlet, which is also the max          * frame byte size (default 8192).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|bufferSize (Integer bufferSize)
specifier|default
name|AdvancedWebsocketEndpointBuilder
name|bufferSize
parameter_list|(
name|Integer
name|bufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bufferSize"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the buffer size of the websocketServlet, which is also the max          * frame byte size (default 8192).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|bufferSize (String bufferSize)
specifier|default
name|AdvancedWebsocketEndpointBuilder
name|bufferSize
parameter_list|(
name|String
name|bufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bufferSize"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the time in ms that the websocket created by the websocketServlet          * may be idle before closing. (default is 300000).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|maxIdleTime (Integer maxIdleTime)
specifier|default
name|AdvancedWebsocketEndpointBuilder
name|maxIdleTime
parameter_list|(
name|Integer
name|maxIdleTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxIdleTime"
argument_list|,
name|maxIdleTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the time in ms that the websocket created by the websocketServlet          * may be idle before closing. (default is 300000).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|maxIdleTime (String maxIdleTime)
specifier|default
name|AdvancedWebsocketEndpointBuilder
name|maxIdleTime
parameter_list|(
name|String
name|maxIdleTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxIdleTime"
argument_list|,
name|maxIdleTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Can be used to set the size in characters that the websocket created          * by the websocketServlet may be accept before closing.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|maxTextMessageSize ( Integer maxTextMessageSize)
specifier|default
name|AdvancedWebsocketEndpointBuilder
name|maxTextMessageSize
parameter_list|(
name|Integer
name|maxTextMessageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxTextMessageSize"
argument_list|,
name|maxTextMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Can be used to set the size in characters that the websocket created          * by the websocketServlet may be accept before closing.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|maxTextMessageSize ( String maxTextMessageSize)
specifier|default
name|AdvancedWebsocketEndpointBuilder
name|maxTextMessageSize
parameter_list|(
name|String
name|maxTextMessageSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxTextMessageSize"
argument_list|,
name|maxTextMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Can be used to set the minimum protocol version accepted for the          * websocketServlet. (Default 13 - the RFC6455 version).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|minVersion (Integer minVersion)
specifier|default
name|AdvancedWebsocketEndpointBuilder
name|minVersion
parameter_list|(
name|Integer
name|minVersion
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"minVersion"
argument_list|,
name|minVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Can be used to set the minimum protocol version accepted for the          * websocketServlet. (Default 13 - the RFC6455 version).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|minVersion (String minVersion)
specifier|default
name|AdvancedWebsocketEndpointBuilder
name|minVersion
parameter_list|(
name|String
name|minVersion
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"minVersion"
argument_list|,
name|minVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedWebsocketEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedWebsocketEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Jetty Websocket (camel-websocket)      * The websocket component provides websocket endpoints with Jetty for      * communicating with clients using websocket.      *       * Category: websocket      * Available as of version: 2.10      * Maven coordinates: org.apache.camel:camel-websocket      *       * Syntax:<code>websocket:host:port/resourceUri</code>      *       * Path parameter: host      * The hostname. The default value is 0.0.0.0. Setting this option on the      * component will use the component configured value as default.      * Default value: 0.0.0.0      *       * Path parameter: port      * The port number. The default value is 9292. Setting this option on the      * component will use the component configured value as default.      * Default value: 9292      *       * Path parameter: resourceUri (required)      * Name of the websocket channel to use      */
DECL|method|websocket (String path)
specifier|default
name|WebsocketEndpointBuilder
name|websocket
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|WebsocketEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|WebsocketEndpointBuilder
implements|,
name|AdvancedWebsocketEndpointBuilder
block|{
specifier|public
name|WebsocketEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"websocket"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|WebsocketEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

