begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The azure-blob component is used for storing and retrieving blobs from Azure  * Storage Blob Service.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|BlobServiceEndpointBuilderFactory
specifier|public
interface|interface
name|BlobServiceEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Azure Storage Blob Service      * component.      */
DECL|interface|BlobServiceEndpointConsumerBuilder
specifier|public
interface|interface
name|BlobServiceEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedBlobServiceEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedBlobServiceEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Container or Blob compact Uri.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|containerOrBlobUri ( String containerOrBlobUri)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|containerOrBlobUri
parameter_list|(
name|String
name|containerOrBlobUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"containerOrBlobUri"
argument_list|,
name|containerOrBlobUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The blob service client.          * The option is a          *<code>com.microsoft.azure.storage.blob.CloudBlob</code> type.          * @group common          */
DECL|method|azureBlobClient ( Object azureBlobClient)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|azureBlobClient
parameter_list|(
name|Object
name|azureBlobClient
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"azureBlobClient"
argument_list|,
name|azureBlobClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The blob service client.          * The option will be converted to a          *<code>com.microsoft.azure.storage.blob.CloudBlob</code> type.          * @group common          */
DECL|method|azureBlobClient ( String azureBlobClient)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|azureBlobClient
parameter_list|(
name|String
name|azureBlobClient
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"azureBlobClient"
argument_list|,
name|azureBlobClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the blob offset for the upload or download operations, default is          * 0.          * The option is a<code>java.lang.Long</code> type.          * @group common          */
DECL|method|blobOffset (Long blobOffset)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|blobOffset
parameter_list|(
name|Long
name|blobOffset
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blobOffset"
argument_list|,
name|blobOffset
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the blob offset for the upload or download operations, default is          * 0.          * The option will be converted to a<code>java.lang.Long</code> type.          * @group common          */
DECL|method|blobOffset (String blobOffset)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|blobOffset
parameter_list|(
name|String
name|blobOffset
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blobOffset"
argument_list|,
name|blobOffset
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a blob type, 'blockblob' is default.          * The option is a          *<code>org.apache.camel.component.azure.blob.BlobType</code> type.          * @group common          */
DECL|method|blobType (BlobType blobType)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|blobType
parameter_list|(
name|BlobType
name|blobType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blobType"
argument_list|,
name|blobType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a blob type, 'blockblob' is default.          * The option will be converted to a          *<code>org.apache.camel.component.azure.blob.BlobType</code> type.          * @group common          */
DECL|method|blobType (String blobType)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|blobType
parameter_list|(
name|String
name|blobType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blobType"
argument_list|,
name|blobType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Close the stream after read or keep it open, default is true.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|closeStreamAfterRead ( boolean closeStreamAfterRead)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|closeStreamAfterRead
parameter_list|(
name|boolean
name|closeStreamAfterRead
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"closeStreamAfterRead"
argument_list|,
name|closeStreamAfterRead
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Close the stream after read or keep it open, default is true.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|closeStreamAfterRead ( String closeStreamAfterRead)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|closeStreamAfterRead
parameter_list|(
name|String
name|closeStreamAfterRead
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"closeStreamAfterRead"
argument_list|,
name|closeStreamAfterRead
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the storage credentials, required in most cases.          * The option is a          *<code>com.microsoft.azure.storage.StorageCredentials</code> type.          * @group common          */
DECL|method|credentials ( Object credentials)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|credentials
parameter_list|(
name|Object
name|credentials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"credentials"
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the storage credentials, required in most cases.          * The option will be converted to a          *<code>com.microsoft.azure.storage.StorageCredentials</code> type.          * @group common          */
DECL|method|credentials ( String credentials)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|credentials
parameter_list|(
name|String
name|credentials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"credentials"
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the data length for the download or page blob upload operations.          * The option is a<code>java.lang.Long</code> type.          * @group common          */
DECL|method|dataLength (Long dataLength)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|dataLength
parameter_list|(
name|Long
name|dataLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataLength"
argument_list|,
name|dataLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the data length for the download or page blob upload operations.          * The option will be converted to a<code>java.lang.Long</code> type.          * @group common          */
DECL|method|dataLength (String dataLength)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|dataLength
parameter_list|(
name|String
name|dataLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataLength"
argument_list|,
name|dataLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the file directory where the downloaded blobs will be saved to.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|fileDir (String fileDir)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|fileDir
parameter_list|(
name|String
name|fileDir
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fileDir"
argument_list|,
name|fileDir
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Storage resources can be public for reading their content, if this          * property is enabled then the credentials do not have to be set.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|publicForRead ( boolean publicForRead)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|publicForRead
parameter_list|(
name|boolean
name|publicForRead
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publicForRead"
argument_list|,
name|publicForRead
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Storage resources can be public for reading their content, if this          * property is enabled then the credentials do not have to be set.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|publicForRead ( String publicForRead)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|publicForRead
parameter_list|(
name|String
name|publicForRead
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publicForRead"
argument_list|,
name|publicForRead
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the minimum read size in bytes when reading the blob content.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|streamReadSize ( int streamReadSize)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|streamReadSize
parameter_list|(
name|int
name|streamReadSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"streamReadSize"
argument_list|,
name|streamReadSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the minimum read size in bytes when reading the blob content.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|streamReadSize ( String streamReadSize)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|streamReadSize
parameter_list|(
name|String
name|streamReadSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"streamReadSize"
argument_list|,
name|streamReadSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Azure Storage Blob      * Service component.      */
DECL|interface|AdvancedBlobServiceEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedBlobServiceEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|BlobServiceEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|BlobServiceEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedBlobServiceEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedBlobServiceEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedBlobServiceEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedBlobServiceEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedBlobServiceEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedBlobServiceEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedBlobServiceEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedBlobServiceEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Azure Storage Blob Service      * component.      */
DECL|interface|BlobServiceEndpointProducerBuilder
specifier|public
interface|interface
name|BlobServiceEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedBlobServiceEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedBlobServiceEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Container or Blob compact Uri.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|containerOrBlobUri ( String containerOrBlobUri)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|containerOrBlobUri
parameter_list|(
name|String
name|containerOrBlobUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"containerOrBlobUri"
argument_list|,
name|containerOrBlobUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The blob service client.          * The option is a          *<code>com.microsoft.azure.storage.blob.CloudBlob</code> type.          * @group common          */
DECL|method|azureBlobClient ( Object azureBlobClient)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|azureBlobClient
parameter_list|(
name|Object
name|azureBlobClient
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"azureBlobClient"
argument_list|,
name|azureBlobClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The blob service client.          * The option will be converted to a          *<code>com.microsoft.azure.storage.blob.CloudBlob</code> type.          * @group common          */
DECL|method|azureBlobClient ( String azureBlobClient)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|azureBlobClient
parameter_list|(
name|String
name|azureBlobClient
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"azureBlobClient"
argument_list|,
name|azureBlobClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the blob offset for the upload or download operations, default is          * 0.          * The option is a<code>java.lang.Long</code> type.          * @group common          */
DECL|method|blobOffset (Long blobOffset)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|blobOffset
parameter_list|(
name|Long
name|blobOffset
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blobOffset"
argument_list|,
name|blobOffset
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the blob offset for the upload or download operations, default is          * 0.          * The option will be converted to a<code>java.lang.Long</code> type.          * @group common          */
DECL|method|blobOffset (String blobOffset)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|blobOffset
parameter_list|(
name|String
name|blobOffset
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blobOffset"
argument_list|,
name|blobOffset
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a blob type, 'blockblob' is default.          * The option is a          *<code>org.apache.camel.component.azure.blob.BlobType</code> type.          * @group common          */
DECL|method|blobType (BlobType blobType)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|blobType
parameter_list|(
name|BlobType
name|blobType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blobType"
argument_list|,
name|blobType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a blob type, 'blockblob' is default.          * The option will be converted to a          *<code>org.apache.camel.component.azure.blob.BlobType</code> type.          * @group common          */
DECL|method|blobType (String blobType)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|blobType
parameter_list|(
name|String
name|blobType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blobType"
argument_list|,
name|blobType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Close the stream after read or keep it open, default is true.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|closeStreamAfterRead ( boolean closeStreamAfterRead)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|closeStreamAfterRead
parameter_list|(
name|boolean
name|closeStreamAfterRead
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"closeStreamAfterRead"
argument_list|,
name|closeStreamAfterRead
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Close the stream after read or keep it open, default is true.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|closeStreamAfterRead ( String closeStreamAfterRead)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|closeStreamAfterRead
parameter_list|(
name|String
name|closeStreamAfterRead
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"closeStreamAfterRead"
argument_list|,
name|closeStreamAfterRead
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the storage credentials, required in most cases.          * The option is a          *<code>com.microsoft.azure.storage.StorageCredentials</code> type.          * @group common          */
DECL|method|credentials ( Object credentials)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|credentials
parameter_list|(
name|Object
name|credentials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"credentials"
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the storage credentials, required in most cases.          * The option will be converted to a          *<code>com.microsoft.azure.storage.StorageCredentials</code> type.          * @group common          */
DECL|method|credentials ( String credentials)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|credentials
parameter_list|(
name|String
name|credentials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"credentials"
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the data length for the download or page blob upload operations.          * The option is a<code>java.lang.Long</code> type.          * @group common          */
DECL|method|dataLength (Long dataLength)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|dataLength
parameter_list|(
name|Long
name|dataLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataLength"
argument_list|,
name|dataLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the data length for the download or page blob upload operations.          * The option will be converted to a<code>java.lang.Long</code> type.          * @group common          */
DECL|method|dataLength (String dataLength)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|dataLength
parameter_list|(
name|String
name|dataLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataLength"
argument_list|,
name|dataLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the file directory where the downloaded blobs will be saved to.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|fileDir (String fileDir)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|fileDir
parameter_list|(
name|String
name|fileDir
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fileDir"
argument_list|,
name|fileDir
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Storage resources can be public for reading their content, if this          * property is enabled then the credentials do not have to be set.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|publicForRead ( boolean publicForRead)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|publicForRead
parameter_list|(
name|boolean
name|publicForRead
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publicForRead"
argument_list|,
name|publicForRead
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Storage resources can be public for reading their content, if this          * property is enabled then the credentials do not have to be set.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|publicForRead ( String publicForRead)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|publicForRead
parameter_list|(
name|String
name|publicForRead
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publicForRead"
argument_list|,
name|publicForRead
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the minimum read size in bytes when reading the blob content.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|streamReadSize ( int streamReadSize)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|streamReadSize
parameter_list|(
name|int
name|streamReadSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"streamReadSize"
argument_list|,
name|streamReadSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the minimum read size in bytes when reading the blob content.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|streamReadSize ( String streamReadSize)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|streamReadSize
parameter_list|(
name|String
name|streamReadSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"streamReadSize"
argument_list|,
name|streamReadSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the blob meta-data.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.String&gt;</code> type.          * @group producer          */
DECL|method|blobMetadata ( Map<String, String> blobMetadata)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|blobMetadata
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|blobMetadata
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blobMetadata"
argument_list|,
name|blobMetadata
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the blob meta-data.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>          * type.          * @group producer          */
DECL|method|blobMetadata ( String blobMetadata)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|blobMetadata
parameter_list|(
name|String
name|blobMetadata
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blobMetadata"
argument_list|,
name|blobMetadata
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a prefix which can be used for listing the blobs.          * The option is a<code>java.lang.String</code> type.          * @group producer          */
DECL|method|blobPrefix (String blobPrefix)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|blobPrefix
parameter_list|(
name|String
name|blobPrefix
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blobPrefix"
argument_list|,
name|blobPrefix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Close the stream after write or keep it open, default is true.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|closeStreamAfterWrite ( boolean closeStreamAfterWrite)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|closeStreamAfterWrite
parameter_list|(
name|boolean
name|closeStreamAfterWrite
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"closeStreamAfterWrite"
argument_list|,
name|closeStreamAfterWrite
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Close the stream after write or keep it open, default is true.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|closeStreamAfterWrite ( String closeStreamAfterWrite)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|closeStreamAfterWrite
parameter_list|(
name|String
name|closeStreamAfterWrite
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"closeStreamAfterWrite"
argument_list|,
name|closeStreamAfterWrite
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Blob service operation hint to the producer.          * The option is a          *<code>org.apache.camel.component.azure.blob.BlobServiceOperations</code> type.          * @group producer          */
DECL|method|operation ( BlobServiceOperations operation)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|operation
parameter_list|(
name|BlobServiceOperations
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Blob service operation hint to the producer.          * The option will be converted to a          *<code>org.apache.camel.component.azure.blob.BlobServiceOperations</code> type.          * @group producer          */
DECL|method|operation (String operation)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the size of the buffer for writing block and page blocks.          * The option is a<code>int</code> type.          * @group producer          */
DECL|method|streamWriteSize ( int streamWriteSize)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|streamWriteSize
parameter_list|(
name|int
name|streamWriteSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"streamWriteSize"
argument_list|,
name|streamWriteSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the size of the buffer for writing block and page blocks.          * The option will be converted to a<code>int</code> type.          * @group producer          */
DECL|method|streamWriteSize ( String streamWriteSize)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|streamWriteSize
parameter_list|(
name|String
name|streamWriteSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"streamWriteSize"
argument_list|,
name|streamWriteSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify if the flat or hierarchical blob listing should be used.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|useFlatListing ( boolean useFlatListing)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|useFlatListing
parameter_list|(
name|boolean
name|useFlatListing
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useFlatListing"
argument_list|,
name|useFlatListing
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify if the flat or hierarchical blob listing should be used.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|useFlatListing ( String useFlatListing)
specifier|default
name|BlobServiceEndpointProducerBuilder
name|useFlatListing
parameter_list|(
name|String
name|useFlatListing
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useFlatListing"
argument_list|,
name|useFlatListing
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Azure Storage Blob      * Service component.      */
DECL|interface|AdvancedBlobServiceEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedBlobServiceEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|BlobServiceEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|BlobServiceEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedBlobServiceEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedBlobServiceEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedBlobServiceEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedBlobServiceEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Azure Storage Blob Service component.      */
DECL|interface|BlobServiceEndpointBuilder
specifier|public
interface|interface
name|BlobServiceEndpointBuilder
extends|extends
name|BlobServiceEndpointConsumerBuilder
extends|,
name|BlobServiceEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedBlobServiceEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedBlobServiceEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Container or Blob compact Uri.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|containerOrBlobUri ( String containerOrBlobUri)
specifier|default
name|BlobServiceEndpointBuilder
name|containerOrBlobUri
parameter_list|(
name|String
name|containerOrBlobUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"containerOrBlobUri"
argument_list|,
name|containerOrBlobUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The blob service client.          * The option is a          *<code>com.microsoft.azure.storage.blob.CloudBlob</code> type.          * @group common          */
DECL|method|azureBlobClient ( Object azureBlobClient)
specifier|default
name|BlobServiceEndpointBuilder
name|azureBlobClient
parameter_list|(
name|Object
name|azureBlobClient
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"azureBlobClient"
argument_list|,
name|azureBlobClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The blob service client.          * The option will be converted to a          *<code>com.microsoft.azure.storage.blob.CloudBlob</code> type.          * @group common          */
DECL|method|azureBlobClient ( String azureBlobClient)
specifier|default
name|BlobServiceEndpointBuilder
name|azureBlobClient
parameter_list|(
name|String
name|azureBlobClient
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"azureBlobClient"
argument_list|,
name|azureBlobClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the blob offset for the upload or download operations, default is          * 0.          * The option is a<code>java.lang.Long</code> type.          * @group common          */
DECL|method|blobOffset (Long blobOffset)
specifier|default
name|BlobServiceEndpointBuilder
name|blobOffset
parameter_list|(
name|Long
name|blobOffset
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blobOffset"
argument_list|,
name|blobOffset
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the blob offset for the upload or download operations, default is          * 0.          * The option will be converted to a<code>java.lang.Long</code> type.          * @group common          */
DECL|method|blobOffset (String blobOffset)
specifier|default
name|BlobServiceEndpointBuilder
name|blobOffset
parameter_list|(
name|String
name|blobOffset
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blobOffset"
argument_list|,
name|blobOffset
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a blob type, 'blockblob' is default.          * The option is a          *<code>org.apache.camel.component.azure.blob.BlobType</code> type.          * @group common          */
DECL|method|blobType (BlobType blobType)
specifier|default
name|BlobServiceEndpointBuilder
name|blobType
parameter_list|(
name|BlobType
name|blobType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blobType"
argument_list|,
name|blobType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a blob type, 'blockblob' is default.          * The option will be converted to a          *<code>org.apache.camel.component.azure.blob.BlobType</code> type.          * @group common          */
DECL|method|blobType (String blobType)
specifier|default
name|BlobServiceEndpointBuilder
name|blobType
parameter_list|(
name|String
name|blobType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blobType"
argument_list|,
name|blobType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Close the stream after read or keep it open, default is true.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|closeStreamAfterRead ( boolean closeStreamAfterRead)
specifier|default
name|BlobServiceEndpointBuilder
name|closeStreamAfterRead
parameter_list|(
name|boolean
name|closeStreamAfterRead
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"closeStreamAfterRead"
argument_list|,
name|closeStreamAfterRead
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Close the stream after read or keep it open, default is true.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|closeStreamAfterRead ( String closeStreamAfterRead)
specifier|default
name|BlobServiceEndpointBuilder
name|closeStreamAfterRead
parameter_list|(
name|String
name|closeStreamAfterRead
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"closeStreamAfterRead"
argument_list|,
name|closeStreamAfterRead
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the storage credentials, required in most cases.          * The option is a          *<code>com.microsoft.azure.storage.StorageCredentials</code> type.          * @group common          */
DECL|method|credentials (Object credentials)
specifier|default
name|BlobServiceEndpointBuilder
name|credentials
parameter_list|(
name|Object
name|credentials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"credentials"
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the storage credentials, required in most cases.          * The option will be converted to a          *<code>com.microsoft.azure.storage.StorageCredentials</code> type.          * @group common          */
DECL|method|credentials (String credentials)
specifier|default
name|BlobServiceEndpointBuilder
name|credentials
parameter_list|(
name|String
name|credentials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"credentials"
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the data length for the download or page blob upload operations.          * The option is a<code>java.lang.Long</code> type.          * @group common          */
DECL|method|dataLength (Long dataLength)
specifier|default
name|BlobServiceEndpointBuilder
name|dataLength
parameter_list|(
name|Long
name|dataLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataLength"
argument_list|,
name|dataLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the data length for the download or page blob upload operations.          * The option will be converted to a<code>java.lang.Long</code> type.          * @group common          */
DECL|method|dataLength (String dataLength)
specifier|default
name|BlobServiceEndpointBuilder
name|dataLength
parameter_list|(
name|String
name|dataLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataLength"
argument_list|,
name|dataLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the file directory where the downloaded blobs will be saved to.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|fileDir (String fileDir)
specifier|default
name|BlobServiceEndpointBuilder
name|fileDir
parameter_list|(
name|String
name|fileDir
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fileDir"
argument_list|,
name|fileDir
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Storage resources can be public for reading their content, if this          * property is enabled then the credentials do not have to be set.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|publicForRead (boolean publicForRead)
specifier|default
name|BlobServiceEndpointBuilder
name|publicForRead
parameter_list|(
name|boolean
name|publicForRead
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publicForRead"
argument_list|,
name|publicForRead
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Storage resources can be public for reading their content, if this          * property is enabled then the credentials do not have to be set.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|publicForRead (String publicForRead)
specifier|default
name|BlobServiceEndpointBuilder
name|publicForRead
parameter_list|(
name|String
name|publicForRead
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publicForRead"
argument_list|,
name|publicForRead
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the minimum read size in bytes when reading the blob content.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|streamReadSize (int streamReadSize)
specifier|default
name|BlobServiceEndpointBuilder
name|streamReadSize
parameter_list|(
name|int
name|streamReadSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"streamReadSize"
argument_list|,
name|streamReadSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the minimum read size in bytes when reading the blob content.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|streamReadSize (String streamReadSize)
specifier|default
name|BlobServiceEndpointBuilder
name|streamReadSize
parameter_list|(
name|String
name|streamReadSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"streamReadSize"
argument_list|,
name|streamReadSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Azure Storage Blob Service      * component.      */
DECL|interface|AdvancedBlobServiceEndpointBuilder
specifier|public
interface|interface
name|AdvancedBlobServiceEndpointBuilder
extends|extends
name|AdvancedBlobServiceEndpointConsumerBuilder
extends|,
name|AdvancedBlobServiceEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|BlobServiceEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|BlobServiceEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedBlobServiceEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedBlobServiceEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedBlobServiceEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedBlobServiceEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.azure.blob.BlobType</code> enum.      */
DECL|enum|BlobType
enum|enum
name|BlobType
block|{
DECL|enumConstant|blockblob
name|blockblob
block|,
DECL|enumConstant|appendblob
name|appendblob
block|,
DECL|enumConstant|pageblob
name|pageblob
block|;     }
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.azure.blob.BlobServiceOperations</code>      * enum.      */
DECL|enum|BlobServiceOperations
enum|enum
name|BlobServiceOperations
block|{
DECL|enumConstant|getBlob
name|getBlob
block|,
DECL|enumConstant|deleteBlob
name|deleteBlob
block|,
DECL|enumConstant|listBlobs
name|listBlobs
block|,
DECL|enumConstant|updateBlockBlob
name|updateBlockBlob
block|,
DECL|enumConstant|uploadBlobBlocks
name|uploadBlobBlocks
block|,
DECL|enumConstant|commitBlobBlockList
name|commitBlobBlockList
block|,
DECL|enumConstant|getBlobBlockList
name|getBlobBlockList
block|,
DECL|enumConstant|createAppendBlob
name|createAppendBlob
block|,
DECL|enumConstant|updateAppendBlob
name|updateAppendBlob
block|,
DECL|enumConstant|createPageBlob
name|createPageBlob
block|,
DECL|enumConstant|updatePageBlob
name|updatePageBlob
block|,
DECL|enumConstant|resizePageBlob
name|resizePageBlob
block|,
DECL|enumConstant|clearPageBlob
name|clearPageBlob
block|,
DECL|enumConstant|getPageBlobRanges
name|getPageBlobRanges
block|;     }
comment|/**      * The azure-blob component is used for storing and retrieving blobs from      * Azure Storage Blob Service. Creates a builder to build endpoints for the      * Azure Storage Blob Service component.      */
DECL|method|blobService (String path)
specifier|default
name|BlobServiceEndpointBuilder
name|blobService
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|BlobServiceEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|BlobServiceEndpointBuilder
implements|,
name|AdvancedBlobServiceEndpointBuilder
block|{
specifier|public
name|BlobServiceEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"azure-blob"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BlobServiceEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

