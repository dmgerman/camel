begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * IEC 60870 component used for telecontrol (supervisory control and data  * acquisition) such as controlling electric power transmission grids and other  * geographically widespread control systems.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|ClientEndpointBuilderFactory
specifier|public
interface|interface
name|ClientEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the IEC 60870 Client component.      */
DECL|interface|ClientEndpointConsumerBuilder
specifier|public
interface|interface
name|ClientEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedClientEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedClientEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Data module options.          *           * The option is a:          *<code>org.eclipse.neoscada.protocol.iec60870.client.data.DataModuleOptions</code> type.          *           * Group: common          */
DECL|method|dataModuleOptions ( Object dataModuleOptions)
specifier|default
name|ClientEndpointConsumerBuilder
name|dataModuleOptions
parameter_list|(
name|Object
name|dataModuleOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataModuleOptions"
argument_list|,
name|dataModuleOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Data module options.          *           * The option will be converted to a          *<code>org.eclipse.neoscada.protocol.iec60870.client.data.DataModuleOptions</code> type.          *           * Group: common          */
DECL|method|dataModuleOptions ( String dataModuleOptions)
specifier|default
name|ClientEndpointConsumerBuilder
name|dataModuleOptions
parameter_list|(
name|String
name|dataModuleOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataModuleOptions"
argument_list|,
name|dataModuleOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Protocol options.          *           * The option is a:          *<code>org.eclipse.neoscada.protocol.iec60870.ProtocolOptions</code>          * type.          *           * Group: common          */
DECL|method|protocolOptions ( Object protocolOptions)
specifier|default
name|ClientEndpointConsumerBuilder
name|protocolOptions
parameter_list|(
name|Object
name|protocolOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"protocolOptions"
argument_list|,
name|protocolOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Protocol options.          *           * The option will be converted to a          *<code>org.eclipse.neoscada.protocol.iec60870.ProtocolOptions</code>          * type.          *           * Group: common          */
DECL|method|protocolOptions ( String protocolOptions)
specifier|default
name|ClientEndpointConsumerBuilder
name|protocolOptions
parameter_list|(
name|String
name|protocolOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"protocolOptions"
argument_list|,
name|protocolOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|ClientEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|ClientEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Parameter W - Acknowledgment window.          *           * The option is a:<code>short</code> type.          *           * Group: connection          */
DECL|method|acknowledgeWindow ( short acknowledgeWindow)
specifier|default
name|ClientEndpointConsumerBuilder
name|acknowledgeWindow
parameter_list|(
name|short
name|acknowledgeWindow
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"acknowledgeWindow"
argument_list|,
name|acknowledgeWindow
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Parameter W - Acknowledgment window.          *           * The option will be converted to a<code>short</code> type.          *           * Group: connection          */
DECL|method|acknowledgeWindow ( String acknowledgeWindow)
specifier|default
name|ClientEndpointConsumerBuilder
name|acknowledgeWindow
parameter_list|(
name|String
name|acknowledgeWindow
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"acknowledgeWindow"
argument_list|,
name|acknowledgeWindow
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The common ASDU address size. May be either SIZE_1 or SIZE_2.          *           * The option is a:          *<code>org.eclipse.neoscada.protocol.iec60870.ASDUAddressType</code>          * type.          *           * Group: connection          */
DECL|method|adsuAddressType ( ASDUAddressType adsuAddressType)
specifier|default
name|ClientEndpointConsumerBuilder
name|adsuAddressType
parameter_list|(
name|ASDUAddressType
name|adsuAddressType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"adsuAddressType"
argument_list|,
name|adsuAddressType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The common ASDU address size. May be either SIZE_1 or SIZE_2.          *           * The option will be converted to a          *<code>org.eclipse.neoscada.protocol.iec60870.ASDUAddressType</code>          * type.          *           * Group: connection          */
DECL|method|adsuAddressType ( String adsuAddressType)
specifier|default
name|ClientEndpointConsumerBuilder
name|adsuAddressType
parameter_list|(
name|String
name|adsuAddressType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"adsuAddressType"
argument_list|,
name|adsuAddressType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cause of transmission type. May be either SIZE_1 or SIZE_2.          *           * The option is a:          *<code>org.eclipse.neoscada.protocol.iec60870.CauseOfTransmissionType</code> type.          *           * Group: connection          */
DECL|method|causeOfTransmissionType ( CauseOfTransmissionType causeOfTransmissionType)
specifier|default
name|ClientEndpointConsumerBuilder
name|causeOfTransmissionType
parameter_list|(
name|CauseOfTransmissionType
name|causeOfTransmissionType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"causeOfTransmissionType"
argument_list|,
name|causeOfTransmissionType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cause of transmission type. May be either SIZE_1 or SIZE_2.          *           * The option will be converted to a          *<code>org.eclipse.neoscada.protocol.iec60870.CauseOfTransmissionType</code> type.          *           * Group: connection          */
DECL|method|causeOfTransmissionType ( String causeOfTransmissionType)
specifier|default
name|ClientEndpointConsumerBuilder
name|causeOfTransmissionType
parameter_list|(
name|String
name|causeOfTransmissionType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"causeOfTransmissionType"
argument_list|,
name|causeOfTransmissionType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The information address size. May be either SIZE_1, SIZE_2 or SIZE_3.          *           * The option is a:          *<code>org.eclipse.neoscada.protocol.iec60870.InformationObjectAddressType</code> type.          *           * Group: connection          */
DECL|method|informationObjectAddressType ( InformationObjectAddressType informationObjectAddressType)
specifier|default
name|ClientEndpointConsumerBuilder
name|informationObjectAddressType
parameter_list|(
name|InformationObjectAddressType
name|informationObjectAddressType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"informationObjectAddressType"
argument_list|,
name|informationObjectAddressType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The information address size. May be either SIZE_1, SIZE_2 or SIZE_3.          *           * The option will be converted to a          *<code>org.eclipse.neoscada.protocol.iec60870.InformationObjectAddressType</code> type.          *           * Group: connection          */
DECL|method|informationObjectAddressType ( String informationObjectAddressType)
specifier|default
name|ClientEndpointConsumerBuilder
name|informationObjectAddressType
parameter_list|(
name|String
name|informationObjectAddressType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"informationObjectAddressType"
argument_list|,
name|informationObjectAddressType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Parameter K - Maximum number of un-acknowledged messages.          *           * The option is a:<code>short</code> type.          *           * Group: connection          */
DECL|method|maxUnacknowledged ( short maxUnacknowledged)
specifier|default
name|ClientEndpointConsumerBuilder
name|maxUnacknowledged
parameter_list|(
name|short
name|maxUnacknowledged
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxUnacknowledged"
argument_list|,
name|maxUnacknowledged
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Parameter K - Maximum number of un-acknowledged messages.          *           * The option will be converted to a<code>short</code> type.          *           * Group: connection          */
DECL|method|maxUnacknowledged ( String maxUnacknowledged)
specifier|default
name|ClientEndpointConsumerBuilder
name|maxUnacknowledged
parameter_list|(
name|String
name|maxUnacknowledged
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxUnacknowledged"
argument_list|,
name|maxUnacknowledged
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T1 in milliseconds.          *           * The option is a:<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout1 (int timeout1)
specifier|default
name|ClientEndpointConsumerBuilder
name|timeout1
parameter_list|(
name|int
name|timeout1
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout1"
argument_list|,
name|timeout1
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T1 in milliseconds.          *           * The option will be converted to a<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout1 (String timeout1)
specifier|default
name|ClientEndpointConsumerBuilder
name|timeout1
parameter_list|(
name|String
name|timeout1
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout1"
argument_list|,
name|timeout1
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T2 in milliseconds.          *           * The option is a:<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout2 (int timeout2)
specifier|default
name|ClientEndpointConsumerBuilder
name|timeout2
parameter_list|(
name|int
name|timeout2
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout2"
argument_list|,
name|timeout2
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T2 in milliseconds.          *           * The option will be converted to a<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout2 (String timeout2)
specifier|default
name|ClientEndpointConsumerBuilder
name|timeout2
parameter_list|(
name|String
name|timeout2
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout2"
argument_list|,
name|timeout2
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T3 in milliseconds.          *           * The option is a:<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout3 (int timeout3)
specifier|default
name|ClientEndpointConsumerBuilder
name|timeout3
parameter_list|(
name|int
name|timeout3
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout3"
argument_list|,
name|timeout3
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T3 in milliseconds.          *           * The option will be converted to a<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout3 (String timeout3)
specifier|default
name|ClientEndpointConsumerBuilder
name|timeout3
parameter_list|(
name|String
name|timeout3
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout3"
argument_list|,
name|timeout3
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to include the source address.          *           * The option is a:<code>byte</code> type.          *           * Group: data          */
DECL|method|causeSourceAddress ( byte causeSourceAddress)
specifier|default
name|ClientEndpointConsumerBuilder
name|causeSourceAddress
parameter_list|(
name|byte
name|causeSourceAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"causeSourceAddress"
argument_list|,
name|causeSourceAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to include the source address.          *           * The option will be converted to a<code>byte</code> type.          *           * Group: data          */
DECL|method|causeSourceAddress ( String causeSourceAddress)
specifier|default
name|ClientEndpointConsumerBuilder
name|causeSourceAddress
parameter_list|(
name|String
name|causeSourceAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"causeSourceAddress"
argument_list|,
name|causeSourceAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether background scan transmissions should be ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: data          */
DECL|method|ignoreBackgroundScan ( boolean ignoreBackgroundScan)
specifier|default
name|ClientEndpointConsumerBuilder
name|ignoreBackgroundScan
parameter_list|(
name|boolean
name|ignoreBackgroundScan
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ignoreBackgroundScan"
argument_list|,
name|ignoreBackgroundScan
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether background scan transmissions should be ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: data          */
DECL|method|ignoreBackgroundScan ( String ignoreBackgroundScan)
specifier|default
name|ClientEndpointConsumerBuilder
name|ignoreBackgroundScan
parameter_list|(
name|String
name|ignoreBackgroundScan
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ignoreBackgroundScan"
argument_list|,
name|ignoreBackgroundScan
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to ignore or respect DST.          *           * The option is a:<code>boolean</code> type.          *           * Group: data          */
DECL|method|ignoreDaylightSavingTime ( boolean ignoreDaylightSavingTime)
specifier|default
name|ClientEndpointConsumerBuilder
name|ignoreDaylightSavingTime
parameter_list|(
name|boolean
name|ignoreDaylightSavingTime
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ignoreDaylightSavingTime"
argument_list|,
name|ignoreDaylightSavingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to ignore or respect DST.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: data          */
DECL|method|ignoreDaylightSavingTime ( String ignoreDaylightSavingTime)
specifier|default
name|ClientEndpointConsumerBuilder
name|ignoreDaylightSavingTime
parameter_list|(
name|String
name|ignoreDaylightSavingTime
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ignoreDaylightSavingTime"
argument_list|,
name|ignoreDaylightSavingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timezone to use. May be any Java time zone string.          *           * The option is a:<code>java.util.TimeZone</code> type.          *           * Group: data          */
DECL|method|timeZone (TimeZone timeZone)
specifier|default
name|ClientEndpointConsumerBuilder
name|timeZone
parameter_list|(
name|TimeZone
name|timeZone
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeZone"
argument_list|,
name|timeZone
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timezone to use. May be any Java time zone string.          *           * The option will be converted to a<code>java.util.TimeZone</code>          * type.          *           * Group: data          */
DECL|method|timeZone (String timeZone)
specifier|default
name|ClientEndpointConsumerBuilder
name|timeZone
parameter_list|(
name|String
name|timeZone
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeZone"
argument_list|,
name|timeZone
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An identifier grouping connection instances.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: id          */
DECL|method|connectionId (String connectionId)
specifier|default
name|ClientEndpointConsumerBuilder
name|connectionId
parameter_list|(
name|String
name|connectionId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectionId"
argument_list|,
name|connectionId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the IEC 60870 Client      * component.      */
DECL|interface|AdvancedClientEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedClientEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|ClientEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|ClientEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedClientEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedClientEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedClientEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedClientEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedClientEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedClientEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedClientEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedClientEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the IEC 60870 Client component.      */
DECL|interface|ClientEndpointProducerBuilder
specifier|public
interface|interface
name|ClientEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedClientEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedClientEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Data module options.          *           * The option is a:          *<code>org.eclipse.neoscada.protocol.iec60870.client.data.DataModuleOptions</code> type.          *           * Group: common          */
DECL|method|dataModuleOptions ( Object dataModuleOptions)
specifier|default
name|ClientEndpointProducerBuilder
name|dataModuleOptions
parameter_list|(
name|Object
name|dataModuleOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataModuleOptions"
argument_list|,
name|dataModuleOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Data module options.          *           * The option will be converted to a          *<code>org.eclipse.neoscada.protocol.iec60870.client.data.DataModuleOptions</code> type.          *           * Group: common          */
DECL|method|dataModuleOptions ( String dataModuleOptions)
specifier|default
name|ClientEndpointProducerBuilder
name|dataModuleOptions
parameter_list|(
name|String
name|dataModuleOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataModuleOptions"
argument_list|,
name|dataModuleOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Protocol options.          *           * The option is a:          *<code>org.eclipse.neoscada.protocol.iec60870.ProtocolOptions</code>          * type.          *           * Group: common          */
DECL|method|protocolOptions ( Object protocolOptions)
specifier|default
name|ClientEndpointProducerBuilder
name|protocolOptions
parameter_list|(
name|Object
name|protocolOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"protocolOptions"
argument_list|,
name|protocolOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Protocol options.          *           * The option will be converted to a          *<code>org.eclipse.neoscada.protocol.iec60870.ProtocolOptions</code>          * type.          *           * Group: common          */
DECL|method|protocolOptions ( String protocolOptions)
specifier|default
name|ClientEndpointProducerBuilder
name|protocolOptions
parameter_list|(
name|String
name|protocolOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"protocolOptions"
argument_list|,
name|protocolOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|ClientEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|ClientEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Parameter W - Acknowledgment window.          *           * The option is a:<code>short</code> type.          *           * Group: connection          */
DECL|method|acknowledgeWindow ( short acknowledgeWindow)
specifier|default
name|ClientEndpointProducerBuilder
name|acknowledgeWindow
parameter_list|(
name|short
name|acknowledgeWindow
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"acknowledgeWindow"
argument_list|,
name|acknowledgeWindow
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Parameter W - Acknowledgment window.          *           * The option will be converted to a<code>short</code> type.          *           * Group: connection          */
DECL|method|acknowledgeWindow ( String acknowledgeWindow)
specifier|default
name|ClientEndpointProducerBuilder
name|acknowledgeWindow
parameter_list|(
name|String
name|acknowledgeWindow
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"acknowledgeWindow"
argument_list|,
name|acknowledgeWindow
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The common ASDU address size. May be either SIZE_1 or SIZE_2.          *           * The option is a:          *<code>org.eclipse.neoscada.protocol.iec60870.ASDUAddressType</code>          * type.          *           * Group: connection          */
DECL|method|adsuAddressType ( ASDUAddressType adsuAddressType)
specifier|default
name|ClientEndpointProducerBuilder
name|adsuAddressType
parameter_list|(
name|ASDUAddressType
name|adsuAddressType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"adsuAddressType"
argument_list|,
name|adsuAddressType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The common ASDU address size. May be either SIZE_1 or SIZE_2.          *           * The option will be converted to a          *<code>org.eclipse.neoscada.protocol.iec60870.ASDUAddressType</code>          * type.          *           * Group: connection          */
DECL|method|adsuAddressType ( String adsuAddressType)
specifier|default
name|ClientEndpointProducerBuilder
name|adsuAddressType
parameter_list|(
name|String
name|adsuAddressType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"adsuAddressType"
argument_list|,
name|adsuAddressType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cause of transmission type. May be either SIZE_1 or SIZE_2.          *           * The option is a:          *<code>org.eclipse.neoscada.protocol.iec60870.CauseOfTransmissionType</code> type.          *           * Group: connection          */
DECL|method|causeOfTransmissionType ( CauseOfTransmissionType causeOfTransmissionType)
specifier|default
name|ClientEndpointProducerBuilder
name|causeOfTransmissionType
parameter_list|(
name|CauseOfTransmissionType
name|causeOfTransmissionType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"causeOfTransmissionType"
argument_list|,
name|causeOfTransmissionType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cause of transmission type. May be either SIZE_1 or SIZE_2.          *           * The option will be converted to a          *<code>org.eclipse.neoscada.protocol.iec60870.CauseOfTransmissionType</code> type.          *           * Group: connection          */
DECL|method|causeOfTransmissionType ( String causeOfTransmissionType)
specifier|default
name|ClientEndpointProducerBuilder
name|causeOfTransmissionType
parameter_list|(
name|String
name|causeOfTransmissionType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"causeOfTransmissionType"
argument_list|,
name|causeOfTransmissionType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The information address size. May be either SIZE_1, SIZE_2 or SIZE_3.          *           * The option is a:          *<code>org.eclipse.neoscada.protocol.iec60870.InformationObjectAddressType</code> type.          *           * Group: connection          */
DECL|method|informationObjectAddressType ( InformationObjectAddressType informationObjectAddressType)
specifier|default
name|ClientEndpointProducerBuilder
name|informationObjectAddressType
parameter_list|(
name|InformationObjectAddressType
name|informationObjectAddressType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"informationObjectAddressType"
argument_list|,
name|informationObjectAddressType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The information address size. May be either SIZE_1, SIZE_2 or SIZE_3.          *           * The option will be converted to a          *<code>org.eclipse.neoscada.protocol.iec60870.InformationObjectAddressType</code> type.          *           * Group: connection          */
DECL|method|informationObjectAddressType ( String informationObjectAddressType)
specifier|default
name|ClientEndpointProducerBuilder
name|informationObjectAddressType
parameter_list|(
name|String
name|informationObjectAddressType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"informationObjectAddressType"
argument_list|,
name|informationObjectAddressType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Parameter K - Maximum number of un-acknowledged messages.          *           * The option is a:<code>short</code> type.          *           * Group: connection          */
DECL|method|maxUnacknowledged ( short maxUnacknowledged)
specifier|default
name|ClientEndpointProducerBuilder
name|maxUnacknowledged
parameter_list|(
name|short
name|maxUnacknowledged
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxUnacknowledged"
argument_list|,
name|maxUnacknowledged
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Parameter K - Maximum number of un-acknowledged messages.          *           * The option will be converted to a<code>short</code> type.          *           * Group: connection          */
DECL|method|maxUnacknowledged ( String maxUnacknowledged)
specifier|default
name|ClientEndpointProducerBuilder
name|maxUnacknowledged
parameter_list|(
name|String
name|maxUnacknowledged
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxUnacknowledged"
argument_list|,
name|maxUnacknowledged
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T1 in milliseconds.          *           * The option is a:<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout1 (int timeout1)
specifier|default
name|ClientEndpointProducerBuilder
name|timeout1
parameter_list|(
name|int
name|timeout1
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout1"
argument_list|,
name|timeout1
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T1 in milliseconds.          *           * The option will be converted to a<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout1 (String timeout1)
specifier|default
name|ClientEndpointProducerBuilder
name|timeout1
parameter_list|(
name|String
name|timeout1
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout1"
argument_list|,
name|timeout1
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T2 in milliseconds.          *           * The option is a:<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout2 (int timeout2)
specifier|default
name|ClientEndpointProducerBuilder
name|timeout2
parameter_list|(
name|int
name|timeout2
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout2"
argument_list|,
name|timeout2
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T2 in milliseconds.          *           * The option will be converted to a<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout2 (String timeout2)
specifier|default
name|ClientEndpointProducerBuilder
name|timeout2
parameter_list|(
name|String
name|timeout2
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout2"
argument_list|,
name|timeout2
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T3 in milliseconds.          *           * The option is a:<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout3 (int timeout3)
specifier|default
name|ClientEndpointProducerBuilder
name|timeout3
parameter_list|(
name|int
name|timeout3
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout3"
argument_list|,
name|timeout3
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T3 in milliseconds.          *           * The option will be converted to a<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout3 (String timeout3)
specifier|default
name|ClientEndpointProducerBuilder
name|timeout3
parameter_list|(
name|String
name|timeout3
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout3"
argument_list|,
name|timeout3
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to include the source address.          *           * The option is a:<code>byte</code> type.          *           * Group: data          */
DECL|method|causeSourceAddress ( byte causeSourceAddress)
specifier|default
name|ClientEndpointProducerBuilder
name|causeSourceAddress
parameter_list|(
name|byte
name|causeSourceAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"causeSourceAddress"
argument_list|,
name|causeSourceAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to include the source address.          *           * The option will be converted to a<code>byte</code> type.          *           * Group: data          */
DECL|method|causeSourceAddress ( String causeSourceAddress)
specifier|default
name|ClientEndpointProducerBuilder
name|causeSourceAddress
parameter_list|(
name|String
name|causeSourceAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"causeSourceAddress"
argument_list|,
name|causeSourceAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether background scan transmissions should be ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: data          */
DECL|method|ignoreBackgroundScan ( boolean ignoreBackgroundScan)
specifier|default
name|ClientEndpointProducerBuilder
name|ignoreBackgroundScan
parameter_list|(
name|boolean
name|ignoreBackgroundScan
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ignoreBackgroundScan"
argument_list|,
name|ignoreBackgroundScan
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether background scan transmissions should be ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: data          */
DECL|method|ignoreBackgroundScan ( String ignoreBackgroundScan)
specifier|default
name|ClientEndpointProducerBuilder
name|ignoreBackgroundScan
parameter_list|(
name|String
name|ignoreBackgroundScan
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ignoreBackgroundScan"
argument_list|,
name|ignoreBackgroundScan
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to ignore or respect DST.          *           * The option is a:<code>boolean</code> type.          *           * Group: data          */
DECL|method|ignoreDaylightSavingTime ( boolean ignoreDaylightSavingTime)
specifier|default
name|ClientEndpointProducerBuilder
name|ignoreDaylightSavingTime
parameter_list|(
name|boolean
name|ignoreDaylightSavingTime
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ignoreDaylightSavingTime"
argument_list|,
name|ignoreDaylightSavingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to ignore or respect DST.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: data          */
DECL|method|ignoreDaylightSavingTime ( String ignoreDaylightSavingTime)
specifier|default
name|ClientEndpointProducerBuilder
name|ignoreDaylightSavingTime
parameter_list|(
name|String
name|ignoreDaylightSavingTime
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ignoreDaylightSavingTime"
argument_list|,
name|ignoreDaylightSavingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timezone to use. May be any Java time zone string.          *           * The option is a:<code>java.util.TimeZone</code> type.          *           * Group: data          */
DECL|method|timeZone (TimeZone timeZone)
specifier|default
name|ClientEndpointProducerBuilder
name|timeZone
parameter_list|(
name|TimeZone
name|timeZone
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeZone"
argument_list|,
name|timeZone
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timezone to use. May be any Java time zone string.          *           * The option will be converted to a<code>java.util.TimeZone</code>          * type.          *           * Group: data          */
DECL|method|timeZone (String timeZone)
specifier|default
name|ClientEndpointProducerBuilder
name|timeZone
parameter_list|(
name|String
name|timeZone
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeZone"
argument_list|,
name|timeZone
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An identifier grouping connection instances.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: id          */
DECL|method|connectionId (String connectionId)
specifier|default
name|ClientEndpointProducerBuilder
name|connectionId
parameter_list|(
name|String
name|connectionId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectionId"
argument_list|,
name|connectionId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the IEC 60870 Client      * component.      */
DECL|interface|AdvancedClientEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedClientEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|ClientEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|ClientEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedClientEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedClientEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedClientEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedClientEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the IEC 60870 Client component.      */
DECL|interface|ClientEndpointBuilder
specifier|public
interface|interface
name|ClientEndpointBuilder
extends|extends
name|ClientEndpointConsumerBuilder
extends|,
name|ClientEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedClientEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedClientEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Data module options.          *           * The option is a:          *<code>org.eclipse.neoscada.protocol.iec60870.client.data.DataModuleOptions</code> type.          *           * Group: common          */
DECL|method|dataModuleOptions (Object dataModuleOptions)
specifier|default
name|ClientEndpointBuilder
name|dataModuleOptions
parameter_list|(
name|Object
name|dataModuleOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataModuleOptions"
argument_list|,
name|dataModuleOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Data module options.          *           * The option will be converted to a          *<code>org.eclipse.neoscada.protocol.iec60870.client.data.DataModuleOptions</code> type.          *           * Group: common          */
DECL|method|dataModuleOptions (String dataModuleOptions)
specifier|default
name|ClientEndpointBuilder
name|dataModuleOptions
parameter_list|(
name|String
name|dataModuleOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataModuleOptions"
argument_list|,
name|dataModuleOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Protocol options.          *           * The option is a:          *<code>org.eclipse.neoscada.protocol.iec60870.ProtocolOptions</code>          * type.          *           * Group: common          */
DECL|method|protocolOptions (Object protocolOptions)
specifier|default
name|ClientEndpointBuilder
name|protocolOptions
parameter_list|(
name|Object
name|protocolOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"protocolOptions"
argument_list|,
name|protocolOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Protocol options.          *           * The option will be converted to a          *<code>org.eclipse.neoscada.protocol.iec60870.ProtocolOptions</code>          * type.          *           * Group: common          */
DECL|method|protocolOptions (String protocolOptions)
specifier|default
name|ClientEndpointBuilder
name|protocolOptions
parameter_list|(
name|String
name|protocolOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"protocolOptions"
argument_list|,
name|protocolOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Parameter W - Acknowledgment window.          *           * The option is a:<code>short</code> type.          *           * Group: connection          */
DECL|method|acknowledgeWindow (short acknowledgeWindow)
specifier|default
name|ClientEndpointBuilder
name|acknowledgeWindow
parameter_list|(
name|short
name|acknowledgeWindow
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"acknowledgeWindow"
argument_list|,
name|acknowledgeWindow
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Parameter W - Acknowledgment window.          *           * The option will be converted to a<code>short</code> type.          *           * Group: connection          */
DECL|method|acknowledgeWindow (String acknowledgeWindow)
specifier|default
name|ClientEndpointBuilder
name|acknowledgeWindow
parameter_list|(
name|String
name|acknowledgeWindow
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"acknowledgeWindow"
argument_list|,
name|acknowledgeWindow
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The common ASDU address size. May be either SIZE_1 or SIZE_2.          *           * The option is a:          *<code>org.eclipse.neoscada.protocol.iec60870.ASDUAddressType</code>          * type.          *           * Group: connection          */
DECL|method|adsuAddressType ( ASDUAddressType adsuAddressType)
specifier|default
name|ClientEndpointBuilder
name|adsuAddressType
parameter_list|(
name|ASDUAddressType
name|adsuAddressType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"adsuAddressType"
argument_list|,
name|adsuAddressType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The common ASDU address size. May be either SIZE_1 or SIZE_2.          *           * The option will be converted to a          *<code>org.eclipse.neoscada.protocol.iec60870.ASDUAddressType</code>          * type.          *           * Group: connection          */
DECL|method|adsuAddressType (String adsuAddressType)
specifier|default
name|ClientEndpointBuilder
name|adsuAddressType
parameter_list|(
name|String
name|adsuAddressType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"adsuAddressType"
argument_list|,
name|adsuAddressType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cause of transmission type. May be either SIZE_1 or SIZE_2.          *           * The option is a:          *<code>org.eclipse.neoscada.protocol.iec60870.CauseOfTransmissionType</code> type.          *           * Group: connection          */
DECL|method|causeOfTransmissionType ( CauseOfTransmissionType causeOfTransmissionType)
specifier|default
name|ClientEndpointBuilder
name|causeOfTransmissionType
parameter_list|(
name|CauseOfTransmissionType
name|causeOfTransmissionType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"causeOfTransmissionType"
argument_list|,
name|causeOfTransmissionType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cause of transmission type. May be either SIZE_1 or SIZE_2.          *           * The option will be converted to a          *<code>org.eclipse.neoscada.protocol.iec60870.CauseOfTransmissionType</code> type.          *           * Group: connection          */
DECL|method|causeOfTransmissionType ( String causeOfTransmissionType)
specifier|default
name|ClientEndpointBuilder
name|causeOfTransmissionType
parameter_list|(
name|String
name|causeOfTransmissionType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"causeOfTransmissionType"
argument_list|,
name|causeOfTransmissionType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The information address size. May be either SIZE_1, SIZE_2 or SIZE_3.          *           * The option is a:          *<code>org.eclipse.neoscada.protocol.iec60870.InformationObjectAddressType</code> type.          *           * Group: connection          */
DECL|method|informationObjectAddressType ( InformationObjectAddressType informationObjectAddressType)
specifier|default
name|ClientEndpointBuilder
name|informationObjectAddressType
parameter_list|(
name|InformationObjectAddressType
name|informationObjectAddressType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"informationObjectAddressType"
argument_list|,
name|informationObjectAddressType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The information address size. May be either SIZE_1, SIZE_2 or SIZE_3.          *           * The option will be converted to a          *<code>org.eclipse.neoscada.protocol.iec60870.InformationObjectAddressType</code> type.          *           * Group: connection          */
DECL|method|informationObjectAddressType ( String informationObjectAddressType)
specifier|default
name|ClientEndpointBuilder
name|informationObjectAddressType
parameter_list|(
name|String
name|informationObjectAddressType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"informationObjectAddressType"
argument_list|,
name|informationObjectAddressType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Parameter K - Maximum number of un-acknowledged messages.          *           * The option is a:<code>short</code> type.          *           * Group: connection          */
DECL|method|maxUnacknowledged (short maxUnacknowledged)
specifier|default
name|ClientEndpointBuilder
name|maxUnacknowledged
parameter_list|(
name|short
name|maxUnacknowledged
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxUnacknowledged"
argument_list|,
name|maxUnacknowledged
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Parameter K - Maximum number of un-acknowledged messages.          *           * The option will be converted to a<code>short</code> type.          *           * Group: connection          */
DECL|method|maxUnacknowledged (String maxUnacknowledged)
specifier|default
name|ClientEndpointBuilder
name|maxUnacknowledged
parameter_list|(
name|String
name|maxUnacknowledged
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxUnacknowledged"
argument_list|,
name|maxUnacknowledged
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T1 in milliseconds.          *           * The option is a:<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout1 (int timeout1)
specifier|default
name|ClientEndpointBuilder
name|timeout1
parameter_list|(
name|int
name|timeout1
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout1"
argument_list|,
name|timeout1
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T1 in milliseconds.          *           * The option will be converted to a<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout1 (String timeout1)
specifier|default
name|ClientEndpointBuilder
name|timeout1
parameter_list|(
name|String
name|timeout1
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout1"
argument_list|,
name|timeout1
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T2 in milliseconds.          *           * The option is a:<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout2 (int timeout2)
specifier|default
name|ClientEndpointBuilder
name|timeout2
parameter_list|(
name|int
name|timeout2
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout2"
argument_list|,
name|timeout2
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T2 in milliseconds.          *           * The option will be converted to a<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout2 (String timeout2)
specifier|default
name|ClientEndpointBuilder
name|timeout2
parameter_list|(
name|String
name|timeout2
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout2"
argument_list|,
name|timeout2
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T3 in milliseconds.          *           * The option is a:<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout3 (int timeout3)
specifier|default
name|ClientEndpointBuilder
name|timeout3
parameter_list|(
name|int
name|timeout3
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout3"
argument_list|,
name|timeout3
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout T3 in milliseconds.          *           * The option will be converted to a<code>int</code> type.          *           * Group: connection          */
DECL|method|timeout3 (String timeout3)
specifier|default
name|ClientEndpointBuilder
name|timeout3
parameter_list|(
name|String
name|timeout3
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout3"
argument_list|,
name|timeout3
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to include the source address.          *           * The option is a:<code>byte</code> type.          *           * Group: data          */
DECL|method|causeSourceAddress (byte causeSourceAddress)
specifier|default
name|ClientEndpointBuilder
name|causeSourceAddress
parameter_list|(
name|byte
name|causeSourceAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"causeSourceAddress"
argument_list|,
name|causeSourceAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to include the source address.          *           * The option will be converted to a<code>byte</code> type.          *           * Group: data          */
DECL|method|causeSourceAddress ( String causeSourceAddress)
specifier|default
name|ClientEndpointBuilder
name|causeSourceAddress
parameter_list|(
name|String
name|causeSourceAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"causeSourceAddress"
argument_list|,
name|causeSourceAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether background scan transmissions should be ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: data          */
DECL|method|ignoreBackgroundScan ( boolean ignoreBackgroundScan)
specifier|default
name|ClientEndpointBuilder
name|ignoreBackgroundScan
parameter_list|(
name|boolean
name|ignoreBackgroundScan
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ignoreBackgroundScan"
argument_list|,
name|ignoreBackgroundScan
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether background scan transmissions should be ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: data          */
DECL|method|ignoreBackgroundScan ( String ignoreBackgroundScan)
specifier|default
name|ClientEndpointBuilder
name|ignoreBackgroundScan
parameter_list|(
name|String
name|ignoreBackgroundScan
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ignoreBackgroundScan"
argument_list|,
name|ignoreBackgroundScan
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to ignore or respect DST.          *           * The option is a:<code>boolean</code> type.          *           * Group: data          */
DECL|method|ignoreDaylightSavingTime ( boolean ignoreDaylightSavingTime)
specifier|default
name|ClientEndpointBuilder
name|ignoreDaylightSavingTime
parameter_list|(
name|boolean
name|ignoreDaylightSavingTime
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ignoreDaylightSavingTime"
argument_list|,
name|ignoreDaylightSavingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to ignore or respect DST.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: data          */
DECL|method|ignoreDaylightSavingTime ( String ignoreDaylightSavingTime)
specifier|default
name|ClientEndpointBuilder
name|ignoreDaylightSavingTime
parameter_list|(
name|String
name|ignoreDaylightSavingTime
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ignoreDaylightSavingTime"
argument_list|,
name|ignoreDaylightSavingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timezone to use. May be any Java time zone string.          *           * The option is a:<code>java.util.TimeZone</code> type.          *           * Group: data          */
DECL|method|timeZone (TimeZone timeZone)
specifier|default
name|ClientEndpointBuilder
name|timeZone
parameter_list|(
name|TimeZone
name|timeZone
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeZone"
argument_list|,
name|timeZone
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timezone to use. May be any Java time zone string.          *           * The option will be converted to a<code>java.util.TimeZone</code>          * type.          *           * Group: data          */
DECL|method|timeZone (String timeZone)
specifier|default
name|ClientEndpointBuilder
name|timeZone
parameter_list|(
name|String
name|timeZone
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeZone"
argument_list|,
name|timeZone
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An identifier grouping connection instances.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: id          */
DECL|method|connectionId (String connectionId)
specifier|default
name|ClientEndpointBuilder
name|connectionId
parameter_list|(
name|String
name|connectionId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectionId"
argument_list|,
name|connectionId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the IEC 60870 Client component.      */
DECL|interface|AdvancedClientEndpointBuilder
specifier|public
interface|interface
name|AdvancedClientEndpointBuilder
extends|extends
name|AdvancedClientEndpointConsumerBuilder
extends|,
name|AdvancedClientEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|ClientEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|ClientEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedClientEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedClientEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedClientEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedClientEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.eclipse.neoscada.protocol.iec60870.ASDUAddressType</code> enum.      */
DECL|enum|ASDUAddressType
enum|enum
name|ASDUAddressType
block|{
DECL|enumConstant|SIZE_1
name|SIZE_1
block|,
DECL|enumConstant|SIZE_2
name|SIZE_2
block|;     }
comment|/**      * Proxy enum for      *<code>org.eclipse.neoscada.protocol.iec60870.CauseOfTransmissionType</code> enum.      */
DECL|enum|CauseOfTransmissionType
enum|enum
name|CauseOfTransmissionType
block|{
DECL|enumConstant|SIZE_1
name|SIZE_1
block|,
DECL|enumConstant|SIZE_2
name|SIZE_2
block|;     }
comment|/**      * Proxy enum for      *<code>org.eclipse.neoscada.protocol.iec60870.InformationObjectAddressType</code> enum.      */
DECL|enum|InformationObjectAddressType
enum|enum
name|InformationObjectAddressType
block|{
DECL|enumConstant|SIZE_1
name|SIZE_1
block|,
DECL|enumConstant|SIZE_2
name|SIZE_2
block|,
DECL|enumConstant|SIZE_3
name|SIZE_3
block|;     }
comment|/**      * IEC 60870 Client (camel-iec60870)      * IEC 60870 component used for telecontrol (supervisory control and data      * acquisition) such as controlling electric power transmission grids and      * other geographically widespread control systems.      *       * Category: iot      * Available as of version: 2.20      * Maven coordinates: org.apache.camel:camel-iec60870      *       * Syntax:<code>iec60870-client:uriPath</code>      *       * Path parameter: uriPath (required)      * The object information address      */
DECL|method|iec60870Client (String path)
specifier|default
name|ClientEndpointBuilder
name|iec60870Client
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|ClientEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|ClientEndpointBuilder
implements|,
name|AdvancedClientEndpointBuilder
block|{
specifier|public
name|ClientEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"iec60870-client"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ClientEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

