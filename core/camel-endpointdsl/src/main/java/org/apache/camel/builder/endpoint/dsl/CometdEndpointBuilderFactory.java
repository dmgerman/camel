begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The cometd component is a transport for working with the Jetty implementation  * of the cometd/bayeux protocol.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|CometdEndpointBuilderFactory
specifier|public
interface|interface
name|CometdEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the CometD component.      */
DECL|interface|CometdEndpointConsumerBuilder
specifier|public
interface|interface
name|CometdEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCometdEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCometdEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The origins domain that support to cross, if the crosssOriginFilterOn          * is true.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|allowedOrigins ( String allowedOrigins)
specifier|default
name|CometdEndpointConsumerBuilder
name|allowedOrigins
parameter_list|(
name|String
name|allowedOrigins
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowedOrigins"
argument_list|,
name|allowedOrigins
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The root directory for the web resources or classpath. Use the          * protocol file: or classpath: depending if you want that the component          * loads the resource from file system or classpath. Classpath is          * required for OSGI deployment where the resources are packaged in the          * jar.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|baseResource (String baseResource)
specifier|default
name|CometdEndpointConsumerBuilder
name|baseResource
parameter_list|(
name|String
name|baseResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"baseResource"
argument_list|,
name|baseResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the server will support for cross-domain filtering.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|crossOriginFilterOn ( boolean crossOriginFilterOn)
specifier|default
name|CometdEndpointConsumerBuilder
name|crossOriginFilterOn
parameter_list|(
name|boolean
name|crossOriginFilterOn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"crossOriginFilterOn"
argument_list|,
name|crossOriginFilterOn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the server will support for cross-domain filtering.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|crossOriginFilterOn ( String crossOriginFilterOn)
specifier|default
name|CometdEndpointConsumerBuilder
name|crossOriginFilterOn
parameter_list|(
name|String
name|crossOriginFilterOn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"crossOriginFilterOn"
argument_list|,
name|crossOriginFilterOn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The filterPath will be used by the CrossOriginFilter, if the          * crosssOriginFilterOn is true.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|filterPath (String filterPath)
specifier|default
name|CometdEndpointConsumerBuilder
name|filterPath
parameter_list|(
name|String
name|filterPath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filterPath"
argument_list|,
name|filterPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The client side poll timeout in milliseconds. How long a client will          * wait between reconnects.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|interval (int interval)
specifier|default
name|CometdEndpointConsumerBuilder
name|interval
parameter_list|(
name|int
name|interval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"interval"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The client side poll timeout in milliseconds. How long a client will          * wait between reconnects.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|interval (String interval)
specifier|default
name|CometdEndpointConsumerBuilder
name|interval
parameter_list|(
name|String
name|interval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"interval"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the server will accept JSON wrapped in a comment and will          * generate JSON wrapped in a comment. This is a defence against Ajax          * Hijacking.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|jsonCommented ( boolean jsonCommented)
specifier|default
name|CometdEndpointConsumerBuilder
name|jsonCommented
parameter_list|(
name|boolean
name|jsonCommented
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jsonCommented"
argument_list|,
name|jsonCommented
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the server will accept JSON wrapped in a comment and will          * generate JSON wrapped in a comment. This is a defence against Ajax          * Hijacking.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|jsonCommented (String jsonCommented)
specifier|default
name|CometdEndpointConsumerBuilder
name|jsonCommented
parameter_list|(
name|String
name|jsonCommented
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jsonCommented"
argument_list|,
name|jsonCommented
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Logging level. 0=none, 1=info, 2=debug.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|logLevel (int logLevel)
specifier|default
name|CometdEndpointConsumerBuilder
name|logLevel
parameter_list|(
name|int
name|logLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"logLevel"
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Logging level. 0=none, 1=info, 2=debug.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|logLevel (String logLevel)
specifier|default
name|CometdEndpointConsumerBuilder
name|logLevel
parameter_list|(
name|String
name|logLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"logLevel"
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The max client side poll timeout in milliseconds. A client will be          * removed if a connection is not received in this time.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxInterval (int maxInterval)
specifier|default
name|CometdEndpointConsumerBuilder
name|maxInterval
parameter_list|(
name|int
name|maxInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxInterval"
argument_list|,
name|maxInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The max client side poll timeout in milliseconds. A client will be          * removed if a connection is not received in this time.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxInterval (String maxInterval)
specifier|default
name|CometdEndpointConsumerBuilder
name|maxInterval
parameter_list|(
name|String
name|maxInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxInterval"
argument_list|,
name|maxInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The client side poll timeout, if multiple connections are detected          * from the same browser.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|multiFrameInterval ( int multiFrameInterval)
specifier|default
name|CometdEndpointConsumerBuilder
name|multiFrameInterval
parameter_list|(
name|int
name|multiFrameInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"multiFrameInterval"
argument_list|,
name|multiFrameInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The client side poll timeout, if multiple connections are detected          * from the same browser.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|multiFrameInterval ( String multiFrameInterval)
specifier|default
name|CometdEndpointConsumerBuilder
name|multiFrameInterval
parameter_list|(
name|String
name|multiFrameInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"multiFrameInterval"
argument_list|,
name|multiFrameInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The server side poll timeout in milliseconds. This is how long the          * server will hold a reconnect request before responding.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|timeout (int timeout)
specifier|default
name|CometdEndpointConsumerBuilder
name|timeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The server side poll timeout in milliseconds. This is how long the          * server will hold a reconnect request before responding.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|timeout (String timeout)
specifier|default
name|CometdEndpointConsumerBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|CometdEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|CometdEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to include the server session headers in the Camel message          * when creating a Camel Message for incoming requests.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sessionHeadersEnabled ( boolean sessionHeadersEnabled)
specifier|default
name|CometdEndpointConsumerBuilder
name|sessionHeadersEnabled
parameter_list|(
name|boolean
name|sessionHeadersEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionHeadersEnabled"
argument_list|,
name|sessionHeadersEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to include the server session headers in the Camel message          * when creating a Camel Message for incoming requests.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sessionHeadersEnabled ( String sessionHeadersEnabled)
specifier|default
name|CometdEndpointConsumerBuilder
name|sessionHeadersEnabled
parameter_list|(
name|String
name|sessionHeadersEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionHeadersEnabled"
argument_list|,
name|sessionHeadersEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the CometD component.      */
DECL|interface|AdvancedCometdEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedCometdEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CometdEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CometdEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedCometdEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedCometdEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedCometdEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedCometdEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCometdEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCometdEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedCometdEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedCometdEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the CometD component.      */
DECL|interface|CometdEndpointProducerBuilder
specifier|public
interface|interface
name|CometdEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCometdEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCometdEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The origins domain that support to cross, if the crosssOriginFilterOn          * is true.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|allowedOrigins ( String allowedOrigins)
specifier|default
name|CometdEndpointProducerBuilder
name|allowedOrigins
parameter_list|(
name|String
name|allowedOrigins
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowedOrigins"
argument_list|,
name|allowedOrigins
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The root directory for the web resources or classpath. Use the          * protocol file: or classpath: depending if you want that the component          * loads the resource from file system or classpath. Classpath is          * required for OSGI deployment where the resources are packaged in the          * jar.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|baseResource (String baseResource)
specifier|default
name|CometdEndpointProducerBuilder
name|baseResource
parameter_list|(
name|String
name|baseResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"baseResource"
argument_list|,
name|baseResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the server will support for cross-domain filtering.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|crossOriginFilterOn ( boolean crossOriginFilterOn)
specifier|default
name|CometdEndpointProducerBuilder
name|crossOriginFilterOn
parameter_list|(
name|boolean
name|crossOriginFilterOn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"crossOriginFilterOn"
argument_list|,
name|crossOriginFilterOn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the server will support for cross-domain filtering.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|crossOriginFilterOn ( String crossOriginFilterOn)
specifier|default
name|CometdEndpointProducerBuilder
name|crossOriginFilterOn
parameter_list|(
name|String
name|crossOriginFilterOn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"crossOriginFilterOn"
argument_list|,
name|crossOriginFilterOn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The filterPath will be used by the CrossOriginFilter, if the          * crosssOriginFilterOn is true.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|filterPath (String filterPath)
specifier|default
name|CometdEndpointProducerBuilder
name|filterPath
parameter_list|(
name|String
name|filterPath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filterPath"
argument_list|,
name|filterPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The client side poll timeout in milliseconds. How long a client will          * wait between reconnects.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|interval (int interval)
specifier|default
name|CometdEndpointProducerBuilder
name|interval
parameter_list|(
name|int
name|interval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"interval"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The client side poll timeout in milliseconds. How long a client will          * wait between reconnects.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|interval (String interval)
specifier|default
name|CometdEndpointProducerBuilder
name|interval
parameter_list|(
name|String
name|interval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"interval"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the server will accept JSON wrapped in a comment and will          * generate JSON wrapped in a comment. This is a defence against Ajax          * Hijacking.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|jsonCommented ( boolean jsonCommented)
specifier|default
name|CometdEndpointProducerBuilder
name|jsonCommented
parameter_list|(
name|boolean
name|jsonCommented
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jsonCommented"
argument_list|,
name|jsonCommented
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the server will accept JSON wrapped in a comment and will          * generate JSON wrapped in a comment. This is a defence against Ajax          * Hijacking.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|jsonCommented (String jsonCommented)
specifier|default
name|CometdEndpointProducerBuilder
name|jsonCommented
parameter_list|(
name|String
name|jsonCommented
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jsonCommented"
argument_list|,
name|jsonCommented
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Logging level. 0=none, 1=info, 2=debug.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|logLevel (int logLevel)
specifier|default
name|CometdEndpointProducerBuilder
name|logLevel
parameter_list|(
name|int
name|logLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"logLevel"
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Logging level. 0=none, 1=info, 2=debug.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|logLevel (String logLevel)
specifier|default
name|CometdEndpointProducerBuilder
name|logLevel
parameter_list|(
name|String
name|logLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"logLevel"
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The max client side poll timeout in milliseconds. A client will be          * removed if a connection is not received in this time.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxInterval (int maxInterval)
specifier|default
name|CometdEndpointProducerBuilder
name|maxInterval
parameter_list|(
name|int
name|maxInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxInterval"
argument_list|,
name|maxInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The max client side poll timeout in milliseconds. A client will be          * removed if a connection is not received in this time.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxInterval (String maxInterval)
specifier|default
name|CometdEndpointProducerBuilder
name|maxInterval
parameter_list|(
name|String
name|maxInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxInterval"
argument_list|,
name|maxInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The client side poll timeout, if multiple connections are detected          * from the same browser.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|multiFrameInterval ( int multiFrameInterval)
specifier|default
name|CometdEndpointProducerBuilder
name|multiFrameInterval
parameter_list|(
name|int
name|multiFrameInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"multiFrameInterval"
argument_list|,
name|multiFrameInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The client side poll timeout, if multiple connections are detected          * from the same browser.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|multiFrameInterval ( String multiFrameInterval)
specifier|default
name|CometdEndpointProducerBuilder
name|multiFrameInterval
parameter_list|(
name|String
name|multiFrameInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"multiFrameInterval"
argument_list|,
name|multiFrameInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The server side poll timeout in milliseconds. This is how long the          * server will hold a reconnect request before responding.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|timeout (int timeout)
specifier|default
name|CometdEndpointProducerBuilder
name|timeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The server side poll timeout in milliseconds. This is how long the          * server will hold a reconnect request before responding.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|timeout (String timeout)
specifier|default
name|CometdEndpointProducerBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to disconnect local sessions after publishing a message to          * its channel. Disconnecting local session is needed as they are not          * swept by default by CometD, and therefore you can run out of memory.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|disconnectLocalSession ( boolean disconnectLocalSession)
specifier|default
name|CometdEndpointProducerBuilder
name|disconnectLocalSession
parameter_list|(
name|boolean
name|disconnectLocalSession
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnectLocalSession"
argument_list|,
name|disconnectLocalSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to disconnect local sessions after publishing a message to          * its channel. Disconnecting local session is needed as they are not          * swept by default by CometD, and therefore you can run out of memory.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|disconnectLocalSession ( String disconnectLocalSession)
specifier|default
name|CometdEndpointProducerBuilder
name|disconnectLocalSession
parameter_list|(
name|String
name|disconnectLocalSession
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnectLocalSession"
argument_list|,
name|disconnectLocalSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|CometdEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|CometdEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the CometD component.      */
DECL|interface|AdvancedCometdEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedCometdEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CometdEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CometdEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCometdEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCometdEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedCometdEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedCometdEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the CometD component.      */
DECL|interface|CometdEndpointBuilder
specifier|public
interface|interface
name|CometdEndpointBuilder
extends|extends
name|CometdEndpointConsumerBuilder
extends|,
name|CometdEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCometdEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCometdEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The origins domain that support to cross, if the crosssOriginFilterOn          * is true.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|allowedOrigins (String allowedOrigins)
specifier|default
name|CometdEndpointBuilder
name|allowedOrigins
parameter_list|(
name|String
name|allowedOrigins
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowedOrigins"
argument_list|,
name|allowedOrigins
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The root directory for the web resources or classpath. Use the          * protocol file: or classpath: depending if you want that the component          * loads the resource from file system or classpath. Classpath is          * required for OSGI deployment where the resources are packaged in the          * jar.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|baseResource (String baseResource)
specifier|default
name|CometdEndpointBuilder
name|baseResource
parameter_list|(
name|String
name|baseResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"baseResource"
argument_list|,
name|baseResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the server will support for cross-domain filtering.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|crossOriginFilterOn ( boolean crossOriginFilterOn)
specifier|default
name|CometdEndpointBuilder
name|crossOriginFilterOn
parameter_list|(
name|boolean
name|crossOriginFilterOn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"crossOriginFilterOn"
argument_list|,
name|crossOriginFilterOn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the server will support for cross-domain filtering.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|crossOriginFilterOn ( String crossOriginFilterOn)
specifier|default
name|CometdEndpointBuilder
name|crossOriginFilterOn
parameter_list|(
name|String
name|crossOriginFilterOn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"crossOriginFilterOn"
argument_list|,
name|crossOriginFilterOn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The filterPath will be used by the CrossOriginFilter, if the          * crosssOriginFilterOn is true.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|filterPath (String filterPath)
specifier|default
name|CometdEndpointBuilder
name|filterPath
parameter_list|(
name|String
name|filterPath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filterPath"
argument_list|,
name|filterPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The client side poll timeout in milliseconds. How long a client will          * wait between reconnects.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|interval (int interval)
specifier|default
name|CometdEndpointBuilder
name|interval
parameter_list|(
name|int
name|interval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"interval"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The client side poll timeout in milliseconds. How long a client will          * wait between reconnects.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|interval (String interval)
specifier|default
name|CometdEndpointBuilder
name|interval
parameter_list|(
name|String
name|interval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"interval"
argument_list|,
name|interval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the server will accept JSON wrapped in a comment and will          * generate JSON wrapped in a comment. This is a defence against Ajax          * Hijacking.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|jsonCommented (boolean jsonCommented)
specifier|default
name|CometdEndpointBuilder
name|jsonCommented
parameter_list|(
name|boolean
name|jsonCommented
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jsonCommented"
argument_list|,
name|jsonCommented
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the server will accept JSON wrapped in a comment and will          * generate JSON wrapped in a comment. This is a defence against Ajax          * Hijacking.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|jsonCommented (String jsonCommented)
specifier|default
name|CometdEndpointBuilder
name|jsonCommented
parameter_list|(
name|String
name|jsonCommented
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jsonCommented"
argument_list|,
name|jsonCommented
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Logging level. 0=none, 1=info, 2=debug.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|logLevel (int logLevel)
specifier|default
name|CometdEndpointBuilder
name|logLevel
parameter_list|(
name|int
name|logLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"logLevel"
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Logging level. 0=none, 1=info, 2=debug.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|logLevel (String logLevel)
specifier|default
name|CometdEndpointBuilder
name|logLevel
parameter_list|(
name|String
name|logLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"logLevel"
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The max client side poll timeout in milliseconds. A client will be          * removed if a connection is not received in this time.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxInterval (int maxInterval)
specifier|default
name|CometdEndpointBuilder
name|maxInterval
parameter_list|(
name|int
name|maxInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxInterval"
argument_list|,
name|maxInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The max client side poll timeout in milliseconds. A client will be          * removed if a connection is not received in this time.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxInterval (String maxInterval)
specifier|default
name|CometdEndpointBuilder
name|maxInterval
parameter_list|(
name|String
name|maxInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxInterval"
argument_list|,
name|maxInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The client side poll timeout, if multiple connections are detected          * from the same browser.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|multiFrameInterval (int multiFrameInterval)
specifier|default
name|CometdEndpointBuilder
name|multiFrameInterval
parameter_list|(
name|int
name|multiFrameInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"multiFrameInterval"
argument_list|,
name|multiFrameInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The client side poll timeout, if multiple connections are detected          * from the same browser.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|multiFrameInterval ( String multiFrameInterval)
specifier|default
name|CometdEndpointBuilder
name|multiFrameInterval
parameter_list|(
name|String
name|multiFrameInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"multiFrameInterval"
argument_list|,
name|multiFrameInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The server side poll timeout in milliseconds. This is how long the          * server will hold a reconnect request before responding.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|timeout (int timeout)
specifier|default
name|CometdEndpointBuilder
name|timeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The server side poll timeout in milliseconds. This is how long the          * server will hold a reconnect request before responding.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|timeout (String timeout)
specifier|default
name|CometdEndpointBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the CometD component.      */
DECL|interface|AdvancedCometdEndpointBuilder
specifier|public
interface|interface
name|AdvancedCometdEndpointBuilder
extends|extends
name|AdvancedCometdEndpointConsumerBuilder
extends|,
name|AdvancedCometdEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CometdEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CometdEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCometdEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCometdEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedCometdEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedCometdEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * CometD (camel-cometd)      * The cometd component is a transport for working with the Jetty      * implementation of the cometd/bayeux protocol.      *       * Category: websocket      * Available as of version: 2.0      * Maven coordinates: org.apache.camel:camel-cometd      *       * Syntax:<code>cometd:host:port/channelName</code>      *       * Path parameter: host (required)      * Hostname      *       * Path parameter: port (required)      * Host port number      *       * Path parameter: channelName (required)      * The channelName represents a topic that can be subscribed to by the Camel      * endpoints.      */
DECL|method|cometd (String path)
specifier|default
name|CometdEndpointBuilder
name|cometd
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|CometdEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|CometdEndpointBuilder
implements|,
name|AdvancedCometdEndpointBuilder
block|{
specifier|public
name|CometdEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"cometd"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|CometdEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

