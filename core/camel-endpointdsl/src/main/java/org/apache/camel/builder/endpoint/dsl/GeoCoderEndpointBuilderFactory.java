begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_comment
comment|/**  * The geocoder component is used for looking up geocodes (latitude and  * longitude) for a given address, or reverse lookup.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|GeoCoderEndpointBuilderFactory
specifier|public
interface|interface
name|GeoCoderEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint for the Geocoder component.      */
DECL|interface|GeoCoderEndpointBuilder
specifier|public
interface|interface
name|GeoCoderEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedGeoCoderEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedGeoCoderEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether to only enrich the Exchange with headers, and leave the body          * as-is.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|headersOnly (boolean headersOnly)
specifier|default
name|GeoCoderEndpointBuilder
name|headersOnly
parameter_list|(
name|boolean
name|headersOnly
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"headersOnly"
argument_list|,
name|headersOnly
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to only enrich the Exchange with headers, and leave the body          * as-is.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|headersOnly (String headersOnly)
specifier|default
name|GeoCoderEndpointBuilder
name|headersOnly
parameter_list|(
name|String
name|headersOnly
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"headersOnly"
argument_list|,
name|headersOnly
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The language to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|language (String language)
specifier|default
name|GeoCoderEndpointBuilder
name|language
parameter_list|(
name|String
name|language
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"language"
argument_list|,
name|language
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Domain for proxy NTML authentication.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyAuthDomain (String proxyAuthDomain)
specifier|default
name|GeoCoderEndpointBuilder
name|proxyAuthDomain
parameter_list|(
name|String
name|proxyAuthDomain
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxyAuthDomain"
argument_list|,
name|proxyAuthDomain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Optional host for proxy NTML authentication.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyAuthHost (String proxyAuthHost)
specifier|default
name|GeoCoderEndpointBuilder
name|proxyAuthHost
parameter_list|(
name|String
name|proxyAuthHost
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxyAuthHost"
argument_list|,
name|proxyAuthHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Authentication method for proxy, either as Basic, Digest or NTLM.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyAuthMethod (String proxyAuthMethod)
specifier|default
name|GeoCoderEndpointBuilder
name|proxyAuthMethod
parameter_list|(
name|String
name|proxyAuthMethod
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxyAuthMethod"
argument_list|,
name|proxyAuthMethod
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for proxy authentication.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyAuthPassword ( String proxyAuthPassword)
specifier|default
name|GeoCoderEndpointBuilder
name|proxyAuthPassword
parameter_list|(
name|String
name|proxyAuthPassword
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxyAuthPassword"
argument_list|,
name|proxyAuthPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username for proxy authentication.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyAuthUsername ( String proxyAuthUsername)
specifier|default
name|GeoCoderEndpointBuilder
name|proxyAuthUsername
parameter_list|(
name|String
name|proxyAuthUsername
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxyAuthUsername"
argument_list|,
name|proxyAuthUsername
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy host name.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyHost (String proxyHost)
specifier|default
name|GeoCoderEndpointBuilder
name|proxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxyHost"
argument_list|,
name|proxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy port number.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: proxy          */
DECL|method|proxyPort (Integer proxyPort)
specifier|default
name|GeoCoderEndpointBuilder
name|proxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The proxy port number.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: proxy          */
DECL|method|proxyPort (String proxyPort)
specifier|default
name|GeoCoderEndpointBuilder
name|proxyPort
parameter_list|(
name|String
name|proxyPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use google apiKey.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|apiKey (String apiKey)
specifier|default
name|GeoCoderEndpointBuilder
name|apiKey
parameter_list|(
name|String
name|apiKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"apiKey"
argument_list|,
name|apiKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use google premium with this client id.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|clientId (String clientId)
specifier|default
name|GeoCoderEndpointBuilder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientId"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use google premium with this client key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|clientKey (String clientKey)
specifier|default
name|GeoCoderEndpointBuilder
name|clientKey
parameter_list|(
name|String
name|clientKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientKey"
argument_list|,
name|clientKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Geocoder component.      */
DECL|interface|AdvancedGeoCoderEndpointBuilder
specifier|public
interface|interface
name|AdvancedGeoCoderEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|GeoCoderEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|GeoCoderEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedGeoCoderEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedGeoCoderEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedGeoCoderEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedGeoCoderEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Geocoder (camel-geocoder)      * The geocoder component is used for looking up geocodes (latitude and      * longitude) for a given address, or reverse lookup.      *       * Category: api,location      * Available as of version: 2.12      * Maven coordinates: org.apache.camel:camel-geocoder      *       * Syntax:<code>geocoder:address:latlng</code>      *       * Path parameter: address      * The geo address which should be prefixed with address:      *       * Path parameter: latlng      * The geo latitude and longitude which should be prefixed with latlng:      */
DECL|method|geocoder (String path)
specifier|default
name|GeoCoderEndpointBuilder
name|geocoder
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|GeoCoderEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|GeoCoderEndpointBuilder
implements|,
name|AdvancedGeoCoderEndpointBuilder
block|{
specifier|public
name|GeoCoderEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"geocoder"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|GeoCoderEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

