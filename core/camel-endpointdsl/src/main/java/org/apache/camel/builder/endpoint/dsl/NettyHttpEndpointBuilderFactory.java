begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_comment
comment|/**  * Netty HTTP server and client using the Netty 4.x library.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|NettyHttpEndpointBuilderFactory
specifier|public
interface|interface
name|NettyHttpEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Netty4 HTTP component.      */
DECL|interface|NettyHttpEndpointConsumerBuilder
specifier|public
interface|interface
name|NettyHttpEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedNettyHttpEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The protocol to use which is either http, https or proxy - a consumer          * only option.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|protocol (String protocol)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|protocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"protocol"
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The local hostname such as localhost, or 0.0.0.0 when being a          * consumer. The remote HTTP server hostname when using producer.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The host port number.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|port (int port)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The host port number.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Resource path.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|path (String path)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|path
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"path"
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, the producer will ignore the Exchange.HTTP_URI          * header, and use the endpoint's URI for request. You may also set the          * throwExceptionOnFailure to be false to let the producer send all the          * fault response back. The consumer working in the bridge mode will          * skip the gzip compression and WWW URL form encoding (by adding the          * Exchange.SKIP_GZIP_ENCODING and Exchange.SKIP_WWW_FORM_URLENCODED          * headers to the consumed exchange).          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|bridgeEndpoint ( boolean bridgeEndpoint)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|bridgeEndpoint
parameter_list|(
name|boolean
name|bridgeEndpoint
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeEndpoint"
argument_list|,
name|bridgeEndpoint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, the producer will ignore the Exchange.HTTP_URI          * header, and use the endpoint's URI for request. You may also set the          * throwExceptionOnFailure to be false to let the producer send all the          * fault response back. The consumer working in the bridge mode will          * skip the gzip compression and WWW URL form encoding (by adding the          * Exchange.SKIP_GZIP_ENCODING and Exchange.SKIP_WWW_FORM_URLENCODED          * headers to the consumed exchange).          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|bridgeEndpoint ( String bridgeEndpoint)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|bridgeEndpoint
parameter_list|(
name|String
name|bridgeEndpoint
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeEndpoint"
argument_list|,
name|bridgeEndpoint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Netty Channel right after          * use. Can be used for both consumer and producer.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|disconnect (boolean disconnect)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|disconnect
parameter_list|(
name|boolean
name|disconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Netty Channel right after          * use. Can be used for both consumer and producer.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|disconnect (String disconnect)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|disconnect
parameter_list|(
name|String
name|disconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to ensure socket is not closed due to inactivity.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|keepAlive (boolean keepAlive)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|keepAlive
parameter_list|(
name|boolean
name|keepAlive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to ensure socket is not closed due to inactivity.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|keepAlive (String keepAlive)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|keepAlive
parameter_list|(
name|String
name|keepAlive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to facilitate socket multiplexing.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|reuseAddress ( boolean reuseAddress)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|reuseAddress
parameter_list|(
name|boolean
name|reuseAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to facilitate socket multiplexing.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|reuseAddress ( String reuseAddress)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|reuseAddress
parameter_list|(
name|String
name|reuseAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option allows producers and consumers (in client mode) to reuse          * the same Netty Channel for the lifecycle of processing the Exchange.          * This is useful if you need to call a server multiple times in a Camel          * route and want to use the same network connection. When using this,          * the channel is not returned to the connection pool until the Exchange          * is done; or disconnected if the disconnect option is set to true. The          * reused Channel is stored on the Exchange as an exchange property with          * the key NettyConstants#NETTY_CHANNEL which allows you to obtain the          * channel during routing and use it as well.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|reuseChannel ( boolean reuseChannel)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|reuseChannel
parameter_list|(
name|boolean
name|reuseChannel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reuseChannel"
argument_list|,
name|reuseChannel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option allows producers and consumers (in client mode) to reuse          * the same Netty Channel for the lifecycle of processing the Exchange.          * This is useful if you need to call a server multiple times in a Camel          * route and want to use the same network connection. When using this,          * the channel is not returned to the connection pool until the Exchange          * is done; or disconnected if the disconnect option is set to true. The          * reused Channel is stored on the Exchange as an exchange property with          * the key NettyConstants#NETTY_CHANNEL which allows you to obtain the          * channel during routing and use it as well.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|reuseChannel ( String reuseChannel)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|reuseChannel
parameter_list|(
name|String
name|reuseChannel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reuseChannel"
argument_list|,
name|reuseChannel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|sync (boolean sync)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|sync
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|sync (String sync)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|sync
parameter_list|(
name|String
name|sync
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to improve TCP protocol performance.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|tcpNoDelay (boolean tcpNoDelay)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|tcpNoDelay
parameter_list|(
name|boolean
name|tcpNoDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to improve TCP protocol performance.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|tcpNoDelay (String tcpNoDelay)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|tcpNoDelay
parameter_list|(
name|String
name|tcpNoDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not Camel should try to find a target consumer by matching          * the URI prefix if no exact match is found.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|matchOnUriPrefix ( boolean matchOnUriPrefix)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|matchOnUriPrefix
parameter_list|(
name|boolean
name|matchOnUriPrefix
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"matchOnUriPrefix"
argument_list|,
name|matchOnUriPrefix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not Camel should try to find a target consumer by matching          * the URI prefix if no exact match is found.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|matchOnUriPrefix ( String matchOnUriPrefix)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|matchOnUriPrefix
parameter_list|(
name|String
name|matchOnUriPrefix
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"matchOnUriPrefix"
argument_list|,
name|matchOnUriPrefix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to send back HTTP status code 503 when the consumer has been          * suspended. If the option is false then the Netty Acceptor is unbound          * when the consumer is suspended, so clients cannot connect anymore.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|send503whenSuspended ( boolean send503whenSuspended)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|send503whenSuspended
parameter_list|(
name|boolean
name|send503whenSuspended
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"send503whenSuspended"
argument_list|,
name|send503whenSuspended
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to send back HTTP status code 503 when the consumer has been          * suspended. If the option is false then the Netty Acceptor is unbound          * when the consumer is suspended, so clients cannot connect anymore.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|send503whenSuspended ( String send503whenSuspended)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|send503whenSuspended
parameter_list|(
name|String
name|send503whenSuspended
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"send503whenSuspended"
argument_list|,
name|send503whenSuspended
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a single decoder. This options is deprecated use encoders          * instead.          * The option is a<code>io.netty.channel.ChannelHandler</code> type.          * @group codec          */
annotation|@
name|Deprecated
DECL|method|decoder (Object decoder)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|decoder
parameter_list|(
name|Object
name|decoder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoder"
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a single decoder. This options is deprecated use encoders          * instead.          * The option will be converted to a          *<code>io.netty.channel.ChannelHandler</code> type.          * @group codec          */
annotation|@
name|Deprecated
DECL|method|decoder (String decoder)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|decoder
parameter_list|(
name|String
name|decoder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoder"
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of decoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          * The option is a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          * @group codec          */
DECL|method|decoders (List<Object> decoders)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|decoders
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|decoders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoders"
argument_list|,
name|decoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of decoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          * The option will be converted to a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          * @group codec          */
DECL|method|decoders (String decoders)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|decoders
parameter_list|(
name|String
name|decoders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoders"
argument_list|,
name|decoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a single encoder. This options is deprecated use encoders          * instead.          * The option is a<code>io.netty.channel.ChannelHandler</code> type.          * @group codec          */
annotation|@
name|Deprecated
DECL|method|encoder (Object encoder)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|encoder
parameter_list|(
name|Object
name|encoder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoder"
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a single encoder. This options is deprecated use encoders          * instead.          * The option will be converted to a          *<code>io.netty.channel.ChannelHandler</code> type.          * @group codec          */
annotation|@
name|Deprecated
DECL|method|encoder (String encoder)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|encoder
parameter_list|(
name|String
name|encoder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoder"
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of encoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          * The option is a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          * @group codec          */
DECL|method|encoders (List<Object> encoders)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|encoders
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|encoders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoders"
argument_list|,
name|encoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of encoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          * The option will be converted to a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          * @group codec          */
DECL|method|encoders (String encoders)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|encoders
parameter_list|(
name|String
name|encoders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoders"
argument_list|,
name|encoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which protocols to enable when using SSL.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|enabledProtocols ( String enabledProtocols)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|enabledProtocols
parameter_list|(
name|String
name|enabledProtocols
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enabledProtocols"
argument_list|,
name|enabledProtocols
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption.          * The option is a<code>java.io.File</code> type.          * @group security          */
DECL|method|keyStoreFile (File keyStoreFile)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|keyStoreFile
parameter_list|(
name|File
name|keyStoreFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyStoreFile"
argument_list|,
name|keyStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption.          * The option will be converted to a<code>java.io.File</code> type.          * @group security          */
DECL|method|keyStoreFile ( String keyStoreFile)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|keyStoreFile
parameter_list|(
name|String
name|keyStoreFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyStoreFile"
argument_list|,
name|keyStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Keystore format to be used for payload encryption. Defaults to JKS if          * not set.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|keyStoreFormat ( String keyStoreFormat)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|keyStoreFormat
parameter_list|(
name|String
name|keyStoreFormat
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyStoreFormat"
argument_list|,
name|keyStoreFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption. Is loaded          * by default from classpath, but you can prefix with classpath:, file:,          * or http: to load the resource from different systems.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|keyStoreResource ( String keyStoreResource)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|keyStoreResource
parameter_list|(
name|String
name|keyStoreResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyStoreResource"
argument_list|,
name|keyStoreResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures whether the server needs client authentication when using          * SSL.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|needClientAuth ( boolean needClientAuth)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|needClientAuth
parameter_list|(
name|boolean
name|needClientAuth
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"needClientAuth"
argument_list|,
name|needClientAuth
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures whether the server needs client authentication when using          * SSL.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|needClientAuth ( String needClientAuth)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|needClientAuth
parameter_list|(
name|String
name|needClientAuth
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"needClientAuth"
argument_list|,
name|needClientAuth
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password setting to use in order to encrypt/decrypt payloads sent          * using SSH.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|passphrase (String passphrase)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|passphrase
parameter_list|(
name|String
name|passphrase
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"passphrase"
argument_list|,
name|passphrase
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Refers to a          * org.apache.camel.component.netty4.http.NettyHttpSecurityConfiguration          * for configuring secure web resources.          * The option is a          *<code>org.apache.camel.component.netty4.http.NettyHttpSecurityConfiguration</code> type.          * @group security          */
DECL|method|securityConfiguration ( Object securityConfiguration)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|securityConfiguration
parameter_list|(
name|Object
name|securityConfiguration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"securityConfiguration"
argument_list|,
name|securityConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Refers to a          * org.apache.camel.component.netty4.http.NettyHttpSecurityConfiguration          * for configuring secure web resources.          * The option will be converted to a          *<code>org.apache.camel.component.netty4.http.NettyHttpSecurityConfiguration</code> type.          * @group security          */
DECL|method|securityConfiguration ( String securityConfiguration)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|securityConfiguration
parameter_list|(
name|String
name|securityConfiguration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"securityConfiguration"
argument_list|,
name|securityConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure NettyHttpSecurityConfiguration using key/value pairs          * from the map.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          * @group security          */
DECL|method|securityOptions ( Map<String, Object> securityOptions)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|securityOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|securityOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"securityOptions"
argument_list|,
name|securityOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure NettyHttpSecurityConfiguration using key/value pairs          * from the map.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          * @group security          */
DECL|method|securityOptions ( String securityOptions)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|securityOptions
parameter_list|(
name|String
name|securityOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"securityOptions"
argument_list|,
name|securityOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Security provider to be used for payload encryption. Defaults to          * SunX509 if not set.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|securityProvider ( String securityProvider)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|securityProvider
parameter_list|(
name|String
name|securityProvider
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"securityProvider"
argument_list|,
name|securityProvider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to specify whether SSL encryption is applied to this          * endpoint.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|ssl (boolean ssl)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|ssl
parameter_list|(
name|boolean
name|ssl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ssl"
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to specify whether SSL encryption is applied to this          * endpoint.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|ssl (String ssl)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|ssl
parameter_list|(
name|String
name|ssl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ssl"
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When enabled and in SSL mode, then the Netty consumer will enrich the          * Camel Message with headers having information about the client          * certificate such as subject name, issuer name, serial number, and the          * valid date range.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|sslClientCertHeaders ( boolean sslClientCertHeaders)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|sslClientCertHeaders
parameter_list|(
name|boolean
name|sslClientCertHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslClientCertHeaders"
argument_list|,
name|sslClientCertHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When enabled and in SSL mode, then the Netty consumer will enrich the          * Camel Message with headers having information about the client          * certificate such as subject name, issuer name, serial number, and the          * valid date range.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|sslClientCertHeaders ( String sslClientCertHeaders)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|sslClientCertHeaders
parameter_list|(
name|String
name|sslClientCertHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslClientCertHeaders"
argument_list|,
name|sslClientCertHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a class that could be used to return an SSL Handler.          * The option is a<code>io.netty.handler.ssl.SslHandler</code> type.          * @group security          */
DECL|method|sslHandler (Object sslHandler)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|sslHandler
parameter_list|(
name|Object
name|sslHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslHandler"
argument_list|,
name|sslHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a class that could be used to return an SSL Handler.          * The option will be converted to a          *<code>io.netty.handler.ssl.SslHandler</code> type.          * @group security          */
DECL|method|sslHandler (String sslHandler)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|sslHandler
parameter_list|(
name|String
name|sslHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslHandler"
argument_list|,
name|sslHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption.          * The option is a<code>java.io.File</code> type.          * @group security          */
DECL|method|trustStoreFile ( File trustStoreFile)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|trustStoreFile
parameter_list|(
name|File
name|trustStoreFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustStoreFile"
argument_list|,
name|trustStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption.          * The option will be converted to a<code>java.io.File</code> type.          * @group security          */
DECL|method|trustStoreFile ( String trustStoreFile)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|trustStoreFile
parameter_list|(
name|String
name|trustStoreFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustStoreFile"
argument_list|,
name|trustStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption. Is loaded          * by default from classpath, but you can prefix with classpath:, file:,          * or http: to load the resource from different systems.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|trustStoreResource ( String trustStoreResource)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|trustStoreResource
parameter_list|(
name|String
name|trustStoreResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustStoreResource"
argument_list|,
name|trustStoreResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Netty4 HTTP component.      */
DECL|interface|AdvancedNettyHttpEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedNettyHttpEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|NettyHttpEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|NettyHttpEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Allows to configure a backlog for netty consumer (server). Note the          * backlog is just a best effort depending on the OS. Setting this          * option to a value such as 200, 500 or 1000, tells the TCP stack how          * long the accept queue can be If this option is not configured, then          * the backlog depends on OS setting.          * The option is a<code>int</code> type.          * @group consumer (advanced)          */
DECL|method|backlog (int backlog)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|backlog
parameter_list|(
name|int
name|backlog
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backlog"
argument_list|,
name|backlog
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to configure a backlog for netty consumer (server). Note the          * backlog is just a best effort depending on the OS. Setting this          * option to a value such as 200, 500 or 1000, tells the TCP stack how          * long the accept queue can be If this option is not configured, then          * the backlog depends on OS setting.          * The option will be converted to a<code>int</code> type.          * @group consumer (advanced)          */
DECL|method|backlog (String backlog)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|backlog
parameter_list|(
name|String
name|backlog
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backlog"
argument_list|,
name|backlog
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When netty works on nio mode, it uses default bossCount parameter          * from Netty, which is 1. User can use this operation to override the          * default bossCount from Netty.          * The option is a<code>int</code> type.          * @group consumer (advanced)          */
DECL|method|bossCount (int bossCount)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|bossCount
parameter_list|(
name|int
name|bossCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bossCount"
argument_list|,
name|bossCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When netty works on nio mode, it uses default bossCount parameter          * from Netty, which is 1. User can use this operation to override the          * default bossCount from Netty.          * The option will be converted to a<code>int</code> type.          * @group consumer (advanced)          */
DECL|method|bossCount ( String bossCount)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|bossCount
parameter_list|(
name|String
name|bossCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bossCount"
argument_list|,
name|bossCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the BossGroup which could be used for handling the new connection          * of the server side across the NettyEndpoint.          * The option is a<code>io.netty.channel.EventLoopGroup</code> type.          * @group consumer (advanced)          */
DECL|method|bossGroup ( Object bossGroup)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|bossGroup
parameter_list|(
name|Object
name|bossGroup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bossGroup"
argument_list|,
name|bossGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the BossGroup which could be used for handling the new connection          * of the server side across the NettyEndpoint.          * The option will be converted to a          *<code>io.netty.channel.EventLoopGroup</code> type.          * @group consumer (advanced)          */
DECL|method|bossGroup ( String bossGroup)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|bossGroup
parameter_list|(
name|String
name|bossGroup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bossGroup"
argument_list|,
name|bossGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Value in bytes the max content length per chunked frame received on          * the Netty HTTP server.          * The option is a<code>int</code> type.          * @group consumer (advanced)          */
DECL|method|chunkedMaxContentLength ( int chunkedMaxContentLength)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|chunkedMaxContentLength
parameter_list|(
name|int
name|chunkedMaxContentLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"chunkedMaxContentLength"
argument_list|,
name|chunkedMaxContentLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Value in bytes the max content length per chunked frame received on          * the Netty HTTP server.          * The option will be converted to a<code>int</code> type.          * @group consumer (advanced)          */
DECL|method|chunkedMaxContentLength ( String chunkedMaxContentLength)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|chunkedMaxContentLength
parameter_list|(
name|String
name|chunkedMaxContentLength
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"chunkedMaxContentLength"
argument_list|,
name|chunkedMaxContentLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allow using gzip/deflate for compression on the Netty HTTP server if          * the client supports it from the HTTP headers.          * The option is a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|compression ( boolean compression)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|compression
parameter_list|(
name|boolean
name|compression
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"compression"
argument_list|,
name|compression
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allow using gzip/deflate for compression on the Netty HTTP server if          * the client supports it from the HTTP headers.          * The option will be converted to a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|compression ( String compression)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|compression
parameter_list|(
name|String
name|compression
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"compression"
argument_list|,
name|compression
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If sync is enabled then this option dictates NettyConsumer if it          * should disconnect where there is no reply to send back.          * The option is a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|disconnectOnNoReply ( boolean disconnectOnNoReply)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|disconnectOnNoReply
parameter_list|(
name|boolean
name|disconnectOnNoReply
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnectOnNoReply"
argument_list|,
name|disconnectOnNoReply
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If sync is enabled then this option dictates NettyConsumer if it          * should disconnect where there is no reply to send back.          * The option will be converted to a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|disconnectOnNoReply ( String disconnectOnNoReply)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|disconnectOnNoReply
parameter_list|(
name|String
name|disconnectOnNoReply
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnectOnNoReply"
argument_list|,
name|disconnectOnNoReply
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To disable HTTP methods on the Netty HTTP consumer. You can specify          * multiple separated by comma.          * The option is a<code>java.lang.String</code> type.          * @group consumer (advanced)          */
DECL|method|httpMethodRestrict ( String httpMethodRestrict)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|httpMethodRestrict
parameter_list|(
name|String
name|httpMethodRestrict
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpMethodRestrict"
argument_list|,
name|httpMethodRestrict
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is enabled, then during binding from Netty to Camel          * Message then the headers will be mapped as well (eg added as header          * to the Camel Message as well). You can turn off this option to          * disable this. The headers can still be accessed from the          * org.apache.camel.component.netty.http.NettyHttpMessage message with          * the method getHttpRequest() that returns the Netty HTTP request          * io.netty.handler.codec.http.HttpRequest instance.          * The option is a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|mapHeaders ( boolean mapHeaders)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|mapHeaders
parameter_list|(
name|boolean
name|mapHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mapHeaders"
argument_list|,
name|mapHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is enabled, then during binding from Netty to Camel          * Message then the headers will be mapped as well (eg added as header          * to the Camel Message as well). You can turn off this option to          * disable this. The headers can still be accessed from the          * org.apache.camel.component.netty.http.NettyHttpMessage message with          * the method getHttpRequest() that returns the Netty HTTP request          * io.netty.handler.codec.http.HttpRequest instance.          * The option will be converted to a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|mapHeaders ( String mapHeaders)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|mapHeaders
parameter_list|(
name|String
name|mapHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mapHeaders"
argument_list|,
name|mapHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum length of all headers. If the sum of the length of each          * header exceeds this value, a          * io.netty.handler.codec.TooLongFrameException will be raised.          * The option is a<code>int</code> type.          * @group consumer (advanced)          */
DECL|method|maxHeaderSize ( int maxHeaderSize)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|maxHeaderSize
parameter_list|(
name|int
name|maxHeaderSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxHeaderSize"
argument_list|,
name|maxHeaderSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum length of all headers. If the sum of the length of each          * header exceeds this value, a          * io.netty.handler.codec.TooLongFrameException will be raised.          * The option will be converted to a<code>int</code> type.          * @group consumer (advanced)          */
DECL|method|maxHeaderSize ( String maxHeaderSize)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|maxHeaderSize
parameter_list|(
name|String
name|maxHeaderSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxHeaderSize"
argument_list|,
name|maxHeaderSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom NettyServerBootstrapFactory.          * The option is a          *<code>org.apache.camel.component.netty4.NettyServerBootstrapFactory</code> type.          * @group consumer (advanced)          */
DECL|method|nettyServerBootstrapFactory ( Object nettyServerBootstrapFactory)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|nettyServerBootstrapFactory
parameter_list|(
name|Object
name|nettyServerBootstrapFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nettyServerBootstrapFactory"
argument_list|,
name|nettyServerBootstrapFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom NettyServerBootstrapFactory.          * The option will be converted to a          *<code>org.apache.camel.component.netty4.NettyServerBootstrapFactory</code> type.          * @group consumer (advanced)          */
DECL|method|nettyServerBootstrapFactory ( String nettyServerBootstrapFactory)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|nettyServerBootstrapFactory
parameter_list|(
name|String
name|nettyServerBootstrapFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nettyServerBootstrapFactory"
argument_list|,
name|nettyServerBootstrapFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a shared Netty HTTP server. See Netty HTTP Server Example for          * more details.          * The option is a          *<code>org.apache.camel.component.netty4.http.NettySharedHttpServer</code> type.          * @group consumer (advanced)          */
DECL|method|nettySharedHttpServer ( Object nettySharedHttpServer)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|nettySharedHttpServer
parameter_list|(
name|Object
name|nettySharedHttpServer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nettySharedHttpServer"
argument_list|,
name|nettySharedHttpServer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a shared Netty HTTP server. See Netty HTTP Server Example for          * more details.          * The option will be converted to a          *<code>org.apache.camel.component.netty4.http.NettySharedHttpServer</code> type.          * @group consumer (advanced)          */
DECL|method|nettySharedHttpServer ( String nettySharedHttpServer)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|nettySharedHttpServer
parameter_list|(
name|String
name|nettySharedHttpServer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nettySharedHttpServer"
argument_list|,
name|nettySharedHttpServer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If sync is enabled this option dictates NettyConsumer which logging          * level to use when logging a there is no reply to send back.          * The option is a<code>org.apache.camel.LoggingLevel</code> type.          * @group consumer (advanced)          */
DECL|method|noReplyLogLevel ( LoggingLevel noReplyLogLevel)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|noReplyLogLevel
parameter_list|(
name|LoggingLevel
name|noReplyLogLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"noReplyLogLevel"
argument_list|,
name|noReplyLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If sync is enabled this option dictates NettyConsumer which logging          * level to use when logging a there is no reply to send back.          * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          * @group consumer (advanced)          */
DECL|method|noReplyLogLevel ( String noReplyLogLevel)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|noReplyLogLevel
parameter_list|(
name|String
name|noReplyLogLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"noReplyLogLevel"
argument_list|,
name|noReplyLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the server (NettyConsumer) catches an          * java.nio.channels.ClosedChannelException then its logged using this          * logging level. This is used to avoid logging the closed channel          * exceptions, as clients can disconnect abruptly and then cause a flood          * of closed exceptions in the Netty server.          * The option is a<code>org.apache.camel.LoggingLevel</code> type.          * @group consumer (advanced)          */
DECL|method|serverClosedChannelExceptionCaughtLogLevel ( LoggingLevel serverClosedChannelExceptionCaughtLogLevel)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|serverClosedChannelExceptionCaughtLogLevel
parameter_list|(
name|LoggingLevel
name|serverClosedChannelExceptionCaughtLogLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverClosedChannelExceptionCaughtLogLevel"
argument_list|,
name|serverClosedChannelExceptionCaughtLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the server (NettyConsumer) catches an          * java.nio.channels.ClosedChannelException then its logged using this          * logging level. This is used to avoid logging the closed channel          * exceptions, as clients can disconnect abruptly and then cause a flood          * of closed exceptions in the Netty server.          * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          * @group consumer (advanced)          */
DECL|method|serverClosedChannelExceptionCaughtLogLevel ( String serverClosedChannelExceptionCaughtLogLevel)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|serverClosedChannelExceptionCaughtLogLevel
parameter_list|(
name|String
name|serverClosedChannelExceptionCaughtLogLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverClosedChannelExceptionCaughtLogLevel"
argument_list|,
name|serverClosedChannelExceptionCaughtLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the server (NettyConsumer) catches an exception then its logged          * using this logging level.          * The option is a<code>org.apache.camel.LoggingLevel</code> type.          * @group consumer (advanced)          */
DECL|method|serverExceptionCaughtLogLevel ( LoggingLevel serverExceptionCaughtLogLevel)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|serverExceptionCaughtLogLevel
parameter_list|(
name|LoggingLevel
name|serverExceptionCaughtLogLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverExceptionCaughtLogLevel"
argument_list|,
name|serverExceptionCaughtLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the server (NettyConsumer) catches an exception then its logged          * using this logging level.          * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          * @group consumer (advanced)          */
DECL|method|serverExceptionCaughtLogLevel ( String serverExceptionCaughtLogLevel)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|serverExceptionCaughtLogLevel
parameter_list|(
name|String
name|serverExceptionCaughtLogLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverExceptionCaughtLogLevel"
argument_list|,
name|serverExceptionCaughtLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom ServerInitializerFactory.          * The option is a          *<code>org.apache.camel.component.netty4.ServerInitializerFactory</code> type.          * @group consumer (advanced)          */
DECL|method|serverInitializerFactory ( Object serverInitializerFactory)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|serverInitializerFactory
parameter_list|(
name|Object
name|serverInitializerFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverInitializerFactory"
argument_list|,
name|serverInitializerFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom ServerInitializerFactory.          * The option will be converted to a          *<code>org.apache.camel.component.netty4.ServerInitializerFactory</code> type.          * @group consumer (advanced)          */
DECL|method|serverInitializerFactory ( String serverInitializerFactory)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|serverInitializerFactory
parameter_list|(
name|String
name|serverInitializerFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverInitializerFactory"
argument_list|,
name|serverInitializerFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to enable HTTP TRACE for this Netty HTTP consumer.          * By default TRACE is turned off.          * The option is a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|traceEnabled ( boolean traceEnabled)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|traceEnabled
parameter_list|(
name|boolean
name|traceEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"traceEnabled"
argument_list|,
name|traceEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to enable HTTP TRACE for this Netty HTTP consumer.          * By default TRACE is turned off.          * The option will be converted to a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|traceEnabled ( String traceEnabled)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|traceEnabled
parameter_list|(
name|String
name|traceEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"traceEnabled"
argument_list|,
name|traceEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is enabled, then during binding from Netty to Camel          * Message then the header values will be URL decoded (eg %20 will be a          * space character. Notice this option is used by the default          * org.apache.camel.component.netty.http.NettyHttpBinding and therefore          * if you implement a custom          * org.apache.camel.component.netty4.http.NettyHttpBinding then you          * would need to decode the headers accordingly to this option.          * The option is a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|urlDecodeHeaders ( boolean urlDecodeHeaders)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|urlDecodeHeaders
parameter_list|(
name|boolean
name|urlDecodeHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"urlDecodeHeaders"
argument_list|,
name|urlDecodeHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is enabled, then during binding from Netty to Camel          * Message then the header values will be URL decoded (eg %20 will be a          * space character. Notice this option is used by the default          * org.apache.camel.component.netty.http.NettyHttpBinding and therefore          * if you implement a custom          * org.apache.camel.component.netty4.http.NettyHttpBinding then you          * would need to decode the headers accordingly to this option.          * The option will be converted to a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|urlDecodeHeaders ( String urlDecodeHeaders)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|urlDecodeHeaders
parameter_list|(
name|String
name|urlDecodeHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"urlDecodeHeaders"
argument_list|,
name|urlDecodeHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use ordered thread pool, to ensure events are processed          * orderly on the same channel.          * The option is a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|usingExecutorService ( boolean usingExecutorService)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|usingExecutorService
parameter_list|(
name|boolean
name|usingExecutorService
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"usingExecutorService"
argument_list|,
name|usingExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use ordered thread pool, to ensure events are processed          * orderly on the same channel.          * The option will be converted to a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|usingExecutorService ( String usingExecutorService)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|usingExecutorService
parameter_list|(
name|String
name|usingExecutorService
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"usingExecutorService"
argument_list|,
name|usingExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP when transferExchange is true. When set to true,          * serializable objects in headers and properties will be added to the          * exchange. Otherwise Camel will exclude any non-serializable objects          * and log it at WARN level.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|allowSerializedHeaders ( boolean allowSerializedHeaders)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|allowSerializedHeaders
parameter_list|(
name|boolean
name|allowSerializedHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowSerializedHeaders"
argument_list|,
name|allowSerializedHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP when transferExchange is true. When set to true,          * serializable objects in headers and properties will be added to the          * exchange. Otherwise Camel will exclude any non-serializable objects          * and log it at WARN level.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|allowSerializedHeaders ( String allowSerializedHeaders)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|allowSerializedHeaders
parameter_list|(
name|String
name|allowSerializedHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowSerializedHeaders"
argument_list|,
name|allowSerializedHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit ChannelGroup.          * The option is a<code>io.netty.channel.group.ChannelGroup</code>          * type.          * @group advanced          */
DECL|method|channelGroup ( Object channelGroup)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|channelGroup
parameter_list|(
name|Object
name|channelGroup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channelGroup"
argument_list|,
name|channelGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit ChannelGroup.          * The option will be converted to a          *<code>io.netty.channel.group.ChannelGroup</code> type.          * @group advanced          */
DECL|method|channelGroup ( String channelGroup)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|channelGroup
parameter_list|(
name|String
name|channelGroup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channelGroup"
argument_list|,
name|channelGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured NettyHttpConfiguration for configuring          * this endpoint.          * The option is a          *<code>org.apache.camel.component.netty4.http.NettyHttpConfiguration</code> type.          * @group advanced          */
DECL|method|configuration ( Object configuration)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|configuration
parameter_list|(
name|Object
name|configuration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"configuration"
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured NettyHttpConfiguration for configuring          * this endpoint.          * The option will be converted to a          *<code>org.apache.camel.component.netty4.http.NettyHttpConfiguration</code> type.          * @group advanced          */
DECL|method|configuration ( String configuration)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|configuration
parameter_list|(
name|String
name|configuration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"configuration"
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Determines whether or not the raw input stream from Netty          * HttpRequest#getContent() or HttpResponset#getContent() is cached or          * not (Camel will read the stream into a in light-weight memory based          * Stream caching) cache. By default Camel will cache the Netty input          * stream to support reading it multiple times to ensure it Camel can          * retrieve all data from the stream. However you can set this option to          * true when you for example need to access the raw stream, such as          * streaming it directly to a file or other persistent store. Mind that          * if you enable this option, then you cannot read the Netty stream          * multiple times out of the box, and you would need manually to reset          * the reader index on the Netty raw stream. Also Netty will auto-close          * the Netty stream when the Netty HTTP server/HTTP client is done          * processing, which means that if the asynchronous routing engine is in          * use then any asynchronous thread that may continue routing the          * org.apache.camel.Exchange may not be able to read the Netty stream,          * because Netty has closed it.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|disableStreamCache ( boolean disableStreamCache)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|disableStreamCache
parameter_list|(
name|boolean
name|disableStreamCache
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disableStreamCache"
argument_list|,
name|disableStreamCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Determines whether or not the raw input stream from Netty          * HttpRequest#getContent() or HttpResponset#getContent() is cached or          * not (Camel will read the stream into a in light-weight memory based          * Stream caching) cache. By default Camel will cache the Netty input          * stream to support reading it multiple times to ensure it Camel can          * retrieve all data from the stream. However you can set this option to          * true when you for example need to access the raw stream, such as          * streaming it directly to a file or other persistent store. Mind that          * if you enable this option, then you cannot read the Netty stream          * multiple times out of the box, and you would need manually to reset          * the reader index on the Netty raw stream. Also Netty will auto-close          * the Netty stream when the Netty HTTP server/HTTP client is done          * processing, which means that if the asynchronous routing engine is in          * use then any asynchronous thread that may continue routing the          * org.apache.camel.Exchange may not be able to read the Netty stream,          * because Netty has closed it.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|disableStreamCache ( String disableStreamCache)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|disableStreamCache
parameter_list|(
name|String
name|disableStreamCache
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disableStreamCache"
argument_list|,
name|disableStreamCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter          * headers.          * The option is a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter          * headers.          * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use native transport instead of NIO. Native transport          * takes advantage of the host operating system and is only supported on          * some platforms. You need to add the netty JAR for the host operating          * system you are using. See more details at:          * http://netty.io/wiki/native-transports.html.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|nativeTransport ( boolean nativeTransport)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|nativeTransport
parameter_list|(
name|boolean
name|nativeTransport
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nativeTransport"
argument_list|,
name|nativeTransport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use native transport instead of NIO. Native transport          * takes advantage of the host operating system and is only supported on          * some platforms. You need to add the netty JAR for the host operating          * system you are using. See more details at:          * http://netty.io/wiki/native-transports.html.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|nativeTransport ( String nativeTransport)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|nativeTransport
parameter_list|(
name|String
name|nativeTransport
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nativeTransport"
argument_list|,
name|nativeTransport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom          * org.apache.camel.component.netty4.http.NettyHttpBinding for binding          * to/from Netty and Camel Message API.          * The option is a          *<code>org.apache.camel.component.netty4.http.NettyHttpBinding</code>          * type.          * @group advanced          */
DECL|method|nettyHttpBinding ( Object nettyHttpBinding)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|nettyHttpBinding
parameter_list|(
name|Object
name|nettyHttpBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nettyHttpBinding"
argument_list|,
name|nettyHttpBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom          * org.apache.camel.component.netty4.http.NettyHttpBinding for binding          * to/from Netty and Camel Message API.          * The option will be converted to a          *<code>org.apache.camel.component.netty4.http.NettyHttpBinding</code>          * type.          * @group advanced          */
DECL|method|nettyHttpBinding ( String nettyHttpBinding)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|nettyHttpBinding
parameter_list|(
name|String
name|nettyHttpBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nettyHttpBinding"
argument_list|,
name|nettyHttpBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to configure additional netty options using option. as prefix.          * For example option.child.keepAlive=false to set the netty option          * child.keepAlive=false. See the Netty documentation for possible          * options that can be used.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          * @group advanced          */
DECL|method|options ( Map<String, Object> options)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|options
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"options"
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to configure additional netty options using option. as prefix.          * For example option.child.keepAlive=false to set the netty option          * child.keepAlive=false. See the Netty documentation for possible          * options that can be used.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          * @group advanced          */
DECL|method|options (String options)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|options
parameter_list|(
name|String
name|options
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"options"
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during inbound communication.          * Size is bytes.          * The option is a<code>int</code> type.          * @group advanced          */
DECL|method|receiveBufferSize ( int receiveBufferSize)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|receiveBufferSize
parameter_list|(
name|int
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during inbound communication.          * Size is bytes.          * The option will be converted to a<code>int</code> type.          * @group advanced          */
DECL|method|receiveBufferSize ( String receiveBufferSize)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|receiveBufferSize
parameter_list|(
name|String
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the buffer size predictor. See details at Jetty          * documentation and this mail thread.          * The option is a<code>int</code> type.          * @group advanced          */
DECL|method|receiveBufferSizePredictor ( int receiveBufferSizePredictor)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|receiveBufferSizePredictor
parameter_list|(
name|int
name|receiveBufferSizePredictor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSizePredictor"
argument_list|,
name|receiveBufferSizePredictor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the buffer size predictor. See details at Jetty          * documentation and this mail thread.          * The option will be converted to a<code>int</code> type.          * @group advanced          */
DECL|method|receiveBufferSizePredictor ( String receiveBufferSizePredictor)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|receiveBufferSizePredictor
parameter_list|(
name|String
name|receiveBufferSizePredictor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSizePredictor"
argument_list|,
name|receiveBufferSizePredictor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during outbound communication.          * Size is bytes.          * The option is a<code>int</code> type.          * @group advanced          */
DECL|method|sendBufferSize ( int sendBufferSize)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|sendBufferSize
parameter_list|(
name|int
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during outbound communication.          * Size is bytes.          * The option will be converted to a<code>int</code> type.          * @group advanced          */
DECL|method|sendBufferSize ( String sendBufferSize)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|sendBufferSize
parameter_list|(
name|String
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled and an Exchange failed processing on the consumer side,          * and if the caused Exception was send back serialized in the response          * as a application/x-java-serialized-object content type. On the          * producer side the exception will be deserialized and thrown as is,          * instead of the HttpOperationFailedException. The caused exception is          * required to be serialized. This is by default turned off. If you          * enable this then be aware that Java will deserialize the incoming          * data from the request to Java and that can be a potential security          * risk.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferException ( boolean transferException)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|transferException
parameter_list|(
name|boolean
name|transferException
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled and an Exchange failed processing on the consumer side,          * and if the caused Exception was send back serialized in the response          * as a application/x-java-serialized-object content type. On the          * producer side the exception will be deserialized and thrown as is,          * instead of the HttpOperationFailedException. The caused exception is          * required to be serialized. This is by default turned off. If you          * enable this then be aware that Java will deserialize the incoming          * data from the request to Java and that can be a potential security          * risk.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferException ( String transferException)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|transferException
parameter_list|(
name|String
name|transferException
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferExchange ( boolean transferExchange)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|transferExchange
parameter_list|(
name|boolean
name|transferExchange
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferExchange ( String transferExchange)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|transferExchange
parameter_list|(
name|String
name|transferExchange
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When netty works on nio mode, it uses default workerCount parameter          * from Netty, which is cpu_core_threads x 2. User can use this          * operation to override the default workerCount from Netty.          * The option is a<code>int</code> type.          * @group advanced          */
DECL|method|workerCount ( int workerCount)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|workerCount
parameter_list|(
name|int
name|workerCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"workerCount"
argument_list|,
name|workerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When netty works on nio mode, it uses default workerCount parameter          * from Netty, which is cpu_core_threads x 2. User can use this          * operation to override the default workerCount from Netty.          * The option will be converted to a<code>int</code> type.          * @group advanced          */
DECL|method|workerCount ( String workerCount)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|workerCount
parameter_list|(
name|String
name|workerCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"workerCount"
argument_list|,
name|workerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit EventLoopGroup as the boss thread pool. For example          * to share a thread pool with multiple consumers or producers. By          * default each consumer or producer has their own worker pool with 2 x          * cpu count core threads.          * The option is a<code>io.netty.channel.EventLoopGroup</code> type.          * @group advanced          */
DECL|method|workerGroup ( Object workerGroup)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|workerGroup
parameter_list|(
name|Object
name|workerGroup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"workerGroup"
argument_list|,
name|workerGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit EventLoopGroup as the boss thread pool. For example          * to share a thread pool with multiple consumers or producers. By          * default each consumer or producer has their own worker pool with 2 x          * cpu count core threads.          * The option will be converted to a          *<code>io.netty.channel.EventLoopGroup</code> type.          * @group advanced          */
DECL|method|workerGroup ( String workerGroup)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|workerGroup
parameter_list|(
name|String
name|workerGroup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"workerGroup"
argument_list|,
name|workerGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured NettyServerBootstrapConfiguration for          * configuring this endpoint.          * The option is a<code>java.lang.Object</code> type.          * @group advanced          */
DECL|method|bootstrapConfiguration ( Object bootstrapConfiguration)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|bootstrapConfiguration
parameter_list|(
name|Object
name|bootstrapConfiguration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bootstrapConfiguration"
argument_list|,
name|bootstrapConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured NettyServerBootstrapConfiguration for          * configuring this endpoint.          * The option will be converted to a<code>java.lang.Object</code> type.          * @group advanced          */
DECL|method|bootstrapConfiguration ( String bootstrapConfiguration)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|bootstrapConfiguration
parameter_list|(
name|String
name|bootstrapConfiguration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bootstrapConfiguration"
argument_list|,
name|bootstrapConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedNettyHttpEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Netty4 HTTP component.      */
DECL|interface|NettyHttpEndpointProducerBuilder
specifier|public
specifier|static
interface|interface
name|NettyHttpEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedNettyHttpEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The protocol to use which is either http, https or proxy - a consumer          * only option.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|protocol (String protocol)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|protocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"protocol"
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The local hostname such as localhost, or 0.0.0.0 when being a          * consumer. The remote HTTP server hostname when using producer.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The host port number.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|port (int port)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The host port number.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Resource path.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|path (String path)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|path
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"path"
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, the producer will ignore the Exchange.HTTP_URI          * header, and use the endpoint's URI for request. You may also set the          * throwExceptionOnFailure to be false to let the producer send all the          * fault response back. The consumer working in the bridge mode will          * skip the gzip compression and WWW URL form encoding (by adding the          * Exchange.SKIP_GZIP_ENCODING and Exchange.SKIP_WWW_FORM_URLENCODED          * headers to the consumed exchange).          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|bridgeEndpoint ( boolean bridgeEndpoint)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|bridgeEndpoint
parameter_list|(
name|boolean
name|bridgeEndpoint
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeEndpoint"
argument_list|,
name|bridgeEndpoint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, the producer will ignore the Exchange.HTTP_URI          * header, and use the endpoint's URI for request. You may also set the          * throwExceptionOnFailure to be false to let the producer send all the          * fault response back. The consumer working in the bridge mode will          * skip the gzip compression and WWW URL form encoding (by adding the          * Exchange.SKIP_GZIP_ENCODING and Exchange.SKIP_WWW_FORM_URLENCODED          * headers to the consumed exchange).          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|bridgeEndpoint ( String bridgeEndpoint)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|bridgeEndpoint
parameter_list|(
name|String
name|bridgeEndpoint
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeEndpoint"
argument_list|,
name|bridgeEndpoint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Netty Channel right after          * use. Can be used for both consumer and producer.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|disconnect (boolean disconnect)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|disconnect
parameter_list|(
name|boolean
name|disconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Netty Channel right after          * use. Can be used for both consumer and producer.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|disconnect (String disconnect)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|disconnect
parameter_list|(
name|String
name|disconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to ensure socket is not closed due to inactivity.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|keepAlive (boolean keepAlive)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|keepAlive
parameter_list|(
name|boolean
name|keepAlive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to ensure socket is not closed due to inactivity.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|keepAlive (String keepAlive)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|keepAlive
parameter_list|(
name|String
name|keepAlive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to facilitate socket multiplexing.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|reuseAddress ( boolean reuseAddress)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|reuseAddress
parameter_list|(
name|boolean
name|reuseAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to facilitate socket multiplexing.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|reuseAddress ( String reuseAddress)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|reuseAddress
parameter_list|(
name|String
name|reuseAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option allows producers and consumers (in client mode) to reuse          * the same Netty Channel for the lifecycle of processing the Exchange.          * This is useful if you need to call a server multiple times in a Camel          * route and want to use the same network connection. When using this,          * the channel is not returned to the connection pool until the Exchange          * is done; or disconnected if the disconnect option is set to true. The          * reused Channel is stored on the Exchange as an exchange property with          * the key NettyConstants#NETTY_CHANNEL which allows you to obtain the          * channel during routing and use it as well.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|reuseChannel ( boolean reuseChannel)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|reuseChannel
parameter_list|(
name|boolean
name|reuseChannel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reuseChannel"
argument_list|,
name|reuseChannel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option allows producers and consumers (in client mode) to reuse          * the same Netty Channel for the lifecycle of processing the Exchange.          * This is useful if you need to call a server multiple times in a Camel          * route and want to use the same network connection. When using this,          * the channel is not returned to the connection pool until the Exchange          * is done; or disconnected if the disconnect option is set to true. The          * reused Channel is stored on the Exchange as an exchange property with          * the key NettyConstants#NETTY_CHANNEL which allows you to obtain the          * channel during routing and use it as well.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|reuseChannel ( String reuseChannel)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|reuseChannel
parameter_list|(
name|String
name|reuseChannel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reuseChannel"
argument_list|,
name|reuseChannel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|sync (boolean sync)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|sync
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|sync (String sync)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|sync
parameter_list|(
name|String
name|sync
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to improve TCP protocol performance.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|tcpNoDelay (boolean tcpNoDelay)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|tcpNoDelay
parameter_list|(
name|boolean
name|tcpNoDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to improve TCP protocol performance.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|tcpNoDelay (String tcpNoDelay)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|tcpNoDelay
parameter_list|(
name|String
name|tcpNoDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time to wait for a socket connection to be available. Value is in          * milliseconds.          * The option is a<code>int</code> type.          * @group producer          */
DECL|method|connectTimeout ( int connectTimeout)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|connectTimeout
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time to wait for a socket connection to be available. Value is in          * milliseconds.          * The option will be converted to a<code>int</code> type.          * @group producer          */
DECL|method|connectTimeout ( String connectTimeout)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|connectTimeout
parameter_list|(
name|String
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure a cookie handler to maintain a HTTP session.          * The option is a          *<code>org.apache.camel.http.common.cookie.CookieHandler</code> type.          * @group producer          */
DECL|method|cookieHandler ( Object cookieHandler)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|cookieHandler
parameter_list|(
name|Object
name|cookieHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cookieHandler"
argument_list|,
name|cookieHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure a cookie handler to maintain a HTTP session.          * The option will be converted to a          *<code>org.apache.camel.http.common.cookie.CookieHandler</code> type.          * @group producer          */
DECL|method|cookieHandler ( String cookieHandler)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|cookieHandler
parameter_list|(
name|String
name|cookieHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cookieHandler"
argument_list|,
name|cookieHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to use a timeout for the Netty producer when calling a remote          * server. By default no timeout is in use. The value is in milli          * seconds, so eg 30000 is 30 seconds. The requestTimeout is using          * Netty's ReadTimeoutHandler to trigger the timeout.          * The option is a<code>long</code> type.          * @group producer          */
DECL|method|requestTimeout ( long requestTimeout)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|requestTimeout
parameter_list|(
name|long
name|requestTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeout"
argument_list|,
name|requestTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to use a timeout for the Netty producer when calling a remote          * server. By default no timeout is in use. The value is in milli          * seconds, so eg 30000 is 30 seconds. The requestTimeout is using          * Netty's ReadTimeoutHandler to trigger the timeout.          * The option will be converted to a<code>long</code> type.          * @group producer          */
DECL|method|requestTimeout ( String requestTimeout)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|requestTimeout
parameter_list|(
name|String
name|requestTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeout"
argument_list|,
name|requestTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to disable throwing the HttpOperationFailedException in case          * of failed responses from the remote server. This allows you to get          * all responses regardless of the HTTP status code.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|throwExceptionOnFailure ( boolean throwExceptionOnFailure)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|throwExceptionOnFailure
parameter_list|(
name|boolean
name|throwExceptionOnFailure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"throwExceptionOnFailure"
argument_list|,
name|throwExceptionOnFailure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to disable throwing the HttpOperationFailedException in case          * of failed responses from the remote server. This allows you to get          * all responses regardless of the HTTP status code.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|throwExceptionOnFailure ( String throwExceptionOnFailure)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|throwExceptionOnFailure
parameter_list|(
name|String
name|throwExceptionOnFailure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"throwExceptionOnFailure"
argument_list|,
name|throwExceptionOnFailure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a single decoder. This options is deprecated use encoders          * instead.          * The option is a<code>io.netty.channel.ChannelHandler</code> type.          * @group codec          */
annotation|@
name|Deprecated
DECL|method|decoder (Object decoder)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|decoder
parameter_list|(
name|Object
name|decoder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoder"
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a single decoder. This options is deprecated use encoders          * instead.          * The option will be converted to a          *<code>io.netty.channel.ChannelHandler</code> type.          * @group codec          */
annotation|@
name|Deprecated
DECL|method|decoder (String decoder)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|decoder
parameter_list|(
name|String
name|decoder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoder"
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of decoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          * The option is a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          * @group codec          */
DECL|method|decoders (List<Object> decoders)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|decoders
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|decoders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoders"
argument_list|,
name|decoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of decoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          * The option will be converted to a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          * @group codec          */
DECL|method|decoders (String decoders)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|decoders
parameter_list|(
name|String
name|decoders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoders"
argument_list|,
name|decoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a single encoder. This options is deprecated use encoders          * instead.          * The option is a<code>io.netty.channel.ChannelHandler</code> type.          * @group codec          */
annotation|@
name|Deprecated
DECL|method|encoder (Object encoder)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|encoder
parameter_list|(
name|Object
name|encoder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoder"
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a single encoder. This options is deprecated use encoders          * instead.          * The option will be converted to a          *<code>io.netty.channel.ChannelHandler</code> type.          * @group codec          */
annotation|@
name|Deprecated
DECL|method|encoder (String encoder)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|encoder
parameter_list|(
name|String
name|encoder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoder"
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of encoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          * The option is a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          * @group codec          */
DECL|method|encoders (List<Object> encoders)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|encoders
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|encoders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoders"
argument_list|,
name|encoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of encoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          * The option will be converted to a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          * @group codec          */
DECL|method|encoders (String encoders)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|encoders
parameter_list|(
name|String
name|encoders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoders"
argument_list|,
name|encoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which protocols to enable when using SSL.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|enabledProtocols ( String enabledProtocols)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|enabledProtocols
parameter_list|(
name|String
name|enabledProtocols
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enabledProtocols"
argument_list|,
name|enabledProtocols
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption.          * The option is a<code>java.io.File</code> type.          * @group security          */
DECL|method|keyStoreFile (File keyStoreFile)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|keyStoreFile
parameter_list|(
name|File
name|keyStoreFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyStoreFile"
argument_list|,
name|keyStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption.          * The option will be converted to a<code>java.io.File</code> type.          * @group security          */
DECL|method|keyStoreFile ( String keyStoreFile)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|keyStoreFile
parameter_list|(
name|String
name|keyStoreFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyStoreFile"
argument_list|,
name|keyStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Keystore format to be used for payload encryption. Defaults to JKS if          * not set.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|keyStoreFormat ( String keyStoreFormat)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|keyStoreFormat
parameter_list|(
name|String
name|keyStoreFormat
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyStoreFormat"
argument_list|,
name|keyStoreFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption. Is loaded          * by default from classpath, but you can prefix with classpath:, file:,          * or http: to load the resource from different systems.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|keyStoreResource ( String keyStoreResource)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|keyStoreResource
parameter_list|(
name|String
name|keyStoreResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyStoreResource"
argument_list|,
name|keyStoreResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password setting to use in order to encrypt/decrypt payloads sent          * using SSH.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|passphrase (String passphrase)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|passphrase
parameter_list|(
name|String
name|passphrase
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"passphrase"
argument_list|,
name|passphrase
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Security provider to be used for payload encryption. Defaults to          * SunX509 if not set.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|securityProvider ( String securityProvider)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|securityProvider
parameter_list|(
name|String
name|securityProvider
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"securityProvider"
argument_list|,
name|securityProvider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to specify whether SSL encryption is applied to this          * endpoint.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|ssl (boolean ssl)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|ssl
parameter_list|(
name|boolean
name|ssl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ssl"
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to specify whether SSL encryption is applied to this          * endpoint.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|ssl (String ssl)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|ssl
parameter_list|(
name|String
name|ssl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ssl"
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When enabled and in SSL mode, then the Netty consumer will enrich the          * Camel Message with headers having information about the client          * certificate such as subject name, issuer name, serial number, and the          * valid date range.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|sslClientCertHeaders ( boolean sslClientCertHeaders)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|sslClientCertHeaders
parameter_list|(
name|boolean
name|sslClientCertHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslClientCertHeaders"
argument_list|,
name|sslClientCertHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When enabled and in SSL mode, then the Netty consumer will enrich the          * Camel Message with headers having information about the client          * certificate such as subject name, issuer name, serial number, and the          * valid date range.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|sslClientCertHeaders ( String sslClientCertHeaders)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|sslClientCertHeaders
parameter_list|(
name|String
name|sslClientCertHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslClientCertHeaders"
argument_list|,
name|sslClientCertHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a class that could be used to return an SSL Handler.          * The option is a<code>io.netty.handler.ssl.SslHandler</code> type.          * @group security          */
DECL|method|sslHandler (Object sslHandler)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|sslHandler
parameter_list|(
name|Object
name|sslHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslHandler"
argument_list|,
name|sslHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a class that could be used to return an SSL Handler.          * The option will be converted to a          *<code>io.netty.handler.ssl.SslHandler</code> type.          * @group security          */
DECL|method|sslHandler (String sslHandler)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|sslHandler
parameter_list|(
name|String
name|sslHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslHandler"
argument_list|,
name|sslHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption.          * The option is a<code>java.io.File</code> type.          * @group security          */
DECL|method|trustStoreFile ( File trustStoreFile)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|trustStoreFile
parameter_list|(
name|File
name|trustStoreFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustStoreFile"
argument_list|,
name|trustStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption.          * The option will be converted to a<code>java.io.File</code> type.          * @group security          */
DECL|method|trustStoreFile ( String trustStoreFile)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|trustStoreFile
parameter_list|(
name|String
name|trustStoreFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustStoreFile"
argument_list|,
name|trustStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption. Is loaded          * by default from classpath, but you can prefix with classpath:, file:,          * or http: to load the resource from different systems.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|trustStoreResource ( String trustStoreResource)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|trustStoreResource
parameter_list|(
name|String
name|trustStoreResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustStoreResource"
argument_list|,
name|trustStoreResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|NettyHttpEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Netty4 HTTP component.      */
DECL|interface|AdvancedNettyHttpEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedNettyHttpEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|NettyHttpEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|NettyHttpEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To use a custom ClientInitializerFactory.          * The option is a          *<code>org.apache.camel.component.netty4.ClientInitializerFactory</code> type.          * @group producer (advanced)          */
DECL|method|clientInitializerFactory ( Object clientInitializerFactory)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|clientInitializerFactory
parameter_list|(
name|Object
name|clientInitializerFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientInitializerFactory"
argument_list|,
name|clientInitializerFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom ClientInitializerFactory.          * The option will be converted to a          *<code>org.apache.camel.component.netty4.ClientInitializerFactory</code> type.          * @group producer (advanced)          */
DECL|method|clientInitializerFactory ( String clientInitializerFactory)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|clientInitializerFactory
parameter_list|(
name|String
name|clientInitializerFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientInitializerFactory"
argument_list|,
name|clientInitializerFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Channels can be lazily created to avoid exceptions, if the remote          * server is not up and running when the Camel producer is started.          * The option is a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|lazyChannelCreation ( boolean lazyChannelCreation)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|lazyChannelCreation
parameter_list|(
name|boolean
name|lazyChannelCreation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyChannelCreation"
argument_list|,
name|lazyChannelCreation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Channels can be lazily created to avoid exceptions, if the remote          * server is not up and running when the Camel producer is started.          * The option will be converted to a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|lazyChannelCreation ( String lazyChannelCreation)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|lazyChannelCreation
parameter_list|(
name|String
name|lazyChannelCreation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyChannelCreation"
argument_list|,
name|lazyChannelCreation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The status codes which are considered a success response. The values          * are inclusive. Multiple ranges can be defined, separated by comma,          * e.g. 200-204,209,301-304. Each range must be a single number or          * from-to with the dash included. The default range is 200-299.          * The option is a<code>java.lang.String</code> type.          * @group producer (advanced)          */
DECL|method|okStatusCodeRange ( String okStatusCodeRange)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|okStatusCodeRange
parameter_list|(
name|String
name|okStatusCodeRange
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"okStatusCodeRange"
argument_list|,
name|okStatusCodeRange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether producer pool is enabled or not. Important: If you turn this          * off then a single shared connection is used for the producer, also if          * you are doing request/reply. That means there is a potential issue          * with interleaved responses if replies comes back out-of-order.          * Therefore you need to have a correlation id in both the request and          * reply messages so you can properly correlate the replies to the Camel          * callback that is responsible for continue processing the message in          * Camel. To do this you need to implement          * NettyCamelStateCorrelationManager as correlation manager and          * configure it via the correlationManager option. See also the          * correlationManager option for more details.          * The option is a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|producerPoolEnabled ( boolean producerPoolEnabled)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|producerPoolEnabled
parameter_list|(
name|boolean
name|producerPoolEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"producerPoolEnabled"
argument_list|,
name|producerPoolEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether producer pool is enabled or not. Important: If you turn this          * off then a single shared connection is used for the producer, also if          * you are doing request/reply. That means there is a potential issue          * with interleaved responses if replies comes back out-of-order.          * Therefore you need to have a correlation id in both the request and          * reply messages so you can properly correlate the replies to the Camel          * callback that is responsible for continue processing the message in          * Camel. To do this you need to implement          * NettyCamelStateCorrelationManager as correlation manager and          * configure it via the correlationManager option. See also the          * correlationManager option for more details.          * The option will be converted to a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|producerPoolEnabled ( String producerPoolEnabled)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|producerPoolEnabled
parameter_list|(
name|String
name|producerPoolEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"producerPoolEnabled"
argument_list|,
name|producerPoolEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the cap on the number of objects that can be allocated by the          * pool (checked out to clients, or idle awaiting checkout) at a given          * time. Use a negative value for no limit.          * The option is a<code>int</code> type.          * @group producer (advanced)          */
DECL|method|producerPoolMaxActive ( int producerPoolMaxActive)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|producerPoolMaxActive
parameter_list|(
name|int
name|producerPoolMaxActive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"producerPoolMaxActive"
argument_list|,
name|producerPoolMaxActive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the cap on the number of objects that can be allocated by the          * pool (checked out to clients, or idle awaiting checkout) at a given          * time. Use a negative value for no limit.          * The option will be converted to a<code>int</code> type.          * @group producer (advanced)          */
DECL|method|producerPoolMaxActive ( String producerPoolMaxActive)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|producerPoolMaxActive
parameter_list|(
name|String
name|producerPoolMaxActive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"producerPoolMaxActive"
argument_list|,
name|producerPoolMaxActive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the cap on the number of idle instances in the pool.          * The option is a<code>int</code> type.          * @group producer (advanced)          */
DECL|method|producerPoolMaxIdle ( int producerPoolMaxIdle)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|producerPoolMaxIdle
parameter_list|(
name|int
name|producerPoolMaxIdle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"producerPoolMaxIdle"
argument_list|,
name|producerPoolMaxIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the cap on the number of idle instances in the pool.          * The option will be converted to a<code>int</code> type.          * @group producer (advanced)          */
DECL|method|producerPoolMaxIdle ( String producerPoolMaxIdle)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|producerPoolMaxIdle
parameter_list|(
name|String
name|producerPoolMaxIdle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"producerPoolMaxIdle"
argument_list|,
name|producerPoolMaxIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the minimum amount of time (value in millis) an object may sit          * idle in the pool before it is eligible for eviction by the idle          * object evictor.          * The option is a<code>long</code> type.          * @group producer (advanced)          */
DECL|method|producerPoolMinEvictableIdle ( long producerPoolMinEvictableIdle)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|producerPoolMinEvictableIdle
parameter_list|(
name|long
name|producerPoolMinEvictableIdle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"producerPoolMinEvictableIdle"
argument_list|,
name|producerPoolMinEvictableIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the minimum amount of time (value in millis) an object may sit          * idle in the pool before it is eligible for eviction by the idle          * object evictor.          * The option will be converted to a<code>long</code> type.          * @group producer (advanced)          */
DECL|method|producerPoolMinEvictableIdle ( String producerPoolMinEvictableIdle)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|producerPoolMinEvictableIdle
parameter_list|(
name|String
name|producerPoolMinEvictableIdle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"producerPoolMinEvictableIdle"
argument_list|,
name|producerPoolMinEvictableIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the minimum number of instances allowed in the producer pool          * before the evictor thread (if active) spawns new objects.          * The option is a<code>int</code> type.          * @group producer (advanced)          */
DECL|method|producerPoolMinIdle ( int producerPoolMinIdle)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|producerPoolMinIdle
parameter_list|(
name|int
name|producerPoolMinIdle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"producerPoolMinIdle"
argument_list|,
name|producerPoolMinIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the minimum number of instances allowed in the producer pool          * before the evictor thread (if active) spawns new objects.          * The option will be converted to a<code>int</code> type.          * @group producer (advanced)          */
DECL|method|producerPoolMinIdle ( String producerPoolMinIdle)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|producerPoolMinIdle
parameter_list|(
name|String
name|producerPoolMinIdle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"producerPoolMinIdle"
argument_list|,
name|producerPoolMinIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to use a relative path in HTTP requests.          * The option is a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|useRelativePath ( boolean useRelativePath)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|useRelativePath
parameter_list|(
name|boolean
name|useRelativePath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useRelativePath"
argument_list|,
name|useRelativePath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to use a relative path in HTTP requests.          * The option will be converted to a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|useRelativePath ( String useRelativePath)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|useRelativePath
parameter_list|(
name|String
name|useRelativePath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useRelativePath"
argument_list|,
name|useRelativePath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP when transferExchange is true. When set to true,          * serializable objects in headers and properties will be added to the          * exchange. Otherwise Camel will exclude any non-serializable objects          * and log it at WARN level.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|allowSerializedHeaders ( boolean allowSerializedHeaders)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|allowSerializedHeaders
parameter_list|(
name|boolean
name|allowSerializedHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowSerializedHeaders"
argument_list|,
name|allowSerializedHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP when transferExchange is true. When set to true,          * serializable objects in headers and properties will be added to the          * exchange. Otherwise Camel will exclude any non-serializable objects          * and log it at WARN level.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|allowSerializedHeaders ( String allowSerializedHeaders)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|allowSerializedHeaders
parameter_list|(
name|String
name|allowSerializedHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowSerializedHeaders"
argument_list|,
name|allowSerializedHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit ChannelGroup.          * The option is a<code>io.netty.channel.group.ChannelGroup</code>          * type.          * @group advanced          */
DECL|method|channelGroup ( Object channelGroup)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|channelGroup
parameter_list|(
name|Object
name|channelGroup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channelGroup"
argument_list|,
name|channelGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit ChannelGroup.          * The option will be converted to a          *<code>io.netty.channel.group.ChannelGroup</code> type.          * @group advanced          */
DECL|method|channelGroup ( String channelGroup)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|channelGroup
parameter_list|(
name|String
name|channelGroup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channelGroup"
argument_list|,
name|channelGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured NettyHttpConfiguration for configuring          * this endpoint.          * The option is a          *<code>org.apache.camel.component.netty4.http.NettyHttpConfiguration</code> type.          * @group advanced          */
DECL|method|configuration ( Object configuration)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|configuration
parameter_list|(
name|Object
name|configuration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"configuration"
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured NettyHttpConfiguration for configuring          * this endpoint.          * The option will be converted to a          *<code>org.apache.camel.component.netty4.http.NettyHttpConfiguration</code> type.          * @group advanced          */
DECL|method|configuration ( String configuration)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|configuration
parameter_list|(
name|String
name|configuration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"configuration"
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Determines whether or not the raw input stream from Netty          * HttpRequest#getContent() or HttpResponset#getContent() is cached or          * not (Camel will read the stream into a in light-weight memory based          * Stream caching) cache. By default Camel will cache the Netty input          * stream to support reading it multiple times to ensure it Camel can          * retrieve all data from the stream. However you can set this option to          * true when you for example need to access the raw stream, such as          * streaming it directly to a file or other persistent store. Mind that          * if you enable this option, then you cannot read the Netty stream          * multiple times out of the box, and you would need manually to reset          * the reader index on the Netty raw stream. Also Netty will auto-close          * the Netty stream when the Netty HTTP server/HTTP client is done          * processing, which means that if the asynchronous routing engine is in          * use then any asynchronous thread that may continue routing the          * org.apache.camel.Exchange may not be able to read the Netty stream,          * because Netty has closed it.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|disableStreamCache ( boolean disableStreamCache)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|disableStreamCache
parameter_list|(
name|boolean
name|disableStreamCache
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disableStreamCache"
argument_list|,
name|disableStreamCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Determines whether or not the raw input stream from Netty          * HttpRequest#getContent() or HttpResponset#getContent() is cached or          * not (Camel will read the stream into a in light-weight memory based          * Stream caching) cache. By default Camel will cache the Netty input          * stream to support reading it multiple times to ensure it Camel can          * retrieve all data from the stream. However you can set this option to          * true when you for example need to access the raw stream, such as          * streaming it directly to a file or other persistent store. Mind that          * if you enable this option, then you cannot read the Netty stream          * multiple times out of the box, and you would need manually to reset          * the reader index on the Netty raw stream. Also Netty will auto-close          * the Netty stream when the Netty HTTP server/HTTP client is done          * processing, which means that if the asynchronous routing engine is in          * use then any asynchronous thread that may continue routing the          * org.apache.camel.Exchange may not be able to read the Netty stream,          * because Netty has closed it.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|disableStreamCache ( String disableStreamCache)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|disableStreamCache
parameter_list|(
name|String
name|disableStreamCache
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disableStreamCache"
argument_list|,
name|disableStreamCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter          * headers.          * The option is a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter          * headers.          * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use native transport instead of NIO. Native transport          * takes advantage of the host operating system and is only supported on          * some platforms. You need to add the netty JAR for the host operating          * system you are using. See more details at:          * http://netty.io/wiki/native-transports.html.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|nativeTransport ( boolean nativeTransport)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|nativeTransport
parameter_list|(
name|boolean
name|nativeTransport
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nativeTransport"
argument_list|,
name|nativeTransport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use native transport instead of NIO. Native transport          * takes advantage of the host operating system and is only supported on          * some platforms. You need to add the netty JAR for the host operating          * system you are using. See more details at:          * http://netty.io/wiki/native-transports.html.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|nativeTransport ( String nativeTransport)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|nativeTransport
parameter_list|(
name|String
name|nativeTransport
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nativeTransport"
argument_list|,
name|nativeTransport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom          * org.apache.camel.component.netty4.http.NettyHttpBinding for binding          * to/from Netty and Camel Message API.          * The option is a          *<code>org.apache.camel.component.netty4.http.NettyHttpBinding</code>          * type.          * @group advanced          */
DECL|method|nettyHttpBinding ( Object nettyHttpBinding)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|nettyHttpBinding
parameter_list|(
name|Object
name|nettyHttpBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nettyHttpBinding"
argument_list|,
name|nettyHttpBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom          * org.apache.camel.component.netty4.http.NettyHttpBinding for binding          * to/from Netty and Camel Message API.          * The option will be converted to a          *<code>org.apache.camel.component.netty4.http.NettyHttpBinding</code>          * type.          * @group advanced          */
DECL|method|nettyHttpBinding ( String nettyHttpBinding)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|nettyHttpBinding
parameter_list|(
name|String
name|nettyHttpBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nettyHttpBinding"
argument_list|,
name|nettyHttpBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to configure additional netty options using option. as prefix.          * For example option.child.keepAlive=false to set the netty option          * child.keepAlive=false. See the Netty documentation for possible          * options that can be used.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          * @group advanced          */
DECL|method|options ( Map<String, Object> options)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|options
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"options"
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to configure additional netty options using option. as prefix.          * For example option.child.keepAlive=false to set the netty option          * child.keepAlive=false. See the Netty documentation for possible          * options that can be used.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          * @group advanced          */
DECL|method|options (String options)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|options
parameter_list|(
name|String
name|options
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"options"
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during inbound communication.          * Size is bytes.          * The option is a<code>int</code> type.          * @group advanced          */
DECL|method|receiveBufferSize ( int receiveBufferSize)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|receiveBufferSize
parameter_list|(
name|int
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during inbound communication.          * Size is bytes.          * The option will be converted to a<code>int</code> type.          * @group advanced          */
DECL|method|receiveBufferSize ( String receiveBufferSize)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|receiveBufferSize
parameter_list|(
name|String
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the buffer size predictor. See details at Jetty          * documentation and this mail thread.          * The option is a<code>int</code> type.          * @group advanced          */
DECL|method|receiveBufferSizePredictor ( int receiveBufferSizePredictor)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|receiveBufferSizePredictor
parameter_list|(
name|int
name|receiveBufferSizePredictor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSizePredictor"
argument_list|,
name|receiveBufferSizePredictor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the buffer size predictor. See details at Jetty          * documentation and this mail thread.          * The option will be converted to a<code>int</code> type.          * @group advanced          */
DECL|method|receiveBufferSizePredictor ( String receiveBufferSizePredictor)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|receiveBufferSizePredictor
parameter_list|(
name|String
name|receiveBufferSizePredictor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSizePredictor"
argument_list|,
name|receiveBufferSizePredictor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during outbound communication.          * Size is bytes.          * The option is a<code>int</code> type.          * @group advanced          */
DECL|method|sendBufferSize ( int sendBufferSize)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|sendBufferSize
parameter_list|(
name|int
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during outbound communication.          * Size is bytes.          * The option will be converted to a<code>int</code> type.          * @group advanced          */
DECL|method|sendBufferSize ( String sendBufferSize)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|sendBufferSize
parameter_list|(
name|String
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled and an Exchange failed processing on the consumer side,          * and if the caused Exception was send back serialized in the response          * as a application/x-java-serialized-object content type. On the          * producer side the exception will be deserialized and thrown as is,          * instead of the HttpOperationFailedException. The caused exception is          * required to be serialized. This is by default turned off. If you          * enable this then be aware that Java will deserialize the incoming          * data from the request to Java and that can be a potential security          * risk.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferException ( boolean transferException)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|transferException
parameter_list|(
name|boolean
name|transferException
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled and an Exchange failed processing on the consumer side,          * and if the caused Exception was send back serialized in the response          * as a application/x-java-serialized-object content type. On the          * producer side the exception will be deserialized and thrown as is,          * instead of the HttpOperationFailedException. The caused exception is          * required to be serialized. This is by default turned off. If you          * enable this then be aware that Java will deserialize the incoming          * data from the request to Java and that can be a potential security          * risk.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferException ( String transferException)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|transferException
parameter_list|(
name|String
name|transferException
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferExchange ( boolean transferExchange)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|transferExchange
parameter_list|(
name|boolean
name|transferExchange
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferExchange ( String transferExchange)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|transferExchange
parameter_list|(
name|String
name|transferExchange
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When netty works on nio mode, it uses default workerCount parameter          * from Netty, which is cpu_core_threads x 2. User can use this          * operation to override the default workerCount from Netty.          * The option is a<code>int</code> type.          * @group advanced          */
DECL|method|workerCount ( int workerCount)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|workerCount
parameter_list|(
name|int
name|workerCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"workerCount"
argument_list|,
name|workerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When netty works on nio mode, it uses default workerCount parameter          * from Netty, which is cpu_core_threads x 2. User can use this          * operation to override the default workerCount from Netty.          * The option will be converted to a<code>int</code> type.          * @group advanced          */
DECL|method|workerCount ( String workerCount)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|workerCount
parameter_list|(
name|String
name|workerCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"workerCount"
argument_list|,
name|workerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit EventLoopGroup as the boss thread pool. For example          * to share a thread pool with multiple consumers or producers. By          * default each consumer or producer has their own worker pool with 2 x          * cpu count core threads.          * The option is a<code>io.netty.channel.EventLoopGroup</code> type.          * @group advanced          */
DECL|method|workerGroup ( Object workerGroup)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|workerGroup
parameter_list|(
name|Object
name|workerGroup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"workerGroup"
argument_list|,
name|workerGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit EventLoopGroup as the boss thread pool. For example          * to share a thread pool with multiple consumers or producers. By          * default each consumer or producer has their own worker pool with 2 x          * cpu count core threads.          * The option will be converted to a          *<code>io.netty.channel.EventLoopGroup</code> type.          * @group advanced          */
DECL|method|workerGroup ( String workerGroup)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|workerGroup
parameter_list|(
name|String
name|workerGroup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"workerGroup"
argument_list|,
name|workerGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured NettyServerBootstrapConfiguration for          * configuring this endpoint.          * The option is a<code>java.lang.Object</code> type.          * @group advanced          */
DECL|method|bootstrapConfiguration ( Object bootstrapConfiguration)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|bootstrapConfiguration
parameter_list|(
name|Object
name|bootstrapConfiguration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bootstrapConfiguration"
argument_list|,
name|bootstrapConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured NettyServerBootstrapConfiguration for          * configuring this endpoint.          * The option will be converted to a<code>java.lang.Object</code> type.          * @group advanced          */
DECL|method|bootstrapConfiguration ( String bootstrapConfiguration)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|bootstrapConfiguration
parameter_list|(
name|String
name|bootstrapConfiguration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bootstrapConfiguration"
argument_list|,
name|bootstrapConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedNettyHttpEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Netty4 HTTP component.      */
DECL|interface|NettyHttpEndpointBuilder
specifier|public
specifier|static
interface|interface
name|NettyHttpEndpointBuilder
extends|extends
name|NettyHttpEndpointConsumerBuilder
extends|,
name|NettyHttpEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedNettyHttpEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The protocol to use which is either http, https or proxy - a consumer          * only option.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|protocol (String protocol)
specifier|default
name|NettyHttpEndpointBuilder
name|protocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"protocol"
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The local hostname such as localhost, or 0.0.0.0 when being a          * consumer. The remote HTTP server hostname when using producer.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|NettyHttpEndpointBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The host port number.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|port (int port)
specifier|default
name|NettyHttpEndpointBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The host port number.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|NettyHttpEndpointBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Resource path.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|path (String path)
specifier|default
name|NettyHttpEndpointBuilder
name|path
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"path"
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, the producer will ignore the Exchange.HTTP_URI          * header, and use the endpoint's URI for request. You may also set the          * throwExceptionOnFailure to be false to let the producer send all the          * fault response back. The consumer working in the bridge mode will          * skip the gzip compression and WWW URL form encoding (by adding the          * Exchange.SKIP_GZIP_ENCODING and Exchange.SKIP_WWW_FORM_URLENCODED          * headers to the consumed exchange).          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|bridgeEndpoint (boolean bridgeEndpoint)
specifier|default
name|NettyHttpEndpointBuilder
name|bridgeEndpoint
parameter_list|(
name|boolean
name|bridgeEndpoint
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeEndpoint"
argument_list|,
name|bridgeEndpoint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, the producer will ignore the Exchange.HTTP_URI          * header, and use the endpoint's URI for request. You may also set the          * throwExceptionOnFailure to be false to let the producer send all the          * fault response back. The consumer working in the bridge mode will          * skip the gzip compression and WWW URL form encoding (by adding the          * Exchange.SKIP_GZIP_ENCODING and Exchange.SKIP_WWW_FORM_URLENCODED          * headers to the consumed exchange).          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|bridgeEndpoint (String bridgeEndpoint)
specifier|default
name|NettyHttpEndpointBuilder
name|bridgeEndpoint
parameter_list|(
name|String
name|bridgeEndpoint
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeEndpoint"
argument_list|,
name|bridgeEndpoint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Netty Channel right after          * use. Can be used for both consumer and producer.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|disconnect (boolean disconnect)
specifier|default
name|NettyHttpEndpointBuilder
name|disconnect
parameter_list|(
name|boolean
name|disconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Netty Channel right after          * use. Can be used for both consumer and producer.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|disconnect (String disconnect)
specifier|default
name|NettyHttpEndpointBuilder
name|disconnect
parameter_list|(
name|String
name|disconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to ensure socket is not closed due to inactivity.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|keepAlive (boolean keepAlive)
specifier|default
name|NettyHttpEndpointBuilder
name|keepAlive
parameter_list|(
name|boolean
name|keepAlive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to ensure socket is not closed due to inactivity.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|keepAlive (String keepAlive)
specifier|default
name|NettyHttpEndpointBuilder
name|keepAlive
parameter_list|(
name|String
name|keepAlive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to facilitate socket multiplexing.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|reuseAddress (boolean reuseAddress)
specifier|default
name|NettyHttpEndpointBuilder
name|reuseAddress
parameter_list|(
name|boolean
name|reuseAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to facilitate socket multiplexing.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|reuseAddress (String reuseAddress)
specifier|default
name|NettyHttpEndpointBuilder
name|reuseAddress
parameter_list|(
name|String
name|reuseAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option allows producers and consumers (in client mode) to reuse          * the same Netty Channel for the lifecycle of processing the Exchange.          * This is useful if you need to call a server multiple times in a Camel          * route and want to use the same network connection. When using this,          * the channel is not returned to the connection pool until the Exchange          * is done; or disconnected if the disconnect option is set to true. The          * reused Channel is stored on the Exchange as an exchange property with          * the key NettyConstants#NETTY_CHANNEL which allows you to obtain the          * channel during routing and use it as well.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|reuseChannel (boolean reuseChannel)
specifier|default
name|NettyHttpEndpointBuilder
name|reuseChannel
parameter_list|(
name|boolean
name|reuseChannel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reuseChannel"
argument_list|,
name|reuseChannel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option allows producers and consumers (in client mode) to reuse          * the same Netty Channel for the lifecycle of processing the Exchange.          * This is useful if you need to call a server multiple times in a Camel          * route and want to use the same network connection. When using this,          * the channel is not returned to the connection pool until the Exchange          * is done; or disconnected if the disconnect option is set to true. The          * reused Channel is stored on the Exchange as an exchange property with          * the key NettyConstants#NETTY_CHANNEL which allows you to obtain the          * channel during routing and use it as well.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|reuseChannel (String reuseChannel)
specifier|default
name|NettyHttpEndpointBuilder
name|reuseChannel
parameter_list|(
name|String
name|reuseChannel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reuseChannel"
argument_list|,
name|reuseChannel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|sync (boolean sync)
specifier|default
name|NettyHttpEndpointBuilder
name|sync
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|sync (String sync)
specifier|default
name|NettyHttpEndpointBuilder
name|sync
parameter_list|(
name|String
name|sync
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to improve TCP protocol performance.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|tcpNoDelay (boolean tcpNoDelay)
specifier|default
name|NettyHttpEndpointBuilder
name|tcpNoDelay
parameter_list|(
name|boolean
name|tcpNoDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to improve TCP protocol performance.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|tcpNoDelay (String tcpNoDelay)
specifier|default
name|NettyHttpEndpointBuilder
name|tcpNoDelay
parameter_list|(
name|String
name|tcpNoDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a single decoder. This options is deprecated use encoders          * instead.          * The option is a<code>io.netty.channel.ChannelHandler</code> type.          * @group codec          */
annotation|@
name|Deprecated
DECL|method|decoder (Object decoder)
specifier|default
name|NettyHttpEndpointBuilder
name|decoder
parameter_list|(
name|Object
name|decoder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoder"
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a single decoder. This options is deprecated use encoders          * instead.          * The option will be converted to a          *<code>io.netty.channel.ChannelHandler</code> type.          * @group codec          */
annotation|@
name|Deprecated
DECL|method|decoder (String decoder)
specifier|default
name|NettyHttpEndpointBuilder
name|decoder
parameter_list|(
name|String
name|decoder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoder"
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of decoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          * The option is a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          * @group codec          */
DECL|method|decoders (List<Object> decoders)
specifier|default
name|NettyHttpEndpointBuilder
name|decoders
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|decoders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoders"
argument_list|,
name|decoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of decoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          * The option will be converted to a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          * @group codec          */
DECL|method|decoders (String decoders)
specifier|default
name|NettyHttpEndpointBuilder
name|decoders
parameter_list|(
name|String
name|decoders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"decoders"
argument_list|,
name|decoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a single encoder. This options is deprecated use encoders          * instead.          * The option is a<code>io.netty.channel.ChannelHandler</code> type.          * @group codec          */
annotation|@
name|Deprecated
DECL|method|encoder (Object encoder)
specifier|default
name|NettyHttpEndpointBuilder
name|encoder
parameter_list|(
name|Object
name|encoder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoder"
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a single encoder. This options is deprecated use encoders          * instead.          * The option will be converted to a          *<code>io.netty.channel.ChannelHandler</code> type.          * @group codec          */
annotation|@
name|Deprecated
DECL|method|encoder (String encoder)
specifier|default
name|NettyHttpEndpointBuilder
name|encoder
parameter_list|(
name|String
name|encoder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoder"
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of encoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          * The option is a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          * @group codec          */
DECL|method|encoders (List<Object> encoders)
specifier|default
name|NettyHttpEndpointBuilder
name|encoders
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|encoders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoders"
argument_list|,
name|encoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of encoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          * The option will be converted to a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          * @group codec          */
DECL|method|encoders (String encoders)
specifier|default
name|NettyHttpEndpointBuilder
name|encoders
parameter_list|(
name|String
name|encoders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoders"
argument_list|,
name|encoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which protocols to enable when using SSL.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|enabledProtocols ( String enabledProtocols)
specifier|default
name|NettyHttpEndpointBuilder
name|enabledProtocols
parameter_list|(
name|String
name|enabledProtocols
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enabledProtocols"
argument_list|,
name|enabledProtocols
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption.          * The option is a<code>java.io.File</code> type.          * @group security          */
DECL|method|keyStoreFile (File keyStoreFile)
specifier|default
name|NettyHttpEndpointBuilder
name|keyStoreFile
parameter_list|(
name|File
name|keyStoreFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyStoreFile"
argument_list|,
name|keyStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption.          * The option will be converted to a<code>java.io.File</code> type.          * @group security          */
DECL|method|keyStoreFile (String keyStoreFile)
specifier|default
name|NettyHttpEndpointBuilder
name|keyStoreFile
parameter_list|(
name|String
name|keyStoreFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyStoreFile"
argument_list|,
name|keyStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Keystore format to be used for payload encryption. Defaults to JKS if          * not set.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|keyStoreFormat (String keyStoreFormat)
specifier|default
name|NettyHttpEndpointBuilder
name|keyStoreFormat
parameter_list|(
name|String
name|keyStoreFormat
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyStoreFormat"
argument_list|,
name|keyStoreFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption. Is loaded          * by default from classpath, but you can prefix with classpath:, file:,          * or http: to load the resource from different systems.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|keyStoreResource ( String keyStoreResource)
specifier|default
name|NettyHttpEndpointBuilder
name|keyStoreResource
parameter_list|(
name|String
name|keyStoreResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyStoreResource"
argument_list|,
name|keyStoreResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password setting to use in order to encrypt/decrypt payloads sent          * using SSH.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|passphrase (String passphrase)
specifier|default
name|NettyHttpEndpointBuilder
name|passphrase
parameter_list|(
name|String
name|passphrase
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"passphrase"
argument_list|,
name|passphrase
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Security provider to be used for payload encryption. Defaults to          * SunX509 if not set.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|securityProvider ( String securityProvider)
specifier|default
name|NettyHttpEndpointBuilder
name|securityProvider
parameter_list|(
name|String
name|securityProvider
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"securityProvider"
argument_list|,
name|securityProvider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to specify whether SSL encryption is applied to this          * endpoint.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|ssl (boolean ssl)
specifier|default
name|NettyHttpEndpointBuilder
name|ssl
parameter_list|(
name|boolean
name|ssl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ssl"
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to specify whether SSL encryption is applied to this          * endpoint.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|ssl (String ssl)
specifier|default
name|NettyHttpEndpointBuilder
name|ssl
parameter_list|(
name|String
name|ssl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ssl"
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When enabled and in SSL mode, then the Netty consumer will enrich the          * Camel Message with headers having information about the client          * certificate such as subject name, issuer name, serial number, and the          * valid date range.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|sslClientCertHeaders ( boolean sslClientCertHeaders)
specifier|default
name|NettyHttpEndpointBuilder
name|sslClientCertHeaders
parameter_list|(
name|boolean
name|sslClientCertHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslClientCertHeaders"
argument_list|,
name|sslClientCertHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When enabled and in SSL mode, then the Netty consumer will enrich the          * Camel Message with headers having information about the client          * certificate such as subject name, issuer name, serial number, and the          * valid date range.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|sslClientCertHeaders ( String sslClientCertHeaders)
specifier|default
name|NettyHttpEndpointBuilder
name|sslClientCertHeaders
parameter_list|(
name|String
name|sslClientCertHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslClientCertHeaders"
argument_list|,
name|sslClientCertHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|NettyHttpEndpointBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|NettyHttpEndpointBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a class that could be used to return an SSL Handler.          * The option is a<code>io.netty.handler.ssl.SslHandler</code> type.          * @group security          */
DECL|method|sslHandler (Object sslHandler)
specifier|default
name|NettyHttpEndpointBuilder
name|sslHandler
parameter_list|(
name|Object
name|sslHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslHandler"
argument_list|,
name|sslHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a class that could be used to return an SSL Handler.          * The option will be converted to a          *<code>io.netty.handler.ssl.SslHandler</code> type.          * @group security          */
DECL|method|sslHandler (String sslHandler)
specifier|default
name|NettyHttpEndpointBuilder
name|sslHandler
parameter_list|(
name|String
name|sslHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslHandler"
argument_list|,
name|sslHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption.          * The option is a<code>java.io.File</code> type.          * @group security          */
DECL|method|trustStoreFile (File trustStoreFile)
specifier|default
name|NettyHttpEndpointBuilder
name|trustStoreFile
parameter_list|(
name|File
name|trustStoreFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustStoreFile"
argument_list|,
name|trustStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption.          * The option will be converted to a<code>java.io.File</code> type.          * @group security          */
DECL|method|trustStoreFile (String trustStoreFile)
specifier|default
name|NettyHttpEndpointBuilder
name|trustStoreFile
parameter_list|(
name|String
name|trustStoreFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustStoreFile"
argument_list|,
name|trustStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption. Is loaded          * by default from classpath, but you can prefix with classpath:, file:,          * or http: to load the resource from different systems.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|trustStoreResource ( String trustStoreResource)
specifier|default
name|NettyHttpEndpointBuilder
name|trustStoreResource
parameter_list|(
name|String
name|trustStoreResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustStoreResource"
argument_list|,
name|trustStoreResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Netty4 HTTP component.      */
DECL|interface|AdvancedNettyHttpEndpointBuilder
specifier|public
specifier|static
interface|interface
name|AdvancedNettyHttpEndpointBuilder
extends|extends
name|AdvancedNettyHttpEndpointConsumerBuilder
extends|,
name|AdvancedNettyHttpEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|NettyHttpEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|NettyHttpEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Only used for TCP when transferExchange is true. When set to true,          * serializable objects in headers and properties will be added to the          * exchange. Otherwise Camel will exclude any non-serializable objects          * and log it at WARN level.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|allowSerializedHeaders ( boolean allowSerializedHeaders)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|allowSerializedHeaders
parameter_list|(
name|boolean
name|allowSerializedHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowSerializedHeaders"
argument_list|,
name|allowSerializedHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP when transferExchange is true. When set to true,          * serializable objects in headers and properties will be added to the          * exchange. Otherwise Camel will exclude any non-serializable objects          * and log it at WARN level.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|allowSerializedHeaders ( String allowSerializedHeaders)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|allowSerializedHeaders
parameter_list|(
name|String
name|allowSerializedHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowSerializedHeaders"
argument_list|,
name|allowSerializedHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit ChannelGroup.          * The option is a<code>io.netty.channel.group.ChannelGroup</code>          * type.          * @group advanced          */
DECL|method|channelGroup ( Object channelGroup)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|channelGroup
parameter_list|(
name|Object
name|channelGroup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channelGroup"
argument_list|,
name|channelGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit ChannelGroup.          * The option will be converted to a          *<code>io.netty.channel.group.ChannelGroup</code> type.          * @group advanced          */
DECL|method|channelGroup ( String channelGroup)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|channelGroup
parameter_list|(
name|String
name|channelGroup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channelGroup"
argument_list|,
name|channelGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured NettyHttpConfiguration for configuring          * this endpoint.          * The option is a          *<code>org.apache.camel.component.netty4.http.NettyHttpConfiguration</code> type.          * @group advanced          */
DECL|method|configuration ( Object configuration)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|configuration
parameter_list|(
name|Object
name|configuration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"configuration"
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured NettyHttpConfiguration for configuring          * this endpoint.          * The option will be converted to a          *<code>org.apache.camel.component.netty4.http.NettyHttpConfiguration</code> type.          * @group advanced          */
DECL|method|configuration ( String configuration)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|configuration
parameter_list|(
name|String
name|configuration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"configuration"
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Determines whether or not the raw input stream from Netty          * HttpRequest#getContent() or HttpResponset#getContent() is cached or          * not (Camel will read the stream into a in light-weight memory based          * Stream caching) cache. By default Camel will cache the Netty input          * stream to support reading it multiple times to ensure it Camel can          * retrieve all data from the stream. However you can set this option to          * true when you for example need to access the raw stream, such as          * streaming it directly to a file or other persistent store. Mind that          * if you enable this option, then you cannot read the Netty stream          * multiple times out of the box, and you would need manually to reset          * the reader index on the Netty raw stream. Also Netty will auto-close          * the Netty stream when the Netty HTTP server/HTTP client is done          * processing, which means that if the asynchronous routing engine is in          * use then any asynchronous thread that may continue routing the          * org.apache.camel.Exchange may not be able to read the Netty stream,          * because Netty has closed it.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|disableStreamCache ( boolean disableStreamCache)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|disableStreamCache
parameter_list|(
name|boolean
name|disableStreamCache
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disableStreamCache"
argument_list|,
name|disableStreamCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Determines whether or not the raw input stream from Netty          * HttpRequest#getContent() or HttpResponset#getContent() is cached or          * not (Camel will read the stream into a in light-weight memory based          * Stream caching) cache. By default Camel will cache the Netty input          * stream to support reading it multiple times to ensure it Camel can          * retrieve all data from the stream. However you can set this option to          * true when you for example need to access the raw stream, such as          * streaming it directly to a file or other persistent store. Mind that          * if you enable this option, then you cannot read the Netty stream          * multiple times out of the box, and you would need manually to reset          * the reader index on the Netty raw stream. Also Netty will auto-close          * the Netty stream when the Netty HTTP server/HTTP client is done          * processing, which means that if the asynchronous routing engine is in          * use then any asynchronous thread that may continue routing the          * org.apache.camel.Exchange may not be able to read the Netty stream,          * because Netty has closed it.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|disableStreamCache ( String disableStreamCache)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|disableStreamCache
parameter_list|(
name|String
name|disableStreamCache
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disableStreamCache"
argument_list|,
name|disableStreamCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter          * headers.          * The option is a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter          * headers.          * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use native transport instead of NIO. Native transport          * takes advantage of the host operating system and is only supported on          * some platforms. You need to add the netty JAR for the host operating          * system you are using. See more details at:          * http://netty.io/wiki/native-transports.html.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|nativeTransport ( boolean nativeTransport)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|nativeTransport
parameter_list|(
name|boolean
name|nativeTransport
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nativeTransport"
argument_list|,
name|nativeTransport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use native transport instead of NIO. Native transport          * takes advantage of the host operating system and is only supported on          * some platforms. You need to add the netty JAR for the host operating          * system you are using. See more details at:          * http://netty.io/wiki/native-transports.html.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|nativeTransport ( String nativeTransport)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|nativeTransport
parameter_list|(
name|String
name|nativeTransport
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nativeTransport"
argument_list|,
name|nativeTransport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom          * org.apache.camel.component.netty4.http.NettyHttpBinding for binding          * to/from Netty and Camel Message API.          * The option is a          *<code>org.apache.camel.component.netty4.http.NettyHttpBinding</code>          * type.          * @group advanced          */
DECL|method|nettyHttpBinding ( Object nettyHttpBinding)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|nettyHttpBinding
parameter_list|(
name|Object
name|nettyHttpBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nettyHttpBinding"
argument_list|,
name|nettyHttpBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom          * org.apache.camel.component.netty4.http.NettyHttpBinding for binding          * to/from Netty and Camel Message API.          * The option will be converted to a          *<code>org.apache.camel.component.netty4.http.NettyHttpBinding</code>          * type.          * @group advanced          */
DECL|method|nettyHttpBinding ( String nettyHttpBinding)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|nettyHttpBinding
parameter_list|(
name|String
name|nettyHttpBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nettyHttpBinding"
argument_list|,
name|nettyHttpBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to configure additional netty options using option. as prefix.          * For example option.child.keepAlive=false to set the netty option          * child.keepAlive=false. See the Netty documentation for possible          * options that can be used.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          * @group advanced          */
DECL|method|options ( Map<String, Object> options)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|options
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"options"
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to configure additional netty options using option. as prefix.          * For example option.child.keepAlive=false to set the netty option          * child.keepAlive=false. See the Netty documentation for possible          * options that can be used.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          * @group advanced          */
DECL|method|options (String options)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|options
parameter_list|(
name|String
name|options
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"options"
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during inbound communication.          * Size is bytes.          * The option is a<code>int</code> type.          * @group advanced          */
DECL|method|receiveBufferSize ( int receiveBufferSize)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|receiveBufferSize
parameter_list|(
name|int
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during inbound communication.          * Size is bytes.          * The option will be converted to a<code>int</code> type.          * @group advanced          */
DECL|method|receiveBufferSize ( String receiveBufferSize)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|receiveBufferSize
parameter_list|(
name|String
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the buffer size predictor. See details at Jetty          * documentation and this mail thread.          * The option is a<code>int</code> type.          * @group advanced          */
DECL|method|receiveBufferSizePredictor ( int receiveBufferSizePredictor)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|receiveBufferSizePredictor
parameter_list|(
name|int
name|receiveBufferSizePredictor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSizePredictor"
argument_list|,
name|receiveBufferSizePredictor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the buffer size predictor. See details at Jetty          * documentation and this mail thread.          * The option will be converted to a<code>int</code> type.          * @group advanced          */
DECL|method|receiveBufferSizePredictor ( String receiveBufferSizePredictor)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|receiveBufferSizePredictor
parameter_list|(
name|String
name|receiveBufferSizePredictor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSizePredictor"
argument_list|,
name|receiveBufferSizePredictor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during outbound communication.          * Size is bytes.          * The option is a<code>int</code> type.          * @group advanced          */
DECL|method|sendBufferSize ( int sendBufferSize)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|sendBufferSize
parameter_list|(
name|int
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during outbound communication.          * Size is bytes.          * The option will be converted to a<code>int</code> type.          * @group advanced          */
DECL|method|sendBufferSize ( String sendBufferSize)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|sendBufferSize
parameter_list|(
name|String
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled and an Exchange failed processing on the consumer side,          * and if the caused Exception was send back serialized in the response          * as a application/x-java-serialized-object content type. On the          * producer side the exception will be deserialized and thrown as is,          * instead of the HttpOperationFailedException. The caused exception is          * required to be serialized. This is by default turned off. If you          * enable this then be aware that Java will deserialize the incoming          * data from the request to Java and that can be a potential security          * risk.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferException ( boolean transferException)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|transferException
parameter_list|(
name|boolean
name|transferException
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled and an Exchange failed processing on the consumer side,          * and if the caused Exception was send back serialized in the response          * as a application/x-java-serialized-object content type. On the          * producer side the exception will be deserialized and thrown as is,          * instead of the HttpOperationFailedException. The caused exception is          * required to be serialized. This is by default turned off. If you          * enable this then be aware that Java will deserialize the incoming          * data from the request to Java and that can be a potential security          * risk.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferException ( String transferException)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|transferException
parameter_list|(
name|String
name|transferException
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferExchange ( boolean transferExchange)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|transferExchange
parameter_list|(
name|boolean
name|transferExchange
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|transferExchange ( String transferExchange)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|transferExchange
parameter_list|(
name|String
name|transferExchange
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When netty works on nio mode, it uses default workerCount parameter          * from Netty, which is cpu_core_threads x 2. User can use this          * operation to override the default workerCount from Netty.          * The option is a<code>int</code> type.          * @group advanced          */
DECL|method|workerCount (int workerCount)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|workerCount
parameter_list|(
name|int
name|workerCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"workerCount"
argument_list|,
name|workerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When netty works on nio mode, it uses default workerCount parameter          * from Netty, which is cpu_core_threads x 2. User can use this          * operation to override the default workerCount from Netty.          * The option will be converted to a<code>int</code> type.          * @group advanced          */
DECL|method|workerCount (String workerCount)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|workerCount
parameter_list|(
name|String
name|workerCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"workerCount"
argument_list|,
name|workerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit EventLoopGroup as the boss thread pool. For example          * to share a thread pool with multiple consumers or producers. By          * default each consumer or producer has their own worker pool with 2 x          * cpu count core threads.          * The option is a<code>io.netty.channel.EventLoopGroup</code> type.          * @group advanced          */
DECL|method|workerGroup (Object workerGroup)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|workerGroup
parameter_list|(
name|Object
name|workerGroup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"workerGroup"
argument_list|,
name|workerGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit EventLoopGroup as the boss thread pool. For example          * to share a thread pool with multiple consumers or producers. By          * default each consumer or producer has their own worker pool with 2 x          * cpu count core threads.          * The option will be converted to a          *<code>io.netty.channel.EventLoopGroup</code> type.          * @group advanced          */
DECL|method|workerGroup (String workerGroup)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|workerGroup
parameter_list|(
name|String
name|workerGroup
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"workerGroup"
argument_list|,
name|workerGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured NettyServerBootstrapConfiguration for          * configuring this endpoint.          * The option is a<code>java.lang.Object</code> type.          * @group advanced          */
DECL|method|bootstrapConfiguration ( Object bootstrapConfiguration)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|bootstrapConfiguration
parameter_list|(
name|Object
name|bootstrapConfiguration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bootstrapConfiguration"
argument_list|,
name|bootstrapConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured NettyServerBootstrapConfiguration for          * configuring this endpoint.          * The option will be converted to a<code>java.lang.Object</code> type.          * @group advanced          */
DECL|method|bootstrapConfiguration ( String bootstrapConfiguration)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|bootstrapConfiguration
parameter_list|(
name|String
name|bootstrapConfiguration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bootstrapConfiguration"
argument_list|,
name|bootstrapConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedNettyHttpEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Netty HTTP server and client using the Netty 4.x library. Creates a      * builder to build endpoints for the Netty4 HTTP component.      */
DECL|method|nettyHttp (String path)
specifier|default
name|NettyHttpEndpointBuilder
name|nettyHttp
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|NettyHttpEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|NettyHttpEndpointBuilder
implements|,
name|AdvancedNettyHttpEndpointBuilder
block|{
specifier|public
name|NettyHttpEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"netty-http"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|NettyHttpEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

