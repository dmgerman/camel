begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * Socket level networking using TCP or UDP with the Netty 4.x library.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|NettyEndpointBuilderFactory
specifier|public
interface|interface
name|NettyEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Netty component.      */
DECL|interface|NettyEndpointConsumerBuilder
specifier|public
interface|interface
name|NettyEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedNettyEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Netty Channel right after          * use. Can be used for both consumer and producer.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|disconnect (boolean disconnect)
specifier|default
name|NettyEndpointConsumerBuilder
name|disconnect
parameter_list|(
name|boolean
name|disconnect
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Netty Channel right after          * use. Can be used for both consumer and producer.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|disconnect (String disconnect)
specifier|default
name|NettyEndpointConsumerBuilder
name|disconnect
parameter_list|(
name|String
name|disconnect
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to ensure socket is not closed due to inactivity.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|keepAlive (boolean keepAlive)
specifier|default
name|NettyEndpointConsumerBuilder
name|keepAlive
parameter_list|(
name|boolean
name|keepAlive
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to ensure socket is not closed due to inactivity.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|keepAlive (String keepAlive)
specifier|default
name|NettyEndpointConsumerBuilder
name|keepAlive
parameter_list|(
name|String
name|keepAlive
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to facilitate socket multiplexing.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|reuseAddress (boolean reuseAddress)
specifier|default
name|NettyEndpointConsumerBuilder
name|reuseAddress
parameter_list|(
name|boolean
name|reuseAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to facilitate socket multiplexing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|reuseAddress (String reuseAddress)
specifier|default
name|NettyEndpointConsumerBuilder
name|reuseAddress
parameter_list|(
name|String
name|reuseAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option allows producers and consumers (in client mode) to reuse          * the same Netty Channel for the lifecycle of processing the Exchange.          * This is useful if you need to call a server multiple times in a Camel          * route and want to use the same network connection. When using this,          * the channel is not returned to the connection pool until the Exchange          * is done; or disconnected if the disconnect option is set to true. The          * reused Channel is stored on the Exchange as an exchange property with          * the key NettyConstants#NETTY_CHANNEL which allows you to obtain the          * channel during routing and use it as well.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|reuseChannel (boolean reuseChannel)
specifier|default
name|NettyEndpointConsumerBuilder
name|reuseChannel
parameter_list|(
name|boolean
name|reuseChannel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reuseChannel"
argument_list|,
name|reuseChannel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option allows producers and consumers (in client mode) to reuse          * the same Netty Channel for the lifecycle of processing the Exchange.          * This is useful if you need to call a server multiple times in a Camel          * route and want to use the same network connection. When using this,          * the channel is not returned to the connection pool until the Exchange          * is done; or disconnected if the disconnect option is set to true. The          * reused Channel is stored on the Exchange as an exchange property with          * the key NettyConstants#NETTY_CHANNEL which allows you to obtain the          * channel during routing and use it as well.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|reuseChannel (String reuseChannel)
specifier|default
name|NettyEndpointConsumerBuilder
name|reuseChannel
parameter_list|(
name|String
name|reuseChannel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reuseChannel"
argument_list|,
name|reuseChannel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|sync (boolean sync)
specifier|default
name|NettyEndpointConsumerBuilder
name|sync
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|sync (String sync)
specifier|default
name|NettyEndpointConsumerBuilder
name|sync
parameter_list|(
name|String
name|sync
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to improve TCP protocol performance.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|tcpNoDelay (boolean tcpNoDelay)
specifier|default
name|NettyEndpointConsumerBuilder
name|tcpNoDelay
parameter_list|(
name|boolean
name|tcpNoDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to improve TCP protocol performance.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|tcpNoDelay (String tcpNoDelay)
specifier|default
name|NettyEndpointConsumerBuilder
name|tcpNoDelay
parameter_list|(
name|String
name|tcpNoDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|NettyEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|NettyEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to choose Multicast over UDP.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|broadcast (boolean broadcast)
specifier|default
name|NettyEndpointConsumerBuilder
name|broadcast
parameter_list|(
name|boolean
name|broadcast
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"broadcast"
argument_list|,
name|broadcast
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to choose Multicast over UDP.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|broadcast (String broadcast)
specifier|default
name|NettyEndpointConsumerBuilder
name|broadcast
parameter_list|(
name|String
name|broadcast
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"broadcast"
argument_list|,
name|broadcast
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the clientMode is true, netty consumer will connect the address as          * a TCP client.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|clientMode (boolean clientMode)
specifier|default
name|NettyEndpointConsumerBuilder
name|clientMode
parameter_list|(
name|boolean
name|clientMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientMode"
argument_list|,
name|clientMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the clientMode is true, netty consumer will connect the address as          * a TCP client.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|clientMode (String clientMode)
specifier|default
name|NettyEndpointConsumerBuilder
name|clientMode
parameter_list|(
name|String
name|clientMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientMode"
argument_list|,
name|clientMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used only in clientMode in consumer, the consumer will attempt to          * reconnect on disconnection if this is enabled.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|reconnect (boolean reconnect)
specifier|default
name|NettyEndpointConsumerBuilder
name|reconnect
parameter_list|(
name|boolean
name|reconnect
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reconnect"
argument_list|,
name|reconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used only in clientMode in consumer, the consumer will attempt to          * reconnect on disconnection if this is enabled.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|reconnect (String reconnect)
specifier|default
name|NettyEndpointConsumerBuilder
name|reconnect
parameter_list|(
name|String
name|reconnect
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reconnect"
argument_list|,
name|reconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used if reconnect and clientMode is enabled. The interval in milli          * seconds to attempt reconnection.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|reconnectInterval ( int reconnectInterval)
specifier|default
name|NettyEndpointConsumerBuilder
name|reconnectInterval
parameter_list|(
name|int
name|reconnectInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reconnectInterval"
argument_list|,
name|reconnectInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used if reconnect and clientMode is enabled. The interval in milli          * seconds to attempt reconnection.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|reconnectInterval ( String reconnectInterval)
specifier|default
name|NettyEndpointConsumerBuilder
name|reconnectInterval
parameter_list|(
name|String
name|reconnectInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reconnectInterval"
argument_list|,
name|reconnectInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The netty component installs a default codec if both, encoder/decoder          * is null and textline is false. Setting allowDefaultCodec to false          * prevents the netty component from installing a default codec as the          * first element in the filter chain.          *           * The option is a:<code>boolean</code> type.          *           * Group: codec          */
DECL|method|allowDefaultCodec ( boolean allowDefaultCodec)
specifier|default
name|NettyEndpointConsumerBuilder
name|allowDefaultCodec
parameter_list|(
name|boolean
name|allowDefaultCodec
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowDefaultCodec"
argument_list|,
name|allowDefaultCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The netty component installs a default codec if both, encoder/decoder          * is null and textline is false. Setting allowDefaultCodec to false          * prevents the netty component from installing a default codec as the          * first element in the filter chain.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: codec          */
DECL|method|allowDefaultCodec ( String allowDefaultCodec)
specifier|default
name|NettyEndpointConsumerBuilder
name|allowDefaultCodec
parameter_list|(
name|String
name|allowDefaultCodec
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowDefaultCodec"
argument_list|,
name|allowDefaultCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to auto append missing end delimiter when sending          * using the textline codec.          *           * The option is a:<code>boolean</code> type.          *           * Group: codec          */
DECL|method|autoAppendDelimiter ( boolean autoAppendDelimiter)
specifier|default
name|NettyEndpointConsumerBuilder
name|autoAppendDelimiter
parameter_list|(
name|boolean
name|autoAppendDelimiter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoAppendDelimiter"
argument_list|,
name|autoAppendDelimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to auto append missing end delimiter when sending          * using the textline codec.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: codec          */
DECL|method|autoAppendDelimiter ( String autoAppendDelimiter)
specifier|default
name|NettyEndpointConsumerBuilder
name|autoAppendDelimiter
parameter_list|(
name|String
name|autoAppendDelimiter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoAppendDelimiter"
argument_list|,
name|autoAppendDelimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The max line length to use for the textline codec.          *           * The option is a:<code>int</code> type.          *           * Group: codec          */
DECL|method|decoderMaxLineLength ( int decoderMaxLineLength)
specifier|default
name|NettyEndpointConsumerBuilder
name|decoderMaxLineLength
parameter_list|(
name|int
name|decoderMaxLineLength
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"decoderMaxLineLength"
argument_list|,
name|decoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The max line length to use for the textline codec.          *           * The option will be converted to a<code>int</code> type.          *           * Group: codec          */
DECL|method|decoderMaxLineLength ( String decoderMaxLineLength)
specifier|default
name|NettyEndpointConsumerBuilder
name|decoderMaxLineLength
parameter_list|(
name|String
name|decoderMaxLineLength
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"decoderMaxLineLength"
argument_list|,
name|decoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of decoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          *           * The option is a:          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          *           * Group: codec          */
DECL|method|decoders (List<Object> decoders)
specifier|default
name|NettyEndpointConsumerBuilder
name|decoders
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|decoders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"decoders"
argument_list|,
name|decoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of decoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          *           * The option will be converted to a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          *           * Group: codec          */
DECL|method|decoders (String decoders)
specifier|default
name|NettyEndpointConsumerBuilder
name|decoders
parameter_list|(
name|String
name|decoders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"decoders"
argument_list|,
name|decoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The delimiter to use for the textline codec. Possible values are LINE          * and NULL.          *           * The option is a:          *<code>org.apache.camel.component.netty.TextLineDelimiter</code> type.          *           * Group: codec          */
DECL|method|delimiter ( TextLineDelimiter delimiter)
specifier|default
name|NettyEndpointConsumerBuilder
name|delimiter
parameter_list|(
name|TextLineDelimiter
name|delimiter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delimiter"
argument_list|,
name|delimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The delimiter to use for the textline codec. Possible values are LINE          * and NULL.          *           * The option will be converted to a          *<code>org.apache.camel.component.netty.TextLineDelimiter</code> type.          *           * Group: codec          */
DECL|method|delimiter (String delimiter)
specifier|default
name|NettyEndpointConsumerBuilder
name|delimiter
parameter_list|(
name|String
name|delimiter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delimiter"
argument_list|,
name|delimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of encoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          *           * The option is a:          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          *           * Group: codec          */
DECL|method|encoders (List<Object> encoders)
specifier|default
name|NettyEndpointConsumerBuilder
name|encoders
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|encoders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"encoders"
argument_list|,
name|encoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of encoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          *           * The option will be converted to a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          *           * Group: codec          */
DECL|method|encoders (String encoders)
specifier|default
name|NettyEndpointConsumerBuilder
name|encoders
parameter_list|(
name|String
name|encoders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"encoders"
argument_list|,
name|encoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The encoding (a charset name) to use for the textline codec. If not          * provided, Camel will use the JVM default Charset.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: codec          */
DECL|method|encoding (String encoding)
specifier|default
name|NettyEndpointConsumerBuilder
name|encoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. If no codec is specified, you can use this flag to          * indicate a text line based codec; if not specified or the value is          * false, then Object Serialization is assumed over TCP.          *           * The option is a:<code>boolean</code> type.          *           * Group: codec          */
DECL|method|textline (boolean textline)
specifier|default
name|NettyEndpointConsumerBuilder
name|textline
parameter_list|(
name|boolean
name|textline
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"textline"
argument_list|,
name|textline
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. If no codec is specified, you can use this flag to          * indicate a text line based codec; if not specified or the value is          * false, then Object Serialization is assumed over TCP.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: codec          */
DECL|method|textline (String textline)
specifier|default
name|NettyEndpointConsumerBuilder
name|textline
parameter_list|(
name|String
name|textline
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"textline"
argument_list|,
name|textline
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which protocols to enable when using SSL.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|enabledProtocols ( String enabledProtocols)
specifier|default
name|NettyEndpointConsumerBuilder
name|enabledProtocols
parameter_list|(
name|String
name|enabledProtocols
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"enabledProtocols"
argument_list|,
name|enabledProtocols
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: security          */
DECL|method|keyStoreFile (File keyStoreFile)
specifier|default
name|NettyEndpointConsumerBuilder
name|keyStoreFile
parameter_list|(
name|File
name|keyStoreFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyStoreFile"
argument_list|,
name|keyStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: security          */
DECL|method|keyStoreFile (String keyStoreFile)
specifier|default
name|NettyEndpointConsumerBuilder
name|keyStoreFile
parameter_list|(
name|String
name|keyStoreFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyStoreFile"
argument_list|,
name|keyStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Keystore format to be used for payload encryption. Defaults to JKS if          * not set.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|keyStoreFormat ( String keyStoreFormat)
specifier|default
name|NettyEndpointConsumerBuilder
name|keyStoreFormat
parameter_list|(
name|String
name|keyStoreFormat
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyStoreFormat"
argument_list|,
name|keyStoreFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption. Is loaded          * by default from classpath, but you can prefix with classpath:, file:,          * or http: to load the resource from different systems.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|keyStoreResource ( String keyStoreResource)
specifier|default
name|NettyEndpointConsumerBuilder
name|keyStoreResource
parameter_list|(
name|String
name|keyStoreResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyStoreResource"
argument_list|,
name|keyStoreResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures whether the server needs client authentication when using          * SSL.          *           * The option is a:<code>boolean</code> type.          *           * Group: security          */
DECL|method|needClientAuth ( boolean needClientAuth)
specifier|default
name|NettyEndpointConsumerBuilder
name|needClientAuth
parameter_list|(
name|boolean
name|needClientAuth
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"needClientAuth"
argument_list|,
name|needClientAuth
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures whether the server needs client authentication when using          * SSL.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: security          */
DECL|method|needClientAuth ( String needClientAuth)
specifier|default
name|NettyEndpointConsumerBuilder
name|needClientAuth
parameter_list|(
name|String
name|needClientAuth
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"needClientAuth"
argument_list|,
name|needClientAuth
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password setting to use in order to encrypt/decrypt payloads sent          * using SSH.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|passphrase (String passphrase)
specifier|default
name|NettyEndpointConsumerBuilder
name|passphrase
parameter_list|(
name|String
name|passphrase
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"passphrase"
argument_list|,
name|passphrase
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Security provider to be used for payload encryption. Defaults to          * SunX509 if not set.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|securityProvider ( String securityProvider)
specifier|default
name|NettyEndpointConsumerBuilder
name|securityProvider
parameter_list|(
name|String
name|securityProvider
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"securityProvider"
argument_list|,
name|securityProvider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to specify whether SSL encryption is applied to this          * endpoint.          *           * The option is a:<code>boolean</code> type.          *           * Group: security          */
DECL|method|ssl (boolean ssl)
specifier|default
name|NettyEndpointConsumerBuilder
name|ssl
parameter_list|(
name|boolean
name|ssl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ssl"
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to specify whether SSL encryption is applied to this          * endpoint.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: security          */
DECL|method|ssl (String ssl)
specifier|default
name|NettyEndpointConsumerBuilder
name|ssl
parameter_list|(
name|String
name|ssl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ssl"
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When enabled and in SSL mode, then the Netty consumer will enrich the          * Camel Message with headers having information about the client          * certificate such as subject name, issuer name, serial number, and the          * valid date range.          *           * The option is a:<code>boolean</code> type.          *           * Group: security          */
DECL|method|sslClientCertHeaders ( boolean sslClientCertHeaders)
specifier|default
name|NettyEndpointConsumerBuilder
name|sslClientCertHeaders
parameter_list|(
name|boolean
name|sslClientCertHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslClientCertHeaders"
argument_list|,
name|sslClientCertHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When enabled and in SSL mode, then the Netty consumer will enrich the          * Camel Message with headers having information about the client          * certificate such as subject name, issuer name, serial number, and the          * valid date range.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: security          */
DECL|method|sslClientCertHeaders ( String sslClientCertHeaders)
specifier|default
name|NettyEndpointConsumerBuilder
name|sslClientCertHeaders
parameter_list|(
name|String
name|sslClientCertHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslClientCertHeaders"
argument_list|,
name|sslClientCertHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|NettyEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|NettyEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a class that could be used to return an SSL Handler.          *           * The option is a:<code>io.netty.handler.ssl.SslHandler</code> type.          *           * Group: security          */
DECL|method|sslHandler (Object sslHandler)
specifier|default
name|NettyEndpointConsumerBuilder
name|sslHandler
parameter_list|(
name|Object
name|sslHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslHandler"
argument_list|,
name|sslHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a class that could be used to return an SSL Handler.          *           * The option will be converted to a          *<code>io.netty.handler.ssl.SslHandler</code> type.          *           * Group: security          */
DECL|method|sslHandler (String sslHandler)
specifier|default
name|NettyEndpointConsumerBuilder
name|sslHandler
parameter_list|(
name|String
name|sslHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslHandler"
argument_list|,
name|sslHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: security          */
DECL|method|trustStoreFile (File trustStoreFile)
specifier|default
name|NettyEndpointConsumerBuilder
name|trustStoreFile
parameter_list|(
name|File
name|trustStoreFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustStoreFile"
argument_list|,
name|trustStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: security          */
DECL|method|trustStoreFile ( String trustStoreFile)
specifier|default
name|NettyEndpointConsumerBuilder
name|trustStoreFile
parameter_list|(
name|String
name|trustStoreFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustStoreFile"
argument_list|,
name|trustStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption. Is loaded          * by default from classpath, but you can prefix with classpath:, file:,          * or http: to load the resource from different systems.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|trustStoreResource ( String trustStoreResource)
specifier|default
name|NettyEndpointConsumerBuilder
name|trustStoreResource
parameter_list|(
name|String
name|trustStoreResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustStoreResource"
argument_list|,
name|trustStoreResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Netty component.      */
DECL|interface|AdvancedNettyEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedNettyEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|NettyEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|NettyEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Allows to configure a backlog for netty consumer (server). Note the          * backlog is just a best effort depending on the OS. Setting this          * option to a value such as 200, 500 or 1000, tells the TCP stack how          * long the accept queue can be If this option is not configured, then          * the backlog depends on OS setting.          *           * The option is a:<code>int</code> type.          *           * Group: consumer (advanced)          */
DECL|method|backlog (int backlog)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|backlog
parameter_list|(
name|int
name|backlog
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backlog"
argument_list|,
name|backlog
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to configure a backlog for netty consumer (server). Note the          * backlog is just a best effort depending on the OS. Setting this          * option to a value such as 200, 500 or 1000, tells the TCP stack how          * long the accept queue can be If this option is not configured, then          * the backlog depends on OS setting.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer (advanced)          */
DECL|method|backlog (String backlog)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|backlog
parameter_list|(
name|String
name|backlog
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backlog"
argument_list|,
name|backlog
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When netty works on nio mode, it uses default bossCount parameter          * from Netty, which is 1. User can use this operation to override the          * default bossCount from Netty.          *           * The option is a:<code>int</code> type.          *           * Group: consumer (advanced)          */
DECL|method|bossCount (int bossCount)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|bossCount
parameter_list|(
name|int
name|bossCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bossCount"
argument_list|,
name|bossCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When netty works on nio mode, it uses default bossCount parameter          * from Netty, which is 1. User can use this operation to override the          * default bossCount from Netty.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer (advanced)          */
DECL|method|bossCount (String bossCount)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|bossCount
parameter_list|(
name|String
name|bossCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bossCount"
argument_list|,
name|bossCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the BossGroup which could be used for handling the new connection          * of the server side across the NettyEndpoint.          *           * The option is a:<code>io.netty.channel.EventLoopGroup</code> type.          *           * Group: consumer (advanced)          */
DECL|method|bossGroup (Object bossGroup)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|bossGroup
parameter_list|(
name|Object
name|bossGroup
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bossGroup"
argument_list|,
name|bossGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the BossGroup which could be used for handling the new connection          * of the server side across the NettyEndpoint.          *           * The option will be converted to a          *<code>io.netty.channel.EventLoopGroup</code> type.          *           * Group: consumer (advanced)          */
DECL|method|bossGroup (String bossGroup)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|bossGroup
parameter_list|(
name|String
name|bossGroup
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bossGroup"
argument_list|,
name|bossGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If sync is enabled then this option dictates NettyConsumer if it          * should disconnect where there is no reply to send back.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|disconnectOnNoReply ( boolean disconnectOnNoReply)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|disconnectOnNoReply
parameter_list|(
name|boolean
name|disconnectOnNoReply
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"disconnectOnNoReply"
argument_list|,
name|disconnectOnNoReply
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If sync is enabled then this option dictates NettyConsumer if it          * should disconnect where there is no reply to send back.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|disconnectOnNoReply ( String disconnectOnNoReply)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|disconnectOnNoReply
parameter_list|(
name|String
name|disconnectOnNoReply
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"disconnectOnNoReply"
argument_list|,
name|disconnectOnNoReply
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom NettyServerBootstrapFactory.          *           * The option is a:          *<code>org.apache.camel.component.netty.NettyServerBootstrapFactory</code> type.          *           * Group: consumer (advanced)          */
DECL|method|nettyServerBootstrapFactory ( Object nettyServerBootstrapFactory)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|nettyServerBootstrapFactory
parameter_list|(
name|Object
name|nettyServerBootstrapFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nettyServerBootstrapFactory"
argument_list|,
name|nettyServerBootstrapFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom NettyServerBootstrapFactory.          *           * The option will be converted to a          *<code>org.apache.camel.component.netty.NettyServerBootstrapFactory</code> type.          *           * Group: consumer (advanced)          */
DECL|method|nettyServerBootstrapFactory ( String nettyServerBootstrapFactory)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|nettyServerBootstrapFactory
parameter_list|(
name|String
name|nettyServerBootstrapFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nettyServerBootstrapFactory"
argument_list|,
name|nettyServerBootstrapFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When using UDP then this option can be used to specify a network          * interface by its name, such as eth0 to join a multicast group.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer (advanced)          */
DECL|method|networkInterface ( String networkInterface)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|networkInterface
parameter_list|(
name|String
name|networkInterface
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"networkInterface"
argument_list|,
name|networkInterface
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If sync is enabled this option dictates NettyConsumer which logging          * level to use when logging a there is no reply to send back.          *           * The option is a:<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: consumer (advanced)          */
DECL|method|noReplyLogLevel ( LoggingLevel noReplyLogLevel)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|noReplyLogLevel
parameter_list|(
name|LoggingLevel
name|noReplyLogLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"noReplyLogLevel"
argument_list|,
name|noReplyLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If sync is enabled this option dictates NettyConsumer which logging          * level to use when logging a there is no reply to send back.          *           * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: consumer (advanced)          */
DECL|method|noReplyLogLevel ( String noReplyLogLevel)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|noReplyLogLevel
parameter_list|(
name|String
name|noReplyLogLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"noReplyLogLevel"
argument_list|,
name|noReplyLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the server (NettyConsumer) catches an          * java.nio.channels.ClosedChannelException then its logged using this          * logging level. This is used to avoid logging the closed channel          * exceptions, as clients can disconnect abruptly and then cause a flood          * of closed exceptions in the Netty server.          *           * The option is a:<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: consumer (advanced)          */
DECL|method|serverClosedChannelExceptionCaughtLogLevel ( LoggingLevel serverClosedChannelExceptionCaughtLogLevel)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|serverClosedChannelExceptionCaughtLogLevel
parameter_list|(
name|LoggingLevel
name|serverClosedChannelExceptionCaughtLogLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"serverClosedChannelExceptionCaughtLogLevel"
argument_list|,
name|serverClosedChannelExceptionCaughtLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the server (NettyConsumer) catches an          * java.nio.channels.ClosedChannelException then its logged using this          * logging level. This is used to avoid logging the closed channel          * exceptions, as clients can disconnect abruptly and then cause a flood          * of closed exceptions in the Netty server.          *           * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: consumer (advanced)          */
DECL|method|serverClosedChannelExceptionCaughtLogLevel ( String serverClosedChannelExceptionCaughtLogLevel)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|serverClosedChannelExceptionCaughtLogLevel
parameter_list|(
name|String
name|serverClosedChannelExceptionCaughtLogLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"serverClosedChannelExceptionCaughtLogLevel"
argument_list|,
name|serverClosedChannelExceptionCaughtLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the server (NettyConsumer) catches an exception then its logged          * using this logging level.          *           * The option is a:<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: consumer (advanced)          */
DECL|method|serverExceptionCaughtLogLevel ( LoggingLevel serverExceptionCaughtLogLevel)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|serverExceptionCaughtLogLevel
parameter_list|(
name|LoggingLevel
name|serverExceptionCaughtLogLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"serverExceptionCaughtLogLevel"
argument_list|,
name|serverExceptionCaughtLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the server (NettyConsumer) catches an exception then its logged          * using this logging level.          *           * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: consumer (advanced)          */
DECL|method|serverExceptionCaughtLogLevel ( String serverExceptionCaughtLogLevel)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|serverExceptionCaughtLogLevel
parameter_list|(
name|String
name|serverExceptionCaughtLogLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"serverExceptionCaughtLogLevel"
argument_list|,
name|serverExceptionCaughtLogLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom ServerInitializerFactory.          *           * The option is a:          *<code>org.apache.camel.component.netty.ServerInitializerFactory</code> type.          *           * Group: consumer (advanced)          */
DECL|method|serverInitializerFactory ( Object serverInitializerFactory)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|serverInitializerFactory
parameter_list|(
name|Object
name|serverInitializerFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"serverInitializerFactory"
argument_list|,
name|serverInitializerFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom ServerInitializerFactory.          *           * The option will be converted to a          *<code>org.apache.camel.component.netty.ServerInitializerFactory</code> type.          *           * Group: consumer (advanced)          */
DECL|method|serverInitializerFactory ( String serverInitializerFactory)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|serverInitializerFactory
parameter_list|(
name|String
name|serverInitializerFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"serverInitializerFactory"
argument_list|,
name|serverInitializerFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use ordered thread pool, to ensure events are processed          * orderly on the same channel.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|usingExecutorService ( boolean usingExecutorService)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|usingExecutorService
parameter_list|(
name|boolean
name|usingExecutorService
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"usingExecutorService"
argument_list|,
name|usingExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use ordered thread pool, to ensure events are processed          * orderly on the same channel.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|usingExecutorService ( String usingExecutorService)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|usingExecutorService
parameter_list|(
name|String
name|usingExecutorService
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"usingExecutorService"
argument_list|,
name|usingExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP when transferExchange is true. When set to true,          * serializable objects in headers and properties will be added to the          * exchange. Otherwise Camel will exclude any non-serializable objects          * and log it at WARN level.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|allowSerializedHeaders ( boolean allowSerializedHeaders)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|allowSerializedHeaders
parameter_list|(
name|boolean
name|allowSerializedHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowSerializedHeaders"
argument_list|,
name|allowSerializedHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP when transferExchange is true. When set to true,          * serializable objects in headers and properties will be added to the          * exchange. Otherwise Camel will exclude any non-serializable objects          * and log it at WARN level.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|allowSerializedHeaders ( String allowSerializedHeaders)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|allowSerializedHeaders
parameter_list|(
name|String
name|allowSerializedHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowSerializedHeaders"
argument_list|,
name|allowSerializedHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit ChannelGroup.          *           * The option is a:<code>io.netty.channel.group.ChannelGroup</code>          * type.          *           * Group: advanced          */
DECL|method|channelGroup ( Object channelGroup)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|channelGroup
parameter_list|(
name|Object
name|channelGroup
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"channelGroup"
argument_list|,
name|channelGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit ChannelGroup.          *           * The option will be converted to a          *<code>io.netty.channel.group.ChannelGroup</code> type.          *           * Group: advanced          */
DECL|method|channelGroup ( String channelGroup)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|channelGroup
parameter_list|(
name|String
name|channelGroup
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"channelGroup"
argument_list|,
name|channelGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use native transport instead of NIO. Native transport          * takes advantage of the host operating system and is only supported on          * some platforms. You need to add the netty JAR for the host operating          * system you are using. See more details at:          * http://netty.io/wiki/native-transports.html.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|nativeTransport ( boolean nativeTransport)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|nativeTransport
parameter_list|(
name|boolean
name|nativeTransport
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nativeTransport"
argument_list|,
name|nativeTransport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use native transport instead of NIO. Native transport          * takes advantage of the host operating system and is only supported on          * some platforms. You need to add the netty JAR for the host operating          * system you are using. See more details at:          * http://netty.io/wiki/native-transports.html.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|nativeTransport ( String nativeTransport)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|nativeTransport
parameter_list|(
name|String
name|nativeTransport
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nativeTransport"
argument_list|,
name|nativeTransport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to configure additional netty options using option. as prefix.          * For example option.child.keepAlive=false to set the netty option          * child.keepAlive=false. See the Netty documentation for possible          * options that can be used.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|options ( Map<String, Object> options)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|options
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"options"
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to configure additional netty options using option. as prefix.          * For example option.child.keepAlive=false to set the netty option          * child.keepAlive=false. See the Netty documentation for possible          * options that can be used.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|options (String options)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|options
parameter_list|(
name|String
name|options
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"options"
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during inbound communication.          * Size is bytes.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|receiveBufferSize ( int receiveBufferSize)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|receiveBufferSize
parameter_list|(
name|int
name|receiveBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during inbound communication.          * Size is bytes.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|receiveBufferSize ( String receiveBufferSize)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|receiveBufferSize
parameter_list|(
name|String
name|receiveBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the buffer size predictor. See details at Jetty          * documentation and this mail thread.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|receiveBufferSizePredictor ( int receiveBufferSizePredictor)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|receiveBufferSizePredictor
parameter_list|(
name|int
name|receiveBufferSizePredictor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveBufferSizePredictor"
argument_list|,
name|receiveBufferSizePredictor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the buffer size predictor. See details at Jetty          * documentation and this mail thread.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|receiveBufferSizePredictor ( String receiveBufferSizePredictor)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|receiveBufferSizePredictor
parameter_list|(
name|String
name|receiveBufferSizePredictor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveBufferSizePredictor"
argument_list|,
name|receiveBufferSizePredictor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during outbound communication.          * Size is bytes.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|sendBufferSize ( int sendBufferSize)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|sendBufferSize
parameter_list|(
name|int
name|sendBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during outbound communication.          * Size is bytes.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|sendBufferSize ( String sendBufferSize)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|sendBufferSize
parameter_list|(
name|String
name|sendBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|transferExchange ( boolean transferExchange)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|transferExchange
parameter_list|(
name|boolean
name|transferExchange
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|transferExchange ( String transferExchange)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|transferExchange
parameter_list|(
name|String
name|transferExchange
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * For UDP only. If enabled the using byte array codec instead of Java          * serialization protocol.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|udpByteArrayCodec ( boolean udpByteArrayCodec)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|udpByteArrayCodec
parameter_list|(
name|boolean
name|udpByteArrayCodec
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"udpByteArrayCodec"
argument_list|,
name|udpByteArrayCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * For UDP only. If enabled the using byte array codec instead of Java          * serialization protocol.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|udpByteArrayCodec ( String udpByteArrayCodec)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|udpByteArrayCodec
parameter_list|(
name|String
name|udpByteArrayCodec
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"udpByteArrayCodec"
argument_list|,
name|udpByteArrayCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When netty works on nio mode, it uses default workerCount parameter          * from Netty, which is cpu_core_threads x 2. User can use this          * operation to override the default workerCount from Netty.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|workerCount (int workerCount)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|workerCount
parameter_list|(
name|int
name|workerCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workerCount"
argument_list|,
name|workerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When netty works on nio mode, it uses default workerCount parameter          * from Netty, which is cpu_core_threads x 2. User can use this          * operation to override the default workerCount from Netty.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|workerCount ( String workerCount)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|workerCount
parameter_list|(
name|String
name|workerCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workerCount"
argument_list|,
name|workerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit EventLoopGroup as the boss thread pool. For example          * to share a thread pool with multiple consumers or producers. By          * default each consumer or producer has their own worker pool with 2 x          * cpu count core threads.          *           * The option is a:<code>io.netty.channel.EventLoopGroup</code> type.          *           * Group: advanced          */
DECL|method|workerGroup ( Object workerGroup)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|workerGroup
parameter_list|(
name|Object
name|workerGroup
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workerGroup"
argument_list|,
name|workerGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit EventLoopGroup as the boss thread pool. For example          * to share a thread pool with multiple consumers or producers. By          * default each consumer or producer has their own worker pool with 2 x          * cpu count core threads.          *           * The option will be converted to a          *<code>io.netty.channel.EventLoopGroup</code> type.          *           * Group: advanced          */
DECL|method|workerGroup ( String workerGroup)
specifier|default
name|AdvancedNettyEndpointConsumerBuilder
name|workerGroup
parameter_list|(
name|String
name|workerGroup
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workerGroup"
argument_list|,
name|workerGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Netty component.      */
DECL|interface|NettyEndpointProducerBuilder
specifier|public
interface|interface
name|NettyEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedNettyEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Netty Channel right after          * use. Can be used for both consumer and producer.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|disconnect (boolean disconnect)
specifier|default
name|NettyEndpointProducerBuilder
name|disconnect
parameter_list|(
name|boolean
name|disconnect
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Netty Channel right after          * use. Can be used for both consumer and producer.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|disconnect (String disconnect)
specifier|default
name|NettyEndpointProducerBuilder
name|disconnect
parameter_list|(
name|String
name|disconnect
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to ensure socket is not closed due to inactivity.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|keepAlive (boolean keepAlive)
specifier|default
name|NettyEndpointProducerBuilder
name|keepAlive
parameter_list|(
name|boolean
name|keepAlive
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to ensure socket is not closed due to inactivity.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|keepAlive (String keepAlive)
specifier|default
name|NettyEndpointProducerBuilder
name|keepAlive
parameter_list|(
name|String
name|keepAlive
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to facilitate socket multiplexing.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|reuseAddress (boolean reuseAddress)
specifier|default
name|NettyEndpointProducerBuilder
name|reuseAddress
parameter_list|(
name|boolean
name|reuseAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to facilitate socket multiplexing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|reuseAddress (String reuseAddress)
specifier|default
name|NettyEndpointProducerBuilder
name|reuseAddress
parameter_list|(
name|String
name|reuseAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option allows producers and consumers (in client mode) to reuse          * the same Netty Channel for the lifecycle of processing the Exchange.          * This is useful if you need to call a server multiple times in a Camel          * route and want to use the same network connection. When using this,          * the channel is not returned to the connection pool until the Exchange          * is done; or disconnected if the disconnect option is set to true. The          * reused Channel is stored on the Exchange as an exchange property with          * the key NettyConstants#NETTY_CHANNEL which allows you to obtain the          * channel during routing and use it as well.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|reuseChannel (boolean reuseChannel)
specifier|default
name|NettyEndpointProducerBuilder
name|reuseChannel
parameter_list|(
name|boolean
name|reuseChannel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reuseChannel"
argument_list|,
name|reuseChannel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option allows producers and consumers (in client mode) to reuse          * the same Netty Channel for the lifecycle of processing the Exchange.          * This is useful if you need to call a server multiple times in a Camel          * route and want to use the same network connection. When using this,          * the channel is not returned to the connection pool until the Exchange          * is done; or disconnected if the disconnect option is set to true. The          * reused Channel is stored on the Exchange as an exchange property with          * the key NettyConstants#NETTY_CHANNEL which allows you to obtain the          * channel during routing and use it as well.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|reuseChannel (String reuseChannel)
specifier|default
name|NettyEndpointProducerBuilder
name|reuseChannel
parameter_list|(
name|String
name|reuseChannel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reuseChannel"
argument_list|,
name|reuseChannel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|sync (boolean sync)
specifier|default
name|NettyEndpointProducerBuilder
name|sync
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|sync (String sync)
specifier|default
name|NettyEndpointProducerBuilder
name|sync
parameter_list|(
name|String
name|sync
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to improve TCP protocol performance.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|tcpNoDelay (boolean tcpNoDelay)
specifier|default
name|NettyEndpointProducerBuilder
name|tcpNoDelay
parameter_list|(
name|boolean
name|tcpNoDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to improve TCP protocol performance.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|tcpNoDelay (String tcpNoDelay)
specifier|default
name|NettyEndpointProducerBuilder
name|tcpNoDelay
parameter_list|(
name|String
name|tcpNoDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time to wait for a socket connection to be available. Value is in          * milliseconds.          *           * The option is a:<code>int</code> type.          *           * Group: producer          */
DECL|method|connectTimeout (int connectTimeout)
specifier|default
name|NettyEndpointProducerBuilder
name|connectTimeout
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time to wait for a socket connection to be available. Value is in          * milliseconds.          *           * The option will be converted to a<code>int</code> type.          *           * Group: producer          */
DECL|method|connectTimeout ( String connectTimeout)
specifier|default
name|NettyEndpointProducerBuilder
name|connectTimeout
parameter_list|(
name|String
name|connectTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|NettyEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|NettyEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to use a timeout for the Netty producer when calling a remote          * server. By default no timeout is in use. The value is in milli          * seconds, so eg 30000 is 30 seconds. The requestTimeout is using          * Netty's ReadTimeoutHandler to trigger the timeout.          *           * The option is a:<code>long</code> type.          *           * Group: producer          */
DECL|method|requestTimeout (long requestTimeout)
specifier|default
name|NettyEndpointProducerBuilder
name|requestTimeout
parameter_list|(
name|long
name|requestTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"requestTimeout"
argument_list|,
name|requestTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to use a timeout for the Netty producer when calling a remote          * server. By default no timeout is in use. The value is in milli          * seconds, so eg 30000 is 30 seconds. The requestTimeout is using          * Netty's ReadTimeoutHandler to trigger the timeout.          *           * The option will be converted to a<code>long</code> type.          *           * Group: producer          */
DECL|method|requestTimeout ( String requestTimeout)
specifier|default
name|NettyEndpointProducerBuilder
name|requestTimeout
parameter_list|(
name|String
name|requestTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"requestTimeout"
argument_list|,
name|requestTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The netty component installs a default codec if both, encoder/decoder          * is null and textline is false. Setting allowDefaultCodec to false          * prevents the netty component from installing a default codec as the          * first element in the filter chain.          *           * The option is a:<code>boolean</code> type.          *           * Group: codec          */
DECL|method|allowDefaultCodec ( boolean allowDefaultCodec)
specifier|default
name|NettyEndpointProducerBuilder
name|allowDefaultCodec
parameter_list|(
name|boolean
name|allowDefaultCodec
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowDefaultCodec"
argument_list|,
name|allowDefaultCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The netty component installs a default codec if both, encoder/decoder          * is null and textline is false. Setting allowDefaultCodec to false          * prevents the netty component from installing a default codec as the          * first element in the filter chain.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: codec          */
DECL|method|allowDefaultCodec ( String allowDefaultCodec)
specifier|default
name|NettyEndpointProducerBuilder
name|allowDefaultCodec
parameter_list|(
name|String
name|allowDefaultCodec
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowDefaultCodec"
argument_list|,
name|allowDefaultCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to auto append missing end delimiter when sending          * using the textline codec.          *           * The option is a:<code>boolean</code> type.          *           * Group: codec          */
DECL|method|autoAppendDelimiter ( boolean autoAppendDelimiter)
specifier|default
name|NettyEndpointProducerBuilder
name|autoAppendDelimiter
parameter_list|(
name|boolean
name|autoAppendDelimiter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoAppendDelimiter"
argument_list|,
name|autoAppendDelimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to auto append missing end delimiter when sending          * using the textline codec.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: codec          */
DECL|method|autoAppendDelimiter ( String autoAppendDelimiter)
specifier|default
name|NettyEndpointProducerBuilder
name|autoAppendDelimiter
parameter_list|(
name|String
name|autoAppendDelimiter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoAppendDelimiter"
argument_list|,
name|autoAppendDelimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The max line length to use for the textline codec.          *           * The option is a:<code>int</code> type.          *           * Group: codec          */
DECL|method|decoderMaxLineLength ( int decoderMaxLineLength)
specifier|default
name|NettyEndpointProducerBuilder
name|decoderMaxLineLength
parameter_list|(
name|int
name|decoderMaxLineLength
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"decoderMaxLineLength"
argument_list|,
name|decoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The max line length to use for the textline codec.          *           * The option will be converted to a<code>int</code> type.          *           * Group: codec          */
DECL|method|decoderMaxLineLength ( String decoderMaxLineLength)
specifier|default
name|NettyEndpointProducerBuilder
name|decoderMaxLineLength
parameter_list|(
name|String
name|decoderMaxLineLength
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"decoderMaxLineLength"
argument_list|,
name|decoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of decoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          *           * The option is a:          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          *           * Group: codec          */
DECL|method|decoders (List<Object> decoders)
specifier|default
name|NettyEndpointProducerBuilder
name|decoders
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|decoders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"decoders"
argument_list|,
name|decoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of decoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          *           * The option will be converted to a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          *           * Group: codec          */
DECL|method|decoders (String decoders)
specifier|default
name|NettyEndpointProducerBuilder
name|decoders
parameter_list|(
name|String
name|decoders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"decoders"
argument_list|,
name|decoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The delimiter to use for the textline codec. Possible values are LINE          * and NULL.          *           * The option is a:          *<code>org.apache.camel.component.netty.TextLineDelimiter</code> type.          *           * Group: codec          */
DECL|method|delimiter ( TextLineDelimiter delimiter)
specifier|default
name|NettyEndpointProducerBuilder
name|delimiter
parameter_list|(
name|TextLineDelimiter
name|delimiter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delimiter"
argument_list|,
name|delimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The delimiter to use for the textline codec. Possible values are LINE          * and NULL.          *           * The option will be converted to a          *<code>org.apache.camel.component.netty.TextLineDelimiter</code> type.          *           * Group: codec          */
DECL|method|delimiter (String delimiter)
specifier|default
name|NettyEndpointProducerBuilder
name|delimiter
parameter_list|(
name|String
name|delimiter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delimiter"
argument_list|,
name|delimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of encoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          *           * The option is a:          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          *           * Group: codec          */
DECL|method|encoders (List<Object> encoders)
specifier|default
name|NettyEndpointProducerBuilder
name|encoders
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|encoders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"encoders"
argument_list|,
name|encoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of encoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          *           * The option will be converted to a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          *           * Group: codec          */
DECL|method|encoders (String encoders)
specifier|default
name|NettyEndpointProducerBuilder
name|encoders
parameter_list|(
name|String
name|encoders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"encoders"
argument_list|,
name|encoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The encoding (a charset name) to use for the textline codec. If not          * provided, Camel will use the JVM default Charset.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: codec          */
DECL|method|encoding (String encoding)
specifier|default
name|NettyEndpointProducerBuilder
name|encoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. If no codec is specified, you can use this flag to          * indicate a text line based codec; if not specified or the value is          * false, then Object Serialization is assumed over TCP.          *           * The option is a:<code>boolean</code> type.          *           * Group: codec          */
DECL|method|textline (boolean textline)
specifier|default
name|NettyEndpointProducerBuilder
name|textline
parameter_list|(
name|boolean
name|textline
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"textline"
argument_list|,
name|textline
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. If no codec is specified, you can use this flag to          * indicate a text line based codec; if not specified or the value is          * false, then Object Serialization is assumed over TCP.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: codec          */
DECL|method|textline (String textline)
specifier|default
name|NettyEndpointProducerBuilder
name|textline
parameter_list|(
name|String
name|textline
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"textline"
argument_list|,
name|textline
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which protocols to enable when using SSL.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|enabledProtocols ( String enabledProtocols)
specifier|default
name|NettyEndpointProducerBuilder
name|enabledProtocols
parameter_list|(
name|String
name|enabledProtocols
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"enabledProtocols"
argument_list|,
name|enabledProtocols
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: security          */
DECL|method|keyStoreFile (File keyStoreFile)
specifier|default
name|NettyEndpointProducerBuilder
name|keyStoreFile
parameter_list|(
name|File
name|keyStoreFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyStoreFile"
argument_list|,
name|keyStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: security          */
DECL|method|keyStoreFile (String keyStoreFile)
specifier|default
name|NettyEndpointProducerBuilder
name|keyStoreFile
parameter_list|(
name|String
name|keyStoreFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyStoreFile"
argument_list|,
name|keyStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Keystore format to be used for payload encryption. Defaults to JKS if          * not set.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|keyStoreFormat ( String keyStoreFormat)
specifier|default
name|NettyEndpointProducerBuilder
name|keyStoreFormat
parameter_list|(
name|String
name|keyStoreFormat
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyStoreFormat"
argument_list|,
name|keyStoreFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption. Is loaded          * by default from classpath, but you can prefix with classpath:, file:,          * or http: to load the resource from different systems.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|keyStoreResource ( String keyStoreResource)
specifier|default
name|NettyEndpointProducerBuilder
name|keyStoreResource
parameter_list|(
name|String
name|keyStoreResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyStoreResource"
argument_list|,
name|keyStoreResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password setting to use in order to encrypt/decrypt payloads sent          * using SSH.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|passphrase (String passphrase)
specifier|default
name|NettyEndpointProducerBuilder
name|passphrase
parameter_list|(
name|String
name|passphrase
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"passphrase"
argument_list|,
name|passphrase
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Security provider to be used for payload encryption. Defaults to          * SunX509 if not set.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|securityProvider ( String securityProvider)
specifier|default
name|NettyEndpointProducerBuilder
name|securityProvider
parameter_list|(
name|String
name|securityProvider
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"securityProvider"
argument_list|,
name|securityProvider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to specify whether SSL encryption is applied to this          * endpoint.          *           * The option is a:<code>boolean</code> type.          *           * Group: security          */
DECL|method|ssl (boolean ssl)
specifier|default
name|NettyEndpointProducerBuilder
name|ssl
parameter_list|(
name|boolean
name|ssl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ssl"
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to specify whether SSL encryption is applied to this          * endpoint.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: security          */
DECL|method|ssl (String ssl)
specifier|default
name|NettyEndpointProducerBuilder
name|ssl
parameter_list|(
name|String
name|ssl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ssl"
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When enabled and in SSL mode, then the Netty consumer will enrich the          * Camel Message with headers having information about the client          * certificate such as subject name, issuer name, serial number, and the          * valid date range.          *           * The option is a:<code>boolean</code> type.          *           * Group: security          */
DECL|method|sslClientCertHeaders ( boolean sslClientCertHeaders)
specifier|default
name|NettyEndpointProducerBuilder
name|sslClientCertHeaders
parameter_list|(
name|boolean
name|sslClientCertHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslClientCertHeaders"
argument_list|,
name|sslClientCertHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When enabled and in SSL mode, then the Netty consumer will enrich the          * Camel Message with headers having information about the client          * certificate such as subject name, issuer name, serial number, and the          * valid date range.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: security          */
DECL|method|sslClientCertHeaders ( String sslClientCertHeaders)
specifier|default
name|NettyEndpointProducerBuilder
name|sslClientCertHeaders
parameter_list|(
name|String
name|sslClientCertHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslClientCertHeaders"
argument_list|,
name|sslClientCertHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|NettyEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|NettyEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a class that could be used to return an SSL Handler.          *           * The option is a:<code>io.netty.handler.ssl.SslHandler</code> type.          *           * Group: security          */
DECL|method|sslHandler (Object sslHandler)
specifier|default
name|NettyEndpointProducerBuilder
name|sslHandler
parameter_list|(
name|Object
name|sslHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslHandler"
argument_list|,
name|sslHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a class that could be used to return an SSL Handler.          *           * The option will be converted to a          *<code>io.netty.handler.ssl.SslHandler</code> type.          *           * Group: security          */
DECL|method|sslHandler (String sslHandler)
specifier|default
name|NettyEndpointProducerBuilder
name|sslHandler
parameter_list|(
name|String
name|sslHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslHandler"
argument_list|,
name|sslHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: security          */
DECL|method|trustStoreFile (File trustStoreFile)
specifier|default
name|NettyEndpointProducerBuilder
name|trustStoreFile
parameter_list|(
name|File
name|trustStoreFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustStoreFile"
argument_list|,
name|trustStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: security          */
DECL|method|trustStoreFile ( String trustStoreFile)
specifier|default
name|NettyEndpointProducerBuilder
name|trustStoreFile
parameter_list|(
name|String
name|trustStoreFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustStoreFile"
argument_list|,
name|trustStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption. Is loaded          * by default from classpath, but you can prefix with classpath:, file:,          * or http: to load the resource from different systems.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|trustStoreResource ( String trustStoreResource)
specifier|default
name|NettyEndpointProducerBuilder
name|trustStoreResource
parameter_list|(
name|String
name|trustStoreResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustStoreResource"
argument_list|,
name|trustStoreResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Netty component.      */
DECL|interface|AdvancedNettyEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedNettyEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|NettyEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|NettyEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To use a custom ClientInitializerFactory.          *           * The option is a:          *<code>org.apache.camel.component.netty.ClientInitializerFactory</code> type.          *           * Group: producer (advanced)          */
DECL|method|clientInitializerFactory ( Object clientInitializerFactory)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|clientInitializerFactory
parameter_list|(
name|Object
name|clientInitializerFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientInitializerFactory"
argument_list|,
name|clientInitializerFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom ClientInitializerFactory.          *           * The option will be converted to a          *<code>org.apache.camel.component.netty.ClientInitializerFactory</code> type.          *           * Group: producer (advanced)          */
DECL|method|clientInitializerFactory ( String clientInitializerFactory)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|clientInitializerFactory
parameter_list|(
name|String
name|clientInitializerFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientInitializerFactory"
argument_list|,
name|clientInitializerFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom correlation manager to manage how request and reply          * messages are mapped when using request/reply with the netty producer.          * This should only be used if you have a way to map requests together          * with replies such as if there is correlation ids in both the request          * and reply messages. This can be used if you want to multiplex          * concurrent messages on the same channel (aka connection) in netty.          * When doing this you must have a way to correlate the request and          * reply messages so you can store the right reply on the inflight Camel          * Exchange before its continued routed. We recommend extending the          * TimeoutCorrelationManagerSupport when you build custom correlation          * managers. This provides support for timeout and other complexities          * you otherwise would need to implement as well. See also the          * producerPoolEnabled option for more details.          *           * The option is a:          *<code>org.apache.camel.component.netty.NettyCamelStateCorrelationManager</code> type.          *           * Group: producer (advanced)          */
DECL|method|correlationManager ( Object correlationManager)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|correlationManager
parameter_list|(
name|Object
name|correlationManager
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"correlationManager"
argument_list|,
name|correlationManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom correlation manager to manage how request and reply          * messages are mapped when using request/reply with the netty producer.          * This should only be used if you have a way to map requests together          * with replies such as if there is correlation ids in both the request          * and reply messages. This can be used if you want to multiplex          * concurrent messages on the same channel (aka connection) in netty.          * When doing this you must have a way to correlate the request and          * reply messages so you can store the right reply on the inflight Camel          * Exchange before its continued routed. We recommend extending the          * TimeoutCorrelationManagerSupport when you build custom correlation          * managers. This provides support for timeout and other complexities          * you otherwise would need to implement as well. See also the          * producerPoolEnabled option for more details.          *           * The option will be converted to a          *<code>org.apache.camel.component.netty.NettyCamelStateCorrelationManager</code> type.          *           * Group: producer (advanced)          */
DECL|method|correlationManager ( String correlationManager)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|correlationManager
parameter_list|(
name|String
name|correlationManager
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"correlationManager"
argument_list|,
name|correlationManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Channels can be lazily created to avoid exceptions, if the remote          * server is not up and running when the Camel producer is started.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer (advanced)          */
DECL|method|lazyChannelCreation ( boolean lazyChannelCreation)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|lazyChannelCreation
parameter_list|(
name|boolean
name|lazyChannelCreation
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyChannelCreation"
argument_list|,
name|lazyChannelCreation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Channels can be lazily created to avoid exceptions, if the remote          * server is not up and running when the Camel producer is started.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer (advanced)          */
DECL|method|lazyChannelCreation ( String lazyChannelCreation)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|lazyChannelCreation
parameter_list|(
name|String
name|lazyChannelCreation
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyChannelCreation"
argument_list|,
name|lazyChannelCreation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether producer pool is enabled or not. Important: If you turn this          * off then a single shared connection is used for the producer, also if          * you are doing request/reply. That means there is a potential issue          * with interleaved responses if replies comes back out-of-order.          * Therefore you need to have a correlation id in both the request and          * reply messages so you can properly correlate the replies to the Camel          * callback that is responsible for continue processing the message in          * Camel. To do this you need to implement          * NettyCamelStateCorrelationManager as correlation manager and          * configure it via the correlationManager option. See also the          * correlationManager option for more details.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer (advanced)          */
DECL|method|producerPoolEnabled ( boolean producerPoolEnabled)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|producerPoolEnabled
parameter_list|(
name|boolean
name|producerPoolEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"producerPoolEnabled"
argument_list|,
name|producerPoolEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether producer pool is enabled or not. Important: If you turn this          * off then a single shared connection is used for the producer, also if          * you are doing request/reply. That means there is a potential issue          * with interleaved responses if replies comes back out-of-order.          * Therefore you need to have a correlation id in both the request and          * reply messages so you can properly correlate the replies to the Camel          * callback that is responsible for continue processing the message in          * Camel. To do this you need to implement          * NettyCamelStateCorrelationManager as correlation manager and          * configure it via the correlationManager option. See also the          * correlationManager option for more details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer (advanced)          */
DECL|method|producerPoolEnabled ( String producerPoolEnabled)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|producerPoolEnabled
parameter_list|(
name|String
name|producerPoolEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"producerPoolEnabled"
argument_list|,
name|producerPoolEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the cap on the number of objects that can be allocated by the          * pool (checked out to clients, or idle awaiting checkout) at a given          * time. Use a negative value for no limit.          *           * The option is a:<code>int</code> type.          *           * Group: producer (advanced)          */
DECL|method|producerPoolMaxActive ( int producerPoolMaxActive)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|producerPoolMaxActive
parameter_list|(
name|int
name|producerPoolMaxActive
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"producerPoolMaxActive"
argument_list|,
name|producerPoolMaxActive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the cap on the number of objects that can be allocated by the          * pool (checked out to clients, or idle awaiting checkout) at a given          * time. Use a negative value for no limit.          *           * The option will be converted to a<code>int</code> type.          *           * Group: producer (advanced)          */
DECL|method|producerPoolMaxActive ( String producerPoolMaxActive)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|producerPoolMaxActive
parameter_list|(
name|String
name|producerPoolMaxActive
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"producerPoolMaxActive"
argument_list|,
name|producerPoolMaxActive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the cap on the number of idle instances in the pool.          *           * The option is a:<code>int</code> type.          *           * Group: producer (advanced)          */
DECL|method|producerPoolMaxIdle ( int producerPoolMaxIdle)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|producerPoolMaxIdle
parameter_list|(
name|int
name|producerPoolMaxIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"producerPoolMaxIdle"
argument_list|,
name|producerPoolMaxIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the cap on the number of idle instances in the pool.          *           * The option will be converted to a<code>int</code> type.          *           * Group: producer (advanced)          */
DECL|method|producerPoolMaxIdle ( String producerPoolMaxIdle)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|producerPoolMaxIdle
parameter_list|(
name|String
name|producerPoolMaxIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"producerPoolMaxIdle"
argument_list|,
name|producerPoolMaxIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the minimum amount of time (value in millis) an object may sit          * idle in the pool before it is eligible for eviction by the idle          * object evictor.          *           * The option is a:<code>long</code> type.          *           * Group: producer (advanced)          */
DECL|method|producerPoolMinEvictableIdle ( long producerPoolMinEvictableIdle)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|producerPoolMinEvictableIdle
parameter_list|(
name|long
name|producerPoolMinEvictableIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"producerPoolMinEvictableIdle"
argument_list|,
name|producerPoolMinEvictableIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the minimum amount of time (value in millis) an object may sit          * idle in the pool before it is eligible for eviction by the idle          * object evictor.          *           * The option will be converted to a<code>long</code> type.          *           * Group: producer (advanced)          */
DECL|method|producerPoolMinEvictableIdle ( String producerPoolMinEvictableIdle)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|producerPoolMinEvictableIdle
parameter_list|(
name|String
name|producerPoolMinEvictableIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"producerPoolMinEvictableIdle"
argument_list|,
name|producerPoolMinEvictableIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the minimum number of instances allowed in the producer pool          * before the evictor thread (if active) spawns new objects.          *           * The option is a:<code>int</code> type.          *           * Group: producer (advanced)          */
DECL|method|producerPoolMinIdle ( int producerPoolMinIdle)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|producerPoolMinIdle
parameter_list|(
name|int
name|producerPoolMinIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"producerPoolMinIdle"
argument_list|,
name|producerPoolMinIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the minimum number of instances allowed in the producer pool          * before the evictor thread (if active) spawns new objects.          *           * The option will be converted to a<code>int</code> type.          *           * Group: producer (advanced)          */
DECL|method|producerPoolMinIdle ( String producerPoolMinIdle)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|producerPoolMinIdle
parameter_list|(
name|String
name|producerPoolMinIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"producerPoolMinIdle"
argument_list|,
name|producerPoolMinIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option supports connection less udp sending which is a real fire          * and forget. A connected udp send receive the PortUnreachableException          * if no one is listen on the receiving port.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer (advanced)          */
DECL|method|udpConnectionlessSending ( boolean udpConnectionlessSending)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|udpConnectionlessSending
parameter_list|(
name|boolean
name|udpConnectionlessSending
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"udpConnectionlessSending"
argument_list|,
name|udpConnectionlessSending
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option supports connection less udp sending which is a real fire          * and forget. A connected udp send receive the PortUnreachableException          * if no one is listen on the receiving port.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer (advanced)          */
DECL|method|udpConnectionlessSending ( String udpConnectionlessSending)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|udpConnectionlessSending
parameter_list|(
name|String
name|udpConnectionlessSending
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"udpConnectionlessSending"
argument_list|,
name|udpConnectionlessSending
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the useByteBuf is true, netty producer will turn the message body          * into ByteBuf before sending it out.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer (advanced)          */
DECL|method|useByteBuf ( boolean useByteBuf)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|useByteBuf
parameter_list|(
name|boolean
name|useByteBuf
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useByteBuf"
argument_list|,
name|useByteBuf
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the useByteBuf is true, netty producer will turn the message body          * into ByteBuf before sending it out.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer (advanced)          */
DECL|method|useByteBuf ( String useByteBuf)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|useByteBuf
parameter_list|(
name|String
name|useByteBuf
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useByteBuf"
argument_list|,
name|useByteBuf
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP when transferExchange is true. When set to true,          * serializable objects in headers and properties will be added to the          * exchange. Otherwise Camel will exclude any non-serializable objects          * and log it at WARN level.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|allowSerializedHeaders ( boolean allowSerializedHeaders)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|allowSerializedHeaders
parameter_list|(
name|boolean
name|allowSerializedHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowSerializedHeaders"
argument_list|,
name|allowSerializedHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP when transferExchange is true. When set to true,          * serializable objects in headers and properties will be added to the          * exchange. Otherwise Camel will exclude any non-serializable objects          * and log it at WARN level.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|allowSerializedHeaders ( String allowSerializedHeaders)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|allowSerializedHeaders
parameter_list|(
name|String
name|allowSerializedHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowSerializedHeaders"
argument_list|,
name|allowSerializedHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit ChannelGroup.          *           * The option is a:<code>io.netty.channel.group.ChannelGroup</code>          * type.          *           * Group: advanced          */
DECL|method|channelGroup ( Object channelGroup)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|channelGroup
parameter_list|(
name|Object
name|channelGroup
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"channelGroup"
argument_list|,
name|channelGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit ChannelGroup.          *           * The option will be converted to a          *<code>io.netty.channel.group.ChannelGroup</code> type.          *           * Group: advanced          */
DECL|method|channelGroup ( String channelGroup)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|channelGroup
parameter_list|(
name|String
name|channelGroup
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"channelGroup"
argument_list|,
name|channelGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use native transport instead of NIO. Native transport          * takes advantage of the host operating system and is only supported on          * some platforms. You need to add the netty JAR for the host operating          * system you are using. See more details at:          * http://netty.io/wiki/native-transports.html.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|nativeTransport ( boolean nativeTransport)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|nativeTransport
parameter_list|(
name|boolean
name|nativeTransport
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nativeTransport"
argument_list|,
name|nativeTransport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use native transport instead of NIO. Native transport          * takes advantage of the host operating system and is only supported on          * some platforms. You need to add the netty JAR for the host operating          * system you are using. See more details at:          * http://netty.io/wiki/native-transports.html.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|nativeTransport ( String nativeTransport)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|nativeTransport
parameter_list|(
name|String
name|nativeTransport
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nativeTransport"
argument_list|,
name|nativeTransport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to configure additional netty options using option. as prefix.          * For example option.child.keepAlive=false to set the netty option          * child.keepAlive=false. See the Netty documentation for possible          * options that can be used.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|options ( Map<String, Object> options)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|options
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"options"
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to configure additional netty options using option. as prefix.          * For example option.child.keepAlive=false to set the netty option          * child.keepAlive=false. See the Netty documentation for possible          * options that can be used.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|options (String options)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|options
parameter_list|(
name|String
name|options
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"options"
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during inbound communication.          * Size is bytes.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|receiveBufferSize ( int receiveBufferSize)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|receiveBufferSize
parameter_list|(
name|int
name|receiveBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during inbound communication.          * Size is bytes.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|receiveBufferSize ( String receiveBufferSize)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|receiveBufferSize
parameter_list|(
name|String
name|receiveBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the buffer size predictor. See details at Jetty          * documentation and this mail thread.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|receiveBufferSizePredictor ( int receiveBufferSizePredictor)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|receiveBufferSizePredictor
parameter_list|(
name|int
name|receiveBufferSizePredictor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveBufferSizePredictor"
argument_list|,
name|receiveBufferSizePredictor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the buffer size predictor. See details at Jetty          * documentation and this mail thread.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|receiveBufferSizePredictor ( String receiveBufferSizePredictor)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|receiveBufferSizePredictor
parameter_list|(
name|String
name|receiveBufferSizePredictor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveBufferSizePredictor"
argument_list|,
name|receiveBufferSizePredictor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during outbound communication.          * Size is bytes.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|sendBufferSize ( int sendBufferSize)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|sendBufferSize
parameter_list|(
name|int
name|sendBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during outbound communication.          * Size is bytes.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|sendBufferSize ( String sendBufferSize)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|sendBufferSize
parameter_list|(
name|String
name|sendBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|transferExchange ( boolean transferExchange)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|transferExchange
parameter_list|(
name|boolean
name|transferExchange
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|transferExchange ( String transferExchange)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|transferExchange
parameter_list|(
name|String
name|transferExchange
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * For UDP only. If enabled the using byte array codec instead of Java          * serialization protocol.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|udpByteArrayCodec ( boolean udpByteArrayCodec)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|udpByteArrayCodec
parameter_list|(
name|boolean
name|udpByteArrayCodec
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"udpByteArrayCodec"
argument_list|,
name|udpByteArrayCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * For UDP only. If enabled the using byte array codec instead of Java          * serialization protocol.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|udpByteArrayCodec ( String udpByteArrayCodec)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|udpByteArrayCodec
parameter_list|(
name|String
name|udpByteArrayCodec
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"udpByteArrayCodec"
argument_list|,
name|udpByteArrayCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When netty works on nio mode, it uses default workerCount parameter          * from Netty, which is cpu_core_threads x 2. User can use this          * operation to override the default workerCount from Netty.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|workerCount (int workerCount)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|workerCount
parameter_list|(
name|int
name|workerCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workerCount"
argument_list|,
name|workerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When netty works on nio mode, it uses default workerCount parameter          * from Netty, which is cpu_core_threads x 2. User can use this          * operation to override the default workerCount from Netty.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|workerCount ( String workerCount)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|workerCount
parameter_list|(
name|String
name|workerCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workerCount"
argument_list|,
name|workerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit EventLoopGroup as the boss thread pool. For example          * to share a thread pool with multiple consumers or producers. By          * default each consumer or producer has their own worker pool with 2 x          * cpu count core threads.          *           * The option is a:<code>io.netty.channel.EventLoopGroup</code> type.          *           * Group: advanced          */
DECL|method|workerGroup ( Object workerGroup)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|workerGroup
parameter_list|(
name|Object
name|workerGroup
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workerGroup"
argument_list|,
name|workerGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit EventLoopGroup as the boss thread pool. For example          * to share a thread pool with multiple consumers or producers. By          * default each consumer or producer has their own worker pool with 2 x          * cpu count core threads.          *           * The option will be converted to a          *<code>io.netty.channel.EventLoopGroup</code> type.          *           * Group: advanced          */
DECL|method|workerGroup ( String workerGroup)
specifier|default
name|AdvancedNettyEndpointProducerBuilder
name|workerGroup
parameter_list|(
name|String
name|workerGroup
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workerGroup"
argument_list|,
name|workerGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Netty component.      */
DECL|interface|NettyEndpointBuilder
specifier|public
interface|interface
name|NettyEndpointBuilder
extends|extends
name|NettyEndpointConsumerBuilder
extends|,
name|NettyEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedNettyEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedNettyEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Netty Channel right after          * use. Can be used for both consumer and producer.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|disconnect (boolean disconnect)
specifier|default
name|NettyEndpointBuilder
name|disconnect
parameter_list|(
name|boolean
name|disconnect
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to disconnect(close) from Netty Channel right after          * use. Can be used for both consumer and producer.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|disconnect (String disconnect)
specifier|default
name|NettyEndpointBuilder
name|disconnect
parameter_list|(
name|String
name|disconnect
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to ensure socket is not closed due to inactivity.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|keepAlive (boolean keepAlive)
specifier|default
name|NettyEndpointBuilder
name|keepAlive
parameter_list|(
name|boolean
name|keepAlive
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to ensure socket is not closed due to inactivity.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|keepAlive (String keepAlive)
specifier|default
name|NettyEndpointBuilder
name|keepAlive
parameter_list|(
name|String
name|keepAlive
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to facilitate socket multiplexing.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|reuseAddress (boolean reuseAddress)
specifier|default
name|NettyEndpointBuilder
name|reuseAddress
parameter_list|(
name|boolean
name|reuseAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to facilitate socket multiplexing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|reuseAddress (String reuseAddress)
specifier|default
name|NettyEndpointBuilder
name|reuseAddress
parameter_list|(
name|String
name|reuseAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option allows producers and consumers (in client mode) to reuse          * the same Netty Channel for the lifecycle of processing the Exchange.          * This is useful if you need to call a server multiple times in a Camel          * route and want to use the same network connection. When using this,          * the channel is not returned to the connection pool until the Exchange          * is done; or disconnected if the disconnect option is set to true. The          * reused Channel is stored on the Exchange as an exchange property with          * the key NettyConstants#NETTY_CHANNEL which allows you to obtain the          * channel during routing and use it as well.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|reuseChannel (boolean reuseChannel)
specifier|default
name|NettyEndpointBuilder
name|reuseChannel
parameter_list|(
name|boolean
name|reuseChannel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reuseChannel"
argument_list|,
name|reuseChannel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option allows producers and consumers (in client mode) to reuse          * the same Netty Channel for the lifecycle of processing the Exchange.          * This is useful if you need to call a server multiple times in a Camel          * route and want to use the same network connection. When using this,          * the channel is not returned to the connection pool until the Exchange          * is done; or disconnected if the disconnect option is set to true. The          * reused Channel is stored on the Exchange as an exchange property with          * the key NettyConstants#NETTY_CHANNEL which allows you to obtain the          * channel during routing and use it as well.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|reuseChannel (String reuseChannel)
specifier|default
name|NettyEndpointBuilder
name|reuseChannel
parameter_list|(
name|String
name|reuseChannel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reuseChannel"
argument_list|,
name|reuseChannel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|sync (boolean sync)
specifier|default
name|NettyEndpointBuilder
name|sync
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to set endpoint as one-way or request-response.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|sync (String sync)
specifier|default
name|NettyEndpointBuilder
name|sync
parameter_list|(
name|String
name|sync
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to improve TCP protocol performance.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|tcpNoDelay (boolean tcpNoDelay)
specifier|default
name|NettyEndpointBuilder
name|tcpNoDelay
parameter_list|(
name|boolean
name|tcpNoDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to improve TCP protocol performance.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|tcpNoDelay (String tcpNoDelay)
specifier|default
name|NettyEndpointBuilder
name|tcpNoDelay
parameter_list|(
name|String
name|tcpNoDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The netty component installs a default codec if both, encoder/decoder          * is null and textline is false. Setting allowDefaultCodec to false          * prevents the netty component from installing a default codec as the          * first element in the filter chain.          *           * The option is a:<code>boolean</code> type.          *           * Group: codec          */
DECL|method|allowDefaultCodec (boolean allowDefaultCodec)
specifier|default
name|NettyEndpointBuilder
name|allowDefaultCodec
parameter_list|(
name|boolean
name|allowDefaultCodec
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowDefaultCodec"
argument_list|,
name|allowDefaultCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The netty component installs a default codec if both, encoder/decoder          * is null and textline is false. Setting allowDefaultCodec to false          * prevents the netty component from installing a default codec as the          * first element in the filter chain.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: codec          */
DECL|method|allowDefaultCodec (String allowDefaultCodec)
specifier|default
name|NettyEndpointBuilder
name|allowDefaultCodec
parameter_list|(
name|String
name|allowDefaultCodec
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowDefaultCodec"
argument_list|,
name|allowDefaultCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to auto append missing end delimiter when sending          * using the textline codec.          *           * The option is a:<code>boolean</code> type.          *           * Group: codec          */
DECL|method|autoAppendDelimiter ( boolean autoAppendDelimiter)
specifier|default
name|NettyEndpointBuilder
name|autoAppendDelimiter
parameter_list|(
name|boolean
name|autoAppendDelimiter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoAppendDelimiter"
argument_list|,
name|autoAppendDelimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to auto append missing end delimiter when sending          * using the textline codec.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: codec          */
DECL|method|autoAppendDelimiter ( String autoAppendDelimiter)
specifier|default
name|NettyEndpointBuilder
name|autoAppendDelimiter
parameter_list|(
name|String
name|autoAppendDelimiter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoAppendDelimiter"
argument_list|,
name|autoAppendDelimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The max line length to use for the textline codec.          *           * The option is a:<code>int</code> type.          *           * Group: codec          */
DECL|method|decoderMaxLineLength ( int decoderMaxLineLength)
specifier|default
name|NettyEndpointBuilder
name|decoderMaxLineLength
parameter_list|(
name|int
name|decoderMaxLineLength
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"decoderMaxLineLength"
argument_list|,
name|decoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The max line length to use for the textline codec.          *           * The option will be converted to a<code>int</code> type.          *           * Group: codec          */
DECL|method|decoderMaxLineLength ( String decoderMaxLineLength)
specifier|default
name|NettyEndpointBuilder
name|decoderMaxLineLength
parameter_list|(
name|String
name|decoderMaxLineLength
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"decoderMaxLineLength"
argument_list|,
name|decoderMaxLineLength
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of decoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          *           * The option is a:          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          *           * Group: codec          */
DECL|method|decoders (List<Object> decoders)
specifier|default
name|NettyEndpointBuilder
name|decoders
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|decoders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"decoders"
argument_list|,
name|decoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of decoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          *           * The option will be converted to a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          *           * Group: codec          */
DECL|method|decoders (String decoders)
specifier|default
name|NettyEndpointBuilder
name|decoders
parameter_list|(
name|String
name|decoders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"decoders"
argument_list|,
name|decoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The delimiter to use for the textline codec. Possible values are LINE          * and NULL.          *           * The option is a:          *<code>org.apache.camel.component.netty.TextLineDelimiter</code> type.          *           * Group: codec          */
DECL|method|delimiter (TextLineDelimiter delimiter)
specifier|default
name|NettyEndpointBuilder
name|delimiter
parameter_list|(
name|TextLineDelimiter
name|delimiter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delimiter"
argument_list|,
name|delimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The delimiter to use for the textline codec. Possible values are LINE          * and NULL.          *           * The option will be converted to a          *<code>org.apache.camel.component.netty.TextLineDelimiter</code> type.          *           * Group: codec          */
DECL|method|delimiter (String delimiter)
specifier|default
name|NettyEndpointBuilder
name|delimiter
parameter_list|(
name|String
name|delimiter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delimiter"
argument_list|,
name|delimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of encoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          *           * The option is a:          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          *           * Group: codec          */
DECL|method|encoders (List<Object> encoders)
specifier|default
name|NettyEndpointBuilder
name|encoders
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|encoders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"encoders"
argument_list|,
name|encoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of encoders to be used. You can use a String which have values          * separated by comma, and have the values be looked up in the Registry.          * Just remember to prefix the value with # so Camel knows it should          * lookup.          *           * The option will be converted to a          *<code>java.util.List&lt;io.netty.channel.ChannelHandler&gt;</code>          * type.          *           * Group: codec          */
DECL|method|encoders (String encoders)
specifier|default
name|NettyEndpointBuilder
name|encoders
parameter_list|(
name|String
name|encoders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"encoders"
argument_list|,
name|encoders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The encoding (a charset name) to use for the textline codec. If not          * provided, Camel will use the JVM default Charset.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: codec          */
DECL|method|encoding (String encoding)
specifier|default
name|NettyEndpointBuilder
name|encoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. If no codec is specified, you can use this flag to          * indicate a text line based codec; if not specified or the value is          * false, then Object Serialization is assumed over TCP.          *           * The option is a:<code>boolean</code> type.          *           * Group: codec          */
DECL|method|textline (boolean textline)
specifier|default
name|NettyEndpointBuilder
name|textline
parameter_list|(
name|boolean
name|textline
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"textline"
argument_list|,
name|textline
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. If no codec is specified, you can use this flag to          * indicate a text line based codec; if not specified or the value is          * false, then Object Serialization is assumed over TCP.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: codec          */
DECL|method|textline (String textline)
specifier|default
name|NettyEndpointBuilder
name|textline
parameter_list|(
name|String
name|textline
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"textline"
argument_list|,
name|textline
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which protocols to enable when using SSL.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|enabledProtocols (String enabledProtocols)
specifier|default
name|NettyEndpointBuilder
name|enabledProtocols
parameter_list|(
name|String
name|enabledProtocols
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"enabledProtocols"
argument_list|,
name|enabledProtocols
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: security          */
DECL|method|keyStoreFile (File keyStoreFile)
specifier|default
name|NettyEndpointBuilder
name|keyStoreFile
parameter_list|(
name|File
name|keyStoreFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyStoreFile"
argument_list|,
name|keyStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: security          */
DECL|method|keyStoreFile (String keyStoreFile)
specifier|default
name|NettyEndpointBuilder
name|keyStoreFile
parameter_list|(
name|String
name|keyStoreFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyStoreFile"
argument_list|,
name|keyStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Keystore format to be used for payload encryption. Defaults to JKS if          * not set.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|keyStoreFormat (String keyStoreFormat)
specifier|default
name|NettyEndpointBuilder
name|keyStoreFormat
parameter_list|(
name|String
name|keyStoreFormat
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyStoreFormat"
argument_list|,
name|keyStoreFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client side certificate keystore to be used for encryption. Is loaded          * by default from classpath, but you can prefix with classpath:, file:,          * or http: to load the resource from different systems.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|keyStoreResource (String keyStoreResource)
specifier|default
name|NettyEndpointBuilder
name|keyStoreResource
parameter_list|(
name|String
name|keyStoreResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyStoreResource"
argument_list|,
name|keyStoreResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password setting to use in order to encrypt/decrypt payloads sent          * using SSH.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|passphrase (String passphrase)
specifier|default
name|NettyEndpointBuilder
name|passphrase
parameter_list|(
name|String
name|passphrase
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"passphrase"
argument_list|,
name|passphrase
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Security provider to be used for payload encryption. Defaults to          * SunX509 if not set.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|securityProvider (String securityProvider)
specifier|default
name|NettyEndpointBuilder
name|securityProvider
parameter_list|(
name|String
name|securityProvider
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"securityProvider"
argument_list|,
name|securityProvider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to specify whether SSL encryption is applied to this          * endpoint.          *           * The option is a:<code>boolean</code> type.          *           * Group: security          */
DECL|method|ssl (boolean ssl)
specifier|default
name|NettyEndpointBuilder
name|ssl
parameter_list|(
name|boolean
name|ssl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ssl"
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to specify whether SSL encryption is applied to this          * endpoint.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: security          */
DECL|method|ssl (String ssl)
specifier|default
name|NettyEndpointBuilder
name|ssl
parameter_list|(
name|String
name|ssl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ssl"
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When enabled and in SSL mode, then the Netty consumer will enrich the          * Camel Message with headers having information about the client          * certificate such as subject name, issuer name, serial number, and the          * valid date range.          *           * The option is a:<code>boolean</code> type.          *           * Group: security          */
DECL|method|sslClientCertHeaders ( boolean sslClientCertHeaders)
specifier|default
name|NettyEndpointBuilder
name|sslClientCertHeaders
parameter_list|(
name|boolean
name|sslClientCertHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslClientCertHeaders"
argument_list|,
name|sslClientCertHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When enabled and in SSL mode, then the Netty consumer will enrich the          * Camel Message with headers having information about the client          * certificate such as subject name, issuer name, serial number, and the          * valid date range.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: security          */
DECL|method|sslClientCertHeaders ( String sslClientCertHeaders)
specifier|default
name|NettyEndpointBuilder
name|sslClientCertHeaders
parameter_list|(
name|String
name|sslClientCertHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslClientCertHeaders"
argument_list|,
name|sslClientCertHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|NettyEndpointBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|NettyEndpointBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a class that could be used to return an SSL Handler.          *           * The option is a:<code>io.netty.handler.ssl.SslHandler</code> type.          *           * Group: security          */
DECL|method|sslHandler (Object sslHandler)
specifier|default
name|NettyEndpointBuilder
name|sslHandler
parameter_list|(
name|Object
name|sslHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslHandler"
argument_list|,
name|sslHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a class that could be used to return an SSL Handler.          *           * The option will be converted to a          *<code>io.netty.handler.ssl.SslHandler</code> type.          *           * Group: security          */
DECL|method|sslHandler (String sslHandler)
specifier|default
name|NettyEndpointBuilder
name|sslHandler
parameter_list|(
name|String
name|sslHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslHandler"
argument_list|,
name|sslHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: security          */
DECL|method|trustStoreFile (File trustStoreFile)
specifier|default
name|NettyEndpointBuilder
name|trustStoreFile
parameter_list|(
name|File
name|trustStoreFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustStoreFile"
argument_list|,
name|trustStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: security          */
DECL|method|trustStoreFile (String trustStoreFile)
specifier|default
name|NettyEndpointBuilder
name|trustStoreFile
parameter_list|(
name|String
name|trustStoreFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustStoreFile"
argument_list|,
name|trustStoreFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Server side certificate keystore to be used for encryption. Is loaded          * by default from classpath, but you can prefix with classpath:, file:,          * or http: to load the resource from different systems.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|trustStoreResource ( String trustStoreResource)
specifier|default
name|NettyEndpointBuilder
name|trustStoreResource
parameter_list|(
name|String
name|trustStoreResource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustStoreResource"
argument_list|,
name|trustStoreResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Netty component.      */
DECL|interface|AdvancedNettyEndpointBuilder
specifier|public
interface|interface
name|AdvancedNettyEndpointBuilder
extends|extends
name|AdvancedNettyEndpointConsumerBuilder
extends|,
name|AdvancedNettyEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|NettyEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|NettyEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Only used for TCP when transferExchange is true. When set to true,          * serializable objects in headers and properties will be added to the          * exchange. Otherwise Camel will exclude any non-serializable objects          * and log it at WARN level.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|allowSerializedHeaders ( boolean allowSerializedHeaders)
specifier|default
name|AdvancedNettyEndpointBuilder
name|allowSerializedHeaders
parameter_list|(
name|boolean
name|allowSerializedHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowSerializedHeaders"
argument_list|,
name|allowSerializedHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP when transferExchange is true. When set to true,          * serializable objects in headers and properties will be added to the          * exchange. Otherwise Camel will exclude any non-serializable objects          * and log it at WARN level.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|allowSerializedHeaders ( String allowSerializedHeaders)
specifier|default
name|AdvancedNettyEndpointBuilder
name|allowSerializedHeaders
parameter_list|(
name|String
name|allowSerializedHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowSerializedHeaders"
argument_list|,
name|allowSerializedHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedNettyEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedNettyEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit ChannelGroup.          *           * The option is a:<code>io.netty.channel.group.ChannelGroup</code>          * type.          *           * Group: advanced          */
DECL|method|channelGroup (Object channelGroup)
specifier|default
name|AdvancedNettyEndpointBuilder
name|channelGroup
parameter_list|(
name|Object
name|channelGroup
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"channelGroup"
argument_list|,
name|channelGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit ChannelGroup.          *           * The option will be converted to a          *<code>io.netty.channel.group.ChannelGroup</code> type.          *           * Group: advanced          */
DECL|method|channelGroup (String channelGroup)
specifier|default
name|AdvancedNettyEndpointBuilder
name|channelGroup
parameter_list|(
name|String
name|channelGroup
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"channelGroup"
argument_list|,
name|channelGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use native transport instead of NIO. Native transport          * takes advantage of the host operating system and is only supported on          * some platforms. You need to add the netty JAR for the host operating          * system you are using. See more details at:          * http://netty.io/wiki/native-transports.html.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|nativeTransport ( boolean nativeTransport)
specifier|default
name|AdvancedNettyEndpointBuilder
name|nativeTransport
parameter_list|(
name|boolean
name|nativeTransport
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nativeTransport"
argument_list|,
name|nativeTransport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use native transport instead of NIO. Native transport          * takes advantage of the host operating system and is only supported on          * some platforms. You need to add the netty JAR for the host operating          * system you are using. See more details at:          * http://netty.io/wiki/native-transports.html.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|nativeTransport ( String nativeTransport)
specifier|default
name|AdvancedNettyEndpointBuilder
name|nativeTransport
parameter_list|(
name|String
name|nativeTransport
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nativeTransport"
argument_list|,
name|nativeTransport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to configure additional netty options using option. as prefix.          * For example option.child.keepAlive=false to set the netty option          * child.keepAlive=false. See the Netty documentation for possible          * options that can be used.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|options (Map<String, Object> options)
specifier|default
name|AdvancedNettyEndpointBuilder
name|options
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"options"
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to configure additional netty options using option. as prefix.          * For example option.child.keepAlive=false to set the netty option          * child.keepAlive=false. See the Netty documentation for possible          * options that can be used.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|options (String options)
specifier|default
name|AdvancedNettyEndpointBuilder
name|options
parameter_list|(
name|String
name|options
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"options"
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during inbound communication.          * Size is bytes.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|receiveBufferSize ( int receiveBufferSize)
specifier|default
name|AdvancedNettyEndpointBuilder
name|receiveBufferSize
parameter_list|(
name|int
name|receiveBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during inbound communication.          * Size is bytes.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|receiveBufferSize ( String receiveBufferSize)
specifier|default
name|AdvancedNettyEndpointBuilder
name|receiveBufferSize
parameter_list|(
name|String
name|receiveBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the buffer size predictor. See details at Jetty          * documentation and this mail thread.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|receiveBufferSizePredictor ( int receiveBufferSizePredictor)
specifier|default
name|AdvancedNettyEndpointBuilder
name|receiveBufferSizePredictor
parameter_list|(
name|int
name|receiveBufferSizePredictor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveBufferSizePredictor"
argument_list|,
name|receiveBufferSizePredictor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the buffer size predictor. See details at Jetty          * documentation and this mail thread.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|receiveBufferSizePredictor ( String receiveBufferSizePredictor)
specifier|default
name|AdvancedNettyEndpointBuilder
name|receiveBufferSizePredictor
parameter_list|(
name|String
name|receiveBufferSizePredictor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveBufferSizePredictor"
argument_list|,
name|receiveBufferSizePredictor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during outbound communication.          * Size is bytes.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|sendBufferSize (int sendBufferSize)
specifier|default
name|AdvancedNettyEndpointBuilder
name|sendBufferSize
parameter_list|(
name|int
name|sendBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The TCP/UDP buffer sizes to be used during outbound communication.          * Size is bytes.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|sendBufferSize ( String sendBufferSize)
specifier|default
name|AdvancedNettyEndpointBuilder
name|sendBufferSize
parameter_list|(
name|String
name|sendBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedNettyEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedNettyEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|transferExchange ( boolean transferExchange)
specifier|default
name|AdvancedNettyEndpointBuilder
name|transferExchange
parameter_list|(
name|boolean
name|transferExchange
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only used for TCP. You can transfer the exchange over the wire          * instead of just the body. The following fields are transferred: In          * body, Out body, fault body, In headers, Out headers, fault headers,          * exchange properties, exchange exception. This requires that the          * objects are serializable. Camel will exclude any non-serializable          * objects and log it at WARN level.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|transferExchange ( String transferExchange)
specifier|default
name|AdvancedNettyEndpointBuilder
name|transferExchange
parameter_list|(
name|String
name|transferExchange
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"transferExchange"
argument_list|,
name|transferExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * For UDP only. If enabled the using byte array codec instead of Java          * serialization protocol.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|udpByteArrayCodec ( boolean udpByteArrayCodec)
specifier|default
name|AdvancedNettyEndpointBuilder
name|udpByteArrayCodec
parameter_list|(
name|boolean
name|udpByteArrayCodec
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"udpByteArrayCodec"
argument_list|,
name|udpByteArrayCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * For UDP only. If enabled the using byte array codec instead of Java          * serialization protocol.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|udpByteArrayCodec ( String udpByteArrayCodec)
specifier|default
name|AdvancedNettyEndpointBuilder
name|udpByteArrayCodec
parameter_list|(
name|String
name|udpByteArrayCodec
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"udpByteArrayCodec"
argument_list|,
name|udpByteArrayCodec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When netty works on nio mode, it uses default workerCount parameter          * from Netty, which is cpu_core_threads x 2. User can use this          * operation to override the default workerCount from Netty.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|workerCount (int workerCount)
specifier|default
name|AdvancedNettyEndpointBuilder
name|workerCount
parameter_list|(
name|int
name|workerCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workerCount"
argument_list|,
name|workerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When netty works on nio mode, it uses default workerCount parameter          * from Netty, which is cpu_core_threads x 2. User can use this          * operation to override the default workerCount from Netty.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|workerCount (String workerCount)
specifier|default
name|AdvancedNettyEndpointBuilder
name|workerCount
parameter_list|(
name|String
name|workerCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workerCount"
argument_list|,
name|workerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit EventLoopGroup as the boss thread pool. For example          * to share a thread pool with multiple consumers or producers. By          * default each consumer or producer has their own worker pool with 2 x          * cpu count core threads.          *           * The option is a:<code>io.netty.channel.EventLoopGroup</code> type.          *           * Group: advanced          */
DECL|method|workerGroup (Object workerGroup)
specifier|default
name|AdvancedNettyEndpointBuilder
name|workerGroup
parameter_list|(
name|Object
name|workerGroup
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workerGroup"
argument_list|,
name|workerGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a explicit EventLoopGroup as the boss thread pool. For example          * to share a thread pool with multiple consumers or producers. By          * default each consumer or producer has their own worker pool with 2 x          * cpu count core threads.          *           * The option will be converted to a          *<code>io.netty.channel.EventLoopGroup</code> type.          *           * Group: advanced          */
DECL|method|workerGroup (String workerGroup)
specifier|default
name|AdvancedNettyEndpointBuilder
name|workerGroup
parameter_list|(
name|String
name|workerGroup
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workerGroup"
argument_list|,
name|workerGroup
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.netty.TextLineDelimiter</code> enum.      */
DECL|enum|TextLineDelimiter
enum|enum
name|TextLineDelimiter
block|{
DECL|enumConstant|LINE
name|LINE
block|,
DECL|enumConstant|NULL
name|NULL
block|;     }
comment|/**      * Netty (camel-netty)      * Socket level networking using TCP or UDP with the Netty 4.x library.      *       * Category: networking,tcp,udp      * Available as of version: 2.14      * Maven coordinates: org.apache.camel:camel-netty      *       * Syntax:<code>netty:protocol:host:port</code>      *       * Path parameter: protocol (required)      * The protocol to use which can be tcp or udp.      * The value can be one of: tcp, udp      *       * Path parameter: host (required)      * The hostname. For the consumer the hostname is localhost or 0.0.0.0. For      * the producer the hostname is the remote host to connect to      *       * Path parameter: port (required)      * The host port number      */
DECL|method|netty (String path)
specifier|default
name|NettyEndpointBuilder
name|netty
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|NettyEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|NettyEndpointBuilder
implements|,
name|AdvancedNettyEndpointBuilder
block|{
specifier|public
name|NettyEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"netty"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|NettyEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

