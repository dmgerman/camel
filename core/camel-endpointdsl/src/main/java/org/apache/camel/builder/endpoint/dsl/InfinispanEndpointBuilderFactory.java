begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * For reading/writing from/to Infinispan distributed key/value store and data  * grid.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|InfinispanEndpointBuilderFactory
specifier|public
interface|interface
name|InfinispanEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Infinispan component.      */
DECL|interface|InfinispanEndpointConsumerBuilder
specifier|public
interface|interface
name|InfinispanEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedInfinispanEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Specifies the host of the cache on Infinispan instance.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|hosts (String hosts)
specifier|default
name|InfinispanEndpointConsumerBuilder
name|hosts
parameter_list|(
name|String
name|hosts
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"hosts"
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the query builder.          *           * The option is a:          *<code>org.apache.camel.component.infinispan.InfinispanQueryBuilder</code> type.          *           * Group: common          */
DECL|method|queryBuilder ( Object queryBuilder)
specifier|default
name|InfinispanEndpointConsumerBuilder
name|queryBuilder
parameter_list|(
name|Object
name|queryBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queryBuilder"
argument_list|,
name|queryBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the query builder.          *           * The option will be converted to a          *<code>org.apache.camel.component.infinispan.InfinispanQueryBuilder</code> type.          *           * Group: common          */
DECL|method|queryBuilder ( String queryBuilder)
specifier|default
name|InfinispanEndpointConsumerBuilder
name|queryBuilder
parameter_list|(
name|String
name|queryBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queryBuilder"
argument_list|,
name|queryBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|InfinispanEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|InfinispanEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the listener will be installed for the entire cluster.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|clusteredListener ( boolean clusteredListener)
specifier|default
name|InfinispanEndpointConsumerBuilder
name|clusteredListener
parameter_list|(
name|boolean
name|clusteredListener
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clusteredListener"
argument_list|,
name|clusteredListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the listener will be installed for the entire cluster.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|clusteredListener ( String clusteredListener)
specifier|default
name|InfinispanEndpointConsumerBuilder
name|clusteredListener
parameter_list|(
name|String
name|clusteredListener
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clusteredListener"
argument_list|,
name|clusteredListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The operation to perform.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
annotation|@
name|Deprecated
DECL|method|command (String command)
specifier|default
name|InfinispanEndpointConsumerBuilder
name|command
parameter_list|(
name|String
name|command
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"command"
argument_list|,
name|command
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Returns the custom listener in use, if provided.          *           * The option is a:          *<code>org.apache.camel.component.infinispan.InfinispanCustomListener</code> type.          *           * Group: consumer          */
DECL|method|customListener ( Object customListener)
specifier|default
name|InfinispanEndpointConsumerBuilder
name|customListener
parameter_list|(
name|Object
name|customListener
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"customListener"
argument_list|,
name|customListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Returns the custom listener in use, if provided.          *           * The option will be converted to a          *<code>org.apache.camel.component.infinispan.InfinispanCustomListener</code> type.          *           * Group: consumer          */
DECL|method|customListener ( String customListener)
specifier|default
name|InfinispanEndpointConsumerBuilder
name|customListener
parameter_list|(
name|String
name|customListener
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"customListener"
argument_list|,
name|customListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the set of event types to register by the consumer.          * Multiple event can be separated by comma. The possible event types          * are: CACHE_ENTRY_ACTIVATED, CACHE_ENTRY_PASSIVATED,          * CACHE_ENTRY_VISITED, CACHE_ENTRY_LOADED, CACHE_ENTRY_EVICTED,          * CACHE_ENTRY_CREATED, CACHE_ENTRY_REMOVED, CACHE_ENTRY_MODIFIED,          * TRANSACTION_COMPLETED, TRANSACTION_REGISTERED,          * CACHE_ENTRY_INVALIDATED, DATA_REHASHED, TOPOLOGY_CHANGED,          * PARTITION_STATUS_CHANGED.          *           * The option is a:<code>java.util.Set&lt;java.lang.String&gt;</code>          * type.          *           * Group: consumer          */
DECL|method|eventTypes ( Set<String> eventTypes)
specifier|default
name|InfinispanEndpointConsumerBuilder
name|eventTypes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|eventTypes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventTypes"
argument_list|,
name|eventTypes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the set of event types to register by the consumer.          * Multiple event can be separated by comma. The possible event types          * are: CACHE_ENTRY_ACTIVATED, CACHE_ENTRY_PASSIVATED,          * CACHE_ENTRY_VISITED, CACHE_ENTRY_LOADED, CACHE_ENTRY_EVICTED,          * CACHE_ENTRY_CREATED, CACHE_ENTRY_REMOVED, CACHE_ENTRY_MODIFIED,          * TRANSACTION_COMPLETED, TRANSACTION_REGISTERED,          * CACHE_ENTRY_INVALIDATED, DATA_REHASHED, TOPOLOGY_CHANGED,          * PARTITION_STATUS_CHANGED.          *           * The option will be converted to a          *<code>java.util.Set&lt;java.lang.String&gt;</code> type.          *           * Group: consumer          */
DECL|method|eventTypes (String eventTypes)
specifier|default
name|InfinispanEndpointConsumerBuilder
name|eventTypes
parameter_list|(
name|String
name|eventTypes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventTypes"
argument_list|,
name|eventTypes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the consumer will receive notifications synchronously.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sync (boolean sync)
specifier|default
name|InfinispanEndpointConsumerBuilder
name|sync
parameter_list|(
name|boolean
name|sync
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the consumer will receive notifications synchronously.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sync (String sync)
specifier|default
name|InfinispanEndpointConsumerBuilder
name|sync
parameter_list|(
name|String
name|sync
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sync"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Infinispan component.      */
DECL|interface|AdvancedInfinispanEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedInfinispanEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|InfinispanEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|InfinispanEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the cache Container to connect.          *           * The option is a:          *<code>org.infinispan.commons.api.BasicCacheContainer</code> type.          *           * Group: advanced          */
DECL|method|cacheContainer ( Object cacheContainer)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|cacheContainer
parameter_list|(
name|Object
name|cacheContainer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheContainer"
argument_list|,
name|cacheContainer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the cache Container to connect.          *           * The option will be converted to a          *<code>org.infinispan.commons.api.BasicCacheContainer</code> type.          *           * Group: advanced          */
DECL|method|cacheContainer ( String cacheContainer)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|cacheContainer
parameter_list|(
name|String
name|cacheContainer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheContainer"
argument_list|,
name|cacheContainer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheContainer configuration. Uses if the cacheContainer is not          * defined. Must be the following types:          * org.infinispan.client.hotrod.configuration.Configuration - for remote          * cache interaction configuration;          * org.infinispan.configuration.cache.Configuration - for embedded cache          * interaction configuration;.          *           * The option is a:<code>java.lang.Object</code> type.          *           * Group: advanced          */
DECL|method|cacheContainerConfiguration ( Object cacheContainerConfiguration)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|cacheContainerConfiguration
parameter_list|(
name|Object
name|cacheContainerConfiguration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheContainerConfiguration"
argument_list|,
name|cacheContainerConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheContainer configuration. Uses if the cacheContainer is not          * defined. Must be the following types:          * org.infinispan.client.hotrod.configuration.Configuration - for remote          * cache interaction configuration;          * org.infinispan.configuration.cache.Configuration - for embedded cache          * interaction configuration;.          *           * The option will be converted to a<code>java.lang.Object</code> type.          *           * Group: advanced          */
DECL|method|cacheContainerConfiguration ( String cacheContainerConfiguration)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|cacheContainerConfiguration
parameter_list|(
name|String
name|cacheContainerConfiguration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheContainerConfiguration"
argument_list|,
name|cacheContainerConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Implementation specific properties for the CacheManager.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.String&gt;</code> type.          *           * Group: advanced          */
DECL|method|configurationProperties ( Map<String, String> configurationProperties)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|configurationProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configurationProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurationProperties"
argument_list|,
name|configurationProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Implementation specific properties for the CacheManager.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|configurationProperties ( String configurationProperties)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|configurationProperties
parameter_list|(
name|String
name|configurationProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurationProperties"
argument_list|,
name|configurationProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An implementation specific URI for the CacheManager.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|configurationUri ( String configurationUri)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|configurationUri
parameter_list|(
name|String
name|configurationUri
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurationUri"
argument_list|,
name|configurationUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A comma separated list of Flag to be applied by default on each cache          * invocation, not applicable to remote caches.          *           * The option is a:<code>org.infinispan.context.Flag[]</code> type.          *           * Group: advanced          */
DECL|method|flags (Flag[] flags)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|flags
parameter_list|(
name|Flag
index|[]
name|flags
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"flags"
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A comma separated list of Flag to be applied by default on each cache          * invocation, not applicable to remote caches.          *           * The option will be converted to a          *<code>org.infinispan.context.Flag[]</code> type.          *           * Group: advanced          */
DECL|method|flags (String flags)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|flags
parameter_list|(
name|String
name|flags
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"flags"
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a specific remappingFunction to use in a compute operation.          *           * The option is a:<code>java.util.function.BiFunction</code> type.          *           * Group: advanced          */
DECL|method|remappingFunction ( BiFunction remappingFunction)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|remappingFunction
parameter_list|(
name|BiFunction
name|remappingFunction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"remappingFunction"
argument_list|,
name|remappingFunction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a specific remappingFunction to use in a compute operation.          *           * The option will be converted to a          *<code>java.util.function.BiFunction</code> type.          *           * Group: advanced          */
DECL|method|remappingFunction ( String remappingFunction)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|remappingFunction
parameter_list|(
name|String
name|remappingFunction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"remappingFunction"
argument_list|,
name|remappingFunction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Store the operation result in a header instead of the message body.          * By default, resultHeader == null and the query result is stored in          * the message body, any existing content in the message body is          * discarded. If resultHeader is set, the value is used as the name of          * the header to store the query result and the original message body is          * preserved. This value can be overridden by an in message header          * named: CamelInfinispanOperationResultHeader.          *           * The option is a:<code>java.lang.Object</code> type.          *           * Group: advanced          */
DECL|method|resultHeader ( Object resultHeader)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|resultHeader
parameter_list|(
name|Object
name|resultHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"resultHeader"
argument_list|,
name|resultHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Store the operation result in a header instead of the message body.          * By default, resultHeader == null and the query result is stored in          * the message body, any existing content in the message body is          * discarded. If resultHeader is set, the value is used as the name of          * the header to store the query result and the original message body is          * preserved. This value can be overridden by an in message header          * named: CamelInfinispanOperationResultHeader.          *           * The option will be converted to a<code>java.lang.Object</code> type.          *           * Group: advanced          */
DECL|method|resultHeader ( String resultHeader)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|resultHeader
parameter_list|(
name|String
name|resultHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"resultHeader"
argument_list|,
name|resultHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedInfinispanEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Infinispan component.      */
DECL|interface|InfinispanEndpointProducerBuilder
specifier|public
interface|interface
name|InfinispanEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedInfinispanEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Specifies the host of the cache on Infinispan instance.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|hosts (String hosts)
specifier|default
name|InfinispanEndpointProducerBuilder
name|hosts
parameter_list|(
name|String
name|hosts
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"hosts"
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the query builder.          *           * The option is a:          *<code>org.apache.camel.component.infinispan.InfinispanQueryBuilder</code> type.          *           * Group: common          */
DECL|method|queryBuilder ( Object queryBuilder)
specifier|default
name|InfinispanEndpointProducerBuilder
name|queryBuilder
parameter_list|(
name|Object
name|queryBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queryBuilder"
argument_list|,
name|queryBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the query builder.          *           * The option will be converted to a          *<code>org.apache.camel.component.infinispan.InfinispanQueryBuilder</code> type.          *           * Group: common          */
DECL|method|queryBuilder ( String queryBuilder)
specifier|default
name|InfinispanEndpointProducerBuilder
name|queryBuilder
parameter_list|(
name|String
name|queryBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queryBuilder"
argument_list|,
name|queryBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|InfinispanEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|InfinispanEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The operation to perform.          *           * The option is a:          *<code>org.apache.camel.component.infinispan.InfinispanOperation</code> type.          *           * Group: producer          */
DECL|method|operation ( InfinispanOperation operation)
specifier|default
name|InfinispanEndpointProducerBuilder
name|operation
parameter_list|(
name|InfinispanOperation
name|operation
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The operation to perform.          *           * The option will be converted to a          *<code>org.apache.camel.component.infinispan.InfinispanOperation</code> type.          *           * Group: producer          */
DECL|method|operation (String operation)
specifier|default
name|InfinispanEndpointProducerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Infinispan component.      */
DECL|interface|AdvancedInfinispanEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedInfinispanEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|InfinispanEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|InfinispanEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the cache Container to connect.          *           * The option is a:          *<code>org.infinispan.commons.api.BasicCacheContainer</code> type.          *           * Group: advanced          */
DECL|method|cacheContainer ( Object cacheContainer)
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|cacheContainer
parameter_list|(
name|Object
name|cacheContainer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheContainer"
argument_list|,
name|cacheContainer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the cache Container to connect.          *           * The option will be converted to a          *<code>org.infinispan.commons.api.BasicCacheContainer</code> type.          *           * Group: advanced          */
DECL|method|cacheContainer ( String cacheContainer)
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|cacheContainer
parameter_list|(
name|String
name|cacheContainer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheContainer"
argument_list|,
name|cacheContainer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheContainer configuration. Uses if the cacheContainer is not          * defined. Must be the following types:          * org.infinispan.client.hotrod.configuration.Configuration - for remote          * cache interaction configuration;          * org.infinispan.configuration.cache.Configuration - for embedded cache          * interaction configuration;.          *           * The option is a:<code>java.lang.Object</code> type.          *           * Group: advanced          */
DECL|method|cacheContainerConfiguration ( Object cacheContainerConfiguration)
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|cacheContainerConfiguration
parameter_list|(
name|Object
name|cacheContainerConfiguration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheContainerConfiguration"
argument_list|,
name|cacheContainerConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheContainer configuration. Uses if the cacheContainer is not          * defined. Must be the following types:          * org.infinispan.client.hotrod.configuration.Configuration - for remote          * cache interaction configuration;          * org.infinispan.configuration.cache.Configuration - for embedded cache          * interaction configuration;.          *           * The option will be converted to a<code>java.lang.Object</code> type.          *           * Group: advanced          */
DECL|method|cacheContainerConfiguration ( String cacheContainerConfiguration)
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|cacheContainerConfiguration
parameter_list|(
name|String
name|cacheContainerConfiguration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheContainerConfiguration"
argument_list|,
name|cacheContainerConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Implementation specific properties for the CacheManager.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.String&gt;</code> type.          *           * Group: advanced          */
DECL|method|configurationProperties ( Map<String, String> configurationProperties)
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|configurationProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configurationProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurationProperties"
argument_list|,
name|configurationProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Implementation specific properties for the CacheManager.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|configurationProperties ( String configurationProperties)
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|configurationProperties
parameter_list|(
name|String
name|configurationProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurationProperties"
argument_list|,
name|configurationProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An implementation specific URI for the CacheManager.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|configurationUri ( String configurationUri)
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|configurationUri
parameter_list|(
name|String
name|configurationUri
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurationUri"
argument_list|,
name|configurationUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A comma separated list of Flag to be applied by default on each cache          * invocation, not applicable to remote caches.          *           * The option is a:<code>org.infinispan.context.Flag[]</code> type.          *           * Group: advanced          */
DECL|method|flags (Flag[] flags)
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|flags
parameter_list|(
name|Flag
index|[]
name|flags
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"flags"
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A comma separated list of Flag to be applied by default on each cache          * invocation, not applicable to remote caches.          *           * The option will be converted to a          *<code>org.infinispan.context.Flag[]</code> type.          *           * Group: advanced          */
DECL|method|flags (String flags)
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|flags
parameter_list|(
name|String
name|flags
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"flags"
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a specific remappingFunction to use in a compute operation.          *           * The option is a:<code>java.util.function.BiFunction</code> type.          *           * Group: advanced          */
DECL|method|remappingFunction ( BiFunction remappingFunction)
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|remappingFunction
parameter_list|(
name|BiFunction
name|remappingFunction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"remappingFunction"
argument_list|,
name|remappingFunction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a specific remappingFunction to use in a compute operation.          *           * The option will be converted to a          *<code>java.util.function.BiFunction</code> type.          *           * Group: advanced          */
DECL|method|remappingFunction ( String remappingFunction)
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|remappingFunction
parameter_list|(
name|String
name|remappingFunction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"remappingFunction"
argument_list|,
name|remappingFunction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Store the operation result in a header instead of the message body.          * By default, resultHeader == null and the query result is stored in          * the message body, any existing content in the message body is          * discarded. If resultHeader is set, the value is used as the name of          * the header to store the query result and the original message body is          * preserved. This value can be overridden by an in message header          * named: CamelInfinispanOperationResultHeader.          *           * The option is a:<code>java.lang.Object</code> type.          *           * Group: advanced          */
DECL|method|resultHeader ( Object resultHeader)
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|resultHeader
parameter_list|(
name|Object
name|resultHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"resultHeader"
argument_list|,
name|resultHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Store the operation result in a header instead of the message body.          * By default, resultHeader == null and the query result is stored in          * the message body, any existing content in the message body is          * discarded. If resultHeader is set, the value is used as the name of          * the header to store the query result and the original message body is          * preserved. This value can be overridden by an in message header          * named: CamelInfinispanOperationResultHeader.          *           * The option will be converted to a<code>java.lang.Object</code> type.          *           * Group: advanced          */
DECL|method|resultHeader ( String resultHeader)
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|resultHeader
parameter_list|(
name|String
name|resultHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"resultHeader"
argument_list|,
name|resultHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedInfinispanEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Infinispan component.      */
DECL|interface|InfinispanEndpointBuilder
specifier|public
interface|interface
name|InfinispanEndpointBuilder
extends|extends
name|InfinispanEndpointConsumerBuilder
extends|,
name|InfinispanEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedInfinispanEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Specifies the host of the cache on Infinispan instance.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|hosts (String hosts)
specifier|default
name|InfinispanEndpointBuilder
name|hosts
parameter_list|(
name|String
name|hosts
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"hosts"
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the query builder.          *           * The option is a:          *<code>org.apache.camel.component.infinispan.InfinispanQueryBuilder</code> type.          *           * Group: common          */
DECL|method|queryBuilder (Object queryBuilder)
specifier|default
name|InfinispanEndpointBuilder
name|queryBuilder
parameter_list|(
name|Object
name|queryBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queryBuilder"
argument_list|,
name|queryBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the query builder.          *           * The option will be converted to a          *<code>org.apache.camel.component.infinispan.InfinispanQueryBuilder</code> type.          *           * Group: common          */
DECL|method|queryBuilder (String queryBuilder)
specifier|default
name|InfinispanEndpointBuilder
name|queryBuilder
parameter_list|(
name|String
name|queryBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queryBuilder"
argument_list|,
name|queryBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Infinispan component.      */
DECL|interface|AdvancedInfinispanEndpointBuilder
specifier|public
interface|interface
name|AdvancedInfinispanEndpointBuilder
extends|extends
name|AdvancedInfinispanEndpointConsumerBuilder
extends|,
name|AdvancedInfinispanEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|InfinispanEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|InfinispanEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the cache Container to connect.          *           * The option is a:          *<code>org.infinispan.commons.api.BasicCacheContainer</code> type.          *           * Group: advanced          */
DECL|method|cacheContainer ( Object cacheContainer)
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|cacheContainer
parameter_list|(
name|Object
name|cacheContainer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheContainer"
argument_list|,
name|cacheContainer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the cache Container to connect.          *           * The option will be converted to a          *<code>org.infinispan.commons.api.BasicCacheContainer</code> type.          *           * Group: advanced          */
DECL|method|cacheContainer ( String cacheContainer)
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|cacheContainer
parameter_list|(
name|String
name|cacheContainer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheContainer"
argument_list|,
name|cacheContainer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheContainer configuration. Uses if the cacheContainer is not          * defined. Must be the following types:          * org.infinispan.client.hotrod.configuration.Configuration - for remote          * cache interaction configuration;          * org.infinispan.configuration.cache.Configuration - for embedded cache          * interaction configuration;.          *           * The option is a:<code>java.lang.Object</code> type.          *           * Group: advanced          */
DECL|method|cacheContainerConfiguration ( Object cacheContainerConfiguration)
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|cacheContainerConfiguration
parameter_list|(
name|Object
name|cacheContainerConfiguration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheContainerConfiguration"
argument_list|,
name|cacheContainerConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheContainer configuration. Uses if the cacheContainer is not          * defined. Must be the following types:          * org.infinispan.client.hotrod.configuration.Configuration - for remote          * cache interaction configuration;          * org.infinispan.configuration.cache.Configuration - for embedded cache          * interaction configuration;.          *           * The option will be converted to a<code>java.lang.Object</code> type.          *           * Group: advanced          */
DECL|method|cacheContainerConfiguration ( String cacheContainerConfiguration)
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|cacheContainerConfiguration
parameter_list|(
name|String
name|cacheContainerConfiguration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheContainerConfiguration"
argument_list|,
name|cacheContainerConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Implementation specific properties for the CacheManager.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.String&gt;</code> type.          *           * Group: advanced          */
DECL|method|configurationProperties ( Map<String, String> configurationProperties)
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|configurationProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configurationProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurationProperties"
argument_list|,
name|configurationProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Implementation specific properties for the CacheManager.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|configurationProperties ( String configurationProperties)
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|configurationProperties
parameter_list|(
name|String
name|configurationProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurationProperties"
argument_list|,
name|configurationProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An implementation specific URI for the CacheManager.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|configurationUri ( String configurationUri)
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|configurationUri
parameter_list|(
name|String
name|configurationUri
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurationUri"
argument_list|,
name|configurationUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A comma separated list of Flag to be applied by default on each cache          * invocation, not applicable to remote caches.          *           * The option is a:<code>org.infinispan.context.Flag[]</code> type.          *           * Group: advanced          */
DECL|method|flags (Flag[] flags)
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|flags
parameter_list|(
name|Flag
index|[]
name|flags
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"flags"
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A comma separated list of Flag to be applied by default on each cache          * invocation, not applicable to remote caches.          *           * The option will be converted to a          *<code>org.infinispan.context.Flag[]</code> type.          *           * Group: advanced          */
DECL|method|flags (String flags)
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|flags
parameter_list|(
name|String
name|flags
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"flags"
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a specific remappingFunction to use in a compute operation.          *           * The option is a:<code>java.util.function.BiFunction</code> type.          *           * Group: advanced          */
DECL|method|remappingFunction ( BiFunction remappingFunction)
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|remappingFunction
parameter_list|(
name|BiFunction
name|remappingFunction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"remappingFunction"
argument_list|,
name|remappingFunction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a specific remappingFunction to use in a compute operation.          *           * The option will be converted to a          *<code>java.util.function.BiFunction</code> type.          *           * Group: advanced          */
DECL|method|remappingFunction ( String remappingFunction)
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|remappingFunction
parameter_list|(
name|String
name|remappingFunction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"remappingFunction"
argument_list|,
name|remappingFunction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Store the operation result in a header instead of the message body.          * By default, resultHeader == null and the query result is stored in          * the message body, any existing content in the message body is          * discarded. If resultHeader is set, the value is used as the name of          * the header to store the query result and the original message body is          * preserved. This value can be overridden by an in message header          * named: CamelInfinispanOperationResultHeader.          *           * The option is a:<code>java.lang.Object</code> type.          *           * Group: advanced          */
DECL|method|resultHeader ( Object resultHeader)
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|resultHeader
parameter_list|(
name|Object
name|resultHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"resultHeader"
argument_list|,
name|resultHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Store the operation result in a header instead of the message body.          * By default, resultHeader == null and the query result is stored in          * the message body, any existing content in the message body is          * discarded. If resultHeader is set, the value is used as the name of          * the header to store the query result and the original message body is          * preserved. This value can be overridden by an in message header          * named: CamelInfinispanOperationResultHeader.          *           * The option will be converted to a<code>java.lang.Object</code> type.          *           * Group: advanced          */
DECL|method|resultHeader ( String resultHeader)
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|resultHeader
parameter_list|(
name|String
name|resultHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"resultHeader"
argument_list|,
name|resultHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedInfinispanEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.infinispan.InfinispanOperation</code>      * enum.      */
DECL|enum|InfinispanOperation
enum|enum
name|InfinispanOperation
block|{
DECL|enumConstant|PUT
name|PUT
block|,
DECL|enumConstant|PUTASYNC
name|PUTASYNC
block|,
DECL|enumConstant|PUTALL
name|PUTALL
block|,
DECL|enumConstant|PUTALLASYNC
name|PUTALLASYNC
block|,
DECL|enumConstant|PUTIFABSENT
name|PUTIFABSENT
block|,
DECL|enumConstant|PUTIFABSENTASYNC
name|PUTIFABSENTASYNC
block|,
DECL|enumConstant|GET
name|GET
block|,
DECL|enumConstant|GETORDEFAULT
name|GETORDEFAULT
block|,
DECL|enumConstant|CONTAINSKEY
name|CONTAINSKEY
block|,
DECL|enumConstant|CONTAINSVALUE
name|CONTAINSVALUE
block|,
DECL|enumConstant|REMOVE
name|REMOVE
block|,
DECL|enumConstant|REMOVEASYNC
name|REMOVEASYNC
block|,
DECL|enumConstant|REPLACE
name|REPLACE
block|,
DECL|enumConstant|REPLACEASYNC
name|REPLACEASYNC
block|,
DECL|enumConstant|SIZE
name|SIZE
block|,
DECL|enumConstant|CLEAR
name|CLEAR
block|,
DECL|enumConstant|CLEARASYNC
name|CLEARASYNC
block|,
DECL|enumConstant|QUERY
name|QUERY
block|,
DECL|enumConstant|STATS
name|STATS
block|,
DECL|enumConstant|COMPUTE
name|COMPUTE
block|,
DECL|enumConstant|COMPUTEASYNC
name|COMPUTEASYNC
block|;     }
comment|/**      * Proxy enum for<code>org.infinispan.context.Flag</code> enum.      */
DECL|enum|Flag
enum|enum
name|Flag
block|{
DECL|enumConstant|ZERO_LOCK_ACQUISITION_TIMEOUT
name|ZERO_LOCK_ACQUISITION_TIMEOUT
block|,
DECL|enumConstant|CACHE_MODE_LOCAL
name|CACHE_MODE_LOCAL
block|,
DECL|enumConstant|SKIP_LOCKING
name|SKIP_LOCKING
block|,
DECL|enumConstant|FORCE_WRITE_LOCK
name|FORCE_WRITE_LOCK
block|,
DECL|enumConstant|SKIP_CACHE_STATUS_CHECK
name|SKIP_CACHE_STATUS_CHECK
block|,
DECL|enumConstant|FORCE_ASYNCHRONOUS
name|FORCE_ASYNCHRONOUS
block|,
DECL|enumConstant|FORCE_SYNCHRONOUS
name|FORCE_SYNCHRONOUS
block|,
DECL|enumConstant|SKIP_CACHE_STORE
name|SKIP_CACHE_STORE
block|,
DECL|enumConstant|SKIP_CACHE_LOAD
name|SKIP_CACHE_LOAD
block|,
DECL|enumConstant|FAIL_SILENTLY
name|FAIL_SILENTLY
block|,
DECL|enumConstant|SKIP_REMOTE_LOOKUP
name|SKIP_REMOTE_LOOKUP
block|,
DECL|enumConstant|SKIP_INDEXING
name|SKIP_INDEXING
block|,
DECL|enumConstant|PUT_FOR_EXTERNAL_READ
name|PUT_FOR_EXTERNAL_READ
block|,
DECL|enumConstant|PUT_FOR_STATE_TRANSFER
name|PUT_FOR_STATE_TRANSFER
block|,
DECL|enumConstant|PUT_FOR_X_SITE_STATE_TRANSFER
name|PUT_FOR_X_SITE_STATE_TRANSFER
block|,
DECL|enumConstant|SKIP_SHARED_CACHE_STORE
name|SKIP_SHARED_CACHE_STORE
block|,
DECL|enumConstant|SKIP_OWNERSHIP_CHECK
name|SKIP_OWNERSHIP_CHECK
block|,
DECL|enumConstant|IGNORE_RETURN_VALUES
name|IGNORE_RETURN_VALUES
block|,
DECL|enumConstant|SKIP_XSITE_BACKUP
name|SKIP_XSITE_BACKUP
block|,
DECL|enumConstant|SKIP_LISTENER_NOTIFICATION
name|SKIP_LISTENER_NOTIFICATION
block|,
DECL|enumConstant|SKIP_STATISTICS
name|SKIP_STATISTICS
block|,
DECL|enumConstant|OPERATION_HOTROD
name|OPERATION_HOTROD
block|,
DECL|enumConstant|OPERATION_MEMCACHED
name|OPERATION_MEMCACHED
block|,
DECL|enumConstant|SKIP_INDEX_CLEANUP
name|SKIP_INDEX_CLEANUP
block|,
DECL|enumConstant|COMMAND_RETRY
name|COMMAND_RETRY
block|,
DECL|enumConstant|ROLLING_UPGRADE
name|ROLLING_UPGRADE
block|,
DECL|enumConstant|REMOTE_ITERATION
name|REMOTE_ITERATION
block|,
DECL|enumConstant|SKIP_SIZE_OPTIMIZATION
name|SKIP_SIZE_OPTIMIZATION
block|;     }
comment|/**      * Infinispan (camel-infinispan)      * For reading/writing from/to Infinispan distributed key/value store and      * data grid.      *       * Category: cache,datagrid,clustering      * Since: 2.13      * Maven coordinates: org.apache.camel:camel-infinispan      *       * Syntax:<code>infinispan:cacheName</code>      *       * Path parameter: cacheName (required)      * The cache to use      */
DECL|method|infinispan (String path)
specifier|default
name|InfinispanEndpointBuilder
name|infinispan
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|InfinispanEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|InfinispanEndpointBuilder
implements|,
name|AdvancedInfinispanEndpointBuilder
block|{
specifier|public
name|InfinispanEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"infinispan"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|InfinispanEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

