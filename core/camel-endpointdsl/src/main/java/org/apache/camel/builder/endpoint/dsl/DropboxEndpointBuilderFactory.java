begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * For uploading, downloading and managing files, folders, groups,  * collaborations, etc on dropbox DOT com.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|DropboxEndpointBuilderFactory
specifier|public
interface|interface
name|DropboxEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Dropbox component.      */
DECL|interface|DropboxEndpointConsumerBuilder
specifier|public
interface|interface
name|DropboxEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedDropboxEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedDropboxEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The specific action (typically is a CRUD action) to perform on          * Dropbox remote folder.          * The option is a          *<code>org.apache.camel.component.dropbox.util.DropboxOperation</code>          * type.          * @group common          */
DECL|method|operation ( DropboxOperation operation)
specifier|default
name|DropboxEndpointConsumerBuilder
name|operation
parameter_list|(
name|DropboxOperation
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The specific action (typically is a CRUD action) to perform on          * Dropbox remote folder.          * The option will be converted to a          *<code>org.apache.camel.component.dropbox.util.DropboxOperation</code>          * type.          * @group common          */
DECL|method|operation (String operation)
specifier|default
name|DropboxEndpointConsumerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The access token to make API requests for a specific Dropbox user.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|accessToken (String accessToken)
specifier|default
name|DropboxEndpointConsumerBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing DbxClient instance as DropBox client.          * The option is a<code>com.dropbox.core.v2.DbxClientV2</code> type.          * @group common          */
DECL|method|client (Object client)
specifier|default
name|DropboxEndpointConsumerBuilder
name|client
parameter_list|(
name|Object
name|client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing DbxClient instance as DropBox client.          * The option will be converted to a          *<code>com.dropbox.core.v2.DbxClientV2</code> type.          * @group common          */
DECL|method|client (String client)
specifier|default
name|DropboxEndpointConsumerBuilder
name|client
parameter_list|(
name|String
name|client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of the app registered to make API requests.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|clientIdentifier ( String clientIdentifier)
specifier|default
name|DropboxEndpointConsumerBuilder
name|clientIdentifier
parameter_list|(
name|String
name|clientIdentifier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientIdentifier"
argument_list|,
name|clientIdentifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Optional folder or file to upload on Dropbox from the local          * filesystem. If this option has not been configured then the message          * body is used as the content to upload.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|localPath (String localPath)
specifier|default
name|DropboxEndpointConsumerBuilder
name|localPath
parameter_list|(
name|String
name|localPath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"localPath"
argument_list|,
name|localPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Destination file or folder.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|newRemotePath ( String newRemotePath)
specifier|default
name|DropboxEndpointConsumerBuilder
name|newRemotePath
parameter_list|(
name|String
name|newRemotePath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"newRemotePath"
argument_list|,
name|newRemotePath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A space-separated list of sub-strings to search for. A file matches          * only if it contains all the sub-strings. If this option is not set,          * all files will be matched.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|query (String query)
specifier|default
name|DropboxEndpointConsumerBuilder
name|query
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"query"
argument_list|,
name|query
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Original file or folder to move.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|remotePath (String remotePath)
specifier|default
name|DropboxEndpointConsumerBuilder
name|remotePath
parameter_list|(
name|String
name|remotePath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"remotePath"
argument_list|,
name|remotePath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which mode to upload. in case of add the new file will be renamed if          * a file with the same name already exists on dropbox. in case of force          * if a file with the same name already exists on dropbox, this will be          * overwritten.          * The option is a          *<code>org.apache.camel.component.dropbox.util.DropboxUploadMode</code> type.          * @group common          */
DECL|method|uploadMode ( DropboxUploadMode uploadMode)
specifier|default
name|DropboxEndpointConsumerBuilder
name|uploadMode
parameter_list|(
name|DropboxUploadMode
name|uploadMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"uploadMode"
argument_list|,
name|uploadMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which mode to upload. in case of add the new file will be renamed if          * a file with the same name already exists on dropbox. in case of force          * if a file with the same name already exists on dropbox, this will be          * overwritten.          * The option will be converted to a          *<code>org.apache.camel.component.dropbox.util.DropboxUploadMode</code> type.          * @group common          */
DECL|method|uploadMode (String uploadMode)
specifier|default
name|DropboxEndpointConsumerBuilder
name|uploadMode
parameter_list|(
name|String
name|uploadMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"uploadMode"
argument_list|,
name|uploadMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|DropboxEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|DropboxEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Dropbox component.      */
DECL|interface|AdvancedDropboxEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedDropboxEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|DropboxEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|DropboxEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedDropboxEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedDropboxEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedDropboxEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedDropboxEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedDropboxEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedDropboxEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedDropboxEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedDropboxEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Dropbox component.      */
DECL|interface|DropboxEndpointProducerBuilder
specifier|public
interface|interface
name|DropboxEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedDropboxEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedDropboxEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The specific action (typically is a CRUD action) to perform on          * Dropbox remote folder.          * The option is a          *<code>org.apache.camel.component.dropbox.util.DropboxOperation</code>          * type.          * @group common          */
DECL|method|operation ( DropboxOperation operation)
specifier|default
name|DropboxEndpointProducerBuilder
name|operation
parameter_list|(
name|DropboxOperation
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The specific action (typically is a CRUD action) to perform on          * Dropbox remote folder.          * The option will be converted to a          *<code>org.apache.camel.component.dropbox.util.DropboxOperation</code>          * type.          * @group common          */
DECL|method|operation (String operation)
specifier|default
name|DropboxEndpointProducerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The access token to make API requests for a specific Dropbox user.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|accessToken (String accessToken)
specifier|default
name|DropboxEndpointProducerBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing DbxClient instance as DropBox client.          * The option is a<code>com.dropbox.core.v2.DbxClientV2</code> type.          * @group common          */
DECL|method|client (Object client)
specifier|default
name|DropboxEndpointProducerBuilder
name|client
parameter_list|(
name|Object
name|client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing DbxClient instance as DropBox client.          * The option will be converted to a          *<code>com.dropbox.core.v2.DbxClientV2</code> type.          * @group common          */
DECL|method|client (String client)
specifier|default
name|DropboxEndpointProducerBuilder
name|client
parameter_list|(
name|String
name|client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of the app registered to make API requests.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|clientIdentifier ( String clientIdentifier)
specifier|default
name|DropboxEndpointProducerBuilder
name|clientIdentifier
parameter_list|(
name|String
name|clientIdentifier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientIdentifier"
argument_list|,
name|clientIdentifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Optional folder or file to upload on Dropbox from the local          * filesystem. If this option has not been configured then the message          * body is used as the content to upload.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|localPath (String localPath)
specifier|default
name|DropboxEndpointProducerBuilder
name|localPath
parameter_list|(
name|String
name|localPath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"localPath"
argument_list|,
name|localPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Destination file or folder.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|newRemotePath ( String newRemotePath)
specifier|default
name|DropboxEndpointProducerBuilder
name|newRemotePath
parameter_list|(
name|String
name|newRemotePath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"newRemotePath"
argument_list|,
name|newRemotePath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A space-separated list of sub-strings to search for. A file matches          * only if it contains all the sub-strings. If this option is not set,          * all files will be matched.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|query (String query)
specifier|default
name|DropboxEndpointProducerBuilder
name|query
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"query"
argument_list|,
name|query
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Original file or folder to move.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|remotePath (String remotePath)
specifier|default
name|DropboxEndpointProducerBuilder
name|remotePath
parameter_list|(
name|String
name|remotePath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"remotePath"
argument_list|,
name|remotePath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which mode to upload. in case of add the new file will be renamed if          * a file with the same name already exists on dropbox. in case of force          * if a file with the same name already exists on dropbox, this will be          * overwritten.          * The option is a          *<code>org.apache.camel.component.dropbox.util.DropboxUploadMode</code> type.          * @group common          */
DECL|method|uploadMode ( DropboxUploadMode uploadMode)
specifier|default
name|DropboxEndpointProducerBuilder
name|uploadMode
parameter_list|(
name|DropboxUploadMode
name|uploadMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"uploadMode"
argument_list|,
name|uploadMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which mode to upload. in case of add the new file will be renamed if          * a file with the same name already exists on dropbox. in case of force          * if a file with the same name already exists on dropbox, this will be          * overwritten.          * The option will be converted to a          *<code>org.apache.camel.component.dropbox.util.DropboxUploadMode</code> type.          * @group common          */
DECL|method|uploadMode (String uploadMode)
specifier|default
name|DropboxEndpointProducerBuilder
name|uploadMode
parameter_list|(
name|String
name|uploadMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"uploadMode"
argument_list|,
name|uploadMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|DropboxEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|DropboxEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Dropbox component.      */
DECL|interface|AdvancedDropboxEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedDropboxEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|DropboxEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|DropboxEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedDropboxEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedDropboxEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedDropboxEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedDropboxEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Dropbox component.      */
DECL|interface|DropboxEndpointBuilder
specifier|public
interface|interface
name|DropboxEndpointBuilder
extends|extends
name|DropboxEndpointConsumerBuilder
extends|,
name|DropboxEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedDropboxEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedDropboxEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The specific action (typically is a CRUD action) to perform on          * Dropbox remote folder.          * The option is a          *<code>org.apache.camel.component.dropbox.util.DropboxOperation</code>          * type.          * @group common          */
DECL|method|operation (DropboxOperation operation)
specifier|default
name|DropboxEndpointBuilder
name|operation
parameter_list|(
name|DropboxOperation
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The specific action (typically is a CRUD action) to perform on          * Dropbox remote folder.          * The option will be converted to a          *<code>org.apache.camel.component.dropbox.util.DropboxOperation</code>          * type.          * @group common          */
DECL|method|operation (String operation)
specifier|default
name|DropboxEndpointBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The access token to make API requests for a specific Dropbox user.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|accessToken (String accessToken)
specifier|default
name|DropboxEndpointBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing DbxClient instance as DropBox client.          * The option is a<code>com.dropbox.core.v2.DbxClientV2</code> type.          * @group common          */
DECL|method|client (Object client)
specifier|default
name|DropboxEndpointBuilder
name|client
parameter_list|(
name|Object
name|client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing DbxClient instance as DropBox client.          * The option will be converted to a          *<code>com.dropbox.core.v2.DbxClientV2</code> type.          * @group common          */
DECL|method|client (String client)
specifier|default
name|DropboxEndpointBuilder
name|client
parameter_list|(
name|String
name|client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of the app registered to make API requests.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|clientIdentifier (String clientIdentifier)
specifier|default
name|DropboxEndpointBuilder
name|clientIdentifier
parameter_list|(
name|String
name|clientIdentifier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientIdentifier"
argument_list|,
name|clientIdentifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Optional folder or file to upload on Dropbox from the local          * filesystem. If this option has not been configured then the message          * body is used as the content to upload.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|localPath (String localPath)
specifier|default
name|DropboxEndpointBuilder
name|localPath
parameter_list|(
name|String
name|localPath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"localPath"
argument_list|,
name|localPath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Destination file or folder.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|newRemotePath (String newRemotePath)
specifier|default
name|DropboxEndpointBuilder
name|newRemotePath
parameter_list|(
name|String
name|newRemotePath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"newRemotePath"
argument_list|,
name|newRemotePath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A space-separated list of sub-strings to search for. A file matches          * only if it contains all the sub-strings. If this option is not set,          * all files will be matched.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|query (String query)
specifier|default
name|DropboxEndpointBuilder
name|query
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"query"
argument_list|,
name|query
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Original file or folder to move.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|remotePath (String remotePath)
specifier|default
name|DropboxEndpointBuilder
name|remotePath
parameter_list|(
name|String
name|remotePath
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"remotePath"
argument_list|,
name|remotePath
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which mode to upload. in case of add the new file will be renamed if          * a file with the same name already exists on dropbox. in case of force          * if a file with the same name already exists on dropbox, this will be          * overwritten.          * The option is a          *<code>org.apache.camel.component.dropbox.util.DropboxUploadMode</code> type.          * @group common          */
DECL|method|uploadMode (DropboxUploadMode uploadMode)
specifier|default
name|DropboxEndpointBuilder
name|uploadMode
parameter_list|(
name|DropboxUploadMode
name|uploadMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"uploadMode"
argument_list|,
name|uploadMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which mode to upload. in case of add the new file will be renamed if          * a file with the same name already exists on dropbox. in case of force          * if a file with the same name already exists on dropbox, this will be          * overwritten.          * The option will be converted to a          *<code>org.apache.camel.component.dropbox.util.DropboxUploadMode</code> type.          * @group common          */
DECL|method|uploadMode (String uploadMode)
specifier|default
name|DropboxEndpointBuilder
name|uploadMode
parameter_list|(
name|String
name|uploadMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"uploadMode"
argument_list|,
name|uploadMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Dropbox component.      */
DECL|interface|AdvancedDropboxEndpointBuilder
specifier|public
interface|interface
name|AdvancedDropboxEndpointBuilder
extends|extends
name|AdvancedDropboxEndpointConsumerBuilder
extends|,
name|AdvancedDropboxEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|DropboxEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|DropboxEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedDropboxEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedDropboxEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedDropboxEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedDropboxEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.dropbox.util.DropboxOperation</code>      * enum.      */
DECL|enum|DropboxOperation
enum|enum
name|DropboxOperation
block|{
DECL|enumConstant|put
DECL|enumConstant|del
DECL|enumConstant|search
DECL|enumConstant|get
DECL|enumConstant|move
name|put
block|,
name|del
block|,
name|search
block|,
name|get
block|,
name|move
block|;     }
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.dropbox.util.DropboxUploadMode</code>      * enum.      */
DECL|enum|DropboxUploadMode
enum|enum
name|DropboxUploadMode
block|{
DECL|enumConstant|add
DECL|enumConstant|force
name|add
block|,
name|force
block|;     }
comment|/**      * For uploading, downloading and managing files, folders, groups,      * collaborations, etc on dropbox DOT com. Creates a builder to build      * endpoints for the Dropbox component.      */
DECL|method|dropbox (String path)
specifier|default
name|DropboxEndpointBuilder
name|dropbox
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|DropboxEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|DropboxEndpointBuilder
implements|,
name|AdvancedDropboxEndpointBuilder
block|{
specifier|public
name|DropboxEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"dropbox"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DropboxEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

