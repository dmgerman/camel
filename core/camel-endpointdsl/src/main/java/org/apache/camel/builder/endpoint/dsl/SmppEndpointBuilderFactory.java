begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * To send and receive SMS using a SMSC (Short Message Service Center).  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|SmppEndpointBuilderFactory
specifier|public
interface|interface
name|SmppEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the SMPP component.      */
DECL|interface|SmppEndpointConsumerBuilder
specifier|public
interface|interface
name|SmppEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSmppEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSmppEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Defines the initial delay in milliseconds after the consumer/producer          * tries to reconnect to the SMSC, after the connection was lost.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|initialReconnectDelay ( long initialReconnectDelay)
specifier|default
name|SmppEndpointConsumerBuilder
name|initialReconnectDelay
parameter_list|(
name|long
name|initialReconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"initialReconnectDelay"
argument_list|,
name|initialReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the initial delay in milliseconds after the consumer/producer          * tries to reconnect to the SMSC, after the connection was lost.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|initialReconnectDelay ( String initialReconnectDelay)
specifier|default
name|SmppEndpointConsumerBuilder
name|initialReconnectDelay
parameter_list|(
name|String
name|initialReconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"initialReconnectDelay"
argument_list|,
name|initialReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the maximum number of attempts to reconnect to the SMSC, if          * SMSC returns a negative bind response.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxReconnect (int maxReconnect)
specifier|default
name|SmppEndpointConsumerBuilder
name|maxReconnect
parameter_list|(
name|int
name|maxReconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReconnect"
argument_list|,
name|maxReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the maximum number of attempts to reconnect to the SMSC, if          * SMSC returns a negative bind response.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxReconnect (String maxReconnect)
specifier|default
name|SmppEndpointConsumerBuilder
name|maxReconnect
parameter_list|(
name|String
name|maxReconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReconnect"
argument_list|,
name|maxReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the interval in milliseconds between the reconnect attempts,          * if the connection to the SMSC was lost and the previous was not          * succeed.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelay (long reconnectDelay)
specifier|default
name|SmppEndpointConsumerBuilder
name|reconnectDelay
parameter_list|(
name|long
name|reconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelay"
argument_list|,
name|reconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the interval in milliseconds between the reconnect attempts,          * if the connection to the SMSC was lost and the previous was not          * succeed.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelay (String reconnectDelay)
specifier|default
name|SmppEndpointConsumerBuilder
name|reconnectDelay
parameter_list|(
name|String
name|reconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelay"
argument_list|,
name|reconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can specify a policy for handling long messages: ALLOW - the          * default, long messages are split to 140 bytes per message TRUNCATE -          * long messages are split and only the first fragment will be sent to          * the SMSC. Some carriers drop subsequent fragments so this reduces          * load on the SMPP connection sending parts of a message that will          * never be delivered. REJECT - if a message would need to be split, it          * is rejected with an SMPP NegativeResponseException and the reason          * code signifying the message is too long.          *           * The option is a:          *<code>org.apache.camel.component.smpp.SmppSplittingPolicy</code>          * type.          *           * Group: common          */
DECL|method|splittingPolicy ( SmppSplittingPolicy splittingPolicy)
specifier|default
name|SmppEndpointConsumerBuilder
name|splittingPolicy
parameter_list|(
name|SmppSplittingPolicy
name|splittingPolicy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"splittingPolicy"
argument_list|,
name|splittingPolicy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can specify a policy for handling long messages: ALLOW - the          * default, long messages are split to 140 bytes per message TRUNCATE -          * long messages are split and only the first fragment will be sent to          * the SMSC. Some carriers drop subsequent fragments so this reduces          * load on the SMPP connection sending parts of a message that will          * never be delivered. REJECT - if a message would need to be split, it          * is rejected with an SMPP NegativeResponseException and the reason          * code signifying the message is too long.          *           * The option will be converted to a          *<code>org.apache.camel.component.smpp.SmppSplittingPolicy</code>          * type.          *           * Group: common          */
DECL|method|splittingPolicy ( String splittingPolicy)
specifier|default
name|SmppEndpointConsumerBuilder
name|splittingPolicy
parameter_list|(
name|String
name|splittingPolicy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"splittingPolicy"
argument_list|,
name|splittingPolicy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This parameter is used to categorize the type of ESME (External Short          * Message Entity) that is binding to the SMSC (max. 13 characters).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|systemType (String systemType)
specifier|default
name|SmppEndpointConsumerBuilder
name|systemType
parameter_list|(
name|String
name|systemType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"systemType"
argument_list|,
name|systemType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can specify the address range for the SmppConsumer as defined in          * section 5.2.7 of the SMPP 3.4 specification. The SmppConsumer will          * receive messages only from SMSC's which target an address (MSISDN or          * IP address) within this range.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|addressRange (String addressRange)
specifier|default
name|SmppEndpointConsumerBuilder
name|addressRange
parameter_list|(
name|String
name|addressRange
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"addressRange"
argument_list|,
name|addressRange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|SmppEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|SmppEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines encoding of data according the SMPP 3.4 specification,          * section 5.2.19. 0: SMSC Default Alphabet 4: 8 bit Alphabet 8: UCS2          * Alphabet.          *           * The option is a:<code>byte</code> type.          *           * Group: codec          */
DECL|method|alphabet (byte alphabet)
specifier|default
name|SmppEndpointConsumerBuilder
name|alphabet
parameter_list|(
name|byte
name|alphabet
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"alphabet"
argument_list|,
name|alphabet
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines encoding of data according the SMPP 3.4 specification,          * section 5.2.19. 0: SMSC Default Alphabet 4: 8 bit Alphabet 8: UCS2          * Alphabet.          *           * The option will be converted to a<code>byte</code> type.          *           * Group: codec          */
DECL|method|alphabet (String alphabet)
specifier|default
name|SmppEndpointConsumerBuilder
name|alphabet
parameter_list|(
name|String
name|alphabet
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"alphabet"
argument_list|,
name|alphabet
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the data coding according the SMPP 3.4 specification, section          * 5.2.19. Example data encodings are: 0: SMSC Default Alphabet 3: Latin          * 1 (ISO-8859-1) 4: Octet unspecified (8-bit binary) 8: UCS2          * (ISO/IEC-10646) 13: Extended Kanji JIS(X 0212-1990).          *           * The option is a:<code>byte</code> type.          *           * Group: codec          */
DECL|method|dataCoding (byte dataCoding)
specifier|default
name|SmppEndpointConsumerBuilder
name|dataCoding
parameter_list|(
name|byte
name|dataCoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataCoding"
argument_list|,
name|dataCoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the data coding according the SMPP 3.4 specification, section          * 5.2.19. Example data encodings are: 0: SMSC Default Alphabet 3: Latin          * 1 (ISO-8859-1) 4: Octet unspecified (8-bit binary) 8: UCS2          * (ISO/IEC-10646) 13: Extended Kanji JIS(X 0212-1990).          *           * The option will be converted to a<code>byte</code> type.          *           * Group: codec          */
DECL|method|dataCoding (String dataCoding)
specifier|default
name|SmppEndpointConsumerBuilder
name|dataCoding
parameter_list|(
name|String
name|dataCoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataCoding"
argument_list|,
name|dataCoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the encoding scheme of the short message user data. Only for          * SubmitSm, ReplaceSm and SubmitMulti.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: codec          */
DECL|method|encoding (String encoding)
specifier|default
name|SmppEndpointConsumerBuilder
name|encoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If you need to tunnel SMPP through a HTTP proxy, set this attribute          * to the hostname or ip address of your HTTP proxy.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyHost (String httpProxyHost)
specifier|default
name|SmppEndpointConsumerBuilder
name|httpProxyHost
parameter_list|(
name|String
name|httpProxyHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpProxyHost"
argument_list|,
name|httpProxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If your HTTP proxy requires basic authentication, set this attribute          * to the password required for your HTTP proxy.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyPassword ( String httpProxyPassword)
specifier|default
name|SmppEndpointConsumerBuilder
name|httpProxyPassword
parameter_list|(
name|String
name|httpProxyPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpProxyPassword"
argument_list|,
name|httpProxyPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If you need to tunnel SMPP through a HTTP proxy, set this attribute          * to the port of your HTTP proxy.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: proxy          */
DECL|method|httpProxyPort (Integer httpProxyPort)
specifier|default
name|SmppEndpointConsumerBuilder
name|httpProxyPort
parameter_list|(
name|Integer
name|httpProxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpProxyPort"
argument_list|,
name|httpProxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If you need to tunnel SMPP through a HTTP proxy, set this attribute          * to the port of your HTTP proxy.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: proxy          */
DECL|method|httpProxyPort (String httpProxyPort)
specifier|default
name|SmppEndpointConsumerBuilder
name|httpProxyPort
parameter_list|(
name|String
name|httpProxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpProxyPort"
argument_list|,
name|httpProxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If your HTTP proxy requires basic authentication, set this attribute          * to the username required for your HTTP proxy.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyUsername ( String httpProxyUsername)
specifier|default
name|SmppEndpointConsumerBuilder
name|httpProxyUsername
parameter_list|(
name|String
name|httpProxyUsername
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpProxyUsername"
argument_list|,
name|httpProxyUsername
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * These headers will be passed to the proxy server while establishing          * the connection.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.String&gt;</code> type.          *           * Group: proxy          */
DECL|method|proxyHeaders ( Map<String, String> proxyHeaders)
specifier|default
name|SmppEndpointConsumerBuilder
name|proxyHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|proxyHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyHeaders"
argument_list|,
name|proxyHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * These headers will be passed to the proxy server while establishing          * the connection.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>          * type.          *           * Group: proxy          */
DECL|method|proxyHeaders (String proxyHeaders)
specifier|default
name|SmppEndpointConsumerBuilder
name|proxyHeaders
parameter_list|(
name|String
name|proxyHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyHeaders"
argument_list|,
name|proxyHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The password for connecting to SMSC server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|SmppEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The system id (username) for connecting to SMSC server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|systemId (String systemId)
specifier|default
name|SmppEndpointConsumerBuilder
name|systemId
parameter_list|(
name|String
name|systemId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"systemId"
argument_list|,
name|systemId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether using SSL with the smpps protocol.          *           * The option is a:<code>boolean</code> type.          *           * Group: security          */
DECL|method|usingSSL (boolean usingSSL)
specifier|default
name|SmppEndpointConsumerBuilder
name|usingSSL
parameter_list|(
name|boolean
name|usingSSL
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"usingSSL"
argument_list|,
name|usingSSL
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether using SSL with the smpps protocol.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: security          */
DECL|method|usingSSL (String usingSSL)
specifier|default
name|SmppEndpointConsumerBuilder
name|usingSSL
parameter_list|(
name|String
name|usingSSL
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"usingSSL"
argument_list|,
name|usingSSL
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the SMPP component.      */
DECL|interface|AdvancedSmppEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedSmppEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SmppEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SmppEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedSmppEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedSmppEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedSmppEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedSmppEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSmppEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSmppEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the interval in milliseconds between the confidence checks.          * The confidence check is used to test the communication path between          * an ESME and an SMSC.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|enquireLinkTimer ( Integer enquireLinkTimer)
specifier|default
name|AdvancedSmppEndpointConsumerBuilder
name|enquireLinkTimer
parameter_list|(
name|Integer
name|enquireLinkTimer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enquireLinkTimer"
argument_list|,
name|enquireLinkTimer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the interval in milliseconds between the confidence checks.          * The confidence check is used to test the communication path between          * an ESME and an SMSC.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|enquireLinkTimer ( String enquireLinkTimer)
specifier|default
name|AdvancedSmppEndpointConsumerBuilder
name|enquireLinkTimer
parameter_list|(
name|String
name|enquireLinkTimer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enquireLinkTimer"
argument_list|,
name|enquireLinkTimer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can refer to a org.jsmpp.session.SessionStateListener in the          * Registry to receive callbacks when the session state changed.          *           * The option is a:<code>org.jsmpp.session.SessionStateListener</code>          * type.          *           * Group: advanced          */
DECL|method|sessionStateListener ( Object sessionStateListener)
specifier|default
name|AdvancedSmppEndpointConsumerBuilder
name|sessionStateListener
parameter_list|(
name|Object
name|sessionStateListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionStateListener"
argument_list|,
name|sessionStateListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can refer to a org.jsmpp.session.SessionStateListener in the          * Registry to receive callbacks when the session state changed.          *           * The option will be converted to a          *<code>org.jsmpp.session.SessionStateListener</code> type.          *           * Group: advanced          */
DECL|method|sessionStateListener ( String sessionStateListener)
specifier|default
name|AdvancedSmppEndpointConsumerBuilder
name|sessionStateListener
parameter_list|(
name|String
name|sessionStateListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionStateListener"
argument_list|,
name|sessionStateListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSmppEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedSmppEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the maximum period of inactivity allowed after a transaction,          * after which an SMPP entity may assume that the session is no longer          * active. This timer may be active on either communicating SMPP entity          * (i.e. SMSC or ESME).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|transactionTimer ( Integer transactionTimer)
specifier|default
name|AdvancedSmppEndpointConsumerBuilder
name|transactionTimer
parameter_list|(
name|Integer
name|transactionTimer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transactionTimer"
argument_list|,
name|transactionTimer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the maximum period of inactivity allowed after a transaction,          * after which an SMPP entity may assume that the session is no longer          * active. This timer may be active on either communicating SMPP entity          * (i.e. SMSC or ESME).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|transactionTimer ( String transactionTimer)
specifier|default
name|AdvancedSmppEndpointConsumerBuilder
name|transactionTimer
parameter_list|(
name|String
name|transactionTimer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transactionTimer"
argument_list|,
name|transactionTimer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the SMPP component.      */
DECL|interface|SmppEndpointProducerBuilder
specifier|public
interface|interface
name|SmppEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSmppEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSmppEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Defines the initial delay in milliseconds after the consumer/producer          * tries to reconnect to the SMSC, after the connection was lost.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|initialReconnectDelay ( long initialReconnectDelay)
specifier|default
name|SmppEndpointProducerBuilder
name|initialReconnectDelay
parameter_list|(
name|long
name|initialReconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"initialReconnectDelay"
argument_list|,
name|initialReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the initial delay in milliseconds after the consumer/producer          * tries to reconnect to the SMSC, after the connection was lost.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|initialReconnectDelay ( String initialReconnectDelay)
specifier|default
name|SmppEndpointProducerBuilder
name|initialReconnectDelay
parameter_list|(
name|String
name|initialReconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"initialReconnectDelay"
argument_list|,
name|initialReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the maximum number of attempts to reconnect to the SMSC, if          * SMSC returns a negative bind response.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxReconnect (int maxReconnect)
specifier|default
name|SmppEndpointProducerBuilder
name|maxReconnect
parameter_list|(
name|int
name|maxReconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReconnect"
argument_list|,
name|maxReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the maximum number of attempts to reconnect to the SMSC, if          * SMSC returns a negative bind response.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxReconnect (String maxReconnect)
specifier|default
name|SmppEndpointProducerBuilder
name|maxReconnect
parameter_list|(
name|String
name|maxReconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReconnect"
argument_list|,
name|maxReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the interval in milliseconds between the reconnect attempts,          * if the connection to the SMSC was lost and the previous was not          * succeed.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelay (long reconnectDelay)
specifier|default
name|SmppEndpointProducerBuilder
name|reconnectDelay
parameter_list|(
name|long
name|reconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelay"
argument_list|,
name|reconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the interval in milliseconds between the reconnect attempts,          * if the connection to the SMSC was lost and the previous was not          * succeed.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelay (String reconnectDelay)
specifier|default
name|SmppEndpointProducerBuilder
name|reconnectDelay
parameter_list|(
name|String
name|reconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelay"
argument_list|,
name|reconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can specify a policy for handling long messages: ALLOW - the          * default, long messages are split to 140 bytes per message TRUNCATE -          * long messages are split and only the first fragment will be sent to          * the SMSC. Some carriers drop subsequent fragments so this reduces          * load on the SMPP connection sending parts of a message that will          * never be delivered. REJECT - if a message would need to be split, it          * is rejected with an SMPP NegativeResponseException and the reason          * code signifying the message is too long.          *           * The option is a:          *<code>org.apache.camel.component.smpp.SmppSplittingPolicy</code>          * type.          *           * Group: common          */
DECL|method|splittingPolicy ( SmppSplittingPolicy splittingPolicy)
specifier|default
name|SmppEndpointProducerBuilder
name|splittingPolicy
parameter_list|(
name|SmppSplittingPolicy
name|splittingPolicy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"splittingPolicy"
argument_list|,
name|splittingPolicy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can specify a policy for handling long messages: ALLOW - the          * default, long messages are split to 140 bytes per message TRUNCATE -          * long messages are split and only the first fragment will be sent to          * the SMSC. Some carriers drop subsequent fragments so this reduces          * load on the SMPP connection sending parts of a message that will          * never be delivered. REJECT - if a message would need to be split, it          * is rejected with an SMPP NegativeResponseException and the reason          * code signifying the message is too long.          *           * The option will be converted to a          *<code>org.apache.camel.component.smpp.SmppSplittingPolicy</code>          * type.          *           * Group: common          */
DECL|method|splittingPolicy ( String splittingPolicy)
specifier|default
name|SmppEndpointProducerBuilder
name|splittingPolicy
parameter_list|(
name|String
name|splittingPolicy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"splittingPolicy"
argument_list|,
name|splittingPolicy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This parameter is used to categorize the type of ESME (External Short          * Message Entity) that is binding to the SMSC (max. 13 characters).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|systemType (String systemType)
specifier|default
name|SmppEndpointProducerBuilder
name|systemType
parameter_list|(
name|String
name|systemType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"systemType"
argument_list|,
name|systemType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the destination SME address. For mobile terminated messages,          * this is the directory number of the recipient MS. Only for SubmitSm,          * SubmitMulti, CancelSm and DataSm.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|destAddr (String destAddr)
specifier|default
name|SmppEndpointProducerBuilder
name|destAddr
parameter_list|(
name|String
name|destAddr
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"destAddr"
argument_list|,
name|destAddr
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the type of number (TON) to be used in the SME destination          * address parameters. Only for SubmitSm, SubmitMulti, CancelSm and          * DataSm. The following NPI values are defined: 0: Unknown 1: ISDN          * (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8:          * National 9: Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to          * be defined by WAP Forum).          *           * The option is a:<code>byte</code> type.          *           * Group: producer          */
DECL|method|destAddrNpi (byte destAddrNpi)
specifier|default
name|SmppEndpointProducerBuilder
name|destAddrNpi
parameter_list|(
name|byte
name|destAddrNpi
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"destAddrNpi"
argument_list|,
name|destAddrNpi
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the type of number (TON) to be used in the SME destination          * address parameters. Only for SubmitSm, SubmitMulti, CancelSm and          * DataSm. The following NPI values are defined: 0: Unknown 1: ISDN          * (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8:          * National 9: Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to          * be defined by WAP Forum).          *           * The option will be converted to a<code>byte</code> type.          *           * Group: producer          */
DECL|method|destAddrNpi (String destAddrNpi)
specifier|default
name|SmppEndpointProducerBuilder
name|destAddrNpi
parameter_list|(
name|String
name|destAddrNpi
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"destAddrNpi"
argument_list|,
name|destAddrNpi
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the type of number (TON) to be used in the SME destination          * address parameters. Only for SubmitSm, SubmitMulti, CancelSm and          * DataSm. The following TON values are defined: 0: Unknown 1:          * International 2: National 3: Network Specific 4: Subscriber Number 5:          * Alphanumeric 6: Abbreviated.          *           * The option is a:<code>byte</code> type.          *           * Group: producer          */
DECL|method|destAddrTon (byte destAddrTon)
specifier|default
name|SmppEndpointProducerBuilder
name|destAddrTon
parameter_list|(
name|byte
name|destAddrTon
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"destAddrTon"
argument_list|,
name|destAddrTon
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the type of number (TON) to be used in the SME destination          * address parameters. Only for SubmitSm, SubmitMulti, CancelSm and          * DataSm. The following TON values are defined: 0: Unknown 1:          * International 2: National 3: Network Specific 4: Subscriber Number 5:          * Alphanumeric 6: Abbreviated.          *           * The option will be converted to a<code>byte</code> type.          *           * Group: producer          */
DECL|method|destAddrTon (String destAddrTon)
specifier|default
name|SmppEndpointProducerBuilder
name|destAddrTon
parameter_list|(
name|String
name|destAddrTon
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"destAddrTon"
argument_list|,
name|destAddrTon
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sessions can be lazily created to avoid exceptions, if the SMSC is          * not available when the Camel producer is started. Camel will check          * the in message headers 'CamelSmppSystemId' and 'CamelSmppPassword' of          * the first exchange. If they are present, Camel will use these data to          * connect to the SMSC.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazySessionCreation ( boolean lazySessionCreation)
specifier|default
name|SmppEndpointProducerBuilder
name|lazySessionCreation
parameter_list|(
name|boolean
name|lazySessionCreation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazySessionCreation"
argument_list|,
name|lazySessionCreation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sessions can be lazily created to avoid exceptions, if the SMSC is          * not available when the Camel producer is started. Camel will check          * the in message headers 'CamelSmppSystemId' and 'CamelSmppPassword' of          * the first exchange. If they are present, Camel will use these data to          * connect to the SMSC.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazySessionCreation ( String lazySessionCreation)
specifier|default
name|SmppEndpointProducerBuilder
name|lazySessionCreation
parameter_list|(
name|String
name|lazySessionCreation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazySessionCreation"
argument_list|,
name|lazySessionCreation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|SmppEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|SmppEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the numeric plan indicator (NPI) to be used in the SME. The          * following NPI values are defined: 0: Unknown 1: ISDN (E163/E164) 2:          * Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8: National 9:          * Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to be defined          * by WAP Forum).          *           * The option is a:<code>byte</code> type.          *           * Group: producer          */
DECL|method|numberingPlanIndicator ( byte numberingPlanIndicator)
specifier|default
name|SmppEndpointProducerBuilder
name|numberingPlanIndicator
parameter_list|(
name|byte
name|numberingPlanIndicator
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"numberingPlanIndicator"
argument_list|,
name|numberingPlanIndicator
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the numeric plan indicator (NPI) to be used in the SME. The          * following NPI values are defined: 0: Unknown 1: ISDN (E163/E164) 2:          * Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8: National 9:          * Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to be defined          * by WAP Forum).          *           * The option will be converted to a<code>byte</code> type.          *           * Group: producer          */
DECL|method|numberingPlanIndicator ( String numberingPlanIndicator)
specifier|default
name|SmppEndpointProducerBuilder
name|numberingPlanIndicator
parameter_list|(
name|String
name|numberingPlanIndicator
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"numberingPlanIndicator"
argument_list|,
name|numberingPlanIndicator
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows the originating SME to assign a priority level to the short          * message. Only for SubmitSm and SubmitMulti. Four Priority Levels are          * supported: 0: Level 0 (lowest) priority 1: Level 1 priority 2: Level          * 2 priority 3: Level 3 (highest) priority.          *           * The option is a:<code>byte</code> type.          *           * Group: producer          */
DECL|method|priorityFlag (byte priorityFlag)
specifier|default
name|SmppEndpointProducerBuilder
name|priorityFlag
parameter_list|(
name|byte
name|priorityFlag
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"priorityFlag"
argument_list|,
name|priorityFlag
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows the originating SME to assign a priority level to the short          * message. Only for SubmitSm and SubmitMulti. Four Priority Levels are          * supported: 0: Level 0 (lowest) priority 1: Level 1 priority 2: Level          * 2 priority 3: Level 3 (highest) priority.          *           * The option will be converted to a<code>byte</code> type.          *           * Group: producer          */
DECL|method|priorityFlag (String priorityFlag)
specifier|default
name|SmppEndpointProducerBuilder
name|priorityFlag
parameter_list|(
name|String
name|priorityFlag
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"priorityFlag"
argument_list|,
name|priorityFlag
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The protocol id.          *           * The option is a:<code>byte</code> type.          *           * Group: producer          */
DECL|method|protocolId (byte protocolId)
specifier|default
name|SmppEndpointProducerBuilder
name|protocolId
parameter_list|(
name|byte
name|protocolId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"protocolId"
argument_list|,
name|protocolId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The protocol id.          *           * The option will be converted to a<code>byte</code> type.          *           * Group: producer          */
DECL|method|protocolId (String protocolId)
specifier|default
name|SmppEndpointProducerBuilder
name|protocolId
parameter_list|(
name|String
name|protocolId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"protocolId"
argument_list|,
name|protocolId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Is used to request an SMSC delivery receipt and/or SME originated          * acknowledgements. The following values are defined: 0: No SMSC          * delivery receipt requested. 1: SMSC delivery receipt requested where          * final delivery outcome is success or failure. 2: SMSC delivery          * receipt requested where the final delivery outcome is delivery          * failure.          *           * The option is a:<code>byte</code> type.          *           * Group: producer          */
DECL|method|registeredDelivery ( byte registeredDelivery)
specifier|default
name|SmppEndpointProducerBuilder
name|registeredDelivery
parameter_list|(
name|byte
name|registeredDelivery
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"registeredDelivery"
argument_list|,
name|registeredDelivery
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Is used to request an SMSC delivery receipt and/or SME originated          * acknowledgements. The following values are defined: 0: No SMSC          * delivery receipt requested. 1: SMSC delivery receipt requested where          * final delivery outcome is success or failure. 2: SMSC delivery          * receipt requested where the final delivery outcome is delivery          * failure.          *           * The option will be converted to a<code>byte</code> type.          *           * Group: producer          */
DECL|method|registeredDelivery ( String registeredDelivery)
specifier|default
name|SmppEndpointProducerBuilder
name|registeredDelivery
parameter_list|(
name|String
name|registeredDelivery
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"registeredDelivery"
argument_list|,
name|registeredDelivery
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used to request the SMSC to replace a previously submitted message,          * that is still pending delivery. The SMSC will replace an existing          * message provided that the source address, destination address and          * service type match the same fields in the new message. The following          * replace if present flag values are defined: 0: Don't replace 1:          * Replace.          *           * The option is a:<code>byte</code> type.          *           * Group: producer          */
DECL|method|replaceIfPresentFlag ( byte replaceIfPresentFlag)
specifier|default
name|SmppEndpointProducerBuilder
name|replaceIfPresentFlag
parameter_list|(
name|byte
name|replaceIfPresentFlag
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"replaceIfPresentFlag"
argument_list|,
name|replaceIfPresentFlag
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used to request the SMSC to replace a previously submitted message,          * that is still pending delivery. The SMSC will replace an existing          * message provided that the source address, destination address and          * service type match the same fields in the new message. The following          * replace if present flag values are defined: 0: Don't replace 1:          * Replace.          *           * The option will be converted to a<code>byte</code> type.          *           * Group: producer          */
DECL|method|replaceIfPresentFlag ( String replaceIfPresentFlag)
specifier|default
name|SmppEndpointProducerBuilder
name|replaceIfPresentFlag
parameter_list|(
name|String
name|replaceIfPresentFlag
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"replaceIfPresentFlag"
argument_list|,
name|replaceIfPresentFlag
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The service type parameter can be used to indicate the SMS          * Application service associated with the message. The following          * generic service_types are defined: CMT: Cellular Messaging CPT:          * Cellular Paging VMN: Voice Mail Notification VMA: Voice Mail Alerting          * WAP: Wireless Application Protocol USSD: Unstructured Supplementary          * Services Data.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|serviceType (String serviceType)
specifier|default
name|SmppEndpointProducerBuilder
name|serviceType
parameter_list|(
name|String
name|serviceType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceType"
argument_list|,
name|serviceType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the address of SME (Short Message Entity) which originated          * this message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|sourceAddr (String sourceAddr)
specifier|default
name|SmppEndpointProducerBuilder
name|sourceAddr
parameter_list|(
name|String
name|sourceAddr
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sourceAddr"
argument_list|,
name|sourceAddr
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the numeric plan indicator (NPI) to be used in the SME          * originator address parameters. The following NPI values are defined:          * 0: Unknown 1: ISDN (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6:          * Land Mobile (E.212) 8: National 9: Private 10: ERMES 13: Internet          * (IP) 18: WAP Client Id (to be defined by WAP Forum).          *           * The option is a:<code>byte</code> type.          *           * Group: producer          */
DECL|method|sourceAddrNpi (byte sourceAddrNpi)
specifier|default
name|SmppEndpointProducerBuilder
name|sourceAddrNpi
parameter_list|(
name|byte
name|sourceAddrNpi
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sourceAddrNpi"
argument_list|,
name|sourceAddrNpi
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the numeric plan indicator (NPI) to be used in the SME          * originator address parameters. The following NPI values are defined:          * 0: Unknown 1: ISDN (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6:          * Land Mobile (E.212) 8: National 9: Private 10: ERMES 13: Internet          * (IP) 18: WAP Client Id (to be defined by WAP Forum).          *           * The option will be converted to a<code>byte</code> type.          *           * Group: producer          */
DECL|method|sourceAddrNpi (String sourceAddrNpi)
specifier|default
name|SmppEndpointProducerBuilder
name|sourceAddrNpi
parameter_list|(
name|String
name|sourceAddrNpi
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sourceAddrNpi"
argument_list|,
name|sourceAddrNpi
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the type of number (TON) to be used in the SME originator          * address parameters. The following TON values are defined: 0: Unknown          * 1: International 2: National 3: Network Specific 4: Subscriber Number          * 5: Alphanumeric 6: Abbreviated.          *           * The option is a:<code>byte</code> type.          *           * Group: producer          */
DECL|method|sourceAddrTon (byte sourceAddrTon)
specifier|default
name|SmppEndpointProducerBuilder
name|sourceAddrTon
parameter_list|(
name|byte
name|sourceAddrTon
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sourceAddrTon"
argument_list|,
name|sourceAddrTon
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the type of number (TON) to be used in the SME originator          * address parameters. The following TON values are defined: 0: Unknown          * 1: International 2: National 3: Network Specific 4: Subscriber Number          * 5: Alphanumeric 6: Abbreviated.          *           * The option will be converted to a<code>byte</code> type.          *           * Group: producer          */
DECL|method|sourceAddrTon (String sourceAddrTon)
specifier|default
name|SmppEndpointProducerBuilder
name|sourceAddrTon
parameter_list|(
name|String
name|sourceAddrTon
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sourceAddrTon"
argument_list|,
name|sourceAddrTon
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the type of number (TON) to be used in the SME. The following          * TON values are defined: 0: Unknown 1: International 2: National 3:          * Network Specific 4: Subscriber Number 5: Alphanumeric 6: Abbreviated.          *           * The option is a:<code>byte</code> type.          *           * Group: producer          */
DECL|method|typeOfNumber (byte typeOfNumber)
specifier|default
name|SmppEndpointProducerBuilder
name|typeOfNumber
parameter_list|(
name|byte
name|typeOfNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"typeOfNumber"
argument_list|,
name|typeOfNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the type of number (TON) to be used in the SME. The following          * TON values are defined: 0: Unknown 1: International 2: National 3:          * Network Specific 4: Subscriber Number 5: Alphanumeric 6: Abbreviated.          *           * The option will be converted to a<code>byte</code> type.          *           * Group: producer          */
DECL|method|typeOfNumber (String typeOfNumber)
specifier|default
name|SmppEndpointProducerBuilder
name|typeOfNumber
parameter_list|(
name|String
name|typeOfNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"typeOfNumber"
argument_list|,
name|typeOfNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines encoding of data according the SMPP 3.4 specification,          * section 5.2.19. 0: SMSC Default Alphabet 4: 8 bit Alphabet 8: UCS2          * Alphabet.          *           * The option is a:<code>byte</code> type.          *           * Group: codec          */
DECL|method|alphabet (byte alphabet)
specifier|default
name|SmppEndpointProducerBuilder
name|alphabet
parameter_list|(
name|byte
name|alphabet
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"alphabet"
argument_list|,
name|alphabet
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines encoding of data according the SMPP 3.4 specification,          * section 5.2.19. 0: SMSC Default Alphabet 4: 8 bit Alphabet 8: UCS2          * Alphabet.          *           * The option will be converted to a<code>byte</code> type.          *           * Group: codec          */
DECL|method|alphabet (String alphabet)
specifier|default
name|SmppEndpointProducerBuilder
name|alphabet
parameter_list|(
name|String
name|alphabet
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"alphabet"
argument_list|,
name|alphabet
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the data coding according the SMPP 3.4 specification, section          * 5.2.19. Example data encodings are: 0: SMSC Default Alphabet 3: Latin          * 1 (ISO-8859-1) 4: Octet unspecified (8-bit binary) 8: UCS2          * (ISO/IEC-10646) 13: Extended Kanji JIS(X 0212-1990).          *           * The option is a:<code>byte</code> type.          *           * Group: codec          */
DECL|method|dataCoding (byte dataCoding)
specifier|default
name|SmppEndpointProducerBuilder
name|dataCoding
parameter_list|(
name|byte
name|dataCoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataCoding"
argument_list|,
name|dataCoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the data coding according the SMPP 3.4 specification, section          * 5.2.19. Example data encodings are: 0: SMSC Default Alphabet 3: Latin          * 1 (ISO-8859-1) 4: Octet unspecified (8-bit binary) 8: UCS2          * (ISO/IEC-10646) 13: Extended Kanji JIS(X 0212-1990).          *           * The option will be converted to a<code>byte</code> type.          *           * Group: codec          */
DECL|method|dataCoding (String dataCoding)
specifier|default
name|SmppEndpointProducerBuilder
name|dataCoding
parameter_list|(
name|String
name|dataCoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataCoding"
argument_list|,
name|dataCoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the encoding scheme of the short message user data. Only for          * SubmitSm, ReplaceSm and SubmitMulti.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: codec          */
DECL|method|encoding (String encoding)
specifier|default
name|SmppEndpointProducerBuilder
name|encoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If you need to tunnel SMPP through a HTTP proxy, set this attribute          * to the hostname or ip address of your HTTP proxy.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyHost (String httpProxyHost)
specifier|default
name|SmppEndpointProducerBuilder
name|httpProxyHost
parameter_list|(
name|String
name|httpProxyHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpProxyHost"
argument_list|,
name|httpProxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If your HTTP proxy requires basic authentication, set this attribute          * to the password required for your HTTP proxy.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyPassword ( String httpProxyPassword)
specifier|default
name|SmppEndpointProducerBuilder
name|httpProxyPassword
parameter_list|(
name|String
name|httpProxyPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpProxyPassword"
argument_list|,
name|httpProxyPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If you need to tunnel SMPP through a HTTP proxy, set this attribute          * to the port of your HTTP proxy.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: proxy          */
DECL|method|httpProxyPort (Integer httpProxyPort)
specifier|default
name|SmppEndpointProducerBuilder
name|httpProxyPort
parameter_list|(
name|Integer
name|httpProxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpProxyPort"
argument_list|,
name|httpProxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If you need to tunnel SMPP through a HTTP proxy, set this attribute          * to the port of your HTTP proxy.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: proxy          */
DECL|method|httpProxyPort (String httpProxyPort)
specifier|default
name|SmppEndpointProducerBuilder
name|httpProxyPort
parameter_list|(
name|String
name|httpProxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpProxyPort"
argument_list|,
name|httpProxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If your HTTP proxy requires basic authentication, set this attribute          * to the username required for your HTTP proxy.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyUsername ( String httpProxyUsername)
specifier|default
name|SmppEndpointProducerBuilder
name|httpProxyUsername
parameter_list|(
name|String
name|httpProxyUsername
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpProxyUsername"
argument_list|,
name|httpProxyUsername
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * These headers will be passed to the proxy server while establishing          * the connection.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.String&gt;</code> type.          *           * Group: proxy          */
DECL|method|proxyHeaders ( Map<String, String> proxyHeaders)
specifier|default
name|SmppEndpointProducerBuilder
name|proxyHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|proxyHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyHeaders"
argument_list|,
name|proxyHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * These headers will be passed to the proxy server while establishing          * the connection.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>          * type.          *           * Group: proxy          */
DECL|method|proxyHeaders (String proxyHeaders)
specifier|default
name|SmppEndpointProducerBuilder
name|proxyHeaders
parameter_list|(
name|String
name|proxyHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyHeaders"
argument_list|,
name|proxyHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The password for connecting to SMSC server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|SmppEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The system id (username) for connecting to SMSC server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|systemId (String systemId)
specifier|default
name|SmppEndpointProducerBuilder
name|systemId
parameter_list|(
name|String
name|systemId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"systemId"
argument_list|,
name|systemId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether using SSL with the smpps protocol.          *           * The option is a:<code>boolean</code> type.          *           * Group: security          */
DECL|method|usingSSL (boolean usingSSL)
specifier|default
name|SmppEndpointProducerBuilder
name|usingSSL
parameter_list|(
name|boolean
name|usingSSL
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"usingSSL"
argument_list|,
name|usingSSL
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether using SSL with the smpps protocol.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: security          */
DECL|method|usingSSL (String usingSSL)
specifier|default
name|SmppEndpointProducerBuilder
name|usingSSL
parameter_list|(
name|String
name|usingSSL
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"usingSSL"
argument_list|,
name|usingSSL
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the SMPP component.      */
DECL|interface|AdvancedSmppEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedSmppEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SmppEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SmppEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSmppEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSmppEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the interval in milliseconds between the confidence checks.          * The confidence check is used to test the communication path between          * an ESME and an SMSC.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|enquireLinkTimer ( Integer enquireLinkTimer)
specifier|default
name|AdvancedSmppEndpointProducerBuilder
name|enquireLinkTimer
parameter_list|(
name|Integer
name|enquireLinkTimer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enquireLinkTimer"
argument_list|,
name|enquireLinkTimer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the interval in milliseconds between the confidence checks.          * The confidence check is used to test the communication path between          * an ESME and an SMSC.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|enquireLinkTimer ( String enquireLinkTimer)
specifier|default
name|AdvancedSmppEndpointProducerBuilder
name|enquireLinkTimer
parameter_list|(
name|String
name|enquireLinkTimer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enquireLinkTimer"
argument_list|,
name|enquireLinkTimer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can refer to a org.jsmpp.session.SessionStateListener in the          * Registry to receive callbacks when the session state changed.          *           * The option is a:<code>org.jsmpp.session.SessionStateListener</code>          * type.          *           * Group: advanced          */
DECL|method|sessionStateListener ( Object sessionStateListener)
specifier|default
name|AdvancedSmppEndpointProducerBuilder
name|sessionStateListener
parameter_list|(
name|Object
name|sessionStateListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionStateListener"
argument_list|,
name|sessionStateListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can refer to a org.jsmpp.session.SessionStateListener in the          * Registry to receive callbacks when the session state changed.          *           * The option will be converted to a          *<code>org.jsmpp.session.SessionStateListener</code> type.          *           * Group: advanced          */
DECL|method|sessionStateListener ( String sessionStateListener)
specifier|default
name|AdvancedSmppEndpointProducerBuilder
name|sessionStateListener
parameter_list|(
name|String
name|sessionStateListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionStateListener"
argument_list|,
name|sessionStateListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSmppEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedSmppEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the maximum period of inactivity allowed after a transaction,          * after which an SMPP entity may assume that the session is no longer          * active. This timer may be active on either communicating SMPP entity          * (i.e. SMSC or ESME).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|transactionTimer ( Integer transactionTimer)
specifier|default
name|AdvancedSmppEndpointProducerBuilder
name|transactionTimer
parameter_list|(
name|Integer
name|transactionTimer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transactionTimer"
argument_list|,
name|transactionTimer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the maximum period of inactivity allowed after a transaction,          * after which an SMPP entity may assume that the session is no longer          * active. This timer may be active on either communicating SMPP entity          * (i.e. SMSC or ESME).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|transactionTimer ( String transactionTimer)
specifier|default
name|AdvancedSmppEndpointProducerBuilder
name|transactionTimer
parameter_list|(
name|String
name|transactionTimer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transactionTimer"
argument_list|,
name|transactionTimer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the SMPP component.      */
DECL|interface|SmppEndpointBuilder
specifier|public
interface|interface
name|SmppEndpointBuilder
extends|extends
name|SmppEndpointConsumerBuilder
extends|,
name|SmppEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSmppEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSmppEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Defines the initial delay in milliseconds after the consumer/producer          * tries to reconnect to the SMSC, after the connection was lost.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|initialReconnectDelay ( long initialReconnectDelay)
specifier|default
name|SmppEndpointBuilder
name|initialReconnectDelay
parameter_list|(
name|long
name|initialReconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"initialReconnectDelay"
argument_list|,
name|initialReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the initial delay in milliseconds after the consumer/producer          * tries to reconnect to the SMSC, after the connection was lost.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|initialReconnectDelay ( String initialReconnectDelay)
specifier|default
name|SmppEndpointBuilder
name|initialReconnectDelay
parameter_list|(
name|String
name|initialReconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"initialReconnectDelay"
argument_list|,
name|initialReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the maximum number of attempts to reconnect to the SMSC, if          * SMSC returns a negative bind response.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxReconnect (int maxReconnect)
specifier|default
name|SmppEndpointBuilder
name|maxReconnect
parameter_list|(
name|int
name|maxReconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReconnect"
argument_list|,
name|maxReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the maximum number of attempts to reconnect to the SMSC, if          * SMSC returns a negative bind response.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxReconnect (String maxReconnect)
specifier|default
name|SmppEndpointBuilder
name|maxReconnect
parameter_list|(
name|String
name|maxReconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReconnect"
argument_list|,
name|maxReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the interval in milliseconds between the reconnect attempts,          * if the connection to the SMSC was lost and the previous was not          * succeed.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelay (long reconnectDelay)
specifier|default
name|SmppEndpointBuilder
name|reconnectDelay
parameter_list|(
name|long
name|reconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelay"
argument_list|,
name|reconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the interval in milliseconds between the reconnect attempts,          * if the connection to the SMSC was lost and the previous was not          * succeed.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelay (String reconnectDelay)
specifier|default
name|SmppEndpointBuilder
name|reconnectDelay
parameter_list|(
name|String
name|reconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelay"
argument_list|,
name|reconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can specify a policy for handling long messages: ALLOW - the          * default, long messages are split to 140 bytes per message TRUNCATE -          * long messages are split and only the first fragment will be sent to          * the SMSC. Some carriers drop subsequent fragments so this reduces          * load on the SMPP connection sending parts of a message that will          * never be delivered. REJECT - if a message would need to be split, it          * is rejected with an SMPP NegativeResponseException and the reason          * code signifying the message is too long.          *           * The option is a:          *<code>org.apache.camel.component.smpp.SmppSplittingPolicy</code>          * type.          *           * Group: common          */
DECL|method|splittingPolicy ( SmppSplittingPolicy splittingPolicy)
specifier|default
name|SmppEndpointBuilder
name|splittingPolicy
parameter_list|(
name|SmppSplittingPolicy
name|splittingPolicy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"splittingPolicy"
argument_list|,
name|splittingPolicy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can specify a policy for handling long messages: ALLOW - the          * default, long messages are split to 140 bytes per message TRUNCATE -          * long messages are split and only the first fragment will be sent to          * the SMSC. Some carriers drop subsequent fragments so this reduces          * load on the SMPP connection sending parts of a message that will          * never be delivered. REJECT - if a message would need to be split, it          * is rejected with an SMPP NegativeResponseException and the reason          * code signifying the message is too long.          *           * The option will be converted to a          *<code>org.apache.camel.component.smpp.SmppSplittingPolicy</code>          * type.          *           * Group: common          */
DECL|method|splittingPolicy (String splittingPolicy)
specifier|default
name|SmppEndpointBuilder
name|splittingPolicy
parameter_list|(
name|String
name|splittingPolicy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"splittingPolicy"
argument_list|,
name|splittingPolicy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This parameter is used to categorize the type of ESME (External Short          * Message Entity) that is binding to the SMSC (max. 13 characters).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|systemType (String systemType)
specifier|default
name|SmppEndpointBuilder
name|systemType
parameter_list|(
name|String
name|systemType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"systemType"
argument_list|,
name|systemType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines encoding of data according the SMPP 3.4 specification,          * section 5.2.19. 0: SMSC Default Alphabet 4: 8 bit Alphabet 8: UCS2          * Alphabet.          *           * The option is a:<code>byte</code> type.          *           * Group: codec          */
DECL|method|alphabet (byte alphabet)
specifier|default
name|SmppEndpointBuilder
name|alphabet
parameter_list|(
name|byte
name|alphabet
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"alphabet"
argument_list|,
name|alphabet
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines encoding of data according the SMPP 3.4 specification,          * section 5.2.19. 0: SMSC Default Alphabet 4: 8 bit Alphabet 8: UCS2          * Alphabet.          *           * The option will be converted to a<code>byte</code> type.          *           * Group: codec          */
DECL|method|alphabet (String alphabet)
specifier|default
name|SmppEndpointBuilder
name|alphabet
parameter_list|(
name|String
name|alphabet
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"alphabet"
argument_list|,
name|alphabet
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the data coding according the SMPP 3.4 specification, section          * 5.2.19. Example data encodings are: 0: SMSC Default Alphabet 3: Latin          * 1 (ISO-8859-1) 4: Octet unspecified (8-bit binary) 8: UCS2          * (ISO/IEC-10646) 13: Extended Kanji JIS(X 0212-1990).          *           * The option is a:<code>byte</code> type.          *           * Group: codec          */
DECL|method|dataCoding (byte dataCoding)
specifier|default
name|SmppEndpointBuilder
name|dataCoding
parameter_list|(
name|byte
name|dataCoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataCoding"
argument_list|,
name|dataCoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the data coding according the SMPP 3.4 specification, section          * 5.2.19. Example data encodings are: 0: SMSC Default Alphabet 3: Latin          * 1 (ISO-8859-1) 4: Octet unspecified (8-bit binary) 8: UCS2          * (ISO/IEC-10646) 13: Extended Kanji JIS(X 0212-1990).          *           * The option will be converted to a<code>byte</code> type.          *           * Group: codec          */
DECL|method|dataCoding (String dataCoding)
specifier|default
name|SmppEndpointBuilder
name|dataCoding
parameter_list|(
name|String
name|dataCoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataCoding"
argument_list|,
name|dataCoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the encoding scheme of the short message user data. Only for          * SubmitSm, ReplaceSm and SubmitMulti.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: codec          */
DECL|method|encoding (String encoding)
specifier|default
name|SmppEndpointBuilder
name|encoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encoding"
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If you need to tunnel SMPP through a HTTP proxy, set this attribute          * to the hostname or ip address of your HTTP proxy.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyHost (String httpProxyHost)
specifier|default
name|SmppEndpointBuilder
name|httpProxyHost
parameter_list|(
name|String
name|httpProxyHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpProxyHost"
argument_list|,
name|httpProxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If your HTTP proxy requires basic authentication, set this attribute          * to the password required for your HTTP proxy.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyPassword (String httpProxyPassword)
specifier|default
name|SmppEndpointBuilder
name|httpProxyPassword
parameter_list|(
name|String
name|httpProxyPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpProxyPassword"
argument_list|,
name|httpProxyPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If you need to tunnel SMPP through a HTTP proxy, set this attribute          * to the port of your HTTP proxy.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: proxy          */
DECL|method|httpProxyPort (Integer httpProxyPort)
specifier|default
name|SmppEndpointBuilder
name|httpProxyPort
parameter_list|(
name|Integer
name|httpProxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpProxyPort"
argument_list|,
name|httpProxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If you need to tunnel SMPP through a HTTP proxy, set this attribute          * to the port of your HTTP proxy.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: proxy          */
DECL|method|httpProxyPort (String httpProxyPort)
specifier|default
name|SmppEndpointBuilder
name|httpProxyPort
parameter_list|(
name|String
name|httpProxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpProxyPort"
argument_list|,
name|httpProxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If your HTTP proxy requires basic authentication, set this attribute          * to the username required for your HTTP proxy.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyUsername (String httpProxyUsername)
specifier|default
name|SmppEndpointBuilder
name|httpProxyUsername
parameter_list|(
name|String
name|httpProxyUsername
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpProxyUsername"
argument_list|,
name|httpProxyUsername
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * These headers will be passed to the proxy server while establishing          * the connection.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.String&gt;</code> type.          *           * Group: proxy          */
DECL|method|proxyHeaders ( Map<String, String> proxyHeaders)
specifier|default
name|SmppEndpointBuilder
name|proxyHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|proxyHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyHeaders"
argument_list|,
name|proxyHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * These headers will be passed to the proxy server while establishing          * the connection.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>          * type.          *           * Group: proxy          */
DECL|method|proxyHeaders (String proxyHeaders)
specifier|default
name|SmppEndpointBuilder
name|proxyHeaders
parameter_list|(
name|String
name|proxyHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyHeaders"
argument_list|,
name|proxyHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The password for connecting to SMSC server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|SmppEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The system id (username) for connecting to SMSC server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|systemId (String systemId)
specifier|default
name|SmppEndpointBuilder
name|systemId
parameter_list|(
name|String
name|systemId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"systemId"
argument_list|,
name|systemId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether using SSL with the smpps protocol.          *           * The option is a:<code>boolean</code> type.          *           * Group: security          */
DECL|method|usingSSL (boolean usingSSL)
specifier|default
name|SmppEndpointBuilder
name|usingSSL
parameter_list|(
name|boolean
name|usingSSL
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"usingSSL"
argument_list|,
name|usingSSL
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether using SSL with the smpps protocol.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: security          */
DECL|method|usingSSL (String usingSSL)
specifier|default
name|SmppEndpointBuilder
name|usingSSL
parameter_list|(
name|String
name|usingSSL
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"usingSSL"
argument_list|,
name|usingSSL
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the SMPP component.      */
DECL|interface|AdvancedSmppEndpointBuilder
specifier|public
interface|interface
name|AdvancedSmppEndpointBuilder
extends|extends
name|AdvancedSmppEndpointConsumerBuilder
extends|,
name|AdvancedSmppEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SmppEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SmppEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSmppEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSmppEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the interval in milliseconds between the confidence checks.          * The confidence check is used to test the communication path between          * an ESME and an SMSC.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|enquireLinkTimer ( Integer enquireLinkTimer)
specifier|default
name|AdvancedSmppEndpointBuilder
name|enquireLinkTimer
parameter_list|(
name|Integer
name|enquireLinkTimer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enquireLinkTimer"
argument_list|,
name|enquireLinkTimer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the interval in milliseconds between the confidence checks.          * The confidence check is used to test the communication path between          * an ESME and an SMSC.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|enquireLinkTimer ( String enquireLinkTimer)
specifier|default
name|AdvancedSmppEndpointBuilder
name|enquireLinkTimer
parameter_list|(
name|String
name|enquireLinkTimer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enquireLinkTimer"
argument_list|,
name|enquireLinkTimer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can refer to a org.jsmpp.session.SessionStateListener in the          * Registry to receive callbacks when the session state changed.          *           * The option is a:<code>org.jsmpp.session.SessionStateListener</code>          * type.          *           * Group: advanced          */
DECL|method|sessionStateListener ( Object sessionStateListener)
specifier|default
name|AdvancedSmppEndpointBuilder
name|sessionStateListener
parameter_list|(
name|Object
name|sessionStateListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionStateListener"
argument_list|,
name|sessionStateListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * You can refer to a org.jsmpp.session.SessionStateListener in the          * Registry to receive callbacks when the session state changed.          *           * The option will be converted to a          *<code>org.jsmpp.session.SessionStateListener</code> type.          *           * Group: advanced          */
DECL|method|sessionStateListener ( String sessionStateListener)
specifier|default
name|AdvancedSmppEndpointBuilder
name|sessionStateListener
parameter_list|(
name|String
name|sessionStateListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sessionStateListener"
argument_list|,
name|sessionStateListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedSmppEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedSmppEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the maximum period of inactivity allowed after a transaction,          * after which an SMPP entity may assume that the session is no longer          * active. This timer may be active on either communicating SMPP entity          * (i.e. SMSC or ESME).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|transactionTimer ( Integer transactionTimer)
specifier|default
name|AdvancedSmppEndpointBuilder
name|transactionTimer
parameter_list|(
name|Integer
name|transactionTimer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transactionTimer"
argument_list|,
name|transactionTimer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the maximum period of inactivity allowed after a transaction,          * after which an SMPP entity may assume that the session is no longer          * active. This timer may be active on either communicating SMPP entity          * (i.e. SMSC or ESME).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|transactionTimer ( String transactionTimer)
specifier|default
name|AdvancedSmppEndpointBuilder
name|transactionTimer
parameter_list|(
name|String
name|transactionTimer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transactionTimer"
argument_list|,
name|transactionTimer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.smpp.SmppSplittingPolicy</code> enum.      */
DECL|enum|SmppSplittingPolicy
enum|enum
name|SmppSplittingPolicy
block|{
DECL|enumConstant|ALLOW
name|ALLOW
block|,
DECL|enumConstant|REJECT
name|REJECT
block|,
DECL|enumConstant|TRUNCATE
name|TRUNCATE
block|;     }
comment|/**      * SMPP (camel-smpp)      * To send and receive SMS using a SMSC (Short Message Service Center).      *       * Category: mobile      * Available as of version: 2.2      * Maven coordinates: org.apache.camel:camel-smpp      *       * Syntax:<code>smpp:host:port</code>      *       * Path parameter: host      * Hostname for the SMSC server to use.      * Default value: localhost      *       * Path parameter: port      * Port number for the SMSC server to use.      * Default value: 2775      */
DECL|method|smpp (String path)
specifier|default
name|SmppEndpointBuilder
name|smpp
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|SmppEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|SmppEndpointBuilder
implements|,
name|AdvancedSmppEndpointBuilder
block|{
specifier|public
name|SmppEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"smpp"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SmppEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

