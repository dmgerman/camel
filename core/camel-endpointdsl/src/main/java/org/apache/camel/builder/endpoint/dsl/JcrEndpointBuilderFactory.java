begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The jcr component allows you to add/read nodes to/from a JCR compliant  * content repository.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|JcrEndpointBuilderFactory
specifier|public
interface|interface
name|JcrEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the JCR component.      */
DECL|interface|JcrEndpointConsumerBuilder
specifier|public
interface|interface
name|JcrEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJcrEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJcrEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * When isDeep is true, events whose associated parent node is at          * absPath or within its subgraph are received.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|deep (boolean deep)
specifier|default
name|JcrEndpointConsumerBuilder
name|deep
parameter_list|(
name|boolean
name|deep
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"deep"
argument_list|,
name|deep
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When isDeep is true, events whose associated parent node is at          * absPath or within its subgraph are received.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|deep (String deep)
specifier|default
name|JcrEndpointConsumerBuilder
name|deep
parameter_list|(
name|String
name|deep
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"deep"
argument_list|,
name|deep
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * eventTypes (a combination of one or more event types encoded as a bit          * mask value such as javax.jcr.observation.Event.NODE_ADDED,          * javax.jcr.observation.Event.NODE_REMOVED, etc.).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|eventTypes (int eventTypes)
specifier|default
name|JcrEndpointConsumerBuilder
name|eventTypes
parameter_list|(
name|int
name|eventTypes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventTypes"
argument_list|,
name|eventTypes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * eventTypes (a combination of one or more event types encoded as a bit          * mask value such as javax.jcr.observation.Event.NODE_ADDED,          * javax.jcr.observation.Event.NODE_REMOVED, etc.).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|eventTypes (String eventTypes)
specifier|default
name|JcrEndpointConsumerBuilder
name|eventTypes
parameter_list|(
name|String
name|eventTypes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventTypes"
argument_list|,
name|eventTypes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When a comma separated nodeTypeName list string is set, only events          * whose associated parent node has one of the node types (or a subtype          * of one of the node types) in this list will be received.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|nodeTypeNames (String nodeTypeNames)
specifier|default
name|JcrEndpointConsumerBuilder
name|nodeTypeNames
parameter_list|(
name|String
name|nodeTypeNames
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nodeTypeNames"
argument_list|,
name|nodeTypeNames
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If noLocal is true, then events generated by the session through          * which the listener was registered are ignored. Otherwise, they are          * not ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|noLocal (boolean noLocal)
specifier|default
name|JcrEndpointConsumerBuilder
name|noLocal
parameter_list|(
name|boolean
name|noLocal
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"noLocal"
argument_list|,
name|noLocal
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If noLocal is true, then events generated by the session through          * which the listener was registered are ignored. Otherwise, they are          * not ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|noLocal (String noLocal)
specifier|default
name|JcrEndpointConsumerBuilder
name|noLocal
parameter_list|(
name|String
name|noLocal
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"noLocal"
argument_list|,
name|noLocal
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for login.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|password (String password)
specifier|default
name|JcrEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval in milliseconds to wait before each session live checking          * The default value is 60000 ms.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|sessionLiveCheckInterval ( long sessionLiveCheckInterval)
specifier|default
name|JcrEndpointConsumerBuilder
name|sessionLiveCheckInterval
parameter_list|(
name|long
name|sessionLiveCheckInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sessionLiveCheckInterval"
argument_list|,
name|sessionLiveCheckInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval in milliseconds to wait before each session live checking          * The default value is 60000 ms.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|sessionLiveCheckInterval ( String sessionLiveCheckInterval)
specifier|default
name|JcrEndpointConsumerBuilder
name|sessionLiveCheckInterval
parameter_list|(
name|String
name|sessionLiveCheckInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sessionLiveCheckInterval"
argument_list|,
name|sessionLiveCheckInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval in milliseconds to wait before the first session live          * checking. The default value is 3000 ms.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|sessionLiveCheckIntervalOnStart ( long sessionLiveCheckIntervalOnStart)
specifier|default
name|JcrEndpointConsumerBuilder
name|sessionLiveCheckIntervalOnStart
parameter_list|(
name|long
name|sessionLiveCheckIntervalOnStart
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sessionLiveCheckIntervalOnStart"
argument_list|,
name|sessionLiveCheckIntervalOnStart
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval in milliseconds to wait before the first session live          * checking. The default value is 3000 ms.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|sessionLiveCheckIntervalOnStart ( String sessionLiveCheckIntervalOnStart)
specifier|default
name|JcrEndpointConsumerBuilder
name|sessionLiveCheckIntervalOnStart
parameter_list|(
name|String
name|sessionLiveCheckIntervalOnStart
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sessionLiveCheckIntervalOnStart"
argument_list|,
name|sessionLiveCheckIntervalOnStart
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username for login.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|username (String username)
specifier|default
name|JcrEndpointConsumerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When a comma separated uuid list string is set, only events whose          * associated parent node has one of the identifiers in the comma          * separated uuid list will be received.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|uuids (String uuids)
specifier|default
name|JcrEndpointConsumerBuilder
name|uuids
parameter_list|(
name|String
name|uuids
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"uuids"
argument_list|,
name|uuids
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The workspace to access. If it's not specified then the default one          * will be used.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|workspaceName (String workspaceName)
specifier|default
name|JcrEndpointConsumerBuilder
name|workspaceName
parameter_list|(
name|String
name|workspaceName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workspaceName"
argument_list|,
name|workspaceName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|JcrEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|JcrEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the JCR component.      */
DECL|interface|AdvancedJcrEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedJcrEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|JcrEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|JcrEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedJcrEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedJcrEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedJcrEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedJcrEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJcrEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJcrEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedJcrEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedJcrEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the JCR component.      */
DECL|interface|JcrEndpointProducerBuilder
specifier|public
interface|interface
name|JcrEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJcrEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJcrEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * When isDeep is true, events whose associated parent node is at          * absPath or within its subgraph are received.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|deep (boolean deep)
specifier|default
name|JcrEndpointProducerBuilder
name|deep
parameter_list|(
name|boolean
name|deep
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"deep"
argument_list|,
name|deep
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When isDeep is true, events whose associated parent node is at          * absPath or within its subgraph are received.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|deep (String deep)
specifier|default
name|JcrEndpointProducerBuilder
name|deep
parameter_list|(
name|String
name|deep
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"deep"
argument_list|,
name|deep
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * eventTypes (a combination of one or more event types encoded as a bit          * mask value such as javax.jcr.observation.Event.NODE_ADDED,          * javax.jcr.observation.Event.NODE_REMOVED, etc.).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|eventTypes (int eventTypes)
specifier|default
name|JcrEndpointProducerBuilder
name|eventTypes
parameter_list|(
name|int
name|eventTypes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventTypes"
argument_list|,
name|eventTypes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * eventTypes (a combination of one or more event types encoded as a bit          * mask value such as javax.jcr.observation.Event.NODE_ADDED,          * javax.jcr.observation.Event.NODE_REMOVED, etc.).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|eventTypes (String eventTypes)
specifier|default
name|JcrEndpointProducerBuilder
name|eventTypes
parameter_list|(
name|String
name|eventTypes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventTypes"
argument_list|,
name|eventTypes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When a comma separated nodeTypeName list string is set, only events          * whose associated parent node has one of the node types (or a subtype          * of one of the node types) in this list will be received.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|nodeTypeNames (String nodeTypeNames)
specifier|default
name|JcrEndpointProducerBuilder
name|nodeTypeNames
parameter_list|(
name|String
name|nodeTypeNames
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nodeTypeNames"
argument_list|,
name|nodeTypeNames
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If noLocal is true, then events generated by the session through          * which the listener was registered are ignored. Otherwise, they are          * not ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|noLocal (boolean noLocal)
specifier|default
name|JcrEndpointProducerBuilder
name|noLocal
parameter_list|(
name|boolean
name|noLocal
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"noLocal"
argument_list|,
name|noLocal
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If noLocal is true, then events generated by the session through          * which the listener was registered are ignored. Otherwise, they are          * not ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|noLocal (String noLocal)
specifier|default
name|JcrEndpointProducerBuilder
name|noLocal
parameter_list|(
name|String
name|noLocal
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"noLocal"
argument_list|,
name|noLocal
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for login.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|password (String password)
specifier|default
name|JcrEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval in milliseconds to wait before each session live checking          * The default value is 60000 ms.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|sessionLiveCheckInterval ( long sessionLiveCheckInterval)
specifier|default
name|JcrEndpointProducerBuilder
name|sessionLiveCheckInterval
parameter_list|(
name|long
name|sessionLiveCheckInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sessionLiveCheckInterval"
argument_list|,
name|sessionLiveCheckInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval in milliseconds to wait before each session live checking          * The default value is 60000 ms.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|sessionLiveCheckInterval ( String sessionLiveCheckInterval)
specifier|default
name|JcrEndpointProducerBuilder
name|sessionLiveCheckInterval
parameter_list|(
name|String
name|sessionLiveCheckInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sessionLiveCheckInterval"
argument_list|,
name|sessionLiveCheckInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval in milliseconds to wait before the first session live          * checking. The default value is 3000 ms.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|sessionLiveCheckIntervalOnStart ( long sessionLiveCheckIntervalOnStart)
specifier|default
name|JcrEndpointProducerBuilder
name|sessionLiveCheckIntervalOnStart
parameter_list|(
name|long
name|sessionLiveCheckIntervalOnStart
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sessionLiveCheckIntervalOnStart"
argument_list|,
name|sessionLiveCheckIntervalOnStart
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval in milliseconds to wait before the first session live          * checking. The default value is 3000 ms.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|sessionLiveCheckIntervalOnStart ( String sessionLiveCheckIntervalOnStart)
specifier|default
name|JcrEndpointProducerBuilder
name|sessionLiveCheckIntervalOnStart
parameter_list|(
name|String
name|sessionLiveCheckIntervalOnStart
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sessionLiveCheckIntervalOnStart"
argument_list|,
name|sessionLiveCheckIntervalOnStart
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username for login.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|username (String username)
specifier|default
name|JcrEndpointProducerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When a comma separated uuid list string is set, only events whose          * associated parent node has one of the identifiers in the comma          * separated uuid list will be received.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|uuids (String uuids)
specifier|default
name|JcrEndpointProducerBuilder
name|uuids
parameter_list|(
name|String
name|uuids
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"uuids"
argument_list|,
name|uuids
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The workspace to access. If it's not specified then the default one          * will be used.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|workspaceName (String workspaceName)
specifier|default
name|JcrEndpointProducerBuilder
name|workspaceName
parameter_list|(
name|String
name|workspaceName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workspaceName"
argument_list|,
name|workspaceName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|JcrEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|JcrEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the JCR component.      */
DECL|interface|AdvancedJcrEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedJcrEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|JcrEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|JcrEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJcrEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJcrEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedJcrEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedJcrEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the JCR component.      */
DECL|interface|JcrEndpointBuilder
specifier|public
interface|interface
name|JcrEndpointBuilder
extends|extends
name|JcrEndpointConsumerBuilder
extends|,
name|JcrEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJcrEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJcrEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * When isDeep is true, events whose associated parent node is at          * absPath or within its subgraph are received.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|deep (boolean deep)
specifier|default
name|JcrEndpointBuilder
name|deep
parameter_list|(
name|boolean
name|deep
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"deep"
argument_list|,
name|deep
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When isDeep is true, events whose associated parent node is at          * absPath or within its subgraph are received.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|deep (String deep)
specifier|default
name|JcrEndpointBuilder
name|deep
parameter_list|(
name|String
name|deep
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"deep"
argument_list|,
name|deep
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * eventTypes (a combination of one or more event types encoded as a bit          * mask value such as javax.jcr.observation.Event.NODE_ADDED,          * javax.jcr.observation.Event.NODE_REMOVED, etc.).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|eventTypes (int eventTypes)
specifier|default
name|JcrEndpointBuilder
name|eventTypes
parameter_list|(
name|int
name|eventTypes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventTypes"
argument_list|,
name|eventTypes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * eventTypes (a combination of one or more event types encoded as a bit          * mask value such as javax.jcr.observation.Event.NODE_ADDED,          * javax.jcr.observation.Event.NODE_REMOVED, etc.).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|eventTypes (String eventTypes)
specifier|default
name|JcrEndpointBuilder
name|eventTypes
parameter_list|(
name|String
name|eventTypes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventTypes"
argument_list|,
name|eventTypes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When a comma separated nodeTypeName list string is set, only events          * whose associated parent node has one of the node types (or a subtype          * of one of the node types) in this list will be received.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|nodeTypeNames (String nodeTypeNames)
specifier|default
name|JcrEndpointBuilder
name|nodeTypeNames
parameter_list|(
name|String
name|nodeTypeNames
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nodeTypeNames"
argument_list|,
name|nodeTypeNames
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If noLocal is true, then events generated by the session through          * which the listener was registered are ignored. Otherwise, they are          * not ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|noLocal (boolean noLocal)
specifier|default
name|JcrEndpointBuilder
name|noLocal
parameter_list|(
name|boolean
name|noLocal
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"noLocal"
argument_list|,
name|noLocal
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If noLocal is true, then events generated by the session through          * which the listener was registered are ignored. Otherwise, they are          * not ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|noLocal (String noLocal)
specifier|default
name|JcrEndpointBuilder
name|noLocal
parameter_list|(
name|String
name|noLocal
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"noLocal"
argument_list|,
name|noLocal
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for login.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|password (String password)
specifier|default
name|JcrEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval in milliseconds to wait before each session live checking          * The default value is 60000 ms.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|sessionLiveCheckInterval ( long sessionLiveCheckInterval)
specifier|default
name|JcrEndpointBuilder
name|sessionLiveCheckInterval
parameter_list|(
name|long
name|sessionLiveCheckInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sessionLiveCheckInterval"
argument_list|,
name|sessionLiveCheckInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval in milliseconds to wait before each session live checking          * The default value is 60000 ms.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|sessionLiveCheckInterval ( String sessionLiveCheckInterval)
specifier|default
name|JcrEndpointBuilder
name|sessionLiveCheckInterval
parameter_list|(
name|String
name|sessionLiveCheckInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sessionLiveCheckInterval"
argument_list|,
name|sessionLiveCheckInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval in milliseconds to wait before the first session live          * checking. The default value is 3000 ms.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|sessionLiveCheckIntervalOnStart ( long sessionLiveCheckIntervalOnStart)
specifier|default
name|JcrEndpointBuilder
name|sessionLiveCheckIntervalOnStart
parameter_list|(
name|long
name|sessionLiveCheckIntervalOnStart
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sessionLiveCheckIntervalOnStart"
argument_list|,
name|sessionLiveCheckIntervalOnStart
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval in milliseconds to wait before the first session live          * checking. The default value is 3000 ms.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|sessionLiveCheckIntervalOnStart ( String sessionLiveCheckIntervalOnStart)
specifier|default
name|JcrEndpointBuilder
name|sessionLiveCheckIntervalOnStart
parameter_list|(
name|String
name|sessionLiveCheckIntervalOnStart
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sessionLiveCheckIntervalOnStart"
argument_list|,
name|sessionLiveCheckIntervalOnStart
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username for login.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|username (String username)
specifier|default
name|JcrEndpointBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When a comma separated uuid list string is set, only events whose          * associated parent node has one of the identifiers in the comma          * separated uuid list will be received.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|uuids (String uuids)
specifier|default
name|JcrEndpointBuilder
name|uuids
parameter_list|(
name|String
name|uuids
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"uuids"
argument_list|,
name|uuids
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The workspace to access. If it's not specified then the default one          * will be used.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|workspaceName (String workspaceName)
specifier|default
name|JcrEndpointBuilder
name|workspaceName
parameter_list|(
name|String
name|workspaceName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workspaceName"
argument_list|,
name|workspaceName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the JCR component.      */
DECL|interface|AdvancedJcrEndpointBuilder
specifier|public
interface|interface
name|AdvancedJcrEndpointBuilder
extends|extends
name|AdvancedJcrEndpointConsumerBuilder
extends|,
name|AdvancedJcrEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|JcrEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|JcrEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJcrEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJcrEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedJcrEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedJcrEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * JCR (camel-jcr)      * The jcr component allows you to add/read nodes to/from a JCR compliant      * content repository.      *       * Category: cms,database      * Available as of version: 1.3      * Maven coordinates: org.apache.camel:camel-jcr      *       * Syntax:<code>jcr:host/base</code>      *       * Path parameter: host (required)      * Name of the javax.jcr.Repository to lookup from the Camel registry to be      * used.      *       * Path parameter: base      * Get the base node when accessing the repository      */
DECL|method|jcr (String path)
specifier|default
name|JcrEndpointBuilder
name|jcr
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|JcrEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|JcrEndpointBuilder
implements|,
name|AdvancedJcrEndpointBuilder
block|{
specifier|public
name|JcrEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"jcr"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|JcrEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

