begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * Component for communicating with MQTT M2M message brokers using FuseSource  * MQTT Client.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|MQTTEndpointBuilderFactory
specifier|public
interface|interface
name|MQTTEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the MQTT component.      */
DECL|interface|MQTTEndpointConsumerBuilder
specifier|public
interface|interface
name|MQTTEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedMQTTEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedMQTTEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * SSL connections perform blocking operations against internal thread          * pool unless you call the setBlockingExecutor method to configure that          * executor they will use instead.          *           * The option is a:<code>java.util.concurrent.Executor</code> type.          *           * Group: common          */
DECL|method|blockingExecutor ( Executor blockingExecutor)
specifier|default
name|MQTTEndpointConsumerBuilder
name|blockingExecutor
parameter_list|(
name|Executor
name|blockingExecutor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blockingExecutor"
argument_list|,
name|blockingExecutor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * SSL connections perform blocking operations against internal thread          * pool unless you call the setBlockingExecutor method to configure that          * executor they will use instead.          *           * The option will be converted to a          *<code>java.util.concurrent.Executor</code> type.          *           * Group: common          */
DECL|method|blockingExecutor ( String blockingExecutor)
specifier|default
name|MQTTEndpointConsumerBuilder
name|blockingExecutor
parameter_list|(
name|String
name|blockingExecutor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blockingExecutor"
argument_list|,
name|blockingExecutor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default retain policy to be used on messages sent to the MQTT          * broker.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|byDefaultRetain ( boolean byDefaultRetain)
specifier|default
name|MQTTEndpointConsumerBuilder
name|byDefaultRetain
parameter_list|(
name|boolean
name|byDefaultRetain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"byDefaultRetain"
argument_list|,
name|byDefaultRetain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default retain policy to be used on messages sent to the MQTT          * broker.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|byDefaultRetain ( String byDefaultRetain)
specifier|default
name|MQTTEndpointConsumerBuilder
name|byDefaultRetain
parameter_list|(
name|String
name|byDefaultRetain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"byDefaultRetain"
argument_list|,
name|byDefaultRetain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to false if you want the MQTT server to persist topic          * subscriptions and ack positions across client sessions. Defaults to          * true.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|cleanSession (boolean cleanSession)
specifier|default
name|MQTTEndpointConsumerBuilder
name|cleanSession
parameter_list|(
name|boolean
name|cleanSession
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cleanSession"
argument_list|,
name|cleanSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to false if you want the MQTT server to persist topic          * subscriptions and ack positions across client sessions. Defaults to          * true.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|cleanSession (String cleanSession)
specifier|default
name|MQTTEndpointConsumerBuilder
name|cleanSession
parameter_list|(
name|String
name|cleanSession
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cleanSession"
argument_list|,
name|cleanSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use to set the client Id of the session. This is what an MQTT server          * uses to identify a session where setCleanSession(false); is being          * used. The id must be 23 characters or less. Defaults to auto          * generated id (based on your socket address, port and timestamp).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientId (String clientId)
specifier|default
name|MQTTEndpointConsumerBuilder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientId"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of reconnect attempts before an error is reported          * back to the client on the first attempt by the client to connect to a          * server. Set to -1 to use unlimited attempts. Defaults to -1.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|connectAttemptsMax ( long connectAttemptsMax)
specifier|default
name|MQTTEndpointConsumerBuilder
name|connectAttemptsMax
parameter_list|(
name|long
name|connectAttemptsMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectAttemptsMax"
argument_list|,
name|connectAttemptsMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of reconnect attempts before an error is reported          * back to the client on the first attempt by the client to connect to a          * server. Set to -1 to use unlimited attempts. Defaults to -1.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|connectAttemptsMax ( String connectAttemptsMax)
specifier|default
name|MQTTEndpointConsumerBuilder
name|connectAttemptsMax
parameter_list|(
name|String
name|connectAttemptsMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectAttemptsMax"
argument_list|,
name|connectAttemptsMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delay in seconds the Component will wait for a connection to be          * established to the MQTT broker.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|connectWaitInSeconds ( int connectWaitInSeconds)
specifier|default
name|MQTTEndpointConsumerBuilder
name|connectWaitInSeconds
parameter_list|(
name|int
name|connectWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectWaitInSeconds"
argument_list|,
name|connectWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delay in seconds the Component will wait for a connection to be          * established to the MQTT broker.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|connectWaitInSeconds ( String connectWaitInSeconds)
specifier|default
name|MQTTEndpointConsumerBuilder
name|connectWaitInSeconds
parameter_list|(
name|String
name|connectWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectWaitInSeconds"
argument_list|,
name|connectWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of seconds the Component will wait for a valid disconnect          * on stop() from the MQTT broker.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|disconnectWaitInSeconds ( int disconnectWaitInSeconds)
specifier|default
name|MQTTEndpointConsumerBuilder
name|disconnectWaitInSeconds
parameter_list|(
name|int
name|disconnectWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnectWaitInSeconds"
argument_list|,
name|disconnectWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of seconds the Component will wait for a valid disconnect          * on stop() from the MQTT broker.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|disconnectWaitInSeconds ( String disconnectWaitInSeconds)
specifier|default
name|MQTTEndpointConsumerBuilder
name|disconnectWaitInSeconds
parameter_list|(
name|String
name|disconnectWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnectWaitInSeconds"
argument_list|,
name|disconnectWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A HawtDispatch dispatch queue is used to synchronize access to the          * connection. If an explicit queue is not configured via the          * setDispatchQueue method, then a new queue will be created for the          * connection. Setting an explicit queue might be handy if you want          * multiple connection to share the same queue for synchronization.          *           * The option is a:          *<code>org.fusesource.hawtdispatch.DispatchQueue</code> type.          *           * Group: common          */
DECL|method|dispatchQueue (Object dispatchQueue)
specifier|default
name|MQTTEndpointConsumerBuilder
name|dispatchQueue
parameter_list|(
name|Object
name|dispatchQueue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dispatchQueue"
argument_list|,
name|dispatchQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A HawtDispatch dispatch queue is used to synchronize access to the          * connection. If an explicit queue is not configured via the          * setDispatchQueue method, then a new queue will be created for the          * connection. Setting an explicit queue might be handy if you want          * multiple connection to share the same queue for synchronization.          *           * The option will be converted to a          *<code>org.fusesource.hawtdispatch.DispatchQueue</code> type.          *           * Group: common          */
DECL|method|dispatchQueue (String dispatchQueue)
specifier|default
name|MQTTEndpointConsumerBuilder
name|dispatchQueue
parameter_list|(
name|String
name|dispatchQueue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dispatchQueue"
argument_list|,
name|dispatchQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The URI of the MQTT broker to connect too - this component also          * supports SSL - e.g. ssl://127.0.0.1:8883.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|host (String host)
specifier|default
name|MQTTEndpointConsumerBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the Keep Alive timer in seconds. Defines the maximum time          * interval between messages received from a client. It enables the          * server to detect that the network connection to a client has dropped,          * without having to wait for the long TCP/IP timeout.          *           * The option is a:<code>short</code> type.          *           * Group: common          */
DECL|method|keepAlive (short keepAlive)
specifier|default
name|MQTTEndpointConsumerBuilder
name|keepAlive
parameter_list|(
name|short
name|keepAlive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the Keep Alive timer in seconds. Defines the maximum time          * interval between messages received from a client. It enables the          * server to detect that the network connection to a client has dropped,          * without having to wait for the long TCP/IP timeout.          *           * The option will be converted to a<code>short</code> type.          *           * Group: common          */
DECL|method|keepAlive (String keepAlive)
specifier|default
name|MQTTEndpointConsumerBuilder
name|keepAlive
parameter_list|(
name|String
name|keepAlive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The local InetAddress and port to use.          *           * The option is a:<code>java.net.URI</code> type.          *           * Group: common          */
DECL|method|localAddress (URI localAddress)
specifier|default
name|MQTTEndpointConsumerBuilder
name|localAddress
parameter_list|(
name|URI
name|localAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"localAddress"
argument_list|,
name|localAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The local InetAddress and port to use.          *           * The option will be converted to a<code>java.net.URI</code> type.          *           * Group: common          */
DECL|method|localAddress (String localAddress)
specifier|default
name|MQTTEndpointConsumerBuilder
name|localAddress
parameter_list|(
name|String
name|localAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"localAddress"
argument_list|,
name|localAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum bytes per second that this transport will receive          * data at. This setting throttles reads so that the rate is not          * exceeded. Defaults to 0 which disables throttling.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxReadRate (int maxReadRate)
specifier|default
name|MQTTEndpointConsumerBuilder
name|maxReadRate
parameter_list|(
name|int
name|maxReadRate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReadRate"
argument_list|,
name|maxReadRate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum bytes per second that this transport will receive          * data at. This setting throttles reads so that the rate is not          * exceeded. Defaults to 0 which disables throttling.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxReadRate (String maxReadRate)
specifier|default
name|MQTTEndpointConsumerBuilder
name|maxReadRate
parameter_list|(
name|String
name|maxReadRate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReadRate"
argument_list|,
name|maxReadRate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum bytes per second that this transport will send data          * at. This setting throttles writes so that the rate is not exceeded.          * Defaults to 0 which disables throttling.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxWriteRate (int maxWriteRate)
specifier|default
name|MQTTEndpointConsumerBuilder
name|maxWriteRate
parameter_list|(
name|int
name|maxWriteRate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxWriteRate"
argument_list|,
name|maxWriteRate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum bytes per second that this transport will send data          * at. This setting throttles writes so that the rate is not exceeded.          * Defaults to 0 which disables throttling.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxWriteRate (String maxWriteRate)
specifier|default
name|MQTTEndpointConsumerBuilder
name|maxWriteRate
parameter_list|(
name|String
name|maxWriteRate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxWriteRate"
argument_list|,
name|maxWriteRate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The property name to look for on an Exchange for an individual          * published message. If this is set (one of AtMostOnce, AtLeastOnce or          * ExactlyOnce ) - then that QoS will be set on the message sent to the          * MQTT message broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mqttQosPropertyName ( String mqttQosPropertyName)
specifier|default
name|MQTTEndpointConsumerBuilder
name|mqttQosPropertyName
parameter_list|(
name|String
name|mqttQosPropertyName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mqttQosPropertyName"
argument_list|,
name|mqttQosPropertyName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The property name to look for on an Exchange for an individual          * published message. If this is set (expects a Boolean value) - then          * the retain property will be set on the message sent to the MQTT          * message broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mqttRetainPropertyName ( String mqttRetainPropertyName)
specifier|default
name|MQTTEndpointConsumerBuilder
name|mqttRetainPropertyName
parameter_list|(
name|String
name|mqttRetainPropertyName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mqttRetainPropertyName"
argument_list|,
name|mqttRetainPropertyName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * These a properties that are looked for in an Exchange - to publish          * to.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mqttTopicPropertyName ( String mqttTopicPropertyName)
specifier|default
name|MQTTEndpointConsumerBuilder
name|mqttTopicPropertyName
parameter_list|(
name|String
name|mqttTopicPropertyName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mqttTopicPropertyName"
argument_list|,
name|mqttTopicPropertyName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default Topic to publish messages on.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|publishTopicName ( String publishTopicName)
specifier|default
name|MQTTEndpointConsumerBuilder
name|publishTopicName
parameter_list|(
name|String
name|publishTopicName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publishTopicName"
argument_list|,
name|publishTopicName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Quality of service level to use for topics.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|qualityOfService ( String qualityOfService)
specifier|default
name|MQTTEndpointConsumerBuilder
name|qualityOfService
parameter_list|(
name|String
name|qualityOfService
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"qualityOfService"
argument_list|,
name|qualityOfService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the size of the internal socket receive buffer. Defaults to          * 65536 (64k).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|receiveBufferSize ( int receiveBufferSize)
specifier|default
name|MQTTEndpointConsumerBuilder
name|receiveBufferSize
parameter_list|(
name|int
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the size of the internal socket receive buffer. Defaults to          * 65536 (64k).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|receiveBufferSize ( String receiveBufferSize)
specifier|default
name|MQTTEndpointConsumerBuilder
name|receiveBufferSize
parameter_list|(
name|String
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of reconnect attempts before an error is reported          * back to the client after a server connection had previously been          * established. Set to -1 to use unlimited attempts. Defaults to -1.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectAttemptsMax ( long reconnectAttemptsMax)
specifier|default
name|MQTTEndpointConsumerBuilder
name|reconnectAttemptsMax
parameter_list|(
name|long
name|reconnectAttemptsMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectAttemptsMax"
argument_list|,
name|reconnectAttemptsMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of reconnect attempts before an error is reported          * back to the client after a server connection had previously been          * established. Set to -1 to use unlimited attempts. Defaults to -1.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectAttemptsMax ( String reconnectAttemptsMax)
specifier|default
name|MQTTEndpointConsumerBuilder
name|reconnectAttemptsMax
parameter_list|(
name|String
name|reconnectAttemptsMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectAttemptsMax"
argument_list|,
name|reconnectAttemptsMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Exponential backoff be used between reconnect attempts. Set to 1          * to disable exponential backoff. Defaults to 2.          *           * The option is a:<code>double</code> type.          *           * Group: common          */
DECL|method|reconnectBackOffMultiplier ( double reconnectBackOffMultiplier)
specifier|default
name|MQTTEndpointConsumerBuilder
name|reconnectBackOffMultiplier
parameter_list|(
name|double
name|reconnectBackOffMultiplier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectBackOffMultiplier"
argument_list|,
name|reconnectBackOffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Exponential backoff be used between reconnect attempts. Set to 1          * to disable exponential backoff. Defaults to 2.          *           * The option will be converted to a<code>double</code> type.          *           * Group: common          */
DECL|method|reconnectBackOffMultiplier ( String reconnectBackOffMultiplier)
specifier|default
name|MQTTEndpointConsumerBuilder
name|reconnectBackOffMultiplier
parameter_list|(
name|String
name|reconnectBackOffMultiplier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectBackOffMultiplier"
argument_list|,
name|reconnectBackOffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to wait in ms before the first reconnect attempt. Defaults          * to 10.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelay (long reconnectDelay)
specifier|default
name|MQTTEndpointConsumerBuilder
name|reconnectDelay
parameter_list|(
name|long
name|reconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelay"
argument_list|,
name|reconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to wait in ms before the first reconnect attempt. Defaults          * to 10.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelay (String reconnectDelay)
specifier|default
name|MQTTEndpointConsumerBuilder
name|reconnectDelay
parameter_list|(
name|String
name|reconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelay"
argument_list|,
name|reconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum amount of time in ms to wait between reconnect attempts.          * Defaults to 30,000.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelayMax ( long reconnectDelayMax)
specifier|default
name|MQTTEndpointConsumerBuilder
name|reconnectDelayMax
parameter_list|(
name|long
name|reconnectDelayMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelayMax"
argument_list|,
name|reconnectDelayMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum amount of time in ms to wait between reconnect attempts.          * Defaults to 30,000.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelayMax ( String reconnectDelayMax)
specifier|default
name|MQTTEndpointConsumerBuilder
name|reconnectDelayMax
parameter_list|(
name|String
name|reconnectDelayMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelayMax"
argument_list|,
name|reconnectDelayMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the size of the internal socket send buffer. Defaults to 65536          * (64k).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|sendBufferSize (int sendBufferSize)
specifier|default
name|MQTTEndpointConsumerBuilder
name|sendBufferSize
parameter_list|(
name|int
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the size of the internal socket send buffer. Defaults to 65536          * (64k).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|sendBufferSize (String sendBufferSize)
specifier|default
name|MQTTEndpointConsumerBuilder
name|sendBufferSize
parameter_list|(
name|String
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum time the Component will wait for a receipt from the MQTT          * broker to acknowledge a published message before throwing an          * exception.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|sendWaitInSeconds ( int sendWaitInSeconds)
specifier|default
name|MQTTEndpointConsumerBuilder
name|sendWaitInSeconds
parameter_list|(
name|int
name|sendWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendWaitInSeconds"
argument_list|,
name|sendWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum time the Component will wait for a receipt from the MQTT          * broker to acknowledge a published message before throwing an          * exception.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|sendWaitInSeconds ( String sendWaitInSeconds)
specifier|default
name|MQTTEndpointConsumerBuilder
name|sendWaitInSeconds
parameter_list|(
name|String
name|sendWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendWaitInSeconds"
argument_list|,
name|sendWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContext configuration.          *           * The option is a:<code>javax.net.ssl.SSLContext</code> type.          *           * Group: common          */
DECL|method|sslContext (Object sslContext)
specifier|default
name|MQTTEndpointConsumerBuilder
name|sslContext
parameter_list|(
name|Object
name|sslContext
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContext"
argument_list|,
name|sslContext
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContext configuration.          *           * The option will be converted to a          *<code>javax.net.ssl.SSLContext</code> type.          *           * Group: common          */
DECL|method|sslContext (String sslContext)
specifier|default
name|MQTTEndpointConsumerBuilder
name|sslContext
parameter_list|(
name|String
name|sslContext
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContext"
argument_list|,
name|sslContext
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * These are set on the Endpoint - together with properties inherited          * from MQTT.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|subscribeTopicName ( String subscribeTopicName)
specifier|default
name|MQTTEndpointConsumerBuilder
name|subscribeTopicName
parameter_list|(
name|String
name|subscribeTopicName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"subscribeTopicName"
argument_list|,
name|subscribeTopicName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A comma-delimited list of Topics to subscribe to for messages. Note          * that each item of this list can contain MQTT wildcards ( and/or #),          * in order to subscribe to topics matching a certain pattern within a          * hierarchy. For example, is a wildcard for all topics at a level          * within the hierarchy, so if a broker has topics topics/one and          * topics/two, then topics/ can be used to subscribe to both. A caveat          * to consider here is that if the broker adds topics/three, the route          * would also begin to receive messages from that topic.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|subscribeTopicNames ( String subscribeTopicNames)
specifier|default
name|MQTTEndpointConsumerBuilder
name|subscribeTopicNames
parameter_list|(
name|String
name|subscribeTopicNames
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"subscribeTopicNames"
argument_list|,
name|subscribeTopicNames
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets traffic class or type-of-service octet in the IP header for          * packets sent from the transport. Defaults to 8 which means the          * traffic should be optimized for throughput.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|trafficClass (int trafficClass)
specifier|default
name|MQTTEndpointConsumerBuilder
name|trafficClass
parameter_list|(
name|int
name|trafficClass
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trafficClass"
argument_list|,
name|trafficClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets traffic class or type-of-service octet in the IP header for          * packets sent from the transport. Defaults to 8 which means the          * traffic should be optimized for throughput.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|trafficClass (String trafficClass)
specifier|default
name|MQTTEndpointConsumerBuilder
name|trafficClass
parameter_list|(
name|String
name|trafficClass
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trafficClass"
argument_list|,
name|trafficClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to 3.1.1 to use MQTT version 3.1.1. Otherwise defaults to the 3.1          * protocol version.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|version (String version)
specifier|default
name|MQTTEndpointConsumerBuilder
name|version
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Will message to send. Defaults to a zero length message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|willMessage (String willMessage)
specifier|default
name|MQTTEndpointConsumerBuilder
name|willMessage
parameter_list|(
name|String
name|willMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willMessage"
argument_list|,
name|willMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the quality of service to use for the Will message. Defaults to          * AT_MOST_ONCE.          *           * The option is a:<code>org.fusesource.mqtt.client.QoS</code> type.          *           * Group: common          */
DECL|method|willQos (QoS willQos)
specifier|default
name|MQTTEndpointConsumerBuilder
name|willQos
parameter_list|(
name|QoS
name|willQos
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willQos"
argument_list|,
name|willQos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the quality of service to use for the Will message. Defaults to          * AT_MOST_ONCE.          *           * The option will be converted to a          *<code>org.fusesource.mqtt.client.QoS</code> type.          *           * Group: common          */
DECL|method|willQos (String willQos)
specifier|default
name|MQTTEndpointConsumerBuilder
name|willQos
parameter_list|(
name|String
name|willQos
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willQos"
argument_list|,
name|willQos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to true if you want the Will to be published with the retain          * option.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|willRetain (boolean willRetain)
specifier|default
name|MQTTEndpointConsumerBuilder
name|willRetain
parameter_list|(
name|boolean
name|willRetain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willRetain"
argument_list|,
name|willRetain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to true if you want the Will to be published with the retain          * option.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|willRetain (String willRetain)
specifier|default
name|MQTTEndpointConsumerBuilder
name|willRetain
parameter_list|(
name|String
name|willRetain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willRetain"
argument_list|,
name|willRetain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set the server will publish the client's Will message to the          * specified topics if the client has an unexpected disconnection.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|willTopic (String willTopic)
specifier|default
name|MQTTEndpointConsumerBuilder
name|willTopic
parameter_list|(
name|String
name|willTopic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willTopic"
argument_list|,
name|willTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|MQTTEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|MQTTEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the MQTT component.      */
DECL|interface|AdvancedMQTTEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedMQTTEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|MQTTEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|MQTTEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedMQTTEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedMQTTEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedMQTTEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedMQTTEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedMQTTEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedMQTTEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedMQTTEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedMQTTEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the MQTT component.      */
DECL|interface|MQTTEndpointProducerBuilder
specifier|public
interface|interface
name|MQTTEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedMQTTEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedMQTTEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * SSL connections perform blocking operations against internal thread          * pool unless you call the setBlockingExecutor method to configure that          * executor they will use instead.          *           * The option is a:<code>java.util.concurrent.Executor</code> type.          *           * Group: common          */
DECL|method|blockingExecutor ( Executor blockingExecutor)
specifier|default
name|MQTTEndpointProducerBuilder
name|blockingExecutor
parameter_list|(
name|Executor
name|blockingExecutor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blockingExecutor"
argument_list|,
name|blockingExecutor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * SSL connections perform blocking operations against internal thread          * pool unless you call the setBlockingExecutor method to configure that          * executor they will use instead.          *           * The option will be converted to a          *<code>java.util.concurrent.Executor</code> type.          *           * Group: common          */
DECL|method|blockingExecutor ( String blockingExecutor)
specifier|default
name|MQTTEndpointProducerBuilder
name|blockingExecutor
parameter_list|(
name|String
name|blockingExecutor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blockingExecutor"
argument_list|,
name|blockingExecutor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default retain policy to be used on messages sent to the MQTT          * broker.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|byDefaultRetain ( boolean byDefaultRetain)
specifier|default
name|MQTTEndpointProducerBuilder
name|byDefaultRetain
parameter_list|(
name|boolean
name|byDefaultRetain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"byDefaultRetain"
argument_list|,
name|byDefaultRetain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default retain policy to be used on messages sent to the MQTT          * broker.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|byDefaultRetain ( String byDefaultRetain)
specifier|default
name|MQTTEndpointProducerBuilder
name|byDefaultRetain
parameter_list|(
name|String
name|byDefaultRetain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"byDefaultRetain"
argument_list|,
name|byDefaultRetain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to false if you want the MQTT server to persist topic          * subscriptions and ack positions across client sessions. Defaults to          * true.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|cleanSession (boolean cleanSession)
specifier|default
name|MQTTEndpointProducerBuilder
name|cleanSession
parameter_list|(
name|boolean
name|cleanSession
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cleanSession"
argument_list|,
name|cleanSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to false if you want the MQTT server to persist topic          * subscriptions and ack positions across client sessions. Defaults to          * true.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|cleanSession (String cleanSession)
specifier|default
name|MQTTEndpointProducerBuilder
name|cleanSession
parameter_list|(
name|String
name|cleanSession
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cleanSession"
argument_list|,
name|cleanSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use to set the client Id of the session. This is what an MQTT server          * uses to identify a session where setCleanSession(false); is being          * used. The id must be 23 characters or less. Defaults to auto          * generated id (based on your socket address, port and timestamp).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientId (String clientId)
specifier|default
name|MQTTEndpointProducerBuilder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientId"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of reconnect attempts before an error is reported          * back to the client on the first attempt by the client to connect to a          * server. Set to -1 to use unlimited attempts. Defaults to -1.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|connectAttemptsMax ( long connectAttemptsMax)
specifier|default
name|MQTTEndpointProducerBuilder
name|connectAttemptsMax
parameter_list|(
name|long
name|connectAttemptsMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectAttemptsMax"
argument_list|,
name|connectAttemptsMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of reconnect attempts before an error is reported          * back to the client on the first attempt by the client to connect to a          * server. Set to -1 to use unlimited attempts. Defaults to -1.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|connectAttemptsMax ( String connectAttemptsMax)
specifier|default
name|MQTTEndpointProducerBuilder
name|connectAttemptsMax
parameter_list|(
name|String
name|connectAttemptsMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectAttemptsMax"
argument_list|,
name|connectAttemptsMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delay in seconds the Component will wait for a connection to be          * established to the MQTT broker.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|connectWaitInSeconds ( int connectWaitInSeconds)
specifier|default
name|MQTTEndpointProducerBuilder
name|connectWaitInSeconds
parameter_list|(
name|int
name|connectWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectWaitInSeconds"
argument_list|,
name|connectWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delay in seconds the Component will wait for a connection to be          * established to the MQTT broker.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|connectWaitInSeconds ( String connectWaitInSeconds)
specifier|default
name|MQTTEndpointProducerBuilder
name|connectWaitInSeconds
parameter_list|(
name|String
name|connectWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectWaitInSeconds"
argument_list|,
name|connectWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of seconds the Component will wait for a valid disconnect          * on stop() from the MQTT broker.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|disconnectWaitInSeconds ( int disconnectWaitInSeconds)
specifier|default
name|MQTTEndpointProducerBuilder
name|disconnectWaitInSeconds
parameter_list|(
name|int
name|disconnectWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnectWaitInSeconds"
argument_list|,
name|disconnectWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of seconds the Component will wait for a valid disconnect          * on stop() from the MQTT broker.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|disconnectWaitInSeconds ( String disconnectWaitInSeconds)
specifier|default
name|MQTTEndpointProducerBuilder
name|disconnectWaitInSeconds
parameter_list|(
name|String
name|disconnectWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnectWaitInSeconds"
argument_list|,
name|disconnectWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A HawtDispatch dispatch queue is used to synchronize access to the          * connection. If an explicit queue is not configured via the          * setDispatchQueue method, then a new queue will be created for the          * connection. Setting an explicit queue might be handy if you want          * multiple connection to share the same queue for synchronization.          *           * The option is a:          *<code>org.fusesource.hawtdispatch.DispatchQueue</code> type.          *           * Group: common          */
DECL|method|dispatchQueue (Object dispatchQueue)
specifier|default
name|MQTTEndpointProducerBuilder
name|dispatchQueue
parameter_list|(
name|Object
name|dispatchQueue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dispatchQueue"
argument_list|,
name|dispatchQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A HawtDispatch dispatch queue is used to synchronize access to the          * connection. If an explicit queue is not configured via the          * setDispatchQueue method, then a new queue will be created for the          * connection. Setting an explicit queue might be handy if you want          * multiple connection to share the same queue for synchronization.          *           * The option will be converted to a          *<code>org.fusesource.hawtdispatch.DispatchQueue</code> type.          *           * Group: common          */
DECL|method|dispatchQueue (String dispatchQueue)
specifier|default
name|MQTTEndpointProducerBuilder
name|dispatchQueue
parameter_list|(
name|String
name|dispatchQueue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dispatchQueue"
argument_list|,
name|dispatchQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The URI of the MQTT broker to connect too - this component also          * supports SSL - e.g. ssl://127.0.0.1:8883.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|host (String host)
specifier|default
name|MQTTEndpointProducerBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the Keep Alive timer in seconds. Defines the maximum time          * interval between messages received from a client. It enables the          * server to detect that the network connection to a client has dropped,          * without having to wait for the long TCP/IP timeout.          *           * The option is a:<code>short</code> type.          *           * Group: common          */
DECL|method|keepAlive (short keepAlive)
specifier|default
name|MQTTEndpointProducerBuilder
name|keepAlive
parameter_list|(
name|short
name|keepAlive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the Keep Alive timer in seconds. Defines the maximum time          * interval between messages received from a client. It enables the          * server to detect that the network connection to a client has dropped,          * without having to wait for the long TCP/IP timeout.          *           * The option will be converted to a<code>short</code> type.          *           * Group: common          */
DECL|method|keepAlive (String keepAlive)
specifier|default
name|MQTTEndpointProducerBuilder
name|keepAlive
parameter_list|(
name|String
name|keepAlive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The local InetAddress and port to use.          *           * The option is a:<code>java.net.URI</code> type.          *           * Group: common          */
DECL|method|localAddress (URI localAddress)
specifier|default
name|MQTTEndpointProducerBuilder
name|localAddress
parameter_list|(
name|URI
name|localAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"localAddress"
argument_list|,
name|localAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The local InetAddress and port to use.          *           * The option will be converted to a<code>java.net.URI</code> type.          *           * Group: common          */
DECL|method|localAddress (String localAddress)
specifier|default
name|MQTTEndpointProducerBuilder
name|localAddress
parameter_list|(
name|String
name|localAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"localAddress"
argument_list|,
name|localAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum bytes per second that this transport will receive          * data at. This setting throttles reads so that the rate is not          * exceeded. Defaults to 0 which disables throttling.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxReadRate (int maxReadRate)
specifier|default
name|MQTTEndpointProducerBuilder
name|maxReadRate
parameter_list|(
name|int
name|maxReadRate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReadRate"
argument_list|,
name|maxReadRate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum bytes per second that this transport will receive          * data at. This setting throttles reads so that the rate is not          * exceeded. Defaults to 0 which disables throttling.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxReadRate (String maxReadRate)
specifier|default
name|MQTTEndpointProducerBuilder
name|maxReadRate
parameter_list|(
name|String
name|maxReadRate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReadRate"
argument_list|,
name|maxReadRate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum bytes per second that this transport will send data          * at. This setting throttles writes so that the rate is not exceeded.          * Defaults to 0 which disables throttling.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxWriteRate (int maxWriteRate)
specifier|default
name|MQTTEndpointProducerBuilder
name|maxWriteRate
parameter_list|(
name|int
name|maxWriteRate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxWriteRate"
argument_list|,
name|maxWriteRate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum bytes per second that this transport will send data          * at. This setting throttles writes so that the rate is not exceeded.          * Defaults to 0 which disables throttling.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxWriteRate (String maxWriteRate)
specifier|default
name|MQTTEndpointProducerBuilder
name|maxWriteRate
parameter_list|(
name|String
name|maxWriteRate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxWriteRate"
argument_list|,
name|maxWriteRate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The property name to look for on an Exchange for an individual          * published message. If this is set (one of AtMostOnce, AtLeastOnce or          * ExactlyOnce ) - then that QoS will be set on the message sent to the          * MQTT message broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mqttQosPropertyName ( String mqttQosPropertyName)
specifier|default
name|MQTTEndpointProducerBuilder
name|mqttQosPropertyName
parameter_list|(
name|String
name|mqttQosPropertyName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mqttQosPropertyName"
argument_list|,
name|mqttQosPropertyName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The property name to look for on an Exchange for an individual          * published message. If this is set (expects a Boolean value) - then          * the retain property will be set on the message sent to the MQTT          * message broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mqttRetainPropertyName ( String mqttRetainPropertyName)
specifier|default
name|MQTTEndpointProducerBuilder
name|mqttRetainPropertyName
parameter_list|(
name|String
name|mqttRetainPropertyName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mqttRetainPropertyName"
argument_list|,
name|mqttRetainPropertyName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * These a properties that are looked for in an Exchange - to publish          * to.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mqttTopicPropertyName ( String mqttTopicPropertyName)
specifier|default
name|MQTTEndpointProducerBuilder
name|mqttTopicPropertyName
parameter_list|(
name|String
name|mqttTopicPropertyName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mqttTopicPropertyName"
argument_list|,
name|mqttTopicPropertyName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default Topic to publish messages on.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|publishTopicName ( String publishTopicName)
specifier|default
name|MQTTEndpointProducerBuilder
name|publishTopicName
parameter_list|(
name|String
name|publishTopicName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publishTopicName"
argument_list|,
name|publishTopicName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Quality of service level to use for topics.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|qualityOfService ( String qualityOfService)
specifier|default
name|MQTTEndpointProducerBuilder
name|qualityOfService
parameter_list|(
name|String
name|qualityOfService
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"qualityOfService"
argument_list|,
name|qualityOfService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the size of the internal socket receive buffer. Defaults to          * 65536 (64k).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|receiveBufferSize ( int receiveBufferSize)
specifier|default
name|MQTTEndpointProducerBuilder
name|receiveBufferSize
parameter_list|(
name|int
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the size of the internal socket receive buffer. Defaults to          * 65536 (64k).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|receiveBufferSize ( String receiveBufferSize)
specifier|default
name|MQTTEndpointProducerBuilder
name|receiveBufferSize
parameter_list|(
name|String
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of reconnect attempts before an error is reported          * back to the client after a server connection had previously been          * established. Set to -1 to use unlimited attempts. Defaults to -1.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectAttemptsMax ( long reconnectAttemptsMax)
specifier|default
name|MQTTEndpointProducerBuilder
name|reconnectAttemptsMax
parameter_list|(
name|long
name|reconnectAttemptsMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectAttemptsMax"
argument_list|,
name|reconnectAttemptsMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of reconnect attempts before an error is reported          * back to the client after a server connection had previously been          * established. Set to -1 to use unlimited attempts. Defaults to -1.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectAttemptsMax ( String reconnectAttemptsMax)
specifier|default
name|MQTTEndpointProducerBuilder
name|reconnectAttemptsMax
parameter_list|(
name|String
name|reconnectAttemptsMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectAttemptsMax"
argument_list|,
name|reconnectAttemptsMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Exponential backoff be used between reconnect attempts. Set to 1          * to disable exponential backoff. Defaults to 2.          *           * The option is a:<code>double</code> type.          *           * Group: common          */
DECL|method|reconnectBackOffMultiplier ( double reconnectBackOffMultiplier)
specifier|default
name|MQTTEndpointProducerBuilder
name|reconnectBackOffMultiplier
parameter_list|(
name|double
name|reconnectBackOffMultiplier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectBackOffMultiplier"
argument_list|,
name|reconnectBackOffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Exponential backoff be used between reconnect attempts. Set to 1          * to disable exponential backoff. Defaults to 2.          *           * The option will be converted to a<code>double</code> type.          *           * Group: common          */
DECL|method|reconnectBackOffMultiplier ( String reconnectBackOffMultiplier)
specifier|default
name|MQTTEndpointProducerBuilder
name|reconnectBackOffMultiplier
parameter_list|(
name|String
name|reconnectBackOffMultiplier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectBackOffMultiplier"
argument_list|,
name|reconnectBackOffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to wait in ms before the first reconnect attempt. Defaults          * to 10.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelay (long reconnectDelay)
specifier|default
name|MQTTEndpointProducerBuilder
name|reconnectDelay
parameter_list|(
name|long
name|reconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelay"
argument_list|,
name|reconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to wait in ms before the first reconnect attempt. Defaults          * to 10.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelay (String reconnectDelay)
specifier|default
name|MQTTEndpointProducerBuilder
name|reconnectDelay
parameter_list|(
name|String
name|reconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelay"
argument_list|,
name|reconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum amount of time in ms to wait between reconnect attempts.          * Defaults to 30,000.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelayMax ( long reconnectDelayMax)
specifier|default
name|MQTTEndpointProducerBuilder
name|reconnectDelayMax
parameter_list|(
name|long
name|reconnectDelayMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelayMax"
argument_list|,
name|reconnectDelayMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum amount of time in ms to wait between reconnect attempts.          * Defaults to 30,000.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelayMax ( String reconnectDelayMax)
specifier|default
name|MQTTEndpointProducerBuilder
name|reconnectDelayMax
parameter_list|(
name|String
name|reconnectDelayMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelayMax"
argument_list|,
name|reconnectDelayMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the size of the internal socket send buffer. Defaults to 65536          * (64k).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|sendBufferSize (int sendBufferSize)
specifier|default
name|MQTTEndpointProducerBuilder
name|sendBufferSize
parameter_list|(
name|int
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the size of the internal socket send buffer. Defaults to 65536          * (64k).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|sendBufferSize (String sendBufferSize)
specifier|default
name|MQTTEndpointProducerBuilder
name|sendBufferSize
parameter_list|(
name|String
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum time the Component will wait for a receipt from the MQTT          * broker to acknowledge a published message before throwing an          * exception.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|sendWaitInSeconds ( int sendWaitInSeconds)
specifier|default
name|MQTTEndpointProducerBuilder
name|sendWaitInSeconds
parameter_list|(
name|int
name|sendWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendWaitInSeconds"
argument_list|,
name|sendWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum time the Component will wait for a receipt from the MQTT          * broker to acknowledge a published message before throwing an          * exception.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|sendWaitInSeconds ( String sendWaitInSeconds)
specifier|default
name|MQTTEndpointProducerBuilder
name|sendWaitInSeconds
parameter_list|(
name|String
name|sendWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendWaitInSeconds"
argument_list|,
name|sendWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContext configuration.          *           * The option is a:<code>javax.net.ssl.SSLContext</code> type.          *           * Group: common          */
DECL|method|sslContext (Object sslContext)
specifier|default
name|MQTTEndpointProducerBuilder
name|sslContext
parameter_list|(
name|Object
name|sslContext
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContext"
argument_list|,
name|sslContext
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContext configuration.          *           * The option will be converted to a          *<code>javax.net.ssl.SSLContext</code> type.          *           * Group: common          */
DECL|method|sslContext (String sslContext)
specifier|default
name|MQTTEndpointProducerBuilder
name|sslContext
parameter_list|(
name|String
name|sslContext
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContext"
argument_list|,
name|sslContext
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * These are set on the Endpoint - together with properties inherited          * from MQTT.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|subscribeTopicName ( String subscribeTopicName)
specifier|default
name|MQTTEndpointProducerBuilder
name|subscribeTopicName
parameter_list|(
name|String
name|subscribeTopicName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"subscribeTopicName"
argument_list|,
name|subscribeTopicName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A comma-delimited list of Topics to subscribe to for messages. Note          * that each item of this list can contain MQTT wildcards ( and/or #),          * in order to subscribe to topics matching a certain pattern within a          * hierarchy. For example, is a wildcard for all topics at a level          * within the hierarchy, so if a broker has topics topics/one and          * topics/two, then topics/ can be used to subscribe to both. A caveat          * to consider here is that if the broker adds topics/three, the route          * would also begin to receive messages from that topic.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|subscribeTopicNames ( String subscribeTopicNames)
specifier|default
name|MQTTEndpointProducerBuilder
name|subscribeTopicNames
parameter_list|(
name|String
name|subscribeTopicNames
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"subscribeTopicNames"
argument_list|,
name|subscribeTopicNames
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets traffic class or type-of-service octet in the IP header for          * packets sent from the transport. Defaults to 8 which means the          * traffic should be optimized for throughput.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|trafficClass (int trafficClass)
specifier|default
name|MQTTEndpointProducerBuilder
name|trafficClass
parameter_list|(
name|int
name|trafficClass
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trafficClass"
argument_list|,
name|trafficClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets traffic class or type-of-service octet in the IP header for          * packets sent from the transport. Defaults to 8 which means the          * traffic should be optimized for throughput.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|trafficClass (String trafficClass)
specifier|default
name|MQTTEndpointProducerBuilder
name|trafficClass
parameter_list|(
name|String
name|trafficClass
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trafficClass"
argument_list|,
name|trafficClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to 3.1.1 to use MQTT version 3.1.1. Otherwise defaults to the 3.1          * protocol version.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|version (String version)
specifier|default
name|MQTTEndpointProducerBuilder
name|version
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Will message to send. Defaults to a zero length message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|willMessage (String willMessage)
specifier|default
name|MQTTEndpointProducerBuilder
name|willMessage
parameter_list|(
name|String
name|willMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willMessage"
argument_list|,
name|willMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the quality of service to use for the Will message. Defaults to          * AT_MOST_ONCE.          *           * The option is a:<code>org.fusesource.mqtt.client.QoS</code> type.          *           * Group: common          */
DECL|method|willQos (QoS willQos)
specifier|default
name|MQTTEndpointProducerBuilder
name|willQos
parameter_list|(
name|QoS
name|willQos
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willQos"
argument_list|,
name|willQos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the quality of service to use for the Will message. Defaults to          * AT_MOST_ONCE.          *           * The option will be converted to a          *<code>org.fusesource.mqtt.client.QoS</code> type.          *           * Group: common          */
DECL|method|willQos (String willQos)
specifier|default
name|MQTTEndpointProducerBuilder
name|willQos
parameter_list|(
name|String
name|willQos
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willQos"
argument_list|,
name|willQos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to true if you want the Will to be published with the retain          * option.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|willRetain (boolean willRetain)
specifier|default
name|MQTTEndpointProducerBuilder
name|willRetain
parameter_list|(
name|boolean
name|willRetain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willRetain"
argument_list|,
name|willRetain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to true if you want the Will to be published with the retain          * option.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|willRetain (String willRetain)
specifier|default
name|MQTTEndpointProducerBuilder
name|willRetain
parameter_list|(
name|String
name|willRetain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willRetain"
argument_list|,
name|willRetain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set the server will publish the client's Will message to the          * specified topics if the client has an unexpected disconnection.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|willTopic (String willTopic)
specifier|default
name|MQTTEndpointProducerBuilder
name|willTopic
parameter_list|(
name|String
name|willTopic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willTopic"
argument_list|,
name|willTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|MQTTEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|MQTTEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the MQTT component.      */
DECL|interface|AdvancedMQTTEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedMQTTEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|MQTTEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|MQTTEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sessions can be lazily created to avoid exceptions, if the remote          * server is not up and running when the Camel producer is started.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer (advanced)          */
DECL|method|lazySessionCreation ( boolean lazySessionCreation)
specifier|default
name|AdvancedMQTTEndpointProducerBuilder
name|lazySessionCreation
parameter_list|(
name|boolean
name|lazySessionCreation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazySessionCreation"
argument_list|,
name|lazySessionCreation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sessions can be lazily created to avoid exceptions, if the remote          * server is not up and running when the Camel producer is started.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer (advanced)          */
DECL|method|lazySessionCreation ( String lazySessionCreation)
specifier|default
name|AdvancedMQTTEndpointProducerBuilder
name|lazySessionCreation
parameter_list|(
name|String
name|lazySessionCreation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazySessionCreation"
argument_list|,
name|lazySessionCreation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedMQTTEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedMQTTEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedMQTTEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedMQTTEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the MQTT component.      */
DECL|interface|MQTTEndpointBuilder
specifier|public
interface|interface
name|MQTTEndpointBuilder
extends|extends
name|MQTTEndpointConsumerBuilder
extends|,
name|MQTTEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedMQTTEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedMQTTEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * SSL connections perform blocking operations against internal thread          * pool unless you call the setBlockingExecutor method to configure that          * executor they will use instead.          *           * The option is a:<code>java.util.concurrent.Executor</code> type.          *           * Group: common          */
DECL|method|blockingExecutor (Executor blockingExecutor)
specifier|default
name|MQTTEndpointBuilder
name|blockingExecutor
parameter_list|(
name|Executor
name|blockingExecutor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blockingExecutor"
argument_list|,
name|blockingExecutor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * SSL connections perform blocking operations against internal thread          * pool unless you call the setBlockingExecutor method to configure that          * executor they will use instead.          *           * The option will be converted to a          *<code>java.util.concurrent.Executor</code> type.          *           * Group: common          */
DECL|method|blockingExecutor (String blockingExecutor)
specifier|default
name|MQTTEndpointBuilder
name|blockingExecutor
parameter_list|(
name|String
name|blockingExecutor
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"blockingExecutor"
argument_list|,
name|blockingExecutor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default retain policy to be used on messages sent to the MQTT          * broker.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|byDefaultRetain (boolean byDefaultRetain)
specifier|default
name|MQTTEndpointBuilder
name|byDefaultRetain
parameter_list|(
name|boolean
name|byDefaultRetain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"byDefaultRetain"
argument_list|,
name|byDefaultRetain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default retain policy to be used on messages sent to the MQTT          * broker.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|byDefaultRetain (String byDefaultRetain)
specifier|default
name|MQTTEndpointBuilder
name|byDefaultRetain
parameter_list|(
name|String
name|byDefaultRetain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"byDefaultRetain"
argument_list|,
name|byDefaultRetain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to false if you want the MQTT server to persist topic          * subscriptions and ack positions across client sessions. Defaults to          * true.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|cleanSession (boolean cleanSession)
specifier|default
name|MQTTEndpointBuilder
name|cleanSession
parameter_list|(
name|boolean
name|cleanSession
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cleanSession"
argument_list|,
name|cleanSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to false if you want the MQTT server to persist topic          * subscriptions and ack positions across client sessions. Defaults to          * true.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|cleanSession (String cleanSession)
specifier|default
name|MQTTEndpointBuilder
name|cleanSession
parameter_list|(
name|String
name|cleanSession
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cleanSession"
argument_list|,
name|cleanSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use to set the client Id of the session. This is what an MQTT server          * uses to identify a session where setCleanSession(false); is being          * used. The id must be 23 characters or less. Defaults to auto          * generated id (based on your socket address, port and timestamp).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientId (String clientId)
specifier|default
name|MQTTEndpointBuilder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientId"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of reconnect attempts before an error is reported          * back to the client on the first attempt by the client to connect to a          * server. Set to -1 to use unlimited attempts. Defaults to -1.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|connectAttemptsMax (long connectAttemptsMax)
specifier|default
name|MQTTEndpointBuilder
name|connectAttemptsMax
parameter_list|(
name|long
name|connectAttemptsMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectAttemptsMax"
argument_list|,
name|connectAttemptsMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of reconnect attempts before an error is reported          * back to the client on the first attempt by the client to connect to a          * server. Set to -1 to use unlimited attempts. Defaults to -1.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|connectAttemptsMax (String connectAttemptsMax)
specifier|default
name|MQTTEndpointBuilder
name|connectAttemptsMax
parameter_list|(
name|String
name|connectAttemptsMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectAttemptsMax"
argument_list|,
name|connectAttemptsMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delay in seconds the Component will wait for a connection to be          * established to the MQTT broker.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|connectWaitInSeconds ( int connectWaitInSeconds)
specifier|default
name|MQTTEndpointBuilder
name|connectWaitInSeconds
parameter_list|(
name|int
name|connectWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectWaitInSeconds"
argument_list|,
name|connectWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delay in seconds the Component will wait for a connection to be          * established to the MQTT broker.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|connectWaitInSeconds ( String connectWaitInSeconds)
specifier|default
name|MQTTEndpointBuilder
name|connectWaitInSeconds
parameter_list|(
name|String
name|connectWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectWaitInSeconds"
argument_list|,
name|connectWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of seconds the Component will wait for a valid disconnect          * on stop() from the MQTT broker.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|disconnectWaitInSeconds ( int disconnectWaitInSeconds)
specifier|default
name|MQTTEndpointBuilder
name|disconnectWaitInSeconds
parameter_list|(
name|int
name|disconnectWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnectWaitInSeconds"
argument_list|,
name|disconnectWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of seconds the Component will wait for a valid disconnect          * on stop() from the MQTT broker.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|disconnectWaitInSeconds ( String disconnectWaitInSeconds)
specifier|default
name|MQTTEndpointBuilder
name|disconnectWaitInSeconds
parameter_list|(
name|String
name|disconnectWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnectWaitInSeconds"
argument_list|,
name|disconnectWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A HawtDispatch dispatch queue is used to synchronize access to the          * connection. If an explicit queue is not configured via the          * setDispatchQueue method, then a new queue will be created for the          * connection. Setting an explicit queue might be handy if you want          * multiple connection to share the same queue for synchronization.          *           * The option is a:          *<code>org.fusesource.hawtdispatch.DispatchQueue</code> type.          *           * Group: common          */
DECL|method|dispatchQueue (Object dispatchQueue)
specifier|default
name|MQTTEndpointBuilder
name|dispatchQueue
parameter_list|(
name|Object
name|dispatchQueue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dispatchQueue"
argument_list|,
name|dispatchQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A HawtDispatch dispatch queue is used to synchronize access to the          * connection. If an explicit queue is not configured via the          * setDispatchQueue method, then a new queue will be created for the          * connection. Setting an explicit queue might be handy if you want          * multiple connection to share the same queue for synchronization.          *           * The option will be converted to a          *<code>org.fusesource.hawtdispatch.DispatchQueue</code> type.          *           * Group: common          */
DECL|method|dispatchQueue (String dispatchQueue)
specifier|default
name|MQTTEndpointBuilder
name|dispatchQueue
parameter_list|(
name|String
name|dispatchQueue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dispatchQueue"
argument_list|,
name|dispatchQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The URI of the MQTT broker to connect too - this component also          * supports SSL - e.g. ssl://127.0.0.1:8883.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|host (String host)
specifier|default
name|MQTTEndpointBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the Keep Alive timer in seconds. Defines the maximum time          * interval between messages received from a client. It enables the          * server to detect that the network connection to a client has dropped,          * without having to wait for the long TCP/IP timeout.          *           * The option is a:<code>short</code> type.          *           * Group: common          */
DECL|method|keepAlive (short keepAlive)
specifier|default
name|MQTTEndpointBuilder
name|keepAlive
parameter_list|(
name|short
name|keepAlive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the Keep Alive timer in seconds. Defines the maximum time          * interval between messages received from a client. It enables the          * server to detect that the network connection to a client has dropped,          * without having to wait for the long TCP/IP timeout.          *           * The option will be converted to a<code>short</code> type.          *           * Group: common          */
DECL|method|keepAlive (String keepAlive)
specifier|default
name|MQTTEndpointBuilder
name|keepAlive
parameter_list|(
name|String
name|keepAlive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The local InetAddress and port to use.          *           * The option is a:<code>java.net.URI</code> type.          *           * Group: common          */
DECL|method|localAddress (URI localAddress)
specifier|default
name|MQTTEndpointBuilder
name|localAddress
parameter_list|(
name|URI
name|localAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"localAddress"
argument_list|,
name|localAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The local InetAddress and port to use.          *           * The option will be converted to a<code>java.net.URI</code> type.          *           * Group: common          */
DECL|method|localAddress (String localAddress)
specifier|default
name|MQTTEndpointBuilder
name|localAddress
parameter_list|(
name|String
name|localAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"localAddress"
argument_list|,
name|localAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum bytes per second that this transport will receive          * data at. This setting throttles reads so that the rate is not          * exceeded. Defaults to 0 which disables throttling.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxReadRate (int maxReadRate)
specifier|default
name|MQTTEndpointBuilder
name|maxReadRate
parameter_list|(
name|int
name|maxReadRate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReadRate"
argument_list|,
name|maxReadRate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum bytes per second that this transport will receive          * data at. This setting throttles reads so that the rate is not          * exceeded. Defaults to 0 which disables throttling.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxReadRate (String maxReadRate)
specifier|default
name|MQTTEndpointBuilder
name|maxReadRate
parameter_list|(
name|String
name|maxReadRate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReadRate"
argument_list|,
name|maxReadRate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum bytes per second that this transport will send data          * at. This setting throttles writes so that the rate is not exceeded.          * Defaults to 0 which disables throttling.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxWriteRate (int maxWriteRate)
specifier|default
name|MQTTEndpointBuilder
name|maxWriteRate
parameter_list|(
name|int
name|maxWriteRate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxWriteRate"
argument_list|,
name|maxWriteRate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum bytes per second that this transport will send data          * at. This setting throttles writes so that the rate is not exceeded.          * Defaults to 0 which disables throttling.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxWriteRate (String maxWriteRate)
specifier|default
name|MQTTEndpointBuilder
name|maxWriteRate
parameter_list|(
name|String
name|maxWriteRate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxWriteRate"
argument_list|,
name|maxWriteRate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The property name to look for on an Exchange for an individual          * published message. If this is set (one of AtMostOnce, AtLeastOnce or          * ExactlyOnce ) - then that QoS will be set on the message sent to the          * MQTT message broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mqttQosPropertyName ( String mqttQosPropertyName)
specifier|default
name|MQTTEndpointBuilder
name|mqttQosPropertyName
parameter_list|(
name|String
name|mqttQosPropertyName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mqttQosPropertyName"
argument_list|,
name|mqttQosPropertyName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The property name to look for on an Exchange for an individual          * published message. If this is set (expects a Boolean value) - then          * the retain property will be set on the message sent to the MQTT          * message broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mqttRetainPropertyName ( String mqttRetainPropertyName)
specifier|default
name|MQTTEndpointBuilder
name|mqttRetainPropertyName
parameter_list|(
name|String
name|mqttRetainPropertyName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mqttRetainPropertyName"
argument_list|,
name|mqttRetainPropertyName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * These a properties that are looked for in an Exchange - to publish          * to.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mqttTopicPropertyName ( String mqttTopicPropertyName)
specifier|default
name|MQTTEndpointBuilder
name|mqttTopicPropertyName
parameter_list|(
name|String
name|mqttTopicPropertyName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mqttTopicPropertyName"
argument_list|,
name|mqttTopicPropertyName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default Topic to publish messages on.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|publishTopicName (String publishTopicName)
specifier|default
name|MQTTEndpointBuilder
name|publishTopicName
parameter_list|(
name|String
name|publishTopicName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publishTopicName"
argument_list|,
name|publishTopicName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Quality of service level to use for topics.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|qualityOfService (String qualityOfService)
specifier|default
name|MQTTEndpointBuilder
name|qualityOfService
parameter_list|(
name|String
name|qualityOfService
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"qualityOfService"
argument_list|,
name|qualityOfService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the size of the internal socket receive buffer. Defaults to          * 65536 (64k).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|receiveBufferSize (int receiveBufferSize)
specifier|default
name|MQTTEndpointBuilder
name|receiveBufferSize
parameter_list|(
name|int
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the size of the internal socket receive buffer. Defaults to          * 65536 (64k).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|receiveBufferSize (String receiveBufferSize)
specifier|default
name|MQTTEndpointBuilder
name|receiveBufferSize
parameter_list|(
name|String
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of reconnect attempts before an error is reported          * back to the client after a server connection had previously been          * established. Set to -1 to use unlimited attempts. Defaults to -1.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectAttemptsMax ( long reconnectAttemptsMax)
specifier|default
name|MQTTEndpointBuilder
name|reconnectAttemptsMax
parameter_list|(
name|long
name|reconnectAttemptsMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectAttemptsMax"
argument_list|,
name|reconnectAttemptsMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of reconnect attempts before an error is reported          * back to the client after a server connection had previously been          * established. Set to -1 to use unlimited attempts. Defaults to -1.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectAttemptsMax ( String reconnectAttemptsMax)
specifier|default
name|MQTTEndpointBuilder
name|reconnectAttemptsMax
parameter_list|(
name|String
name|reconnectAttemptsMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectAttemptsMax"
argument_list|,
name|reconnectAttemptsMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Exponential backoff be used between reconnect attempts. Set to 1          * to disable exponential backoff. Defaults to 2.          *           * The option is a:<code>double</code> type.          *           * Group: common          */
DECL|method|reconnectBackOffMultiplier ( double reconnectBackOffMultiplier)
specifier|default
name|MQTTEndpointBuilder
name|reconnectBackOffMultiplier
parameter_list|(
name|double
name|reconnectBackOffMultiplier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectBackOffMultiplier"
argument_list|,
name|reconnectBackOffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Exponential backoff be used between reconnect attempts. Set to 1          * to disable exponential backoff. Defaults to 2.          *           * The option will be converted to a<code>double</code> type.          *           * Group: common          */
DECL|method|reconnectBackOffMultiplier ( String reconnectBackOffMultiplier)
specifier|default
name|MQTTEndpointBuilder
name|reconnectBackOffMultiplier
parameter_list|(
name|String
name|reconnectBackOffMultiplier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectBackOffMultiplier"
argument_list|,
name|reconnectBackOffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to wait in ms before the first reconnect attempt. Defaults          * to 10.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelay (long reconnectDelay)
specifier|default
name|MQTTEndpointBuilder
name|reconnectDelay
parameter_list|(
name|long
name|reconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelay"
argument_list|,
name|reconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How long to wait in ms before the first reconnect attempt. Defaults          * to 10.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelay (String reconnectDelay)
specifier|default
name|MQTTEndpointBuilder
name|reconnectDelay
parameter_list|(
name|String
name|reconnectDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelay"
argument_list|,
name|reconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum amount of time in ms to wait between reconnect attempts.          * Defaults to 30,000.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelayMax (long reconnectDelayMax)
specifier|default
name|MQTTEndpointBuilder
name|reconnectDelayMax
parameter_list|(
name|long
name|reconnectDelayMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelayMax"
argument_list|,
name|reconnectDelayMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum amount of time in ms to wait between reconnect attempts.          * Defaults to 30,000.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|reconnectDelayMax (String reconnectDelayMax)
specifier|default
name|MQTTEndpointBuilder
name|reconnectDelayMax
parameter_list|(
name|String
name|reconnectDelayMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectDelayMax"
argument_list|,
name|reconnectDelayMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the size of the internal socket send buffer. Defaults to 65536          * (64k).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|sendBufferSize (int sendBufferSize)
specifier|default
name|MQTTEndpointBuilder
name|sendBufferSize
parameter_list|(
name|int
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the size of the internal socket send buffer. Defaults to 65536          * (64k).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|sendBufferSize (String sendBufferSize)
specifier|default
name|MQTTEndpointBuilder
name|sendBufferSize
parameter_list|(
name|String
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum time the Component will wait for a receipt from the MQTT          * broker to acknowledge a published message before throwing an          * exception.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|sendWaitInSeconds (int sendWaitInSeconds)
specifier|default
name|MQTTEndpointBuilder
name|sendWaitInSeconds
parameter_list|(
name|int
name|sendWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendWaitInSeconds"
argument_list|,
name|sendWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum time the Component will wait for a receipt from the MQTT          * broker to acknowledge a published message before throwing an          * exception.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|sendWaitInSeconds (String sendWaitInSeconds)
specifier|default
name|MQTTEndpointBuilder
name|sendWaitInSeconds
parameter_list|(
name|String
name|sendWaitInSeconds
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendWaitInSeconds"
argument_list|,
name|sendWaitInSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContext configuration.          *           * The option is a:<code>javax.net.ssl.SSLContext</code> type.          *           * Group: common          */
DECL|method|sslContext (Object sslContext)
specifier|default
name|MQTTEndpointBuilder
name|sslContext
parameter_list|(
name|Object
name|sslContext
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContext"
argument_list|,
name|sslContext
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContext configuration.          *           * The option will be converted to a          *<code>javax.net.ssl.SSLContext</code> type.          *           * Group: common          */
DECL|method|sslContext (String sslContext)
specifier|default
name|MQTTEndpointBuilder
name|sslContext
parameter_list|(
name|String
name|sslContext
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContext"
argument_list|,
name|sslContext
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * These are set on the Endpoint - together with properties inherited          * from MQTT.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|subscribeTopicName (String subscribeTopicName)
specifier|default
name|MQTTEndpointBuilder
name|subscribeTopicName
parameter_list|(
name|String
name|subscribeTopicName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"subscribeTopicName"
argument_list|,
name|subscribeTopicName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A comma-delimited list of Topics to subscribe to for messages. Note          * that each item of this list can contain MQTT wildcards ( and/or #),          * in order to subscribe to topics matching a certain pattern within a          * hierarchy. For example, is a wildcard for all topics at a level          * within the hierarchy, so if a broker has topics topics/one and          * topics/two, then topics/ can be used to subscribe to both. A caveat          * to consider here is that if the broker adds topics/three, the route          * would also begin to receive messages from that topic.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|subscribeTopicNames ( String subscribeTopicNames)
specifier|default
name|MQTTEndpointBuilder
name|subscribeTopicNames
parameter_list|(
name|String
name|subscribeTopicNames
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"subscribeTopicNames"
argument_list|,
name|subscribeTopicNames
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets traffic class or type-of-service octet in the IP header for          * packets sent from the transport. Defaults to 8 which means the          * traffic should be optimized for throughput.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|trafficClass (int trafficClass)
specifier|default
name|MQTTEndpointBuilder
name|trafficClass
parameter_list|(
name|int
name|trafficClass
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trafficClass"
argument_list|,
name|trafficClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets traffic class or type-of-service octet in the IP header for          * packets sent from the transport. Defaults to 8 which means the          * traffic should be optimized for throughput.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|trafficClass (String trafficClass)
specifier|default
name|MQTTEndpointBuilder
name|trafficClass
parameter_list|(
name|String
name|trafficClass
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trafficClass"
argument_list|,
name|trafficClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to 3.1.1 to use MQTT version 3.1.1. Otherwise defaults to the 3.1          * protocol version.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|version (String version)
specifier|default
name|MQTTEndpointBuilder
name|version
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Will message to send. Defaults to a zero length message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|willMessage (String willMessage)
specifier|default
name|MQTTEndpointBuilder
name|willMessage
parameter_list|(
name|String
name|willMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willMessage"
argument_list|,
name|willMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the quality of service to use for the Will message. Defaults to          * AT_MOST_ONCE.          *           * The option is a:<code>org.fusesource.mqtt.client.QoS</code> type.          *           * Group: common          */
DECL|method|willQos (QoS willQos)
specifier|default
name|MQTTEndpointBuilder
name|willQos
parameter_list|(
name|QoS
name|willQos
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willQos"
argument_list|,
name|willQos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the quality of service to use for the Will message. Defaults to          * AT_MOST_ONCE.          *           * The option will be converted to a          *<code>org.fusesource.mqtt.client.QoS</code> type.          *           * Group: common          */
DECL|method|willQos (String willQos)
specifier|default
name|MQTTEndpointBuilder
name|willQos
parameter_list|(
name|String
name|willQos
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willQos"
argument_list|,
name|willQos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to true if you want the Will to be published with the retain          * option.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|willRetain (boolean willRetain)
specifier|default
name|MQTTEndpointBuilder
name|willRetain
parameter_list|(
name|boolean
name|willRetain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willRetain"
argument_list|,
name|willRetain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set to true if you want the Will to be published with the retain          * option.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|willRetain (String willRetain)
specifier|default
name|MQTTEndpointBuilder
name|willRetain
parameter_list|(
name|String
name|willRetain
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willRetain"
argument_list|,
name|willRetain
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set the server will publish the client's Will message to the          * specified topics if the client has an unexpected disconnection.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|willTopic (String willTopic)
specifier|default
name|MQTTEndpointBuilder
name|willTopic
parameter_list|(
name|String
name|willTopic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"willTopic"
argument_list|,
name|willTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the MQTT component.      */
DECL|interface|AdvancedMQTTEndpointBuilder
specifier|public
interface|interface
name|AdvancedMQTTEndpointBuilder
extends|extends
name|AdvancedMQTTEndpointConsumerBuilder
extends|,
name|AdvancedMQTTEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|MQTTEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|MQTTEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedMQTTEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedMQTTEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedMQTTEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedMQTTEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for<code>org.fusesource.mqtt.client.QoS</code> enum.      */
DECL|enum|QoS
enum|enum
name|QoS
block|{
DECL|enumConstant|AT_MOST_ONCE
name|AT_MOST_ONCE
block|,
DECL|enumConstant|AT_LEAST_ONCE
name|AT_LEAST_ONCE
block|,
DECL|enumConstant|EXACTLY_ONCE
name|EXACTLY_ONCE
block|;     }
comment|/**      * MQTT (camel-mqtt)      * Component for communicating with MQTT M2M message brokers using      * FuseSource MQTT Client.      *       * Category: messaging,iot      * Available as of version: 2.10      * Maven coordinates: org.apache.camel:camel-mqtt      *       * Syntax:<code>mqtt:name</code>      *       * Path parameter: name (required)      * A logical name to use which is not the topic name.      */
DECL|method|mQTT (String path)
specifier|default
name|MQTTEndpointBuilder
name|mQTT
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|MQTTEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|MQTTEndpointBuilder
implements|,
name|AdvancedMQTTEndpointBuilder
block|{
specifier|public
name|MQTTEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"mqtt"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|MQTTEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

