begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PollingConsumerPollStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ScheduledPollConsumerScheduler
import|;
end_import

begin_comment
comment|/**  * The jt400 component allows you to exchanges messages with an AS/400 system  * using data queues or program call.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|Jt400EndpointBuilderFactory
specifier|public
interface|interface
name|Jt400EndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the JT400 component.      */
DECL|interface|Jt400EndpointConsumerBuilder
specifier|public
interface|interface
name|Jt400EndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJt400EndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJt400EndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets the CCSID to use for the connection with the AS/400 system.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|ccsid (int ccsid)
specifier|default
name|Jt400EndpointConsumerBuilder
name|ccsid
parameter_list|(
name|int
name|ccsid
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ccsid"
argument_list|,
name|ccsid
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the CCSID to use for the connection with the AS/400 system.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|ccsid (String ccsid)
specifier|default
name|Jt400EndpointConsumerBuilder
name|ccsid
parameter_list|(
name|String
name|ccsid
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ccsid"
argument_list|,
name|ccsid
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the data format for sending messages.          *           * The option is a:          *<code>org.apache.camel.component.jt400.Jt400Configuration$Format</code> type.          *           * Group: common          */
DECL|method|format (Format format)
specifier|default
name|Jt400EndpointConsumerBuilder
name|format
parameter_list|(
name|Format
name|format
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"format"
argument_list|,
name|format
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the data format for sending messages.          *           * The option will be converted to a          *<code>org.apache.camel.component.jt400.Jt400Configuration$Format</code> type.          *           * Group: common          */
DECL|method|format (String format)
specifier|default
name|Jt400EndpointConsumerBuilder
name|format
parameter_list|(
name|String
name|format
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"format"
argument_list|,
name|format
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether AS/400 prompting is enabled in the environment running          * Camel.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|guiAvailable (boolean guiAvailable)
specifier|default
name|Jt400EndpointConsumerBuilder
name|guiAvailable
parameter_list|(
name|boolean
name|guiAvailable
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"guiAvailable"
argument_list|,
name|guiAvailable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether AS/400 prompting is enabled in the environment running          * Camel.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|guiAvailable (String guiAvailable)
specifier|default
name|Jt400EndpointConsumerBuilder
name|guiAvailable
parameter_list|(
name|String
name|guiAvailable
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"guiAvailable"
argument_list|,
name|guiAvailable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use keyed or non-keyed data queues.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|keyed (boolean keyed)
specifier|default
name|Jt400EndpointConsumerBuilder
name|keyed
parameter_list|(
name|boolean
name|keyed
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyed"
argument_list|,
name|keyed
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use keyed or non-keyed data queues.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|keyed (String keyed)
specifier|default
name|Jt400EndpointConsumerBuilder
name|keyed
parameter_list|(
name|String
name|keyed
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyed"
argument_list|,
name|keyed
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies which fields (program parameters) are output parameters.          *           * The option is a:<code>java.lang.Integer[]</code> type.          *           * Group: common          */
DECL|method|outputFieldsIdxArray ( Integer[] outputFieldsIdxArray)
specifier|default
name|Jt400EndpointConsumerBuilder
name|outputFieldsIdxArray
parameter_list|(
name|Integer
index|[]
name|outputFieldsIdxArray
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputFieldsIdxArray"
argument_list|,
name|outputFieldsIdxArray
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies which fields (program parameters) are output parameters.          *           * The option will be converted to a<code>java.lang.Integer[]</code>          * type.          *           * Group: common          */
DECL|method|outputFieldsIdxArray ( String outputFieldsIdxArray)
specifier|default
name|Jt400EndpointConsumerBuilder
name|outputFieldsIdxArray
parameter_list|(
name|String
name|outputFieldsIdxArray
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputFieldsIdxArray"
argument_list|,
name|outputFieldsIdxArray
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the fields (program parameters) length as in the AS/400          * program definition.          *           * The option is a:<code>java.lang.Integer[]</code> type.          *           * Group: common          */
DECL|method|outputFieldsLengthArray ( Integer[] outputFieldsLengthArray)
specifier|default
name|Jt400EndpointConsumerBuilder
name|outputFieldsLengthArray
parameter_list|(
name|Integer
index|[]
name|outputFieldsLengthArray
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputFieldsLengthArray"
argument_list|,
name|outputFieldsLengthArray
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the fields (program parameters) length as in the AS/400          * program definition.          *           * The option will be converted to a<code>java.lang.Integer[]</code>          * type.          *           * Group: common          */
DECL|method|outputFieldsLengthArray ( String outputFieldsLengthArray)
specifier|default
name|Jt400EndpointConsumerBuilder
name|outputFieldsLengthArray
parameter_list|(
name|String
name|outputFieldsLengthArray
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputFieldsLengthArray"
argument_list|,
name|outputFieldsLengthArray
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Search key for keyed data queues.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|searchKey (String searchKey)
specifier|default
name|Jt400EndpointConsumerBuilder
name|searchKey
parameter_list|(
name|String
name|searchKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"searchKey"
argument_list|,
name|searchKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Search type such as EQ for equal etc.          *           * The option is a:          *<code>org.apache.camel.component.jt400.Jt400Configuration$SearchType</code> type.          *           * Group: common          */
DECL|method|searchType (SearchType searchType)
specifier|default
name|Jt400EndpointConsumerBuilder
name|searchType
parameter_list|(
name|SearchType
name|searchType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"searchType"
argument_list|,
name|searchType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Search type such as EQ for equal etc.          *           * The option will be converted to a          *<code>org.apache.camel.component.jt400.Jt400Configuration$SearchType</code> type.          *           * Group: common          */
DECL|method|searchType (String searchType)
specifier|default
name|Jt400EndpointConsumerBuilder
name|searchType
parameter_list|(
name|String
name|searchType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"searchType"
argument_list|,
name|searchType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|Jt400EndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|Jt400EndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout in millis the consumer will wait while trying to read a new          * message of the data queue.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|readTimeout (int readTimeout)
specifier|default
name|Jt400EndpointConsumerBuilder
name|readTimeout
parameter_list|(
name|int
name|readTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readTimeout"
argument_list|,
name|readTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout in millis the consumer will wait while trying to read a new          * message of the data queue.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|readTimeout (String readTimeout)
specifier|default
name|Jt400EndpointConsumerBuilder
name|readTimeout
parameter_list|(
name|String
name|readTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readTimeout"
argument_list|,
name|readTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( boolean sendEmptyMessageWhenIdle)
specifier|default
name|Jt400EndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|boolean
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( String sendEmptyMessageWhenIdle)
specifier|default
name|Jt400EndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|String
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( int backoffErrorThreshold)
specifier|default
name|Jt400EndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|int
name|backoffErrorThreshold
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( String backoffErrorThreshold)
specifier|default
name|Jt400EndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|String
name|backoffErrorThreshold
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( int backoffIdleThreshold)
specifier|default
name|Jt400EndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|int
name|backoffIdleThreshold
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( String backoffIdleThreshold)
specifier|default
name|Jt400EndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|String
name|backoffIdleThreshold
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( int backoffMultiplier)
specifier|default
name|Jt400EndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|int
name|backoffMultiplier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( String backoffMultiplier)
specifier|default
name|Jt400EndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|String
name|backoffMultiplier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (long delay)
specifier|default
name|Jt400EndpointConsumerBuilder
name|delay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (String delay)
specifier|default
name|Jt400EndpointConsumerBuilder
name|delay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy (boolean greedy)
specifier|default
name|Jt400EndpointConsumerBuilder
name|greedy
parameter_list|(
name|boolean
name|greedy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy (String greedy)
specifier|default
name|Jt400EndpointConsumerBuilder
name|greedy
parameter_list|(
name|String
name|greedy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay (long initialDelay)
specifier|default
name|Jt400EndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|long
name|initialDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay (String initialDelay)
specifier|default
name|Jt400EndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|String
name|initialDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option is a:<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( LoggingLevel runLoggingLevel)
specifier|default
name|Jt400EndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|LoggingLevel
name|runLoggingLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( String runLoggingLevel)
specifier|default
name|Jt400EndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|String
name|runLoggingLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option is a:          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( ScheduledExecutorService scheduledExecutorService)
specifier|default
name|Jt400EndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|ScheduledExecutorService
name|scheduledExecutorService
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option will be converted to a          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( String scheduledExecutorService)
specifier|default
name|Jt400EndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|String
name|scheduledExecutorService
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a cron scheduler from either camel-spring or camel-quartz2          * component.          *           * The option is a:          *<code>org.apache.camel.spi.ScheduledPollConsumerScheduler</code>          * type.          *           * Group: scheduler          */
DECL|method|scheduler ( ScheduledPollConsumerScheduler scheduler)
specifier|default
name|Jt400EndpointConsumerBuilder
name|scheduler
parameter_list|(
name|ScheduledPollConsumerScheduler
name|scheduler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scheduler"
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a cron scheduler from either camel-spring or camel-quartz2          * component.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ScheduledPollConsumerScheduler</code>          * type.          *           * Group: scheduler          */
DECL|method|scheduler (String scheduler)
specifier|default
name|Jt400EndpointConsumerBuilder
name|scheduler
parameter_list|(
name|String
name|scheduler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scheduler"
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz2, Spring based scheduler.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( Map<String, Object> schedulerProperties)
specifier|default
name|Jt400EndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|schedulerProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz2, Spring based scheduler.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( String schedulerProperties)
specifier|default
name|Jt400EndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|String
name|schedulerProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler ( boolean startScheduler)
specifier|default
name|Jt400EndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|boolean
name|startScheduler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler ( String startScheduler)
specifier|default
name|Jt400EndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|String
name|startScheduler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option is a:<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit (TimeUnit timeUnit)
specifier|default
name|Jt400EndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option will be converted to a          *<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit (String timeUnit)
specifier|default
name|Jt400EndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|String
name|timeUnit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay (boolean useFixedDelay)
specifier|default
name|Jt400EndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|boolean
name|useFixedDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay (String useFixedDelay)
specifier|default
name|Jt400EndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|String
name|useFixedDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Procedure name from a service program to call.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: procedureName          */
DECL|method|procedureName (String procedureName)
specifier|default
name|Jt400EndpointConsumerBuilder
name|procedureName
parameter_list|(
name|String
name|procedureName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"procedureName"
argument_list|,
name|procedureName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether connections to AS/400 are secured with SSL.          *           * The option is a:<code>boolean</code> type.          *           * Group: security          */
DECL|method|secured (boolean secured)
specifier|default
name|Jt400EndpointConsumerBuilder
name|secured
parameter_list|(
name|boolean
name|secured
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secured"
argument_list|,
name|secured
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether connections to AS/400 are secured with SSL.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: security          */
DECL|method|secured (String secured)
specifier|default
name|Jt400EndpointConsumerBuilder
name|secured
parameter_list|(
name|String
name|secured
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secured"
argument_list|,
name|secured
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the JT400 component.      */
DECL|interface|AdvancedJt400EndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedJt400EndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|Jt400EndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|Jt400EndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedJt400EndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedJt400EndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedJt400EndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedJt400EndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option is a:          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( PollingConsumerPollStrategy pollStrategy)
specifier|default
name|AdvancedJt400EndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|PollingConsumerPollStrategy
name|pollStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option will be converted to a          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( String pollStrategy)
specifier|default
name|AdvancedJt400EndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|String
name|pollStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJt400EndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJt400EndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedJt400EndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedJt400EndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the JT400 component.      */
DECL|interface|Jt400EndpointProducerBuilder
specifier|public
interface|interface
name|Jt400EndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJt400EndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJt400EndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets the CCSID to use for the connection with the AS/400 system.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|ccsid (int ccsid)
specifier|default
name|Jt400EndpointProducerBuilder
name|ccsid
parameter_list|(
name|int
name|ccsid
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ccsid"
argument_list|,
name|ccsid
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the CCSID to use for the connection with the AS/400 system.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|ccsid (String ccsid)
specifier|default
name|Jt400EndpointProducerBuilder
name|ccsid
parameter_list|(
name|String
name|ccsid
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ccsid"
argument_list|,
name|ccsid
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the data format for sending messages.          *           * The option is a:          *<code>org.apache.camel.component.jt400.Jt400Configuration$Format</code> type.          *           * Group: common          */
DECL|method|format (Format format)
specifier|default
name|Jt400EndpointProducerBuilder
name|format
parameter_list|(
name|Format
name|format
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"format"
argument_list|,
name|format
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the data format for sending messages.          *           * The option will be converted to a          *<code>org.apache.camel.component.jt400.Jt400Configuration$Format</code> type.          *           * Group: common          */
DECL|method|format (String format)
specifier|default
name|Jt400EndpointProducerBuilder
name|format
parameter_list|(
name|String
name|format
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"format"
argument_list|,
name|format
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether AS/400 prompting is enabled in the environment running          * Camel.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|guiAvailable (boolean guiAvailable)
specifier|default
name|Jt400EndpointProducerBuilder
name|guiAvailable
parameter_list|(
name|boolean
name|guiAvailable
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"guiAvailable"
argument_list|,
name|guiAvailable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether AS/400 prompting is enabled in the environment running          * Camel.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|guiAvailable (String guiAvailable)
specifier|default
name|Jt400EndpointProducerBuilder
name|guiAvailable
parameter_list|(
name|String
name|guiAvailable
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"guiAvailable"
argument_list|,
name|guiAvailable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use keyed or non-keyed data queues.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|keyed (boolean keyed)
specifier|default
name|Jt400EndpointProducerBuilder
name|keyed
parameter_list|(
name|boolean
name|keyed
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyed"
argument_list|,
name|keyed
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use keyed or non-keyed data queues.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|keyed (String keyed)
specifier|default
name|Jt400EndpointProducerBuilder
name|keyed
parameter_list|(
name|String
name|keyed
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyed"
argument_list|,
name|keyed
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies which fields (program parameters) are output parameters.          *           * The option is a:<code>java.lang.Integer[]</code> type.          *           * Group: common          */
DECL|method|outputFieldsIdxArray ( Integer[] outputFieldsIdxArray)
specifier|default
name|Jt400EndpointProducerBuilder
name|outputFieldsIdxArray
parameter_list|(
name|Integer
index|[]
name|outputFieldsIdxArray
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputFieldsIdxArray"
argument_list|,
name|outputFieldsIdxArray
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies which fields (program parameters) are output parameters.          *           * The option will be converted to a<code>java.lang.Integer[]</code>          * type.          *           * Group: common          */
DECL|method|outputFieldsIdxArray ( String outputFieldsIdxArray)
specifier|default
name|Jt400EndpointProducerBuilder
name|outputFieldsIdxArray
parameter_list|(
name|String
name|outputFieldsIdxArray
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputFieldsIdxArray"
argument_list|,
name|outputFieldsIdxArray
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the fields (program parameters) length as in the AS/400          * program definition.          *           * The option is a:<code>java.lang.Integer[]</code> type.          *           * Group: common          */
DECL|method|outputFieldsLengthArray ( Integer[] outputFieldsLengthArray)
specifier|default
name|Jt400EndpointProducerBuilder
name|outputFieldsLengthArray
parameter_list|(
name|Integer
index|[]
name|outputFieldsLengthArray
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputFieldsLengthArray"
argument_list|,
name|outputFieldsLengthArray
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the fields (program parameters) length as in the AS/400          * program definition.          *           * The option will be converted to a<code>java.lang.Integer[]</code>          * type.          *           * Group: common          */
DECL|method|outputFieldsLengthArray ( String outputFieldsLengthArray)
specifier|default
name|Jt400EndpointProducerBuilder
name|outputFieldsLengthArray
parameter_list|(
name|String
name|outputFieldsLengthArray
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputFieldsLengthArray"
argument_list|,
name|outputFieldsLengthArray
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Search key for keyed data queues.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|searchKey (String searchKey)
specifier|default
name|Jt400EndpointProducerBuilder
name|searchKey
parameter_list|(
name|String
name|searchKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"searchKey"
argument_list|,
name|searchKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Search type such as EQ for equal etc.          *           * The option is a:          *<code>org.apache.camel.component.jt400.Jt400Configuration$SearchType</code> type.          *           * Group: common          */
DECL|method|searchType (SearchType searchType)
specifier|default
name|Jt400EndpointProducerBuilder
name|searchType
parameter_list|(
name|SearchType
name|searchType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"searchType"
argument_list|,
name|searchType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Search type such as EQ for equal etc.          *           * The option will be converted to a          *<code>org.apache.camel.component.jt400.Jt400Configuration$SearchType</code> type.          *           * Group: common          */
DECL|method|searchType (String searchType)
specifier|default
name|Jt400EndpointProducerBuilder
name|searchType
parameter_list|(
name|String
name|searchType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"searchType"
argument_list|,
name|searchType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|Jt400EndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|Jt400EndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Procedure name from a service program to call.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: procedureName          */
DECL|method|procedureName (String procedureName)
specifier|default
name|Jt400EndpointProducerBuilder
name|procedureName
parameter_list|(
name|String
name|procedureName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"procedureName"
argument_list|,
name|procedureName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether connections to AS/400 are secured with SSL.          *           * The option is a:<code>boolean</code> type.          *           * Group: security          */
DECL|method|secured (boolean secured)
specifier|default
name|Jt400EndpointProducerBuilder
name|secured
parameter_list|(
name|boolean
name|secured
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secured"
argument_list|,
name|secured
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether connections to AS/400 are secured with SSL.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: security          */
DECL|method|secured (String secured)
specifier|default
name|Jt400EndpointProducerBuilder
name|secured
parameter_list|(
name|String
name|secured
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secured"
argument_list|,
name|secured
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the JT400 component.      */
DECL|interface|AdvancedJt400EndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedJt400EndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|Jt400EndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|Jt400EndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJt400EndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJt400EndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedJt400EndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedJt400EndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the JT400 component.      */
DECL|interface|Jt400EndpointBuilder
specifier|public
interface|interface
name|Jt400EndpointBuilder
extends|extends
name|Jt400EndpointConsumerBuilder
extends|,
name|Jt400EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJt400EndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJt400EndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets the CCSID to use for the connection with the AS/400 system.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|ccsid (int ccsid)
specifier|default
name|Jt400EndpointBuilder
name|ccsid
parameter_list|(
name|int
name|ccsid
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ccsid"
argument_list|,
name|ccsid
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the CCSID to use for the connection with the AS/400 system.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|ccsid (String ccsid)
specifier|default
name|Jt400EndpointBuilder
name|ccsid
parameter_list|(
name|String
name|ccsid
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ccsid"
argument_list|,
name|ccsid
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the data format for sending messages.          *           * The option is a:          *<code>org.apache.camel.component.jt400.Jt400Configuration$Format</code> type.          *           * Group: common          */
DECL|method|format (Format format)
specifier|default
name|Jt400EndpointBuilder
name|format
parameter_list|(
name|Format
name|format
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"format"
argument_list|,
name|format
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the data format for sending messages.          *           * The option will be converted to a          *<code>org.apache.camel.component.jt400.Jt400Configuration$Format</code> type.          *           * Group: common          */
DECL|method|format (String format)
specifier|default
name|Jt400EndpointBuilder
name|format
parameter_list|(
name|String
name|format
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"format"
argument_list|,
name|format
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether AS/400 prompting is enabled in the environment running          * Camel.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|guiAvailable (boolean guiAvailable)
specifier|default
name|Jt400EndpointBuilder
name|guiAvailable
parameter_list|(
name|boolean
name|guiAvailable
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"guiAvailable"
argument_list|,
name|guiAvailable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether AS/400 prompting is enabled in the environment running          * Camel.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|guiAvailable (String guiAvailable)
specifier|default
name|Jt400EndpointBuilder
name|guiAvailable
parameter_list|(
name|String
name|guiAvailable
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"guiAvailable"
argument_list|,
name|guiAvailable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use keyed or non-keyed data queues.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|keyed (boolean keyed)
specifier|default
name|Jt400EndpointBuilder
name|keyed
parameter_list|(
name|boolean
name|keyed
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyed"
argument_list|,
name|keyed
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use keyed or non-keyed data queues.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|keyed (String keyed)
specifier|default
name|Jt400EndpointBuilder
name|keyed
parameter_list|(
name|String
name|keyed
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keyed"
argument_list|,
name|keyed
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies which fields (program parameters) are output parameters.          *           * The option is a:<code>java.lang.Integer[]</code> type.          *           * Group: common          */
DECL|method|outputFieldsIdxArray ( Integer[] outputFieldsIdxArray)
specifier|default
name|Jt400EndpointBuilder
name|outputFieldsIdxArray
parameter_list|(
name|Integer
index|[]
name|outputFieldsIdxArray
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputFieldsIdxArray"
argument_list|,
name|outputFieldsIdxArray
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies which fields (program parameters) are output parameters.          *           * The option will be converted to a<code>java.lang.Integer[]</code>          * type.          *           * Group: common          */
DECL|method|outputFieldsIdxArray ( String outputFieldsIdxArray)
specifier|default
name|Jt400EndpointBuilder
name|outputFieldsIdxArray
parameter_list|(
name|String
name|outputFieldsIdxArray
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputFieldsIdxArray"
argument_list|,
name|outputFieldsIdxArray
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the fields (program parameters) length as in the AS/400          * program definition.          *           * The option is a:<code>java.lang.Integer[]</code> type.          *           * Group: common          */
DECL|method|outputFieldsLengthArray ( Integer[] outputFieldsLengthArray)
specifier|default
name|Jt400EndpointBuilder
name|outputFieldsLengthArray
parameter_list|(
name|Integer
index|[]
name|outputFieldsLengthArray
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputFieldsLengthArray"
argument_list|,
name|outputFieldsLengthArray
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the fields (program parameters) length as in the AS/400          * program definition.          *           * The option will be converted to a<code>java.lang.Integer[]</code>          * type.          *           * Group: common          */
DECL|method|outputFieldsLengthArray ( String outputFieldsLengthArray)
specifier|default
name|Jt400EndpointBuilder
name|outputFieldsLengthArray
parameter_list|(
name|String
name|outputFieldsLengthArray
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputFieldsLengthArray"
argument_list|,
name|outputFieldsLengthArray
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Search key for keyed data queues.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|searchKey (String searchKey)
specifier|default
name|Jt400EndpointBuilder
name|searchKey
parameter_list|(
name|String
name|searchKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"searchKey"
argument_list|,
name|searchKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Search type such as EQ for equal etc.          *           * The option is a:          *<code>org.apache.camel.component.jt400.Jt400Configuration$SearchType</code> type.          *           * Group: common          */
DECL|method|searchType (SearchType searchType)
specifier|default
name|Jt400EndpointBuilder
name|searchType
parameter_list|(
name|SearchType
name|searchType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"searchType"
argument_list|,
name|searchType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Search type such as EQ for equal etc.          *           * The option will be converted to a          *<code>org.apache.camel.component.jt400.Jt400Configuration$SearchType</code> type.          *           * Group: common          */
DECL|method|searchType (String searchType)
specifier|default
name|Jt400EndpointBuilder
name|searchType
parameter_list|(
name|String
name|searchType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"searchType"
argument_list|,
name|searchType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Procedure name from a service program to call.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: procedureName          */
DECL|method|procedureName (String procedureName)
specifier|default
name|Jt400EndpointBuilder
name|procedureName
parameter_list|(
name|String
name|procedureName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"procedureName"
argument_list|,
name|procedureName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether connections to AS/400 are secured with SSL.          *           * The option is a:<code>boolean</code> type.          *           * Group: security          */
DECL|method|secured (boolean secured)
specifier|default
name|Jt400EndpointBuilder
name|secured
parameter_list|(
name|boolean
name|secured
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secured"
argument_list|,
name|secured
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether connections to AS/400 are secured with SSL.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: security          */
DECL|method|secured (String secured)
specifier|default
name|Jt400EndpointBuilder
name|secured
parameter_list|(
name|String
name|secured
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secured"
argument_list|,
name|secured
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the JT400 component.      */
DECL|interface|AdvancedJt400EndpointBuilder
specifier|public
interface|interface
name|AdvancedJt400EndpointBuilder
extends|extends
name|AdvancedJt400EndpointConsumerBuilder
extends|,
name|AdvancedJt400EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|Jt400EndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|Jt400EndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJt400EndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJt400EndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedJt400EndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedJt400EndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.jt400.Jt400Configuration$Format</code>      * enum.      */
DECL|enum|Format
enum|enum
name|Format
block|{
DECL|enumConstant|text
name|text
block|,
DECL|enumConstant|binary
name|binary
block|;     }
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.jt400.Jt400Configuration$SearchType</code> enum.      */
DECL|enum|SearchType
enum|enum
name|SearchType
block|{
DECL|enumConstant|EQ
name|EQ
block|,
DECL|enumConstant|NE
name|NE
block|,
DECL|enumConstant|LT
name|LT
block|,
DECL|enumConstant|LE
name|LE
block|,
DECL|enumConstant|GT
name|GT
block|,
DECL|enumConstant|GE
name|GE
block|;     }
comment|/**      * JT400 (camel-jt400)      * The jt400 component allows you to exchanges messages with an AS/400      * system using data queues or program call.      *       * Syntax:<code>jt400:userID:password/systemName/objectPath.type</code>      * Category: messaging      * Available as of version: 1.5      * Maven coordinates: org.apache.camel:camel-jt400      */
DECL|method|jt400 (String path)
specifier|default
name|Jt400EndpointBuilder
name|jt400
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|Jt400EndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|Jt400EndpointBuilder
implements|,
name|AdvancedJt400EndpointBuilder
block|{
specifier|public
name|Jt400EndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"jt400"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Jt400EndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

