begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * To integrate with the Soroush chat bot.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|SoroushBotEndpointBuilderFactory
specifier|public
interface|interface
name|SoroushBotEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Soroush component.      */
DECL|interface|SoroushBotEndpointConsumerBuilder
specifier|public
interface|interface
name|SoroushBotEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSoroushBotEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSoroushBotEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The action to do.          *           * The option is a:          *<code>org.apache.camel.component.soroushbot.models.SoroushAction</code> type.          *           * Group: common          */
DECL|method|action (SoroushAction action)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|action
parameter_list|(
name|SoroushAction
name|action
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"action"
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The action to do.          *           * The option will be converted to a          *<code>org.apache.camel.component.soroushbot.models.SoroushAction</code> type.          *           * Group: common          */
DECL|method|action (String action)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|action
parameter_list|(
name|String
name|action
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"action"
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection timeout in ms when connecting to soroush API.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|connectionTimeout ( int connectionTimeout)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|connectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection timeout in ms when connecting to soroush API.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|connectionTimeout ( String connectionTimeout)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum connection retry when fail to connect to soroush API, if the          * quota is reached, MaximumConnectionRetryReachedException is thrown          * for that message.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxConnectionRetry ( int maxConnectionRetry)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|maxConnectionRetry
parameter_list|(
name|int
name|maxConnectionRetry
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxConnectionRetry"
argument_list|,
name|maxConnectionRetry
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum connection retry when fail to connect to soroush API, if the          * quota is reached, MaximumConnectionRetryReachedException is thrown          * for that message.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxConnectionRetry ( String maxConnectionRetry)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|maxConnectionRetry
parameter_list|(
name|String
name|maxConnectionRetry
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxConnectionRetry"
argument_list|,
name|maxConnectionRetry
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of Thread created by consumer in the route. if you use this          * method for parallelism, it is guaranteed that messages from same user          * always execute in the same thread and therefore messages from the          * same user are processed sequentially. Default value notice: using          * SoroushBotSingleThreadConsumer.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|concurrentConsumers ( int concurrentConsumers)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|concurrentConsumers
parameter_list|(
name|int
name|concurrentConsumers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"concurrentConsumers"
argument_list|,
name|concurrentConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of Thread created by consumer in the route. if you use this          * method for parallelism, it is guaranteed that messages from same user          * always execute in the same thread and therefore messages from the          * same user are processed sequentially. Default value notice: using          * SoroushBotSingleThreadConsumer.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|concurrentConsumers ( String concurrentConsumers)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|concurrentConsumers
parameter_list|(
name|String
name|concurrentConsumers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"concurrentConsumers"
argument_list|,
name|concurrentConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum capacity of each queue when concurrentConsumers is greater          * than 1. if a queue become full, every message that should go to that          * queue will be dropped. If bridgeErrorHandler is set to true, an          * exchange with CongestionException is directed to ErrorHandler. You          * can then processed the error using          * onException(CongestionException.class) route. Default value notice:          * infinite capacity.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|queueCapacityPerThread ( int queueCapacityPerThread)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|queueCapacityPerThread
parameter_list|(
name|int
name|queueCapacityPerThread
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"queueCapacityPerThread"
argument_list|,
name|queueCapacityPerThread
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum capacity of each queue when concurrentConsumers is greater          * than 1. if a queue become full, every message that should go to that          * queue will be dropped. If bridgeErrorHandler is set to true, an          * exchange with CongestionException is directed to ErrorHandler. You          * can then processed the error using          * onException(CongestionException.class) route. Default value notice:          * infinite capacity.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|queueCapacityPerThread ( String queueCapacityPerThread)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|queueCapacityPerThread
parameter_list|(
name|String
name|queueCapacityPerThread
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"queueCapacityPerThread"
argument_list|,
name|queueCapacityPerThread
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The authorization token for using the bot. if uri path does not          * contain authorization token, this token will be used.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|authorizationToken ( String authorizationToken)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|authorizationToken
parameter_list|(
name|String
name|authorizationToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"authorizationToken"
argument_list|,
name|authorizationToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The strategy to backoff in case of connection failure. Currently 3          * strategies are supported: 1. Exponential (default): It multiply          * retryWaitingTime by retryExponentialCoefficient after each connection          * failure. 2. Linear: It increase retryWaitingTime by          * retryLinearIncrement after each connection failure. 3. Fixed: Always          * use retryWaitingTime as the time between retries.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: scheduling          */
DECL|method|backOffStrategy ( String backOffStrategy)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|backOffStrategy
parameter_list|(
name|String
name|backOffStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backOffStrategy"
argument_list|,
name|backOffStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum amount of time (in millisecond) a thread wait before retrying          * failed request.          *           * The option is a:<code>long</code> type.          *           * Group: scheduling          */
DECL|method|maxRetryWaitingTime ( long maxRetryWaitingTime)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|maxRetryWaitingTime
parameter_list|(
name|long
name|maxRetryWaitingTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxRetryWaitingTime"
argument_list|,
name|maxRetryWaitingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum amount of time (in millisecond) a thread wait before retrying          * failed request.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduling          */
DECL|method|maxRetryWaitingTime ( String maxRetryWaitingTime)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|maxRetryWaitingTime
parameter_list|(
name|String
name|maxRetryWaitingTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxRetryWaitingTime"
argument_list|,
name|maxRetryWaitingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timeout in millisecond to reconnect the existing getMessage          * connection to ensure that the connection is always live and does not          * dead without notifying the bot. this value should not be changed.          *           * The option is a:<code>long</code> type.          *           * Group: scheduling          */
DECL|method|reconnectIdleConnectionTimeout ( long reconnectIdleConnectionTimeout)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|reconnectIdleConnectionTimeout
parameter_list|(
name|long
name|reconnectIdleConnectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectIdleConnectionTimeout"
argument_list|,
name|reconnectIdleConnectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timeout in millisecond to reconnect the existing getMessage          * connection to ensure that the connection is always live and does not          * dead without notifying the bot. this value should not be changed.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduling          */
DECL|method|reconnectIdleConnectionTimeout ( String reconnectIdleConnectionTimeout)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|reconnectIdleConnectionTimeout
parameter_list|(
name|String
name|reconnectIdleConnectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectIdleConnectionTimeout"
argument_list|,
name|reconnectIdleConnectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Coefficient to compute back off time when using Exponential Back Off          * strategy.          *           * The option is a:<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryExponentialCoefficient ( long retryExponentialCoefficient)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|retryExponentialCoefficient
parameter_list|(
name|long
name|retryExponentialCoefficient
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryExponentialCoefficient"
argument_list|,
name|retryExponentialCoefficient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Coefficient to compute back off time when using Exponential Back Off          * strategy.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryExponentialCoefficient ( String retryExponentialCoefficient)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|retryExponentialCoefficient
parameter_list|(
name|String
name|retryExponentialCoefficient
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryExponentialCoefficient"
argument_list|,
name|retryExponentialCoefficient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The amount of time (in millisecond) which adds to waiting time when          * using Linear back off strategy.          *           * The option is a:<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryLinearIncrement ( long retryLinearIncrement)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|retryLinearIncrement
parameter_list|(
name|long
name|retryLinearIncrement
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryLinearIncrement"
argument_list|,
name|retryLinearIncrement
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The amount of time (in millisecond) which adds to waiting time when          * using Linear back off strategy.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryLinearIncrement ( String retryLinearIncrement)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|retryLinearIncrement
parameter_list|(
name|String
name|retryLinearIncrement
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryLinearIncrement"
argument_list|,
name|retryLinearIncrement
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Waiting time before retry failed request (Millisecond). If          * backOffStrategy is not Fixed this is the based value for computing          * back off waiting time. the first retry is always happen immediately          * after failure and retryWaitingTime do not apply to the first retry.          *           * The option is a:<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryWaitingTime ( long retryWaitingTime)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|retryWaitingTime
parameter_list|(
name|long
name|retryWaitingTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryWaitingTime"
argument_list|,
name|retryWaitingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Waiting time before retry failed request (Millisecond). If          * backOffStrategy is not Fixed this is the based value for computing          * back off waiting time. the first retry is always happen immediately          * after failure and retryWaitingTime do not apply to the first retry.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryWaitingTime ( String retryWaitingTime)
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|retryWaitingTime
parameter_list|(
name|String
name|retryWaitingTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryWaitingTime"
argument_list|,
name|retryWaitingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Soroush component.      */
DECL|interface|AdvancedSoroushBotEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedSoroushBotEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SoroushBotEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SoroushBotEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedSoroushBotEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedSoroushBotEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedSoroushBotEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedSoroushBotEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSoroushBotEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSoroushBotEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSoroushBotEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedSoroushBotEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Soroush component.      */
DECL|interface|SoroushBotEndpointProducerBuilder
specifier|public
interface|interface
name|SoroushBotEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSoroushBotEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSoroushBotEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The action to do.          *           * The option is a:          *<code>org.apache.camel.component.soroushbot.models.SoroushAction</code> type.          *           * Group: common          */
DECL|method|action (SoroushAction action)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|action
parameter_list|(
name|SoroushAction
name|action
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"action"
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The action to do.          *           * The option will be converted to a          *<code>org.apache.camel.component.soroushbot.models.SoroushAction</code> type.          *           * Group: common          */
DECL|method|action (String action)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|action
parameter_list|(
name|String
name|action
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"action"
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection timeout in ms when connecting to soroush API.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|connectionTimeout ( int connectionTimeout)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|connectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection timeout in ms when connecting to soroush API.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|connectionTimeout ( String connectionTimeout)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum connection retry when fail to connect to soroush API, if the          * quota is reached, MaximumConnectionRetryReachedException is thrown          * for that message.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxConnectionRetry ( int maxConnectionRetry)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|maxConnectionRetry
parameter_list|(
name|int
name|maxConnectionRetry
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxConnectionRetry"
argument_list|,
name|maxConnectionRetry
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum connection retry when fail to connect to soroush API, if the          * quota is reached, MaximumConnectionRetryReachedException is thrown          * for that message.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxConnectionRetry ( String maxConnectionRetry)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|maxConnectionRetry
parameter_list|(
name|String
name|maxConnectionRetry
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxConnectionRetry"
argument_list|,
name|maxConnectionRetry
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Automatically download SoroushMessage.fileUrl and          * SoroushMessage.thumbnailUrl if exists for the message and store them          * in SoroushMessage.file and SoroushMessage.thumbnail field.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|autoDownload ( boolean autoDownload)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|autoDownload
parameter_list|(
name|boolean
name|autoDownload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoDownload"
argument_list|,
name|autoDownload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Automatically download SoroushMessage.fileUrl and          * SoroushMessage.thumbnailUrl if exists for the message and store them          * in SoroushMessage.file and SoroushMessage.thumbnail field.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|autoDownload ( String autoDownload)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|autoDownload
parameter_list|(
name|String
name|autoDownload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoDownload"
argument_list|,
name|autoDownload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Automatically upload attachments when a message goes to the          * sendMessage endpoint and the SoroushMessage.file          * (SoroushMessage.thumbnail) has been set and          * SoroushMessage.fileUrl(SoroushMessage.thumbnailUrl) is null.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|autoUploadFile ( boolean autoUploadFile)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|autoUploadFile
parameter_list|(
name|boolean
name|autoUploadFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoUploadFile"
argument_list|,
name|autoUploadFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Automatically upload attachments when a message goes to the          * sendMessage endpoint and the SoroushMessage.file          * (SoroushMessage.thumbnail) has been set and          * SoroushMessage.fileUrl(SoroushMessage.thumbnailUrl) is null.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|autoUploadFile ( String autoUploadFile)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|autoUploadFile
parameter_list|(
name|String
name|autoUploadFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoUploadFile"
argument_list|,
name|autoUploadFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, when downloading an attached file, thumbnail will be          * downloaded if provided in the message. Otherwise, only the file will          * be downloaded.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|downloadThumbnail ( boolean downloadThumbnail)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|downloadThumbnail
parameter_list|(
name|boolean
name|downloadThumbnail
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"downloadThumbnail"
argument_list|,
name|downloadThumbnail
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, when downloading an attached file, thumbnail will be          * downloaded if provided in the message. Otherwise, only the file will          * be downloaded.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|downloadThumbnail ( String downloadThumbnail)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|downloadThumbnail
parameter_list|(
name|String
name|downloadThumbnail
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"downloadThumbnail"
argument_list|,
name|downloadThumbnail
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Force to download SoroushMessage.fileUrl(SoroushMessage.thumbnailUrl)          * if exists, even if the SoroushMessage.file(SoroushMessage.thumbnail)          * was not null in that message.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|forceDownload ( boolean forceDownload)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|forceDownload
parameter_list|(
name|boolean
name|forceDownload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"forceDownload"
argument_list|,
name|forceDownload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Force to download SoroushMessage.fileUrl(SoroushMessage.thumbnailUrl)          * if exists, even if the SoroushMessage.file(SoroushMessage.thumbnail)          * was not null in that message.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|forceDownload ( String forceDownload)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|forceDownload
parameter_list|(
name|String
name|forceDownload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"forceDownload"
argument_list|,
name|forceDownload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Force to upload SoroushMessage.file(SoroushMessage.thumbnail) if          * exists, even if the          * SoroushMessage.fileUrl(SoroushMessage.thumbnailUrl) is not null in          * the message.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|forceUpload ( boolean forceUpload)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|forceUpload
parameter_list|(
name|boolean
name|forceUpload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"forceUpload"
argument_list|,
name|forceUpload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Force to upload SoroushMessage.file(SoroushMessage.thumbnail) if          * exists, even if the          * SoroushMessage.fileUrl(SoroushMessage.thumbnailUrl) is not null in          * the message.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|forceUpload (String forceUpload)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|forceUpload
parameter_list|(
name|String
name|forceUpload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"forceUpload"
argument_list|,
name|forceUpload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The authorization token for using the bot. if uri path does not          * contain authorization token, this token will be used.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|authorizationToken ( String authorizationToken)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|authorizationToken
parameter_list|(
name|String
name|authorizationToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"authorizationToken"
argument_list|,
name|authorizationToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The strategy to backoff in case of connection failure. Currently 3          * strategies are supported: 1. Exponential (default): It multiply          * retryWaitingTime by retryExponentialCoefficient after each connection          * failure. 2. Linear: It increase retryWaitingTime by          * retryLinearIncrement after each connection failure. 3. Fixed: Always          * use retryWaitingTime as the time between retries.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: scheduling          */
DECL|method|backOffStrategy ( String backOffStrategy)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|backOffStrategy
parameter_list|(
name|String
name|backOffStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backOffStrategy"
argument_list|,
name|backOffStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum amount of time (in millisecond) a thread wait before retrying          * failed request.          *           * The option is a:<code>long</code> type.          *           * Group: scheduling          */
DECL|method|maxRetryWaitingTime ( long maxRetryWaitingTime)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|maxRetryWaitingTime
parameter_list|(
name|long
name|maxRetryWaitingTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxRetryWaitingTime"
argument_list|,
name|maxRetryWaitingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum amount of time (in millisecond) a thread wait before retrying          * failed request.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduling          */
DECL|method|maxRetryWaitingTime ( String maxRetryWaitingTime)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|maxRetryWaitingTime
parameter_list|(
name|String
name|maxRetryWaitingTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxRetryWaitingTime"
argument_list|,
name|maxRetryWaitingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timeout in millisecond to reconnect the existing getMessage          * connection to ensure that the connection is always live and does not          * dead without notifying the bot. this value should not be changed.          *           * The option is a:<code>long</code> type.          *           * Group: scheduling          */
DECL|method|reconnectIdleConnectionTimeout ( long reconnectIdleConnectionTimeout)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|reconnectIdleConnectionTimeout
parameter_list|(
name|long
name|reconnectIdleConnectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectIdleConnectionTimeout"
argument_list|,
name|reconnectIdleConnectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timeout in millisecond to reconnect the existing getMessage          * connection to ensure that the connection is always live and does not          * dead without notifying the bot. this value should not be changed.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduling          */
DECL|method|reconnectIdleConnectionTimeout ( String reconnectIdleConnectionTimeout)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|reconnectIdleConnectionTimeout
parameter_list|(
name|String
name|reconnectIdleConnectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectIdleConnectionTimeout"
argument_list|,
name|reconnectIdleConnectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Coefficient to compute back off time when using Exponential Back Off          * strategy.          *           * The option is a:<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryExponentialCoefficient ( long retryExponentialCoefficient)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|retryExponentialCoefficient
parameter_list|(
name|long
name|retryExponentialCoefficient
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryExponentialCoefficient"
argument_list|,
name|retryExponentialCoefficient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Coefficient to compute back off time when using Exponential Back Off          * strategy.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryExponentialCoefficient ( String retryExponentialCoefficient)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|retryExponentialCoefficient
parameter_list|(
name|String
name|retryExponentialCoefficient
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryExponentialCoefficient"
argument_list|,
name|retryExponentialCoefficient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The amount of time (in millisecond) which adds to waiting time when          * using Linear back off strategy.          *           * The option is a:<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryLinearIncrement ( long retryLinearIncrement)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|retryLinearIncrement
parameter_list|(
name|long
name|retryLinearIncrement
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryLinearIncrement"
argument_list|,
name|retryLinearIncrement
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The amount of time (in millisecond) which adds to waiting time when          * using Linear back off strategy.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryLinearIncrement ( String retryLinearIncrement)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|retryLinearIncrement
parameter_list|(
name|String
name|retryLinearIncrement
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryLinearIncrement"
argument_list|,
name|retryLinearIncrement
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Waiting time before retry failed request (Millisecond). If          * backOffStrategy is not Fixed this is the based value for computing          * back off waiting time. the first retry is always happen immediately          * after failure and retryWaitingTime do not apply to the first retry.          *           * The option is a:<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryWaitingTime ( long retryWaitingTime)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|retryWaitingTime
parameter_list|(
name|long
name|retryWaitingTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryWaitingTime"
argument_list|,
name|retryWaitingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Waiting time before retry failed request (Millisecond). If          * backOffStrategy is not Fixed this is the based value for computing          * back off waiting time. the first retry is always happen immediately          * after failure and retryWaitingTime do not apply to the first retry.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryWaitingTime ( String retryWaitingTime)
specifier|default
name|SoroushBotEndpointProducerBuilder
name|retryWaitingTime
parameter_list|(
name|String
name|retryWaitingTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryWaitingTime"
argument_list|,
name|retryWaitingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Soroush component.      */
DECL|interface|AdvancedSoroushBotEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedSoroushBotEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SoroushBotEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SoroushBotEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSoroushBotEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSoroushBotEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSoroushBotEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedSoroushBotEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Soroush component.      */
DECL|interface|SoroushBotEndpointBuilder
specifier|public
interface|interface
name|SoroushBotEndpointBuilder
extends|extends
name|SoroushBotEndpointConsumerBuilder
extends|,
name|SoroushBotEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSoroushBotEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSoroushBotEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The action to do.          *           * The option is a:          *<code>org.apache.camel.component.soroushbot.models.SoroushAction</code> type.          *           * Group: common          */
DECL|method|action (SoroushAction action)
specifier|default
name|SoroushBotEndpointBuilder
name|action
parameter_list|(
name|SoroushAction
name|action
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"action"
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The action to do.          *           * The option will be converted to a          *<code>org.apache.camel.component.soroushbot.models.SoroushAction</code> type.          *           * Group: common          */
DECL|method|action (String action)
specifier|default
name|SoroushBotEndpointBuilder
name|action
parameter_list|(
name|String
name|action
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"action"
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection timeout in ms when connecting to soroush API.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|connectionTimeout ( int connectionTimeout)
specifier|default
name|SoroushBotEndpointBuilder
name|connectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection timeout in ms when connecting to soroush API.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|connectionTimeout ( String connectionTimeout)
specifier|default
name|SoroushBotEndpointBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum connection retry when fail to connect to soroush API, if the          * quota is reached, MaximumConnectionRetryReachedException is thrown          * for that message.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxConnectionRetry ( int maxConnectionRetry)
specifier|default
name|SoroushBotEndpointBuilder
name|maxConnectionRetry
parameter_list|(
name|int
name|maxConnectionRetry
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxConnectionRetry"
argument_list|,
name|maxConnectionRetry
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum connection retry when fail to connect to soroush API, if the          * quota is reached, MaximumConnectionRetryReachedException is thrown          * for that message.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxConnectionRetry ( String maxConnectionRetry)
specifier|default
name|SoroushBotEndpointBuilder
name|maxConnectionRetry
parameter_list|(
name|String
name|maxConnectionRetry
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxConnectionRetry"
argument_list|,
name|maxConnectionRetry
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The authorization token for using the bot. if uri path does not          * contain authorization token, this token will be used.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|authorizationToken ( String authorizationToken)
specifier|default
name|SoroushBotEndpointBuilder
name|authorizationToken
parameter_list|(
name|String
name|authorizationToken
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"authorizationToken"
argument_list|,
name|authorizationToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The strategy to backoff in case of connection failure. Currently 3          * strategies are supported: 1. Exponential (default): It multiply          * retryWaitingTime by retryExponentialCoefficient after each connection          * failure. 2. Linear: It increase retryWaitingTime by          * retryLinearIncrement after each connection failure. 3. Fixed: Always          * use retryWaitingTime as the time between retries.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: scheduling          */
DECL|method|backOffStrategy (String backOffStrategy)
specifier|default
name|SoroushBotEndpointBuilder
name|backOffStrategy
parameter_list|(
name|String
name|backOffStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backOffStrategy"
argument_list|,
name|backOffStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum amount of time (in millisecond) a thread wait before retrying          * failed request.          *           * The option is a:<code>long</code> type.          *           * Group: scheduling          */
DECL|method|maxRetryWaitingTime ( long maxRetryWaitingTime)
specifier|default
name|SoroushBotEndpointBuilder
name|maxRetryWaitingTime
parameter_list|(
name|long
name|maxRetryWaitingTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxRetryWaitingTime"
argument_list|,
name|maxRetryWaitingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum amount of time (in millisecond) a thread wait before retrying          * failed request.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduling          */
DECL|method|maxRetryWaitingTime ( String maxRetryWaitingTime)
specifier|default
name|SoroushBotEndpointBuilder
name|maxRetryWaitingTime
parameter_list|(
name|String
name|maxRetryWaitingTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxRetryWaitingTime"
argument_list|,
name|maxRetryWaitingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timeout in millisecond to reconnect the existing getMessage          * connection to ensure that the connection is always live and does not          * dead without notifying the bot. this value should not be changed.          *           * The option is a:<code>long</code> type.          *           * Group: scheduling          */
DECL|method|reconnectIdleConnectionTimeout ( long reconnectIdleConnectionTimeout)
specifier|default
name|SoroushBotEndpointBuilder
name|reconnectIdleConnectionTimeout
parameter_list|(
name|long
name|reconnectIdleConnectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectIdleConnectionTimeout"
argument_list|,
name|reconnectIdleConnectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timeout in millisecond to reconnect the existing getMessage          * connection to ensure that the connection is always live and does not          * dead without notifying the bot. this value should not be changed.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduling          */
DECL|method|reconnectIdleConnectionTimeout ( String reconnectIdleConnectionTimeout)
specifier|default
name|SoroushBotEndpointBuilder
name|reconnectIdleConnectionTimeout
parameter_list|(
name|String
name|reconnectIdleConnectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectIdleConnectionTimeout"
argument_list|,
name|reconnectIdleConnectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Coefficient to compute back off time when using Exponential Back Off          * strategy.          *           * The option is a:<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryExponentialCoefficient ( long retryExponentialCoefficient)
specifier|default
name|SoroushBotEndpointBuilder
name|retryExponentialCoefficient
parameter_list|(
name|long
name|retryExponentialCoefficient
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryExponentialCoefficient"
argument_list|,
name|retryExponentialCoefficient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Coefficient to compute back off time when using Exponential Back Off          * strategy.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryExponentialCoefficient ( String retryExponentialCoefficient)
specifier|default
name|SoroushBotEndpointBuilder
name|retryExponentialCoefficient
parameter_list|(
name|String
name|retryExponentialCoefficient
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryExponentialCoefficient"
argument_list|,
name|retryExponentialCoefficient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The amount of time (in millisecond) which adds to waiting time when          * using Linear back off strategy.          *           * The option is a:<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryLinearIncrement ( long retryLinearIncrement)
specifier|default
name|SoroushBotEndpointBuilder
name|retryLinearIncrement
parameter_list|(
name|long
name|retryLinearIncrement
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryLinearIncrement"
argument_list|,
name|retryLinearIncrement
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The amount of time (in millisecond) which adds to waiting time when          * using Linear back off strategy.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryLinearIncrement ( String retryLinearIncrement)
specifier|default
name|SoroushBotEndpointBuilder
name|retryLinearIncrement
parameter_list|(
name|String
name|retryLinearIncrement
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryLinearIncrement"
argument_list|,
name|retryLinearIncrement
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Waiting time before retry failed request (Millisecond). If          * backOffStrategy is not Fixed this is the based value for computing          * back off waiting time. the first retry is always happen immediately          * after failure and retryWaitingTime do not apply to the first retry.          *           * The option is a:<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryWaitingTime (long retryWaitingTime)
specifier|default
name|SoroushBotEndpointBuilder
name|retryWaitingTime
parameter_list|(
name|long
name|retryWaitingTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryWaitingTime"
argument_list|,
name|retryWaitingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Waiting time before retry failed request (Millisecond). If          * backOffStrategy is not Fixed this is the based value for computing          * back off waiting time. the first retry is always happen immediately          * after failure and retryWaitingTime do not apply to the first retry.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduling          */
DECL|method|retryWaitingTime ( String retryWaitingTime)
specifier|default
name|SoroushBotEndpointBuilder
name|retryWaitingTime
parameter_list|(
name|String
name|retryWaitingTime
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retryWaitingTime"
argument_list|,
name|retryWaitingTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Soroush component.      */
DECL|interface|AdvancedSoroushBotEndpointBuilder
specifier|public
interface|interface
name|AdvancedSoroushBotEndpointBuilder
extends|extends
name|AdvancedSoroushBotEndpointConsumerBuilder
extends|,
name|AdvancedSoroushBotEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SoroushBotEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SoroushBotEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSoroushBotEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSoroushBotEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSoroushBotEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedSoroushBotEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.soroushbot.models.SoroushAction</code>      * enum.      */
DECL|enum|SoroushAction
enum|enum
name|SoroushAction
block|{
DECL|enumConstant|sendMessage
name|sendMessage
block|,
DECL|enumConstant|getMessage
name|getMessage
block|,
DECL|enumConstant|uploadFile
name|uploadFile
block|,
DECL|enumConstant|downloadFile
name|downloadFile
block|;     }
comment|/**      * Soroush (camel-soroush)      * To integrate with the Soroush chat bot.      *       * Syntax:<code>soroush:action/authorizationToken</code>      * Category: chat      * Available as of version: 3.0      * Maven coordinates: org.apache.camel:camel-soroush      */
DECL|method|soroushBot (String path)
specifier|default
name|SoroushBotEndpointBuilder
name|soroushBot
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|SoroushBotEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|SoroushBotEndpointBuilder
implements|,
name|AdvancedSoroushBotEndpointBuilder
block|{
specifier|public
name|SoroushBotEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"soroush"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SoroushBotEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

