begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The rabbitmq component allows you produce and consume messages from RabbitMQ  * instances.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|RabbitMQEndpointBuilderFactory
specifier|public
interface|interface
name|RabbitMQEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the RabbitMQ component.      */
DECL|interface|RabbitMQEndpointConsumerBuilder
specifier|public
interface|interface
name|RabbitMQEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedRabbitMQEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The exchange name determines which exchange produced messages will          * sent to. In the case of consumers, the exchange name determines which          * exchange the queue will bind to.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|exchangeName (String exchangeName)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|exchangeName
parameter_list|(
name|String
name|exchangeName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangeName"
argument_list|,
name|exchangeName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is set, camel-rabbitmq will try to create connection          * based on the setting of option addresses. The addresses value is a          * string which looks like server1:12345, server2:12345.          *           * The option is a:<code>com.rabbitmq.client.Address[]</code> type.          *           * Group: common          */
DECL|method|addresses (Object[] addresses)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|addresses
parameter_list|(
name|Object
index|[]
name|addresses
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"addresses"
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is set, camel-rabbitmq will try to create connection          * based on the setting of option addresses. The addresses value is a          * string which looks like server1:12345, server2:12345.          *           * The option will be converted to a          *<code>com.rabbitmq.client.Address[]</code> type.          *           * Group: common          */
DECL|method|addresses (String addresses)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|addresses
parameter_list|(
name|String
name|addresses
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"addresses"
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If it is true, the exchange will be deleted when it is no longer in          * use.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoDelete (boolean autoDelete)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|autoDelete
parameter_list|(
name|boolean
name|autoDelete
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoDelete"
argument_list|,
name|autoDelete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If it is true, the exchange will be deleted when it is no longer in          * use.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoDelete (String autoDelete)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|autoDelete
parameter_list|(
name|String
name|autoDelete
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoDelete"
argument_list|,
name|autoDelete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom RabbitMQ connection factory. When this option is set,          * all connection options (connectionTimeout, requestedChannelMax...)          * set on URI are not used.          *           * The option is a:<code>com.rabbitmq.client.ConnectionFactory</code>          * type.          *           * Group: common          */
DECL|method|connectionFactory ( Object connectionFactory)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|connectionFactory
parameter_list|(
name|Object
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom RabbitMQ connection factory. When this option is set,          * all connection options (connectionTimeout, requestedChannelMax...)          * set on URI are not used.          *           * The option will be converted to a          *<code>com.rabbitmq.client.ConnectionFactory</code> type.          *           * Group: common          */
DECL|method|connectionFactory ( String connectionFactory)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|connectionFactory
parameter_list|(
name|String
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the dead letter exchange.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|deadLetterExchange ( String deadLetterExchange)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|deadLetterExchange
parameter_list|(
name|String
name|deadLetterExchange
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deadLetterExchange"
argument_list|,
name|deadLetterExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The type of the dead letter exchange.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|deadLetterExchangeType ( String deadLetterExchangeType)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|deadLetterExchangeType
parameter_list|(
name|String
name|deadLetterExchangeType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deadLetterExchangeType"
argument_list|,
name|deadLetterExchangeType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the dead letter queue.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|deadLetterQueue ( String deadLetterQueue)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|deadLetterQueue
parameter_list|(
name|String
name|deadLetterQueue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deadLetterQueue"
argument_list|,
name|deadLetterQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The routing key for the dead letter exchange.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|deadLetterRoutingKey ( String deadLetterRoutingKey)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|deadLetterRoutingKey
parameter_list|(
name|String
name|deadLetterRoutingKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deadLetterRoutingKey"
argument_list|,
name|deadLetterRoutingKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, camel declare the exchange and queue name and          * bind them together. If the option is false, camel won't declare the          * exchange and queue name on the server.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|declare (boolean declare)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|declare
parameter_list|(
name|boolean
name|declare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"declare"
argument_list|,
name|declare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, camel declare the exchange and queue name and          * bind them together. If the option is false, camel won't declare the          * exchange and queue name on the server.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|declare (String declare)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|declare
parameter_list|(
name|String
name|declare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"declare"
argument_list|,
name|declare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If we are declaring a durable exchange (the exchange will survive a          * server restart).          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|durable (boolean durable)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|durable
parameter_list|(
name|boolean
name|durable
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"durable"
argument_list|,
name|durable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If we are declaring a durable exchange (the exchange will survive a          * server restart).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|durable (String durable)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|durable
parameter_list|(
name|String
name|durable
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"durable"
argument_list|,
name|durable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The exchange type such as direct or topic.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|exchangeType (String exchangeType)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|exchangeType
parameter_list|(
name|String
name|exchangeType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangeType"
argument_list|,
name|exchangeType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Exclusive queues may only be accessed by the current connection, and          * are deleted when that connection closes.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|exclusive (boolean exclusive)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|exclusive
parameter_list|(
name|boolean
name|exclusive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exclusive"
argument_list|,
name|exclusive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Exclusive queues may only be accessed by the current connection, and          * are deleted when that connection closes.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|exclusive (String exclusive)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|exclusive
parameter_list|(
name|String
name|exclusive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exclusive"
argument_list|,
name|exclusive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The hostname of the running rabbitmq instance or cluster.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|hostname (String hostname)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|hostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hostname"
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Passive queues depend on the queue already to be available at          * RabbitMQ.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|passive (boolean passive)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|passive
parameter_list|(
name|boolean
name|passive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"passive"
argument_list|,
name|passive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Passive queues depend on the queue already to be available at          * RabbitMQ.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|passive (String passive)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|passive
parameter_list|(
name|String
name|passive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"passive"
argument_list|,
name|passive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the host with the running rabbitmq instance or          * cluster. Default value is 5672.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|portNumber (int portNumber)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|portNumber
parameter_list|(
name|int
name|portNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"portNumber"
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the host with the running rabbitmq instance or          * cluster. Default value is 5672.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|portNumber (String portNumber)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|portNumber
parameter_list|(
name|String
name|portNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"portNumber"
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The queue to receive messages from.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|queue (String queue)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|queue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"queue"
argument_list|,
name|queue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The routing key to use when binding a consumer queue to the exchange.          * For producer routing keys, you set the header rabbitmq.ROUTING_KEY.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|routingKey (String routingKey)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|routingKey
parameter_list|(
name|String
name|routingKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"routingKey"
argument_list|,
name|routingKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This can be used if we need to declare the queue but not the          * exchange.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipExchangeDeclare ( boolean skipExchangeDeclare)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|skipExchangeDeclare
parameter_list|(
name|boolean
name|skipExchangeDeclare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipExchangeDeclare"
argument_list|,
name|skipExchangeDeclare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This can be used if we need to declare the queue but not the          * exchange.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipExchangeDeclare ( String skipExchangeDeclare)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|skipExchangeDeclare
parameter_list|(
name|String
name|skipExchangeDeclare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipExchangeDeclare"
argument_list|,
name|skipExchangeDeclare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true the queue will not be bound to the exchange after declaring          * it.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipQueueBind ( boolean skipQueueBind)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|skipQueueBind
parameter_list|(
name|boolean
name|skipQueueBind
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipQueueBind"
argument_list|,
name|skipQueueBind
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true the queue will not be bound to the exchange after declaring          * it.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipQueueBind ( String skipQueueBind)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|skipQueueBind
parameter_list|(
name|String
name|skipQueueBind
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipQueueBind"
argument_list|,
name|skipQueueBind
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true the producer will not declare and bind a queue. This can be          * used for directing messages via an existing routing key.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipQueueDeclare ( boolean skipQueueDeclare)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|skipQueueDeclare
parameter_list|(
name|boolean
name|skipQueueDeclare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipQueueDeclare"
argument_list|,
name|skipQueueDeclare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true the producer will not declare and bind a queue. This can be          * used for directing messages via an existing routing key.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipQueueDeclare ( String skipQueueDeclare)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|skipQueueDeclare
parameter_list|(
name|String
name|skipQueueDeclare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipQueueDeclare"
argument_list|,
name|skipQueueDeclare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The vhost for the channel.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|vhost (String vhost)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|vhost
parameter_list|(
name|String
name|vhost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"vhost"
argument_list|,
name|vhost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If messages should be auto acknowledged.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|autoAck (boolean autoAck)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|autoAck
parameter_list|(
name|boolean
name|autoAck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoAck"
argument_list|,
name|autoAck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If messages should be auto acknowledged.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|autoAck (String autoAck)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|autoAck
parameter_list|(
name|String
name|autoAck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoAck"
argument_list|,
name|autoAck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of concurrent consumers when consuming from broker. (eg          * similar as to the same option for the JMS component).          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|concurrentConsumers ( int concurrentConsumers)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|concurrentConsumers
parameter_list|(
name|int
name|concurrentConsumers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"concurrentConsumers"
argument_list|,
name|concurrentConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of concurrent consumers when consuming from broker. (eg          * similar as to the same option for the JMS component).          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|concurrentConsumers ( String concurrentConsumers)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|concurrentConsumers
parameter_list|(
name|String
name|concurrentConsumers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"concurrentConsumers"
argument_list|,
name|concurrentConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Request exclusive access to the queue (meaning only this consumer can          * access the queue). This is useful when you want a long-lived shared          * queue to be temporarily accessible by just one consumer.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|exclusiveConsumer ( boolean exclusiveConsumer)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|exclusiveConsumer
parameter_list|(
name|boolean
name|exclusiveConsumer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exclusiveConsumer"
argument_list|,
name|exclusiveConsumer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Request exclusive access to the queue (meaning only this consumer can          * access the queue). This is useful when you want a long-lived shared          * queue to be temporarily accessible by just one consumer.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|exclusiveConsumer ( String exclusiveConsumer)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|exclusiveConsumer
parameter_list|(
name|String
name|exclusiveConsumer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exclusiveConsumer"
argument_list|,
name|exclusiveConsumer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of messages that the server will deliver, 0 if          * unlimited. You need to specify the option of prefetchSize,          * prefetchCount, prefetchGlobal at the same time.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|prefetchCount (int prefetchCount)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|prefetchCount
parameter_list|(
name|int
name|prefetchCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"prefetchCount"
argument_list|,
name|prefetchCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of messages that the server will deliver, 0 if          * unlimited. You need to specify the option of prefetchSize,          * prefetchCount, prefetchGlobal at the same time.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|prefetchCount ( String prefetchCount)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|prefetchCount
parameter_list|(
name|String
name|prefetchCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"prefetchCount"
argument_list|,
name|prefetchCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables the quality of service on the RabbitMQConsumer side. You need          * to specify the option of prefetchSize, prefetchCount, prefetchGlobal          * at the same time.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|prefetchEnabled ( boolean prefetchEnabled)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|prefetchEnabled
parameter_list|(
name|boolean
name|prefetchEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"prefetchEnabled"
argument_list|,
name|prefetchEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables the quality of service on the RabbitMQConsumer side. You need          * to specify the option of prefetchSize, prefetchCount, prefetchGlobal          * at the same time.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|prefetchEnabled ( String prefetchEnabled)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|prefetchEnabled
parameter_list|(
name|String
name|prefetchEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"prefetchEnabled"
argument_list|,
name|prefetchEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the settings should be applied to the entire channel rather than          * each consumer You need to specify the option of prefetchSize,          * prefetchCount, prefetchGlobal at the same time.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|prefetchGlobal ( boolean prefetchGlobal)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|prefetchGlobal
parameter_list|(
name|boolean
name|prefetchGlobal
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"prefetchGlobal"
argument_list|,
name|prefetchGlobal
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the settings should be applied to the entire channel rather than          * each consumer You need to specify the option of prefetchSize,          * prefetchCount, prefetchGlobal at the same time.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|prefetchGlobal ( String prefetchGlobal)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|prefetchGlobal
parameter_list|(
name|String
name|prefetchGlobal
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"prefetchGlobal"
argument_list|,
name|prefetchGlobal
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum amount of content (measured in octets) that the server          * will deliver, 0 if unlimited. You need to specify the option of          * prefetchSize, prefetchCount, prefetchGlobal at the same time.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|prefetchSize (int prefetchSize)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|prefetchSize
parameter_list|(
name|int
name|prefetchSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"prefetchSize"
argument_list|,
name|prefetchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum amount of content (measured in octets) that the server          * will deliver, 0 if unlimited. You need to specify the option of          * prefetchSize, prefetchCount, prefetchGlobal at the same time.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|prefetchSize (String prefetchSize)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|prefetchSize
parameter_list|(
name|String
name|prefetchSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"prefetchSize"
argument_list|,
name|prefetchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for authenticated access.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables SSL on connection, accepted value are true, TLS and 'SSLv3.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|sslProtocol (String sslProtocol)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|sslProtocol
parameter_list|(
name|String
name|sslProtocol
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslProtocol"
argument_list|,
name|sslProtocol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure SSL trust manager, SSL should be enabled for this option to          * be effective.          *           * The option is a:<code>javax.net.ssl.TrustManager</code> type.          *           * Group: security          */
DECL|method|trustManager (Object trustManager)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|trustManager
parameter_list|(
name|Object
name|trustManager
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustManager"
argument_list|,
name|trustManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure SSL trust manager, SSL should be enabled for this option to          * be effective.          *           * The option will be converted to a          *<code>javax.net.ssl.TrustManager</code> type.          *           * Group: security          */
DECL|method|trustManager (String trustManager)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|trustManager
parameter_list|(
name|String
name|trustManager
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustManager"
argument_list|,
name|trustManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username in case of authenticated access.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the RabbitMQ component.      */
DECL|interface|AdvancedRabbitMQEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedRabbitMQEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|RabbitMQEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|RabbitMQEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer uses a Thread Pool Executor with a fixed number of          * threads. This setting allows you to set that number of threads.          *           * The option is a:<code>int</code> type.          *           * Group: consumer (advanced)          */
DECL|method|threadPoolSize ( int threadPoolSize)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|threadPoolSize
parameter_list|(
name|int
name|threadPoolSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"threadPoolSize"
argument_list|,
name|threadPoolSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer uses a Thread Pool Executor with a fixed number of          * threads. This setting allows you to set that number of threads.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer (advanced)          */
DECL|method|threadPoolSize ( String threadPoolSize)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|threadPoolSize
parameter_list|(
name|String
name|threadPoolSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"threadPoolSize"
argument_list|,
name|threadPoolSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify arguments for configuring the different RabbitMQ concepts, a          * different prefix is required for each: Exchange: arg.exchange. Queue:          * arg.queue. Binding: arg.binding. For example to declare a queue with          * message ttl argument:          * http://localhost:5672/exchange/queueargs=arg.queue.x-message-ttl=60000.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|args ( Map<String, Object> args)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|args
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"args"
argument_list|,
name|args
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify arguments for configuring the different RabbitMQ concepts, a          * different prefix is required for each: Exchange: arg.exchange. Queue:          * arg.queue. Binding: arg.binding. For example to declare a queue with          * message ttl argument:          * http://localhost:5672/exchange/queueargs=arg.queue.x-message-ttl=60000.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|args (String args)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|args
parameter_list|(
name|String
name|args
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"args"
argument_list|,
name|args
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables connection automatic recovery (uses connection implementation          * that performs automatic recovery when connection shutdown is not          * initiated by the application).          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: advanced          */
DECL|method|automaticRecoveryEnabled ( Boolean automaticRecoveryEnabled)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|automaticRecoveryEnabled
parameter_list|(
name|Boolean
name|automaticRecoveryEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"automaticRecoveryEnabled"
argument_list|,
name|automaticRecoveryEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables connection automatic recovery (uses connection implementation          * that performs automatic recovery when connection shutdown is not          * initiated by the application).          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: advanced          */
DECL|method|automaticRecoveryEnabled ( String automaticRecoveryEnabled)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|automaticRecoveryEnabled
parameter_list|(
name|String
name|automaticRecoveryEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"automaticRecoveryEnabled"
argument_list|,
name|automaticRecoveryEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection client properties (client info used in negotiating with          * the server).          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|clientProperties ( Map<String, Object> clientProperties)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|clientProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|clientProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientProperties"
argument_list|,
name|clientProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection client properties (client info used in negotiating with          * the server).          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|clientProperties ( String clientProperties)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|clientProperties
parameter_list|(
name|String
name|clientProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientProperties"
argument_list|,
name|clientProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection timeout.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( int connectionTimeout)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|connectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection timeout.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( String connectionTimeout)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Network recovery interval in milliseconds (interval used when          * recovering from network failure).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|networkRecoveryInterval ( Integer networkRecoveryInterval)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|networkRecoveryInterval
parameter_list|(
name|Integer
name|networkRecoveryInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"networkRecoveryInterval"
argument_list|,
name|networkRecoveryInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Network recovery interval in milliseconds (interval used when          * recovering from network failure).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|networkRecoveryInterval ( String networkRecoveryInterval)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|networkRecoveryInterval
parameter_list|(
name|String
name|networkRecoveryInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"networkRecoveryInterval"
argument_list|,
name|networkRecoveryInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested channel max (max number of channels offered).          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedChannelMax ( int requestedChannelMax)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|requestedChannelMax
parameter_list|(
name|int
name|requestedChannelMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedChannelMax"
argument_list|,
name|requestedChannelMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested channel max (max number of channels offered).          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedChannelMax ( String requestedChannelMax)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|requestedChannelMax
parameter_list|(
name|String
name|requestedChannelMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedChannelMax"
argument_list|,
name|requestedChannelMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested frame max (max size of frame offered).          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedFrameMax ( int requestedFrameMax)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|requestedFrameMax
parameter_list|(
name|int
name|requestedFrameMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedFrameMax"
argument_list|,
name|requestedFrameMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested frame max (max size of frame offered).          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedFrameMax ( String requestedFrameMax)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|requestedFrameMax
parameter_list|(
name|String
name|requestedFrameMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedFrameMax"
argument_list|,
name|requestedFrameMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested heartbeat (heart-beat in seconds offered).          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedHeartbeat ( int requestedHeartbeat)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|requestedHeartbeat
parameter_list|(
name|int
name|requestedHeartbeat
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedHeartbeat"
argument_list|,
name|requestedHeartbeat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested heartbeat (heart-beat in seconds offered).          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedHeartbeat ( String requestedHeartbeat)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|requestedHeartbeat
parameter_list|(
name|String
name|requestedHeartbeat
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedHeartbeat"
argument_list|,
name|requestedHeartbeat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set timeout for waiting for a reply when using the InOut Exchange          * Pattern (in milliseconds).          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|requestTimeout ( long requestTimeout)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|requestTimeout
parameter_list|(
name|long
name|requestTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeout"
argument_list|,
name|requestTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set timeout for waiting for a reply when using the InOut Exchange          * Pattern (in milliseconds).          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|requestTimeout ( String requestTimeout)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|requestTimeout
parameter_list|(
name|String
name|requestTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeout"
argument_list|,
name|requestTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set requestTimeoutCheckerInterval for inOut exchange.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|requestTimeoutCheckerInterval ( long requestTimeoutCheckerInterval)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|requestTimeoutCheckerInterval
parameter_list|(
name|long
name|requestTimeoutCheckerInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeoutCheckerInterval"
argument_list|,
name|requestTimeoutCheckerInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set requestTimeoutCheckerInterval for inOut exchange.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|requestTimeoutCheckerInterval ( String requestTimeoutCheckerInterval)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|requestTimeoutCheckerInterval
parameter_list|(
name|String
name|requestTimeoutCheckerInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeoutCheckerInterval"
argument_list|,
name|requestTimeoutCheckerInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables connection topology recovery (should topology recovery be          * performed).          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: advanced          */
DECL|method|topologyRecoveryEnabled ( Boolean topologyRecoveryEnabled)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|topologyRecoveryEnabled
parameter_list|(
name|Boolean
name|topologyRecoveryEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"topologyRecoveryEnabled"
argument_list|,
name|topologyRecoveryEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables connection topology recovery (should topology recovery be          * performed).          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: advanced          */
DECL|method|topologyRecoveryEnabled ( String topologyRecoveryEnabled)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|topologyRecoveryEnabled
parameter_list|(
name|String
name|topologyRecoveryEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"topologyRecoveryEnabled"
argument_list|,
name|topologyRecoveryEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When true and an inOut Exchange failed on the consumer side send the          * caused Exception back in the response.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|transferException ( boolean transferException)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|transferException
parameter_list|(
name|boolean
name|transferException
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When true and an inOut Exchange failed on the consumer side send the          * caused Exception back in the response.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|transferException ( String transferException)
specifier|default
name|AdvancedRabbitMQEndpointConsumerBuilder
name|transferException
parameter_list|(
name|String
name|transferException
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the RabbitMQ component.      */
DECL|interface|RabbitMQEndpointProducerBuilder
specifier|public
interface|interface
name|RabbitMQEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedRabbitMQEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The exchange name determines which exchange produced messages will          * sent to. In the case of consumers, the exchange name determines which          * exchange the queue will bind to.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|exchangeName (String exchangeName)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|exchangeName
parameter_list|(
name|String
name|exchangeName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangeName"
argument_list|,
name|exchangeName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is set, camel-rabbitmq will try to create connection          * based on the setting of option addresses. The addresses value is a          * string which looks like server1:12345, server2:12345.          *           * The option is a:<code>com.rabbitmq.client.Address[]</code> type.          *           * Group: common          */
DECL|method|addresses (Object[] addresses)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|addresses
parameter_list|(
name|Object
index|[]
name|addresses
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"addresses"
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is set, camel-rabbitmq will try to create connection          * based on the setting of option addresses. The addresses value is a          * string which looks like server1:12345, server2:12345.          *           * The option will be converted to a          *<code>com.rabbitmq.client.Address[]</code> type.          *           * Group: common          */
DECL|method|addresses (String addresses)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|addresses
parameter_list|(
name|String
name|addresses
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"addresses"
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If it is true, the exchange will be deleted when it is no longer in          * use.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoDelete (boolean autoDelete)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|autoDelete
parameter_list|(
name|boolean
name|autoDelete
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoDelete"
argument_list|,
name|autoDelete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If it is true, the exchange will be deleted when it is no longer in          * use.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoDelete (String autoDelete)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|autoDelete
parameter_list|(
name|String
name|autoDelete
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoDelete"
argument_list|,
name|autoDelete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom RabbitMQ connection factory. When this option is set,          * all connection options (connectionTimeout, requestedChannelMax...)          * set on URI are not used.          *           * The option is a:<code>com.rabbitmq.client.ConnectionFactory</code>          * type.          *           * Group: common          */
DECL|method|connectionFactory ( Object connectionFactory)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|connectionFactory
parameter_list|(
name|Object
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom RabbitMQ connection factory. When this option is set,          * all connection options (connectionTimeout, requestedChannelMax...)          * set on URI are not used.          *           * The option will be converted to a          *<code>com.rabbitmq.client.ConnectionFactory</code> type.          *           * Group: common          */
DECL|method|connectionFactory ( String connectionFactory)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|connectionFactory
parameter_list|(
name|String
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the dead letter exchange.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|deadLetterExchange ( String deadLetterExchange)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|deadLetterExchange
parameter_list|(
name|String
name|deadLetterExchange
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deadLetterExchange"
argument_list|,
name|deadLetterExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The type of the dead letter exchange.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|deadLetterExchangeType ( String deadLetterExchangeType)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|deadLetterExchangeType
parameter_list|(
name|String
name|deadLetterExchangeType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deadLetterExchangeType"
argument_list|,
name|deadLetterExchangeType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the dead letter queue.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|deadLetterQueue ( String deadLetterQueue)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|deadLetterQueue
parameter_list|(
name|String
name|deadLetterQueue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deadLetterQueue"
argument_list|,
name|deadLetterQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The routing key for the dead letter exchange.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|deadLetterRoutingKey ( String deadLetterRoutingKey)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|deadLetterRoutingKey
parameter_list|(
name|String
name|deadLetterRoutingKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deadLetterRoutingKey"
argument_list|,
name|deadLetterRoutingKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, camel declare the exchange and queue name and          * bind them together. If the option is false, camel won't declare the          * exchange and queue name on the server.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|declare (boolean declare)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|declare
parameter_list|(
name|boolean
name|declare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"declare"
argument_list|,
name|declare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, camel declare the exchange and queue name and          * bind them together. If the option is false, camel won't declare the          * exchange and queue name on the server.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|declare (String declare)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|declare
parameter_list|(
name|String
name|declare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"declare"
argument_list|,
name|declare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If we are declaring a durable exchange (the exchange will survive a          * server restart).          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|durable (boolean durable)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|durable
parameter_list|(
name|boolean
name|durable
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"durable"
argument_list|,
name|durable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If we are declaring a durable exchange (the exchange will survive a          * server restart).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|durable (String durable)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|durable
parameter_list|(
name|String
name|durable
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"durable"
argument_list|,
name|durable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The exchange type such as direct or topic.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|exchangeType (String exchangeType)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|exchangeType
parameter_list|(
name|String
name|exchangeType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangeType"
argument_list|,
name|exchangeType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Exclusive queues may only be accessed by the current connection, and          * are deleted when that connection closes.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|exclusive (boolean exclusive)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|exclusive
parameter_list|(
name|boolean
name|exclusive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exclusive"
argument_list|,
name|exclusive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Exclusive queues may only be accessed by the current connection, and          * are deleted when that connection closes.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|exclusive (String exclusive)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|exclusive
parameter_list|(
name|String
name|exclusive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exclusive"
argument_list|,
name|exclusive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The hostname of the running rabbitmq instance or cluster.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|hostname (String hostname)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|hostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hostname"
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Passive queues depend on the queue already to be available at          * RabbitMQ.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|passive (boolean passive)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|passive
parameter_list|(
name|boolean
name|passive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"passive"
argument_list|,
name|passive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Passive queues depend on the queue already to be available at          * RabbitMQ.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|passive (String passive)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|passive
parameter_list|(
name|String
name|passive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"passive"
argument_list|,
name|passive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the host with the running rabbitmq instance or          * cluster. Default value is 5672.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|portNumber (int portNumber)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|portNumber
parameter_list|(
name|int
name|portNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"portNumber"
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the host with the running rabbitmq instance or          * cluster. Default value is 5672.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|portNumber (String portNumber)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|portNumber
parameter_list|(
name|String
name|portNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"portNumber"
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The queue to receive messages from.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|queue (String queue)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|queue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"queue"
argument_list|,
name|queue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The routing key to use when binding a consumer queue to the exchange.          * For producer routing keys, you set the header rabbitmq.ROUTING_KEY.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|routingKey (String routingKey)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|routingKey
parameter_list|(
name|String
name|routingKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"routingKey"
argument_list|,
name|routingKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This can be used if we need to declare the queue but not the          * exchange.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipExchangeDeclare ( boolean skipExchangeDeclare)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|skipExchangeDeclare
parameter_list|(
name|boolean
name|skipExchangeDeclare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipExchangeDeclare"
argument_list|,
name|skipExchangeDeclare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This can be used if we need to declare the queue but not the          * exchange.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipExchangeDeclare ( String skipExchangeDeclare)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|skipExchangeDeclare
parameter_list|(
name|String
name|skipExchangeDeclare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipExchangeDeclare"
argument_list|,
name|skipExchangeDeclare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true the queue will not be bound to the exchange after declaring          * it.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipQueueBind ( boolean skipQueueBind)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|skipQueueBind
parameter_list|(
name|boolean
name|skipQueueBind
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipQueueBind"
argument_list|,
name|skipQueueBind
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true the queue will not be bound to the exchange after declaring          * it.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipQueueBind ( String skipQueueBind)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|skipQueueBind
parameter_list|(
name|String
name|skipQueueBind
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipQueueBind"
argument_list|,
name|skipQueueBind
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true the producer will not declare and bind a queue. This can be          * used for directing messages via an existing routing key.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipQueueDeclare ( boolean skipQueueDeclare)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|skipQueueDeclare
parameter_list|(
name|boolean
name|skipQueueDeclare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipQueueDeclare"
argument_list|,
name|skipQueueDeclare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true the producer will not declare and bind a queue. This can be          * used for directing messages via an existing routing key.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipQueueDeclare ( String skipQueueDeclare)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|skipQueueDeclare
parameter_list|(
name|String
name|skipQueueDeclare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipQueueDeclare"
argument_list|,
name|skipQueueDeclare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The vhost for the channel.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|vhost (String vhost)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|vhost
parameter_list|(
name|String
name|vhost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"vhost"
argument_list|,
name|vhost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allow pass null values to header.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|allowNullHeaders ( boolean allowNullHeaders)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|allowNullHeaders
parameter_list|(
name|boolean
name|allowNullHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowNullHeaders"
argument_list|,
name|allowNullHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allow pass null values to header.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|allowNullHeaders ( String allowNullHeaders)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|allowNullHeaders
parameter_list|(
name|String
name|allowNullHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowNullHeaders"
argument_list|,
name|allowNullHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the bridgeEndpoint is true, the producer will ignore the message          * header of rabbitmq.EXCHANGE_NAME and rabbitmq.ROUTING_KEY.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|bridgeEndpoint ( boolean bridgeEndpoint)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|bridgeEndpoint
parameter_list|(
name|boolean
name|bridgeEndpoint
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeEndpoint"
argument_list|,
name|bridgeEndpoint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the bridgeEndpoint is true, the producer will ignore the message          * header of rabbitmq.EXCHANGE_NAME and rabbitmq.ROUTING_KEY.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|bridgeEndpoint ( String bridgeEndpoint)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|bridgeEndpoint
parameter_list|(
name|String
name|bridgeEndpoint
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeEndpoint"
argument_list|,
name|bridgeEndpoint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Get maximum number of opened channel in pool.          *           * The option is a:<code>int</code> type.          *           * Group: producer          */
DECL|method|channelPoolMaxSize ( int channelPoolMaxSize)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|channelPoolMaxSize
parameter_list|(
name|int
name|channelPoolMaxSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channelPoolMaxSize"
argument_list|,
name|channelPoolMaxSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Get maximum number of opened channel in pool.          *           * The option will be converted to a<code>int</code> type.          *           * Group: producer          */
DECL|method|channelPoolMaxSize ( String channelPoolMaxSize)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|channelPoolMaxSize
parameter_list|(
name|String
name|channelPoolMaxSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channelPoolMaxSize"
argument_list|,
name|channelPoolMaxSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the maximum number of milliseconds to wait for a channel from the          * pool.          *           * The option is a:<code>long</code> type.          *           * Group: producer          */
DECL|method|channelPoolMaxWait ( long channelPoolMaxWait)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|channelPoolMaxWait
parameter_list|(
name|long
name|channelPoolMaxWait
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channelPoolMaxWait"
argument_list|,
name|channelPoolMaxWait
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the maximum number of milliseconds to wait for a channel from the          * pool.          *           * The option will be converted to a<code>long</code> type.          *           * Group: producer          */
DECL|method|channelPoolMaxWait ( String channelPoolMaxWait)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|channelPoolMaxWait
parameter_list|(
name|String
name|channelPoolMaxWait
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channelPoolMaxWait"
argument_list|,
name|channelPoolMaxWait
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When true, an exception will be thrown when the message cannot be          * delivered (basic.return) and the message is marked as mandatory.          * PublisherAcknowledgement will also be activated in this case. See          * also publisher acknowledgements - When will messages be confirmed.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|guaranteedDeliveries ( boolean guaranteedDeliveries)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|guaranteedDeliveries
parameter_list|(
name|boolean
name|guaranteedDeliveries
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"guaranteedDeliveries"
argument_list|,
name|guaranteedDeliveries
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When true, an exception will be thrown when the message cannot be          * delivered (basic.return) and the message is marked as mandatory.          * PublisherAcknowledgement will also be activated in this case. See          * also publisher acknowledgements - When will messages be confirmed.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|guaranteedDeliveries ( String guaranteedDeliveries)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|guaranteedDeliveries
parameter_list|(
name|String
name|guaranteedDeliveries
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"guaranteedDeliveries"
argument_list|,
name|guaranteedDeliveries
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This flag tells the server how to react if the message cannot be          * routed to a queue consumer immediately. If this flag is set, the          * server will return an undeliverable message with a Return method. If          * this flag is zero, the server will queue the message, but with no          * guarantee that it will ever be consumed. If the header is present          * rabbitmq.IMMEDIATE it will override this option.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|immediate (boolean immediate)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|immediate
parameter_list|(
name|boolean
name|immediate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"immediate"
argument_list|,
name|immediate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This flag tells the server how to react if the message cannot be          * routed to a queue consumer immediately. If this flag is set, the          * server will return an undeliverable message with a Return method. If          * this flag is zero, the server will queue the message, but with no          * guarantee that it will ever be consumed. If the header is present          * rabbitmq.IMMEDIATE it will override this option.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|immediate (String immediate)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|immediate
parameter_list|(
name|String
name|immediate
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"immediate"
argument_list|,
name|immediate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This flag tells the server how to react if the message cannot be          * routed to a queue. If this flag is set, the server will return an          * unroutable message with a Return method. If this flag is zero, the          * server silently drops the message. If the header is present          * rabbitmq.MANDATORY it will override this option.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|mandatory (boolean mandatory)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|mandatory
parameter_list|(
name|boolean
name|mandatory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mandatory"
argument_list|,
name|mandatory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This flag tells the server how to react if the message cannot be          * routed to a queue. If this flag is set, the server will return an          * unroutable message with a Return method. If this flag is zero, the          * server silently drops the message. If the header is present          * rabbitmq.MANDATORY it will override this option.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|mandatory (String mandatory)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|mandatory
parameter_list|(
name|String
name|mandatory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mandatory"
argument_list|,
name|mandatory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When true, the message will be published with publisher          * acknowledgements turned on.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|publisherAcknowledgements ( boolean publisherAcknowledgements)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|publisherAcknowledgements
parameter_list|(
name|boolean
name|publisherAcknowledgements
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publisherAcknowledgements"
argument_list|,
name|publisherAcknowledgements
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When true, the message will be published with publisher          * acknowledgements turned on.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|publisherAcknowledgements ( String publisherAcknowledgements)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|publisherAcknowledgements
parameter_list|(
name|String
name|publisherAcknowledgements
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publisherAcknowledgements"
argument_list|,
name|publisherAcknowledgements
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The amount of time in milliseconds to wait for a basic.ack response          * from RabbitMQ server.          *           * The option is a:<code>long</code> type.          *           * Group: producer          */
DECL|method|publisherAcknowledgementsTimeout ( long publisherAcknowledgementsTimeout)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|publisherAcknowledgementsTimeout
parameter_list|(
name|long
name|publisherAcknowledgementsTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publisherAcknowledgementsTimeout"
argument_list|,
name|publisherAcknowledgementsTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The amount of time in milliseconds to wait for a basic.ack response          * from RabbitMQ server.          *           * The option will be converted to a<code>long</code> type.          *           * Group: producer          */
DECL|method|publisherAcknowledgementsTimeout ( String publisherAcknowledgementsTimeout)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|publisherAcknowledgementsTimeout
parameter_list|(
name|String
name|publisherAcknowledgementsTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publisherAcknowledgementsTimeout"
argument_list|,
name|publisherAcknowledgementsTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for authenticated access.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables SSL on connection, accepted value are true, TLS and 'SSLv3.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|sslProtocol (String sslProtocol)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|sslProtocol
parameter_list|(
name|String
name|sslProtocol
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslProtocol"
argument_list|,
name|sslProtocol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure SSL trust manager, SSL should be enabled for this option to          * be effective.          *           * The option is a:<code>javax.net.ssl.TrustManager</code> type.          *           * Group: security          */
DECL|method|trustManager (Object trustManager)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|trustManager
parameter_list|(
name|Object
name|trustManager
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustManager"
argument_list|,
name|trustManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure SSL trust manager, SSL should be enabled for this option to          * be effective.          *           * The option will be converted to a          *<code>javax.net.ssl.TrustManager</code> type.          *           * Group: security          */
DECL|method|trustManager (String trustManager)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|trustManager
parameter_list|(
name|String
name|trustManager
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustManager"
argument_list|,
name|trustManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username in case of authenticated access.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|RabbitMQEndpointProducerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the RabbitMQ component.      */
DECL|interface|AdvancedRabbitMQEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedRabbitMQEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|RabbitMQEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|RabbitMQEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Specify arguments for configuring the different RabbitMQ concepts, a          * different prefix is required for each: Exchange: arg.exchange. Queue:          * arg.queue. Binding: arg.binding. For example to declare a queue with          * message ttl argument:          * http://localhost:5672/exchange/queueargs=arg.queue.x-message-ttl=60000.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|args ( Map<String, Object> args)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|args
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"args"
argument_list|,
name|args
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify arguments for configuring the different RabbitMQ concepts, a          * different prefix is required for each: Exchange: arg.exchange. Queue:          * arg.queue. Binding: arg.binding. For example to declare a queue with          * message ttl argument:          * http://localhost:5672/exchange/queueargs=arg.queue.x-message-ttl=60000.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|args (String args)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|args
parameter_list|(
name|String
name|args
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"args"
argument_list|,
name|args
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables connection automatic recovery (uses connection implementation          * that performs automatic recovery when connection shutdown is not          * initiated by the application).          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: advanced          */
DECL|method|automaticRecoveryEnabled ( Boolean automaticRecoveryEnabled)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|automaticRecoveryEnabled
parameter_list|(
name|Boolean
name|automaticRecoveryEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"automaticRecoveryEnabled"
argument_list|,
name|automaticRecoveryEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables connection automatic recovery (uses connection implementation          * that performs automatic recovery when connection shutdown is not          * initiated by the application).          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: advanced          */
DECL|method|automaticRecoveryEnabled ( String automaticRecoveryEnabled)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|automaticRecoveryEnabled
parameter_list|(
name|String
name|automaticRecoveryEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"automaticRecoveryEnabled"
argument_list|,
name|automaticRecoveryEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection client properties (client info used in negotiating with          * the server).          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|clientProperties ( Map<String, Object> clientProperties)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|clientProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|clientProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientProperties"
argument_list|,
name|clientProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection client properties (client info used in negotiating with          * the server).          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|clientProperties ( String clientProperties)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|clientProperties
parameter_list|(
name|String
name|clientProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientProperties"
argument_list|,
name|clientProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection timeout.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( int connectionTimeout)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|connectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection timeout.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( String connectionTimeout)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Network recovery interval in milliseconds (interval used when          * recovering from network failure).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|networkRecoveryInterval ( Integer networkRecoveryInterval)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|networkRecoveryInterval
parameter_list|(
name|Integer
name|networkRecoveryInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"networkRecoveryInterval"
argument_list|,
name|networkRecoveryInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Network recovery interval in milliseconds (interval used when          * recovering from network failure).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|networkRecoveryInterval ( String networkRecoveryInterval)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|networkRecoveryInterval
parameter_list|(
name|String
name|networkRecoveryInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"networkRecoveryInterval"
argument_list|,
name|networkRecoveryInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested channel max (max number of channels offered).          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedChannelMax ( int requestedChannelMax)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|requestedChannelMax
parameter_list|(
name|int
name|requestedChannelMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedChannelMax"
argument_list|,
name|requestedChannelMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested channel max (max number of channels offered).          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedChannelMax ( String requestedChannelMax)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|requestedChannelMax
parameter_list|(
name|String
name|requestedChannelMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedChannelMax"
argument_list|,
name|requestedChannelMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested frame max (max size of frame offered).          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedFrameMax ( int requestedFrameMax)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|requestedFrameMax
parameter_list|(
name|int
name|requestedFrameMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedFrameMax"
argument_list|,
name|requestedFrameMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested frame max (max size of frame offered).          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedFrameMax ( String requestedFrameMax)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|requestedFrameMax
parameter_list|(
name|String
name|requestedFrameMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedFrameMax"
argument_list|,
name|requestedFrameMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested heartbeat (heart-beat in seconds offered).          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedHeartbeat ( int requestedHeartbeat)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|requestedHeartbeat
parameter_list|(
name|int
name|requestedHeartbeat
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedHeartbeat"
argument_list|,
name|requestedHeartbeat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested heartbeat (heart-beat in seconds offered).          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedHeartbeat ( String requestedHeartbeat)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|requestedHeartbeat
parameter_list|(
name|String
name|requestedHeartbeat
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedHeartbeat"
argument_list|,
name|requestedHeartbeat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set timeout for waiting for a reply when using the InOut Exchange          * Pattern (in milliseconds).          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|requestTimeout ( long requestTimeout)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|requestTimeout
parameter_list|(
name|long
name|requestTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeout"
argument_list|,
name|requestTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set timeout for waiting for a reply when using the InOut Exchange          * Pattern (in milliseconds).          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|requestTimeout ( String requestTimeout)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|requestTimeout
parameter_list|(
name|String
name|requestTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeout"
argument_list|,
name|requestTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set requestTimeoutCheckerInterval for inOut exchange.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|requestTimeoutCheckerInterval ( long requestTimeoutCheckerInterval)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|requestTimeoutCheckerInterval
parameter_list|(
name|long
name|requestTimeoutCheckerInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeoutCheckerInterval"
argument_list|,
name|requestTimeoutCheckerInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set requestTimeoutCheckerInterval for inOut exchange.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|requestTimeoutCheckerInterval ( String requestTimeoutCheckerInterval)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|requestTimeoutCheckerInterval
parameter_list|(
name|String
name|requestTimeoutCheckerInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeoutCheckerInterval"
argument_list|,
name|requestTimeoutCheckerInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables connection topology recovery (should topology recovery be          * performed).          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: advanced          */
DECL|method|topologyRecoveryEnabled ( Boolean topologyRecoveryEnabled)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|topologyRecoveryEnabled
parameter_list|(
name|Boolean
name|topologyRecoveryEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"topologyRecoveryEnabled"
argument_list|,
name|topologyRecoveryEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables connection topology recovery (should topology recovery be          * performed).          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: advanced          */
DECL|method|topologyRecoveryEnabled ( String topologyRecoveryEnabled)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|topologyRecoveryEnabled
parameter_list|(
name|String
name|topologyRecoveryEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"topologyRecoveryEnabled"
argument_list|,
name|topologyRecoveryEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When true and an inOut Exchange failed on the consumer side send the          * caused Exception back in the response.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|transferException ( boolean transferException)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|transferException
parameter_list|(
name|boolean
name|transferException
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When true and an inOut Exchange failed on the consumer side send the          * caused Exception back in the response.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|transferException ( String transferException)
specifier|default
name|AdvancedRabbitMQEndpointProducerBuilder
name|transferException
parameter_list|(
name|String
name|transferException
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the RabbitMQ component.      */
DECL|interface|RabbitMQEndpointBuilder
specifier|public
interface|interface
name|RabbitMQEndpointBuilder
extends|extends
name|RabbitMQEndpointConsumerBuilder
extends|,
name|RabbitMQEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedRabbitMQEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The exchange name determines which exchange produced messages will          * sent to. In the case of consumers, the exchange name determines which          * exchange the queue will bind to.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|exchangeName (String exchangeName)
specifier|default
name|RabbitMQEndpointBuilder
name|exchangeName
parameter_list|(
name|String
name|exchangeName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangeName"
argument_list|,
name|exchangeName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is set, camel-rabbitmq will try to create connection          * based on the setting of option addresses. The addresses value is a          * string which looks like server1:12345, server2:12345.          *           * The option is a:<code>com.rabbitmq.client.Address[]</code> type.          *           * Group: common          */
DECL|method|addresses (Object[] addresses)
specifier|default
name|RabbitMQEndpointBuilder
name|addresses
parameter_list|(
name|Object
index|[]
name|addresses
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"addresses"
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is set, camel-rabbitmq will try to create connection          * based on the setting of option addresses. The addresses value is a          * string which looks like server1:12345, server2:12345.          *           * The option will be converted to a          *<code>com.rabbitmq.client.Address[]</code> type.          *           * Group: common          */
DECL|method|addresses (String addresses)
specifier|default
name|RabbitMQEndpointBuilder
name|addresses
parameter_list|(
name|String
name|addresses
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"addresses"
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If it is true, the exchange will be deleted when it is no longer in          * use.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoDelete (boolean autoDelete)
specifier|default
name|RabbitMQEndpointBuilder
name|autoDelete
parameter_list|(
name|boolean
name|autoDelete
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoDelete"
argument_list|,
name|autoDelete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If it is true, the exchange will be deleted when it is no longer in          * use.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoDelete (String autoDelete)
specifier|default
name|RabbitMQEndpointBuilder
name|autoDelete
parameter_list|(
name|String
name|autoDelete
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoDelete"
argument_list|,
name|autoDelete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom RabbitMQ connection factory. When this option is set,          * all connection options (connectionTimeout, requestedChannelMax...)          * set on URI are not used.          *           * The option is a:<code>com.rabbitmq.client.ConnectionFactory</code>          * type.          *           * Group: common          */
DECL|method|connectionFactory ( Object connectionFactory)
specifier|default
name|RabbitMQEndpointBuilder
name|connectionFactory
parameter_list|(
name|Object
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom RabbitMQ connection factory. When this option is set,          * all connection options (connectionTimeout, requestedChannelMax...)          * set on URI are not used.          *           * The option will be converted to a          *<code>com.rabbitmq.client.ConnectionFactory</code> type.          *           * Group: common          */
DECL|method|connectionFactory ( String connectionFactory)
specifier|default
name|RabbitMQEndpointBuilder
name|connectionFactory
parameter_list|(
name|String
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the dead letter exchange.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|deadLetterExchange ( String deadLetterExchange)
specifier|default
name|RabbitMQEndpointBuilder
name|deadLetterExchange
parameter_list|(
name|String
name|deadLetterExchange
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deadLetterExchange"
argument_list|,
name|deadLetterExchange
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The type of the dead letter exchange.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|deadLetterExchangeType ( String deadLetterExchangeType)
specifier|default
name|RabbitMQEndpointBuilder
name|deadLetterExchangeType
parameter_list|(
name|String
name|deadLetterExchangeType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deadLetterExchangeType"
argument_list|,
name|deadLetterExchangeType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the dead letter queue.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|deadLetterQueue (String deadLetterQueue)
specifier|default
name|RabbitMQEndpointBuilder
name|deadLetterQueue
parameter_list|(
name|String
name|deadLetterQueue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deadLetterQueue"
argument_list|,
name|deadLetterQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The routing key for the dead letter exchange.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|deadLetterRoutingKey ( String deadLetterRoutingKey)
specifier|default
name|RabbitMQEndpointBuilder
name|deadLetterRoutingKey
parameter_list|(
name|String
name|deadLetterRoutingKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deadLetterRoutingKey"
argument_list|,
name|deadLetterRoutingKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, camel declare the exchange and queue name and          * bind them together. If the option is false, camel won't declare the          * exchange and queue name on the server.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|declare (boolean declare)
specifier|default
name|RabbitMQEndpointBuilder
name|declare
parameter_list|(
name|boolean
name|declare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"declare"
argument_list|,
name|declare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, camel declare the exchange and queue name and          * bind them together. If the option is false, camel won't declare the          * exchange and queue name on the server.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|declare (String declare)
specifier|default
name|RabbitMQEndpointBuilder
name|declare
parameter_list|(
name|String
name|declare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"declare"
argument_list|,
name|declare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If we are declaring a durable exchange (the exchange will survive a          * server restart).          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|durable (boolean durable)
specifier|default
name|RabbitMQEndpointBuilder
name|durable
parameter_list|(
name|boolean
name|durable
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"durable"
argument_list|,
name|durable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If we are declaring a durable exchange (the exchange will survive a          * server restart).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|durable (String durable)
specifier|default
name|RabbitMQEndpointBuilder
name|durable
parameter_list|(
name|String
name|durable
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"durable"
argument_list|,
name|durable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The exchange type such as direct or topic.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|exchangeType (String exchangeType)
specifier|default
name|RabbitMQEndpointBuilder
name|exchangeType
parameter_list|(
name|String
name|exchangeType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangeType"
argument_list|,
name|exchangeType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Exclusive queues may only be accessed by the current connection, and          * are deleted when that connection closes.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|exclusive (boolean exclusive)
specifier|default
name|RabbitMQEndpointBuilder
name|exclusive
parameter_list|(
name|boolean
name|exclusive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exclusive"
argument_list|,
name|exclusive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Exclusive queues may only be accessed by the current connection, and          * are deleted when that connection closes.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|exclusive (String exclusive)
specifier|default
name|RabbitMQEndpointBuilder
name|exclusive
parameter_list|(
name|String
name|exclusive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exclusive"
argument_list|,
name|exclusive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The hostname of the running rabbitmq instance or cluster.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|hostname (String hostname)
specifier|default
name|RabbitMQEndpointBuilder
name|hostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hostname"
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Passive queues depend on the queue already to be available at          * RabbitMQ.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|passive (boolean passive)
specifier|default
name|RabbitMQEndpointBuilder
name|passive
parameter_list|(
name|boolean
name|passive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"passive"
argument_list|,
name|passive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Passive queues depend on the queue already to be available at          * RabbitMQ.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|passive (String passive)
specifier|default
name|RabbitMQEndpointBuilder
name|passive
parameter_list|(
name|String
name|passive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"passive"
argument_list|,
name|passive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the host with the running rabbitmq instance or          * cluster. Default value is 5672.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|portNumber (int portNumber)
specifier|default
name|RabbitMQEndpointBuilder
name|portNumber
parameter_list|(
name|int
name|portNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"portNumber"
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the host with the running rabbitmq instance or          * cluster. Default value is 5672.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|portNumber (String portNumber)
specifier|default
name|RabbitMQEndpointBuilder
name|portNumber
parameter_list|(
name|String
name|portNumber
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"portNumber"
argument_list|,
name|portNumber
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The queue to receive messages from.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|queue (String queue)
specifier|default
name|RabbitMQEndpointBuilder
name|queue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"queue"
argument_list|,
name|queue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The routing key to use when binding a consumer queue to the exchange.          * For producer routing keys, you set the header rabbitmq.ROUTING_KEY.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|routingKey (String routingKey)
specifier|default
name|RabbitMQEndpointBuilder
name|routingKey
parameter_list|(
name|String
name|routingKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"routingKey"
argument_list|,
name|routingKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This can be used if we need to declare the queue but not the          * exchange.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipExchangeDeclare ( boolean skipExchangeDeclare)
specifier|default
name|RabbitMQEndpointBuilder
name|skipExchangeDeclare
parameter_list|(
name|boolean
name|skipExchangeDeclare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipExchangeDeclare"
argument_list|,
name|skipExchangeDeclare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This can be used if we need to declare the queue but not the          * exchange.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipExchangeDeclare ( String skipExchangeDeclare)
specifier|default
name|RabbitMQEndpointBuilder
name|skipExchangeDeclare
parameter_list|(
name|String
name|skipExchangeDeclare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipExchangeDeclare"
argument_list|,
name|skipExchangeDeclare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true the queue will not be bound to the exchange after declaring          * it.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipQueueBind (boolean skipQueueBind)
specifier|default
name|RabbitMQEndpointBuilder
name|skipQueueBind
parameter_list|(
name|boolean
name|skipQueueBind
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipQueueBind"
argument_list|,
name|skipQueueBind
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true the queue will not be bound to the exchange after declaring          * it.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipQueueBind (String skipQueueBind)
specifier|default
name|RabbitMQEndpointBuilder
name|skipQueueBind
parameter_list|(
name|String
name|skipQueueBind
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipQueueBind"
argument_list|,
name|skipQueueBind
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true the producer will not declare and bind a queue. This can be          * used for directing messages via an existing routing key.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipQueueDeclare ( boolean skipQueueDeclare)
specifier|default
name|RabbitMQEndpointBuilder
name|skipQueueDeclare
parameter_list|(
name|boolean
name|skipQueueDeclare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipQueueDeclare"
argument_list|,
name|skipQueueDeclare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true the producer will not declare and bind a queue. This can be          * used for directing messages via an existing routing key.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipQueueDeclare (String skipQueueDeclare)
specifier|default
name|RabbitMQEndpointBuilder
name|skipQueueDeclare
parameter_list|(
name|String
name|skipQueueDeclare
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipQueueDeclare"
argument_list|,
name|skipQueueDeclare
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The vhost for the channel.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|vhost (String vhost)
specifier|default
name|RabbitMQEndpointBuilder
name|vhost
parameter_list|(
name|String
name|vhost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"vhost"
argument_list|,
name|vhost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for authenticated access.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|RabbitMQEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables SSL on connection, accepted value are true, TLS and 'SSLv3.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|sslProtocol (String sslProtocol)
specifier|default
name|RabbitMQEndpointBuilder
name|sslProtocol
parameter_list|(
name|String
name|sslProtocol
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslProtocol"
argument_list|,
name|sslProtocol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure SSL trust manager, SSL should be enabled for this option to          * be effective.          *           * The option is a:<code>javax.net.ssl.TrustManager</code> type.          *           * Group: security          */
DECL|method|trustManager (Object trustManager)
specifier|default
name|RabbitMQEndpointBuilder
name|trustManager
parameter_list|(
name|Object
name|trustManager
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustManager"
argument_list|,
name|trustManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure SSL trust manager, SSL should be enabled for this option to          * be effective.          *           * The option will be converted to a          *<code>javax.net.ssl.TrustManager</code> type.          *           * Group: security          */
DECL|method|trustManager (String trustManager)
specifier|default
name|RabbitMQEndpointBuilder
name|trustManager
parameter_list|(
name|String
name|trustManager
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustManager"
argument_list|,
name|trustManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username in case of authenticated access.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|RabbitMQEndpointBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the RabbitMQ component.      */
DECL|interface|AdvancedRabbitMQEndpointBuilder
specifier|public
interface|interface
name|AdvancedRabbitMQEndpointBuilder
extends|extends
name|AdvancedRabbitMQEndpointConsumerBuilder
extends|,
name|AdvancedRabbitMQEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|RabbitMQEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|RabbitMQEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Specify arguments for configuring the different RabbitMQ concepts, a          * different prefix is required for each: Exchange: arg.exchange. Queue:          * arg.queue. Binding: arg.binding. For example to declare a queue with          * message ttl argument:          * http://localhost:5672/exchange/queueargs=arg.queue.x-message-ttl=60000.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|args (Map<String, Object> args)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|args
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"args"
argument_list|,
name|args
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify arguments for configuring the different RabbitMQ concepts, a          * different prefix is required for each: Exchange: arg.exchange. Queue:          * arg.queue. Binding: arg.binding. For example to declare a queue with          * message ttl argument:          * http://localhost:5672/exchange/queueargs=arg.queue.x-message-ttl=60000.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|args (String args)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|args
parameter_list|(
name|String
name|args
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"args"
argument_list|,
name|args
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables connection automatic recovery (uses connection implementation          * that performs automatic recovery when connection shutdown is not          * initiated by the application).          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: advanced          */
DECL|method|automaticRecoveryEnabled ( Boolean automaticRecoveryEnabled)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|automaticRecoveryEnabled
parameter_list|(
name|Boolean
name|automaticRecoveryEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"automaticRecoveryEnabled"
argument_list|,
name|automaticRecoveryEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables connection automatic recovery (uses connection implementation          * that performs automatic recovery when connection shutdown is not          * initiated by the application).          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: advanced          */
DECL|method|automaticRecoveryEnabled ( String automaticRecoveryEnabled)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|automaticRecoveryEnabled
parameter_list|(
name|String
name|automaticRecoveryEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"automaticRecoveryEnabled"
argument_list|,
name|automaticRecoveryEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection client properties (client info used in negotiating with          * the server).          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|clientProperties ( Map<String, Object> clientProperties)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|clientProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|clientProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientProperties"
argument_list|,
name|clientProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection client properties (client info used in negotiating with          * the server).          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|clientProperties ( String clientProperties)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|clientProperties
parameter_list|(
name|String
name|clientProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientProperties"
argument_list|,
name|clientProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection timeout.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( int connectionTimeout)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|connectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection timeout.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( String connectionTimeout)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Network recovery interval in milliseconds (interval used when          * recovering from network failure).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|networkRecoveryInterval ( Integer networkRecoveryInterval)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|networkRecoveryInterval
parameter_list|(
name|Integer
name|networkRecoveryInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"networkRecoveryInterval"
argument_list|,
name|networkRecoveryInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Network recovery interval in milliseconds (interval used when          * recovering from network failure).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|networkRecoveryInterval ( String networkRecoveryInterval)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|networkRecoveryInterval
parameter_list|(
name|String
name|networkRecoveryInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"networkRecoveryInterval"
argument_list|,
name|networkRecoveryInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested channel max (max number of channels offered).          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedChannelMax ( int requestedChannelMax)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|requestedChannelMax
parameter_list|(
name|int
name|requestedChannelMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedChannelMax"
argument_list|,
name|requestedChannelMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested channel max (max number of channels offered).          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedChannelMax ( String requestedChannelMax)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|requestedChannelMax
parameter_list|(
name|String
name|requestedChannelMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedChannelMax"
argument_list|,
name|requestedChannelMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested frame max (max size of frame offered).          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedFrameMax ( int requestedFrameMax)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|requestedFrameMax
parameter_list|(
name|int
name|requestedFrameMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedFrameMax"
argument_list|,
name|requestedFrameMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested frame max (max size of frame offered).          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedFrameMax ( String requestedFrameMax)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|requestedFrameMax
parameter_list|(
name|String
name|requestedFrameMax
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedFrameMax"
argument_list|,
name|requestedFrameMax
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested heartbeat (heart-beat in seconds offered).          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedHeartbeat ( int requestedHeartbeat)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|requestedHeartbeat
parameter_list|(
name|int
name|requestedHeartbeat
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedHeartbeat"
argument_list|,
name|requestedHeartbeat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection requested heartbeat (heart-beat in seconds offered).          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|requestedHeartbeat ( String requestedHeartbeat)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|requestedHeartbeat
parameter_list|(
name|String
name|requestedHeartbeat
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestedHeartbeat"
argument_list|,
name|requestedHeartbeat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set timeout for waiting for a reply when using the InOut Exchange          * Pattern (in milliseconds).          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|requestTimeout ( long requestTimeout)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|requestTimeout
parameter_list|(
name|long
name|requestTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeout"
argument_list|,
name|requestTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set timeout for waiting for a reply when using the InOut Exchange          * Pattern (in milliseconds).          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|requestTimeout ( String requestTimeout)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|requestTimeout
parameter_list|(
name|String
name|requestTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeout"
argument_list|,
name|requestTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set requestTimeoutCheckerInterval for inOut exchange.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|requestTimeoutCheckerInterval ( long requestTimeoutCheckerInterval)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|requestTimeoutCheckerInterval
parameter_list|(
name|long
name|requestTimeoutCheckerInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeoutCheckerInterval"
argument_list|,
name|requestTimeoutCheckerInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set requestTimeoutCheckerInterval for inOut exchange.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|requestTimeoutCheckerInterval ( String requestTimeoutCheckerInterval)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|requestTimeoutCheckerInterval
parameter_list|(
name|String
name|requestTimeoutCheckerInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestTimeoutCheckerInterval"
argument_list|,
name|requestTimeoutCheckerInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables connection topology recovery (should topology recovery be          * performed).          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: advanced          */
DECL|method|topologyRecoveryEnabled ( Boolean topologyRecoveryEnabled)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|topologyRecoveryEnabled
parameter_list|(
name|Boolean
name|topologyRecoveryEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"topologyRecoveryEnabled"
argument_list|,
name|topologyRecoveryEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables connection topology recovery (should topology recovery be          * performed).          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: advanced          */
DECL|method|topologyRecoveryEnabled ( String topologyRecoveryEnabled)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|topologyRecoveryEnabled
parameter_list|(
name|String
name|topologyRecoveryEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"topologyRecoveryEnabled"
argument_list|,
name|topologyRecoveryEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When true and an inOut Exchange failed on the consumer side send the          * caused Exception back in the response.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|transferException ( boolean transferException)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|transferException
parameter_list|(
name|boolean
name|transferException
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When true and an inOut Exchange failed on the consumer side send the          * caused Exception back in the response.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|transferException ( String transferException)
specifier|default
name|AdvancedRabbitMQEndpointBuilder
name|transferException
parameter_list|(
name|String
name|transferException
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * RabbitMQ (camel-rabbitmq)      * The rabbitmq component allows you produce and consume messages from      * RabbitMQ instances.      *       * Syntax:<code>rabbitmq:exchangeName</code>      * Category: messaging      * Available as of version: 2.12      * Maven coordinates: org.apache.camel:camel-rabbitmq      */
DECL|method|rabbitMQ (String path)
specifier|default
name|RabbitMQEndpointBuilder
name|rabbitMQ
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|RabbitMQEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|RabbitMQEndpointBuilder
implements|,
name|AdvancedRabbitMQEndpointBuilder
block|{
specifier|public
name|RabbitMQEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"rabbitmq"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|RabbitMQEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

