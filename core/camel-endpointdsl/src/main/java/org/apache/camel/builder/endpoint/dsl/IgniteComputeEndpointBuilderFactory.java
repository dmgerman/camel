begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_comment
comment|/**  * The Ignite Compute endpoint is one of camel-ignite endpoints which allows you  * to run compute operations on the cluster by passing in an IgniteCallable, an  * IgniteRunnable, an IgniteClosure, or collections of them, along with their  * parameters if necessary.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|IgniteComputeEndpointBuilderFactory
specifier|public
interface|interface
name|IgniteComputeEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint for the Ignite Compute component.      */
DECL|interface|IgniteComputeEndpointBuilder
specifier|public
interface|interface
name|IgniteComputeEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedIgniteComputeEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedIgniteComputeEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * An expression that returns the Cluster Group for the IgniteCompute          * instance.          *           * The option is a:          *<code>org.apache.camel.component.ignite.ClusterGroupExpression</code>          * type.          *           * Group: producer          */
DECL|method|clusterGroupExpression ( Object clusterGroupExpression)
specifier|default
name|IgniteComputeEndpointBuilder
name|clusterGroupExpression
parameter_list|(
name|Object
name|clusterGroupExpression
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clusterGroupExpression"
argument_list|,
name|clusterGroupExpression
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An expression that returns the Cluster Group for the IgniteCompute          * instance.          *           * The option will be converted to a          *<code>org.apache.camel.component.ignite.ClusterGroupExpression</code>          * type.          *           * Group: producer          */
DECL|method|clusterGroupExpression ( String clusterGroupExpression)
specifier|default
name|IgniteComputeEndpointBuilder
name|clusterGroupExpression
parameter_list|(
name|String
name|clusterGroupExpression
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clusterGroupExpression"
argument_list|,
name|clusterGroupExpression
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the compute job, which will be set via          * IgniteCompute#withName(String).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|computeName (String computeName)
specifier|default
name|IgniteComputeEndpointBuilder
name|computeName
parameter_list|(
name|String
name|computeName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"computeName"
argument_list|,
name|computeName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The compute operation to perform. Possible values: CALL, BROADCAST,          * APPLY, EXECUTE, RUN, AFFINITY_CALL, AFFINITY_RUN. The component          * expects different payload types depending on the operation.          *           * The option is a:          *<code>org.apache.camel.component.ignite.compute.IgniteComputeExecutionType</code> type.          *           * Required: true          * Group: producer          */
DECL|method|executionType ( IgniteComputeExecutionType executionType)
specifier|default
name|IgniteComputeEndpointBuilder
name|executionType
parameter_list|(
name|IgniteComputeExecutionType
name|executionType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"executionType"
argument_list|,
name|executionType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The compute operation to perform. Possible values: CALL, BROADCAST,          * APPLY, EXECUTE, RUN, AFFINITY_CALL, AFFINITY_RUN. The component          * expects different payload types depending on the operation.          *           * The option will be converted to a          *<code>org.apache.camel.component.ignite.compute.IgniteComputeExecutionType</code> type.          *           * Required: true          * Group: producer          */
DECL|method|executionType (String executionType)
specifier|default
name|IgniteComputeEndpointBuilder
name|executionType
parameter_list|(
name|String
name|executionType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"executionType"
argument_list|,
name|executionType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|IgniteComputeEndpointBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|IgniteComputeEndpointBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to propagate the incoming body if the return type of the          * underlying Ignite operation is void.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|propagateIncomingBodyIfNoReturnValue ( boolean propagateIncomingBodyIfNoReturnValue)
specifier|default
name|IgniteComputeEndpointBuilder
name|propagateIncomingBodyIfNoReturnValue
parameter_list|(
name|boolean
name|propagateIncomingBodyIfNoReturnValue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"propagateIncomingBodyIfNoReturnValue"
argument_list|,
name|propagateIncomingBodyIfNoReturnValue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to propagate the incoming body if the return type of the          * underlying Ignite operation is void.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|propagateIncomingBodyIfNoReturnValue ( String propagateIncomingBodyIfNoReturnValue)
specifier|default
name|IgniteComputeEndpointBuilder
name|propagateIncomingBodyIfNoReturnValue
parameter_list|(
name|String
name|propagateIncomingBodyIfNoReturnValue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"propagateIncomingBodyIfNoReturnValue"
argument_list|,
name|propagateIncomingBodyIfNoReturnValue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The task name, only applicable if using the          * IgniteComputeExecutionType#EXECUTE execution type.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|taskName (String taskName)
specifier|default
name|IgniteComputeEndpointBuilder
name|taskName
parameter_list|(
name|String
name|taskName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"taskName"
argument_list|,
name|taskName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timeout interval for triggered jobs, in milliseconds, which will          * be set via IgniteCompute#withTimeout(long).          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: producer          */
DECL|method|timeoutMillis (Long timeoutMillis)
specifier|default
name|IgniteComputeEndpointBuilder
name|timeoutMillis
parameter_list|(
name|Long
name|timeoutMillis
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeoutMillis"
argument_list|,
name|timeoutMillis
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timeout interval for triggered jobs, in milliseconds, which will          * be set via IgniteCompute#withTimeout(long).          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: producer          */
DECL|method|timeoutMillis (String timeoutMillis)
specifier|default
name|IgniteComputeEndpointBuilder
name|timeoutMillis
parameter_list|(
name|String
name|timeoutMillis
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeoutMillis"
argument_list|,
name|timeoutMillis
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to treat Collections as cache objects or as Collections          * of items to insert/update/compute, etc.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|treatCollectionsAsCacheObjects ( boolean treatCollectionsAsCacheObjects)
specifier|default
name|IgniteComputeEndpointBuilder
name|treatCollectionsAsCacheObjects
parameter_list|(
name|boolean
name|treatCollectionsAsCacheObjects
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"treatCollectionsAsCacheObjects"
argument_list|,
name|treatCollectionsAsCacheObjects
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to treat Collections as cache objects or as Collections          * of items to insert/update/compute, etc.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|treatCollectionsAsCacheObjects ( String treatCollectionsAsCacheObjects)
specifier|default
name|IgniteComputeEndpointBuilder
name|treatCollectionsAsCacheObjects
parameter_list|(
name|String
name|treatCollectionsAsCacheObjects
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"treatCollectionsAsCacheObjects"
argument_list|,
name|treatCollectionsAsCacheObjects
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Ignite Compute component.      */
DECL|interface|AdvancedIgniteComputeEndpointBuilder
specifier|public
interface|interface
name|AdvancedIgniteComputeEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|IgniteComputeEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|IgniteComputeEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedIgniteComputeEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedIgniteComputeEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedIgniteComputeEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedIgniteComputeEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.ignite.compute.IgniteComputeExecutionType</code> enum.      */
DECL|enum|IgniteComputeExecutionType
enum|enum
name|IgniteComputeExecutionType
block|{
DECL|enumConstant|CALL
name|CALL
block|,
DECL|enumConstant|BROADCAST
name|BROADCAST
block|,
DECL|enumConstant|APPLY
name|APPLY
block|,
DECL|enumConstant|EXECUTE
name|EXECUTE
block|,
DECL|enumConstant|RUN
name|RUN
block|,
DECL|enumConstant|AFFINITY_CALL
name|AFFINITY_CALL
block|,
DECL|enumConstant|AFFINITY_RUN
name|AFFINITY_RUN
block|;     }
comment|/**      * Ignite Compute (camel-ignite)      * The Ignite Compute endpoint is one of camel-ignite endpoints which allows      * you to run compute operations on the cluster by passing in an      * IgniteCallable, an IgniteRunnable, an IgniteClosure, or collections of      * them, along with their parameters if necessary.      *       * Category: nosql,cache,compute      * Available as of version: 2.17      * Maven coordinates: org.apache.camel:camel-ignite      *       * Syntax:<code>ignite-compute:endpointId</code>      *       * Path parameter: endpointId (required)      * The endpoint ID (not used).      */
DECL|method|igniteCompute (String path)
specifier|default
name|IgniteComputeEndpointBuilder
name|igniteCompute
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|IgniteComputeEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|IgniteComputeEndpointBuilder
implements|,
name|AdvancedIgniteComputeEndpointBuilder
block|{
specifier|public
name|IgniteComputeEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"ignite-compute"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|IgniteComputeEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

