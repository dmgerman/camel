begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PollingConsumerPollStrategy
import|;
end_import

begin_comment
comment|/**  * The aws-sqs component is used for sending and receiving messages to Amazon's  * SQS service.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|SqsEndpointBuilderFactory
specifier|public
interface|interface
name|SqsEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the AWS Simple Queue Service      * component.      */
DECL|interface|SqsEndpointConsumerBuilder
specifier|public
interface|interface
name|SqsEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSqsEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSqsEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The hostname of the Amazon AWS cloud.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|amazonAWSHost (String amazonAWSHost)
specifier|default
name|SqsEndpointConsumerBuilder
name|amazonAWSHost
parameter_list|(
name|String
name|amazonAWSHost
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"amazonAWSHost"
argument_list|,
name|amazonAWSHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the AmazonSQS as client.          *           * The option is a:<code>com.amazonaws.services.sqs.AmazonSQS</code>          * type.          *           * Group: common          */
DECL|method|amazonSQSClient ( Object amazonSQSClient)
specifier|default
name|SqsEndpointConsumerBuilder
name|amazonSQSClient
parameter_list|(
name|Object
name|amazonSQSClient
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"amazonSQSClient"
argument_list|,
name|amazonSQSClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the AmazonSQS as client.          *           * The option will be converted to a          *<code>com.amazonaws.services.sqs.AmazonSQS</code> type.          *           * Group: common          */
DECL|method|amazonSQSClient ( String amazonSQSClient)
specifier|default
name|SqsEndpointConsumerBuilder
name|amazonSQSClient
parameter_list|(
name|String
name|amazonSQSClient
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"amazonSQSClient"
argument_list|,
name|amazonSQSClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting the autocreation of the queue.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoCreateQueue ( boolean autoCreateQueue)
specifier|default
name|SqsEndpointConsumerBuilder
name|autoCreateQueue
parameter_list|(
name|boolean
name|autoCreateQueue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoCreateQueue"
argument_list|,
name|autoCreateQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting the autocreation of the queue.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoCreateQueue ( String autoCreateQueue)
specifier|default
name|SqsEndpointConsumerBuilder
name|autoCreateQueue
parameter_list|(
name|String
name|autoCreateQueue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoCreateQueue"
argument_list|,
name|autoCreateQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to map headers to/from Camel.          *           * The option is a:          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: common          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|SqsEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to map headers to/from Camel.          *           * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: common          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|SqsEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify the queue owner aws account id when you need to connect the          * queue with different account owner.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|queueOwnerAWSAccountId ( String queueOwnerAWSAccountId)
specifier|default
name|SqsEndpointConsumerBuilder
name|queueOwnerAWSAccountId
parameter_list|(
name|String
name|queueOwnerAWSAccountId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queueOwnerAWSAccountId"
argument_list|,
name|queueOwnerAWSAccountId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify the queue region which could be used with          * queueOwnerAWSAccountId to build the service URL. When using this          * parameter, the configuration will expect the capitalized name of the          * region (for example AP_EAST_1) You'll need to use the name          * Regions.EU_WEST_1.name().          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|region (String region)
specifier|default
name|SqsEndpointConsumerBuilder
name|region
parameter_list|(
name|String
name|region
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"region"
argument_list|,
name|region
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of attribute names to receive when consuming. Multiple names          * can be separated by comma.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|attributeNames (String attributeNames)
specifier|default
name|SqsEndpointConsumerBuilder
name|attributeNames
parameter_list|(
name|String
name|attributeNames
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"attributeNames"
argument_list|,
name|attributeNames
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|SqsEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|SqsEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows you to use multiple threads to poll the sqs queue to increase          * throughput.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|concurrentConsumers ( int concurrentConsumers)
specifier|default
name|SqsEndpointConsumerBuilder
name|concurrentConsumers
parameter_list|(
name|int
name|concurrentConsumers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"concurrentConsumers"
argument_list|,
name|concurrentConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows you to use multiple threads to poll the sqs queue to increase          * throughput.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|concurrentConsumers ( String concurrentConsumers)
specifier|default
name|SqsEndpointConsumerBuilder
name|concurrentConsumers
parameter_list|(
name|String
name|concurrentConsumers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"concurrentConsumers"
argument_list|,
name|concurrentConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default visibility timeout (in seconds).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: consumer          */
DECL|method|defaultVisibilityTimeout ( Integer defaultVisibilityTimeout)
specifier|default
name|SqsEndpointConsumerBuilder
name|defaultVisibilityTimeout
parameter_list|(
name|Integer
name|defaultVisibilityTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"defaultVisibilityTimeout"
argument_list|,
name|defaultVisibilityTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default visibility timeout (in seconds).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: consumer          */
DECL|method|defaultVisibilityTimeout ( String defaultVisibilityTimeout)
specifier|default
name|SqsEndpointConsumerBuilder
name|defaultVisibilityTimeout
parameter_list|(
name|String
name|defaultVisibilityTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"defaultVisibilityTimeout"
argument_list|,
name|defaultVisibilityTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delete message from SQS after it has been read.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|deleteAfterRead ( boolean deleteAfterRead)
specifier|default
name|SqsEndpointConsumerBuilder
name|deleteAfterRead
parameter_list|(
name|boolean
name|deleteAfterRead
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"deleteAfterRead"
argument_list|,
name|deleteAfterRead
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delete message from SQS after it has been read.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|deleteAfterRead ( String deleteAfterRead)
specifier|default
name|SqsEndpointConsumerBuilder
name|deleteAfterRead
parameter_list|(
name|String
name|deleteAfterRead
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"deleteAfterRead"
argument_list|,
name|deleteAfterRead
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to send the DeleteMessage to the SQS queue if an          * exchange fails to get through a filter. If 'false' and exchange does          * not make it through a Camel filter upstream in the route, then don't          * send DeleteMessage.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|deleteIfFiltered ( boolean deleteIfFiltered)
specifier|default
name|SqsEndpointConsumerBuilder
name|deleteIfFiltered
parameter_list|(
name|boolean
name|deleteIfFiltered
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"deleteIfFiltered"
argument_list|,
name|deleteIfFiltered
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to send the DeleteMessage to the SQS queue if an          * exchange fails to get through a filter. If 'false' and exchange does          * not make it through a Camel filter upstream in the route, then don't          * send DeleteMessage.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|deleteIfFiltered ( String deleteIfFiltered)
specifier|default
name|SqsEndpointConsumerBuilder
name|deleteIfFiltered
parameter_list|(
name|String
name|deleteIfFiltered
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"deleteIfFiltered"
argument_list|,
name|deleteIfFiltered
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled then a scheduled background task will keep extending the          * message visibility on SQS. This is needed if it takes a long time to          * process the message. If set to true defaultVisibilityTimeout must be          * set. See details at Amazon docs.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|extendMessageVisibility ( boolean extendMessageVisibility)
specifier|default
name|SqsEndpointConsumerBuilder
name|extendMessageVisibility
parameter_list|(
name|boolean
name|extendMessageVisibility
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"extendMessageVisibility"
argument_list|,
name|extendMessageVisibility
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled then a scheduled background task will keep extending the          * message visibility on SQS. This is needed if it takes a long time to          * process the message. If set to true defaultVisibilityTimeout must be          * set. See details at Amazon docs.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|extendMessageVisibility ( String extendMessageVisibility)
specifier|default
name|SqsEndpointConsumerBuilder
name|extendMessageVisibility
parameter_list|(
name|String
name|extendMessageVisibility
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"extendMessageVisibility"
argument_list|,
name|extendMessageVisibility
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The length of time, in seconds, for which Amazon SQS can reuse a data          * key to encrypt or decrypt messages before calling AWS KMS again. An          * integer representing seconds, between 60 seconds (1 minute) and          * 86,400 seconds (24 hours). Default: 300 (5 minutes).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: consumer          */
DECL|method|kmsDataKeyReusePeriodSeconds ( Integer kmsDataKeyReusePeriodSeconds)
specifier|default
name|SqsEndpointConsumerBuilder
name|kmsDataKeyReusePeriodSeconds
parameter_list|(
name|Integer
name|kmsDataKeyReusePeriodSeconds
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"kmsDataKeyReusePeriodSeconds"
argument_list|,
name|kmsDataKeyReusePeriodSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The length of time, in seconds, for which Amazon SQS can reuse a data          * key to encrypt or decrypt messages before calling AWS KMS again. An          * integer representing seconds, between 60 seconds (1 minute) and          * 86,400 seconds (24 hours). Default: 300 (5 minutes).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: consumer          */
DECL|method|kmsDataKeyReusePeriodSeconds ( String kmsDataKeyReusePeriodSeconds)
specifier|default
name|SqsEndpointConsumerBuilder
name|kmsDataKeyReusePeriodSeconds
parameter_list|(
name|String
name|kmsDataKeyReusePeriodSeconds
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"kmsDataKeyReusePeriodSeconds"
argument_list|,
name|kmsDataKeyReusePeriodSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The ID of an AWS-managed customer master key (CMK) for Amazon SQS or          * a custom CMK.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|kmsMasterKeyId (String kmsMasterKeyId)
specifier|default
name|SqsEndpointConsumerBuilder
name|kmsMasterKeyId
parameter_list|(
name|String
name|kmsMasterKeyId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"kmsMasterKeyId"
argument_list|,
name|kmsMasterKeyId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Gets the maximum number of messages as a limit to poll at each          * polling. Is default unlimited, but use 0 or negative number to          * disable it as unlimited.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|maxMessagesPerPoll ( int maxMessagesPerPoll)
specifier|default
name|SqsEndpointConsumerBuilder
name|maxMessagesPerPoll
parameter_list|(
name|int
name|maxMessagesPerPoll
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessagesPerPoll"
argument_list|,
name|maxMessagesPerPoll
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Gets the maximum number of messages as a limit to poll at each          * polling. Is default unlimited, but use 0 or negative number to          * disable it as unlimited.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|maxMessagesPerPoll ( String maxMessagesPerPoll)
specifier|default
name|SqsEndpointConsumerBuilder
name|maxMessagesPerPoll
parameter_list|(
name|String
name|maxMessagesPerPoll
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessagesPerPoll"
argument_list|,
name|maxMessagesPerPoll
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of message attribute names to receive when consuming. Multiple          * names can be separated by comma.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|messageAttributeNames ( String messageAttributeNames)
specifier|default
name|SqsEndpointConsumerBuilder
name|messageAttributeNames
parameter_list|(
name|String
name|messageAttributeNames
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageAttributeNames"
argument_list|,
name|messageAttributeNames
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( boolean sendEmptyMessageWhenIdle)
specifier|default
name|SqsEndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|boolean
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( String sendEmptyMessageWhenIdle)
specifier|default
name|SqsEndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|String
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Server Side Encryption is enabled or not on the queue.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|serverSideEncryptionEnabled ( boolean serverSideEncryptionEnabled)
specifier|default
name|SqsEndpointConsumerBuilder
name|serverSideEncryptionEnabled
parameter_list|(
name|boolean
name|serverSideEncryptionEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"serverSideEncryptionEnabled"
argument_list|,
name|serverSideEncryptionEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Server Side Encryption is enabled or not on the queue.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|serverSideEncryptionEnabled ( String serverSideEncryptionEnabled)
specifier|default
name|SqsEndpointConsumerBuilder
name|serverSideEncryptionEnabled
parameter_list|(
name|String
name|serverSideEncryptionEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"serverSideEncryptionEnabled"
argument_list|,
name|serverSideEncryptionEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The duration (in seconds) that the received messages are hidden from          * subsequent retrieve requests after being retrieved by a          * ReceiveMessage request to set in the          * com.amazonaws.services.sqs.model.SetQueueAttributesRequest. This only          * make sense if its different from defaultVisibilityTimeout. It changes          * the queue visibility timeout attribute permanently.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: consumer          */
DECL|method|visibilityTimeout ( Integer visibilityTimeout)
specifier|default
name|SqsEndpointConsumerBuilder
name|visibilityTimeout
parameter_list|(
name|Integer
name|visibilityTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"visibilityTimeout"
argument_list|,
name|visibilityTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The duration (in seconds) that the received messages are hidden from          * subsequent retrieve requests after being retrieved by a          * ReceiveMessage request to set in the          * com.amazonaws.services.sqs.model.SetQueueAttributesRequest. This only          * make sense if its different from defaultVisibilityTimeout. It changes          * the queue visibility timeout attribute permanently.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: consumer          */
DECL|method|visibilityTimeout ( String visibilityTimeout)
specifier|default
name|SqsEndpointConsumerBuilder
name|visibilityTimeout
parameter_list|(
name|String
name|visibilityTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"visibilityTimeout"
argument_list|,
name|visibilityTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Duration in seconds (0 to 20) that the ReceiveMessage action call          * will wait until a message is in the queue to include in the response.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: consumer          */
DECL|method|waitTimeSeconds ( Integer waitTimeSeconds)
specifier|default
name|SqsEndpointConsumerBuilder
name|waitTimeSeconds
parameter_list|(
name|Integer
name|waitTimeSeconds
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"waitTimeSeconds"
argument_list|,
name|waitTimeSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Duration in seconds (0 to 20) that the ReceiveMessage action call          * will wait until a message is in the queue to include in the response.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: consumer          */
DECL|method|waitTimeSeconds ( String waitTimeSeconds)
specifier|default
name|SqsEndpointConsumerBuilder
name|waitTimeSeconds
parameter_list|(
name|String
name|waitTimeSeconds
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"waitTimeSeconds"
argument_list|,
name|waitTimeSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( int backoffErrorThreshold)
specifier|default
name|SqsEndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|int
name|backoffErrorThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( String backoffErrorThreshold)
specifier|default
name|SqsEndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|String
name|backoffErrorThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( int backoffIdleThreshold)
specifier|default
name|SqsEndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|int
name|backoffIdleThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( String backoffIdleThreshold)
specifier|default
name|SqsEndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|String
name|backoffIdleThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( int backoffMultiplier)
specifier|default
name|SqsEndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|int
name|backoffMultiplier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( String backoffMultiplier)
specifier|default
name|SqsEndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|String
name|backoffMultiplier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (long delay)
specifier|default
name|SqsEndpointConsumerBuilder
name|delay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (String delay)
specifier|default
name|SqsEndpointConsumerBuilder
name|delay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy (boolean greedy)
specifier|default
name|SqsEndpointConsumerBuilder
name|greedy
parameter_list|(
name|boolean
name|greedy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy (String greedy)
specifier|default
name|SqsEndpointConsumerBuilder
name|greedy
parameter_list|(
name|String
name|greedy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay (long initialDelay)
specifier|default
name|SqsEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|long
name|initialDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay (String initialDelay)
specifier|default
name|SqsEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|String
name|initialDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option is a:<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( LoggingLevel runLoggingLevel)
specifier|default
name|SqsEndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|LoggingLevel
name|runLoggingLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( String runLoggingLevel)
specifier|default
name|SqsEndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|String
name|runLoggingLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option is a:          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( ScheduledExecutorService scheduledExecutorService)
specifier|default
name|SqsEndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|ScheduledExecutorService
name|scheduledExecutorService
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option will be converted to a          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( String scheduledExecutorService)
specifier|default
name|SqsEndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|String
name|scheduledExecutorService
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a cron scheduler from either camel-spring or camel-quartz          * component.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: scheduler          */
DECL|method|scheduler (String scheduler)
specifier|default
name|SqsEndpointConsumerBuilder
name|scheduler
parameter_list|(
name|String
name|scheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduler"
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz, Spring based scheduler.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( Map<String, Object> schedulerProperties)
specifier|default
name|SqsEndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|schedulerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz, Spring based scheduler.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( String schedulerProperties)
specifier|default
name|SqsEndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|String
name|schedulerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler (boolean startScheduler)
specifier|default
name|SqsEndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|boolean
name|startScheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler (String startScheduler)
specifier|default
name|SqsEndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|String
name|startScheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option is a:<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit (TimeUnit timeUnit)
specifier|default
name|SqsEndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option will be converted to a          *<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit (String timeUnit)
specifier|default
name|SqsEndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|String
name|timeUnit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay (boolean useFixedDelay)
specifier|default
name|SqsEndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|boolean
name|useFixedDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay (String useFixedDelay)
specifier|default
name|SqsEndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|String
name|useFixedDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To define a proxy host when instantiating the SQS client.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyHost (String proxyHost)
specifier|default
name|SqsEndpointConsumerBuilder
name|proxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxyHost"
argument_list|,
name|proxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To define a proxy port when instantiating the SQS client.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: proxy          */
DECL|method|proxyPort (Integer proxyPort)
specifier|default
name|SqsEndpointConsumerBuilder
name|proxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To define a proxy port when instantiating the SQS client.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: proxy          */
DECL|method|proxyPort (String proxyPort)
specifier|default
name|SqsEndpointConsumerBuilder
name|proxyPort
parameter_list|(
name|String
name|proxyPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximumMessageSize (in bytes) an SQS message can contain for this          * queue.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: queue          */
DECL|method|maximumMessageSize ( Integer maximumMessageSize)
specifier|default
name|SqsEndpointConsumerBuilder
name|maximumMessageSize
parameter_list|(
name|Integer
name|maximumMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maximumMessageSize"
argument_list|,
name|maximumMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximumMessageSize (in bytes) an SQS message can contain for this          * queue.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: queue          */
DECL|method|maximumMessageSize ( String maximumMessageSize)
specifier|default
name|SqsEndpointConsumerBuilder
name|maximumMessageSize
parameter_list|(
name|String
name|maximumMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maximumMessageSize"
argument_list|,
name|maximumMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The messageRetentionPeriod (in seconds) a message will be retained by          * SQS for this queue.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: queue          */
DECL|method|messageRetentionPeriod ( Integer messageRetentionPeriod)
specifier|default
name|SqsEndpointConsumerBuilder
name|messageRetentionPeriod
parameter_list|(
name|Integer
name|messageRetentionPeriod
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageRetentionPeriod"
argument_list|,
name|messageRetentionPeriod
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The messageRetentionPeriod (in seconds) a message will be retained by          * SQS for this queue.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: queue          */
DECL|method|messageRetentionPeriod ( String messageRetentionPeriod)
specifier|default
name|SqsEndpointConsumerBuilder
name|messageRetentionPeriod
parameter_list|(
name|String
name|messageRetentionPeriod
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageRetentionPeriod"
argument_list|,
name|messageRetentionPeriod
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The policy for this queue.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: queue          */
DECL|method|policy (String policy)
specifier|default
name|SqsEndpointConsumerBuilder
name|policy
parameter_list|(
name|String
name|policy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"policy"
argument_list|,
name|policy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If you do not specify WaitTimeSeconds in the request, the queue          * attribute ReceiveMessageWaitTimeSeconds is used to determine how long          * to wait.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: queue          */
DECL|method|receiveMessageWaitTimeSeconds ( Integer receiveMessageWaitTimeSeconds)
specifier|default
name|SqsEndpointConsumerBuilder
name|receiveMessageWaitTimeSeconds
parameter_list|(
name|Integer
name|receiveMessageWaitTimeSeconds
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveMessageWaitTimeSeconds"
argument_list|,
name|receiveMessageWaitTimeSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If you do not specify WaitTimeSeconds in the request, the queue          * attribute ReceiveMessageWaitTimeSeconds is used to determine how long          * to wait.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: queue          */
DECL|method|receiveMessageWaitTimeSeconds ( String receiveMessageWaitTimeSeconds)
specifier|default
name|SqsEndpointConsumerBuilder
name|receiveMessageWaitTimeSeconds
parameter_list|(
name|String
name|receiveMessageWaitTimeSeconds
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveMessageWaitTimeSeconds"
argument_list|,
name|receiveMessageWaitTimeSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify the policy that send message to DeadLetter queue. See detail          * at Amazon docs.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: queue          */
DECL|method|redrivePolicy (String redrivePolicy)
specifier|default
name|SqsEndpointConsumerBuilder
name|redrivePolicy
parameter_list|(
name|String
name|redrivePolicy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"redrivePolicy"
argument_list|,
name|redrivePolicy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Access Key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessKey (String accessKey)
specifier|default
name|SqsEndpointConsumerBuilder
name|accessKey
parameter_list|(
name|String
name|accessKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"accessKey"
argument_list|,
name|accessKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Secret Key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|secretKey (String secretKey)
specifier|default
name|SqsEndpointConsumerBuilder
name|secretKey
parameter_list|(
name|String
name|secretKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"secretKey"
argument_list|,
name|secretKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the AWS Simple Queue Service      * component.      */
DECL|interface|AdvancedSqsEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedSqsEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SqsEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SqsEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedSqsEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedSqsEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedSqsEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedSqsEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option is a:          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( PollingConsumerPollStrategy pollStrategy)
specifier|default
name|AdvancedSqsEndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|PollingConsumerPollStrategy
name|pollStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option will be converted to a          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( String pollStrategy)
specifier|default
name|AdvancedSqsEndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|String
name|pollStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSqsEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSqsEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if you want to apply delaySeconds option to the queue or on          * single messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|delayQueue (boolean delayQueue)
specifier|default
name|AdvancedSqsEndpointConsumerBuilder
name|delayQueue
parameter_list|(
name|boolean
name|delayQueue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delayQueue"
argument_list|,
name|delayQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if you want to apply delaySeconds option to the queue or on          * single messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|delayQueue (String delayQueue)
specifier|default
name|AdvancedSqsEndpointConsumerBuilder
name|delayQueue
parameter_list|(
name|String
name|delayQueue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delayQueue"
argument_list|,
name|delayQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To define the queueUrl explicitly. All other parameters, which would          * influence the queueUrl, are ignored. This parameter is intended to be          * used, to connect to a mock implementation of SQS, for testing          * purposes.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|queueUrl (String queueUrl)
specifier|default
name|AdvancedSqsEndpointConsumerBuilder
name|queueUrl
parameter_list|(
name|String
name|queueUrl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queueUrl"
argument_list|,
name|queueUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSqsEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedSqsEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the AWS Simple Queue Service      * component.      */
DECL|interface|SqsEndpointProducerBuilder
specifier|public
interface|interface
name|SqsEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSqsEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSqsEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The hostname of the Amazon AWS cloud.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|amazonAWSHost (String amazonAWSHost)
specifier|default
name|SqsEndpointProducerBuilder
name|amazonAWSHost
parameter_list|(
name|String
name|amazonAWSHost
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"amazonAWSHost"
argument_list|,
name|amazonAWSHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the AmazonSQS as client.          *           * The option is a:<code>com.amazonaws.services.sqs.AmazonSQS</code>          * type.          *           * Group: common          */
DECL|method|amazonSQSClient ( Object amazonSQSClient)
specifier|default
name|SqsEndpointProducerBuilder
name|amazonSQSClient
parameter_list|(
name|Object
name|amazonSQSClient
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"amazonSQSClient"
argument_list|,
name|amazonSQSClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the AmazonSQS as client.          *           * The option will be converted to a          *<code>com.amazonaws.services.sqs.AmazonSQS</code> type.          *           * Group: common          */
DECL|method|amazonSQSClient ( String amazonSQSClient)
specifier|default
name|SqsEndpointProducerBuilder
name|amazonSQSClient
parameter_list|(
name|String
name|amazonSQSClient
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"amazonSQSClient"
argument_list|,
name|amazonSQSClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting the autocreation of the queue.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoCreateQueue ( boolean autoCreateQueue)
specifier|default
name|SqsEndpointProducerBuilder
name|autoCreateQueue
parameter_list|(
name|boolean
name|autoCreateQueue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoCreateQueue"
argument_list|,
name|autoCreateQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting the autocreation of the queue.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoCreateQueue ( String autoCreateQueue)
specifier|default
name|SqsEndpointProducerBuilder
name|autoCreateQueue
parameter_list|(
name|String
name|autoCreateQueue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoCreateQueue"
argument_list|,
name|autoCreateQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to map headers to/from Camel.          *           * The option is a:          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: common          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|SqsEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to map headers to/from Camel.          *           * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: common          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|SqsEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify the queue owner aws account id when you need to connect the          * queue with different account owner.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|queueOwnerAWSAccountId ( String queueOwnerAWSAccountId)
specifier|default
name|SqsEndpointProducerBuilder
name|queueOwnerAWSAccountId
parameter_list|(
name|String
name|queueOwnerAWSAccountId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queueOwnerAWSAccountId"
argument_list|,
name|queueOwnerAWSAccountId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify the queue region which could be used with          * queueOwnerAWSAccountId to build the service URL. When using this          * parameter, the configuration will expect the capitalized name of the          * region (for example AP_EAST_1) You'll need to use the name          * Regions.EU_WEST_1.name().          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|region (String region)
specifier|default
name|SqsEndpointProducerBuilder
name|region
parameter_list|(
name|String
name|region
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"region"
argument_list|,
name|region
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delay sending messages for a number of seconds.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: producer          */
DECL|method|delaySeconds (Integer delaySeconds)
specifier|default
name|SqsEndpointProducerBuilder
name|delaySeconds
parameter_list|(
name|Integer
name|delaySeconds
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delaySeconds"
argument_list|,
name|delaySeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delay sending messages for a number of seconds.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: producer          */
DECL|method|delaySeconds (String delaySeconds)
specifier|default
name|SqsEndpointProducerBuilder
name|delaySeconds
parameter_list|(
name|String
name|delaySeconds
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delaySeconds"
argument_list|,
name|delaySeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|SqsEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|SqsEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only for FIFO queues. Strategy for setting the messageDeduplicationId          * on the message. Can be one of the following options: useExchangeId,          * useContentBasedDeduplication. For the useContentBasedDeduplication          * option, no messageDeduplicationId will be set on the message.          *           * The option is a:          *<code>org.apache.camel.component.aws.sqs.MessageDeduplicationIdStrategy</code> type.          *           * Group: producer          */
DECL|method|messageDeduplicationIdStrategy ( Object messageDeduplicationIdStrategy)
specifier|default
name|SqsEndpointProducerBuilder
name|messageDeduplicationIdStrategy
parameter_list|(
name|Object
name|messageDeduplicationIdStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageDeduplicationIdStrategy"
argument_list|,
name|messageDeduplicationIdStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only for FIFO queues. Strategy for setting the messageDeduplicationId          * on the message. Can be one of the following options: useExchangeId,          * useContentBasedDeduplication. For the useContentBasedDeduplication          * option, no messageDeduplicationId will be set on the message.          *           * The option will be converted to a          *<code>org.apache.camel.component.aws.sqs.MessageDeduplicationIdStrategy</code> type.          *           * Group: producer          */
DECL|method|messageDeduplicationIdStrategy ( String messageDeduplicationIdStrategy)
specifier|default
name|SqsEndpointProducerBuilder
name|messageDeduplicationIdStrategy
parameter_list|(
name|String
name|messageDeduplicationIdStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageDeduplicationIdStrategy"
argument_list|,
name|messageDeduplicationIdStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only for FIFO queues. Strategy for setting the messageGroupId on the          * message. Can be one of the following options: useConstant,          * useExchangeId, usePropertyValue. For the usePropertyValue option, the          * value of property CamelAwsMessageGroupId will be used.          *           * The option is a:          *<code>org.apache.camel.component.aws.sqs.MessageGroupIdStrategy</code> type.          *           * Group: producer          */
DECL|method|messageGroupIdStrategy ( Object messageGroupIdStrategy)
specifier|default
name|SqsEndpointProducerBuilder
name|messageGroupIdStrategy
parameter_list|(
name|Object
name|messageGroupIdStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageGroupIdStrategy"
argument_list|,
name|messageGroupIdStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only for FIFO queues. Strategy for setting the messageGroupId on the          * message. Can be one of the following options: useConstant,          * useExchangeId, usePropertyValue. For the usePropertyValue option, the          * value of property CamelAwsMessageGroupId will be used.          *           * The option will be converted to a          *<code>org.apache.camel.component.aws.sqs.MessageGroupIdStrategy</code> type.          *           * Group: producer          */
DECL|method|messageGroupIdStrategy ( String messageGroupIdStrategy)
specifier|default
name|SqsEndpointProducerBuilder
name|messageGroupIdStrategy
parameter_list|(
name|String
name|messageGroupIdStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageGroupIdStrategy"
argument_list|,
name|messageGroupIdStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The operation to do in case the user don't want to send only a          * message.          *           * The option is a:          *<code>org.apache.camel.component.aws.sqs.SqsOperations</code> type.          *           * Group: producer          */
DECL|method|operation (SqsOperations operation)
specifier|default
name|SqsEndpointProducerBuilder
name|operation
parameter_list|(
name|SqsOperations
name|operation
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The operation to do in case the user don't want to send only a          * message.          *           * The option will be converted to a          *<code>org.apache.camel.component.aws.sqs.SqsOperations</code> type.          *           * Group: producer          */
DECL|method|operation (String operation)
specifier|default
name|SqsEndpointProducerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To define a proxy host when instantiating the SQS client.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyHost (String proxyHost)
specifier|default
name|SqsEndpointProducerBuilder
name|proxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxyHost"
argument_list|,
name|proxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To define a proxy port when instantiating the SQS client.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: proxy          */
DECL|method|proxyPort (Integer proxyPort)
specifier|default
name|SqsEndpointProducerBuilder
name|proxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To define a proxy port when instantiating the SQS client.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: proxy          */
DECL|method|proxyPort (String proxyPort)
specifier|default
name|SqsEndpointProducerBuilder
name|proxyPort
parameter_list|(
name|String
name|proxyPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximumMessageSize (in bytes) an SQS message can contain for this          * queue.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: queue          */
DECL|method|maximumMessageSize ( Integer maximumMessageSize)
specifier|default
name|SqsEndpointProducerBuilder
name|maximumMessageSize
parameter_list|(
name|Integer
name|maximumMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maximumMessageSize"
argument_list|,
name|maximumMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximumMessageSize (in bytes) an SQS message can contain for this          * queue.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: queue          */
DECL|method|maximumMessageSize ( String maximumMessageSize)
specifier|default
name|SqsEndpointProducerBuilder
name|maximumMessageSize
parameter_list|(
name|String
name|maximumMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maximumMessageSize"
argument_list|,
name|maximumMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The messageRetentionPeriod (in seconds) a message will be retained by          * SQS for this queue.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: queue          */
DECL|method|messageRetentionPeriod ( Integer messageRetentionPeriod)
specifier|default
name|SqsEndpointProducerBuilder
name|messageRetentionPeriod
parameter_list|(
name|Integer
name|messageRetentionPeriod
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageRetentionPeriod"
argument_list|,
name|messageRetentionPeriod
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The messageRetentionPeriod (in seconds) a message will be retained by          * SQS for this queue.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: queue          */
DECL|method|messageRetentionPeriod ( String messageRetentionPeriod)
specifier|default
name|SqsEndpointProducerBuilder
name|messageRetentionPeriod
parameter_list|(
name|String
name|messageRetentionPeriod
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageRetentionPeriod"
argument_list|,
name|messageRetentionPeriod
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The policy for this queue.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: queue          */
DECL|method|policy (String policy)
specifier|default
name|SqsEndpointProducerBuilder
name|policy
parameter_list|(
name|String
name|policy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"policy"
argument_list|,
name|policy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If you do not specify WaitTimeSeconds in the request, the queue          * attribute ReceiveMessageWaitTimeSeconds is used to determine how long          * to wait.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: queue          */
DECL|method|receiveMessageWaitTimeSeconds ( Integer receiveMessageWaitTimeSeconds)
specifier|default
name|SqsEndpointProducerBuilder
name|receiveMessageWaitTimeSeconds
parameter_list|(
name|Integer
name|receiveMessageWaitTimeSeconds
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveMessageWaitTimeSeconds"
argument_list|,
name|receiveMessageWaitTimeSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If you do not specify WaitTimeSeconds in the request, the queue          * attribute ReceiveMessageWaitTimeSeconds is used to determine how long          * to wait.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: queue          */
DECL|method|receiveMessageWaitTimeSeconds ( String receiveMessageWaitTimeSeconds)
specifier|default
name|SqsEndpointProducerBuilder
name|receiveMessageWaitTimeSeconds
parameter_list|(
name|String
name|receiveMessageWaitTimeSeconds
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveMessageWaitTimeSeconds"
argument_list|,
name|receiveMessageWaitTimeSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify the policy that send message to DeadLetter queue. See detail          * at Amazon docs.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: queue          */
DECL|method|redrivePolicy (String redrivePolicy)
specifier|default
name|SqsEndpointProducerBuilder
name|redrivePolicy
parameter_list|(
name|String
name|redrivePolicy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"redrivePolicy"
argument_list|,
name|redrivePolicy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Access Key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessKey (String accessKey)
specifier|default
name|SqsEndpointProducerBuilder
name|accessKey
parameter_list|(
name|String
name|accessKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"accessKey"
argument_list|,
name|accessKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Secret Key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|secretKey (String secretKey)
specifier|default
name|SqsEndpointProducerBuilder
name|secretKey
parameter_list|(
name|String
name|secretKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"secretKey"
argument_list|,
name|secretKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the AWS Simple Queue Service      * component.      */
DECL|interface|AdvancedSqsEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedSqsEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SqsEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SqsEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSqsEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSqsEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if you want to apply delaySeconds option to the queue or on          * single messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|delayQueue (boolean delayQueue)
specifier|default
name|AdvancedSqsEndpointProducerBuilder
name|delayQueue
parameter_list|(
name|boolean
name|delayQueue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delayQueue"
argument_list|,
name|delayQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if you want to apply delaySeconds option to the queue or on          * single messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|delayQueue (String delayQueue)
specifier|default
name|AdvancedSqsEndpointProducerBuilder
name|delayQueue
parameter_list|(
name|String
name|delayQueue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delayQueue"
argument_list|,
name|delayQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To define the queueUrl explicitly. All other parameters, which would          * influence the queueUrl, are ignored. This parameter is intended to be          * used, to connect to a mock implementation of SQS, for testing          * purposes.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|queueUrl (String queueUrl)
specifier|default
name|AdvancedSqsEndpointProducerBuilder
name|queueUrl
parameter_list|(
name|String
name|queueUrl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queueUrl"
argument_list|,
name|queueUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSqsEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedSqsEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the AWS Simple Queue Service component.      */
DECL|interface|SqsEndpointBuilder
specifier|public
interface|interface
name|SqsEndpointBuilder
extends|extends
name|SqsEndpointConsumerBuilder
extends|,
name|SqsEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSqsEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSqsEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The hostname of the Amazon AWS cloud.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|amazonAWSHost (String amazonAWSHost)
specifier|default
name|SqsEndpointBuilder
name|amazonAWSHost
parameter_list|(
name|String
name|amazonAWSHost
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"amazonAWSHost"
argument_list|,
name|amazonAWSHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the AmazonSQS as client.          *           * The option is a:<code>com.amazonaws.services.sqs.AmazonSQS</code>          * type.          *           * Group: common          */
DECL|method|amazonSQSClient (Object amazonSQSClient)
specifier|default
name|SqsEndpointBuilder
name|amazonSQSClient
parameter_list|(
name|Object
name|amazonSQSClient
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"amazonSQSClient"
argument_list|,
name|amazonSQSClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the AmazonSQS as client.          *           * The option will be converted to a          *<code>com.amazonaws.services.sqs.AmazonSQS</code> type.          *           * Group: common          */
DECL|method|amazonSQSClient (String amazonSQSClient)
specifier|default
name|SqsEndpointBuilder
name|amazonSQSClient
parameter_list|(
name|String
name|amazonSQSClient
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"amazonSQSClient"
argument_list|,
name|amazonSQSClient
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting the autocreation of the queue.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoCreateQueue (boolean autoCreateQueue)
specifier|default
name|SqsEndpointBuilder
name|autoCreateQueue
parameter_list|(
name|boolean
name|autoCreateQueue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoCreateQueue"
argument_list|,
name|autoCreateQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting the autocreation of the queue.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoCreateQueue (String autoCreateQueue)
specifier|default
name|SqsEndpointBuilder
name|autoCreateQueue
parameter_list|(
name|String
name|autoCreateQueue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoCreateQueue"
argument_list|,
name|autoCreateQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to map headers to/from Camel.          *           * The option is a:          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: common          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|SqsEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to map headers to/from Camel.          *           * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: common          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|SqsEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify the queue owner aws account id when you need to connect the          * queue with different account owner.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|queueOwnerAWSAccountId ( String queueOwnerAWSAccountId)
specifier|default
name|SqsEndpointBuilder
name|queueOwnerAWSAccountId
parameter_list|(
name|String
name|queueOwnerAWSAccountId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queueOwnerAWSAccountId"
argument_list|,
name|queueOwnerAWSAccountId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify the queue region which could be used with          * queueOwnerAWSAccountId to build the service URL. When using this          * parameter, the configuration will expect the capitalized name of the          * region (for example AP_EAST_1) You'll need to use the name          * Regions.EU_WEST_1.name().          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|region (String region)
specifier|default
name|SqsEndpointBuilder
name|region
parameter_list|(
name|String
name|region
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"region"
argument_list|,
name|region
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To define a proxy host when instantiating the SQS client.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|proxyHost (String proxyHost)
specifier|default
name|SqsEndpointBuilder
name|proxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxyHost"
argument_list|,
name|proxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To define a proxy port when instantiating the SQS client.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: proxy          */
DECL|method|proxyPort (Integer proxyPort)
specifier|default
name|SqsEndpointBuilder
name|proxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To define a proxy port when instantiating the SQS client.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: proxy          */
DECL|method|proxyPort (String proxyPort)
specifier|default
name|SqsEndpointBuilder
name|proxyPort
parameter_list|(
name|String
name|proxyPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximumMessageSize (in bytes) an SQS message can contain for this          * queue.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: queue          */
DECL|method|maximumMessageSize (Integer maximumMessageSize)
specifier|default
name|SqsEndpointBuilder
name|maximumMessageSize
parameter_list|(
name|Integer
name|maximumMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maximumMessageSize"
argument_list|,
name|maximumMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximumMessageSize (in bytes) an SQS message can contain for this          * queue.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: queue          */
DECL|method|maximumMessageSize (String maximumMessageSize)
specifier|default
name|SqsEndpointBuilder
name|maximumMessageSize
parameter_list|(
name|String
name|maximumMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maximumMessageSize"
argument_list|,
name|maximumMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The messageRetentionPeriod (in seconds) a message will be retained by          * SQS for this queue.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: queue          */
DECL|method|messageRetentionPeriod ( Integer messageRetentionPeriod)
specifier|default
name|SqsEndpointBuilder
name|messageRetentionPeriod
parameter_list|(
name|Integer
name|messageRetentionPeriod
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageRetentionPeriod"
argument_list|,
name|messageRetentionPeriod
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The messageRetentionPeriod (in seconds) a message will be retained by          * SQS for this queue.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: queue          */
DECL|method|messageRetentionPeriod ( String messageRetentionPeriod)
specifier|default
name|SqsEndpointBuilder
name|messageRetentionPeriod
parameter_list|(
name|String
name|messageRetentionPeriod
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageRetentionPeriod"
argument_list|,
name|messageRetentionPeriod
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The policy for this queue.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: queue          */
DECL|method|policy (String policy)
specifier|default
name|SqsEndpointBuilder
name|policy
parameter_list|(
name|String
name|policy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"policy"
argument_list|,
name|policy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If you do not specify WaitTimeSeconds in the request, the queue          * attribute ReceiveMessageWaitTimeSeconds is used to determine how long          * to wait.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: queue          */
DECL|method|receiveMessageWaitTimeSeconds ( Integer receiveMessageWaitTimeSeconds)
specifier|default
name|SqsEndpointBuilder
name|receiveMessageWaitTimeSeconds
parameter_list|(
name|Integer
name|receiveMessageWaitTimeSeconds
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveMessageWaitTimeSeconds"
argument_list|,
name|receiveMessageWaitTimeSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If you do not specify WaitTimeSeconds in the request, the queue          * attribute ReceiveMessageWaitTimeSeconds is used to determine how long          * to wait.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: queue          */
DECL|method|receiveMessageWaitTimeSeconds ( String receiveMessageWaitTimeSeconds)
specifier|default
name|SqsEndpointBuilder
name|receiveMessageWaitTimeSeconds
parameter_list|(
name|String
name|receiveMessageWaitTimeSeconds
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveMessageWaitTimeSeconds"
argument_list|,
name|receiveMessageWaitTimeSeconds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify the policy that send message to DeadLetter queue. See detail          * at Amazon docs.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: queue          */
DECL|method|redrivePolicy (String redrivePolicy)
specifier|default
name|SqsEndpointBuilder
name|redrivePolicy
parameter_list|(
name|String
name|redrivePolicy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"redrivePolicy"
argument_list|,
name|redrivePolicy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Access Key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessKey (String accessKey)
specifier|default
name|SqsEndpointBuilder
name|accessKey
parameter_list|(
name|String
name|accessKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"accessKey"
argument_list|,
name|accessKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Secret Key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|secretKey (String secretKey)
specifier|default
name|SqsEndpointBuilder
name|secretKey
parameter_list|(
name|String
name|secretKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"secretKey"
argument_list|,
name|secretKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the AWS Simple Queue Service component.      */
DECL|interface|AdvancedSqsEndpointBuilder
specifier|public
interface|interface
name|AdvancedSqsEndpointBuilder
extends|extends
name|AdvancedSqsEndpointConsumerBuilder
extends|,
name|AdvancedSqsEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SqsEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SqsEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSqsEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSqsEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if you want to apply delaySeconds option to the queue or on          * single messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|delayQueue (boolean delayQueue)
specifier|default
name|AdvancedSqsEndpointBuilder
name|delayQueue
parameter_list|(
name|boolean
name|delayQueue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delayQueue"
argument_list|,
name|delayQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if you want to apply delaySeconds option to the queue or on          * single messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|delayQueue (String delayQueue)
specifier|default
name|AdvancedSqsEndpointBuilder
name|delayQueue
parameter_list|(
name|String
name|delayQueue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delayQueue"
argument_list|,
name|delayQueue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To define the queueUrl explicitly. All other parameters, which would          * influence the queueUrl, are ignored. This parameter is intended to be          * used, to connect to a mock implementation of SQS, for testing          * purposes.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|queueUrl (String queueUrl)
specifier|default
name|AdvancedSqsEndpointBuilder
name|queueUrl
parameter_list|(
name|String
name|queueUrl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queueUrl"
argument_list|,
name|queueUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedSqsEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedSqsEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.aws.sqs.SqsOperations</code> enum.      */
DECL|enum|SqsOperations
enum|enum
name|SqsOperations
block|{
DECL|enumConstant|sendBatchMessage
name|sendBatchMessage
block|,
DECL|enumConstant|deleteMessage
name|deleteMessage
block|,
DECL|enumConstant|listQueues
name|listQueues
block|;     }
comment|/**      * AWS Simple Queue Service (camel-aws-sqs)      * The aws-sqs component is used for sending and receiving messages to      * Amazon's SQS service.      *       * Category: cloud,messaging      * Available as of version: 2.6      * Maven coordinates: org.apache.camel:camel-aws-sqs      *       * Syntax:<code>aws-sqs:queueNameOrArn</code>      *       * Path parameter: queueNameOrArn (required)      * Queue name or ARN      */
DECL|method|awsSqs (String path)
specifier|default
name|SqsEndpointBuilder
name|awsSqs
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|SqsEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|SqsEndpointBuilder
implements|,
name|AdvancedSqsEndpointBuilder
block|{
specifier|public
name|SqsEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"aws-sqs"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SqsEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

