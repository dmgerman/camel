begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * For uploading downloading and managing files folders groups collaborations  * etc on box DOT com.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|BoxEndpointBuilderFactory
specifier|public
interface|interface
name|BoxEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Box component.      */
DECL|interface|BoxEndpointConsumerBuilder
specifier|public
interface|interface
name|BoxEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedBoxEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedBoxEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option is a          *<code>org.apache.camel.component.box.internal.BoxApiName</code> type.          * @group common          */
DECL|method|apiName (BoxApiName apiName)
specifier|default
name|BoxEndpointConsumerBuilder
name|apiName
parameter_list|(
name|BoxApiName
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option will be converted to a          *<code>org.apache.camel.component.box.internal.BoxApiName</code> type.          * @group common          */
DECL|method|apiName (String apiName)
specifier|default
name|BoxEndpointConsumerBuilder
name|apiName
parameter_list|(
name|String
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What sub operation to use for the selected operation.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|methodName (String methodName)
specifier|default
name|BoxEndpointConsumerBuilder
name|methodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"methodName"
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Box application client ID.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|clientId (String clientId)
specifier|default
name|BoxEndpointConsumerBuilder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientId"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The enterprise ID to use for an App Enterprise.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|enterpriseId (String enterpriseId)
specifier|default
name|BoxEndpointConsumerBuilder
name|enterpriseId
parameter_list|(
name|String
name|enterpriseId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enterpriseId"
argument_list|,
name|enterpriseId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|inBody (String inBody)
specifier|default
name|BoxEndpointConsumerBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The user ID to use for an App User.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|userId (String userId)
specifier|default
name|BoxEndpointConsumerBuilder
name|userId
parameter_list|(
name|String
name|userId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userId"
argument_list|,
name|userId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|BoxEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|BoxEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Box application client secret.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|clientSecret (String clientSecret)
specifier|default
name|BoxEndpointConsumerBuilder
name|clientSecret
parameter_list|(
name|String
name|clientSecret
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientSecret"
argument_list|,
name|clientSecret
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The type of authentication for connection. Types of Authentication:          * STANDARD_AUTHENTICATION - OAuth 2.0 (3-legged) SERVER_AUTHENTICATION          * - OAuth 2.0 with JSON Web Tokens.          * The option is a<code>java.lang.String</code> type.          * @group authentication          */
DECL|method|authenticationType ( String authenticationType)
specifier|default
name|BoxEndpointConsumerBuilder
name|authenticationType
parameter_list|(
name|String
name|authenticationType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"authenticationType"
argument_list|,
name|authenticationType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The private key for generating the JWT signature.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|privateKeyFile (String privateKeyFile)
specifier|default
name|BoxEndpointConsumerBuilder
name|privateKeyFile
parameter_list|(
name|String
name|privateKeyFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"privateKeyFile"
argument_list|,
name|privateKeyFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The password for the private key.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|privateKeyPassword ( String privateKeyPassword)
specifier|default
name|BoxEndpointConsumerBuilder
name|privateKeyPassword
parameter_list|(
name|String
name|privateKeyPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"privateKeyPassword"
argument_list|,
name|privateKeyPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The ID for public key for validating the JWT signature.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|publicKeyId (String publicKeyId)
specifier|default
name|BoxEndpointConsumerBuilder
name|publicKeyId
parameter_list|(
name|String
name|publicKeyId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publicKeyId"
argument_list|,
name|publicKeyId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|BoxEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|BoxEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Box user name, MUST be provided.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|userName (String userName)
specifier|default
name|BoxEndpointConsumerBuilder
name|userName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Box user password, MUST be provided if authSecureStorage is not set,          * or returns null on first call.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|userPassword (String userPassword)
specifier|default
name|BoxEndpointConsumerBuilder
name|userPassword
parameter_list|(
name|String
name|userPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userPassword"
argument_list|,
name|userPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Box component.      */
DECL|interface|AdvancedBoxEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedBoxEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|BoxEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|BoxEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedBoxEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedBoxEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedBoxEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedBoxEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedBoxEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedBoxEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP params for settings like proxy host.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          * @group advanced          */
DECL|method|httpParams ( Map<String, Object> httpParams)
specifier|default
name|AdvancedBoxEndpointConsumerBuilder
name|httpParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpParams
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpParams"
argument_list|,
name|httpParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP params for settings like proxy host.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          * @group advanced          */
DECL|method|httpParams (String httpParams)
specifier|default
name|AdvancedBoxEndpointConsumerBuilder
name|httpParams
parameter_list|(
name|String
name|httpParams
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpParams"
argument_list|,
name|httpParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedBoxEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedBoxEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom Access Token Cache for storing and retrieving access tokens.          * The option is a<code>com.box.sdk.IAccessTokenCache</code> type.          * @group security          */
DECL|method|accessTokenCache ( Object accessTokenCache)
specifier|default
name|AdvancedBoxEndpointConsumerBuilder
name|accessTokenCache
parameter_list|(
name|Object
name|accessTokenCache
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessTokenCache"
argument_list|,
name|accessTokenCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom Access Token Cache for storing and retrieving access tokens.          * The option will be converted to a          *<code>com.box.sdk.IAccessTokenCache</code> type.          * @group security          */
DECL|method|accessTokenCache ( String accessTokenCache)
specifier|default
name|AdvancedBoxEndpointConsumerBuilder
name|accessTokenCache
parameter_list|(
name|String
name|accessTokenCache
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessTokenCache"
argument_list|,
name|accessTokenCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The type of encryption algorithm for JWT. Supported Algorithms:          * RSA_SHA_256 RSA_SHA_384 RSA_SHA_512.          * The option is a<code>com.box.sdk.EncryptionAlgorithm</code> type.          * @group security          */
DECL|method|encryptionAlgorithm ( EncryptionAlgorithm encryptionAlgorithm)
specifier|default
name|AdvancedBoxEndpointConsumerBuilder
name|encryptionAlgorithm
parameter_list|(
name|EncryptionAlgorithm
name|encryptionAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptionAlgorithm"
argument_list|,
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The type of encryption algorithm for JWT. Supported Algorithms:          * RSA_SHA_256 RSA_SHA_384 RSA_SHA_512.          * The option will be converted to a          *<code>com.box.sdk.EncryptionAlgorithm</code> type.          * @group security          */
DECL|method|encryptionAlgorithm ( String encryptionAlgorithm)
specifier|default
name|AdvancedBoxEndpointConsumerBuilder
name|encryptionAlgorithm
parameter_list|(
name|String
name|encryptionAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptionAlgorithm"
argument_list|,
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of access tokens in cache.          * The option is a<code>int</code> type.          * @group security          */
DECL|method|maxCacheEntries ( int maxCacheEntries)
specifier|default
name|AdvancedBoxEndpointConsumerBuilder
name|maxCacheEntries
parameter_list|(
name|int
name|maxCacheEntries
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxCacheEntries"
argument_list|,
name|maxCacheEntries
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of access tokens in cache.          * The option will be converted to a<code>int</code> type.          * @group security          */
DECL|method|maxCacheEntries ( String maxCacheEntries)
specifier|default
name|AdvancedBoxEndpointConsumerBuilder
name|maxCacheEntries
parameter_list|(
name|String
name|maxCacheEntries
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxCacheEntries"
argument_list|,
name|maxCacheEntries
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Box component.      */
DECL|interface|BoxEndpointProducerBuilder
specifier|public
interface|interface
name|BoxEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedBoxEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedBoxEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option is a          *<code>org.apache.camel.component.box.internal.BoxApiName</code> type.          * @group common          */
DECL|method|apiName (BoxApiName apiName)
specifier|default
name|BoxEndpointProducerBuilder
name|apiName
parameter_list|(
name|BoxApiName
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option will be converted to a          *<code>org.apache.camel.component.box.internal.BoxApiName</code> type.          * @group common          */
DECL|method|apiName (String apiName)
specifier|default
name|BoxEndpointProducerBuilder
name|apiName
parameter_list|(
name|String
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What sub operation to use for the selected operation.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|methodName (String methodName)
specifier|default
name|BoxEndpointProducerBuilder
name|methodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"methodName"
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Box application client ID.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|clientId (String clientId)
specifier|default
name|BoxEndpointProducerBuilder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientId"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The enterprise ID to use for an App Enterprise.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|enterpriseId (String enterpriseId)
specifier|default
name|BoxEndpointProducerBuilder
name|enterpriseId
parameter_list|(
name|String
name|enterpriseId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enterpriseId"
argument_list|,
name|enterpriseId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|inBody (String inBody)
specifier|default
name|BoxEndpointProducerBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The user ID to use for an App User.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|userId (String userId)
specifier|default
name|BoxEndpointProducerBuilder
name|userId
parameter_list|(
name|String
name|userId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userId"
argument_list|,
name|userId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|BoxEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|BoxEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Box application client secret.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|clientSecret (String clientSecret)
specifier|default
name|BoxEndpointProducerBuilder
name|clientSecret
parameter_list|(
name|String
name|clientSecret
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientSecret"
argument_list|,
name|clientSecret
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The type of authentication for connection. Types of Authentication:          * STANDARD_AUTHENTICATION - OAuth 2.0 (3-legged) SERVER_AUTHENTICATION          * - OAuth 2.0 with JSON Web Tokens.          * The option is a<code>java.lang.String</code> type.          * @group authentication          */
DECL|method|authenticationType ( String authenticationType)
specifier|default
name|BoxEndpointProducerBuilder
name|authenticationType
parameter_list|(
name|String
name|authenticationType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"authenticationType"
argument_list|,
name|authenticationType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The private key for generating the JWT signature.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|privateKeyFile (String privateKeyFile)
specifier|default
name|BoxEndpointProducerBuilder
name|privateKeyFile
parameter_list|(
name|String
name|privateKeyFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"privateKeyFile"
argument_list|,
name|privateKeyFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The password for the private key.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|privateKeyPassword ( String privateKeyPassword)
specifier|default
name|BoxEndpointProducerBuilder
name|privateKeyPassword
parameter_list|(
name|String
name|privateKeyPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"privateKeyPassword"
argument_list|,
name|privateKeyPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The ID for public key for validating the JWT signature.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|publicKeyId (String publicKeyId)
specifier|default
name|BoxEndpointProducerBuilder
name|publicKeyId
parameter_list|(
name|String
name|publicKeyId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publicKeyId"
argument_list|,
name|publicKeyId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|BoxEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|BoxEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Box user name, MUST be provided.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|userName (String userName)
specifier|default
name|BoxEndpointProducerBuilder
name|userName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Box user password, MUST be provided if authSecureStorage is not set,          * or returns null on first call.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|userPassword (String userPassword)
specifier|default
name|BoxEndpointProducerBuilder
name|userPassword
parameter_list|(
name|String
name|userPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userPassword"
argument_list|,
name|userPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Box component.      */
DECL|interface|AdvancedBoxEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedBoxEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|BoxEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|BoxEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedBoxEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedBoxEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP params for settings like proxy host.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          * @group advanced          */
DECL|method|httpParams ( Map<String, Object> httpParams)
specifier|default
name|AdvancedBoxEndpointProducerBuilder
name|httpParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpParams
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpParams"
argument_list|,
name|httpParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP params for settings like proxy host.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          * @group advanced          */
DECL|method|httpParams (String httpParams)
specifier|default
name|AdvancedBoxEndpointProducerBuilder
name|httpParams
parameter_list|(
name|String
name|httpParams
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpParams"
argument_list|,
name|httpParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedBoxEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedBoxEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom Access Token Cache for storing and retrieving access tokens.          * The option is a<code>com.box.sdk.IAccessTokenCache</code> type.          * @group security          */
DECL|method|accessTokenCache ( Object accessTokenCache)
specifier|default
name|AdvancedBoxEndpointProducerBuilder
name|accessTokenCache
parameter_list|(
name|Object
name|accessTokenCache
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessTokenCache"
argument_list|,
name|accessTokenCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom Access Token Cache for storing and retrieving access tokens.          * The option will be converted to a          *<code>com.box.sdk.IAccessTokenCache</code> type.          * @group security          */
DECL|method|accessTokenCache ( String accessTokenCache)
specifier|default
name|AdvancedBoxEndpointProducerBuilder
name|accessTokenCache
parameter_list|(
name|String
name|accessTokenCache
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessTokenCache"
argument_list|,
name|accessTokenCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The type of encryption algorithm for JWT. Supported Algorithms:          * RSA_SHA_256 RSA_SHA_384 RSA_SHA_512.          * The option is a<code>com.box.sdk.EncryptionAlgorithm</code> type.          * @group security          */
DECL|method|encryptionAlgorithm ( EncryptionAlgorithm encryptionAlgorithm)
specifier|default
name|AdvancedBoxEndpointProducerBuilder
name|encryptionAlgorithm
parameter_list|(
name|EncryptionAlgorithm
name|encryptionAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptionAlgorithm"
argument_list|,
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The type of encryption algorithm for JWT. Supported Algorithms:          * RSA_SHA_256 RSA_SHA_384 RSA_SHA_512.          * The option will be converted to a          *<code>com.box.sdk.EncryptionAlgorithm</code> type.          * @group security          */
DECL|method|encryptionAlgorithm ( String encryptionAlgorithm)
specifier|default
name|AdvancedBoxEndpointProducerBuilder
name|encryptionAlgorithm
parameter_list|(
name|String
name|encryptionAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptionAlgorithm"
argument_list|,
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of access tokens in cache.          * The option is a<code>int</code> type.          * @group security          */
DECL|method|maxCacheEntries ( int maxCacheEntries)
specifier|default
name|AdvancedBoxEndpointProducerBuilder
name|maxCacheEntries
parameter_list|(
name|int
name|maxCacheEntries
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxCacheEntries"
argument_list|,
name|maxCacheEntries
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of access tokens in cache.          * The option will be converted to a<code>int</code> type.          * @group security          */
DECL|method|maxCacheEntries ( String maxCacheEntries)
specifier|default
name|AdvancedBoxEndpointProducerBuilder
name|maxCacheEntries
parameter_list|(
name|String
name|maxCacheEntries
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxCacheEntries"
argument_list|,
name|maxCacheEntries
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Box component.      */
DECL|interface|BoxEndpointBuilder
specifier|public
interface|interface
name|BoxEndpointBuilder
extends|extends
name|BoxEndpointConsumerBuilder
extends|,
name|BoxEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedBoxEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedBoxEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option is a          *<code>org.apache.camel.component.box.internal.BoxApiName</code> type.          * @group common          */
DECL|method|apiName (BoxApiName apiName)
specifier|default
name|BoxEndpointBuilder
name|apiName
parameter_list|(
name|BoxApiName
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option will be converted to a          *<code>org.apache.camel.component.box.internal.BoxApiName</code> type.          * @group common          */
DECL|method|apiName (String apiName)
specifier|default
name|BoxEndpointBuilder
name|apiName
parameter_list|(
name|String
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What sub operation to use for the selected operation.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|methodName (String methodName)
specifier|default
name|BoxEndpointBuilder
name|methodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"methodName"
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Box application client ID.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|clientId (String clientId)
specifier|default
name|BoxEndpointBuilder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientId"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The enterprise ID to use for an App Enterprise.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|enterpriseId (String enterpriseId)
specifier|default
name|BoxEndpointBuilder
name|enterpriseId
parameter_list|(
name|String
name|enterpriseId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"enterpriseId"
argument_list|,
name|enterpriseId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|inBody (String inBody)
specifier|default
name|BoxEndpointBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The user ID to use for an App User.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|userId (String userId)
specifier|default
name|BoxEndpointBuilder
name|userId
parameter_list|(
name|String
name|userId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userId"
argument_list|,
name|userId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Box application client secret.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|clientSecret (String clientSecret)
specifier|default
name|BoxEndpointBuilder
name|clientSecret
parameter_list|(
name|String
name|clientSecret
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientSecret"
argument_list|,
name|clientSecret
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The type of authentication for connection. Types of Authentication:          * STANDARD_AUTHENTICATION - OAuth 2.0 (3-legged) SERVER_AUTHENTICATION          * - OAuth 2.0 with JSON Web Tokens.          * The option is a<code>java.lang.String</code> type.          * @group authentication          */
DECL|method|authenticationType (String authenticationType)
specifier|default
name|BoxEndpointBuilder
name|authenticationType
parameter_list|(
name|String
name|authenticationType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"authenticationType"
argument_list|,
name|authenticationType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The private key for generating the JWT signature.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|privateKeyFile (String privateKeyFile)
specifier|default
name|BoxEndpointBuilder
name|privateKeyFile
parameter_list|(
name|String
name|privateKeyFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"privateKeyFile"
argument_list|,
name|privateKeyFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The password for the private key.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|privateKeyPassword (String privateKeyPassword)
specifier|default
name|BoxEndpointBuilder
name|privateKeyPassword
parameter_list|(
name|String
name|privateKeyPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"privateKeyPassword"
argument_list|,
name|privateKeyPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The ID for public key for validating the JWT signature.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|publicKeyId (String publicKeyId)
specifier|default
name|BoxEndpointBuilder
name|publicKeyId
parameter_list|(
name|String
name|publicKeyId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publicKeyId"
argument_list|,
name|publicKeyId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|BoxEndpointBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|BoxEndpointBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Box user name, MUST be provided.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|userName (String userName)
specifier|default
name|BoxEndpointBuilder
name|userName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Box user password, MUST be provided if authSecureStorage is not set,          * or returns null on first call.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|userPassword (String userPassword)
specifier|default
name|BoxEndpointBuilder
name|userPassword
parameter_list|(
name|String
name|userPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userPassword"
argument_list|,
name|userPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Box component.      */
DECL|interface|AdvancedBoxEndpointBuilder
specifier|public
interface|interface
name|AdvancedBoxEndpointBuilder
extends|extends
name|AdvancedBoxEndpointConsumerBuilder
extends|,
name|AdvancedBoxEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|BoxEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|BoxEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedBoxEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedBoxEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP params for settings like proxy host.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          * @group advanced          */
DECL|method|httpParams ( Map<String, Object> httpParams)
specifier|default
name|AdvancedBoxEndpointBuilder
name|httpParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpParams
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpParams"
argument_list|,
name|httpParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP params for settings like proxy host.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          * @group advanced          */
DECL|method|httpParams (String httpParams)
specifier|default
name|AdvancedBoxEndpointBuilder
name|httpParams
parameter_list|(
name|String
name|httpParams
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpParams"
argument_list|,
name|httpParams
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedBoxEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedBoxEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom Access Token Cache for storing and retrieving access tokens.          * The option is a<code>com.box.sdk.IAccessTokenCache</code> type.          * @group security          */
DECL|method|accessTokenCache ( Object accessTokenCache)
specifier|default
name|AdvancedBoxEndpointBuilder
name|accessTokenCache
parameter_list|(
name|Object
name|accessTokenCache
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessTokenCache"
argument_list|,
name|accessTokenCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom Access Token Cache for storing and retrieving access tokens.          * The option will be converted to a          *<code>com.box.sdk.IAccessTokenCache</code> type.          * @group security          */
DECL|method|accessTokenCache ( String accessTokenCache)
specifier|default
name|AdvancedBoxEndpointBuilder
name|accessTokenCache
parameter_list|(
name|String
name|accessTokenCache
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessTokenCache"
argument_list|,
name|accessTokenCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The type of encryption algorithm for JWT. Supported Algorithms:          * RSA_SHA_256 RSA_SHA_384 RSA_SHA_512.          * The option is a<code>com.box.sdk.EncryptionAlgorithm</code> type.          * @group security          */
DECL|method|encryptionAlgorithm ( EncryptionAlgorithm encryptionAlgorithm)
specifier|default
name|AdvancedBoxEndpointBuilder
name|encryptionAlgorithm
parameter_list|(
name|EncryptionAlgorithm
name|encryptionAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptionAlgorithm"
argument_list|,
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The type of encryption algorithm for JWT. Supported Algorithms:          * RSA_SHA_256 RSA_SHA_384 RSA_SHA_512.          * The option will be converted to a          *<code>com.box.sdk.EncryptionAlgorithm</code> type.          * @group security          */
DECL|method|encryptionAlgorithm ( String encryptionAlgorithm)
specifier|default
name|AdvancedBoxEndpointBuilder
name|encryptionAlgorithm
parameter_list|(
name|String
name|encryptionAlgorithm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptionAlgorithm"
argument_list|,
name|encryptionAlgorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of access tokens in cache.          * The option is a<code>int</code> type.          * @group security          */
DECL|method|maxCacheEntries (int maxCacheEntries)
specifier|default
name|AdvancedBoxEndpointBuilder
name|maxCacheEntries
parameter_list|(
name|int
name|maxCacheEntries
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxCacheEntries"
argument_list|,
name|maxCacheEntries
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of access tokens in cache.          * The option will be converted to a<code>int</code> type.          * @group security          */
DECL|method|maxCacheEntries ( String maxCacheEntries)
specifier|default
name|AdvancedBoxEndpointBuilder
name|maxCacheEntries
parameter_list|(
name|String
name|maxCacheEntries
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxCacheEntries"
argument_list|,
name|maxCacheEntries
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.box.internal.BoxApiName</code> enum.      */
DECL|enum|BoxApiName
specifier|public
specifier|static
enum|enum
name|BoxApiName
block|{
DECL|enumConstant|COLLABORATIONS
DECL|enumConstant|COMMENTS
DECL|enumConstant|EVENT_LOGS
DECL|enumConstant|FILES
DECL|enumConstant|FOLDERS
DECL|enumConstant|GROUPS
DECL|enumConstant|EVENTS
DECL|enumConstant|SEARCH
DECL|enumConstant|TASKS
DECL|enumConstant|USERS
name|COLLABORATIONS
block|,
name|COMMENTS
block|,
name|EVENT_LOGS
block|,
name|FILES
block|,
name|FOLDERS
block|,
name|GROUPS
block|,
name|EVENTS
block|,
name|SEARCH
block|,
name|TASKS
block|,
name|USERS
block|;     }
comment|/**      * Proxy enum for<code>com.box.sdk.EncryptionAlgorithm</code> enum.      */
DECL|enum|EncryptionAlgorithm
specifier|public
specifier|static
enum|enum
name|EncryptionAlgorithm
block|{
DECL|enumConstant|RSA_SHA_256
DECL|enumConstant|RSA_SHA_384
DECL|enumConstant|RSA_SHA_512
name|RSA_SHA_256
block|,
name|RSA_SHA_384
block|,
name|RSA_SHA_512
block|;     }
comment|/**      * For uploading downloading and managing files folders groups      * collaborations etc on box DOT com. Creates a builder to build endpoints      * for the Box component.      */
DECL|method|box (String path)
specifier|default
name|BoxEndpointBuilder
name|box
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|BoxEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|BoxEndpointBuilder
implements|,
name|AdvancedBoxEndpointBuilder
block|{
specifier|public
name|BoxEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"box"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BoxEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

