begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The web3j component uses the Web3j client API and allows you to add/read  * nodes to/from a web3j compliant content repositories.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|Web3jEndpointBuilderFactory
specifier|public
interface|interface
name|Web3jEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Web3j Ethereum Blockchain      * component.      */
DECL|interface|Web3jEndpointConsumerBuilder
specifier|public
interface|interface
name|Web3jEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedWeb3jEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedWeb3jEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Contract address or a list of addresses.          *           * The option is a:<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          *           * Group: common          */
DECL|method|addresses (List<String> addresses)
specifier|default
name|Web3jEndpointConsumerBuilder
name|addresses
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|addresses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"addresses"
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Contract address or a list of addresses.          *           * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          *           * Group: common          */
DECL|method|addresses (String addresses)
specifier|default
name|Web3jEndpointConsumerBuilder
name|addresses
parameter_list|(
name|String
name|addresses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"addresses"
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The address the transaction is send from.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|fromAddress (String fromAddress)
specifier|default
name|Web3jEndpointConsumerBuilder
name|fromAddress
parameter_list|(
name|String
name|fromAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromAddress"
argument_list|,
name|fromAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The block number, or the string latest for the last mined block or          * pending, earliest for not yet mined transactions.          *           * The option is a:          *<code>org.web3j.protocol.core.DefaultBlockParameter</code> type.          *           * Group: common          */
DECL|method|fromBlock (Object fromBlock)
specifier|default
name|Web3jEndpointConsumerBuilder
name|fromBlock
parameter_list|(
name|Object
name|fromBlock
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromBlock"
argument_list|,
name|fromBlock
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The block number, or the string latest for the last mined block or          * pending, earliest for not yet mined transactions.          *           * The option will be converted to a          *<code>org.web3j.protocol.core.DefaultBlockParameter</code> type.          *           * Group: common          */
DECL|method|fromBlock (String fromBlock)
specifier|default
name|Web3jEndpointConsumerBuilder
name|fromBlock
parameter_list|(
name|String
name|fromBlock
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromBlock"
argument_list|,
name|fromBlock
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true it returns the full transaction objects, if false only the          * hashes of the transactions.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|fullTransactionObjects ( boolean fullTransactionObjects)
specifier|default
name|Web3jEndpointConsumerBuilder
name|fullTransactionObjects
parameter_list|(
name|boolean
name|fullTransactionObjects
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fullTransactionObjects"
argument_list|,
name|fullTransactionObjects
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true it returns the full transaction objects, if false only the          * hashes of the transactions.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|fullTransactionObjects ( String fullTransactionObjects)
specifier|default
name|Web3jEndpointConsumerBuilder
name|fullTransactionObjects
parameter_list|(
name|String
name|fullTransactionObjects
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fullTransactionObjects"
argument_list|,
name|fullTransactionObjects
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum gas allowed in this block.          *           * The option is a:<code>java.math.BigInteger</code> type.          *           * Group: common          */
DECL|method|gasLimit (BigInteger gasLimit)
specifier|default
name|Web3jEndpointConsumerBuilder
name|gasLimit
parameter_list|(
name|BigInteger
name|gasLimit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"gasLimit"
argument_list|,
name|gasLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum gas allowed in this block.          *           * The option will be converted to a<code>java.math.BigInteger</code>          * type.          *           * Group: common          */
DECL|method|gasLimit (String gasLimit)
specifier|default
name|Web3jEndpointConsumerBuilder
name|gasLimit
parameter_list|(
name|String
name|gasLimit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"gasLimit"
argument_list|,
name|gasLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A transaction privateFor nodes with public keys in a Quorum network.          *           * The option is a:<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          *           * Group: common          */
DECL|method|privateFor (List<String> privateFor)
specifier|default
name|Web3jEndpointConsumerBuilder
name|privateFor
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|privateFor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"privateFor"
argument_list|,
name|privateFor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A transaction privateFor nodes with public keys in a Quorum network.          *           * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          *           * Group: common          */
DECL|method|privateFor (String privateFor)
specifier|default
name|Web3jEndpointConsumerBuilder
name|privateFor
parameter_list|(
name|String
name|privateFor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"privateFor"
argument_list|,
name|privateFor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, this will support Quorum API.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|quorumAPI (boolean quorumAPI)
specifier|default
name|Web3jEndpointConsumerBuilder
name|quorumAPI
parameter_list|(
name|boolean
name|quorumAPI
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"quorumAPI"
argument_list|,
name|quorumAPI
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, this will support Quorum API.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|quorumAPI (String quorumAPI)
specifier|default
name|Web3jEndpointConsumerBuilder
name|quorumAPI
parameter_list|(
name|String
name|quorumAPI
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"quorumAPI"
argument_list|,
name|quorumAPI
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The address the transaction is directed to.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|toAddress (String toAddress)
specifier|default
name|Web3jEndpointConsumerBuilder
name|toAddress
parameter_list|(
name|String
name|toAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toAddress"
argument_list|,
name|toAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The block number, or the string latest for the last mined block or          * pending, earliest for not yet mined transactions.          *           * The option is a:          *<code>org.web3j.protocol.core.DefaultBlockParameter</code> type.          *           * Group: common          */
DECL|method|toBlock (Object toBlock)
specifier|default
name|Web3jEndpointConsumerBuilder
name|toBlock
parameter_list|(
name|Object
name|toBlock
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toBlock"
argument_list|,
name|toBlock
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The block number, or the string latest for the last mined block or          * pending, earliest for not yet mined transactions.          *           * The option will be converted to a          *<code>org.web3j.protocol.core.DefaultBlockParameter</code> type.          *           * Group: common          */
DECL|method|toBlock (String toBlock)
specifier|default
name|Web3jEndpointConsumerBuilder
name|toBlock
parameter_list|(
name|String
name|toBlock
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toBlock"
argument_list|,
name|toBlock
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Topics are order-dependent. Each topic can also be a list of topics.          * Specify multiple topics separated by comma.          *           * The option is a:<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          *           * Group: common          */
DECL|method|topics (List<String> topics)
specifier|default
name|Web3jEndpointConsumerBuilder
name|topics
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|topics
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"topics"
argument_list|,
name|topics
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Topics are order-dependent. Each topic can also be a list of topics.          * Specify multiple topics separated by comma.          *           * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          *           * Group: common          */
DECL|method|topics (String topics)
specifier|default
name|Web3jEndpointConsumerBuilder
name|topics
parameter_list|(
name|String
name|topics
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"topics"
argument_list|,
name|topics
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The preconfigured Web3j object.          *           * The option is a:<code>org.web3j.protocol.Web3j</code> type.          *           * Group: common          */
DECL|method|web3j (Object web3j)
specifier|default
name|Web3jEndpointConsumerBuilder
name|web3j
parameter_list|(
name|Object
name|web3j
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"web3j"
argument_list|,
name|web3j
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The preconfigured Web3j object.          *           * The option will be converted to a          *<code>org.web3j.protocol.Web3j</code> type.          *           * Group: common          */
DECL|method|web3j (String web3j)
specifier|default
name|Web3jEndpointConsumerBuilder
name|web3j
parameter_list|(
name|String
name|web3j
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"web3j"
argument_list|,
name|web3j
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|Web3jEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|Web3jEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Web3j Ethereum Blockchain      * component.      */
DECL|interface|AdvancedWeb3jEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedWeb3jEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|Web3jEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|Web3jEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedWeb3jEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedWeb3jEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedWeb3jEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedWeb3jEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedWeb3jEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedWeb3jEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedWeb3jEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedWeb3jEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Web3j Ethereum Blockchain      * component.      */
DECL|interface|Web3jEndpointProducerBuilder
specifier|public
interface|interface
name|Web3jEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedWeb3jEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedWeb3jEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Contract address or a list of addresses.          *           * The option is a:<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          *           * Group: common          */
DECL|method|addresses (List<String> addresses)
specifier|default
name|Web3jEndpointProducerBuilder
name|addresses
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|addresses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"addresses"
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Contract address or a list of addresses.          *           * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          *           * Group: common          */
DECL|method|addresses (String addresses)
specifier|default
name|Web3jEndpointProducerBuilder
name|addresses
parameter_list|(
name|String
name|addresses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"addresses"
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The address the transaction is send from.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|fromAddress (String fromAddress)
specifier|default
name|Web3jEndpointProducerBuilder
name|fromAddress
parameter_list|(
name|String
name|fromAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromAddress"
argument_list|,
name|fromAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The block number, or the string latest for the last mined block or          * pending, earliest for not yet mined transactions.          *           * The option is a:          *<code>org.web3j.protocol.core.DefaultBlockParameter</code> type.          *           * Group: common          */
DECL|method|fromBlock (Object fromBlock)
specifier|default
name|Web3jEndpointProducerBuilder
name|fromBlock
parameter_list|(
name|Object
name|fromBlock
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromBlock"
argument_list|,
name|fromBlock
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The block number, or the string latest for the last mined block or          * pending, earliest for not yet mined transactions.          *           * The option will be converted to a          *<code>org.web3j.protocol.core.DefaultBlockParameter</code> type.          *           * Group: common          */
DECL|method|fromBlock (String fromBlock)
specifier|default
name|Web3jEndpointProducerBuilder
name|fromBlock
parameter_list|(
name|String
name|fromBlock
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromBlock"
argument_list|,
name|fromBlock
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true it returns the full transaction objects, if false only the          * hashes of the transactions.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|fullTransactionObjects ( boolean fullTransactionObjects)
specifier|default
name|Web3jEndpointProducerBuilder
name|fullTransactionObjects
parameter_list|(
name|boolean
name|fullTransactionObjects
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fullTransactionObjects"
argument_list|,
name|fullTransactionObjects
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true it returns the full transaction objects, if false only the          * hashes of the transactions.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|fullTransactionObjects ( String fullTransactionObjects)
specifier|default
name|Web3jEndpointProducerBuilder
name|fullTransactionObjects
parameter_list|(
name|String
name|fullTransactionObjects
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fullTransactionObjects"
argument_list|,
name|fullTransactionObjects
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum gas allowed in this block.          *           * The option is a:<code>java.math.BigInteger</code> type.          *           * Group: common          */
DECL|method|gasLimit (BigInteger gasLimit)
specifier|default
name|Web3jEndpointProducerBuilder
name|gasLimit
parameter_list|(
name|BigInteger
name|gasLimit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"gasLimit"
argument_list|,
name|gasLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum gas allowed in this block.          *           * The option will be converted to a<code>java.math.BigInteger</code>          * type.          *           * Group: common          */
DECL|method|gasLimit (String gasLimit)
specifier|default
name|Web3jEndpointProducerBuilder
name|gasLimit
parameter_list|(
name|String
name|gasLimit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"gasLimit"
argument_list|,
name|gasLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A transaction privateFor nodes with public keys in a Quorum network.          *           * The option is a:<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          *           * Group: common          */
DECL|method|privateFor (List<String> privateFor)
specifier|default
name|Web3jEndpointProducerBuilder
name|privateFor
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|privateFor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"privateFor"
argument_list|,
name|privateFor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A transaction privateFor nodes with public keys in a Quorum network.          *           * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          *           * Group: common          */
DECL|method|privateFor (String privateFor)
specifier|default
name|Web3jEndpointProducerBuilder
name|privateFor
parameter_list|(
name|String
name|privateFor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"privateFor"
argument_list|,
name|privateFor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, this will support Quorum API.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|quorumAPI (boolean quorumAPI)
specifier|default
name|Web3jEndpointProducerBuilder
name|quorumAPI
parameter_list|(
name|boolean
name|quorumAPI
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"quorumAPI"
argument_list|,
name|quorumAPI
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, this will support Quorum API.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|quorumAPI (String quorumAPI)
specifier|default
name|Web3jEndpointProducerBuilder
name|quorumAPI
parameter_list|(
name|String
name|quorumAPI
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"quorumAPI"
argument_list|,
name|quorumAPI
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The address the transaction is directed to.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|toAddress (String toAddress)
specifier|default
name|Web3jEndpointProducerBuilder
name|toAddress
parameter_list|(
name|String
name|toAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toAddress"
argument_list|,
name|toAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The block number, or the string latest for the last mined block or          * pending, earliest for not yet mined transactions.          *           * The option is a:          *<code>org.web3j.protocol.core.DefaultBlockParameter</code> type.          *           * Group: common          */
DECL|method|toBlock (Object toBlock)
specifier|default
name|Web3jEndpointProducerBuilder
name|toBlock
parameter_list|(
name|Object
name|toBlock
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toBlock"
argument_list|,
name|toBlock
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The block number, or the string latest for the last mined block or          * pending, earliest for not yet mined transactions.          *           * The option will be converted to a          *<code>org.web3j.protocol.core.DefaultBlockParameter</code> type.          *           * Group: common          */
DECL|method|toBlock (String toBlock)
specifier|default
name|Web3jEndpointProducerBuilder
name|toBlock
parameter_list|(
name|String
name|toBlock
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toBlock"
argument_list|,
name|toBlock
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Topics are order-dependent. Each topic can also be a list of topics.          * Specify multiple topics separated by comma.          *           * The option is a:<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          *           * Group: common          */
DECL|method|topics (List<String> topics)
specifier|default
name|Web3jEndpointProducerBuilder
name|topics
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|topics
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"topics"
argument_list|,
name|topics
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Topics are order-dependent. Each topic can also be a list of topics.          * Specify multiple topics separated by comma.          *           * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          *           * Group: common          */
DECL|method|topics (String topics)
specifier|default
name|Web3jEndpointProducerBuilder
name|topics
parameter_list|(
name|String
name|topics
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"topics"
argument_list|,
name|topics
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The preconfigured Web3j object.          *           * The option is a:<code>org.web3j.protocol.Web3j</code> type.          *           * Group: common          */
DECL|method|web3j (Object web3j)
specifier|default
name|Web3jEndpointProducerBuilder
name|web3j
parameter_list|(
name|Object
name|web3j
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"web3j"
argument_list|,
name|web3j
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The preconfigured Web3j object.          *           * The option will be converted to a          *<code>org.web3j.protocol.Web3j</code> type.          *           * Group: common          */
DECL|method|web3j (String web3j)
specifier|default
name|Web3jEndpointProducerBuilder
name|web3j
parameter_list|(
name|String
name|web3j
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"web3j"
argument_list|,
name|web3j
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Contract address.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|address (String address)
specifier|default
name|Web3jEndpointProducerBuilder
name|address
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"address"
argument_list|,
name|address
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The block number, or the string latest for the last mined block or          * pending, earliest for not yet mined transactions.          *           * The option is a:          *<code>org.web3j.protocol.core.DefaultBlockParameter</code> type.          *           * Group: producer          */
DECL|method|atBlock (Object atBlock)
specifier|default
name|Web3jEndpointProducerBuilder
name|atBlock
parameter_list|(
name|Object
name|atBlock
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"atBlock"
argument_list|,
name|atBlock
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The block number, or the string latest for the last mined block or          * pending, earliest for not yet mined transactions.          *           * The option will be converted to a          *<code>org.web3j.protocol.core.DefaultBlockParameter</code> type.          *           * Group: producer          */
DECL|method|atBlock (String atBlock)
specifier|default
name|Web3jEndpointProducerBuilder
name|atBlock
parameter_list|(
name|String
name|atBlock
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"atBlock"
argument_list|,
name|atBlock
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Hash of the block where this transaction was in.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|blockHash (String blockHash)
specifier|default
name|Web3jEndpointProducerBuilder
name|blockHash
parameter_list|(
name|String
name|blockHash
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"blockHash"
argument_list|,
name|blockHash
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A random hexadecimal(32 bytes) ID identifying the client.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|clientId (String clientId)
specifier|default
name|Web3jEndpointProducerBuilder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientId"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The compiled code of a contract OR the hash of the invoked method          * signature and encoded parameters.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|data (String data)
specifier|default
name|Web3jEndpointProducerBuilder
name|data
parameter_list|(
name|String
name|data
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"data"
argument_list|,
name|data
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The local database name.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|databaseName (String databaseName)
specifier|default
name|Web3jEndpointProducerBuilder
name|databaseName
parameter_list|(
name|String
name|databaseName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseName"
argument_list|,
name|databaseName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The filter id to use.          *           * The option is a:<code>java.math.BigInteger</code> type.          *           * Group: producer          */
DECL|method|filterId (BigInteger filterId)
specifier|default
name|Web3jEndpointProducerBuilder
name|filterId
parameter_list|(
name|BigInteger
name|filterId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"filterId"
argument_list|,
name|filterId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The filter id to use.          *           * The option will be converted to a<code>java.math.BigInteger</code>          * type.          *           * Group: producer          */
DECL|method|filterId (String filterId)
specifier|default
name|Web3jEndpointProducerBuilder
name|filterId
parameter_list|(
name|String
name|filterId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"filterId"
argument_list|,
name|filterId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Gas price used for each paid gas.          *           * The option is a:<code>java.math.BigInteger</code> type.          *           * Group: producer          */
DECL|method|gasPrice (BigInteger gasPrice)
specifier|default
name|Web3jEndpointProducerBuilder
name|gasPrice
parameter_list|(
name|BigInteger
name|gasPrice
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"gasPrice"
argument_list|,
name|gasPrice
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Gas price used for each paid gas.          *           * The option will be converted to a<code>java.math.BigInteger</code>          * type.          *           * Group: producer          */
DECL|method|gasPrice (String gasPrice)
specifier|default
name|Web3jEndpointProducerBuilder
name|gasPrice
parameter_list|(
name|String
name|gasPrice
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"gasPrice"
argument_list|,
name|gasPrice
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A hexadecimal string representation (32 bytes) of the hash rate.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|hashrate (String hashrate)
specifier|default
name|Web3jEndpointProducerBuilder
name|hashrate
parameter_list|(
name|String
name|hashrate
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"hashrate"
argument_list|,
name|hashrate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The header's pow-hash (256 bits) used for submitting a proof-of-work          * solution.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|headerPowHash (String headerPowHash)
specifier|default
name|Web3jEndpointProducerBuilder
name|headerPowHash
parameter_list|(
name|String
name|headerPowHash
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"headerPowHash"
argument_list|,
name|headerPowHash
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The transactions/uncle index position in the block.          *           * The option is a:<code>java.math.BigInteger</code> type.          *           * Group: producer          */
DECL|method|index (BigInteger index)
specifier|default
name|Web3jEndpointProducerBuilder
name|index
parameter_list|(
name|BigInteger
name|index
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"index"
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The transactions/uncle index position in the block.          *           * The option will be converted to a<code>java.math.BigInteger</code>          * type.          *           * Group: producer          */
DECL|method|index (String index)
specifier|default
name|Web3jEndpointProducerBuilder
name|index
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"index"
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The key name in the database.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|keyName (String keyName)
specifier|default
name|Web3jEndpointProducerBuilder
name|keyName
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyName"
argument_list|,
name|keyName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|Web3jEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|Web3jEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The mix digest (256 bits) used for submitting a proof-of-work          * solution.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|mixDigest (String mixDigest)
specifier|default
name|Web3jEndpointProducerBuilder
name|mixDigest
parameter_list|(
name|String
name|mixDigest
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mixDigest"
argument_list|,
name|mixDigest
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The nonce found (64 bits) used for submitting a proof-of-work          * solution.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|nonce (String nonce)
specifier|default
name|Web3jEndpointProducerBuilder
name|nonce
parameter_list|(
name|String
name|nonce
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nonce"
argument_list|,
name|nonce
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Operation to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|operation (String operation)
specifier|default
name|Web3jEndpointProducerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The transaction index position withing a block.          *           * The option is a:<code>java.math.BigInteger</code> type.          *           * Group: producer          */
DECL|method|position (BigInteger position)
specifier|default
name|Web3jEndpointProducerBuilder
name|position
parameter_list|(
name|BigInteger
name|position
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"position"
argument_list|,
name|position
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The transaction index position withing a block.          *           * The option will be converted to a<code>java.math.BigInteger</code>          * type.          *           * Group: producer          */
DECL|method|position (String position)
specifier|default
name|Web3jEndpointProducerBuilder
name|position
parameter_list|(
name|String
name|position
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"position"
argument_list|,
name|position
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The priority of a whisper message.          *           * The option is a:<code>java.math.BigInteger</code> type.          *           * Group: producer          */
DECL|method|priority (BigInteger priority)
specifier|default
name|Web3jEndpointProducerBuilder
name|priority
parameter_list|(
name|BigInteger
name|priority
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"priority"
argument_list|,
name|priority
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The priority of a whisper message.          *           * The option will be converted to a<code>java.math.BigInteger</code>          * type.          *           * Group: producer          */
DECL|method|priority (String priority)
specifier|default
name|Web3jEndpointProducerBuilder
name|priority
parameter_list|(
name|String
name|priority
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"priority"
argument_list|,
name|priority
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Message to sign by calculating an Ethereum specific signature.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|sha3HashOfDataToSign ( String sha3HashOfDataToSign)
specifier|default
name|Web3jEndpointProducerBuilder
name|sha3HashOfDataToSign
parameter_list|(
name|String
name|sha3HashOfDataToSign
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sha3HashOfDataToSign"
argument_list|,
name|sha3HashOfDataToSign
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The signed transaction data for a new message call transaction or a          * contract creation for signed transactions.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|signedTransactionData ( String signedTransactionData)
specifier|default
name|Web3jEndpointProducerBuilder
name|signedTransactionData
parameter_list|(
name|String
name|signedTransactionData
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"signedTransactionData"
argument_list|,
name|signedTransactionData
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The source code to compile.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|sourceCode (String sourceCode)
specifier|default
name|Web3jEndpointProducerBuilder
name|sourceCode
parameter_list|(
name|String
name|sourceCode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sourceCode"
argument_list|,
name|sourceCode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The information about a transaction requested by transaction hash.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|transactionHash ( String transactionHash)
specifier|default
name|Web3jEndpointProducerBuilder
name|transactionHash
parameter_list|(
name|String
name|transactionHash
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"transactionHash"
argument_list|,
name|transactionHash
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The time to live in seconds of a whisper message.          *           * The option is a:<code>java.math.BigInteger</code> type.          *           * Group: producer          */
DECL|method|ttl (BigInteger ttl)
specifier|default
name|Web3jEndpointProducerBuilder
name|ttl
parameter_list|(
name|BigInteger
name|ttl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ttl"
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The time to live in seconds of a whisper message.          *           * The option will be converted to a<code>java.math.BigInteger</code>          * type.          *           * Group: producer          */
DECL|method|ttl (String ttl)
specifier|default
name|Web3jEndpointProducerBuilder
name|ttl
parameter_list|(
name|String
name|ttl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"ttl"
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value sent within a transaction.          *           * The option is a:<code>java.math.BigInteger</code> type.          *           * Group: producer          */
DECL|method|value (BigInteger value)
specifier|default
name|Web3jEndpointProducerBuilder
name|value
parameter_list|(
name|BigInteger
name|value
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The value sent within a transaction.          *           * The option will be converted to a<code>java.math.BigInteger</code>          * type.          *           * Group: producer          */
DECL|method|value (String value)
specifier|default
name|Web3jEndpointProducerBuilder
name|value
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Web3j Ethereum Blockchain      * component.      */
DECL|interface|AdvancedWeb3jEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedWeb3jEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|Web3jEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|Web3jEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedWeb3jEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedWeb3jEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedWeb3jEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedWeb3jEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Web3j Ethereum Blockchain component.      */
DECL|interface|Web3jEndpointBuilder
specifier|public
interface|interface
name|Web3jEndpointBuilder
extends|extends
name|Web3jEndpointConsumerBuilder
extends|,
name|Web3jEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedWeb3jEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedWeb3jEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Contract address or a list of addresses.          *           * The option is a:<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          *           * Group: common          */
DECL|method|addresses (List<String> addresses)
specifier|default
name|Web3jEndpointBuilder
name|addresses
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|addresses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"addresses"
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Contract address or a list of addresses.          *           * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          *           * Group: common          */
DECL|method|addresses (String addresses)
specifier|default
name|Web3jEndpointBuilder
name|addresses
parameter_list|(
name|String
name|addresses
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"addresses"
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The address the transaction is send from.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|fromAddress (String fromAddress)
specifier|default
name|Web3jEndpointBuilder
name|fromAddress
parameter_list|(
name|String
name|fromAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromAddress"
argument_list|,
name|fromAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The block number, or the string latest for the last mined block or          * pending, earliest for not yet mined transactions.          *           * The option is a:          *<code>org.web3j.protocol.core.DefaultBlockParameter</code> type.          *           * Group: common          */
DECL|method|fromBlock (Object fromBlock)
specifier|default
name|Web3jEndpointBuilder
name|fromBlock
parameter_list|(
name|Object
name|fromBlock
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromBlock"
argument_list|,
name|fromBlock
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The block number, or the string latest for the last mined block or          * pending, earliest for not yet mined transactions.          *           * The option will be converted to a          *<code>org.web3j.protocol.core.DefaultBlockParameter</code> type.          *           * Group: common          */
DECL|method|fromBlock (String fromBlock)
specifier|default
name|Web3jEndpointBuilder
name|fromBlock
parameter_list|(
name|String
name|fromBlock
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromBlock"
argument_list|,
name|fromBlock
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true it returns the full transaction objects, if false only the          * hashes of the transactions.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|fullTransactionObjects ( boolean fullTransactionObjects)
specifier|default
name|Web3jEndpointBuilder
name|fullTransactionObjects
parameter_list|(
name|boolean
name|fullTransactionObjects
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fullTransactionObjects"
argument_list|,
name|fullTransactionObjects
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true it returns the full transaction objects, if false only the          * hashes of the transactions.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|fullTransactionObjects ( String fullTransactionObjects)
specifier|default
name|Web3jEndpointBuilder
name|fullTransactionObjects
parameter_list|(
name|String
name|fullTransactionObjects
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fullTransactionObjects"
argument_list|,
name|fullTransactionObjects
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum gas allowed in this block.          *           * The option is a:<code>java.math.BigInteger</code> type.          *           * Group: common          */
DECL|method|gasLimit (BigInteger gasLimit)
specifier|default
name|Web3jEndpointBuilder
name|gasLimit
parameter_list|(
name|BigInteger
name|gasLimit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"gasLimit"
argument_list|,
name|gasLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum gas allowed in this block.          *           * The option will be converted to a<code>java.math.BigInteger</code>          * type.          *           * Group: common          */
DECL|method|gasLimit (String gasLimit)
specifier|default
name|Web3jEndpointBuilder
name|gasLimit
parameter_list|(
name|String
name|gasLimit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"gasLimit"
argument_list|,
name|gasLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A transaction privateFor nodes with public keys in a Quorum network.          *           * The option is a:<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          *           * Group: common          */
DECL|method|privateFor (List<String> privateFor)
specifier|default
name|Web3jEndpointBuilder
name|privateFor
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|privateFor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"privateFor"
argument_list|,
name|privateFor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A transaction privateFor nodes with public keys in a Quorum network.          *           * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          *           * Group: common          */
DECL|method|privateFor (String privateFor)
specifier|default
name|Web3jEndpointBuilder
name|privateFor
parameter_list|(
name|String
name|privateFor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"privateFor"
argument_list|,
name|privateFor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, this will support Quorum API.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|quorumAPI (boolean quorumAPI)
specifier|default
name|Web3jEndpointBuilder
name|quorumAPI
parameter_list|(
name|boolean
name|quorumAPI
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"quorumAPI"
argument_list|,
name|quorumAPI
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, this will support Quorum API.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|quorumAPI (String quorumAPI)
specifier|default
name|Web3jEndpointBuilder
name|quorumAPI
parameter_list|(
name|String
name|quorumAPI
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"quorumAPI"
argument_list|,
name|quorumAPI
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The address the transaction is directed to.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|toAddress (String toAddress)
specifier|default
name|Web3jEndpointBuilder
name|toAddress
parameter_list|(
name|String
name|toAddress
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toAddress"
argument_list|,
name|toAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The block number, or the string latest for the last mined block or          * pending, earliest for not yet mined transactions.          *           * The option is a:          *<code>org.web3j.protocol.core.DefaultBlockParameter</code> type.          *           * Group: common          */
DECL|method|toBlock (Object toBlock)
specifier|default
name|Web3jEndpointBuilder
name|toBlock
parameter_list|(
name|Object
name|toBlock
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toBlock"
argument_list|,
name|toBlock
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The block number, or the string latest for the last mined block or          * pending, earliest for not yet mined transactions.          *           * The option will be converted to a          *<code>org.web3j.protocol.core.DefaultBlockParameter</code> type.          *           * Group: common          */
DECL|method|toBlock (String toBlock)
specifier|default
name|Web3jEndpointBuilder
name|toBlock
parameter_list|(
name|String
name|toBlock
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toBlock"
argument_list|,
name|toBlock
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Topics are order-dependent. Each topic can also be a list of topics.          * Specify multiple topics separated by comma.          *           * The option is a:<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          *           * Group: common          */
DECL|method|topics (List<String> topics)
specifier|default
name|Web3jEndpointBuilder
name|topics
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|topics
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"topics"
argument_list|,
name|topics
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Topics are order-dependent. Each topic can also be a list of topics.          * Specify multiple topics separated by comma.          *           * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          *           * Group: common          */
DECL|method|topics (String topics)
specifier|default
name|Web3jEndpointBuilder
name|topics
parameter_list|(
name|String
name|topics
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"topics"
argument_list|,
name|topics
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The preconfigured Web3j object.          *           * The option is a:<code>org.web3j.protocol.Web3j</code> type.          *           * Group: common          */
DECL|method|web3j (Object web3j)
specifier|default
name|Web3jEndpointBuilder
name|web3j
parameter_list|(
name|Object
name|web3j
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"web3j"
argument_list|,
name|web3j
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The preconfigured Web3j object.          *           * The option will be converted to a          *<code>org.web3j.protocol.Web3j</code> type.          *           * Group: common          */
DECL|method|web3j (String web3j)
specifier|default
name|Web3jEndpointBuilder
name|web3j
parameter_list|(
name|String
name|web3j
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"web3j"
argument_list|,
name|web3j
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Web3j Ethereum Blockchain      * component.      */
DECL|interface|AdvancedWeb3jEndpointBuilder
specifier|public
interface|interface
name|AdvancedWeb3jEndpointBuilder
extends|extends
name|AdvancedWeb3jEndpointConsumerBuilder
extends|,
name|AdvancedWeb3jEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|Web3jEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|Web3jEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedWeb3jEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedWeb3jEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedWeb3jEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedWeb3jEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Web3j Ethereum Blockchain (camel-web3j)      * The web3j component uses the Web3j client API and allows you to add/read      * nodes to/from a web3j compliant content repositories.      *       * Category: bitcoin,blockchain      * Since: 2.22      * Maven coordinates: org.apache.camel:camel-web3j      *       * Syntax:<code>web3j:nodeAddress</code>      *       * Path parameter: nodeAddress (required)      * Sets the node address used to communicate      */
DECL|method|web3j (String path)
specifier|default
name|Web3jEndpointBuilder
name|web3j
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|Web3jEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|Web3jEndpointBuilder
implements|,
name|AdvancedWeb3jEndpointBuilder
block|{
specifier|public
name|Web3jEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"web3j"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Web3jEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

