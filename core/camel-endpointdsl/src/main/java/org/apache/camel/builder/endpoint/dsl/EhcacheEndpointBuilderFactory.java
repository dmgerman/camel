begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The ehcache component enables you to perform caching operations using Ehcache  * as cache implementation.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|EhcacheEndpointBuilderFactory
specifier|public
interface|interface
name|EhcacheEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Ehcache component.      */
DECL|interface|EhcacheEndpointConsumerBuilder
specifier|public
interface|interface
name|EhcacheEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedEhcacheEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedEhcacheEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The cache manager.          *           * The option is a:          *<code>org.apache.camel.component.ehcache.EhcacheManager</code> type.          *           * Group: common          */
DECL|method|cacheManager (Object cacheManager)
specifier|default
name|EhcacheEndpointConsumerBuilder
name|cacheManager
parameter_list|(
name|Object
name|cacheManager
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheManager"
argument_list|,
name|cacheManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache manager.          *           * The option will be converted to a          *<code>org.apache.camel.component.ehcache.EhcacheManager</code> type.          *           * Group: common          */
DECL|method|cacheManager (String cacheManager)
specifier|default
name|EhcacheEndpointConsumerBuilder
name|cacheManager
parameter_list|(
name|String
name|cacheManager
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheManager"
argument_list|,
name|cacheManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache manager configuration.          *           * The option is a:<code>org.ehcache.config.Configuration</code> type.          *           * Group: common          */
DECL|method|cacheManagerConfiguration ( Object cacheManagerConfiguration)
specifier|default
name|EhcacheEndpointConsumerBuilder
name|cacheManagerConfiguration
parameter_list|(
name|Object
name|cacheManagerConfiguration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheManagerConfiguration"
argument_list|,
name|cacheManagerConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache manager configuration.          *           * The option will be converted to a          *<code>org.ehcache.config.Configuration</code> type.          *           * Group: common          */
DECL|method|cacheManagerConfiguration ( String cacheManagerConfiguration)
specifier|default
name|EhcacheEndpointConsumerBuilder
name|cacheManagerConfiguration
parameter_list|(
name|String
name|cacheManagerConfiguration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheManagerConfiguration"
argument_list|,
name|cacheManagerConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * URI pointing to the Ehcache XML configuration file's location.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|configurationUri ( String configurationUri)
specifier|default
name|EhcacheEndpointConsumerBuilder
name|configurationUri
parameter_list|(
name|String
name|configurationUri
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurationUri"
argument_list|,
name|configurationUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCacheIfNotExist ( boolean createCacheIfNotExist)
specifier|default
name|EhcacheEndpointConsumerBuilder
name|createCacheIfNotExist
parameter_list|(
name|boolean
name|createCacheIfNotExist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"createCacheIfNotExist"
argument_list|,
name|createCacheIfNotExist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCacheIfNotExist ( String createCacheIfNotExist)
specifier|default
name|EhcacheEndpointConsumerBuilder
name|createCacheIfNotExist
parameter_list|(
name|String
name|createCacheIfNotExist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"createCacheIfNotExist"
argument_list|,
name|createCacheIfNotExist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|EhcacheEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|EhcacheEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the delivery mode (synchronous, asynchronous).          *           * The option is a:<code>org.ehcache.event.EventFiring</code> type.          *           * Group: consumer          */
DECL|method|eventFiring ( EventFiring eventFiring)
specifier|default
name|EhcacheEndpointConsumerBuilder
name|eventFiring
parameter_list|(
name|EventFiring
name|eventFiring
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventFiring"
argument_list|,
name|eventFiring
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the delivery mode (synchronous, asynchronous).          *           * The option will be converted to a          *<code>org.ehcache.event.EventFiring</code> type.          *           * Group: consumer          */
DECL|method|eventFiring (String eventFiring)
specifier|default
name|EhcacheEndpointConsumerBuilder
name|eventFiring
parameter_list|(
name|String
name|eventFiring
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventFiring"
argument_list|,
name|eventFiring
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the delivery mode (ordered, unordered).          *           * The option is a:<code>org.ehcache.event.EventOrdering</code> type.          *           * Group: consumer          */
DECL|method|eventOrdering ( EventOrdering eventOrdering)
specifier|default
name|EhcacheEndpointConsumerBuilder
name|eventOrdering
parameter_list|(
name|EventOrdering
name|eventOrdering
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventOrdering"
argument_list|,
name|eventOrdering
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the delivery mode (ordered, unordered).          *           * The option will be converted to a          *<code>org.ehcache.event.EventOrdering</code> type.          *           * Group: consumer          */
DECL|method|eventOrdering ( String eventOrdering)
specifier|default
name|EhcacheEndpointConsumerBuilder
name|eventOrdering
parameter_list|(
name|String
name|eventOrdering
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventOrdering"
argument_list|,
name|eventOrdering
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the type of events to listen for.          *           * The option is a:          *<code>java.util.Set&lt;org.ehcache.event.EventType&gt;</code> type.          *           * Group: consumer          */
DECL|method|eventTypes ( Set<EventType> eventTypes)
specifier|default
name|EhcacheEndpointConsumerBuilder
name|eventTypes
parameter_list|(
name|Set
argument_list|<
name|EventType
argument_list|>
name|eventTypes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventTypes"
argument_list|,
name|eventTypes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the type of events to listen for.          *           * The option will be converted to a          *<code>java.util.Set&lt;org.ehcache.event.EventType&gt;</code> type.          *           * Group: consumer          */
DECL|method|eventTypes (String eventTypes)
specifier|default
name|EhcacheEndpointConsumerBuilder
name|eventTypes
parameter_list|(
name|String
name|eventTypes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventTypes"
argument_list|,
name|eventTypes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Ehcache component.      */
DECL|interface|AdvancedEhcacheEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedEhcacheEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|EhcacheEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|EhcacheEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedEhcacheEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedEhcacheEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedEhcacheEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedEhcacheEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedEhcacheEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedEhcacheEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default cache configuration to be used to create caches.          *           * The option is a:          *<code>org.apache.camel.component.ehcache.EhcacheConfiguration</code>          * type.          *           * Group: advanced          */
DECL|method|configuration ( Object configuration)
specifier|default
name|AdvancedEhcacheEndpointConsumerBuilder
name|configuration
parameter_list|(
name|Object
name|configuration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configuration"
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default cache configuration to be used to create caches.          *           * The option will be converted to a          *<code>org.apache.camel.component.ehcache.EhcacheConfiguration</code>          * type.          *           * Group: advanced          */
DECL|method|configuration ( String configuration)
specifier|default
name|AdvancedEhcacheEndpointConsumerBuilder
name|configuration
parameter_list|(
name|String
name|configuration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configuration"
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A map of cache configuration to be used to create caches.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * org.ehcache.config.CacheConfiguration&gt;</code> type.          *           * Group: advanced          */
DECL|method|configurations ( Map<String, Object> configurations)
specifier|default
name|AdvancedEhcacheEndpointConsumerBuilder
name|configurations
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configurations
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurations"
argument_list|,
name|configurations
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A map of cache configuration to be used to create caches.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String,          * org.ehcache.config.CacheConfiguration&gt;</code> type.          *           * Group: advanced          */
DECL|method|configurations ( String configurations)
specifier|default
name|AdvancedEhcacheEndpointConsumerBuilder
name|configurations
parameter_list|(
name|String
name|configurations
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurations"
argument_list|,
name|configurations
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache key type, default java.lang.Object.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|keyType (String keyType)
specifier|default
name|AdvancedEhcacheEndpointConsumerBuilder
name|keyType
parameter_list|(
name|String
name|keyType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyType"
argument_list|,
name|keyType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedEhcacheEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedEhcacheEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache value type, default java.lang.Object.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|valueType ( String valueType)
specifier|default
name|AdvancedEhcacheEndpointConsumerBuilder
name|valueType
parameter_list|(
name|String
name|valueType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"valueType"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Ehcache component.      */
DECL|interface|EhcacheEndpointProducerBuilder
specifier|public
interface|interface
name|EhcacheEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedEhcacheEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedEhcacheEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The cache manager.          *           * The option is a:          *<code>org.apache.camel.component.ehcache.EhcacheManager</code> type.          *           * Group: common          */
DECL|method|cacheManager (Object cacheManager)
specifier|default
name|EhcacheEndpointProducerBuilder
name|cacheManager
parameter_list|(
name|Object
name|cacheManager
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheManager"
argument_list|,
name|cacheManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache manager.          *           * The option will be converted to a          *<code>org.apache.camel.component.ehcache.EhcacheManager</code> type.          *           * Group: common          */
DECL|method|cacheManager (String cacheManager)
specifier|default
name|EhcacheEndpointProducerBuilder
name|cacheManager
parameter_list|(
name|String
name|cacheManager
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheManager"
argument_list|,
name|cacheManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache manager configuration.          *           * The option is a:<code>org.ehcache.config.Configuration</code> type.          *           * Group: common          */
DECL|method|cacheManagerConfiguration ( Object cacheManagerConfiguration)
specifier|default
name|EhcacheEndpointProducerBuilder
name|cacheManagerConfiguration
parameter_list|(
name|Object
name|cacheManagerConfiguration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheManagerConfiguration"
argument_list|,
name|cacheManagerConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache manager configuration.          *           * The option will be converted to a          *<code>org.ehcache.config.Configuration</code> type.          *           * Group: common          */
DECL|method|cacheManagerConfiguration ( String cacheManagerConfiguration)
specifier|default
name|EhcacheEndpointProducerBuilder
name|cacheManagerConfiguration
parameter_list|(
name|String
name|cacheManagerConfiguration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheManagerConfiguration"
argument_list|,
name|cacheManagerConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * URI pointing to the Ehcache XML configuration file's location.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|configurationUri ( String configurationUri)
specifier|default
name|EhcacheEndpointProducerBuilder
name|configurationUri
parameter_list|(
name|String
name|configurationUri
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurationUri"
argument_list|,
name|configurationUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCacheIfNotExist ( boolean createCacheIfNotExist)
specifier|default
name|EhcacheEndpointProducerBuilder
name|createCacheIfNotExist
parameter_list|(
name|boolean
name|createCacheIfNotExist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"createCacheIfNotExist"
argument_list|,
name|createCacheIfNotExist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCacheIfNotExist ( String createCacheIfNotExist)
specifier|default
name|EhcacheEndpointProducerBuilder
name|createCacheIfNotExist
parameter_list|(
name|String
name|createCacheIfNotExist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"createCacheIfNotExist"
argument_list|,
name|createCacheIfNotExist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the default cache action. If an action is set in the          * message header, then the operation from the header takes precedence.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|action (String action)
specifier|default
name|EhcacheEndpointProducerBuilder
name|action
parameter_list|(
name|String
name|action
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"action"
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the default action key. If a key is set in the message          * header, then the key from the header takes precedence.          *           * The option is a:<code>java.lang.Object</code> type.          *           * Group: producer          */
DECL|method|key (Object key)
specifier|default
name|EhcacheEndpointProducerBuilder
name|key
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"key"
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the default action key. If a key is set in the message          * header, then the key from the header takes precedence.          *           * The option will be converted to a<code>java.lang.Object</code> type.          *           * Group: producer          */
DECL|method|key (String key)
specifier|default
name|EhcacheEndpointProducerBuilder
name|key
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"key"
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|EhcacheEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|EhcacheEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Ehcache component.      */
DECL|interface|AdvancedEhcacheEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedEhcacheEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|EhcacheEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|EhcacheEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedEhcacheEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedEhcacheEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default cache configuration to be used to create caches.          *           * The option is a:          *<code>org.apache.camel.component.ehcache.EhcacheConfiguration</code>          * type.          *           * Group: advanced          */
DECL|method|configuration ( Object configuration)
specifier|default
name|AdvancedEhcacheEndpointProducerBuilder
name|configuration
parameter_list|(
name|Object
name|configuration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configuration"
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default cache configuration to be used to create caches.          *           * The option will be converted to a          *<code>org.apache.camel.component.ehcache.EhcacheConfiguration</code>          * type.          *           * Group: advanced          */
DECL|method|configuration ( String configuration)
specifier|default
name|AdvancedEhcacheEndpointProducerBuilder
name|configuration
parameter_list|(
name|String
name|configuration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configuration"
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A map of cache configuration to be used to create caches.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * org.ehcache.config.CacheConfiguration&gt;</code> type.          *           * Group: advanced          */
DECL|method|configurations ( Map<String, Object> configurations)
specifier|default
name|AdvancedEhcacheEndpointProducerBuilder
name|configurations
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configurations
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurations"
argument_list|,
name|configurations
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A map of cache configuration to be used to create caches.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String,          * org.ehcache.config.CacheConfiguration&gt;</code> type.          *           * Group: advanced          */
DECL|method|configurations ( String configurations)
specifier|default
name|AdvancedEhcacheEndpointProducerBuilder
name|configurations
parameter_list|(
name|String
name|configurations
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurations"
argument_list|,
name|configurations
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache key type, default java.lang.Object.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|keyType (String keyType)
specifier|default
name|AdvancedEhcacheEndpointProducerBuilder
name|keyType
parameter_list|(
name|String
name|keyType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyType"
argument_list|,
name|keyType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedEhcacheEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedEhcacheEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache value type, default java.lang.Object.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|valueType ( String valueType)
specifier|default
name|AdvancedEhcacheEndpointProducerBuilder
name|valueType
parameter_list|(
name|String
name|valueType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"valueType"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Ehcache component.      */
DECL|interface|EhcacheEndpointBuilder
specifier|public
interface|interface
name|EhcacheEndpointBuilder
extends|extends
name|EhcacheEndpointConsumerBuilder
extends|,
name|EhcacheEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedEhcacheEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedEhcacheEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The cache manager.          *           * The option is a:          *<code>org.apache.camel.component.ehcache.EhcacheManager</code> type.          *           * Group: common          */
DECL|method|cacheManager (Object cacheManager)
specifier|default
name|EhcacheEndpointBuilder
name|cacheManager
parameter_list|(
name|Object
name|cacheManager
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheManager"
argument_list|,
name|cacheManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache manager.          *           * The option will be converted to a          *<code>org.apache.camel.component.ehcache.EhcacheManager</code> type.          *           * Group: common          */
DECL|method|cacheManager (String cacheManager)
specifier|default
name|EhcacheEndpointBuilder
name|cacheManager
parameter_list|(
name|String
name|cacheManager
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheManager"
argument_list|,
name|cacheManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache manager configuration.          *           * The option is a:<code>org.ehcache.config.Configuration</code> type.          *           * Group: common          */
DECL|method|cacheManagerConfiguration ( Object cacheManagerConfiguration)
specifier|default
name|EhcacheEndpointBuilder
name|cacheManagerConfiguration
parameter_list|(
name|Object
name|cacheManagerConfiguration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheManagerConfiguration"
argument_list|,
name|cacheManagerConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache manager configuration.          *           * The option will be converted to a          *<code>org.ehcache.config.Configuration</code> type.          *           * Group: common          */
DECL|method|cacheManagerConfiguration ( String cacheManagerConfiguration)
specifier|default
name|EhcacheEndpointBuilder
name|cacheManagerConfiguration
parameter_list|(
name|String
name|cacheManagerConfiguration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheManagerConfiguration"
argument_list|,
name|cacheManagerConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * URI pointing to the Ehcache XML configuration file's location.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|configurationUri (String configurationUri)
specifier|default
name|EhcacheEndpointBuilder
name|configurationUri
parameter_list|(
name|String
name|configurationUri
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurationUri"
argument_list|,
name|configurationUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCacheIfNotExist ( boolean createCacheIfNotExist)
specifier|default
name|EhcacheEndpointBuilder
name|createCacheIfNotExist
parameter_list|(
name|boolean
name|createCacheIfNotExist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"createCacheIfNotExist"
argument_list|,
name|createCacheIfNotExist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCacheIfNotExist ( String createCacheIfNotExist)
specifier|default
name|EhcacheEndpointBuilder
name|createCacheIfNotExist
parameter_list|(
name|String
name|createCacheIfNotExist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"createCacheIfNotExist"
argument_list|,
name|createCacheIfNotExist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Ehcache component.      */
DECL|interface|AdvancedEhcacheEndpointBuilder
specifier|public
interface|interface
name|AdvancedEhcacheEndpointBuilder
extends|extends
name|AdvancedEhcacheEndpointConsumerBuilder
extends|,
name|AdvancedEhcacheEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|EhcacheEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|EhcacheEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedEhcacheEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedEhcacheEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default cache configuration to be used to create caches.          *           * The option is a:          *<code>org.apache.camel.component.ehcache.EhcacheConfiguration</code>          * type.          *           * Group: advanced          */
DECL|method|configuration ( Object configuration)
specifier|default
name|AdvancedEhcacheEndpointBuilder
name|configuration
parameter_list|(
name|Object
name|configuration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configuration"
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The default cache configuration to be used to create caches.          *           * The option will be converted to a          *<code>org.apache.camel.component.ehcache.EhcacheConfiguration</code>          * type.          *           * Group: advanced          */
DECL|method|configuration ( String configuration)
specifier|default
name|AdvancedEhcacheEndpointBuilder
name|configuration
parameter_list|(
name|String
name|configuration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configuration"
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A map of cache configuration to be used to create caches.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * org.ehcache.config.CacheConfiguration&gt;</code> type.          *           * Group: advanced          */
DECL|method|configurations ( Map<String, Object> configurations)
specifier|default
name|AdvancedEhcacheEndpointBuilder
name|configurations
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configurations
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurations"
argument_list|,
name|configurations
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A map of cache configuration to be used to create caches.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String,          * org.ehcache.config.CacheConfiguration&gt;</code> type.          *           * Group: advanced          */
DECL|method|configurations ( String configurations)
specifier|default
name|AdvancedEhcacheEndpointBuilder
name|configurations
parameter_list|(
name|String
name|configurations
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"configurations"
argument_list|,
name|configurations
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache key type, default java.lang.Object.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|keyType (String keyType)
specifier|default
name|AdvancedEhcacheEndpointBuilder
name|keyType
parameter_list|(
name|String
name|keyType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyType"
argument_list|,
name|keyType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedEhcacheEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedEhcacheEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache value type, default java.lang.Object.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|valueType (String valueType)
specifier|default
name|AdvancedEhcacheEndpointBuilder
name|valueType
parameter_list|(
name|String
name|valueType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"valueType"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for<code>org.ehcache.event.EventFiring</code> enum.      */
DECL|enum|EventFiring
enum|enum
name|EventFiring
block|{
DECL|enumConstant|ASYNCHRONOUS
name|ASYNCHRONOUS
block|,
DECL|enumConstant|SYNCHRONOUS
name|SYNCHRONOUS
block|;     }
comment|/**      * Proxy enum for<code>org.ehcache.event.EventOrdering</code> enum.      */
DECL|enum|EventOrdering
enum|enum
name|EventOrdering
block|{
DECL|enumConstant|UNORDERED
name|UNORDERED
block|,
DECL|enumConstant|ORDERED
name|ORDERED
block|;     }
comment|/**      * Proxy enum for<code>org.ehcache.event.EventType</code> enum.      */
DECL|enum|EventType
enum|enum
name|EventType
block|{
DECL|enumConstant|EVICTED
name|EVICTED
block|,
DECL|enumConstant|EXPIRED
name|EXPIRED
block|,
DECL|enumConstant|REMOVED
name|REMOVED
block|,
DECL|enumConstant|CREATED
name|CREATED
block|,
DECL|enumConstant|UPDATED
name|UPDATED
block|;     }
comment|/**      * Ehcache (camel-ehcache)      * The ehcache component enables you to perform caching operations using      * Ehcache as cache implementation.      *       * Category: cache,datagrid,clustering      * Available as of version: 2.18      * Maven coordinates: org.apache.camel:camel-ehcache      *       * Syntax:<code>ehcache:cacheName</code>      *       * Path parameter: cacheName (required)      * the cache name      */
DECL|method|ehcache (String path)
specifier|default
name|EhcacheEndpointBuilder
name|ehcache
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|EhcacheEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|EhcacheEndpointBuilder
implements|,
name|AdvancedEhcacheEndpointBuilder
block|{
specifier|public
name|EhcacheEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"ehcache"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|EhcacheEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

