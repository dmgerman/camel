begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PollingConsumerPollStrategy
import|;
end_import

begin_comment
comment|/**  * The Twitter Direct Message Component consumes/produces user's direct  * messages.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|TwitterDirectMessageEndpointBuilderFactory
specifier|public
interface|interface
name|TwitterDirectMessageEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Twitter Direct Message component.      */
DECL|interface|TwitterDirectMessageEndpointConsumerBuilder
specifier|public
interface|interface
name|TwitterDirectMessageEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( boolean sendEmptyMessageWhenIdle)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|boolean
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( String sendEmptyMessageWhenIdle)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|String
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Endpoint type to use.          *           * The option is a:          *<code>org.apache.camel.component.twitter.data.EndpointType</code>          * type.          *           * Group: consumer          */
DECL|method|type ( EndpointType type)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|type
parameter_list|(
name|EndpointType
name|type
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Endpoint type to use.          *           * The option will be converted to a          *<code>org.apache.camel.component.twitter.data.EndpointType</code>          * type.          *           * Group: consumer          */
DECL|method|type (String type)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|type
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"type"
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Limiting number of results per page.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: filter          */
DECL|method|count (Integer count)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|count
parameter_list|(
name|Integer
name|count
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"count"
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Limiting number of results per page.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: filter          */
DECL|method|count (String count)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|count
parameter_list|(
name|String
name|count
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"count"
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Filter out old tweets, that has previously been polled. This state is          * stored in memory only, and based on last tweet id.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|filterOld ( boolean filterOld)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|filterOld
parameter_list|(
name|boolean
name|filterOld
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"filterOld"
argument_list|,
name|filterOld
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Filter out old tweets, that has previously been polled. This state is          * stored in memory only, and based on last tweet id.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|filterOld ( String filterOld)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|filterOld
parameter_list|(
name|String
name|filterOld
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"filterOld"
argument_list|,
name|filterOld
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The lang string ISO_639-1 which will be used for searching.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: filter          */
DECL|method|lang (String lang)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|lang
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lang"
argument_list|,
name|lang
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of pages result which you want camel-twitter to consume.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: filter          */
DECL|method|numberOfPages ( Integer numberOfPages)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|numberOfPages
parameter_list|(
name|Integer
name|numberOfPages
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"numberOfPages"
argument_list|,
name|numberOfPages
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of pages result which you want camel-twitter to consume.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: filter          */
DECL|method|numberOfPages ( String numberOfPages)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|numberOfPages
parameter_list|(
name|String
name|numberOfPages
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"numberOfPages"
argument_list|,
name|numberOfPages
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The last tweet id which will be used for pulling the tweets. It is          * useful when the camel route is restarted after a long running.          *           * The option is a:<code>long</code> type.          *           * Group: filter          */
DECL|method|sinceId (long sinceId)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|sinceId
parameter_list|(
name|long
name|sinceId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sinceId"
argument_list|,
name|sinceId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The last tweet id which will be used for pulling the tweets. It is          * useful when the camel route is restarted after a long running.          *           * The option will be converted to a<code>long</code> type.          *           * Group: filter          */
DECL|method|sinceId ( String sinceId)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|sinceId
parameter_list|(
name|String
name|sinceId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sinceId"
argument_list|,
name|sinceId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To filter by user ids for filter. Multiple values can be separated by          * comma.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: filter          */
DECL|method|userIds ( String userIds)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|userIds
parameter_list|(
name|String
name|userIds
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"userIds"
argument_list|,
name|userIds
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( int backoffErrorThreshold)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|int
name|backoffErrorThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( String backoffErrorThreshold)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|String
name|backoffErrorThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( int backoffIdleThreshold)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|int
name|backoffIdleThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( String backoffIdleThreshold)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|String
name|backoffIdleThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( int backoffMultiplier)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|int
name|backoffMultiplier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( String backoffMultiplier)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|String
name|backoffMultiplier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll.          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (long delay)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|delay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (String delay)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|delay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy ( boolean greedy)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|greedy
parameter_list|(
name|boolean
name|greedy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy (String greedy)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|greedy
parameter_list|(
name|String
name|greedy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay ( long initialDelay)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|long
name|initialDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay ( String initialDelay)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|String
name|initialDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies a maximum limit of number of fires. So if you set it to 1,          * the scheduler will only fire once. If you set it to 5, it will only          * fire five times. A value of zero or negative means fire forever.          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|repeatCount ( long repeatCount)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|repeatCount
parameter_list|(
name|long
name|repeatCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"repeatCount"
argument_list|,
name|repeatCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies a maximum limit of number of fires. So if you set it to 1,          * the scheduler will only fire once. If you set it to 5, it will only          * fire five times. A value of zero or negative means fire forever.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|repeatCount ( String repeatCount)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|repeatCount
parameter_list|(
name|String
name|repeatCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"repeatCount"
argument_list|,
name|repeatCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option is a:<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( LoggingLevel runLoggingLevel)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|LoggingLevel
name|runLoggingLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( String runLoggingLevel)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|String
name|runLoggingLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option is a:          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( ScheduledExecutorService scheduledExecutorService)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|ScheduledExecutorService
name|scheduledExecutorService
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option will be converted to a          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( String scheduledExecutorService)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|String
name|scheduledExecutorService
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a cron scheduler from either camel-spring or camel-quartz          * component.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: scheduler          */
DECL|method|scheduler ( String scheduler)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|scheduler
parameter_list|(
name|String
name|scheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduler"
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz, Spring based scheduler.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( Map<String, Object> schedulerProperties)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|schedulerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz, Spring based scheduler.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( String schedulerProperties)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|String
name|schedulerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler ( boolean startScheduler)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|boolean
name|startScheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler ( String startScheduler)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|String
name|startScheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option is a:<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit ( TimeUnit timeUnit)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option will be converted to a          *<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit ( String timeUnit)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|String
name|timeUnit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay ( boolean useFixedDelay)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|boolean
name|useFixedDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay ( String useFixedDelay)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|String
name|useFixedDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sorts by id, so the oldest are first, and newest last.          *           * The option is a:<code>boolean</code> type.          *           * Group: sort          */
DECL|method|sortById ( boolean sortById)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|sortById
parameter_list|(
name|boolean
name|sortById
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sortById"
argument_list|,
name|sortById
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sorts by id, so the oldest are first, and newest last.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: sort          */
DECL|method|sortById ( String sortById)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|sortById
parameter_list|(
name|String
name|sortById
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sortById"
argument_list|,
name|sortById
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The http proxy host which can be used for the camel-twitter. Can also          * be configured on the TwitterComponent level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyHost ( String httpProxyHost)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|httpProxyHost
parameter_list|(
name|String
name|httpProxyHost
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpProxyHost"
argument_list|,
name|httpProxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The http proxy password which can be used for the camel-twitter. Can          * also be configured on the TwitterComponent level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyPassword ( String httpProxyPassword)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|httpProxyPassword
parameter_list|(
name|String
name|httpProxyPassword
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpProxyPassword"
argument_list|,
name|httpProxyPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The http proxy port which can be used for the camel-twitter. Can also          * be configured on the TwitterComponent level instead.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: proxy          */
DECL|method|httpProxyPort ( Integer httpProxyPort)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|httpProxyPort
parameter_list|(
name|Integer
name|httpProxyPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpProxyPort"
argument_list|,
name|httpProxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The http proxy port which can be used for the camel-twitter. Can also          * be configured on the TwitterComponent level instead.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: proxy          */
DECL|method|httpProxyPort ( String httpProxyPort)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|httpProxyPort
parameter_list|(
name|String
name|httpProxyPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpProxyPort"
argument_list|,
name|httpProxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The http proxy user which can be used for the camel-twitter. Can also          * be configured on the TwitterComponent level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyUser ( String httpProxyUser)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|httpProxyUser
parameter_list|(
name|String
name|httpProxyUser
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpProxyUser"
argument_list|,
name|httpProxyUser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The access token. Can also be configured on the TwitterComponent          * level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessToken ( String accessToken)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The access secret. Can also be configured on the TwitterComponent          * level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessTokenSecret ( String accessTokenSecret)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|accessTokenSecret
parameter_list|(
name|String
name|accessTokenSecret
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"accessTokenSecret"
argument_list|,
name|accessTokenSecret
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer key. Can also be configured on the TwitterComponent          * level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|consumerKey ( String consumerKey)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|consumerKey
parameter_list|(
name|String
name|consumerKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"consumerKey"
argument_list|,
name|consumerKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer secret. Can also be configured on the TwitterComponent          * level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|consumerSecret ( String consumerSecret)
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|consumerSecret
parameter_list|(
name|String
name|consumerSecret
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"consumerSecret"
argument_list|,
name|consumerSecret
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Twitter Direct Message      * component.      */
DECL|interface|AdvancedTwitterDirectMessageEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|TwitterDirectMessageEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|TwitterDirectMessageEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Used by the geography search, to search by radius using the          * configured metrics. The unit can either be mi for miles, or km for          * kilometers. You need to configure all the following options:          * longitude, latitude, radius, and distanceMetric.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer (advanced)          */
DECL|method|distanceMetric ( String distanceMetric)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|distanceMetric
parameter_list|(
name|String
name|distanceMetric
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"distanceMetric"
argument_list|,
name|distanceMetric
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used for enabling full text from twitter (eg receive tweets that          * contains more than 140 characters).          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|extendedMode ( boolean extendedMode)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|extendedMode
parameter_list|(
name|boolean
name|extendedMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"extendedMode"
argument_list|,
name|extendedMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used for enabling full text from twitter (eg receive tweets that          * contains more than 140 characters).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|extendedMode ( String extendedMode)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|extendedMode
parameter_list|(
name|String
name|extendedMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"extendedMode"
argument_list|,
name|extendedMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used by the geography search to search by latitude. You need to          * configure all the following options: longitude, latitude, radius, and          * distanceMetric.          *           * The option is a:<code>java.lang.Double</code> type.          *           * Group: consumer (advanced)          */
DECL|method|latitude ( Double latitude)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|latitude
parameter_list|(
name|Double
name|latitude
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"latitude"
argument_list|,
name|latitude
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used by the geography search to search by latitude. You need to          * configure all the following options: longitude, latitude, radius, and          * distanceMetric.          *           * The option will be converted to a<code>java.lang.Double</code> type.          *           * Group: consumer (advanced)          */
DECL|method|latitude ( String latitude)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|latitude
parameter_list|(
name|String
name|latitude
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"latitude"
argument_list|,
name|latitude
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Bounding boxes, created by pairs of lat/lons. Can be used for filter.          * A pair is defined as lat,lon. And multiple paris can be separated by          * semi colon.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer (advanced)          */
DECL|method|locations ( String locations)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|locations
parameter_list|(
name|String
name|locations
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"locations"
argument_list|,
name|locations
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used by the geography search to search by longitude. You need to          * configure all the following options: longitude, latitude, radius, and          * distanceMetric.          *           * The option is a:<code>java.lang.Double</code> type.          *           * Group: consumer (advanced)          */
DECL|method|longitude ( Double longitude)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|longitude
parameter_list|(
name|Double
name|longitude
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"longitude"
argument_list|,
name|longitude
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used by the geography search to search by longitude. You need to          * configure all the following options: longitude, latitude, radius, and          * distanceMetric.          *           * The option will be converted to a<code>java.lang.Double</code> type.          *           * Group: consumer (advanced)          */
DECL|method|longitude ( String longitude)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|longitude
parameter_list|(
name|String
name|longitude
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"longitude"
argument_list|,
name|longitude
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option is a:          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( PollingConsumerPollStrategy pollStrategy)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|PollingConsumerPollStrategy
name|pollStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option will be converted to a          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( String pollStrategy)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|String
name|pollStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used by the geography search to search by radius. You need to          * configure all the following options: longitude, latitude, radius, and          * distanceMetric.          *           * The option is a:<code>java.lang.Double</code> type.          *           * Group: consumer (advanced)          */
DECL|method|radius ( Double radius)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|radius
parameter_list|(
name|Double
name|radius
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"radius"
argument_list|,
name|radius
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used by the geography search to search by radius. You need to          * configure all the following options: longitude, latitude, radius, and          * distanceMetric.          *           * The option will be converted to a<code>java.lang.Double</code> type.          *           * Group: consumer (advanced)          */
DECL|method|radius ( String radius)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|radius
parameter_list|(
name|String
name|radius
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"radius"
argument_list|,
name|radius
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Twitter Direct Message component.      */
DECL|interface|TwitterDirectMessageEndpointProducerBuilder
specifier|public
interface|interface
name|TwitterDirectMessageEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedTwitterDirectMessageEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedTwitterDirectMessageEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|TwitterDirectMessageEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|TwitterDirectMessageEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The http proxy host which can be used for the camel-twitter. Can also          * be configured on the TwitterComponent level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyHost ( String httpProxyHost)
specifier|default
name|TwitterDirectMessageEndpointProducerBuilder
name|httpProxyHost
parameter_list|(
name|String
name|httpProxyHost
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpProxyHost"
argument_list|,
name|httpProxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The http proxy password which can be used for the camel-twitter. Can          * also be configured on the TwitterComponent level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyPassword ( String httpProxyPassword)
specifier|default
name|TwitterDirectMessageEndpointProducerBuilder
name|httpProxyPassword
parameter_list|(
name|String
name|httpProxyPassword
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpProxyPassword"
argument_list|,
name|httpProxyPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The http proxy port which can be used for the camel-twitter. Can also          * be configured on the TwitterComponent level instead.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: proxy          */
DECL|method|httpProxyPort ( Integer httpProxyPort)
specifier|default
name|TwitterDirectMessageEndpointProducerBuilder
name|httpProxyPort
parameter_list|(
name|Integer
name|httpProxyPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpProxyPort"
argument_list|,
name|httpProxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The http proxy port which can be used for the camel-twitter. Can also          * be configured on the TwitterComponent level instead.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: proxy          */
DECL|method|httpProxyPort ( String httpProxyPort)
specifier|default
name|TwitterDirectMessageEndpointProducerBuilder
name|httpProxyPort
parameter_list|(
name|String
name|httpProxyPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpProxyPort"
argument_list|,
name|httpProxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The http proxy user which can be used for the camel-twitter. Can also          * be configured on the TwitterComponent level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyUser ( String httpProxyUser)
specifier|default
name|TwitterDirectMessageEndpointProducerBuilder
name|httpProxyUser
parameter_list|(
name|String
name|httpProxyUser
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpProxyUser"
argument_list|,
name|httpProxyUser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The access token. Can also be configured on the TwitterComponent          * level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessToken ( String accessToken)
specifier|default
name|TwitterDirectMessageEndpointProducerBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The access secret. Can also be configured on the TwitterComponent          * level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessTokenSecret ( String accessTokenSecret)
specifier|default
name|TwitterDirectMessageEndpointProducerBuilder
name|accessTokenSecret
parameter_list|(
name|String
name|accessTokenSecret
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"accessTokenSecret"
argument_list|,
name|accessTokenSecret
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer key. Can also be configured on the TwitterComponent          * level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|consumerKey ( String consumerKey)
specifier|default
name|TwitterDirectMessageEndpointProducerBuilder
name|consumerKey
parameter_list|(
name|String
name|consumerKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"consumerKey"
argument_list|,
name|consumerKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer secret. Can also be configured on the TwitterComponent          * level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|consumerSecret ( String consumerSecret)
specifier|default
name|TwitterDirectMessageEndpointProducerBuilder
name|consumerSecret
parameter_list|(
name|String
name|consumerSecret
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"consumerSecret"
argument_list|,
name|consumerSecret
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Twitter Direct Message      * component.      */
DECL|interface|AdvancedTwitterDirectMessageEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedTwitterDirectMessageEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|TwitterDirectMessageEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|TwitterDirectMessageEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedTwitterDirectMessageEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedTwitterDirectMessageEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedTwitterDirectMessageEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedTwitterDirectMessageEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Twitter Direct Message component.      */
DECL|interface|TwitterDirectMessageEndpointBuilder
specifier|public
interface|interface
name|TwitterDirectMessageEndpointBuilder
extends|extends
name|TwitterDirectMessageEndpointConsumerBuilder
extends|,
name|TwitterDirectMessageEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedTwitterDirectMessageEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedTwitterDirectMessageEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The http proxy host which can be used for the camel-twitter. Can also          * be configured on the TwitterComponent level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyHost ( String httpProxyHost)
specifier|default
name|TwitterDirectMessageEndpointBuilder
name|httpProxyHost
parameter_list|(
name|String
name|httpProxyHost
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpProxyHost"
argument_list|,
name|httpProxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The http proxy password which can be used for the camel-twitter. Can          * also be configured on the TwitterComponent level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyPassword ( String httpProxyPassword)
specifier|default
name|TwitterDirectMessageEndpointBuilder
name|httpProxyPassword
parameter_list|(
name|String
name|httpProxyPassword
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpProxyPassword"
argument_list|,
name|httpProxyPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The http proxy port which can be used for the camel-twitter. Can also          * be configured on the TwitterComponent level instead.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: proxy          */
DECL|method|httpProxyPort ( Integer httpProxyPort)
specifier|default
name|TwitterDirectMessageEndpointBuilder
name|httpProxyPort
parameter_list|(
name|Integer
name|httpProxyPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpProxyPort"
argument_list|,
name|httpProxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The http proxy port which can be used for the camel-twitter. Can also          * be configured on the TwitterComponent level instead.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: proxy          */
DECL|method|httpProxyPort ( String httpProxyPort)
specifier|default
name|TwitterDirectMessageEndpointBuilder
name|httpProxyPort
parameter_list|(
name|String
name|httpProxyPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpProxyPort"
argument_list|,
name|httpProxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The http proxy user which can be used for the camel-twitter. Can also          * be configured on the TwitterComponent level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: proxy          */
DECL|method|httpProxyUser ( String httpProxyUser)
specifier|default
name|TwitterDirectMessageEndpointBuilder
name|httpProxyUser
parameter_list|(
name|String
name|httpProxyUser
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpProxyUser"
argument_list|,
name|httpProxyUser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The access token. Can also be configured on the TwitterComponent          * level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessToken ( String accessToken)
specifier|default
name|TwitterDirectMessageEndpointBuilder
name|accessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"accessToken"
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The access secret. Can also be configured on the TwitterComponent          * level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|accessTokenSecret ( String accessTokenSecret)
specifier|default
name|TwitterDirectMessageEndpointBuilder
name|accessTokenSecret
parameter_list|(
name|String
name|accessTokenSecret
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"accessTokenSecret"
argument_list|,
name|accessTokenSecret
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer key. Can also be configured on the TwitterComponent          * level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|consumerKey ( String consumerKey)
specifier|default
name|TwitterDirectMessageEndpointBuilder
name|consumerKey
parameter_list|(
name|String
name|consumerKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"consumerKey"
argument_list|,
name|consumerKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer secret. Can also be configured on the TwitterComponent          * level instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|consumerSecret ( String consumerSecret)
specifier|default
name|TwitterDirectMessageEndpointBuilder
name|consumerSecret
parameter_list|(
name|String
name|consumerSecret
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"consumerSecret"
argument_list|,
name|consumerSecret
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Twitter Direct Message component.      */
DECL|interface|AdvancedTwitterDirectMessageEndpointBuilder
specifier|public
interface|interface
name|AdvancedTwitterDirectMessageEndpointBuilder
extends|extends
name|AdvancedTwitterDirectMessageEndpointConsumerBuilder
extends|,
name|AdvancedTwitterDirectMessageEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|TwitterDirectMessageEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|TwitterDirectMessageEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedTwitterDirectMessageEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedTwitterDirectMessageEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedTwitterDirectMessageEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedTwitterDirectMessageEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.twitter.data.EndpointType</code> enum.      */
DECL|enum|EndpointType
enum|enum
name|EndpointType
block|{
DECL|enumConstant|POLLING
name|POLLING
block|,
DECL|enumConstant|DIRECT
name|DIRECT
block|;     }
comment|/**      * Twitter Direct Message (camel-twitter)      * The Twitter Direct Message Component consumes/produces user's direct      * messages.      *       * Category: api,social      * Since: 2.10      * Maven coordinates: org.apache.camel:camel-twitter      *       * Syntax:<code>twitter-directmessage:user</code>      *       * Path parameter: user (required)      * The user name to send a direct message. This will be ignored for      * consumer.      */
DECL|method|twitterDirectmessage (String path)
specifier|default
name|TwitterDirectMessageEndpointBuilder
name|twitterDirectmessage
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|TwitterDirectMessageEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|TwitterDirectMessageEndpointBuilder
implements|,
name|AdvancedTwitterDirectMessageEndpointBuilder
block|{
specifier|public
name|TwitterDirectMessageEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"twitter-directmessage"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|TwitterDirectMessageEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

