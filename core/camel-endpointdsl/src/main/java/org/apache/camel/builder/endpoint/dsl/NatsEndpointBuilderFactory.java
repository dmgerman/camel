begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The nats component allows you produce and consume messages from NATS.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|NatsEndpointBuilderFactory
specifier|public
interface|interface
name|NatsEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Nats component.      */
DECL|interface|NatsEndpointConsumerBuilder
specifier|public
interface|interface
name|NatsEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedNatsEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedNatsEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * URLs to one or more NAT servers. Use comma to separate URLs when          * specifying multiple servers.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|servers (String servers)
specifier|default
name|NatsEndpointConsumerBuilder
name|servers
parameter_list|(
name|String
name|servers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"servers"
argument_list|,
name|servers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference an already instantiated connection to Nats server.          * The option is a<code>io.nats.client.Connection</code> type.          * @group common          */
DECL|method|connection (Object connection)
specifier|default
name|NatsEndpointConsumerBuilder
name|connection
parameter_list|(
name|Object
name|connection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connection"
argument_list|,
name|connection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference an already instantiated connection to Nats server.          * The option will be converted to a          *<code>io.nats.client.Connection</code> type.          * @group common          */
DECL|method|connection (String connection)
specifier|default
name|NatsEndpointConsumerBuilder
name|connection
parameter_list|(
name|String
name|connection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connection"
argument_list|,
name|connection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout for connection attempts. (in milliseconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|connectionTimeout ( int connectionTimeout)
specifier|default
name|NatsEndpointConsumerBuilder
name|connectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout for connection attempts. (in milliseconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|connectionTimeout ( String connectionTimeout)
specifier|default
name|NatsEndpointConsumerBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if we want to flush connection or not.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|flushConnection ( boolean flushConnection)
specifier|default
name|NatsEndpointConsumerBuilder
name|flushConnection
parameter_list|(
name|boolean
name|flushConnection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"flushConnection"
argument_list|,
name|flushConnection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if we want to flush connection or not.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|flushConnection ( String flushConnection)
specifier|default
name|NatsEndpointConsumerBuilder
name|flushConnection
parameter_list|(
name|String
name|flushConnection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"flushConnection"
argument_list|,
name|flushConnection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the flush timeout (in milliseconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|flushTimeout (int flushTimeout)
specifier|default
name|NatsEndpointConsumerBuilder
name|flushTimeout
parameter_list|(
name|int
name|flushTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"flushTimeout"
argument_list|,
name|flushTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the flush timeout (in milliseconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|flushTimeout (String flushTimeout)
specifier|default
name|NatsEndpointConsumerBuilder
name|flushTimeout
parameter_list|(
name|String
name|flushTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"flushTimeout"
argument_list|,
name|flushTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * maximum number of pings have not received a response allowed by the          * client.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|maxPingsOut (int maxPingsOut)
specifier|default
name|NatsEndpointConsumerBuilder
name|maxPingsOut
parameter_list|(
name|int
name|maxPingsOut
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxPingsOut"
argument_list|,
name|maxPingsOut
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * maximum number of pings have not received a response allowed by the          * client.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|maxPingsOut (String maxPingsOut)
specifier|default
name|NatsEndpointConsumerBuilder
name|maxPingsOut
parameter_list|(
name|String
name|maxPingsOut
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxPingsOut"
argument_list|,
name|maxPingsOut
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Max reconnection attempts.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|maxReconnectAttempts ( int maxReconnectAttempts)
specifier|default
name|NatsEndpointConsumerBuilder
name|maxReconnectAttempts
parameter_list|(
name|int
name|maxReconnectAttempts
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReconnectAttempts"
argument_list|,
name|maxReconnectAttempts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Max reconnection attempts.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|maxReconnectAttempts ( String maxReconnectAttempts)
specifier|default
name|NatsEndpointConsumerBuilder
name|maxReconnectAttempts
parameter_list|(
name|String
name|maxReconnectAttempts
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReconnectAttempts"
argument_list|,
name|maxReconnectAttempts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Turn off echo. If supported by the gnatsd version you are connecting          * to this flag will prevent the server from echoing messages back to          * the connection if it has subscriptions on the subject being published          * to.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|noEcho (boolean noEcho)
specifier|default
name|NatsEndpointConsumerBuilder
name|noEcho
parameter_list|(
name|boolean
name|noEcho
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"noEcho"
argument_list|,
name|noEcho
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Turn off echo. If supported by the gnatsd version you are connecting          * to this flag will prevent the server from echoing messages back to          * the connection if it has subscriptions on the subject being published          * to.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|noEcho (String noEcho)
specifier|default
name|NatsEndpointConsumerBuilder
name|noEcho
parameter_list|(
name|String
name|noEcho
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"noEcho"
argument_list|,
name|noEcho
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not randomizing the order of servers for the connection          * attempts.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|noRandomizeServers ( boolean noRandomizeServers)
specifier|default
name|NatsEndpointConsumerBuilder
name|noRandomizeServers
parameter_list|(
name|boolean
name|noRandomizeServers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"noRandomizeServers"
argument_list|,
name|noRandomizeServers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not randomizing the order of servers for the connection          * attempts.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|noRandomizeServers ( String noRandomizeServers)
specifier|default
name|NatsEndpointConsumerBuilder
name|noRandomizeServers
parameter_list|(
name|String
name|noRandomizeServers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"noRandomizeServers"
argument_list|,
name|noRandomizeServers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not running in pedantic mode (this affects performace).          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|pedantic (boolean pedantic)
specifier|default
name|NatsEndpointConsumerBuilder
name|pedantic
parameter_list|(
name|boolean
name|pedantic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pedantic"
argument_list|,
name|pedantic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not running in pedantic mode (this affects performace).          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|pedantic (String pedantic)
specifier|default
name|NatsEndpointConsumerBuilder
name|pedantic
parameter_list|(
name|String
name|pedantic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pedantic"
argument_list|,
name|pedantic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Ping interval to be aware if connection is still alive (in          * milliseconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|pingInterval (int pingInterval)
specifier|default
name|NatsEndpointConsumerBuilder
name|pingInterval
parameter_list|(
name|int
name|pingInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pingInterval"
argument_list|,
name|pingInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Ping interval to be aware if connection is still alive (in          * milliseconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|pingInterval (String pingInterval)
specifier|default
name|NatsEndpointConsumerBuilder
name|pingInterval
parameter_list|(
name|String
name|pingInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pingInterval"
argument_list|,
name|pingInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not using reconnection feature.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|reconnect (boolean reconnect)
specifier|default
name|NatsEndpointConsumerBuilder
name|reconnect
parameter_list|(
name|boolean
name|reconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnect"
argument_list|,
name|reconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not using reconnection feature.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|reconnect (String reconnect)
specifier|default
name|NatsEndpointConsumerBuilder
name|reconnect
parameter_list|(
name|String
name|reconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnect"
argument_list|,
name|reconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Waiting time before attempts reconnection (in milliseconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|reconnectTimeWait ( int reconnectTimeWait)
specifier|default
name|NatsEndpointConsumerBuilder
name|reconnectTimeWait
parameter_list|(
name|int
name|reconnectTimeWait
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectTimeWait"
argument_list|,
name|reconnectTimeWait
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Waiting time before attempts reconnection (in milliseconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|reconnectTimeWait ( String reconnectTimeWait)
specifier|default
name|NatsEndpointConsumerBuilder
name|reconnectTimeWait
parameter_list|(
name|String
name|reconnectTimeWait
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectTimeWait"
argument_list|,
name|reconnectTimeWait
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval to clean up cancelled/timed out requests.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|requestCleanupInterval ( int requestCleanupInterval)
specifier|default
name|NatsEndpointConsumerBuilder
name|requestCleanupInterval
parameter_list|(
name|int
name|requestCleanupInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestCleanupInterval"
argument_list|,
name|requestCleanupInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval to clean up cancelled/timed out requests.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|requestCleanupInterval ( String requestCleanupInterval)
specifier|default
name|NatsEndpointConsumerBuilder
name|requestCleanupInterval
parameter_list|(
name|String
name|requestCleanupInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestCleanupInterval"
argument_list|,
name|requestCleanupInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of topic we want to use.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|topic (String topic)
specifier|default
name|NatsEndpointConsumerBuilder
name|topic
parameter_list|(
name|String
name|topic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"topic"
argument_list|,
name|topic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not running in verbose mode.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|verbose (boolean verbose)
specifier|default
name|NatsEndpointConsumerBuilder
name|verbose
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"verbose"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not running in verbose mode.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|verbose (String verbose)
specifier|default
name|NatsEndpointConsumerBuilder
name|verbose
parameter_list|(
name|String
name|verbose
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"verbose"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|NatsEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|NatsEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Stop receiving messages from a topic we are subscribing to after          * maxMessages.          * The option is a<code>java.lang.String</code> type.          * @group consumer          */
DECL|method|maxMessages (String maxMessages)
specifier|default
name|NatsEndpointConsumerBuilder
name|maxMessages
parameter_list|(
name|String
name|maxMessages
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxMessages"
argument_list|,
name|maxMessages
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Consumer pool size.          * The option is a<code>int</code> type.          * @group consumer          */
DECL|method|poolSize (int poolSize)
specifier|default
name|NatsEndpointConsumerBuilder
name|poolSize
parameter_list|(
name|int
name|poolSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"poolSize"
argument_list|,
name|poolSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Consumer pool size.          * The option will be converted to a<code>int</code> type.          * @group consumer          */
DECL|method|poolSize (String poolSize)
specifier|default
name|NatsEndpointConsumerBuilder
name|poolSize
parameter_list|(
name|String
name|poolSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"poolSize"
argument_list|,
name|poolSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Queue name if we are using nats for a queue configuration.          * The option is a<code>java.lang.String</code> type.          * @group consumer          */
DECL|method|queueName (String queueName)
specifier|default
name|NatsEndpointConsumerBuilder
name|queueName
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"queueName"
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set secure option indicating TLS is required.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|secure (boolean secure)
specifier|default
name|NatsEndpointConsumerBuilder
name|secure
parameter_list|(
name|boolean
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set secure option indicating TLS is required.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|secure (String secure)
specifier|default
name|NatsEndpointConsumerBuilder
name|secure
parameter_list|(
name|String
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|NatsEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|NatsEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Nats component.      */
DECL|interface|AdvancedNatsEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedNatsEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|NatsEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|NatsEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedNatsEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedNatsEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedNatsEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedNatsEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedNatsEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedNatsEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedNatsEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedNatsEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Nats component.      */
DECL|interface|NatsEndpointProducerBuilder
specifier|public
interface|interface
name|NatsEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedNatsEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedNatsEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * URLs to one or more NAT servers. Use comma to separate URLs when          * specifying multiple servers.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|servers (String servers)
specifier|default
name|NatsEndpointProducerBuilder
name|servers
parameter_list|(
name|String
name|servers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"servers"
argument_list|,
name|servers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference an already instantiated connection to Nats server.          * The option is a<code>io.nats.client.Connection</code> type.          * @group common          */
DECL|method|connection (Object connection)
specifier|default
name|NatsEndpointProducerBuilder
name|connection
parameter_list|(
name|Object
name|connection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connection"
argument_list|,
name|connection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference an already instantiated connection to Nats server.          * The option will be converted to a          *<code>io.nats.client.Connection</code> type.          * @group common          */
DECL|method|connection (String connection)
specifier|default
name|NatsEndpointProducerBuilder
name|connection
parameter_list|(
name|String
name|connection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connection"
argument_list|,
name|connection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout for connection attempts. (in milliseconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|connectionTimeout ( int connectionTimeout)
specifier|default
name|NatsEndpointProducerBuilder
name|connectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout for connection attempts. (in milliseconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|connectionTimeout ( String connectionTimeout)
specifier|default
name|NatsEndpointProducerBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if we want to flush connection or not.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|flushConnection ( boolean flushConnection)
specifier|default
name|NatsEndpointProducerBuilder
name|flushConnection
parameter_list|(
name|boolean
name|flushConnection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"flushConnection"
argument_list|,
name|flushConnection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if we want to flush connection or not.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|flushConnection ( String flushConnection)
specifier|default
name|NatsEndpointProducerBuilder
name|flushConnection
parameter_list|(
name|String
name|flushConnection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"flushConnection"
argument_list|,
name|flushConnection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the flush timeout (in milliseconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|flushTimeout (int flushTimeout)
specifier|default
name|NatsEndpointProducerBuilder
name|flushTimeout
parameter_list|(
name|int
name|flushTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"flushTimeout"
argument_list|,
name|flushTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the flush timeout (in milliseconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|flushTimeout (String flushTimeout)
specifier|default
name|NatsEndpointProducerBuilder
name|flushTimeout
parameter_list|(
name|String
name|flushTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"flushTimeout"
argument_list|,
name|flushTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * maximum number of pings have not received a response allowed by the          * client.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|maxPingsOut (int maxPingsOut)
specifier|default
name|NatsEndpointProducerBuilder
name|maxPingsOut
parameter_list|(
name|int
name|maxPingsOut
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxPingsOut"
argument_list|,
name|maxPingsOut
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * maximum number of pings have not received a response allowed by the          * client.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|maxPingsOut (String maxPingsOut)
specifier|default
name|NatsEndpointProducerBuilder
name|maxPingsOut
parameter_list|(
name|String
name|maxPingsOut
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxPingsOut"
argument_list|,
name|maxPingsOut
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Max reconnection attempts.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|maxReconnectAttempts ( int maxReconnectAttempts)
specifier|default
name|NatsEndpointProducerBuilder
name|maxReconnectAttempts
parameter_list|(
name|int
name|maxReconnectAttempts
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReconnectAttempts"
argument_list|,
name|maxReconnectAttempts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Max reconnection attempts.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|maxReconnectAttempts ( String maxReconnectAttempts)
specifier|default
name|NatsEndpointProducerBuilder
name|maxReconnectAttempts
parameter_list|(
name|String
name|maxReconnectAttempts
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReconnectAttempts"
argument_list|,
name|maxReconnectAttempts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Turn off echo. If supported by the gnatsd version you are connecting          * to this flag will prevent the server from echoing messages back to          * the connection if it has subscriptions on the subject being published          * to.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|noEcho (boolean noEcho)
specifier|default
name|NatsEndpointProducerBuilder
name|noEcho
parameter_list|(
name|boolean
name|noEcho
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"noEcho"
argument_list|,
name|noEcho
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Turn off echo. If supported by the gnatsd version you are connecting          * to this flag will prevent the server from echoing messages back to          * the connection if it has subscriptions on the subject being published          * to.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|noEcho (String noEcho)
specifier|default
name|NatsEndpointProducerBuilder
name|noEcho
parameter_list|(
name|String
name|noEcho
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"noEcho"
argument_list|,
name|noEcho
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not randomizing the order of servers for the connection          * attempts.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|noRandomizeServers ( boolean noRandomizeServers)
specifier|default
name|NatsEndpointProducerBuilder
name|noRandomizeServers
parameter_list|(
name|boolean
name|noRandomizeServers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"noRandomizeServers"
argument_list|,
name|noRandomizeServers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not randomizing the order of servers for the connection          * attempts.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|noRandomizeServers ( String noRandomizeServers)
specifier|default
name|NatsEndpointProducerBuilder
name|noRandomizeServers
parameter_list|(
name|String
name|noRandomizeServers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"noRandomizeServers"
argument_list|,
name|noRandomizeServers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not running in pedantic mode (this affects performace).          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|pedantic (boolean pedantic)
specifier|default
name|NatsEndpointProducerBuilder
name|pedantic
parameter_list|(
name|boolean
name|pedantic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pedantic"
argument_list|,
name|pedantic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not running in pedantic mode (this affects performace).          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|pedantic (String pedantic)
specifier|default
name|NatsEndpointProducerBuilder
name|pedantic
parameter_list|(
name|String
name|pedantic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pedantic"
argument_list|,
name|pedantic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Ping interval to be aware if connection is still alive (in          * milliseconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|pingInterval (int pingInterval)
specifier|default
name|NatsEndpointProducerBuilder
name|pingInterval
parameter_list|(
name|int
name|pingInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pingInterval"
argument_list|,
name|pingInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Ping interval to be aware if connection is still alive (in          * milliseconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|pingInterval (String pingInterval)
specifier|default
name|NatsEndpointProducerBuilder
name|pingInterval
parameter_list|(
name|String
name|pingInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pingInterval"
argument_list|,
name|pingInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not using reconnection feature.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|reconnect (boolean reconnect)
specifier|default
name|NatsEndpointProducerBuilder
name|reconnect
parameter_list|(
name|boolean
name|reconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnect"
argument_list|,
name|reconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not using reconnection feature.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|reconnect (String reconnect)
specifier|default
name|NatsEndpointProducerBuilder
name|reconnect
parameter_list|(
name|String
name|reconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnect"
argument_list|,
name|reconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Waiting time before attempts reconnection (in milliseconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|reconnectTimeWait ( int reconnectTimeWait)
specifier|default
name|NatsEndpointProducerBuilder
name|reconnectTimeWait
parameter_list|(
name|int
name|reconnectTimeWait
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectTimeWait"
argument_list|,
name|reconnectTimeWait
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Waiting time before attempts reconnection (in milliseconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|reconnectTimeWait ( String reconnectTimeWait)
specifier|default
name|NatsEndpointProducerBuilder
name|reconnectTimeWait
parameter_list|(
name|String
name|reconnectTimeWait
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectTimeWait"
argument_list|,
name|reconnectTimeWait
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval to clean up cancelled/timed out requests.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|requestCleanupInterval ( int requestCleanupInterval)
specifier|default
name|NatsEndpointProducerBuilder
name|requestCleanupInterval
parameter_list|(
name|int
name|requestCleanupInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestCleanupInterval"
argument_list|,
name|requestCleanupInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval to clean up cancelled/timed out requests.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|requestCleanupInterval ( String requestCleanupInterval)
specifier|default
name|NatsEndpointProducerBuilder
name|requestCleanupInterval
parameter_list|(
name|String
name|requestCleanupInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestCleanupInterval"
argument_list|,
name|requestCleanupInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of topic we want to use.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|topic (String topic)
specifier|default
name|NatsEndpointProducerBuilder
name|topic
parameter_list|(
name|String
name|topic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"topic"
argument_list|,
name|topic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not running in verbose mode.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|verbose (boolean verbose)
specifier|default
name|NatsEndpointProducerBuilder
name|verbose
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"verbose"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not running in verbose mode.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|verbose (String verbose)
specifier|default
name|NatsEndpointProducerBuilder
name|verbose
parameter_list|(
name|String
name|verbose
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"verbose"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|NatsEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|NatsEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * the subject to which subscribers should send response.          * The option is a<code>java.lang.String</code> type.          * @group producer          */
DECL|method|replySubject (String replySubject)
specifier|default
name|NatsEndpointProducerBuilder
name|replySubject
parameter_list|(
name|String
name|replySubject
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"replySubject"
argument_list|,
name|replySubject
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set secure option indicating TLS is required.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|secure (boolean secure)
specifier|default
name|NatsEndpointProducerBuilder
name|secure
parameter_list|(
name|boolean
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set secure option indicating TLS is required.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|secure (String secure)
specifier|default
name|NatsEndpointProducerBuilder
name|secure
parameter_list|(
name|String
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|NatsEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|NatsEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Nats component.      */
DECL|interface|AdvancedNatsEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedNatsEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|NatsEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|NatsEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedNatsEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedNatsEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedNatsEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedNatsEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Nats component.      */
DECL|interface|NatsEndpointBuilder
specifier|public
interface|interface
name|NatsEndpointBuilder
extends|extends
name|NatsEndpointConsumerBuilder
extends|,
name|NatsEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedNatsEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedNatsEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * URLs to one or more NAT servers. Use comma to separate URLs when          * specifying multiple servers.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|servers (String servers)
specifier|default
name|NatsEndpointBuilder
name|servers
parameter_list|(
name|String
name|servers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"servers"
argument_list|,
name|servers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference an already instantiated connection to Nats server.          * The option is a<code>io.nats.client.Connection</code> type.          * @group common          */
DECL|method|connection (Object connection)
specifier|default
name|NatsEndpointBuilder
name|connection
parameter_list|(
name|Object
name|connection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connection"
argument_list|,
name|connection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference an already instantiated connection to Nats server.          * The option will be converted to a          *<code>io.nats.client.Connection</code> type.          * @group common          */
DECL|method|connection (String connection)
specifier|default
name|NatsEndpointBuilder
name|connection
parameter_list|(
name|String
name|connection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connection"
argument_list|,
name|connection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout for connection attempts. (in milliseconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|connectionTimeout (int connectionTimeout)
specifier|default
name|NatsEndpointBuilder
name|connectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout for connection attempts. (in milliseconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|connectionTimeout (String connectionTimeout)
specifier|default
name|NatsEndpointBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if we want to flush connection or not.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|flushConnection (boolean flushConnection)
specifier|default
name|NatsEndpointBuilder
name|flushConnection
parameter_list|(
name|boolean
name|flushConnection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"flushConnection"
argument_list|,
name|flushConnection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if we want to flush connection or not.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|flushConnection (String flushConnection)
specifier|default
name|NatsEndpointBuilder
name|flushConnection
parameter_list|(
name|String
name|flushConnection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"flushConnection"
argument_list|,
name|flushConnection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the flush timeout (in milliseconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|flushTimeout (int flushTimeout)
specifier|default
name|NatsEndpointBuilder
name|flushTimeout
parameter_list|(
name|int
name|flushTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"flushTimeout"
argument_list|,
name|flushTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the flush timeout (in milliseconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|flushTimeout (String flushTimeout)
specifier|default
name|NatsEndpointBuilder
name|flushTimeout
parameter_list|(
name|String
name|flushTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"flushTimeout"
argument_list|,
name|flushTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * maximum number of pings have not received a response allowed by the          * client.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|maxPingsOut (int maxPingsOut)
specifier|default
name|NatsEndpointBuilder
name|maxPingsOut
parameter_list|(
name|int
name|maxPingsOut
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxPingsOut"
argument_list|,
name|maxPingsOut
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * maximum number of pings have not received a response allowed by the          * client.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|maxPingsOut (String maxPingsOut)
specifier|default
name|NatsEndpointBuilder
name|maxPingsOut
parameter_list|(
name|String
name|maxPingsOut
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxPingsOut"
argument_list|,
name|maxPingsOut
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Max reconnection attempts.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|maxReconnectAttempts ( int maxReconnectAttempts)
specifier|default
name|NatsEndpointBuilder
name|maxReconnectAttempts
parameter_list|(
name|int
name|maxReconnectAttempts
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReconnectAttempts"
argument_list|,
name|maxReconnectAttempts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Max reconnection attempts.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|maxReconnectAttempts ( String maxReconnectAttempts)
specifier|default
name|NatsEndpointBuilder
name|maxReconnectAttempts
parameter_list|(
name|String
name|maxReconnectAttempts
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReconnectAttempts"
argument_list|,
name|maxReconnectAttempts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Turn off echo. If supported by the gnatsd version you are connecting          * to this flag will prevent the server from echoing messages back to          * the connection if it has subscriptions on the subject being published          * to.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|noEcho (boolean noEcho)
specifier|default
name|NatsEndpointBuilder
name|noEcho
parameter_list|(
name|boolean
name|noEcho
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"noEcho"
argument_list|,
name|noEcho
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Turn off echo. If supported by the gnatsd version you are connecting          * to this flag will prevent the server from echoing messages back to          * the connection if it has subscriptions on the subject being published          * to.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|noEcho (String noEcho)
specifier|default
name|NatsEndpointBuilder
name|noEcho
parameter_list|(
name|String
name|noEcho
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"noEcho"
argument_list|,
name|noEcho
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not randomizing the order of servers for the connection          * attempts.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|noRandomizeServers ( boolean noRandomizeServers)
specifier|default
name|NatsEndpointBuilder
name|noRandomizeServers
parameter_list|(
name|boolean
name|noRandomizeServers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"noRandomizeServers"
argument_list|,
name|noRandomizeServers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not randomizing the order of servers for the connection          * attempts.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|noRandomizeServers (String noRandomizeServers)
specifier|default
name|NatsEndpointBuilder
name|noRandomizeServers
parameter_list|(
name|String
name|noRandomizeServers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"noRandomizeServers"
argument_list|,
name|noRandomizeServers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not running in pedantic mode (this affects performace).          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|pedantic (boolean pedantic)
specifier|default
name|NatsEndpointBuilder
name|pedantic
parameter_list|(
name|boolean
name|pedantic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pedantic"
argument_list|,
name|pedantic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not running in pedantic mode (this affects performace).          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|pedantic (String pedantic)
specifier|default
name|NatsEndpointBuilder
name|pedantic
parameter_list|(
name|String
name|pedantic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pedantic"
argument_list|,
name|pedantic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Ping interval to be aware if connection is still alive (in          * milliseconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|pingInterval (int pingInterval)
specifier|default
name|NatsEndpointBuilder
name|pingInterval
parameter_list|(
name|int
name|pingInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pingInterval"
argument_list|,
name|pingInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Ping interval to be aware if connection is still alive (in          * milliseconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|pingInterval (String pingInterval)
specifier|default
name|NatsEndpointBuilder
name|pingInterval
parameter_list|(
name|String
name|pingInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pingInterval"
argument_list|,
name|pingInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not using reconnection feature.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|reconnect (boolean reconnect)
specifier|default
name|NatsEndpointBuilder
name|reconnect
parameter_list|(
name|boolean
name|reconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnect"
argument_list|,
name|reconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not using reconnection feature.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|reconnect (String reconnect)
specifier|default
name|NatsEndpointBuilder
name|reconnect
parameter_list|(
name|String
name|reconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnect"
argument_list|,
name|reconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Waiting time before attempts reconnection (in milliseconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|reconnectTimeWait (int reconnectTimeWait)
specifier|default
name|NatsEndpointBuilder
name|reconnectTimeWait
parameter_list|(
name|int
name|reconnectTimeWait
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectTimeWait"
argument_list|,
name|reconnectTimeWait
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Waiting time before attempts reconnection (in milliseconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|reconnectTimeWait (String reconnectTimeWait)
specifier|default
name|NatsEndpointBuilder
name|reconnectTimeWait
parameter_list|(
name|String
name|reconnectTimeWait
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reconnectTimeWait"
argument_list|,
name|reconnectTimeWait
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval to clean up cancelled/timed out requests.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|requestCleanupInterval ( int requestCleanupInterval)
specifier|default
name|NatsEndpointBuilder
name|requestCleanupInterval
parameter_list|(
name|int
name|requestCleanupInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestCleanupInterval"
argument_list|,
name|requestCleanupInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval to clean up cancelled/timed out requests.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|requestCleanupInterval ( String requestCleanupInterval)
specifier|default
name|NatsEndpointBuilder
name|requestCleanupInterval
parameter_list|(
name|String
name|requestCleanupInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requestCleanupInterval"
argument_list|,
name|requestCleanupInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of topic we want to use.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|topic (String topic)
specifier|default
name|NatsEndpointBuilder
name|topic
parameter_list|(
name|String
name|topic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"topic"
argument_list|,
name|topic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not running in verbose mode.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|verbose (boolean verbose)
specifier|default
name|NatsEndpointBuilder
name|verbose
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"verbose"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not running in verbose mode.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|verbose (String verbose)
specifier|default
name|NatsEndpointBuilder
name|verbose
parameter_list|(
name|String
name|verbose
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"verbose"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set secure option indicating TLS is required.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|secure (boolean secure)
specifier|default
name|NatsEndpointBuilder
name|secure
parameter_list|(
name|boolean
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set secure option indicating TLS is required.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|secure (String secure)
specifier|default
name|NatsEndpointBuilder
name|secure
parameter_list|(
name|String
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|NatsEndpointBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|NatsEndpointBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Nats component.      */
DECL|interface|AdvancedNatsEndpointBuilder
specifier|public
interface|interface
name|AdvancedNatsEndpointBuilder
extends|extends
name|AdvancedNatsEndpointConsumerBuilder
extends|,
name|AdvancedNatsEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|NatsEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|NatsEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedNatsEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedNatsEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedNatsEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedNatsEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * The nats component allows you produce and consume messages from NATS.      * Creates a builder to build endpoints for the Nats component.      */
DECL|method|nats (String path)
specifier|default
name|NatsEndpointBuilder
name|nats
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|NatsEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|NatsEndpointBuilder
implements|,
name|AdvancedNatsEndpointBuilder
block|{
specifier|public
name|NatsEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"nats"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|NatsEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

