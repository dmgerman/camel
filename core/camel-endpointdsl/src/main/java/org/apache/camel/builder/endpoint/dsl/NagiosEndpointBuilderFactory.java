begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_comment
comment|/**  * To send passive checks to Nagios using JSendNSCA.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|NagiosEndpointBuilderFactory
specifier|public
interface|interface
name|NagiosEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint for the Nagios component.      */
DECL|interface|NagiosEndpointBuilder
specifier|public
specifier|static
interface|interface
name|NagiosEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|public
specifier|default
name|AdvancedNagiosEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedNagiosEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * This is the address of the Nagios host where checks should be send.          * The option is a<code>java.lang.String</code> type.          * @group producer          */
DECL|method|host (String host)
specifier|public
specifier|default
name|NagiosEndpointBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of the host.          * The option is a<code>int</code> type.          * @group producer          */
DECL|method|port (int port)
specifier|public
specifier|default
name|NagiosEndpointBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of the host.          * The option will be converted to a<code>int</code> type.          * @group producer          */
DECL|method|port (String port)
specifier|public
specifier|default
name|NagiosEndpointBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection timeout in millis.          * The option is a<code>int</code> type.          * @group producer          */
DECL|method|connectionTimeout ( int connectionTimeout)
specifier|public
specifier|default
name|NagiosEndpointBuilder
name|connectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Connection timeout in millis.          * The option will be converted to a<code>int</code> type.          * @group producer          */
DECL|method|connectionTimeout ( String connectionTimeout)
specifier|public
specifier|default
name|NagiosEndpointBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to use synchronous when sending a passive check.          * Setting it to false will allow Camel to continue routing the message          * and the passive check message will be send asynchronously.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|sendSync (boolean sendSync)
specifier|public
specifier|default
name|NagiosEndpointBuilder
name|sendSync
parameter_list|(
name|boolean
name|sendSync
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendSync"
argument_list|,
name|sendSync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to use synchronous when sending a passive check.          * Setting it to false will allow Camel to continue routing the message          * and the passive check message will be send asynchronously.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|sendSync (String sendSync)
specifier|public
specifier|default
name|NagiosEndpointBuilder
name|sendSync
parameter_list|(
name|String
name|sendSync
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendSync"
argument_list|,
name|sendSync
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sending timeout in millis.          * The option is a<code>int</code> type.          * @group producer          */
DECL|method|timeout (int timeout)
specifier|public
specifier|default
name|NagiosEndpointBuilder
name|timeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sending timeout in millis.          * The option will be converted to a<code>int</code> type.          * @group producer          */
DECL|method|timeout (String timeout)
specifier|public
specifier|default
name|NagiosEndpointBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To specify an encryption method.          * The option is a          *<code>com.googlecode.jsendnsca.encryption.Encryption</code> type.          * @group security          */
DECL|method|encryption (Encryption encryption)
specifier|public
specifier|default
name|NagiosEndpointBuilder
name|encryption
parameter_list|(
name|Encryption
name|encryption
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryption"
argument_list|,
name|encryption
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To specify an encryption method.          * The option will be converted to a          *<code>com.googlecode.jsendnsca.encryption.Encryption</code> type.          * @group security          */
DECL|method|encryption (String encryption)
specifier|public
specifier|default
name|NagiosEndpointBuilder
name|encryption
parameter_list|(
name|String
name|encryption
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryption"
argument_list|,
name|encryption
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To specify an encryption method.          * The option is a          *<code>org.apache.camel.component.nagios.NagiosEncryptionMethod</code>          * type.          * @group security          */
annotation|@
name|Deprecated
DECL|method|encryptionMethod ( NagiosEncryptionMethod encryptionMethod)
specifier|public
specifier|default
name|NagiosEndpointBuilder
name|encryptionMethod
parameter_list|(
name|NagiosEncryptionMethod
name|encryptionMethod
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptionMethod"
argument_list|,
name|encryptionMethod
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To specify an encryption method.          * The option will be converted to a          *<code>org.apache.camel.component.nagios.NagiosEncryptionMethod</code>          * type.          * @group security          */
annotation|@
name|Deprecated
DECL|method|encryptionMethod ( String encryptionMethod)
specifier|public
specifier|default
name|NagiosEndpointBuilder
name|encryptionMethod
parameter_list|(
name|String
name|encryptionMethod
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptionMethod"
argument_list|,
name|encryptionMethod
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password to be authenticated when sending checks to Nagios.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|password (String password)
specifier|public
specifier|default
name|NagiosEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Nagios component.      */
DECL|interface|AdvancedNagiosEndpointBuilder
specifier|public
specifier|static
interface|interface
name|AdvancedNagiosEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|public
specifier|default
name|NagiosEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|NagiosEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedNagiosEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedNagiosEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|public
specifier|default
name|AdvancedNagiosEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|public
specifier|default
name|AdvancedNagiosEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>com.googlecode.jsendnsca.encryption.Encryption</code> enum.      */
DECL|enum|Encryption
specifier|public
specifier|static
enum|enum
name|Encryption
block|{
DECL|enumConstant|NONE
DECL|enumConstant|TRIPLE_DES
DECL|enumConstant|XOR
DECL|enumConstant|RIJNDAEL128
DECL|enumConstant|RIJNDAEL192
DECL|enumConstant|RIJNDAEL256
DECL|enumConstant|BLOWFISH
name|NONE
block|,
name|TRIPLE_DES
block|,
name|XOR
block|,
name|RIJNDAEL128
block|,
name|RIJNDAEL192
block|,
name|RIJNDAEL256
block|,
name|BLOWFISH
block|;     }
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.nagios.NagiosEncryptionMethod</code>      * enum.      */
DECL|enum|NagiosEncryptionMethod
specifier|public
specifier|static
enum|enum
name|NagiosEncryptionMethod
block|{
DECL|enumConstant|No
DECL|enumConstant|Xor
DECL|enumConstant|TripleDes
name|No
block|,
name|Xor
block|,
name|TripleDes
block|;     }
comment|/**      * To send passive checks to Nagios using JSendNSCA. Creates a builder to      * build endpoints for the Nagios component.      */
DECL|method|nagios (String path)
specifier|public
specifier|default
name|NagiosEndpointBuilder
name|nagios
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|NagiosEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|NagiosEndpointBuilder
implements|,
name|AdvancedNagiosEndpointBuilder
block|{
specifier|public
name|NagiosEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"nagios"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|NagiosEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

