begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * Component for working with MongoDB GridFS.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|GridFsEndpointBuilderFactory
specifier|public
interface|interface
name|GridFsEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the MongoDB GridFS component.      */
DECL|interface|GridFsEndpointConsumerBuilder
specifier|public
interface|interface
name|GridFsEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedGridFsEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedGridFsEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets the name of the GridFS bucket within the database. Default is          * fs.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|bucket (String bucket)
specifier|default
name|GridFsEndpointConsumerBuilder
name|bucket
parameter_list|(
name|String
name|bucket
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bucket"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of the MongoDB database to target.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: common          */
DECL|method|database (String database)
specifier|default
name|GridFsEndpointConsumerBuilder
name|database
parameter_list|(
name|String
name|database
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"database"
argument_list|,
name|database
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a MongoDB ReadPreference on the Mongo connection. Read          * preferences set directly on the connection will be overridden by this          * setting. The com.mongodb.ReadPreference#valueOf(String) utility          * method is used to resolve the passed readPreference value. Some          * examples for the possible values are nearest, primary or secondary          * etc.          *           * The option is a:<code>com.mongodb.ReadPreference</code> type.          *           * Group: common          */
DECL|method|readPreference ( Object readPreference)
specifier|default
name|GridFsEndpointConsumerBuilder
name|readPreference
parameter_list|(
name|Object
name|readPreference
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"readPreference"
argument_list|,
name|readPreference
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a MongoDB ReadPreference on the Mongo connection. Read          * preferences set directly on the connection will be overridden by this          * setting. The com.mongodb.ReadPreference#valueOf(String) utility          * method is used to resolve the passed readPreference value. Some          * examples for the possible values are nearest, primary or secondary          * etc.          *           * The option will be converted to a          *<code>com.mongodb.ReadPreference</code> type.          *           * Group: common          */
DECL|method|readPreference ( String readPreference)
specifier|default
name|GridFsEndpointConsumerBuilder
name|readPreference
parameter_list|(
name|String
name|readPreference
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"readPreference"
argument_list|,
name|readPreference
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the WriteConcern for write operations on MongoDB using the          * standard ones. Resolved from the fields of the WriteConcern class by          * calling the WriteConcern#valueOf(String) method.          *           * The option is a:<code>com.mongodb.WriteConcern</code> type.          *           * Group: common          */
DECL|method|writeConcern (Object writeConcern)
specifier|default
name|GridFsEndpointConsumerBuilder
name|writeConcern
parameter_list|(
name|Object
name|writeConcern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"writeConcern"
argument_list|,
name|writeConcern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the WriteConcern for write operations on MongoDB using the          * standard ones. Resolved from the fields of the WriteConcern class by          * calling the WriteConcern#valueOf(String) method.          *           * The option will be converted to a          *<code>com.mongodb.WriteConcern</code> type.          *           * Group: common          */
DECL|method|writeConcern (String writeConcern)
specifier|default
name|GridFsEndpointConsumerBuilder
name|writeConcern
parameter_list|(
name|String
name|writeConcern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"writeConcern"
argument_list|,
name|writeConcern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|GridFsEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|GridFsEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the delay between polls within the Consumer. Default is 500ms.          *           * The option is a:<code>long</code> type.          *           * Group: consumer          */
DECL|method|delay (long delay)
specifier|default
name|GridFsEndpointConsumerBuilder
name|delay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the delay between polls within the Consumer. Default is 500ms.          *           * The option will be converted to a<code>long</code> type.          *           * Group: consumer          */
DECL|method|delay (String delay)
specifier|default
name|GridFsEndpointConsumerBuilder
name|delay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the QueryType uses a FileAttribute, this sets the name of the          * attribute that is used. Default is camel-processed.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|fileAttributeName ( String fileAttributeName)
specifier|default
name|GridFsEndpointConsumerBuilder
name|fileAttributeName
parameter_list|(
name|String
name|fileAttributeName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fileAttributeName"
argument_list|,
name|fileAttributeName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the initialDelay before the consumer will start polling. Default          * is 1000ms.          *           * The option is a:<code>long</code> type.          *           * Group: consumer          */
DECL|method|initialDelay (long initialDelay)
specifier|default
name|GridFsEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|long
name|initialDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the initialDelay before the consumer will start polling. Default          * is 1000ms.          *           * The option will be converted to a<code>long</code> type.          *           * Group: consumer          */
DECL|method|initialDelay (String initialDelay)
specifier|default
name|GridFsEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|String
name|initialDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the QueryType uses a persistent timestamp, this sets the name of          * the collection within the DB to store the timestamp.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|persistentTSCollection ( String persistentTSCollection)
specifier|default
name|GridFsEndpointConsumerBuilder
name|persistentTSCollection
parameter_list|(
name|String
name|persistentTSCollection
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"persistentTSCollection"
argument_list|,
name|persistentTSCollection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the QueryType uses a persistent timestamp, this is the ID of the          * object in the collection to store the timestamp.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|persistentTSObject ( String persistentTSObject)
specifier|default
name|GridFsEndpointConsumerBuilder
name|persistentTSObject
parameter_list|(
name|String
name|persistentTSObject
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"persistentTSObject"
argument_list|,
name|persistentTSObject
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Additional query parameters (in JSON) that are used to configure the          * query used for finding files in the GridFsConsumer.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|query (String query)
specifier|default
name|GridFsEndpointConsumerBuilder
name|query
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"query"
argument_list|,
name|query
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the QueryStrategy that is used for polling for new files.          * Default is Timestamp.          *           * The option is a:          *<code>org.apache.camel.component.mongodb.gridfs.QueryStrategy</code>          * type.          *           * Group: consumer          */
DECL|method|queryStrategy ( QueryStrategy queryStrategy)
specifier|default
name|GridFsEndpointConsumerBuilder
name|queryStrategy
parameter_list|(
name|QueryStrategy
name|queryStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queryStrategy"
argument_list|,
name|queryStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the QueryStrategy that is used for polling for new files.          * Default is Timestamp.          *           * The option will be converted to a          *<code>org.apache.camel.component.mongodb.gridfs.QueryStrategy</code>          * type.          *           * Group: consumer          */
DECL|method|queryStrategy (String queryStrategy)
specifier|default
name|GridFsEndpointConsumerBuilder
name|queryStrategy
parameter_list|(
name|String
name|queryStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queryStrategy"
argument_list|,
name|queryStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the MongoDB GridFS component.      */
DECL|interface|AdvancedGridFsEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedGridFsEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|GridFsEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|GridFsEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedGridFsEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedGridFsEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedGridFsEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedGridFsEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedGridFsEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedGridFsEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedGridFsEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedGridFsEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the MongoDB GridFS component.      */
DECL|interface|GridFsEndpointProducerBuilder
specifier|public
interface|interface
name|GridFsEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedGridFsEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedGridFsEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets the name of the GridFS bucket within the database. Default is          * fs.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|bucket (String bucket)
specifier|default
name|GridFsEndpointProducerBuilder
name|bucket
parameter_list|(
name|String
name|bucket
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bucket"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of the MongoDB database to target.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: common          */
DECL|method|database (String database)
specifier|default
name|GridFsEndpointProducerBuilder
name|database
parameter_list|(
name|String
name|database
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"database"
argument_list|,
name|database
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a MongoDB ReadPreference on the Mongo connection. Read          * preferences set directly on the connection will be overridden by this          * setting. The com.mongodb.ReadPreference#valueOf(String) utility          * method is used to resolve the passed readPreference value. Some          * examples for the possible values are nearest, primary or secondary          * etc.          *           * The option is a:<code>com.mongodb.ReadPreference</code> type.          *           * Group: common          */
DECL|method|readPreference ( Object readPreference)
specifier|default
name|GridFsEndpointProducerBuilder
name|readPreference
parameter_list|(
name|Object
name|readPreference
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"readPreference"
argument_list|,
name|readPreference
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a MongoDB ReadPreference on the Mongo connection. Read          * preferences set directly on the connection will be overridden by this          * setting. The com.mongodb.ReadPreference#valueOf(String) utility          * method is used to resolve the passed readPreference value. Some          * examples for the possible values are nearest, primary or secondary          * etc.          *           * The option will be converted to a          *<code>com.mongodb.ReadPreference</code> type.          *           * Group: common          */
DECL|method|readPreference ( String readPreference)
specifier|default
name|GridFsEndpointProducerBuilder
name|readPreference
parameter_list|(
name|String
name|readPreference
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"readPreference"
argument_list|,
name|readPreference
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the WriteConcern for write operations on MongoDB using the          * standard ones. Resolved from the fields of the WriteConcern class by          * calling the WriteConcern#valueOf(String) method.          *           * The option is a:<code>com.mongodb.WriteConcern</code> type.          *           * Group: common          */
DECL|method|writeConcern (Object writeConcern)
specifier|default
name|GridFsEndpointProducerBuilder
name|writeConcern
parameter_list|(
name|Object
name|writeConcern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"writeConcern"
argument_list|,
name|writeConcern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the WriteConcern for write operations on MongoDB using the          * standard ones. Resolved from the fields of the WriteConcern class by          * calling the WriteConcern#valueOf(String) method.          *           * The option will be converted to a          *<code>com.mongodb.WriteConcern</code> type.          *           * Group: common          */
DECL|method|writeConcern (String writeConcern)
specifier|default
name|GridFsEndpointProducerBuilder
name|writeConcern
parameter_list|(
name|String
name|writeConcern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"writeConcern"
argument_list|,
name|writeConcern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|GridFsEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|GridFsEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the operation this endpoint will execute against GridRS.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|operation (String operation)
specifier|default
name|GridFsEndpointProducerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the MongoDB GridFS component.      */
DECL|interface|AdvancedGridFsEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedGridFsEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|GridFsEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|GridFsEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedGridFsEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedGridFsEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedGridFsEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedGridFsEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the MongoDB GridFS component.      */
DECL|interface|GridFsEndpointBuilder
specifier|public
interface|interface
name|GridFsEndpointBuilder
extends|extends
name|GridFsEndpointConsumerBuilder
extends|,
name|GridFsEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedGridFsEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedGridFsEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets the name of the GridFS bucket within the database. Default is          * fs.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|bucket (String bucket)
specifier|default
name|GridFsEndpointBuilder
name|bucket
parameter_list|(
name|String
name|bucket
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bucket"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of the MongoDB database to target.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: common          */
DECL|method|database (String database)
specifier|default
name|GridFsEndpointBuilder
name|database
parameter_list|(
name|String
name|database
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"database"
argument_list|,
name|database
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a MongoDB ReadPreference on the Mongo connection. Read          * preferences set directly on the connection will be overridden by this          * setting. The com.mongodb.ReadPreference#valueOf(String) utility          * method is used to resolve the passed readPreference value. Some          * examples for the possible values are nearest, primary or secondary          * etc.          *           * The option is a:<code>com.mongodb.ReadPreference</code> type.          *           * Group: common          */
DECL|method|readPreference (Object readPreference)
specifier|default
name|GridFsEndpointBuilder
name|readPreference
parameter_list|(
name|Object
name|readPreference
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"readPreference"
argument_list|,
name|readPreference
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a MongoDB ReadPreference on the Mongo connection. Read          * preferences set directly on the connection will be overridden by this          * setting. The com.mongodb.ReadPreference#valueOf(String) utility          * method is used to resolve the passed readPreference value. Some          * examples for the possible values are nearest, primary or secondary          * etc.          *           * The option will be converted to a          *<code>com.mongodb.ReadPreference</code> type.          *           * Group: common          */
DECL|method|readPreference (String readPreference)
specifier|default
name|GridFsEndpointBuilder
name|readPreference
parameter_list|(
name|String
name|readPreference
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"readPreference"
argument_list|,
name|readPreference
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the WriteConcern for write operations on MongoDB using the          * standard ones. Resolved from the fields of the WriteConcern class by          * calling the WriteConcern#valueOf(String) method.          *           * The option is a:<code>com.mongodb.WriteConcern</code> type.          *           * Group: common          */
DECL|method|writeConcern (Object writeConcern)
specifier|default
name|GridFsEndpointBuilder
name|writeConcern
parameter_list|(
name|Object
name|writeConcern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"writeConcern"
argument_list|,
name|writeConcern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the WriteConcern for write operations on MongoDB using the          * standard ones. Resolved from the fields of the WriteConcern class by          * calling the WriteConcern#valueOf(String) method.          *           * The option will be converted to a          *<code>com.mongodb.WriteConcern</code> type.          *           * Group: common          */
DECL|method|writeConcern (String writeConcern)
specifier|default
name|GridFsEndpointBuilder
name|writeConcern
parameter_list|(
name|String
name|writeConcern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"writeConcern"
argument_list|,
name|writeConcern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the MongoDB GridFS component.      */
DECL|interface|AdvancedGridFsEndpointBuilder
specifier|public
interface|interface
name|AdvancedGridFsEndpointBuilder
extends|extends
name|AdvancedGridFsEndpointConsumerBuilder
extends|,
name|AdvancedGridFsEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|GridFsEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|GridFsEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedGridFsEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedGridFsEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedGridFsEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedGridFsEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.mongodb.gridfs.QueryStrategy</code>      * enum.      */
DECL|enum|QueryStrategy
enum|enum
name|QueryStrategy
block|{
DECL|enumConstant|TimeStamp
name|TimeStamp
block|,
DECL|enumConstant|PersistentTimestamp
name|PersistentTimestamp
block|,
DECL|enumConstant|FileAttribute
name|FileAttribute
block|,
DECL|enumConstant|TimeStampAndFileAttribute
name|TimeStampAndFileAttribute
block|,
DECL|enumConstant|PersistentTimestampAndFileAttribute
name|PersistentTimestampAndFileAttribute
block|;     }
comment|/**      * MongoDB GridFS (camel-mongodb-gridfs)      * Component for working with MongoDB GridFS.      *       * Category: database,nosql      * Available as of version: 2.18      * Maven coordinates: org.apache.camel:camel-mongodb-gridfs      *       * Syntax:<code>mongodb-gridfs:connectionBean</code>      *       * Path parameter: connectionBean (required)      * Name of com.mongodb.Mongo to use.      */
DECL|method|mongodbGridfs (String path)
specifier|default
name|GridFsEndpointBuilder
name|mongodbGridfs
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|GridFsEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|GridFsEndpointBuilder
implements|,
name|AdvancedGridFsEndpointBuilder
block|{
specifier|public
name|GridFsEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"mongodb-gridfs"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|GridFsEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

