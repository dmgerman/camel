begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * Component for working with documents stored in MongoDB database.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|MongoDbEndpointBuilderFactory
specifier|public
interface|interface
name|MongoDbEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the MongoDB component.      */
DECL|interface|MongoDbEndpointConsumerBuilder
specifier|public
interface|interface
name|MongoDbEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedMongoDbEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedMongoDbEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Name of com.mongodb.Mongo to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|connectionBean ( String connectionBean)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|connectionBean
parameter_list|(
name|String
name|connectionBean
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionBean"
argument_list|,
name|connectionBean
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of the MongoDB collection to bind to this endpoint.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|collection (String collection)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|collection
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"collection"
argument_list|,
name|collection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the collection index (JSON FORMAT : { field1 : order1, field2 :          * order2}).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|collectionIndex ( String collectionIndex)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|collectionIndex
parameter_list|(
name|String
name|collectionIndex
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"collectionIndex"
argument_list|,
name|collectionIndex
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Create collection during initialisation if it doesn't exist. Default          * is true.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCollection ( boolean createCollection)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|createCollection
parameter_list|(
name|boolean
name|createCollection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createCollection"
argument_list|,
name|createCollection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Create collection during initialisation if it doesn't exist. Default          * is true.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCollection ( String createCollection)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|createCollection
parameter_list|(
name|String
name|createCollection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createCollection"
argument_list|,
name|createCollection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of the MongoDB database to target.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|database (String database)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|database
parameter_list|(
name|String
name|database
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"database"
argument_list|,
name|database
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Mongo instance that represents the backing connection.          *           * The option is a:<code>com.mongodb.MongoClient</code> type.          *           * Group: common          */
DECL|method|mongoConnection ( Object mongoConnection)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|mongoConnection
parameter_list|(
name|Object
name|mongoConnection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mongoConnection"
argument_list|,
name|mongoConnection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Mongo instance that represents the backing connection.          *           * The option will be converted to a          *<code>com.mongodb.MongoClient</code> type.          *           * Group: common          */
DECL|method|mongoConnection ( String mongoConnection)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|mongoConnection
parameter_list|(
name|String
name|mongoConnection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mongoConnection"
argument_list|,
name|mongoConnection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the operation this endpoint will execute against MongoDB. For          * possible values, see MongoDbOperation.          *           * The option is a:          *<code>org.apache.camel.component.mongodb3.MongoDbOperation</code>          * type.          *           * Group: common          */
DECL|method|operation ( MongoDbOperation operation)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|operation
parameter_list|(
name|MongoDbOperation
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the operation this endpoint will execute against MongoDB. For          * possible values, see MongoDbOperation.          *           * The option will be converted to a          *<code>org.apache.camel.component.mongodb3.MongoDbOperation</code>          * type.          *           * Group: common          */
DECL|method|operation (String operation)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Convert the output of the producer to the selected type :          * DocumentList Document or MongoIterable. DocumentList or MongoIterable          * applies to findAll and aggregate. Document applies to all other          * operations.          *           * The option is a:          *<code>org.apache.camel.component.mongodb3.MongoDbOutputType</code>          * type.          *           * Group: common          */
DECL|method|outputType ( MongoDbOutputType outputType)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|outputType
parameter_list|(
name|MongoDbOutputType
name|outputType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputType"
argument_list|,
name|outputType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Convert the output of the producer to the selected type :          * DocumentList Document or MongoIterable. DocumentList or MongoIterable          * applies to findAll and aggregate. Document applies to all other          * operations.          *           * The option will be converted to a          *<code>org.apache.camel.component.mongodb3.MongoDbOutputType</code>          * type.          *           * Group: common          */
DECL|method|outputType (String outputType)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|outputType
parameter_list|(
name|String
name|outputType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputType"
argument_list|,
name|outputType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Consumer type.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|consumerType (String consumerType)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|consumerType
parameter_list|(
name|String
name|consumerType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"consumerType"
argument_list|,
name|consumerType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Filter condition for change streams consumer.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: changeStream          */
DECL|method|streamFilter (String streamFilter)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|streamFilter
parameter_list|(
name|String
name|streamFilter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"streamFilter"
argument_list|,
name|streamFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * One tail tracking collection can host many trackers for several          * tailable consumers. To keep them separate, each tracker should have          * its own unique persistentId.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: tail          */
DECL|method|persistentId (String persistentId)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|persistentId
parameter_list|(
name|String
name|persistentId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistentId"
argument_list|,
name|persistentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable persistent tail tracking, which is a mechanism to keep track          * of the last consumed message across system restarts. The next time          * the system is up, the endpoint will recover the cursor from the point          * where it last stopped slurping records.          *           * The option is a:<code>boolean</code> type.          *           * Group: tail          */
DECL|method|persistentTailTracking ( boolean persistentTailTracking)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|persistentTailTracking
parameter_list|(
name|boolean
name|persistentTailTracking
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistentTailTracking"
argument_list|,
name|persistentTailTracking
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable persistent tail tracking, which is a mechanism to keep track          * of the last consumed message across system restarts. The next time          * the system is up, the endpoint will recover the cursor from the point          * where it last stopped slurping records.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: tail          */
DECL|method|persistentTailTracking ( String persistentTailTracking)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|persistentTailTracking
parameter_list|(
name|String
name|persistentTailTracking
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistentTailTracking"
argument_list|,
name|persistentTailTracking
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Collection where tail tracking information will be persisted. If not          * specified, MongoDbTailTrackingConfig#DEFAULT_COLLECTION will be used          * by default.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: tail          */
DECL|method|tailTrackCollection ( String tailTrackCollection)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|tailTrackCollection
parameter_list|(
name|String
name|tailTrackCollection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tailTrackCollection"
argument_list|,
name|tailTrackCollection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Indicates what database the tail tracking mechanism will persist to.          * If not specified, the current database will be picked by default.          * Dynamicity will not be taken into account even if enabled, i.e. the          * tail tracking database will not vary past endpoint initialisation.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: tail          */
DECL|method|tailTrackDb (String tailTrackDb)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|tailTrackDb
parameter_list|(
name|String
name|tailTrackDb
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tailTrackDb"
argument_list|,
name|tailTrackDb
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Field where the last tracked value will be placed. If not specified,          * MongoDbTailTrackingConfig#DEFAULT_FIELD will be used by default.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: tail          */
DECL|method|tailTrackField ( String tailTrackField)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|tailTrackField
parameter_list|(
name|String
name|tailTrackField
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tailTrackField"
argument_list|,
name|tailTrackField
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Correlation field in the incoming record which is of increasing          * nature and will be used to position the tailing cursor every time it          * is generated. The cursor will be (re)created with a query of type:          * tailTrackIncreasingField lastValue (possibly recovered from          * persistent tail tracking). Can be of type Integer, Date, String, etc.          * NOTE: No support for dot notation at the current time, so the field          * should be at the top level of the document.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: tail          */
DECL|method|tailTrackIncreasingField ( String tailTrackIncreasingField)
specifier|default
name|MongoDbEndpointConsumerBuilder
name|tailTrackIncreasingField
parameter_list|(
name|String
name|tailTrackIncreasingField
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tailTrackIncreasingField"
argument_list|,
name|tailTrackIncreasingField
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the MongoDB component.      */
DECL|interface|AdvancedMongoDbEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedMongoDbEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|MongoDbEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|MongoDbEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedMongoDbEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedMongoDbEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedMongoDbEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedMongoDbEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedMongoDbEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedMongoDbEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * MongoDB tailable cursors will block until new data arrives. If no new          * data is inserted, after some time the cursor will be automatically          * freed and closed by the MongoDB server. The client is expected to          * regenerate the cursor if needed. This value specifies the time to          * wait before attempting to fetch a new cursor, and if the attempt          * fails, how long before the next attempt is made. Default value is          * 1000ms.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|cursorRegenerationDelay ( long cursorRegenerationDelay)
specifier|default
name|AdvancedMongoDbEndpointConsumerBuilder
name|cursorRegenerationDelay
parameter_list|(
name|long
name|cursorRegenerationDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cursorRegenerationDelay"
argument_list|,
name|cursorRegenerationDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * MongoDB tailable cursors will block until new data arrives. If no new          * data is inserted, after some time the cursor will be automatically          * freed and closed by the MongoDB server. The client is expected to          * regenerate the cursor if needed. This value specifies the time to          * wait before attempting to fetch a new cursor, and if the attempt          * fails, how long before the next attempt is made. Default value is          * 1000ms.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|cursorRegenerationDelay ( String cursorRegenerationDelay)
specifier|default
name|AdvancedMongoDbEndpointConsumerBuilder
name|cursorRegenerationDelay
parameter_list|(
name|String
name|cursorRegenerationDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cursorRegenerationDelay"
argument_list|,
name|cursorRegenerationDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether this endpoint will attempt to dynamically resolve the          * target database and collection from the incoming Exchange properties.          * Can be used to override at runtime the database and collection          * specified on the otherwise static endpoint URI. It is disabled by          * default to boost performance. Enabling it will take a minimal          * performance hit.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|dynamicity ( boolean dynamicity)
specifier|default
name|AdvancedMongoDbEndpointConsumerBuilder
name|dynamicity
parameter_list|(
name|boolean
name|dynamicity
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dynamicity"
argument_list|,
name|dynamicity
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether this endpoint will attempt to dynamically resolve the          * target database and collection from the incoming Exchange properties.          * Can be used to override at runtime the database and collection          * specified on the otherwise static endpoint URI. It is disabled by          * default to boost performance. Enabling it will take a minimal          * performance hit.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|dynamicity ( String dynamicity)
specifier|default
name|AdvancedMongoDbEndpointConsumerBuilder
name|dynamicity
parameter_list|(
name|String
name|dynamicity
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dynamicity"
argument_list|,
name|dynamicity
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedMongoDbEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedMongoDbEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * In write operations, it determines whether instead of returning          * WriteResult as the body of the OUT message, we transfer the IN          * message to the OUT and attach the WriteResult as a header.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|writeResultAsHeader ( boolean writeResultAsHeader)
specifier|default
name|AdvancedMongoDbEndpointConsumerBuilder
name|writeResultAsHeader
parameter_list|(
name|boolean
name|writeResultAsHeader
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeResultAsHeader"
argument_list|,
name|writeResultAsHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * In write operations, it determines whether instead of returning          * WriteResult as the body of the OUT message, we transfer the IN          * message to the OUT and attach the WriteResult as a header.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|writeResultAsHeader ( String writeResultAsHeader)
specifier|default
name|AdvancedMongoDbEndpointConsumerBuilder
name|writeResultAsHeader
parameter_list|(
name|String
name|writeResultAsHeader
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeResultAsHeader"
argument_list|,
name|writeResultAsHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the MongoDB component.      */
DECL|interface|MongoDbEndpointProducerBuilder
specifier|public
interface|interface
name|MongoDbEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedMongoDbEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedMongoDbEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Name of com.mongodb.Mongo to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|connectionBean ( String connectionBean)
specifier|default
name|MongoDbEndpointProducerBuilder
name|connectionBean
parameter_list|(
name|String
name|connectionBean
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionBean"
argument_list|,
name|connectionBean
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of the MongoDB collection to bind to this endpoint.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|collection (String collection)
specifier|default
name|MongoDbEndpointProducerBuilder
name|collection
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"collection"
argument_list|,
name|collection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the collection index (JSON FORMAT : { field1 : order1, field2 :          * order2}).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|collectionIndex ( String collectionIndex)
specifier|default
name|MongoDbEndpointProducerBuilder
name|collectionIndex
parameter_list|(
name|String
name|collectionIndex
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"collectionIndex"
argument_list|,
name|collectionIndex
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Create collection during initialisation if it doesn't exist. Default          * is true.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCollection ( boolean createCollection)
specifier|default
name|MongoDbEndpointProducerBuilder
name|createCollection
parameter_list|(
name|boolean
name|createCollection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createCollection"
argument_list|,
name|createCollection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Create collection during initialisation if it doesn't exist. Default          * is true.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCollection ( String createCollection)
specifier|default
name|MongoDbEndpointProducerBuilder
name|createCollection
parameter_list|(
name|String
name|createCollection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createCollection"
argument_list|,
name|createCollection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of the MongoDB database to target.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|database (String database)
specifier|default
name|MongoDbEndpointProducerBuilder
name|database
parameter_list|(
name|String
name|database
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"database"
argument_list|,
name|database
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Mongo instance that represents the backing connection.          *           * The option is a:<code>com.mongodb.MongoClient</code> type.          *           * Group: common          */
DECL|method|mongoConnection ( Object mongoConnection)
specifier|default
name|MongoDbEndpointProducerBuilder
name|mongoConnection
parameter_list|(
name|Object
name|mongoConnection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mongoConnection"
argument_list|,
name|mongoConnection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Mongo instance that represents the backing connection.          *           * The option will be converted to a          *<code>com.mongodb.MongoClient</code> type.          *           * Group: common          */
DECL|method|mongoConnection ( String mongoConnection)
specifier|default
name|MongoDbEndpointProducerBuilder
name|mongoConnection
parameter_list|(
name|String
name|mongoConnection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mongoConnection"
argument_list|,
name|mongoConnection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the operation this endpoint will execute against MongoDB. For          * possible values, see MongoDbOperation.          *           * The option is a:          *<code>org.apache.camel.component.mongodb3.MongoDbOperation</code>          * type.          *           * Group: common          */
DECL|method|operation ( MongoDbOperation operation)
specifier|default
name|MongoDbEndpointProducerBuilder
name|operation
parameter_list|(
name|MongoDbOperation
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the operation this endpoint will execute against MongoDB. For          * possible values, see MongoDbOperation.          *           * The option will be converted to a          *<code>org.apache.camel.component.mongodb3.MongoDbOperation</code>          * type.          *           * Group: common          */
DECL|method|operation (String operation)
specifier|default
name|MongoDbEndpointProducerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Convert the output of the producer to the selected type :          * DocumentList Document or MongoIterable. DocumentList or MongoIterable          * applies to findAll and aggregate. Document applies to all other          * operations.          *           * The option is a:          *<code>org.apache.camel.component.mongodb3.MongoDbOutputType</code>          * type.          *           * Group: common          */
DECL|method|outputType ( MongoDbOutputType outputType)
specifier|default
name|MongoDbEndpointProducerBuilder
name|outputType
parameter_list|(
name|MongoDbOutputType
name|outputType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputType"
argument_list|,
name|outputType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Convert the output of the producer to the selected type :          * DocumentList Document or MongoIterable. DocumentList or MongoIterable          * applies to findAll and aggregate. Document applies to all other          * operations.          *           * The option will be converted to a          *<code>org.apache.camel.component.mongodb3.MongoDbOutputType</code>          * type.          *           * Group: common          */
DECL|method|outputType (String outputType)
specifier|default
name|MongoDbEndpointProducerBuilder
name|outputType
parameter_list|(
name|String
name|outputType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputType"
argument_list|,
name|outputType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|MongoDbEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|MongoDbEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Filter condition for change streams consumer.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: changeStream          */
DECL|method|streamFilter (String streamFilter)
specifier|default
name|MongoDbEndpointProducerBuilder
name|streamFilter
parameter_list|(
name|String
name|streamFilter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"streamFilter"
argument_list|,
name|streamFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * One tail tracking collection can host many trackers for several          * tailable consumers. To keep them separate, each tracker should have          * its own unique persistentId.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: tail          */
DECL|method|persistentId (String persistentId)
specifier|default
name|MongoDbEndpointProducerBuilder
name|persistentId
parameter_list|(
name|String
name|persistentId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistentId"
argument_list|,
name|persistentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable persistent tail tracking, which is a mechanism to keep track          * of the last consumed message across system restarts. The next time          * the system is up, the endpoint will recover the cursor from the point          * where it last stopped slurping records.          *           * The option is a:<code>boolean</code> type.          *           * Group: tail          */
DECL|method|persistentTailTracking ( boolean persistentTailTracking)
specifier|default
name|MongoDbEndpointProducerBuilder
name|persistentTailTracking
parameter_list|(
name|boolean
name|persistentTailTracking
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistentTailTracking"
argument_list|,
name|persistentTailTracking
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable persistent tail tracking, which is a mechanism to keep track          * of the last consumed message across system restarts. The next time          * the system is up, the endpoint will recover the cursor from the point          * where it last stopped slurping records.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: tail          */
DECL|method|persistentTailTracking ( String persistentTailTracking)
specifier|default
name|MongoDbEndpointProducerBuilder
name|persistentTailTracking
parameter_list|(
name|String
name|persistentTailTracking
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistentTailTracking"
argument_list|,
name|persistentTailTracking
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Collection where tail tracking information will be persisted. If not          * specified, MongoDbTailTrackingConfig#DEFAULT_COLLECTION will be used          * by default.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: tail          */
DECL|method|tailTrackCollection ( String tailTrackCollection)
specifier|default
name|MongoDbEndpointProducerBuilder
name|tailTrackCollection
parameter_list|(
name|String
name|tailTrackCollection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tailTrackCollection"
argument_list|,
name|tailTrackCollection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Indicates what database the tail tracking mechanism will persist to.          * If not specified, the current database will be picked by default.          * Dynamicity will not be taken into account even if enabled, i.e. the          * tail tracking database will not vary past endpoint initialisation.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: tail          */
DECL|method|tailTrackDb (String tailTrackDb)
specifier|default
name|MongoDbEndpointProducerBuilder
name|tailTrackDb
parameter_list|(
name|String
name|tailTrackDb
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tailTrackDb"
argument_list|,
name|tailTrackDb
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Field where the last tracked value will be placed. If not specified,          * MongoDbTailTrackingConfig#DEFAULT_FIELD will be used by default.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: tail          */
DECL|method|tailTrackField ( String tailTrackField)
specifier|default
name|MongoDbEndpointProducerBuilder
name|tailTrackField
parameter_list|(
name|String
name|tailTrackField
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tailTrackField"
argument_list|,
name|tailTrackField
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Correlation field in the incoming record which is of increasing          * nature and will be used to position the tailing cursor every time it          * is generated. The cursor will be (re)created with a query of type:          * tailTrackIncreasingField lastValue (possibly recovered from          * persistent tail tracking). Can be of type Integer, Date, String, etc.          * NOTE: No support for dot notation at the current time, so the field          * should be at the top level of the document.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: tail          */
DECL|method|tailTrackIncreasingField ( String tailTrackIncreasingField)
specifier|default
name|MongoDbEndpointProducerBuilder
name|tailTrackIncreasingField
parameter_list|(
name|String
name|tailTrackIncreasingField
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tailTrackIncreasingField"
argument_list|,
name|tailTrackIncreasingField
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the MongoDB component.      */
DECL|interface|AdvancedMongoDbEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedMongoDbEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|MongoDbEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|MongoDbEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedMongoDbEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedMongoDbEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * MongoDB tailable cursors will block until new data arrives. If no new          * data is inserted, after some time the cursor will be automatically          * freed and closed by the MongoDB server. The client is expected to          * regenerate the cursor if needed. This value specifies the time to          * wait before attempting to fetch a new cursor, and if the attempt          * fails, how long before the next attempt is made. Default value is          * 1000ms.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|cursorRegenerationDelay ( long cursorRegenerationDelay)
specifier|default
name|AdvancedMongoDbEndpointProducerBuilder
name|cursorRegenerationDelay
parameter_list|(
name|long
name|cursorRegenerationDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cursorRegenerationDelay"
argument_list|,
name|cursorRegenerationDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * MongoDB tailable cursors will block until new data arrives. If no new          * data is inserted, after some time the cursor will be automatically          * freed and closed by the MongoDB server. The client is expected to          * regenerate the cursor if needed. This value specifies the time to          * wait before attempting to fetch a new cursor, and if the attempt          * fails, how long before the next attempt is made. Default value is          * 1000ms.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|cursorRegenerationDelay ( String cursorRegenerationDelay)
specifier|default
name|AdvancedMongoDbEndpointProducerBuilder
name|cursorRegenerationDelay
parameter_list|(
name|String
name|cursorRegenerationDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cursorRegenerationDelay"
argument_list|,
name|cursorRegenerationDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether this endpoint will attempt to dynamically resolve the          * target database and collection from the incoming Exchange properties.          * Can be used to override at runtime the database and collection          * specified on the otherwise static endpoint URI. It is disabled by          * default to boost performance. Enabling it will take a minimal          * performance hit.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|dynamicity ( boolean dynamicity)
specifier|default
name|AdvancedMongoDbEndpointProducerBuilder
name|dynamicity
parameter_list|(
name|boolean
name|dynamicity
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dynamicity"
argument_list|,
name|dynamicity
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether this endpoint will attempt to dynamically resolve the          * target database and collection from the incoming Exchange properties.          * Can be used to override at runtime the database and collection          * specified on the otherwise static endpoint URI. It is disabled by          * default to boost performance. Enabling it will take a minimal          * performance hit.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|dynamicity ( String dynamicity)
specifier|default
name|AdvancedMongoDbEndpointProducerBuilder
name|dynamicity
parameter_list|(
name|String
name|dynamicity
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dynamicity"
argument_list|,
name|dynamicity
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedMongoDbEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedMongoDbEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * In write operations, it determines whether instead of returning          * WriteResult as the body of the OUT message, we transfer the IN          * message to the OUT and attach the WriteResult as a header.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|writeResultAsHeader ( boolean writeResultAsHeader)
specifier|default
name|AdvancedMongoDbEndpointProducerBuilder
name|writeResultAsHeader
parameter_list|(
name|boolean
name|writeResultAsHeader
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeResultAsHeader"
argument_list|,
name|writeResultAsHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * In write operations, it determines whether instead of returning          * WriteResult as the body of the OUT message, we transfer the IN          * message to the OUT and attach the WriteResult as a header.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|writeResultAsHeader ( String writeResultAsHeader)
specifier|default
name|AdvancedMongoDbEndpointProducerBuilder
name|writeResultAsHeader
parameter_list|(
name|String
name|writeResultAsHeader
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeResultAsHeader"
argument_list|,
name|writeResultAsHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the MongoDB component.      */
DECL|interface|MongoDbEndpointBuilder
specifier|public
interface|interface
name|MongoDbEndpointBuilder
extends|extends
name|MongoDbEndpointConsumerBuilder
extends|,
name|MongoDbEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedMongoDbEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedMongoDbEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Name of com.mongodb.Mongo to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|connectionBean (String connectionBean)
specifier|default
name|MongoDbEndpointBuilder
name|connectionBean
parameter_list|(
name|String
name|connectionBean
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionBean"
argument_list|,
name|connectionBean
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of the MongoDB collection to bind to this endpoint.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|collection (String collection)
specifier|default
name|MongoDbEndpointBuilder
name|collection
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"collection"
argument_list|,
name|collection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the collection index (JSON FORMAT : { field1 : order1, field2 :          * order2}).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|collectionIndex (String collectionIndex)
specifier|default
name|MongoDbEndpointBuilder
name|collectionIndex
parameter_list|(
name|String
name|collectionIndex
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"collectionIndex"
argument_list|,
name|collectionIndex
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Create collection during initialisation if it doesn't exist. Default          * is true.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCollection (boolean createCollection)
specifier|default
name|MongoDbEndpointBuilder
name|createCollection
parameter_list|(
name|boolean
name|createCollection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createCollection"
argument_list|,
name|createCollection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Create collection during initialisation if it doesn't exist. Default          * is true.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCollection (String createCollection)
specifier|default
name|MongoDbEndpointBuilder
name|createCollection
parameter_list|(
name|String
name|createCollection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createCollection"
argument_list|,
name|createCollection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of the MongoDB database to target.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|database (String database)
specifier|default
name|MongoDbEndpointBuilder
name|database
parameter_list|(
name|String
name|database
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"database"
argument_list|,
name|database
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Mongo instance that represents the backing connection.          *           * The option is a:<code>com.mongodb.MongoClient</code> type.          *           * Group: common          */
DECL|method|mongoConnection (Object mongoConnection)
specifier|default
name|MongoDbEndpointBuilder
name|mongoConnection
parameter_list|(
name|Object
name|mongoConnection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mongoConnection"
argument_list|,
name|mongoConnection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Mongo instance that represents the backing connection.          *           * The option will be converted to a          *<code>com.mongodb.MongoClient</code> type.          *           * Group: common          */
DECL|method|mongoConnection (String mongoConnection)
specifier|default
name|MongoDbEndpointBuilder
name|mongoConnection
parameter_list|(
name|String
name|mongoConnection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mongoConnection"
argument_list|,
name|mongoConnection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the operation this endpoint will execute against MongoDB. For          * possible values, see MongoDbOperation.          *           * The option is a:          *<code>org.apache.camel.component.mongodb3.MongoDbOperation</code>          * type.          *           * Group: common          */
DECL|method|operation (MongoDbOperation operation)
specifier|default
name|MongoDbEndpointBuilder
name|operation
parameter_list|(
name|MongoDbOperation
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the operation this endpoint will execute against MongoDB. For          * possible values, see MongoDbOperation.          *           * The option will be converted to a          *<code>org.apache.camel.component.mongodb3.MongoDbOperation</code>          * type.          *           * Group: common          */
DECL|method|operation (String operation)
specifier|default
name|MongoDbEndpointBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Convert the output of the producer to the selected type :          * DocumentList Document or MongoIterable. DocumentList or MongoIterable          * applies to findAll and aggregate. Document applies to all other          * operations.          *           * The option is a:          *<code>org.apache.camel.component.mongodb3.MongoDbOutputType</code>          * type.          *           * Group: common          */
DECL|method|outputType (MongoDbOutputType outputType)
specifier|default
name|MongoDbEndpointBuilder
name|outputType
parameter_list|(
name|MongoDbOutputType
name|outputType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputType"
argument_list|,
name|outputType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Convert the output of the producer to the selected type :          * DocumentList Document or MongoIterable. DocumentList or MongoIterable          * applies to findAll and aggregate. Document applies to all other          * operations.          *           * The option will be converted to a          *<code>org.apache.camel.component.mongodb3.MongoDbOutputType</code>          * type.          *           * Group: common          */
DECL|method|outputType (String outputType)
specifier|default
name|MongoDbEndpointBuilder
name|outputType
parameter_list|(
name|String
name|outputType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"outputType"
argument_list|,
name|outputType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Filter condition for change streams consumer.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: changeStream          */
DECL|method|streamFilter (String streamFilter)
specifier|default
name|MongoDbEndpointBuilder
name|streamFilter
parameter_list|(
name|String
name|streamFilter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"streamFilter"
argument_list|,
name|streamFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * One tail tracking collection can host many trackers for several          * tailable consumers. To keep them separate, each tracker should have          * its own unique persistentId.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: tail          */
DECL|method|persistentId (String persistentId)
specifier|default
name|MongoDbEndpointBuilder
name|persistentId
parameter_list|(
name|String
name|persistentId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistentId"
argument_list|,
name|persistentId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable persistent tail tracking, which is a mechanism to keep track          * of the last consumed message across system restarts. The next time          * the system is up, the endpoint will recover the cursor from the point          * where it last stopped slurping records.          *           * The option is a:<code>boolean</code> type.          *           * Group: tail          */
DECL|method|persistentTailTracking ( boolean persistentTailTracking)
specifier|default
name|MongoDbEndpointBuilder
name|persistentTailTracking
parameter_list|(
name|boolean
name|persistentTailTracking
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistentTailTracking"
argument_list|,
name|persistentTailTracking
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable persistent tail tracking, which is a mechanism to keep track          * of the last consumed message across system restarts. The next time          * the system is up, the endpoint will recover the cursor from the point          * where it last stopped slurping records.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: tail          */
DECL|method|persistentTailTracking ( String persistentTailTracking)
specifier|default
name|MongoDbEndpointBuilder
name|persistentTailTracking
parameter_list|(
name|String
name|persistentTailTracking
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistentTailTracking"
argument_list|,
name|persistentTailTracking
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Collection where tail tracking information will be persisted. If not          * specified, MongoDbTailTrackingConfig#DEFAULT_COLLECTION will be used          * by default.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: tail          */
DECL|method|tailTrackCollection ( String tailTrackCollection)
specifier|default
name|MongoDbEndpointBuilder
name|tailTrackCollection
parameter_list|(
name|String
name|tailTrackCollection
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tailTrackCollection"
argument_list|,
name|tailTrackCollection
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Indicates what database the tail tracking mechanism will persist to.          * If not specified, the current database will be picked by default.          * Dynamicity will not be taken into account even if enabled, i.e. the          * tail tracking database will not vary past endpoint initialisation.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: tail          */
DECL|method|tailTrackDb (String tailTrackDb)
specifier|default
name|MongoDbEndpointBuilder
name|tailTrackDb
parameter_list|(
name|String
name|tailTrackDb
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tailTrackDb"
argument_list|,
name|tailTrackDb
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Field where the last tracked value will be placed. If not specified,          * MongoDbTailTrackingConfig#DEFAULT_FIELD will be used by default.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: tail          */
DECL|method|tailTrackField (String tailTrackField)
specifier|default
name|MongoDbEndpointBuilder
name|tailTrackField
parameter_list|(
name|String
name|tailTrackField
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tailTrackField"
argument_list|,
name|tailTrackField
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Correlation field in the incoming record which is of increasing          * nature and will be used to position the tailing cursor every time it          * is generated. The cursor will be (re)created with a query of type:          * tailTrackIncreasingField lastValue (possibly recovered from          * persistent tail tracking). Can be of type Integer, Date, String, etc.          * NOTE: No support for dot notation at the current time, so the field          * should be at the top level of the document.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: tail          */
DECL|method|tailTrackIncreasingField ( String tailTrackIncreasingField)
specifier|default
name|MongoDbEndpointBuilder
name|tailTrackIncreasingField
parameter_list|(
name|String
name|tailTrackIncreasingField
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tailTrackIncreasingField"
argument_list|,
name|tailTrackIncreasingField
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the MongoDB component.      */
DECL|interface|AdvancedMongoDbEndpointBuilder
specifier|public
interface|interface
name|AdvancedMongoDbEndpointBuilder
extends|extends
name|AdvancedMongoDbEndpointConsumerBuilder
extends|,
name|AdvancedMongoDbEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|MongoDbEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|MongoDbEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedMongoDbEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedMongoDbEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * MongoDB tailable cursors will block until new data arrives. If no new          * data is inserted, after some time the cursor will be automatically          * freed and closed by the MongoDB server. The client is expected to          * regenerate the cursor if needed. This value specifies the time to          * wait before attempting to fetch a new cursor, and if the attempt          * fails, how long before the next attempt is made. Default value is          * 1000ms.          *           * The option is a:<code>long</code> type.          *           * Group: advanced          */
DECL|method|cursorRegenerationDelay ( long cursorRegenerationDelay)
specifier|default
name|AdvancedMongoDbEndpointBuilder
name|cursorRegenerationDelay
parameter_list|(
name|long
name|cursorRegenerationDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cursorRegenerationDelay"
argument_list|,
name|cursorRegenerationDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * MongoDB tailable cursors will block until new data arrives. If no new          * data is inserted, after some time the cursor will be automatically          * freed and closed by the MongoDB server. The client is expected to          * regenerate the cursor if needed. This value specifies the time to          * wait before attempting to fetch a new cursor, and if the attempt          * fails, how long before the next attempt is made. Default value is          * 1000ms.          *           * The option will be converted to a<code>long</code> type.          *           * Group: advanced          */
DECL|method|cursorRegenerationDelay ( String cursorRegenerationDelay)
specifier|default
name|AdvancedMongoDbEndpointBuilder
name|cursorRegenerationDelay
parameter_list|(
name|String
name|cursorRegenerationDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cursorRegenerationDelay"
argument_list|,
name|cursorRegenerationDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether this endpoint will attempt to dynamically resolve the          * target database and collection from the incoming Exchange properties.          * Can be used to override at runtime the database and collection          * specified on the otherwise static endpoint URI. It is disabled by          * default to boost performance. Enabling it will take a minimal          * performance hit.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|dynamicity (boolean dynamicity)
specifier|default
name|AdvancedMongoDbEndpointBuilder
name|dynamicity
parameter_list|(
name|boolean
name|dynamicity
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dynamicity"
argument_list|,
name|dynamicity
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether this endpoint will attempt to dynamically resolve the          * target database and collection from the incoming Exchange properties.          * Can be used to override at runtime the database and collection          * specified on the otherwise static endpoint URI. It is disabled by          * default to boost performance. Enabling it will take a minimal          * performance hit.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|dynamicity (String dynamicity)
specifier|default
name|AdvancedMongoDbEndpointBuilder
name|dynamicity
parameter_list|(
name|String
name|dynamicity
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dynamicity"
argument_list|,
name|dynamicity
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedMongoDbEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedMongoDbEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * In write operations, it determines whether instead of returning          * WriteResult as the body of the OUT message, we transfer the IN          * message to the OUT and attach the WriteResult as a header.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|writeResultAsHeader ( boolean writeResultAsHeader)
specifier|default
name|AdvancedMongoDbEndpointBuilder
name|writeResultAsHeader
parameter_list|(
name|boolean
name|writeResultAsHeader
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeResultAsHeader"
argument_list|,
name|writeResultAsHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * In write operations, it determines whether instead of returning          * WriteResult as the body of the OUT message, we transfer the IN          * message to the OUT and attach the WriteResult as a header.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|writeResultAsHeader ( String writeResultAsHeader)
specifier|default
name|AdvancedMongoDbEndpointBuilder
name|writeResultAsHeader
parameter_list|(
name|String
name|writeResultAsHeader
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeResultAsHeader"
argument_list|,
name|writeResultAsHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.mongodb3.MongoDbOperation</code> enum.      */
DECL|enum|MongoDbOperation
enum|enum
name|MongoDbOperation
block|{
DECL|enumConstant|findById
name|findById
block|,
DECL|enumConstant|findOneByQuery
name|findOneByQuery
block|,
DECL|enumConstant|findAll
name|findAll
block|,
DECL|enumConstant|findDistinct
name|findDistinct
block|,
DECL|enumConstant|insert
name|insert
block|,
DECL|enumConstant|save
name|save
block|,
DECL|enumConstant|update
name|update
block|,
DECL|enumConstant|remove
name|remove
block|,
DECL|enumConstant|bulkWrite
name|bulkWrite
block|,
DECL|enumConstant|aggregate
name|aggregate
block|,
DECL|enumConstant|getDbStats
name|getDbStats
block|,
DECL|enumConstant|getColStats
name|getColStats
block|,
DECL|enumConstant|count
name|count
block|,
DECL|enumConstant|command
name|command
block|;     }
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.mongodb3.MongoDbOutputType</code> enum.      */
DECL|enum|MongoDbOutputType
enum|enum
name|MongoDbOutputType
block|{
DECL|enumConstant|DocumentList
name|DocumentList
block|,
DECL|enumConstant|Document
name|Document
block|,
DECL|enumConstant|MongoIterable
name|MongoIterable
block|;     }
comment|/**      * MongoDB (camel-mongodb3)      * Component for working with documents stored in MongoDB database.      *       * Syntax:<code>mongodb3:connectionBean</code>      * Category: database,nosql      * Available as of version: 2.19      * Maven coordinates: org.apache.camel:camel-mongodb3      */
DECL|method|mongoDb (String path)
specifier|default
name|MongoDbEndpointBuilder
name|mongoDb
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|MongoDbEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|MongoDbEndpointBuilder
implements|,
name|AdvancedMongoDbEndpointBuilder
block|{
specifier|public
name|MongoDbEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"mongodb3"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|MongoDbEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

