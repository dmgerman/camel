begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_comment
comment|/**  * Component for consuming and producing Restful resources using Restlet.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|RestletEndpointBuilderFactory
specifier|public
interface|interface
name|RestletEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Restlet component.      */
DECL|interface|RestletEndpointConsumerBuilder
specifier|public
interface|interface
name|RestletEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedRestletEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedRestletEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The protocol to use which is http or https.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|protocol (String protocol)
specifier|default
name|RestletEndpointConsumerBuilder
name|protocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"protocol"
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The hostname of the restlet service.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|RestletEndpointConsumerBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of the restlet service.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|port (int port)
specifier|default
name|RestletEndpointConsumerBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of the restlet service.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|RestletEndpointConsumerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The resource pattern such as /customer/{id}.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|uriPattern (String uriPattern)
specifier|default
name|RestletEndpointConsumerBuilder
name|uriPattern
parameter_list|(
name|String
name|uriPattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"uriPattern"
argument_list|,
name|uriPattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * On a producer endpoint, specifies the request method to use. On a          * consumer endpoint, specifies that the endpoint consumes only          * restletMethod requests.          * The option is a<code>org.restlet.data.Method</code> type.          * @group common          */
DECL|method|restletMethod ( Object restletMethod)
specifier|default
name|RestletEndpointConsumerBuilder
name|restletMethod
parameter_list|(
name|Object
name|restletMethod
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletMethod"
argument_list|,
name|restletMethod
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * On a producer endpoint, specifies the request method to use. On a          * consumer endpoint, specifies that the endpoint consumes only          * restletMethod requests.          * The option will be converted to a          *<code>org.restlet.data.Method</code> type.          * @group common          */
DECL|method|restletMethod ( String restletMethod)
specifier|default
name|RestletEndpointConsumerBuilder
name|restletMethod
parameter_list|(
name|String
name|restletMethod
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletMethod"
argument_list|,
name|restletMethod
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|RestletEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|RestletEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify one or more methods separated by commas (e.g.          * restletMethods=post,put) to be serviced by a restlet consumer          * endpoint. If both restletMethod and restletMethods options are          * specified, the restletMethod setting is ignored. The possible methods          * are: ALL,CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE.          * The option is a<code>org.restlet.data.Method[]</code> type.          * @group consumer          */
DECL|method|restletMethods ( Object[] restletMethods)
specifier|default
name|RestletEndpointConsumerBuilder
name|restletMethods
parameter_list|(
name|Object
index|[]
name|restletMethods
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletMethods"
argument_list|,
name|restletMethods
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify one or more methods separated by commas (e.g.          * restletMethods=post,put) to be serviced by a restlet consumer          * endpoint. If both restletMethod and restletMethods options are          * specified, the restletMethod setting is ignored. The possible methods          * are: ALL,CONNECT,DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT,TRACE.          * The option will be converted to a          *<code>org.restlet.data.Method[]</code> type.          * @group consumer          */
DECL|method|restletMethods ( String restletMethods)
specifier|default
name|RestletEndpointConsumerBuilder
name|restletMethods
parameter_list|(
name|String
name|restletMethods
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletMethods"
argument_list|,
name|restletMethods
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the security realms of restlet as a map.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.String&gt;</code> type.          * @group security          */
DECL|method|restletRealm ( Map<String, String> restletRealm)
specifier|default
name|RestletEndpointConsumerBuilder
name|restletRealm
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|restletRealm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletRealm"
argument_list|,
name|restletRealm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the security realms of restlet as a map.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>          * type.          * @group security          */
DECL|method|restletRealm (String restletRealm)
specifier|default
name|RestletEndpointConsumerBuilder
name|restletRealm
parameter_list|(
name|String
name|restletRealm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletRealm"
argument_list|,
name|restletRealm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|RestletEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|RestletEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Restlet component.      */
DECL|interface|AdvancedRestletEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedRestletEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|RestletEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|RestletEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Determines whether or not the raw input stream from Restlet is cached          * or not (Camel will read the stream into a in memory/overflow to file,          * Stream caching) cache. By default Camel will cache the Restlet input          * stream to support reading it multiple times to ensure Camel can          * retrieve all data from the stream. However you can set this option to          * true when you for example need to access the raw stream, such as          * streaming it directly to a file or other persistent store.          * DefaultRestletBinding will copy the request input stream into a          * stream cache and put it into message body if this option is false to          * support reading the stream multiple times.          * The option is a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|disableStreamCache ( boolean disableStreamCache)
specifier|default
name|AdvancedRestletEndpointConsumerBuilder
name|disableStreamCache
parameter_list|(
name|boolean
name|disableStreamCache
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disableStreamCache"
argument_list|,
name|disableStreamCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Determines whether or not the raw input stream from Restlet is cached          * or not (Camel will read the stream into a in memory/overflow to file,          * Stream caching) cache. By default Camel will cache the Restlet input          * stream to support reading it multiple times to ensure Camel can          * retrieve all data from the stream. However you can set this option to          * true when you for example need to access the raw stream, such as          * streaming it directly to a file or other persistent store.          * DefaultRestletBinding will copy the request input stream into a          * stream cache and put it into message body if this option is false to          * support reading the stream multiple times.          * The option will be converted to a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|disableStreamCache ( String disableStreamCache)
specifier|default
name|AdvancedRestletEndpointConsumerBuilder
name|disableStreamCache
parameter_list|(
name|String
name|disableStreamCache
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disableStreamCache"
argument_list|,
name|disableStreamCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedRestletEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedRestletEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedRestletEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedRestletEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedRestletEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedRestletEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option is a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedRestletEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedRestletEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom RestletBinding to bind between Restlet and Camel          * message.          * The option is a          *<code>org.apache.camel.component.restlet.RestletBinding</code> type.          * @group advanced          */
DECL|method|restletBinding ( Object restletBinding)
specifier|default
name|AdvancedRestletEndpointConsumerBuilder
name|restletBinding
parameter_list|(
name|Object
name|restletBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletBinding"
argument_list|,
name|restletBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom RestletBinding to bind between Restlet and Camel          * message.          * The option will be converted to a          *<code>org.apache.camel.component.restlet.RestletBinding</code> type.          * @group advanced          */
DECL|method|restletBinding ( String restletBinding)
specifier|default
name|AdvancedRestletEndpointConsumerBuilder
name|restletBinding
parameter_list|(
name|String
name|restletBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletBinding"
argument_list|,
name|restletBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>java.lang.Boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( Boolean synchronous)
specifier|default
name|AdvancedRestletEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|Boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>java.lang.Boolean</code>          * type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedRestletEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Restlet component.      */
DECL|interface|RestletEndpointProducerBuilder
specifier|public
interface|interface
name|RestletEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedRestletEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedRestletEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The protocol to use which is http or https.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|protocol (String protocol)
specifier|default
name|RestletEndpointProducerBuilder
name|protocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"protocol"
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The hostname of the restlet service.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|RestletEndpointProducerBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of the restlet service.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|port (int port)
specifier|default
name|RestletEndpointProducerBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of the restlet service.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|RestletEndpointProducerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The resource pattern such as /customer/{id}.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|uriPattern (String uriPattern)
specifier|default
name|RestletEndpointProducerBuilder
name|uriPattern
parameter_list|(
name|String
name|uriPattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"uriPattern"
argument_list|,
name|uriPattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * On a producer endpoint, specifies the request method to use. On a          * consumer endpoint, specifies that the endpoint consumes only          * restletMethod requests.          * The option is a<code>org.restlet.data.Method</code> type.          * @group common          */
DECL|method|restletMethod ( Object restletMethod)
specifier|default
name|RestletEndpointProducerBuilder
name|restletMethod
parameter_list|(
name|Object
name|restletMethod
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletMethod"
argument_list|,
name|restletMethod
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * On a producer endpoint, specifies the request method to use. On a          * consumer endpoint, specifies that the endpoint consumes only          * restletMethod requests.          * The option will be converted to a          *<code>org.restlet.data.Method</code> type.          * @group common          */
DECL|method|restletMethod ( String restletMethod)
specifier|default
name|RestletEndpointProducerBuilder
name|restletMethod
parameter_list|(
name|String
name|restletMethod
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletMethod"
argument_list|,
name|restletMethod
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Client will give up connection if the connection is timeout, 0          * for unlimited wait.          * The option is a<code>int</code> type.          * @group producer          */
DECL|method|connectTimeout (int connectTimeout)
specifier|default
name|RestletEndpointProducerBuilder
name|connectTimeout
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Client will give up connection if the connection is timeout, 0          * for unlimited wait.          * The option will be converted to a<code>int</code> type.          * @group producer          */
DECL|method|connectTimeout ( String connectTimeout)
specifier|default
name|RestletEndpointProducerBuilder
name|connectTimeout
parameter_list|(
name|String
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure a cookie handler to maintain a HTTP session.          * The option is a          *<code>org.apache.camel.http.common.cookie.CookieHandler</code> type.          * @group producer          */
DECL|method|cookieHandler ( Object cookieHandler)
specifier|default
name|RestletEndpointProducerBuilder
name|cookieHandler
parameter_list|(
name|Object
name|cookieHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cookieHandler"
argument_list|,
name|cookieHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure a cookie handler to maintain a HTTP session.          * The option will be converted to a          *<code>org.apache.camel.http.common.cookie.CookieHandler</code> type.          * @group producer          */
DECL|method|cookieHandler ( String cookieHandler)
specifier|default
name|RestletEndpointProducerBuilder
name|cookieHandler
parameter_list|(
name|String
name|cookieHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cookieHandler"
argument_list|,
name|cookieHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|RestletEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|RestletEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Client socket receive timeout, 0 for unlimited wait.          * The option is a<code>int</code> type.          * @group producer          */
DECL|method|socketTimeout (int socketTimeout)
specifier|default
name|RestletEndpointProducerBuilder
name|socketTimeout
parameter_list|(
name|int
name|socketTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Client socket receive timeout, 0 for unlimited wait.          * The option will be converted to a<code>int</code> type.          * @group producer          */
DECL|method|socketTimeout ( String socketTimeout)
specifier|default
name|RestletEndpointProducerBuilder
name|socketTimeout
parameter_list|(
name|String
name|socketTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to throw exception on a producer failure. If this option is          * false then the http status code is set as a message header which can          * be checked if it has an error value.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|throwExceptionOnFailure ( boolean throwExceptionOnFailure)
specifier|default
name|RestletEndpointProducerBuilder
name|throwExceptionOnFailure
parameter_list|(
name|boolean
name|throwExceptionOnFailure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"throwExceptionOnFailure"
argument_list|,
name|throwExceptionOnFailure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to throw exception on a producer failure. If this option is          * false then the http status code is set as a message header which can          * be checked if it has an error value.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|throwExceptionOnFailure ( String throwExceptionOnFailure)
specifier|default
name|RestletEndpointProducerBuilder
name|throwExceptionOnFailure
parameter_list|(
name|String
name|throwExceptionOnFailure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"throwExceptionOnFailure"
argument_list|,
name|throwExceptionOnFailure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the security realms of restlet as a map.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.String&gt;</code> type.          * @group security          */
DECL|method|restletRealm ( Map<String, String> restletRealm)
specifier|default
name|RestletEndpointProducerBuilder
name|restletRealm
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|restletRealm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletRealm"
argument_list|,
name|restletRealm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the security realms of restlet as a map.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>          * type.          * @group security          */
DECL|method|restletRealm (String restletRealm)
specifier|default
name|RestletEndpointProducerBuilder
name|restletRealm
parameter_list|(
name|String
name|restletRealm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletRealm"
argument_list|,
name|restletRealm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|RestletEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|RestletEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Restlet component.      */
DECL|interface|AdvancedRestletEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedRestletEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|RestletEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|RestletEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether to auto close the stream representation as response from          * calling a REST service using the restlet producer. If the response is          * streaming and the option streamRepresentation is enabled then you may          * want to auto close the InputStream from the streaming response to          * ensure the input stream is closed when the Camel Exchange is done          * being routed. However if you need to read the stream outside a Camel          * route, you may need to not auto close the stream.          * The option is a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|autoCloseStream ( boolean autoCloseStream)
specifier|default
name|AdvancedRestletEndpointProducerBuilder
name|autoCloseStream
parameter_list|(
name|boolean
name|autoCloseStream
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoCloseStream"
argument_list|,
name|autoCloseStream
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to auto close the stream representation as response from          * calling a REST service using the restlet producer. If the response is          * streaming and the option streamRepresentation is enabled then you may          * want to auto close the InputStream from the streaming response to          * ensure the input stream is closed when the Camel Exchange is done          * being routed. However if you need to read the stream outside a Camel          * route, you may need to not auto close the stream.          * The option will be converted to a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|autoCloseStream ( String autoCloseStream)
specifier|default
name|AdvancedRestletEndpointProducerBuilder
name|autoCloseStream
parameter_list|(
name|String
name|autoCloseStream
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoCloseStream"
argument_list|,
name|autoCloseStream
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to support stream representation as response from calling a          * REST service using the restlet producer. If the response is streaming          * then this option can be enabled to use an java.io.InputStream as the          * message body on the Camel Message body. If using this option you may          * want to enable the autoCloseStream option as well to ensure the input          * stream is closed when the Camel Exchange is done being routed.          * However if you need to read the stream outside a Camel route, you may          * need to not auto close the stream.          * The option is a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|streamRepresentation ( boolean streamRepresentation)
specifier|default
name|AdvancedRestletEndpointProducerBuilder
name|streamRepresentation
parameter_list|(
name|boolean
name|streamRepresentation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"streamRepresentation"
argument_list|,
name|streamRepresentation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to support stream representation as response from calling a          * REST service using the restlet producer. If the response is streaming          * then this option can be enabled to use an java.io.InputStream as the          * message body on the Camel Message body. If using this option you may          * want to enable the autoCloseStream option as well to ensure the input          * stream is closed when the Camel Exchange is done being routed.          * However if you need to read the stream outside a Camel route, you may          * need to not auto close the stream.          * The option will be converted to a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|streamRepresentation ( String streamRepresentation)
specifier|default
name|AdvancedRestletEndpointProducerBuilder
name|streamRepresentation
parameter_list|(
name|String
name|streamRepresentation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"streamRepresentation"
argument_list|,
name|streamRepresentation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedRestletEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedRestletEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option is a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedRestletEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedRestletEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom RestletBinding to bind between Restlet and Camel          * message.          * The option is a          *<code>org.apache.camel.component.restlet.RestletBinding</code> type.          * @group advanced          */
DECL|method|restletBinding ( Object restletBinding)
specifier|default
name|AdvancedRestletEndpointProducerBuilder
name|restletBinding
parameter_list|(
name|Object
name|restletBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletBinding"
argument_list|,
name|restletBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom RestletBinding to bind between Restlet and Camel          * message.          * The option will be converted to a          *<code>org.apache.camel.component.restlet.RestletBinding</code> type.          * @group advanced          */
DECL|method|restletBinding ( String restletBinding)
specifier|default
name|AdvancedRestletEndpointProducerBuilder
name|restletBinding
parameter_list|(
name|String
name|restletBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletBinding"
argument_list|,
name|restletBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>java.lang.Boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( Boolean synchronous)
specifier|default
name|AdvancedRestletEndpointProducerBuilder
name|synchronous
parameter_list|(
name|Boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>java.lang.Boolean</code>          * type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedRestletEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Restlet component.      */
DECL|interface|RestletEndpointBuilder
specifier|public
interface|interface
name|RestletEndpointBuilder
extends|extends
name|RestletEndpointConsumerBuilder
extends|,
name|RestletEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedRestletEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedRestletEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The protocol to use which is http or https.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|protocol (String protocol)
specifier|default
name|RestletEndpointBuilder
name|protocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"protocol"
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The hostname of the restlet service.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|host (String host)
specifier|default
name|RestletEndpointBuilder
name|host
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of the restlet service.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|port (int port)
specifier|default
name|RestletEndpointBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The port number of the restlet service.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|port (String port)
specifier|default
name|RestletEndpointBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The resource pattern such as /customer/{id}.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|uriPattern (String uriPattern)
specifier|default
name|RestletEndpointBuilder
name|uriPattern
parameter_list|(
name|String
name|uriPattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"uriPattern"
argument_list|,
name|uriPattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * On a producer endpoint, specifies the request method to use. On a          * consumer endpoint, specifies that the endpoint consumes only          * restletMethod requests.          * The option is a<code>org.restlet.data.Method</code> type.          * @group common          */
DECL|method|restletMethod (Object restletMethod)
specifier|default
name|RestletEndpointBuilder
name|restletMethod
parameter_list|(
name|Object
name|restletMethod
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletMethod"
argument_list|,
name|restletMethod
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * On a producer endpoint, specifies the request method to use. On a          * consumer endpoint, specifies that the endpoint consumes only          * restletMethod requests.          * The option will be converted to a          *<code>org.restlet.data.Method</code> type.          * @group common          */
DECL|method|restletMethod (String restletMethod)
specifier|default
name|RestletEndpointBuilder
name|restletMethod
parameter_list|(
name|String
name|restletMethod
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletMethod"
argument_list|,
name|restletMethod
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the security realms of restlet as a map.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.String&gt;</code> type.          * @group security          */
DECL|method|restletRealm ( Map<String, String> restletRealm)
specifier|default
name|RestletEndpointBuilder
name|restletRealm
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|restletRealm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletRealm"
argument_list|,
name|restletRealm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the security realms of restlet as a map.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>          * type.          * @group security          */
DECL|method|restletRealm (String restletRealm)
specifier|default
name|RestletEndpointBuilder
name|restletRealm
parameter_list|(
name|String
name|restletRealm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletRealm"
argument_list|,
name|restletRealm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|RestletEndpointBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|RestletEndpointBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Restlet component.      */
DECL|interface|AdvancedRestletEndpointBuilder
specifier|public
interface|interface
name|AdvancedRestletEndpointBuilder
extends|extends
name|AdvancedRestletEndpointConsumerBuilder
extends|,
name|AdvancedRestletEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|RestletEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|RestletEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedRestletEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedRestletEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option is a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedRestletEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedRestletEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom RestletBinding to bind between Restlet and Camel          * message.          * The option is a          *<code>org.apache.camel.component.restlet.RestletBinding</code> type.          * @group advanced          */
DECL|method|restletBinding ( Object restletBinding)
specifier|default
name|AdvancedRestletEndpointBuilder
name|restletBinding
parameter_list|(
name|Object
name|restletBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletBinding"
argument_list|,
name|restletBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom RestletBinding to bind between Restlet and Camel          * message.          * The option will be converted to a          *<code>org.apache.camel.component.restlet.RestletBinding</code> type.          * @group advanced          */
DECL|method|restletBinding ( String restletBinding)
specifier|default
name|AdvancedRestletEndpointBuilder
name|restletBinding
parameter_list|(
name|String
name|restletBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"restletBinding"
argument_list|,
name|restletBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>java.lang.Boolean</code> type.          * @group advanced          */
DECL|method|synchronous (Boolean synchronous)
specifier|default
name|AdvancedRestletEndpointBuilder
name|synchronous
parameter_list|(
name|Boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>java.lang.Boolean</code>          * type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedRestletEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Component for consuming and producing Restful resources using Restlet.      * Creates a builder to build endpoints for the Restlet component.      */
DECL|method|restlet (String path)
specifier|default
name|RestletEndpointBuilder
name|restlet
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|RestletEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|RestletEndpointBuilder
implements|,
name|AdvancedRestletEndpointBuilder
block|{
specifier|public
name|RestletEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"restlet"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|RestletEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

