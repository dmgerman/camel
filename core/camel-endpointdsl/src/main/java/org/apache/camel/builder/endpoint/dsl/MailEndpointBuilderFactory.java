begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|IdempotentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PollingConsumerPollStrategy
import|;
end_import

begin_comment
comment|/**  * To send or receive emails using imap/pop3 or smtp protocols.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|MailEndpointBuilderFactory
specifier|public
interface|interface
name|MailEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the IMAP component.      */
DECL|interface|MailEndpointConsumerBuilder
specifier|public
interface|interface
name|MailEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedMailEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|MailEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|MailEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the consumer should close the folder after polling. Setting          * this option to false and having disconnect=false as well, then the          * consumer keep the folder open between polls.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|closeFolder (boolean closeFolder)
specifier|default
name|MailEndpointConsumerBuilder
name|closeFolder
parameter_list|(
name|boolean
name|closeFolder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"closeFolder"
argument_list|,
name|closeFolder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the consumer should close the folder after polling. Setting          * this option to false and having disconnect=false as well, then the          * consumer keep the folder open between polls.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|closeFolder (String closeFolder)
specifier|default
name|MailEndpointConsumerBuilder
name|closeFolder
parameter_list|(
name|String
name|closeFolder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"closeFolder"
argument_list|,
name|closeFolder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * After processing a mail message, it can be copied to a mail folder          * with the given name. You can override this configuration value, with          * a header with the key copyTo, allowing you to copy messages to folder          * names configured at runtime.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|copyTo (String copyTo)
specifier|default
name|MailEndpointConsumerBuilder
name|copyTo
parameter_list|(
name|String
name|copyTo
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"copyTo"
argument_list|,
name|copyTo
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Deletes the messages after they have been processed. This is done by          * setting the DELETED flag on the mail message. If false, the SEEN flag          * is set instead. As of Camel 2.10 you can override this configuration          * option by setting a header with the key delete to determine if the          * mail should be deleted or not.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|delete (boolean delete)
specifier|default
name|MailEndpointConsumerBuilder
name|delete
parameter_list|(
name|boolean
name|delete
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delete"
argument_list|,
name|delete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Deletes the messages after they have been processed. This is done by          * setting the DELETED flag on the mail message. If false, the SEEN flag          * is set instead. As of Camel 2.10 you can override this configuration          * option by setting a header with the key delete to determine if the          * mail should be deleted or not.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|delete (String delete)
specifier|default
name|MailEndpointConsumerBuilder
name|delete
parameter_list|(
name|String
name|delete
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delete"
argument_list|,
name|delete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the consumer should disconnect after polling. If enabled this          * forces Camel to connect on each poll.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|disconnect (boolean disconnect)
specifier|default
name|MailEndpointConsumerBuilder
name|disconnect
parameter_list|(
name|boolean
name|disconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the consumer should disconnect after polling. If enabled this          * forces Camel to connect on each poll.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|disconnect (String disconnect)
specifier|default
name|MailEndpointConsumerBuilder
name|disconnect
parameter_list|(
name|String
name|disconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"disconnect"
argument_list|,
name|disconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the mail consumer cannot retrieve a given mail message, then this          * option allows to handle the caused exception by the consumer's error          * handler. By enable the bridge error handler on the consumer, then the          * Camel routing error handler can handle the exception instead. The          * default behavior would be the consumer throws an exception and no          * mails from the batch would be able to be routed by Camel.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|handleFailedMessage ( boolean handleFailedMessage)
specifier|default
name|MailEndpointConsumerBuilder
name|handleFailedMessage
parameter_list|(
name|boolean
name|handleFailedMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"handleFailedMessage"
argument_list|,
name|handleFailedMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the mail consumer cannot retrieve a given mail message, then this          * option allows to handle the caused exception by the consumer's error          * handler. By enable the bridge error handler on the consumer, then the          * Camel routing error handler can handle the exception instead. The          * default behavior would be the consumer throws an exception and no          * mails from the batch would be able to be routed by Camel.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|handleFailedMessage ( String handleFailedMessage)
specifier|default
name|MailEndpointConsumerBuilder
name|handleFailedMessage
parameter_list|(
name|String
name|handleFailedMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"handleFailedMessage"
argument_list|,
name|handleFailedMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the maximum number of messages to gather per poll. By          * default, no maximum is set. Can be used to set a limit of e.g. 1000          * to avoid downloading thousands of files when the server starts up.          * Set a value of 0 or negative to disable this option.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|maxMessagesPerPoll ( int maxMessagesPerPoll)
specifier|default
name|MailEndpointConsumerBuilder
name|maxMessagesPerPoll
parameter_list|(
name|int
name|maxMessagesPerPoll
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxMessagesPerPoll"
argument_list|,
name|maxMessagesPerPoll
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the maximum number of messages to gather per poll. By          * default, no maximum is set. Can be used to set a limit of e.g. 1000          * to avoid downloading thousands of files when the server starts up.          * Set a value of 0 or negative to disable this option.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|maxMessagesPerPoll ( String maxMessagesPerPoll)
specifier|default
name|MailEndpointConsumerBuilder
name|maxMessagesPerPoll
parameter_list|(
name|String
name|maxMessagesPerPoll
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxMessagesPerPoll"
argument_list|,
name|maxMessagesPerPoll
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option enables transparent MIME decoding and unfolding for mail          * headers.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|mimeDecodeHeaders ( boolean mimeDecodeHeaders)
specifier|default
name|MailEndpointConsumerBuilder
name|mimeDecodeHeaders
parameter_list|(
name|boolean
name|mimeDecodeHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mimeDecodeHeaders"
argument_list|,
name|mimeDecodeHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option enables transparent MIME decoding and unfolding for mail          * headers.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|mimeDecodeHeaders ( String mimeDecodeHeaders)
specifier|default
name|MailEndpointConsumerBuilder
name|mimeDecodeHeaders
parameter_list|(
name|String
name|mimeDecodeHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mimeDecodeHeaders"
argument_list|,
name|mimeDecodeHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will mark the javax.mail.Message as peeked before processing the mail          * message. This applies to IMAPMessage messages types only. By using          * peek the mail will not be eager marked as SEEN on the mail server,          * which allows us to rollback the mail message if there is an error          * processing in Camel.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|peek (boolean peek)
specifier|default
name|MailEndpointConsumerBuilder
name|peek
parameter_list|(
name|boolean
name|peek
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"peek"
argument_list|,
name|peek
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will mark the javax.mail.Message as peeked before processing the mail          * message. This applies to IMAPMessage messages types only. By using          * peek the mail will not be eager marked as SEEN on the mail server,          * which allows us to rollback the mail message if there is an error          * processing in Camel.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|peek (String peek)
specifier|default
name|MailEndpointConsumerBuilder
name|peek
parameter_list|(
name|String
name|peek
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"peek"
argument_list|,
name|peek
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( boolean sendEmptyMessageWhenIdle)
specifier|default
name|MailEndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|boolean
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( String sendEmptyMessageWhenIdle)
specifier|default
name|MailEndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|String
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the mail consumer cannot retrieve a given mail message, then this          * option allows to skip the message and move on to retrieve the next          * mail message. The default behavior would be the consumer throws an          * exception and no mails from the batch would be able to be routed by          * Camel.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|skipFailedMessage ( boolean skipFailedMessage)
specifier|default
name|MailEndpointConsumerBuilder
name|skipFailedMessage
parameter_list|(
name|boolean
name|skipFailedMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipFailedMessage"
argument_list|,
name|skipFailedMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the mail consumer cannot retrieve a given mail message, then this          * option allows to skip the message and move on to retrieve the next          * mail message. The default behavior would be the consumer throws an          * exception and no mails from the batch would be able to be routed by          * Camel.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|skipFailedMessage ( String skipFailedMessage)
specifier|default
name|MailEndpointConsumerBuilder
name|skipFailedMessage
parameter_list|(
name|String
name|skipFailedMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipFailedMessage"
argument_list|,
name|skipFailedMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to limit by unseen mails only.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|unseen (boolean unseen)
specifier|default
name|MailEndpointConsumerBuilder
name|unseen
parameter_list|(
name|boolean
name|unseen
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"unseen"
argument_list|,
name|unseen
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to limit by unseen mails only.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|unseen (String unseen)
specifier|default
name|MailEndpointConsumerBuilder
name|unseen
parameter_list|(
name|String
name|unseen
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"unseen"
argument_list|,
name|unseen
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable repository org.apache.camel.spi.IdempotentRepository          * which allows to cluster consuming from the same mailbox, and let the          * repository coordinate whether a mail message is valid for the          * consumer to process. By default no repository is in use.          *           * The option is a:          *<code>org.apache.camel.spi.IdempotentRepository</code> type.          *           * Group: filter          */
DECL|method|idempotentRepository ( IdempotentRepository idempotentRepository)
specifier|default
name|MailEndpointConsumerBuilder
name|idempotentRepository
parameter_list|(
name|IdempotentRepository
name|idempotentRepository
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"idempotentRepository"
argument_list|,
name|idempotentRepository
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable repository org.apache.camel.spi.IdempotentRepository          * which allows to cluster consuming from the same mailbox, and let the          * repository coordinate whether a mail message is valid for the          * consumer to process. By default no repository is in use.          *           * The option will be converted to a          *<code>org.apache.camel.spi.IdempotentRepository</code> type.          *           * Group: filter          */
DECL|method|idempotentRepository ( String idempotentRepository)
specifier|default
name|MailEndpointConsumerBuilder
name|idempotentRepository
parameter_list|(
name|String
name|idempotentRepository
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"idempotentRepository"
argument_list|,
name|idempotentRepository
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When using idempotent repository, then when the mail message has been          * successfully processed and is committed, should the message id be          * removed from the idempotent repository (default) or be kept in the          * repository. By default its assumed the message id is unique and has          * no value to be kept in the repository, because the mail message will          * be marked as seen/moved or deleted to prevent it from being consumed          * again. And therefore having the message id stored in the idempotent          * repository has little value. However this option allows to store the          * message id, for whatever reason you may have.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|idempotentRepositoryRemoveOnCommit ( boolean idempotentRepositoryRemoveOnCommit)
specifier|default
name|MailEndpointConsumerBuilder
name|idempotentRepositoryRemoveOnCommit
parameter_list|(
name|boolean
name|idempotentRepositoryRemoveOnCommit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"idempotentRepositoryRemoveOnCommit"
argument_list|,
name|idempotentRepositoryRemoveOnCommit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When using idempotent repository, then when the mail message has been          * successfully processed and is committed, should the message id be          * removed from the idempotent repository (default) or be kept in the          * repository. By default its assumed the message id is unique and has          * no value to be kept in the repository, because the mail message will          * be marked as seen/moved or deleted to prevent it from being consumed          * again. And therefore having the message id stored in the idempotent          * repository has little value. However this option allows to store the          * message id, for whatever reason you may have.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|idempotentRepositoryRemoveOnCommit ( String idempotentRepositoryRemoveOnCommit)
specifier|default
name|MailEndpointConsumerBuilder
name|idempotentRepositoryRemoveOnCommit
parameter_list|(
name|String
name|idempotentRepositoryRemoveOnCommit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"idempotentRepositoryRemoveOnCommit"
argument_list|,
name|idempotentRepositoryRemoveOnCommit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Refers to a javax.mail.search.SearchTerm which allows to filter mails          * based on search criteria such as subject, body, from, sent after a          * certain date etc.          *           * The option is a:<code>javax.mail.search.SearchTerm</code> type.          *           * Group: filter          */
DECL|method|searchTerm (Object searchTerm)
specifier|default
name|MailEndpointConsumerBuilder
name|searchTerm
parameter_list|(
name|Object
name|searchTerm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"searchTerm"
argument_list|,
name|searchTerm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Refers to a javax.mail.search.SearchTerm which allows to filter mails          * based on search criteria such as subject, body, from, sent after a          * certain date etc.          *           * The option will be converted to a          *<code>javax.mail.search.SearchTerm</code> type.          *           * Group: filter          */
DECL|method|searchTerm (String searchTerm)
specifier|default
name|MailEndpointConsumerBuilder
name|searchTerm
parameter_list|(
name|String
name|searchTerm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"searchTerm"
argument_list|,
name|searchTerm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( int backoffErrorThreshold)
specifier|default
name|MailEndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|int
name|backoffErrorThreshold
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( String backoffErrorThreshold)
specifier|default
name|MailEndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|String
name|backoffErrorThreshold
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( int backoffIdleThreshold)
specifier|default
name|MailEndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|int
name|backoffIdleThreshold
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( String backoffIdleThreshold)
specifier|default
name|MailEndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|String
name|backoffIdleThreshold
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( int backoffMultiplier)
specifier|default
name|MailEndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|int
name|backoffMultiplier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( String backoffMultiplier)
specifier|default
name|MailEndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|String
name|backoffMultiplier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll.          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (long delay)
specifier|default
name|MailEndpointConsumerBuilder
name|delay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (String delay)
specifier|default
name|MailEndpointConsumerBuilder
name|delay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy (boolean greedy)
specifier|default
name|MailEndpointConsumerBuilder
name|greedy
parameter_list|(
name|boolean
name|greedy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy (String greedy)
specifier|default
name|MailEndpointConsumerBuilder
name|greedy
parameter_list|(
name|String
name|greedy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay (long initialDelay)
specifier|default
name|MailEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|long
name|initialDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay (String initialDelay)
specifier|default
name|MailEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|String
name|initialDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option is a:<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( LoggingLevel runLoggingLevel)
specifier|default
name|MailEndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|LoggingLevel
name|runLoggingLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( String runLoggingLevel)
specifier|default
name|MailEndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|String
name|runLoggingLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option is a:          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( ScheduledExecutorService scheduledExecutorService)
specifier|default
name|MailEndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|ScheduledExecutorService
name|scheduledExecutorService
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option will be converted to a          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( String scheduledExecutorService)
specifier|default
name|MailEndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|String
name|scheduledExecutorService
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a cron scheduler from either camel-spring or camel-quartz          * component.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: scheduler          */
DECL|method|scheduler (String scheduler)
specifier|default
name|MailEndpointConsumerBuilder
name|scheduler
parameter_list|(
name|String
name|scheduler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scheduler"
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz, Spring based scheduler.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( Map<String, Object> schedulerProperties)
specifier|default
name|MailEndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|schedulerProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz, Spring based scheduler.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( String schedulerProperties)
specifier|default
name|MailEndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|String
name|schedulerProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler ( boolean startScheduler)
specifier|default
name|MailEndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|boolean
name|startScheduler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler (String startScheduler)
specifier|default
name|MailEndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|String
name|startScheduler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option is a:<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit (TimeUnit timeUnit)
specifier|default
name|MailEndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option will be converted to a          *<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit (String timeUnit)
specifier|default
name|MailEndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|String
name|timeUnit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay (boolean useFixedDelay)
specifier|default
name|MailEndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|boolean
name|useFixedDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay (String useFixedDelay)
specifier|default
name|MailEndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|String
name|useFixedDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sorting order for messages. Only natively supported for IMAP.          * Emulated to some degree when using POP3 or when IMAP server does not          * have the SORT capability.          *           * The option is a:<code>com.sun.mail.imap.SortTerm[]</code> type.          *           * Group: sort          */
DECL|method|sortTerm (Object[] sortTerm)
specifier|default
name|MailEndpointConsumerBuilder
name|sortTerm
parameter_list|(
name|Object
index|[]
name|sortTerm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sortTerm"
argument_list|,
name|sortTerm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sorting order for messages. Only natively supported for IMAP.          * Emulated to some degree when using POP3 or when IMAP server does not          * have the SORT capability.          *           * The option will be converted to a          *<code>com.sun.mail.imap.SortTerm[]</code> type.          *           * Group: sort          */
DECL|method|sortTerm (String sortTerm)
specifier|default
name|MailEndpointConsumerBuilder
name|sortTerm
parameter_list|(
name|String
name|sortTerm
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sortTerm"
argument_list|,
name|sortTerm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The password for login.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|MailEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|MailEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|MailEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The username for login.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|MailEndpointConsumerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the IMAP component.      */
DECL|interface|AdvancedMailEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedMailEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|MailEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|MailEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum number of messages to consume during a poll. This          * can be used to avoid overloading a mail server, if a mailbox folder          * contains a lot of messages. Default value of -1 means no fetch size          * and all messages will be consumed. Setting the value to 0 is a          * special corner case, where Camel will not consume any messages at          * all.          *           * The option is a:<code>int</code> type.          *           * Group: consumer (advanced)          */
DECL|method|fetchSize (int fetchSize)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|fetchSize
parameter_list|(
name|int
name|fetchSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fetchSize"
argument_list|,
name|fetchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum number of messages to consume during a poll. This          * can be used to avoid overloading a mail server, if a mailbox folder          * contains a lot of messages. Default value of -1 means no fetch size          * and all messages will be consumed. Setting the value to 0 is a          * special corner case, where Camel will not consume any messages at          * all.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer (advanced)          */
DECL|method|fetchSize (String fetchSize)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|fetchSize
parameter_list|(
name|String
name|fetchSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fetchSize"
argument_list|,
name|fetchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The folder to poll.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer (advanced)          */
DECL|method|folderName (String folderName)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|folderName
parameter_list|(
name|String
name|folderName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"folderName"
argument_list|,
name|folderName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable MailUidGenerator that allows to use custom logic to          * generate UUID of the mail message.          *           * The option is a:          *<code>org.apache.camel.component.mail.MailUidGenerator</code> type.          *           * Group: consumer (advanced)          */
DECL|method|mailUidGenerator ( Object mailUidGenerator)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|mailUidGenerator
parameter_list|(
name|Object
name|mailUidGenerator
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mailUidGenerator"
argument_list|,
name|mailUidGenerator
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable MailUidGenerator that allows to use custom logic to          * generate UUID of the mail message.          *           * The option will be converted to a          *<code>org.apache.camel.component.mail.MailUidGenerator</code> type.          *           * Group: consumer (advanced)          */
DECL|method|mailUidGenerator ( String mailUidGenerator)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|mailUidGenerator
parameter_list|(
name|String
name|mailUidGenerator
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mailUidGenerator"
argument_list|,
name|mailUidGenerator
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether Camel should map the received mail message to Camel          * body/headers/attachments. If set to true, the body of the mail          * message is mapped to the body of the Camel IN message, the mail          * headers are mapped to IN headers, and the attachments to Camel IN          * attachment message. If this option is set to false then the IN          * message contains a raw javax.mail.Message. You can retrieve this raw          * message by calling          * exchange.getIn().getBody(javax.mail.Message.class).          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|mapMailMessage ( boolean mapMailMessage)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|mapMailMessage
parameter_list|(
name|boolean
name|mapMailMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mapMailMessage"
argument_list|,
name|mapMailMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether Camel should map the received mail message to Camel          * body/headers/attachments. If set to true, the body of the mail          * message is mapped to the body of the Camel IN message, the mail          * headers are mapped to IN headers, and the attachments to Camel IN          * attachment message. If this option is set to false then the IN          * message contains a raw javax.mail.Message. You can retrieve this raw          * message by calling          * exchange.getIn().getBody(javax.mail.Message.class).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|mapMailMessage ( String mapMailMessage)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|mapMailMessage
parameter_list|(
name|String
name|mapMailMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mapMailMessage"
argument_list|,
name|mapMailMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option is a:          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( PollingConsumerPollStrategy pollStrategy)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|PollingConsumerPollStrategy
name|pollStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option will be converted to a          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( String pollStrategy)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|String
name|pollStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Refers to an MailBoxPostProcessAction for doing post processing tasks          * on the mailbox once the normal processing ended.          *           * The option is a:          *<code>org.apache.camel.component.mail.MailBoxPostProcessAction</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|postProcessAction ( Object postProcessAction)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|postProcessAction
parameter_list|(
name|Object
name|postProcessAction
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"postProcessAction"
argument_list|,
name|postProcessAction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Refers to an MailBoxPostProcessAction for doing post processing tasks          * on the mailbox once the normal processing ended.          *           * The option will be converted to a          *<code>org.apache.camel.component.mail.MailBoxPostProcessAction</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|postProcessAction ( String postProcessAction)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|postProcessAction
parameter_list|(
name|String
name|postProcessAction
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"postProcessAction"
argument_list|,
name|postProcessAction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets additional java mail properties, that will append/override any          * default properties that is set based on all the other options. This          * is useful if you need to add some special options but want to keep          * the others as is.          *           * The option is a:<code>java.util.Properties</code> type.          *           * Group: advanced          */
DECL|method|additionalJavaMailProperties ( Properties additionalJavaMailProperties)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|additionalJavaMailProperties
parameter_list|(
name|Properties
name|additionalJavaMailProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"additionalJavaMailProperties"
argument_list|,
name|additionalJavaMailProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets additional java mail properties, that will append/override any          * default properties that is set based on all the other options. This          * is useful if you need to add some special options but want to keep          * the others as is.          *           * The option will be converted to a<code>java.util.Properties</code>          * type.          *           * Group: advanced          */
DECL|method|additionalJavaMailProperties ( String additionalJavaMailProperties)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|additionalJavaMailProperties
parameter_list|(
name|String
name|additionalJavaMailProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"additionalJavaMailProperties"
argument_list|,
name|additionalJavaMailProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the key to an IN message header that contains an          * alternative email body. For example, if you send emails in text/html          * format and want to provide an alternative mail body for non-HTML          * email clients, set the alternative mail body with this key as a          * header.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|alternativeBodyHeader ( String alternativeBodyHeader)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|alternativeBodyHeader
parameter_list|(
name|String
name|alternativeBodyHeader
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"alternativeBodyHeader"
argument_list|,
name|alternativeBodyHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom AttachmentsContentTransferEncodingResolver to resolve          * what content-type-encoding to use for attachments.          *           * The option is a:          *<code>org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver</code> type.          *           * Group: advanced          */
DECL|method|attachmentsContentTransferEncodingResolver ( Object attachmentsContentTransferEncodingResolver)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|attachmentsContentTransferEncodingResolver
parameter_list|(
name|Object
name|attachmentsContentTransferEncodingResolver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"attachmentsContentTransferEncodingResolver"
argument_list|,
name|attachmentsContentTransferEncodingResolver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom AttachmentsContentTransferEncodingResolver to resolve          * what content-type-encoding to use for attachments.          *           * The option will be converted to a          *<code>org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver</code> type.          *           * Group: advanced          */
DECL|method|attachmentsContentTransferEncodingResolver ( String attachmentsContentTransferEncodingResolver)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|attachmentsContentTransferEncodingResolver
parameter_list|(
name|String
name|attachmentsContentTransferEncodingResolver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"attachmentsContentTransferEncodingResolver"
argument_list|,
name|attachmentsContentTransferEncodingResolver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the binding used to convert from a Camel message to and from a          * Mail message.          *           * The option is a:          *<code>org.apache.camel.component.mail.MailBinding</code> type.          *           * Group: advanced          */
DECL|method|binding (Object binding)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|binding
parameter_list|(
name|Object
name|binding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"binding"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the binding used to convert from a Camel message to and from a          * Mail message.          *           * The option will be converted to a          *<code>org.apache.camel.component.mail.MailBinding</code> type.          *           * Group: advanced          */
DECL|method|binding (String binding)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|binding
parameter_list|(
name|String
name|binding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"binding"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The connection timeout in milliseconds.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( int connectionTimeout)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|connectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The connection timeout in milliseconds.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( String connectionTimeout)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The mail message content type. Use text/html for HTML mails.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|contentType ( String contentType)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|contentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"contentType"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Resolver to determine Content-Type for file attachments.          *           * The option is a:          *<code>org.apache.camel.component.mail.ContentTypeResolver</code>          * type.          *           * Group: advanced          */
DECL|method|contentTypeResolver ( Object contentTypeResolver)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|contentTypeResolver
parameter_list|(
name|Object
name|contentTypeResolver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"contentTypeResolver"
argument_list|,
name|contentTypeResolver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Resolver to determine Content-Type for file attachments.          *           * The option will be converted to a          *<code>org.apache.camel.component.mail.ContentTypeResolver</code>          * type.          *           * Group: advanced          */
DECL|method|contentTypeResolver ( String contentTypeResolver)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|contentTypeResolver
parameter_list|(
name|String
name|contentTypeResolver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"contentTypeResolver"
argument_list|,
name|contentTypeResolver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable debug mode on the underlying mail framework. The SUN Mail          * framework logs the debug messages to System.out by default.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|debugMode (boolean debugMode)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|debugMode
parameter_list|(
name|boolean
name|debugMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"debugMode"
argument_list|,
name|debugMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable debug mode on the underlying mail framework. The SUN Mail          * framework logs the debug messages to System.out by default.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|debugMode (String debugMode)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|debugMode
parameter_list|(
name|String
name|debugMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"debugMode"
argument_list|,
name|debugMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter          * headers.          *           * The option is a:          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter          * headers.          *           * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to let Camel ignore unsupported charset in the local JVM when          * sending mails. If the charset is unsupported then charset=XXX (where          * XXX represents the unsupported charset) is removed from the          * content-type and it relies on the platform default instead.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|ignoreUnsupportedCharset ( boolean ignoreUnsupportedCharset)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|ignoreUnsupportedCharset
parameter_list|(
name|boolean
name|ignoreUnsupportedCharset
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ignoreUnsupportedCharset"
argument_list|,
name|ignoreUnsupportedCharset
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to let Camel ignore unsupported charset in the local JVM when          * sending mails. If the charset is unsupported then charset=XXX (where          * XXX represents the unsupported charset) is removed from the          * content-type and it relies on the platform default instead.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|ignoreUnsupportedCharset ( String ignoreUnsupportedCharset)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|ignoreUnsupportedCharset
parameter_list|(
name|String
name|ignoreUnsupportedCharset
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ignoreUnsupportedCharset"
argument_list|,
name|ignoreUnsupportedCharset
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to let Camel ignore unsupported charset in the local JVM when          * sending mails. If the charset is unsupported then charset=XXX (where          * XXX represents the unsupported charset) is removed from the          * content-type and it relies on the platform default instead.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|ignoreUriScheme ( boolean ignoreUriScheme)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|ignoreUriScheme
parameter_list|(
name|boolean
name|ignoreUriScheme
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ignoreUriScheme"
argument_list|,
name|ignoreUriScheme
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to let Camel ignore unsupported charset in the local JVM when          * sending mails. If the charset is unsupported then charset=XXX (where          * XXX represents the unsupported charset) is removed from the          * content-type and it relies on the platform default instead.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|ignoreUriScheme ( String ignoreUriScheme)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|ignoreUriScheme
parameter_list|(
name|String
name|ignoreUriScheme
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ignoreUriScheme"
argument_list|,
name|ignoreUriScheme
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the mail session that camel should use for all mail          * interactions. Useful in scenarios where mail sessions are created and          * managed by some other resource, such as a JavaEE container. When          * using a custom mail session, then the hostname and port from the mail          * session will be used (if configured on the session).          *           * The option is a:<code>javax.mail.Session</code> type.          *           * Group: advanced          */
DECL|method|session (Object session)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|session
parameter_list|(
name|Object
name|session
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"session"
argument_list|,
name|session
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the mail session that camel should use for all mail          * interactions. Useful in scenarios where mail sessions are created and          * managed by some other resource, such as a JavaEE container. When          * using a custom mail session, then the hostname and port from the mail          * session will be used (if configured on the session).          *           * The option will be converted to a<code>javax.mail.Session</code>          * type.          *           * Group: advanced          */
DECL|method|session (String session)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|session
parameter_list|(
name|String
name|session
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"session"
argument_list|,
name|session
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use disposition inline or attachment.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|useInlineAttachments ( boolean useInlineAttachments)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|useInlineAttachments
parameter_list|(
name|boolean
name|useInlineAttachments
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useInlineAttachments"
argument_list|,
name|useInlineAttachments
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use disposition inline or attachment.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|useInlineAttachments ( String useInlineAttachments)
specifier|default
name|AdvancedMailEndpointConsumerBuilder
name|useInlineAttachments
parameter_list|(
name|String
name|useInlineAttachments
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useInlineAttachments"
argument_list|,
name|useInlineAttachments
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the IMAP component.      */
DECL|interface|MailEndpointProducerBuilder
specifier|public
interface|interface
name|MailEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedMailEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets the BCC email address. Separate multiple email addresses with          * comma.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|bcc (String bcc)
specifier|default
name|MailEndpointProducerBuilder
name|bcc
parameter_list|(
name|String
name|bcc
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bcc"
argument_list|,
name|bcc
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the CC email address. Separate multiple email addresses with          * comma.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|cc (String cc)
specifier|default
name|MailEndpointProducerBuilder
name|cc
parameter_list|(
name|String
name|cc
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cc"
argument_list|,
name|cc
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The from email address.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|from (String from)
specifier|default
name|MailEndpointProducerBuilder
name|from
parameter_list|(
name|String
name|from
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"from"
argument_list|,
name|from
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|MailEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|MailEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Reply-To recipients (the receivers of the response mail).          * Separate multiple email addresses with a comma.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|replyTo (String replyTo)
specifier|default
name|MailEndpointProducerBuilder
name|replyTo
parameter_list|(
name|String
name|replyTo
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"replyTo"
argument_list|,
name|replyTo
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Subject of the message being sent. Note: Setting the subject in          * the header takes precedence over this option.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|subject (String subject)
specifier|default
name|MailEndpointProducerBuilder
name|subject
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"subject"
argument_list|,
name|subject
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the To email address. Separate multiple email addresses with          * comma.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|to (String to)
specifier|default
name|MailEndpointProducerBuilder
name|to
parameter_list|(
name|String
name|to
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"to"
argument_list|,
name|to
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The password for login.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|MailEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|MailEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|MailEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The username for login.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|MailEndpointProducerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the IMAP component.      */
DECL|interface|AdvancedMailEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedMailEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|MailEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|MailEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To use a custom org.apache.camel.component.mail.JavaMailSender for          * sending emails.          *           * The option is a:          *<code>org.apache.camel.component.mail.JavaMailSender</code> type.          *           * Group: producer (advanced)          */
DECL|method|javaMailSender ( Object javaMailSender)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|javaMailSender
parameter_list|(
name|Object
name|javaMailSender
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"javaMailSender"
argument_list|,
name|javaMailSender
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom org.apache.camel.component.mail.JavaMailSender for          * sending emails.          *           * The option will be converted to a          *<code>org.apache.camel.component.mail.JavaMailSender</code> type.          *           * Group: producer (advanced)          */
DECL|method|javaMailSender ( String javaMailSender)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|javaMailSender
parameter_list|(
name|String
name|javaMailSender
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"javaMailSender"
argument_list|,
name|javaMailSender
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets additional java mail properties, that will append/override any          * default properties that is set based on all the other options. This          * is useful if you need to add some special options but want to keep          * the others as is.          *           * The option is a:<code>java.util.Properties</code> type.          *           * Group: advanced          */
DECL|method|additionalJavaMailProperties ( Properties additionalJavaMailProperties)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|additionalJavaMailProperties
parameter_list|(
name|Properties
name|additionalJavaMailProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"additionalJavaMailProperties"
argument_list|,
name|additionalJavaMailProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets additional java mail properties, that will append/override any          * default properties that is set based on all the other options. This          * is useful if you need to add some special options but want to keep          * the others as is.          *           * The option will be converted to a<code>java.util.Properties</code>          * type.          *           * Group: advanced          */
DECL|method|additionalJavaMailProperties ( String additionalJavaMailProperties)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|additionalJavaMailProperties
parameter_list|(
name|String
name|additionalJavaMailProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"additionalJavaMailProperties"
argument_list|,
name|additionalJavaMailProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the key to an IN message header that contains an          * alternative email body. For example, if you send emails in text/html          * format and want to provide an alternative mail body for non-HTML          * email clients, set the alternative mail body with this key as a          * header.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|alternativeBodyHeader ( String alternativeBodyHeader)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|alternativeBodyHeader
parameter_list|(
name|String
name|alternativeBodyHeader
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"alternativeBodyHeader"
argument_list|,
name|alternativeBodyHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom AttachmentsContentTransferEncodingResolver to resolve          * what content-type-encoding to use for attachments.          *           * The option is a:          *<code>org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver</code> type.          *           * Group: advanced          */
DECL|method|attachmentsContentTransferEncodingResolver ( Object attachmentsContentTransferEncodingResolver)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|attachmentsContentTransferEncodingResolver
parameter_list|(
name|Object
name|attachmentsContentTransferEncodingResolver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"attachmentsContentTransferEncodingResolver"
argument_list|,
name|attachmentsContentTransferEncodingResolver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom AttachmentsContentTransferEncodingResolver to resolve          * what content-type-encoding to use for attachments.          *           * The option will be converted to a          *<code>org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver</code> type.          *           * Group: advanced          */
DECL|method|attachmentsContentTransferEncodingResolver ( String attachmentsContentTransferEncodingResolver)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|attachmentsContentTransferEncodingResolver
parameter_list|(
name|String
name|attachmentsContentTransferEncodingResolver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"attachmentsContentTransferEncodingResolver"
argument_list|,
name|attachmentsContentTransferEncodingResolver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the binding used to convert from a Camel message to and from a          * Mail message.          *           * The option is a:          *<code>org.apache.camel.component.mail.MailBinding</code> type.          *           * Group: advanced          */
DECL|method|binding (Object binding)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|binding
parameter_list|(
name|Object
name|binding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"binding"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the binding used to convert from a Camel message to and from a          * Mail message.          *           * The option will be converted to a          *<code>org.apache.camel.component.mail.MailBinding</code> type.          *           * Group: advanced          */
DECL|method|binding (String binding)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|binding
parameter_list|(
name|String
name|binding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"binding"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The connection timeout in milliseconds.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( int connectionTimeout)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|connectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The connection timeout in milliseconds.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( String connectionTimeout)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The mail message content type. Use text/html for HTML mails.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|contentType ( String contentType)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|contentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"contentType"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Resolver to determine Content-Type for file attachments.          *           * The option is a:          *<code>org.apache.camel.component.mail.ContentTypeResolver</code>          * type.          *           * Group: advanced          */
DECL|method|contentTypeResolver ( Object contentTypeResolver)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|contentTypeResolver
parameter_list|(
name|Object
name|contentTypeResolver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"contentTypeResolver"
argument_list|,
name|contentTypeResolver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Resolver to determine Content-Type for file attachments.          *           * The option will be converted to a          *<code>org.apache.camel.component.mail.ContentTypeResolver</code>          * type.          *           * Group: advanced          */
DECL|method|contentTypeResolver ( String contentTypeResolver)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|contentTypeResolver
parameter_list|(
name|String
name|contentTypeResolver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"contentTypeResolver"
argument_list|,
name|contentTypeResolver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable debug mode on the underlying mail framework. The SUN Mail          * framework logs the debug messages to System.out by default.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|debugMode (boolean debugMode)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|debugMode
parameter_list|(
name|boolean
name|debugMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"debugMode"
argument_list|,
name|debugMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable debug mode on the underlying mail framework. The SUN Mail          * framework logs the debug messages to System.out by default.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|debugMode (String debugMode)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|debugMode
parameter_list|(
name|String
name|debugMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"debugMode"
argument_list|,
name|debugMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter          * headers.          *           * The option is a:          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter          * headers.          *           * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to let Camel ignore unsupported charset in the local JVM when          * sending mails. If the charset is unsupported then charset=XXX (where          * XXX represents the unsupported charset) is removed from the          * content-type and it relies on the platform default instead.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|ignoreUnsupportedCharset ( boolean ignoreUnsupportedCharset)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|ignoreUnsupportedCharset
parameter_list|(
name|boolean
name|ignoreUnsupportedCharset
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ignoreUnsupportedCharset"
argument_list|,
name|ignoreUnsupportedCharset
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to let Camel ignore unsupported charset in the local JVM when          * sending mails. If the charset is unsupported then charset=XXX (where          * XXX represents the unsupported charset) is removed from the          * content-type and it relies on the platform default instead.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|ignoreUnsupportedCharset ( String ignoreUnsupportedCharset)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|ignoreUnsupportedCharset
parameter_list|(
name|String
name|ignoreUnsupportedCharset
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ignoreUnsupportedCharset"
argument_list|,
name|ignoreUnsupportedCharset
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to let Camel ignore unsupported charset in the local JVM when          * sending mails. If the charset is unsupported then charset=XXX (where          * XXX represents the unsupported charset) is removed from the          * content-type and it relies on the platform default instead.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|ignoreUriScheme ( boolean ignoreUriScheme)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|ignoreUriScheme
parameter_list|(
name|boolean
name|ignoreUriScheme
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ignoreUriScheme"
argument_list|,
name|ignoreUriScheme
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to let Camel ignore unsupported charset in the local JVM when          * sending mails. If the charset is unsupported then charset=XXX (where          * XXX represents the unsupported charset) is removed from the          * content-type and it relies on the platform default instead.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|ignoreUriScheme ( String ignoreUriScheme)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|ignoreUriScheme
parameter_list|(
name|String
name|ignoreUriScheme
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ignoreUriScheme"
argument_list|,
name|ignoreUriScheme
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the mail session that camel should use for all mail          * interactions. Useful in scenarios where mail sessions are created and          * managed by some other resource, such as a JavaEE container. When          * using a custom mail session, then the hostname and port from the mail          * session will be used (if configured on the session).          *           * The option is a:<code>javax.mail.Session</code> type.          *           * Group: advanced          */
DECL|method|session (Object session)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|session
parameter_list|(
name|Object
name|session
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"session"
argument_list|,
name|session
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the mail session that camel should use for all mail          * interactions. Useful in scenarios where mail sessions are created and          * managed by some other resource, such as a JavaEE container. When          * using a custom mail session, then the hostname and port from the mail          * session will be used (if configured on the session).          *           * The option will be converted to a<code>javax.mail.Session</code>          * type.          *           * Group: advanced          */
DECL|method|session (String session)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|session
parameter_list|(
name|String
name|session
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"session"
argument_list|,
name|session
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use disposition inline or attachment.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|useInlineAttachments ( boolean useInlineAttachments)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|useInlineAttachments
parameter_list|(
name|boolean
name|useInlineAttachments
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useInlineAttachments"
argument_list|,
name|useInlineAttachments
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use disposition inline or attachment.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|useInlineAttachments ( String useInlineAttachments)
specifier|default
name|AdvancedMailEndpointProducerBuilder
name|useInlineAttachments
parameter_list|(
name|String
name|useInlineAttachments
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useInlineAttachments"
argument_list|,
name|useInlineAttachments
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the IMAP component.      */
DECL|interface|MailEndpointBuilder
specifier|public
interface|interface
name|MailEndpointBuilder
extends|extends
name|MailEndpointConsumerBuilder
extends|,
name|MailEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedMailEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedMailEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The password for login.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|MailEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|MailEndpointBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|MailEndpointBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The username for login.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|MailEndpointBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the IMAP component.      */
DECL|interface|AdvancedMailEndpointBuilder
specifier|public
interface|interface
name|AdvancedMailEndpointBuilder
extends|extends
name|AdvancedMailEndpointConsumerBuilder
extends|,
name|AdvancedMailEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|MailEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|MailEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets additional java mail properties, that will append/override any          * default properties that is set based on all the other options. This          * is useful if you need to add some special options but want to keep          * the others as is.          *           * The option is a:<code>java.util.Properties</code> type.          *           * Group: advanced          */
DECL|method|additionalJavaMailProperties ( Properties additionalJavaMailProperties)
specifier|default
name|AdvancedMailEndpointBuilder
name|additionalJavaMailProperties
parameter_list|(
name|Properties
name|additionalJavaMailProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"additionalJavaMailProperties"
argument_list|,
name|additionalJavaMailProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets additional java mail properties, that will append/override any          * default properties that is set based on all the other options. This          * is useful if you need to add some special options but want to keep          * the others as is.          *           * The option will be converted to a<code>java.util.Properties</code>          * type.          *           * Group: advanced          */
DECL|method|additionalJavaMailProperties ( String additionalJavaMailProperties)
specifier|default
name|AdvancedMailEndpointBuilder
name|additionalJavaMailProperties
parameter_list|(
name|String
name|additionalJavaMailProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"additionalJavaMailProperties"
argument_list|,
name|additionalJavaMailProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the key to an IN message header that contains an          * alternative email body. For example, if you send emails in text/html          * format and want to provide an alternative mail body for non-HTML          * email clients, set the alternative mail body with this key as a          * header.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|alternativeBodyHeader ( String alternativeBodyHeader)
specifier|default
name|AdvancedMailEndpointBuilder
name|alternativeBodyHeader
parameter_list|(
name|String
name|alternativeBodyHeader
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"alternativeBodyHeader"
argument_list|,
name|alternativeBodyHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom AttachmentsContentTransferEncodingResolver to resolve          * what content-type-encoding to use for attachments.          *           * The option is a:          *<code>org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver</code> type.          *           * Group: advanced          */
DECL|method|attachmentsContentTransferEncodingResolver ( Object attachmentsContentTransferEncodingResolver)
specifier|default
name|AdvancedMailEndpointBuilder
name|attachmentsContentTransferEncodingResolver
parameter_list|(
name|Object
name|attachmentsContentTransferEncodingResolver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"attachmentsContentTransferEncodingResolver"
argument_list|,
name|attachmentsContentTransferEncodingResolver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom AttachmentsContentTransferEncodingResolver to resolve          * what content-type-encoding to use for attachments.          *           * The option will be converted to a          *<code>org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver</code> type.          *           * Group: advanced          */
DECL|method|attachmentsContentTransferEncodingResolver ( String attachmentsContentTransferEncodingResolver)
specifier|default
name|AdvancedMailEndpointBuilder
name|attachmentsContentTransferEncodingResolver
parameter_list|(
name|String
name|attachmentsContentTransferEncodingResolver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"attachmentsContentTransferEncodingResolver"
argument_list|,
name|attachmentsContentTransferEncodingResolver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedMailEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedMailEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the binding used to convert from a Camel message to and from a          * Mail message.          *           * The option is a:          *<code>org.apache.camel.component.mail.MailBinding</code> type.          *           * Group: advanced          */
DECL|method|binding (Object binding)
specifier|default
name|AdvancedMailEndpointBuilder
name|binding
parameter_list|(
name|Object
name|binding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"binding"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the binding used to convert from a Camel message to and from a          * Mail message.          *           * The option will be converted to a          *<code>org.apache.camel.component.mail.MailBinding</code> type.          *           * Group: advanced          */
DECL|method|binding (String binding)
specifier|default
name|AdvancedMailEndpointBuilder
name|binding
parameter_list|(
name|String
name|binding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"binding"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The connection timeout in milliseconds.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( int connectionTimeout)
specifier|default
name|AdvancedMailEndpointBuilder
name|connectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The connection timeout in milliseconds.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|connectionTimeout ( String connectionTimeout)
specifier|default
name|AdvancedMailEndpointBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The mail message content type. Use text/html for HTML mails.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|contentType (String contentType)
specifier|default
name|AdvancedMailEndpointBuilder
name|contentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"contentType"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Resolver to determine Content-Type for file attachments.          *           * The option is a:          *<code>org.apache.camel.component.mail.ContentTypeResolver</code>          * type.          *           * Group: advanced          */
DECL|method|contentTypeResolver ( Object contentTypeResolver)
specifier|default
name|AdvancedMailEndpointBuilder
name|contentTypeResolver
parameter_list|(
name|Object
name|contentTypeResolver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"contentTypeResolver"
argument_list|,
name|contentTypeResolver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Resolver to determine Content-Type for file attachments.          *           * The option will be converted to a          *<code>org.apache.camel.component.mail.ContentTypeResolver</code>          * type.          *           * Group: advanced          */
DECL|method|contentTypeResolver ( String contentTypeResolver)
specifier|default
name|AdvancedMailEndpointBuilder
name|contentTypeResolver
parameter_list|(
name|String
name|contentTypeResolver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"contentTypeResolver"
argument_list|,
name|contentTypeResolver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable debug mode on the underlying mail framework. The SUN Mail          * framework logs the debug messages to System.out by default.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|debugMode (boolean debugMode)
specifier|default
name|AdvancedMailEndpointBuilder
name|debugMode
parameter_list|(
name|boolean
name|debugMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"debugMode"
argument_list|,
name|debugMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable debug mode on the underlying mail framework. The SUN Mail          * framework logs the debug messages to System.out by default.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|debugMode (String debugMode)
specifier|default
name|AdvancedMailEndpointBuilder
name|debugMode
parameter_list|(
name|String
name|debugMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"debugMode"
argument_list|,
name|debugMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter          * headers.          *           * The option is a:          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedMailEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter          * headers.          *           * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedMailEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to let Camel ignore unsupported charset in the local JVM when          * sending mails. If the charset is unsupported then charset=XXX (where          * XXX represents the unsupported charset) is removed from the          * content-type and it relies on the platform default instead.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|ignoreUnsupportedCharset ( boolean ignoreUnsupportedCharset)
specifier|default
name|AdvancedMailEndpointBuilder
name|ignoreUnsupportedCharset
parameter_list|(
name|boolean
name|ignoreUnsupportedCharset
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ignoreUnsupportedCharset"
argument_list|,
name|ignoreUnsupportedCharset
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to let Camel ignore unsupported charset in the local JVM when          * sending mails. If the charset is unsupported then charset=XXX (where          * XXX represents the unsupported charset) is removed from the          * content-type and it relies on the platform default instead.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|ignoreUnsupportedCharset ( String ignoreUnsupportedCharset)
specifier|default
name|AdvancedMailEndpointBuilder
name|ignoreUnsupportedCharset
parameter_list|(
name|String
name|ignoreUnsupportedCharset
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ignoreUnsupportedCharset"
argument_list|,
name|ignoreUnsupportedCharset
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to let Camel ignore unsupported charset in the local JVM when          * sending mails. If the charset is unsupported then charset=XXX (where          * XXX represents the unsupported charset) is removed from the          * content-type and it relies on the platform default instead.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|ignoreUriScheme ( boolean ignoreUriScheme)
specifier|default
name|AdvancedMailEndpointBuilder
name|ignoreUriScheme
parameter_list|(
name|boolean
name|ignoreUriScheme
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ignoreUriScheme"
argument_list|,
name|ignoreUriScheme
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to let Camel ignore unsupported charset in the local JVM when          * sending mails. If the charset is unsupported then charset=XXX (where          * XXX represents the unsupported charset) is removed from the          * content-type and it relies on the platform default instead.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|ignoreUriScheme ( String ignoreUriScheme)
specifier|default
name|AdvancedMailEndpointBuilder
name|ignoreUriScheme
parameter_list|(
name|String
name|ignoreUriScheme
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ignoreUriScheme"
argument_list|,
name|ignoreUriScheme
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the mail session that camel should use for all mail          * interactions. Useful in scenarios where mail sessions are created and          * managed by some other resource, such as a JavaEE container. When          * using a custom mail session, then the hostname and port from the mail          * session will be used (if configured on the session).          *           * The option is a:<code>javax.mail.Session</code> type.          *           * Group: advanced          */
DECL|method|session (Object session)
specifier|default
name|AdvancedMailEndpointBuilder
name|session
parameter_list|(
name|Object
name|session
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"session"
argument_list|,
name|session
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the mail session that camel should use for all mail          * interactions. Useful in scenarios where mail sessions are created and          * managed by some other resource, such as a JavaEE container. When          * using a custom mail session, then the hostname and port from the mail          * session will be used (if configured on the session).          *           * The option will be converted to a<code>javax.mail.Session</code>          * type.          *           * Group: advanced          */
DECL|method|session (String session)
specifier|default
name|AdvancedMailEndpointBuilder
name|session
parameter_list|(
name|String
name|session
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"session"
argument_list|,
name|session
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedMailEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedMailEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use disposition inline or attachment.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|useInlineAttachments ( boolean useInlineAttachments)
specifier|default
name|AdvancedMailEndpointBuilder
name|useInlineAttachments
parameter_list|(
name|boolean
name|useInlineAttachments
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useInlineAttachments"
argument_list|,
name|useInlineAttachments
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use disposition inline or attachment.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|useInlineAttachments ( String useInlineAttachments)
specifier|default
name|AdvancedMailEndpointBuilder
name|useInlineAttachments
parameter_list|(
name|String
name|useInlineAttachments
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useInlineAttachments"
argument_list|,
name|useInlineAttachments
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * IMAP (camel-mail)      * To send or receive emails using imap/pop3 or smtp protocols.      *       * Category: mail      * Available as of version: 1.0      * Maven coordinates: org.apache.camel:camel-mail      *       * Syntax:<code>imap:host:port</code>      *       * Path parameter: host (required)      * The mail server host name      *       * Path parameter: port      * The port number of the mail server      */
DECL|method|mail (String path)
specifier|default
name|MailEndpointBuilder
name|mail
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|MailEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|MailEndpointBuilder
implements|,
name|AdvancedMailEndpointBuilder
block|{
specifier|public
name|MailEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"imap"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|MailEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

