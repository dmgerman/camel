begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|WaitForTaskToComplete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The vm component provides asynchronous call to another endpoint from the same  * CamelContext.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|VmEndpointBuilderFactory
specifier|public
interface|interface
name|VmEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the VM component.      */
DECL|interface|VmEndpointConsumerBuilder
specifier|public
interface|interface
name|VmEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedVmEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The maximum capacity of the SEDA queue (i.e., the number of messages          * it can hold). Will by default use the defaultSize set on the SEDA          * component.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|size (int size)
specifier|default
name|VmEndpointConsumerBuilder
name|size
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"size"
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum capacity of the SEDA queue (i.e., the number of messages          * it can hold). Will by default use the defaultSize set on the SEDA          * component.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|size (String size)
specifier|default
name|VmEndpointConsumerBuilder
name|size
parameter_list|(
name|String
name|size
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"size"
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|VmEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|VmEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of concurrent threads processing exchanges.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|concurrentConsumers ( int concurrentConsumers)
specifier|default
name|VmEndpointConsumerBuilder
name|concurrentConsumers
parameter_list|(
name|int
name|concurrentConsumers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"concurrentConsumers"
argument_list|,
name|concurrentConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of concurrent threads processing exchanges.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|concurrentConsumers ( String concurrentConsumers)
specifier|default
name|VmEndpointConsumerBuilder
name|concurrentConsumers
parameter_list|(
name|String
name|concurrentConsumers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"concurrentConsumers"
argument_list|,
name|concurrentConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the VM component.      */
DECL|interface|AdvancedVmEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedVmEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|VmEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|VmEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to limit the number of concurrentConsumers to the maximum of          * 500. By default, an exception will be thrown if an endpoint is          * configured with a greater number. You can disable that check by          * turning this option off.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|limitConcurrentConsumers ( boolean limitConcurrentConsumers)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|limitConcurrentConsumers
parameter_list|(
name|boolean
name|limitConcurrentConsumers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"limitConcurrentConsumers"
argument_list|,
name|limitConcurrentConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to limit the number of concurrentConsumers to the maximum of          * 500. By default, an exception will be thrown if an endpoint is          * configured with a greater number. You can disable that check by          * turning this option off.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|limitConcurrentConsumers ( String limitConcurrentConsumers)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|limitConcurrentConsumers
parameter_list|(
name|String
name|limitConcurrentConsumers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"limitConcurrentConsumers"
argument_list|,
name|limitConcurrentConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether multiple consumers are allowed. If enabled, you can          * use SEDA for Publish-Subscribe messaging. That is, you can send a          * message to the SEDA queue and have each consumer receive a copy of          * the message. When enabled, this option should be specified on every          * consumer endpoint.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|multipleConsumers ( boolean multipleConsumers)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|multipleConsumers
parameter_list|(
name|boolean
name|multipleConsumers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"multipleConsumers"
argument_list|,
name|multipleConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether multiple consumers are allowed. If enabled, you can          * use SEDA for Publish-Subscribe messaging. That is, you can send a          * message to the SEDA queue and have each consumer receive a copy of          * the message. When enabled, this option should be specified on every          * consumer endpoint.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|multipleConsumers ( String multipleConsumers)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|multipleConsumers
parameter_list|(
name|String
name|multipleConsumers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"multipleConsumers"
argument_list|,
name|multipleConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timeout used when polling. When a timeout occurs, the consumer          * can check whether it is allowed to continue running. Setting a lower          * value allows the consumer to react more quickly upon shutdown.          *           * The option is a:<code>int</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollTimeout (int pollTimeout)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|pollTimeout
parameter_list|(
name|int
name|pollTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollTimeout"
argument_list|,
name|pollTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timeout used when polling. When a timeout occurs, the consumer          * can check whether it is allowed to continue running. Setting a lower          * value allows the consumer to react more quickly upon shutdown.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollTimeout (String pollTimeout)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|pollTimeout
parameter_list|(
name|String
name|pollTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollTimeout"
argument_list|,
name|pollTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to purge the task queue when stopping the consumer/route.          * This allows to stop faster, as any pending messages on the queue is          * discarded.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|purgeWhenStopping ( boolean purgeWhenStopping)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|purgeWhenStopping
parameter_list|(
name|boolean
name|purgeWhenStopping
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"purgeWhenStopping"
argument_list|,
name|purgeWhenStopping
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to purge the task queue when stopping the consumer/route.          * This allows to stop faster, as any pending messages on the queue is          * discarded.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|purgeWhenStopping ( String purgeWhenStopping)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|purgeWhenStopping
parameter_list|(
name|String
name|purgeWhenStopping
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"purgeWhenStopping"
argument_list|,
name|purgeWhenStopping
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the queue instance which will be used by the endpoint. This          * option is only for rare use-cases where you want to use a custom          * queue instance.          *           * The option is a:<code>java.util.concurrent.BlockingQueue</code>          * type.          *           * Group: advanced          */
DECL|method|queue (BlockingQueue queue)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|queue
parameter_list|(
name|BlockingQueue
name|queue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queue"
argument_list|,
name|queue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the queue instance which will be used by the endpoint. This          * option is only for rare use-cases where you want to use a custom          * queue instance.          *           * The option will be converted to a          *<code>java.util.concurrent.BlockingQueue</code> type.          *           * Group: advanced          */
DECL|method|queue (String queue)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|queue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queue"
argument_list|,
name|queue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedVmEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the VM component.      */
DECL|interface|VmEndpointProducerBuilder
specifier|public
interface|interface
name|VmEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedVmEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedVmEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The maximum capacity of the SEDA queue (i.e., the number of messages          * it can hold). Will by default use the defaultSize set on the SEDA          * component.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|size (int size)
specifier|default
name|VmEndpointProducerBuilder
name|size
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"size"
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum capacity of the SEDA queue (i.e., the number of messages          * it can hold). Will by default use the defaultSize set on the SEDA          * component.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|size (String size)
specifier|default
name|VmEndpointProducerBuilder
name|size
parameter_list|(
name|String
name|size
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"size"
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether a thread that sends messages to a full SEDA queue will block          * until the queue's capacity is no longer exhausted. By default, an          * exception will be thrown stating that the queue is full. By enabling          * this option, the calling thread will instead block and wait until the          * message can be accepted.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|blockWhenFull (boolean blockWhenFull)
specifier|default
name|VmEndpointProducerBuilder
name|blockWhenFull
parameter_list|(
name|boolean
name|blockWhenFull
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"blockWhenFull"
argument_list|,
name|blockWhenFull
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether a thread that sends messages to a full SEDA queue will block          * until the queue's capacity is no longer exhausted. By default, an          * exception will be thrown stating that the queue is full. By enabling          * this option, the calling thread will instead block and wait until the          * message can be accepted.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|blockWhenFull (String blockWhenFull)
specifier|default
name|VmEndpointProducerBuilder
name|blockWhenFull
parameter_list|(
name|String
name|blockWhenFull
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"blockWhenFull"
argument_list|,
name|blockWhenFull
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should discard the message (do not add the          * message to the queue), when sending to a queue with no active          * consumers. Only one of the options discardIfNoConsumers and          * failIfNoConsumers can be enabled at the same time.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|discardIfNoConsumers ( boolean discardIfNoConsumers)
specifier|default
name|VmEndpointProducerBuilder
name|discardIfNoConsumers
parameter_list|(
name|boolean
name|discardIfNoConsumers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"discardIfNoConsumers"
argument_list|,
name|discardIfNoConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should discard the message (do not add the          * message to the queue), when sending to a queue with no active          * consumers. Only one of the options discardIfNoConsumers and          * failIfNoConsumers can be enabled at the same time.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|discardIfNoConsumers ( String discardIfNoConsumers)
specifier|default
name|VmEndpointProducerBuilder
name|discardIfNoConsumers
parameter_list|(
name|String
name|discardIfNoConsumers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"discardIfNoConsumers"
argument_list|,
name|discardIfNoConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should fail by throwing an exception, when          * sending to a queue with no active consumers. Only one of the options          * discardIfNoConsumers and failIfNoConsumers can be enabled at the same          * time.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|failIfNoConsumers ( boolean failIfNoConsumers)
specifier|default
name|VmEndpointProducerBuilder
name|failIfNoConsumers
parameter_list|(
name|boolean
name|failIfNoConsumers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"failIfNoConsumers"
argument_list|,
name|failIfNoConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should fail by throwing an exception, when          * sending to a queue with no active consumers. Only one of the options          * discardIfNoConsumers and failIfNoConsumers can be enabled at the same          * time.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|failIfNoConsumers ( String failIfNoConsumers)
specifier|default
name|VmEndpointProducerBuilder
name|failIfNoConsumers
parameter_list|(
name|String
name|failIfNoConsumers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"failIfNoConsumers"
argument_list|,
name|failIfNoConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|VmEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|VmEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * offerTimeout (in milliseconds) can be added to the block case when          * queue is full. You can disable timeout by using 0 or a negative          * value.          *           * The option is a:<code>long</code> type.          *           * Group: producer          */
DECL|method|offerTimeout (long offerTimeout)
specifier|default
name|VmEndpointProducerBuilder
name|offerTimeout
parameter_list|(
name|long
name|offerTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offerTimeout"
argument_list|,
name|offerTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * offerTimeout (in milliseconds) can be added to the block case when          * queue is full. You can disable timeout by using 0 or a negative          * value.          *           * The option will be converted to a<code>long</code> type.          *           * Group: producer          */
DECL|method|offerTimeout (String offerTimeout)
specifier|default
name|VmEndpointProducerBuilder
name|offerTimeout
parameter_list|(
name|String
name|offerTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offerTimeout"
argument_list|,
name|offerTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout (in milliseconds) before a SEDA producer will stop waiting          * for an asynchronous task to complete. You can disable timeout by          * using 0 or a negative value.          *           * The option is a:<code>long</code> type.          *           * Group: producer          */
DECL|method|timeout (long timeout)
specifier|default
name|VmEndpointProducerBuilder
name|timeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout (in milliseconds) before a SEDA producer will stop waiting          * for an asynchronous task to complete. You can disable timeout by          * using 0 or a negative value.          *           * The option will be converted to a<code>long</code> type.          *           * Group: producer          */
DECL|method|timeout (String timeout)
specifier|default
name|VmEndpointProducerBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to specify whether the caller should wait for the async task          * to complete or not before continuing. The following three options are          * supported: Always, Never or IfReplyExpected. The first two values are          * self-explanatory. The last value, IfReplyExpected, will only wait if          * the message is Request Reply based. The default option is          * IfReplyExpected.          *           * The option is a:<code>org.apache.camel.WaitForTaskToComplete</code>          * type.          *           * Group: producer          */
DECL|method|waitForTaskToComplete ( WaitForTaskToComplete waitForTaskToComplete)
specifier|default
name|VmEndpointProducerBuilder
name|waitForTaskToComplete
parameter_list|(
name|WaitForTaskToComplete
name|waitForTaskToComplete
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"waitForTaskToComplete"
argument_list|,
name|waitForTaskToComplete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to specify whether the caller should wait for the async task          * to complete or not before continuing. The following three options are          * supported: Always, Never or IfReplyExpected. The first two values are          * self-explanatory. The last value, IfReplyExpected, will only wait if          * the message is Request Reply based. The default option is          * IfReplyExpected.          *           * The option will be converted to a          *<code>org.apache.camel.WaitForTaskToComplete</code> type.          *           * Group: producer          */
DECL|method|waitForTaskToComplete ( String waitForTaskToComplete)
specifier|default
name|VmEndpointProducerBuilder
name|waitForTaskToComplete
parameter_list|(
name|String
name|waitForTaskToComplete
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"waitForTaskToComplete"
argument_list|,
name|waitForTaskToComplete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the VM component.      */
DECL|interface|AdvancedVmEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedVmEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|VmEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|VmEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedVmEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedVmEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the queue instance which will be used by the endpoint. This          * option is only for rare use-cases where you want to use a custom          * queue instance.          *           * The option is a:<code>java.util.concurrent.BlockingQueue</code>          * type.          *           * Group: advanced          */
DECL|method|queue (BlockingQueue queue)
specifier|default
name|AdvancedVmEndpointProducerBuilder
name|queue
parameter_list|(
name|BlockingQueue
name|queue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queue"
argument_list|,
name|queue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the queue instance which will be used by the endpoint. This          * option is only for rare use-cases where you want to use a custom          * queue instance.          *           * The option will be converted to a          *<code>java.util.concurrent.BlockingQueue</code> type.          *           * Group: advanced          */
DECL|method|queue (String queue)
specifier|default
name|AdvancedVmEndpointProducerBuilder
name|queue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queue"
argument_list|,
name|queue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedVmEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedVmEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the VM component.      */
DECL|interface|VmEndpointBuilder
specifier|public
interface|interface
name|VmEndpointBuilder
extends|extends
name|VmEndpointConsumerBuilder
extends|,
name|VmEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedVmEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedVmEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The maximum capacity of the SEDA queue (i.e., the number of messages          * it can hold). Will by default use the defaultSize set on the SEDA          * component.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|size (int size)
specifier|default
name|VmEndpointBuilder
name|size
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"size"
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum capacity of the SEDA queue (i.e., the number of messages          * it can hold). Will by default use the defaultSize set on the SEDA          * component.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|size (String size)
specifier|default
name|VmEndpointBuilder
name|size
parameter_list|(
name|String
name|size
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"size"
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the VM component.      */
DECL|interface|AdvancedVmEndpointBuilder
specifier|public
interface|interface
name|AdvancedVmEndpointBuilder
extends|extends
name|AdvancedVmEndpointConsumerBuilder
extends|,
name|AdvancedVmEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|VmEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|VmEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedVmEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedVmEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the queue instance which will be used by the endpoint. This          * option is only for rare use-cases where you want to use a custom          * queue instance.          *           * The option is a:<code>java.util.concurrent.BlockingQueue</code>          * type.          *           * Group: advanced          */
DECL|method|queue (BlockingQueue queue)
specifier|default
name|AdvancedVmEndpointBuilder
name|queue
parameter_list|(
name|BlockingQueue
name|queue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queue"
argument_list|,
name|queue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the queue instance which will be used by the endpoint. This          * option is only for rare use-cases where you want to use a custom          * queue instance.          *           * The option will be converted to a          *<code>java.util.concurrent.BlockingQueue</code> type.          *           * Group: advanced          */
DECL|method|queue (String queue)
specifier|default
name|AdvancedVmEndpointBuilder
name|queue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"queue"
argument_list|,
name|queue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedVmEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedVmEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * VM (camel-vm)      * The vm component provides asynchronous call to another endpoint from the      * same CamelContext.      *       * Category: core,endpoint      * Since: 1.1      * Maven coordinates: org.apache.camel:camel-vm      *       * Syntax:<code>vm:name</code>      *       * Path parameter: name (required)      * Name of queue      */
DECL|method|vm (String path)
specifier|default
name|VmEndpointBuilder
name|vm
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|VmEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|VmEndpointBuilder
implements|,
name|AdvancedVmEndpointBuilder
block|{
specifier|public
name|VmEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"vm"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|VmEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

