begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_comment
comment|/**  * The sjms component (simple jms) allows messages to be sent to (or consumed  * from) a JMS Queue or Topic (uses JMS 1.x API).  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|SjmsEndpointBuilderFactory
specifier|public
interface|interface
name|SjmsEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Simple JMS component.      */
DECL|interface|SjmsEndpointConsumerBuilder
specifier|public
interface|interface
name|SjmsEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSjmsEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The JMS acknowledgement name, which is one of: SESSION_TRANSACTED,          * CLIENT_ACKNOWLEDGE, AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE.          *           * The option is a:          *<code>org.apache.camel.component.sjms.jms.SessionAcknowledgementType</code> type.          *           * Group: common          */
DECL|method|acknowledgementMode ( SessionAcknowledgementType acknowledgementMode)
specifier|default
name|SjmsEndpointConsumerBuilder
name|acknowledgementMode
parameter_list|(
name|SessionAcknowledgementType
name|acknowledgementMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"acknowledgementMode"
argument_list|,
name|acknowledgementMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The JMS acknowledgement name, which is one of: SESSION_TRANSACTED,          * CLIENT_ACKNOWLEDGE, AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.jms.SessionAcknowledgementType</code> type.          *           * Group: common          */
DECL|method|acknowledgementMode ( String acknowledgementMode)
specifier|default
name|SjmsEndpointConsumerBuilder
name|acknowledgementMode
parameter_list|(
name|String
name|acknowledgementMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"acknowledgementMode"
argument_list|,
name|acknowledgementMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|SjmsEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|SjmsEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the number of consumer listeners used for this endpoint.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|consumerCount (int consumerCount)
specifier|default
name|SjmsEndpointConsumerBuilder
name|consumerCount
parameter_list|(
name|int
name|consumerCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"consumerCount"
argument_list|,
name|consumerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the number of consumer listeners used for this endpoint.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|consumerCount (String consumerCount)
specifier|default
name|SjmsEndpointConsumerBuilder
name|consumerCount
parameter_list|(
name|String
name|consumerCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"consumerCount"
argument_list|,
name|consumerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the durable subscription Id required for durable topics.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|durableSubscriptionId ( String durableSubscriptionId)
specifier|default
name|SjmsEndpointConsumerBuilder
name|durableSubscriptionId
parameter_list|(
name|String
name|durableSubscriptionId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"durableSubscriptionId"
argument_list|,
name|durableSubscriptionId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|SjmsEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|synchronous (String synchronous)
specifier|default
name|SjmsEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to configure the default errorHandler logging level for          * logging uncaught exceptions.          *           * The option is a:<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: logging          */
DECL|method|errorHandlerLoggingLevel ( LoggingLevel errorHandlerLoggingLevel)
specifier|default
name|SjmsEndpointConsumerBuilder
name|errorHandlerLoggingLevel
parameter_list|(
name|LoggingLevel
name|errorHandlerLoggingLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"errorHandlerLoggingLevel"
argument_list|,
name|errorHandlerLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to configure the default errorHandler logging level for          * logging uncaught exceptions.          *           * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: logging          */
DECL|method|errorHandlerLoggingLevel ( String errorHandlerLoggingLevel)
specifier|default
name|SjmsEndpointConsumerBuilder
name|errorHandlerLoggingLevel
parameter_list|(
name|String
name|errorHandlerLoggingLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"errorHandlerLoggingLevel"
argument_list|,
name|errorHandlerLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to control whether stacktraces should be logged or not, by the          * default errorHandler.          *           * The option is a:<code>boolean</code> type.          *           * Group: logging          */
DECL|method|errorHandlerLogStackTrace ( boolean errorHandlerLogStackTrace)
specifier|default
name|SjmsEndpointConsumerBuilder
name|errorHandlerLogStackTrace
parameter_list|(
name|boolean
name|errorHandlerLogStackTrace
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"errorHandlerLogStackTrace"
argument_list|,
name|errorHandlerLogStackTrace
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to control whether stacktraces should be logged or not, by the          * default errorHandler.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: logging          */
DECL|method|errorHandlerLogStackTrace ( String errorHandlerLogStackTrace)
specifier|default
name|SjmsEndpointConsumerBuilder
name|errorHandlerLogStackTrace
parameter_list|(
name|String
name|errorHandlerLogStackTrace
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"errorHandlerLogStackTrace"
argument_list|,
name|errorHandlerLogStackTrace
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to use transacted mode.          *           * The option is a:<code>boolean</code> type.          *           * Group: transaction          */
DECL|method|transacted (boolean transacted)
specifier|default
name|SjmsEndpointConsumerBuilder
name|transacted
parameter_list|(
name|boolean
name|transacted
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transacted"
argument_list|,
name|transacted
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to use transacted mode.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: transaction          */
DECL|method|transacted (String transacted)
specifier|default
name|SjmsEndpointConsumerBuilder
name|transacted
parameter_list|(
name|String
name|transacted
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transacted"
argument_list|,
name|transacted
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If transacted sets the number of messages to process before          * committing a transaction.          *           * The option is a:<code>int</code> type.          *           * Group: transaction          */
DECL|method|transactionBatchCount ( int transactionBatchCount)
specifier|default
name|SjmsEndpointConsumerBuilder
name|transactionBatchCount
parameter_list|(
name|int
name|transactionBatchCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transactionBatchCount"
argument_list|,
name|transactionBatchCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If transacted sets the number of messages to process before          * committing a transaction.          *           * The option will be converted to a<code>int</code> type.          *           * Group: transaction          */
DECL|method|transactionBatchCount ( String transactionBatchCount)
specifier|default
name|SjmsEndpointConsumerBuilder
name|transactionBatchCount
parameter_list|(
name|String
name|transactionBatchCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transactionBatchCount"
argument_list|,
name|transactionBatchCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets timeout (in millis) for batch transactions, the value should be          * 1000 or higher.          *           * The option is a:<code>long</code> type.          *           * Group: transaction          */
DECL|method|transactionBatchTimeout ( long transactionBatchTimeout)
specifier|default
name|SjmsEndpointConsumerBuilder
name|transactionBatchTimeout
parameter_list|(
name|long
name|transactionBatchTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transactionBatchTimeout"
argument_list|,
name|transactionBatchTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets timeout (in millis) for batch transactions, the value should be          * 1000 or higher.          *           * The option will be converted to a<code>long</code> type.          *           * Group: transaction          */
DECL|method|transactionBatchTimeout ( String transactionBatchTimeout)
specifier|default
name|SjmsEndpointConsumerBuilder
name|transactionBatchTimeout
parameter_list|(
name|String
name|transactionBatchTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transactionBatchTimeout"
argument_list|,
name|transactionBatchTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the commit strategy.          *           * The option is a:          *<code>org.apache.camel.component.sjms.TransactionCommitStrategy</code> type.          *           * Group: transaction          */
DECL|method|transactionCommitStrategy ( Object transactionCommitStrategy)
specifier|default
name|SjmsEndpointConsumerBuilder
name|transactionCommitStrategy
parameter_list|(
name|Object
name|transactionCommitStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transactionCommitStrategy"
argument_list|,
name|transactionCommitStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the commit strategy.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.TransactionCommitStrategy</code> type.          *           * Group: transaction          */
DECL|method|transactionCommitStrategy ( String transactionCommitStrategy)
specifier|default
name|SjmsEndpointConsumerBuilder
name|transactionCommitStrategy
parameter_list|(
name|String
name|transactionCommitStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transactionCommitStrategy"
argument_list|,
name|transactionCommitStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Simple JMS component.      */
DECL|interface|AdvancedSjmsEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedSjmsEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SjmsEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SjmsEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the JMS Message selector syntax.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer (advanced)          */
DECL|method|messageSelector ( String messageSelector)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|messageSelector
parameter_list|(
name|String
name|messageSelector
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"messageSelector"
argument_list|,
name|messageSelector
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to startup the consumer message listener asynchronously, when          * starting a route. For example if a JmsConsumer cannot get a          * connection to a remote JMS broker, then it may block while retrying          * and/or failover. This will cause Camel to block while starting          * routes. By setting this option to true, you will let routes startup,          * while the JmsConsumer connects to the JMS broker using a dedicated          * thread in asynchronous mode. If this option is used, then beware that          * if the connection could not be established, then an exception is          * logged at WARN level, and the consumer will not be able to receive          * messages; You can then restart the route to retry.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|asyncStartListener ( boolean asyncStartListener)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|asyncStartListener
parameter_list|(
name|boolean
name|asyncStartListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"asyncStartListener"
argument_list|,
name|asyncStartListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to startup the consumer message listener asynchronously, when          * starting a route. For example if a JmsConsumer cannot get a          * connection to a remote JMS broker, then it may block while retrying          * and/or failover. This will cause Camel to block while starting          * routes. By setting this option to true, you will let routes startup,          * while the JmsConsumer connects to the JMS broker using a dedicated          * thread in asynchronous mode. If this option is used, then beware that          * if the connection could not be established, then an exception is          * logged at WARN level, and the consumer will not be able to receive          * messages; You can then restart the route to retry.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|asyncStartListener ( String asyncStartListener)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|asyncStartListener
parameter_list|(
name|String
name|asyncStartListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"asyncStartListener"
argument_list|,
name|asyncStartListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to stop the consumer message listener asynchronously, when          * stopping a route.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|asyncStopListener ( boolean asyncStopListener)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|asyncStopListener
parameter_list|(
name|boolean
name|asyncStopListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"asyncStopListener"
argument_list|,
name|asyncStopListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to stop the consumer message listener asynchronously, when          * stopping a route.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|asyncStopListener ( String asyncStopListener)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|asyncStopListener
parameter_list|(
name|String
name|asyncStopListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"asyncStopListener"
argument_list|,
name|asyncStopListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of connections available to this endpoint.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|connectionCount ( Integer connectionCount)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|connectionCount
parameter_list|(
name|Integer
name|connectionCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionCount"
argument_list|,
name|connectionCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of connections available to this endpoint.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|connectionCount ( String connectionCount)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|connectionCount
parameter_list|(
name|String
name|connectionCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionCount"
argument_list|,
name|connectionCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Initializes the connectionFactory for the endpoint, which takes          * precedence over the component's connectionFactory, if any.          *           * The option is a:<code>javax.jms.ConnectionFactory</code> type.          *           * Group: advanced          */
DECL|method|connectionFactory ( Object connectionFactory)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|connectionFactory
parameter_list|(
name|Object
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Initializes the connectionFactory for the endpoint, which takes          * precedence over the component's connectionFactory, if any.          *           * The option will be converted to a          *<code>javax.jms.ConnectionFactory</code> type.          *           * Group: advanced          */
DECL|method|connectionFactory ( String connectionFactory)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|connectionFactory
parameter_list|(
name|String
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Initializes the connectionResource for the endpoint, which takes          * precedence over the component's connectionResource, if any.          *           * The option is a:          *<code>org.apache.camel.component.sjms.jms.ConnectionResource</code>          * type.          *           * Group: advanced          */
DECL|method|connectionResource ( Object connectionResource)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|connectionResource
parameter_list|(
name|Object
name|connectionResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionResource"
argument_list|,
name|connectionResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Initializes the connectionResource for the endpoint, which takes          * precedence over the component's connectionResource, if any.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.jms.ConnectionResource</code>          * type.          *           * Group: advanced          */
DECL|method|connectionResource ( String connectionResource)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|connectionResource
parameter_list|(
name|String
name|connectionResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionResource"
argument_list|,
name|connectionResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom DestinationCreationStrategy.          *           * The option is a:          *<code>org.apache.camel.component.sjms.jms.DestinationCreationStrategy</code> type.          *           * Group: advanced          */
DECL|method|destinationCreationStrategy ( Object destinationCreationStrategy)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|destinationCreationStrategy
parameter_list|(
name|Object
name|destinationCreationStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"destinationCreationStrategy"
argument_list|,
name|destinationCreationStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom DestinationCreationStrategy.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.jms.DestinationCreationStrategy</code> type.          *           * Group: advanced          */
DECL|method|destinationCreationStrategy ( String destinationCreationStrategy)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|destinationCreationStrategy
parameter_list|(
name|String
name|destinationCreationStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"destinationCreationStrategy"
argument_list|,
name|destinationCreationStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the JMS Exception Listener that is to be notified of any          * underlying JMS exceptions.          *           * The option is a:<code>javax.jms.ExceptionListener</code> type.          *           * Group: advanced          */
DECL|method|exceptionListener ( Object exceptionListener)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|exceptionListener
parameter_list|(
name|Object
name|exceptionListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionListener"
argument_list|,
name|exceptionListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the JMS Exception Listener that is to be notified of any          * underlying JMS exceptions.          *           * The option will be converted to a          *<code>javax.jms.ExceptionListener</code> type.          *           * Group: advanced          */
DECL|method|exceptionListener ( String exceptionListener)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|exceptionListener
parameter_list|(
name|String
name|exceptionListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionListener"
argument_list|,
name|exceptionListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          *           * The option is a:          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          *           * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to include all JMSXxxx properties when mapping from JMS to          * Camel Message. Setting this to true will include properties such as          * JMSXAppID, and JMSXUserID etc. Note: If you are using a custom          * headerFilterStrategy then this option does not apply.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|includeAllJMSXProperties ( boolean includeAllJMSXProperties)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|includeAllJMSXProperties
parameter_list|(
name|boolean
name|includeAllJMSXProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"includeAllJMSXProperties"
argument_list|,
name|includeAllJMSXProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to include all JMSXxxx properties when mapping from JMS to          * Camel Message. Setting this to true will include properties such as          * JMSXAppID, and JMSXUserID etc. Note: If you are using a custom          * headerFilterStrategy then this option does not apply.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|includeAllJMSXProperties ( String includeAllJMSXProperties)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|includeAllJMSXProperties
parameter_list|(
name|String
name|includeAllJMSXProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"includeAllJMSXProperties"
argument_list|,
name|includeAllJMSXProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Pluggable strategy for encoding and decoding JMS keys so they can be          * compliant with the JMS specification. Camel provides two          * implementations out of the box: default and passthrough. The default          * strategy will safely marshal dots and hyphens (. and -). The          * passthrough strategy leaves the key as is. Can be used for JMS          * brokers which do not care whether JMS header keys contain illegal          * characters. You can provide your own implementation of the          * org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it          * using the # notation.          *           * The option is a:          *<code>org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy</code>          * type.          *           * Group: advanced          */
DECL|method|jmsKeyFormatStrategy ( Object jmsKeyFormatStrategy)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|jmsKeyFormatStrategy
parameter_list|(
name|Object
name|jmsKeyFormatStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jmsKeyFormatStrategy"
argument_list|,
name|jmsKeyFormatStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Pluggable strategy for encoding and decoding JMS keys so they can be          * compliant with the JMS specification. Camel provides two          * implementations out of the box: default and passthrough. The default          * strategy will safely marshal dots and hyphens (. and -). The          * passthrough strategy leaves the key as is. Can be used for JMS          * brokers which do not care whether JMS header keys contain illegal          * characters. You can provide your own implementation of the          * org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it          * using the # notation.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy</code>          * type.          *           * Group: advanced          */
DECL|method|jmsKeyFormatStrategy ( String jmsKeyFormatStrategy)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|jmsKeyFormatStrategy
parameter_list|(
name|String
name|jmsKeyFormatStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jmsKeyFormatStrategy"
argument_list|,
name|jmsKeyFormatStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether Camel should auto map the received JMS message to a          * suited payload type, such as javax.jms.TextMessage to a String etc.          * See section about how mapping works below for more details.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|mapJmsMessage ( boolean mapJmsMessage)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|mapJmsMessage
parameter_list|(
name|boolean
name|mapJmsMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mapJmsMessage"
argument_list|,
name|mapJmsMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether Camel should auto map the received JMS message to a          * suited payload type, such as javax.jms.TextMessage to a String etc.          * See section about how mapping works below for more details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|mapJmsMessage ( String mapJmsMessage)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|mapJmsMessage
parameter_list|(
name|String
name|mapJmsMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mapJmsMessage"
argument_list|,
name|mapJmsMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the given MessageCreatedStrategy which are invoked when Camel          * creates new instances of javax.jms.Message objects when Camel is          * sending a JMS message.          *           * The option is a:          *<code>org.apache.camel.component.sjms.jms.MessageCreatedStrategy</code> type.          *           * Group: advanced          */
DECL|method|messageCreatedStrategy ( Object messageCreatedStrategy)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|messageCreatedStrategy
parameter_list|(
name|Object
name|messageCreatedStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"messageCreatedStrategy"
argument_list|,
name|messageCreatedStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the given MessageCreatedStrategy which are invoked when Camel          * creates new instances of javax.jms.Message objects when Camel is          * sending a JMS message.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.jms.MessageCreatedStrategy</code> type.          *           * Group: advanced          */
DECL|method|messageCreatedStrategy ( String messageCreatedStrategy)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|messageCreatedStrategy
parameter_list|(
name|String
name|messageCreatedStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"messageCreatedStrategy"
argument_list|,
name|messageCreatedStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to share JMS session with other SJMS endpoints.          * Turn this off if your route is accessing to multiple JMS providers.          * If you need transaction against multiple JMS providers, use jms          * component to leverage XA transaction.          *           * The option is a:<code>boolean</code> type.          *           * Group: transaction (advanced)          */
DECL|method|sharedJMSSession ( boolean sharedJMSSession)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|sharedJMSSession
parameter_list|(
name|boolean
name|sharedJMSSession
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sharedJMSSession"
argument_list|,
name|sharedJMSSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to share JMS session with other SJMS endpoints.          * Turn this off if your route is accessing to multiple JMS providers.          * If you need transaction against multiple JMS providers, use jms          * component to leverage XA transaction.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: transaction (advanced)          */
DECL|method|sharedJMSSession ( String sharedJMSSession)
specifier|default
name|AdvancedSjmsEndpointConsumerBuilder
name|sharedJMSSession
parameter_list|(
name|String
name|sharedJMSSession
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sharedJMSSession"
argument_list|,
name|sharedJMSSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Simple JMS component.      */
DECL|interface|SjmsEndpointProducerBuilder
specifier|public
interface|interface
name|SjmsEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSjmsEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The JMS acknowledgement name, which is one of: SESSION_TRANSACTED,          * CLIENT_ACKNOWLEDGE, AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE.          *           * The option is a:          *<code>org.apache.camel.component.sjms.jms.SessionAcknowledgementType</code> type.          *           * Group: common          */
DECL|method|acknowledgementMode ( SessionAcknowledgementType acknowledgementMode)
specifier|default
name|SjmsEndpointProducerBuilder
name|acknowledgementMode
parameter_list|(
name|SessionAcknowledgementType
name|acknowledgementMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"acknowledgementMode"
argument_list|,
name|acknowledgementMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The JMS acknowledgement name, which is one of: SESSION_TRANSACTED,          * CLIENT_ACKNOWLEDGE, AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.jms.SessionAcknowledgementType</code> type.          *           * Group: common          */
DECL|method|acknowledgementMode ( String acknowledgementMode)
specifier|default
name|SjmsEndpointProducerBuilder
name|acknowledgementMode
parameter_list|(
name|String
name|acknowledgementMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"acknowledgementMode"
argument_list|,
name|acknowledgementMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|SjmsEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|SjmsEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the reply to destination name used for InOut producer endpoints.          * The type of the reply to destination can be determined by the          * starting prefix (topic: or queue:) in its name.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|namedReplyTo (String namedReplyTo)
specifier|default
name|SjmsEndpointProducerBuilder
name|namedReplyTo
parameter_list|(
name|String
name|namedReplyTo
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"namedReplyTo"
argument_list|,
name|namedReplyTo
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Flag used to enable/disable message persistence.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|persistent (boolean persistent)
specifier|default
name|SjmsEndpointProducerBuilder
name|persistent
parameter_list|(
name|boolean
name|persistent
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistent"
argument_list|,
name|persistent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Flag used to enable/disable message persistence.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|persistent (String persistent)
specifier|default
name|SjmsEndpointProducerBuilder
name|persistent
parameter_list|(
name|String
name|persistent
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistent"
argument_list|,
name|persistent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the number of producers used for this endpoint.          *           * The option is a:<code>int</code> type.          *           * Group: producer          */
DECL|method|producerCount (int producerCount)
specifier|default
name|SjmsEndpointProducerBuilder
name|producerCount
parameter_list|(
name|int
name|producerCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"producerCount"
argument_list|,
name|producerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the number of producers used for this endpoint.          *           * The option will be converted to a<code>int</code> type.          *           * Group: producer          */
DECL|method|producerCount (String producerCount)
specifier|default
name|SjmsEndpointProducerBuilder
name|producerCount
parameter_list|(
name|String
name|producerCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"producerCount"
argument_list|,
name|producerCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Flag used to adjust the Time To Live value of produced messages.          *           * The option is a:<code>long</code> type.          *           * Group: producer          */
DECL|method|ttl (long ttl)
specifier|default
name|SjmsEndpointProducerBuilder
name|ttl
parameter_list|(
name|long
name|ttl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ttl"
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Flag used to adjust the Time To Live value of produced messages.          *           * The option will be converted to a<code>long</code> type.          *           * Group: producer          */
DECL|method|ttl (String ttl)
specifier|default
name|SjmsEndpointProducerBuilder
name|ttl
parameter_list|(
name|String
name|ttl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ttl"
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the commit strategy.          *           * The option is a:          *<code>org.apache.camel.component.sjms.TransactionCommitStrategy</code> type.          *           * Group: transaction          */
DECL|method|transactionCommitStrategy ( Object transactionCommitStrategy)
specifier|default
name|SjmsEndpointProducerBuilder
name|transactionCommitStrategy
parameter_list|(
name|Object
name|transactionCommitStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transactionCommitStrategy"
argument_list|,
name|transactionCommitStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the commit strategy.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.TransactionCommitStrategy</code> type.          *           * Group: transaction          */
DECL|method|transactionCommitStrategy ( String transactionCommitStrategy)
specifier|default
name|SjmsEndpointProducerBuilder
name|transactionCommitStrategy
parameter_list|(
name|String
name|transactionCommitStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transactionCommitStrategy"
argument_list|,
name|transactionCommitStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Simple JMS component.      */
DECL|interface|AdvancedSjmsEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedSjmsEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SjmsEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SjmsEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether to allow sending messages with no body. If this option is          * false and the message body is null, then an JMSException is thrown.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer (advanced)          */
DECL|method|allowNullBody ( boolean allowNullBody)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|allowNullBody
parameter_list|(
name|boolean
name|allowNullBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowNullBody"
argument_list|,
name|allowNullBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to allow sending messages with no body. If this option is          * false and the message body is null, then an JMSException is thrown.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer (advanced)          */
DECL|method|allowNullBody ( String allowNullBody)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|allowNullBody
parameter_list|(
name|String
name|allowNullBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowNullBody"
argument_list|,
name|allowNullBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to prefill the producer connection pool on startup, or create          * connections lazy when needed.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer (advanced)          */
DECL|method|prefillPool ( boolean prefillPool)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|prefillPool
parameter_list|(
name|boolean
name|prefillPool
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"prefillPool"
argument_list|,
name|prefillPool
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to prefill the producer connection pool on startup, or create          * connections lazy when needed.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer (advanced)          */
DECL|method|prefillPool ( String prefillPool)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|prefillPool
parameter_list|(
name|String
name|prefillPool
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"prefillPool"
argument_list|,
name|prefillPool
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the amount of time we should wait before timing out a InOut          * response.          *           * The option is a:<code>long</code> type.          *           * Group: producer (advanced)          */
DECL|method|responseTimeOut ( long responseTimeOut)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|responseTimeOut
parameter_list|(
name|long
name|responseTimeOut
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"responseTimeOut"
argument_list|,
name|responseTimeOut
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the amount of time we should wait before timing out a InOut          * response.          *           * The option will be converted to a<code>long</code> type.          *           * Group: producer (advanced)          */
DECL|method|responseTimeOut ( String responseTimeOut)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|responseTimeOut
parameter_list|(
name|String
name|responseTimeOut
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"responseTimeOut"
argument_list|,
name|responseTimeOut
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to startup the consumer message listener asynchronously, when          * starting a route. For example if a JmsConsumer cannot get a          * connection to a remote JMS broker, then it may block while retrying          * and/or failover. This will cause Camel to block while starting          * routes. By setting this option to true, you will let routes startup,          * while the JmsConsumer connects to the JMS broker using a dedicated          * thread in asynchronous mode. If this option is used, then beware that          * if the connection could not be established, then an exception is          * logged at WARN level, and the consumer will not be able to receive          * messages; You can then restart the route to retry.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|asyncStartListener ( boolean asyncStartListener)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|asyncStartListener
parameter_list|(
name|boolean
name|asyncStartListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"asyncStartListener"
argument_list|,
name|asyncStartListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to startup the consumer message listener asynchronously, when          * starting a route. For example if a JmsConsumer cannot get a          * connection to a remote JMS broker, then it may block while retrying          * and/or failover. This will cause Camel to block while starting          * routes. By setting this option to true, you will let routes startup,          * while the JmsConsumer connects to the JMS broker using a dedicated          * thread in asynchronous mode. If this option is used, then beware that          * if the connection could not be established, then an exception is          * logged at WARN level, and the consumer will not be able to receive          * messages; You can then restart the route to retry.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|asyncStartListener ( String asyncStartListener)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|asyncStartListener
parameter_list|(
name|String
name|asyncStartListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"asyncStartListener"
argument_list|,
name|asyncStartListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to stop the consumer message listener asynchronously, when          * stopping a route.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|asyncStopListener ( boolean asyncStopListener)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|asyncStopListener
parameter_list|(
name|boolean
name|asyncStopListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"asyncStopListener"
argument_list|,
name|asyncStopListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to stop the consumer message listener asynchronously, when          * stopping a route.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|asyncStopListener ( String asyncStopListener)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|asyncStopListener
parameter_list|(
name|String
name|asyncStopListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"asyncStopListener"
argument_list|,
name|asyncStopListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of connections available to this endpoint.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|connectionCount ( Integer connectionCount)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|connectionCount
parameter_list|(
name|Integer
name|connectionCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionCount"
argument_list|,
name|connectionCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of connections available to this endpoint.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|connectionCount ( String connectionCount)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|connectionCount
parameter_list|(
name|String
name|connectionCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionCount"
argument_list|,
name|connectionCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Initializes the connectionFactory for the endpoint, which takes          * precedence over the component's connectionFactory, if any.          *           * The option is a:<code>javax.jms.ConnectionFactory</code> type.          *           * Group: advanced          */
DECL|method|connectionFactory ( Object connectionFactory)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|connectionFactory
parameter_list|(
name|Object
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Initializes the connectionFactory for the endpoint, which takes          * precedence over the component's connectionFactory, if any.          *           * The option will be converted to a          *<code>javax.jms.ConnectionFactory</code> type.          *           * Group: advanced          */
DECL|method|connectionFactory ( String connectionFactory)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|connectionFactory
parameter_list|(
name|String
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Initializes the connectionResource for the endpoint, which takes          * precedence over the component's connectionResource, if any.          *           * The option is a:          *<code>org.apache.camel.component.sjms.jms.ConnectionResource</code>          * type.          *           * Group: advanced          */
DECL|method|connectionResource ( Object connectionResource)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|connectionResource
parameter_list|(
name|Object
name|connectionResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionResource"
argument_list|,
name|connectionResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Initializes the connectionResource for the endpoint, which takes          * precedence over the component's connectionResource, if any.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.jms.ConnectionResource</code>          * type.          *           * Group: advanced          */
DECL|method|connectionResource ( String connectionResource)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|connectionResource
parameter_list|(
name|String
name|connectionResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionResource"
argument_list|,
name|connectionResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom DestinationCreationStrategy.          *           * The option is a:          *<code>org.apache.camel.component.sjms.jms.DestinationCreationStrategy</code> type.          *           * Group: advanced          */
DECL|method|destinationCreationStrategy ( Object destinationCreationStrategy)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|destinationCreationStrategy
parameter_list|(
name|Object
name|destinationCreationStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"destinationCreationStrategy"
argument_list|,
name|destinationCreationStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom DestinationCreationStrategy.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.jms.DestinationCreationStrategy</code> type.          *           * Group: advanced          */
DECL|method|destinationCreationStrategy ( String destinationCreationStrategy)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|destinationCreationStrategy
parameter_list|(
name|String
name|destinationCreationStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"destinationCreationStrategy"
argument_list|,
name|destinationCreationStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the JMS Exception Listener that is to be notified of any          * underlying JMS exceptions.          *           * The option is a:<code>javax.jms.ExceptionListener</code> type.          *           * Group: advanced          */
DECL|method|exceptionListener ( Object exceptionListener)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|exceptionListener
parameter_list|(
name|Object
name|exceptionListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionListener"
argument_list|,
name|exceptionListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the JMS Exception Listener that is to be notified of any          * underlying JMS exceptions.          *           * The option will be converted to a          *<code>javax.jms.ExceptionListener</code> type.          *           * Group: advanced          */
DECL|method|exceptionListener ( String exceptionListener)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|exceptionListener
parameter_list|(
name|String
name|exceptionListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionListener"
argument_list|,
name|exceptionListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          *           * The option is a:          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          *           * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to include all JMSXxxx properties when mapping from JMS to          * Camel Message. Setting this to true will include properties such as          * JMSXAppID, and JMSXUserID etc. Note: If you are using a custom          * headerFilterStrategy then this option does not apply.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|includeAllJMSXProperties ( boolean includeAllJMSXProperties)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|includeAllJMSXProperties
parameter_list|(
name|boolean
name|includeAllJMSXProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"includeAllJMSXProperties"
argument_list|,
name|includeAllJMSXProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to include all JMSXxxx properties when mapping from JMS to          * Camel Message. Setting this to true will include properties such as          * JMSXAppID, and JMSXUserID etc. Note: If you are using a custom          * headerFilterStrategy then this option does not apply.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|includeAllJMSXProperties ( String includeAllJMSXProperties)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|includeAllJMSXProperties
parameter_list|(
name|String
name|includeAllJMSXProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"includeAllJMSXProperties"
argument_list|,
name|includeAllJMSXProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Pluggable strategy for encoding and decoding JMS keys so they can be          * compliant with the JMS specification. Camel provides two          * implementations out of the box: default and passthrough. The default          * strategy will safely marshal dots and hyphens (. and -). The          * passthrough strategy leaves the key as is. Can be used for JMS          * brokers which do not care whether JMS header keys contain illegal          * characters. You can provide your own implementation of the          * org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it          * using the # notation.          *           * The option is a:          *<code>org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy</code>          * type.          *           * Group: advanced          */
DECL|method|jmsKeyFormatStrategy ( Object jmsKeyFormatStrategy)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|jmsKeyFormatStrategy
parameter_list|(
name|Object
name|jmsKeyFormatStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jmsKeyFormatStrategy"
argument_list|,
name|jmsKeyFormatStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Pluggable strategy for encoding and decoding JMS keys so they can be          * compliant with the JMS specification. Camel provides two          * implementations out of the box: default and passthrough. The default          * strategy will safely marshal dots and hyphens (. and -). The          * passthrough strategy leaves the key as is. Can be used for JMS          * brokers which do not care whether JMS header keys contain illegal          * characters. You can provide your own implementation of the          * org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it          * using the # notation.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy</code>          * type.          *           * Group: advanced          */
DECL|method|jmsKeyFormatStrategy ( String jmsKeyFormatStrategy)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|jmsKeyFormatStrategy
parameter_list|(
name|String
name|jmsKeyFormatStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jmsKeyFormatStrategy"
argument_list|,
name|jmsKeyFormatStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether Camel should auto map the received JMS message to a          * suited payload type, such as javax.jms.TextMessage to a String etc.          * See section about how mapping works below for more details.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|mapJmsMessage ( boolean mapJmsMessage)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|mapJmsMessage
parameter_list|(
name|boolean
name|mapJmsMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mapJmsMessage"
argument_list|,
name|mapJmsMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether Camel should auto map the received JMS message to a          * suited payload type, such as javax.jms.TextMessage to a String etc.          * See section about how mapping works below for more details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|mapJmsMessage ( String mapJmsMessage)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|mapJmsMessage
parameter_list|(
name|String
name|mapJmsMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mapJmsMessage"
argument_list|,
name|mapJmsMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the given MessageCreatedStrategy which are invoked when Camel          * creates new instances of javax.jms.Message objects when Camel is          * sending a JMS message.          *           * The option is a:          *<code>org.apache.camel.component.sjms.jms.MessageCreatedStrategy</code> type.          *           * Group: advanced          */
DECL|method|messageCreatedStrategy ( Object messageCreatedStrategy)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|messageCreatedStrategy
parameter_list|(
name|Object
name|messageCreatedStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"messageCreatedStrategy"
argument_list|,
name|messageCreatedStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the given MessageCreatedStrategy which are invoked when Camel          * creates new instances of javax.jms.Message objects when Camel is          * sending a JMS message.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.jms.MessageCreatedStrategy</code> type.          *           * Group: advanced          */
DECL|method|messageCreatedStrategy ( String messageCreatedStrategy)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|messageCreatedStrategy
parameter_list|(
name|String
name|messageCreatedStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"messageCreatedStrategy"
argument_list|,
name|messageCreatedStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to share JMS session with other SJMS endpoints.          * Turn this off if your route is accessing to multiple JMS providers.          * If you need transaction against multiple JMS providers, use jms          * component to leverage XA transaction.          *           * The option is a:<code>boolean</code> type.          *           * Group: transaction (advanced)          */
DECL|method|sharedJMSSession ( boolean sharedJMSSession)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|sharedJMSSession
parameter_list|(
name|boolean
name|sharedJMSSession
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sharedJMSSession"
argument_list|,
name|sharedJMSSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to share JMS session with other SJMS endpoints.          * Turn this off if your route is accessing to multiple JMS providers.          * If you need transaction against multiple JMS providers, use jms          * component to leverage XA transaction.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: transaction (advanced)          */
DECL|method|sharedJMSSession ( String sharedJMSSession)
specifier|default
name|AdvancedSjmsEndpointProducerBuilder
name|sharedJMSSession
parameter_list|(
name|String
name|sharedJMSSession
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sharedJMSSession"
argument_list|,
name|sharedJMSSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Simple JMS component.      */
DECL|interface|SjmsEndpointBuilder
specifier|public
interface|interface
name|SjmsEndpointBuilder
extends|extends
name|SjmsEndpointConsumerBuilder
extends|,
name|SjmsEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSjmsEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSjmsEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The JMS acknowledgement name, which is one of: SESSION_TRANSACTED,          * CLIENT_ACKNOWLEDGE, AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE.          *           * The option is a:          *<code>org.apache.camel.component.sjms.jms.SessionAcknowledgementType</code> type.          *           * Group: common          */
DECL|method|acknowledgementMode ( SessionAcknowledgementType acknowledgementMode)
specifier|default
name|SjmsEndpointBuilder
name|acknowledgementMode
parameter_list|(
name|SessionAcknowledgementType
name|acknowledgementMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"acknowledgementMode"
argument_list|,
name|acknowledgementMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The JMS acknowledgement name, which is one of: SESSION_TRANSACTED,          * CLIENT_ACKNOWLEDGE, AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.jms.SessionAcknowledgementType</code> type.          *           * Group: common          */
DECL|method|acknowledgementMode ( String acknowledgementMode)
specifier|default
name|SjmsEndpointBuilder
name|acknowledgementMode
parameter_list|(
name|String
name|acknowledgementMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"acknowledgementMode"
argument_list|,
name|acknowledgementMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the commit strategy.          *           * The option is a:          *<code>org.apache.camel.component.sjms.TransactionCommitStrategy</code> type.          *           * Group: transaction          */
DECL|method|transactionCommitStrategy ( Object transactionCommitStrategy)
specifier|default
name|SjmsEndpointBuilder
name|transactionCommitStrategy
parameter_list|(
name|Object
name|transactionCommitStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transactionCommitStrategy"
argument_list|,
name|transactionCommitStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the commit strategy.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.TransactionCommitStrategy</code> type.          *           * Group: transaction          */
DECL|method|transactionCommitStrategy ( String transactionCommitStrategy)
specifier|default
name|SjmsEndpointBuilder
name|transactionCommitStrategy
parameter_list|(
name|String
name|transactionCommitStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transactionCommitStrategy"
argument_list|,
name|transactionCommitStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Simple JMS component.      */
DECL|interface|AdvancedSjmsEndpointBuilder
specifier|public
interface|interface
name|AdvancedSjmsEndpointBuilder
extends|extends
name|AdvancedSjmsEndpointConsumerBuilder
extends|,
name|AdvancedSjmsEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SjmsEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SjmsEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether to startup the consumer message listener asynchronously, when          * starting a route. For example if a JmsConsumer cannot get a          * connection to a remote JMS broker, then it may block while retrying          * and/or failover. This will cause Camel to block while starting          * routes. By setting this option to true, you will let routes startup,          * while the JmsConsumer connects to the JMS broker using a dedicated          * thread in asynchronous mode. If this option is used, then beware that          * if the connection could not be established, then an exception is          * logged at WARN level, and the consumer will not be able to receive          * messages; You can then restart the route to retry.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|asyncStartListener ( boolean asyncStartListener)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|asyncStartListener
parameter_list|(
name|boolean
name|asyncStartListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"asyncStartListener"
argument_list|,
name|asyncStartListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to startup the consumer message listener asynchronously, when          * starting a route. For example if a JmsConsumer cannot get a          * connection to a remote JMS broker, then it may block while retrying          * and/or failover. This will cause Camel to block while starting          * routes. By setting this option to true, you will let routes startup,          * while the JmsConsumer connects to the JMS broker using a dedicated          * thread in asynchronous mode. If this option is used, then beware that          * if the connection could not be established, then an exception is          * logged at WARN level, and the consumer will not be able to receive          * messages; You can then restart the route to retry.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|asyncStartListener ( String asyncStartListener)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|asyncStartListener
parameter_list|(
name|String
name|asyncStartListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"asyncStartListener"
argument_list|,
name|asyncStartListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to stop the consumer message listener asynchronously, when          * stopping a route.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|asyncStopListener ( boolean asyncStopListener)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|asyncStopListener
parameter_list|(
name|boolean
name|asyncStopListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"asyncStopListener"
argument_list|,
name|asyncStopListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to stop the consumer message listener asynchronously, when          * stopping a route.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|asyncStopListener ( String asyncStopListener)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|asyncStopListener
parameter_list|(
name|String
name|asyncStopListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"asyncStopListener"
argument_list|,
name|asyncStopListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of connections available to this endpoint.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|connectionCount ( Integer connectionCount)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|connectionCount
parameter_list|(
name|Integer
name|connectionCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionCount"
argument_list|,
name|connectionCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of connections available to this endpoint.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|connectionCount ( String connectionCount)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|connectionCount
parameter_list|(
name|String
name|connectionCount
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionCount"
argument_list|,
name|connectionCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Initializes the connectionFactory for the endpoint, which takes          * precedence over the component's connectionFactory, if any.          *           * The option is a:<code>javax.jms.ConnectionFactory</code> type.          *           * Group: advanced          */
DECL|method|connectionFactory ( Object connectionFactory)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|connectionFactory
parameter_list|(
name|Object
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Initializes the connectionFactory for the endpoint, which takes          * precedence over the component's connectionFactory, if any.          *           * The option will be converted to a          *<code>javax.jms.ConnectionFactory</code> type.          *           * Group: advanced          */
DECL|method|connectionFactory ( String connectionFactory)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|connectionFactory
parameter_list|(
name|String
name|connectionFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionFactory"
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Initializes the connectionResource for the endpoint, which takes          * precedence over the component's connectionResource, if any.          *           * The option is a:          *<code>org.apache.camel.component.sjms.jms.ConnectionResource</code>          * type.          *           * Group: advanced          */
DECL|method|connectionResource ( Object connectionResource)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|connectionResource
parameter_list|(
name|Object
name|connectionResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionResource"
argument_list|,
name|connectionResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Initializes the connectionResource for the endpoint, which takes          * precedence over the component's connectionResource, if any.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.jms.ConnectionResource</code>          * type.          *           * Group: advanced          */
DECL|method|connectionResource ( String connectionResource)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|connectionResource
parameter_list|(
name|String
name|connectionResource
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectionResource"
argument_list|,
name|connectionResource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom DestinationCreationStrategy.          *           * The option is a:          *<code>org.apache.camel.component.sjms.jms.DestinationCreationStrategy</code> type.          *           * Group: advanced          */
DECL|method|destinationCreationStrategy ( Object destinationCreationStrategy)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|destinationCreationStrategy
parameter_list|(
name|Object
name|destinationCreationStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"destinationCreationStrategy"
argument_list|,
name|destinationCreationStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom DestinationCreationStrategy.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.jms.DestinationCreationStrategy</code> type.          *           * Group: advanced          */
DECL|method|destinationCreationStrategy ( String destinationCreationStrategy)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|destinationCreationStrategy
parameter_list|(
name|String
name|destinationCreationStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"destinationCreationStrategy"
argument_list|,
name|destinationCreationStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the JMS Exception Listener that is to be notified of any          * underlying JMS exceptions.          *           * The option is a:<code>javax.jms.ExceptionListener</code> type.          *           * Group: advanced          */
DECL|method|exceptionListener ( Object exceptionListener)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|exceptionListener
parameter_list|(
name|Object
name|exceptionListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionListener"
argument_list|,
name|exceptionListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the JMS Exception Listener that is to be notified of any          * underlying JMS exceptions.          *           * The option will be converted to a          *<code>javax.jms.ExceptionListener</code> type.          *           * Group: advanced          */
DECL|method|exceptionListener ( String exceptionListener)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|exceptionListener
parameter_list|(
name|String
name|exceptionListener
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionListener"
argument_list|,
name|exceptionListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          *           * The option is a:          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          *           * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to include all JMSXxxx properties when mapping from JMS to          * Camel Message. Setting this to true will include properties such as          * JMSXAppID, and JMSXUserID etc. Note: If you are using a custom          * headerFilterStrategy then this option does not apply.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|includeAllJMSXProperties ( boolean includeAllJMSXProperties)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|includeAllJMSXProperties
parameter_list|(
name|boolean
name|includeAllJMSXProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"includeAllJMSXProperties"
argument_list|,
name|includeAllJMSXProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to include all JMSXxxx properties when mapping from JMS to          * Camel Message. Setting this to true will include properties such as          * JMSXAppID, and JMSXUserID etc. Note: If you are using a custom          * headerFilterStrategy then this option does not apply.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|includeAllJMSXProperties ( String includeAllJMSXProperties)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|includeAllJMSXProperties
parameter_list|(
name|String
name|includeAllJMSXProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"includeAllJMSXProperties"
argument_list|,
name|includeAllJMSXProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Pluggable strategy for encoding and decoding JMS keys so they can be          * compliant with the JMS specification. Camel provides two          * implementations out of the box: default and passthrough. The default          * strategy will safely marshal dots and hyphens (. and -). The          * passthrough strategy leaves the key as is. Can be used for JMS          * brokers which do not care whether JMS header keys contain illegal          * characters. You can provide your own implementation of the          * org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it          * using the # notation.          *           * The option is a:          *<code>org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy</code>          * type.          *           * Group: advanced          */
DECL|method|jmsKeyFormatStrategy ( Object jmsKeyFormatStrategy)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|jmsKeyFormatStrategy
parameter_list|(
name|Object
name|jmsKeyFormatStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jmsKeyFormatStrategy"
argument_list|,
name|jmsKeyFormatStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Pluggable strategy for encoding and decoding JMS keys so they can be          * compliant with the JMS specification. Camel provides two          * implementations out of the box: default and passthrough. The default          * strategy will safely marshal dots and hyphens (. and -). The          * passthrough strategy leaves the key as is. Can be used for JMS          * brokers which do not care whether JMS header keys contain illegal          * characters. You can provide your own implementation of the          * org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it          * using the # notation.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy</code>          * type.          *           * Group: advanced          */
DECL|method|jmsKeyFormatStrategy ( String jmsKeyFormatStrategy)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|jmsKeyFormatStrategy
parameter_list|(
name|String
name|jmsKeyFormatStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"jmsKeyFormatStrategy"
argument_list|,
name|jmsKeyFormatStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether Camel should auto map the received JMS message to a          * suited payload type, such as javax.jms.TextMessage to a String etc.          * See section about how mapping works below for more details.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|mapJmsMessage (boolean mapJmsMessage)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|mapJmsMessage
parameter_list|(
name|boolean
name|mapJmsMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mapJmsMessage"
argument_list|,
name|mapJmsMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether Camel should auto map the received JMS message to a          * suited payload type, such as javax.jms.TextMessage to a String etc.          * See section about how mapping works below for more details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|mapJmsMessage (String mapJmsMessage)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|mapJmsMessage
parameter_list|(
name|String
name|mapJmsMessage
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mapJmsMessage"
argument_list|,
name|mapJmsMessage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the given MessageCreatedStrategy which are invoked when Camel          * creates new instances of javax.jms.Message objects when Camel is          * sending a JMS message.          *           * The option is a:          *<code>org.apache.camel.component.sjms.jms.MessageCreatedStrategy</code> type.          *           * Group: advanced          */
DECL|method|messageCreatedStrategy ( Object messageCreatedStrategy)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|messageCreatedStrategy
parameter_list|(
name|Object
name|messageCreatedStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"messageCreatedStrategy"
argument_list|,
name|messageCreatedStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use the given MessageCreatedStrategy which are invoked when Camel          * creates new instances of javax.jms.Message objects when Camel is          * sending a JMS message.          *           * The option will be converted to a          *<code>org.apache.camel.component.sjms.jms.MessageCreatedStrategy</code> type.          *           * Group: advanced          */
DECL|method|messageCreatedStrategy ( String messageCreatedStrategy)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|messageCreatedStrategy
parameter_list|(
name|String
name|messageCreatedStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"messageCreatedStrategy"
argument_list|,
name|messageCreatedStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to share JMS session with other SJMS endpoints.          * Turn this off if your route is accessing to multiple JMS providers.          * If you need transaction against multiple JMS providers, use jms          * component to leverage XA transaction.          *           * The option is a:<code>boolean</code> type.          *           * Group: transaction (advanced)          */
DECL|method|sharedJMSSession ( boolean sharedJMSSession)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|sharedJMSSession
parameter_list|(
name|boolean
name|sharedJMSSession
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sharedJMSSession"
argument_list|,
name|sharedJMSSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to share JMS session with other SJMS endpoints.          * Turn this off if your route is accessing to multiple JMS providers.          * If you need transaction against multiple JMS providers, use jms          * component to leverage XA transaction.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: transaction (advanced)          */
DECL|method|sharedJMSSession ( String sharedJMSSession)
specifier|default
name|AdvancedSjmsEndpointBuilder
name|sharedJMSSession
parameter_list|(
name|String
name|sharedJMSSession
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sharedJMSSession"
argument_list|,
name|sharedJMSSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.sjms.jms.SessionAcknowledgementType</code> enum.      */
DECL|enum|SessionAcknowledgementType
enum|enum
name|SessionAcknowledgementType
block|{
DECL|enumConstant|AUTO_ACKNOWLEDGE
name|AUTO_ACKNOWLEDGE
block|,
DECL|enumConstant|CLIENT_ACKNOWLEDGE
name|CLIENT_ACKNOWLEDGE
block|,
DECL|enumConstant|DUPS_OK_ACKNOWLEDGE
name|DUPS_OK_ACKNOWLEDGE
block|,
DECL|enumConstant|SESSION_TRANSACTED
name|SESSION_TRANSACTED
block|;     }
comment|/**      * Simple JMS (camel-sjms)      * The sjms component (simple jms) allows messages to be sent to (or      * consumed from) a JMS Queue or Topic (uses JMS 1.x API).      *       * Category: messaging      * Available as of version: 2.11      * Maven coordinates: org.apache.camel:camel-sjms      *       * Syntax:<code>sjms:destinationType:destinationName</code>      *       * Path parameter: destinationType      * The kind of destination to use      * Default value: queue      * The value can be one of: queue, topic      *       * Path parameter: destinationName (required)      * DestinationName is a JMS queue or topic name. By default, the      * destinationName is interpreted as a queue name.      */
DECL|method|sjms (String path)
specifier|default
name|SjmsEndpointBuilder
name|sjms
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|SjmsEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|SjmsEndpointBuilder
implements|,
name|AdvancedSjmsEndpointBuilder
block|{
specifier|public
name|SjmsEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"sjms"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SjmsEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

