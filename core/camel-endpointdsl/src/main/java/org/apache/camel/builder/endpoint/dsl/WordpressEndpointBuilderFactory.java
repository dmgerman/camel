begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * Integrates Camel with Wordpress.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|WordpressEndpointBuilderFactory
specifier|public
interface|interface
name|WordpressEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Wordpress component.      */
DECL|interface|WordpressEndpointConsumerBuilder
specifier|public
interface|interface
name|WordpressEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedWordpressEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedWordpressEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The endpoint operation.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|operation (String operation)
specifier|default
name|WordpressEndpointConsumerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The second part of an endpoint operation. Needed only when endpoint          * semantic is not enough, like wordpress:post:delete.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|operationDetail ( String operationDetail)
specifier|default
name|WordpressEndpointConsumerBuilder
name|operationDetail
parameter_list|(
name|String
name|operationDetail
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operationDetail"
argument_list|,
name|operationDetail
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Wordpress REST API version.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|apiVersion (String apiVersion)
specifier|default
name|WordpressEndpointConsumerBuilder
name|apiVersion
parameter_list|(
name|String
name|apiVersion
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiVersion"
argument_list|,
name|apiVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The criteria to use with complex searches.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: common          */
DECL|method|criteria ( Map<String, Object> criteria)
specifier|default
name|WordpressEndpointConsumerBuilder
name|criteria
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|criteria
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"criteria"
argument_list|,
name|criteria
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The criteria to use with complex searches.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: common          */
DECL|method|criteria (String criteria)
specifier|default
name|WordpressEndpointConsumerBuilder
name|criteria
parameter_list|(
name|String
name|criteria
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"criteria"
argument_list|,
name|criteria
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to bypass trash and force deletion.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: common          */
DECL|method|force (Boolean force)
specifier|default
name|WordpressEndpointConsumerBuilder
name|force
parameter_list|(
name|Boolean
name|force
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"force"
argument_list|,
name|force
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to bypass trash and force deletion.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: common          */
DECL|method|force (String force)
specifier|default
name|WordpressEndpointConsumerBuilder
name|force
parameter_list|(
name|String
name|force
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"force"
argument_list|,
name|force
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The entity ID. Should be passed when the operation performed requires          * a specific entity, e.g. deleting a post.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|id (Integer id)
specifier|default
name|WordpressEndpointConsumerBuilder
name|id
parameter_list|(
name|Integer
name|id
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The entity ID. Should be passed when the operation performed requires          * a specific entity, e.g. deleting a post.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|id (String id)
specifier|default
name|WordpressEndpointConsumerBuilder
name|id
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password from authorized user.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|password (String password)
specifier|default
name|WordpressEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Search criteria.          *           * The option is a:          *<code>org.apache.camel.component.wordpress.api.model.SearchCriteria</code> type.          *           * Group: common          */
DECL|method|searchCriteria ( Object searchCriteria)
specifier|default
name|WordpressEndpointConsumerBuilder
name|searchCriteria
parameter_list|(
name|Object
name|searchCriteria
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"searchCriteria"
argument_list|,
name|searchCriteria
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Search criteria.          *           * The option will be converted to a          *<code>org.apache.camel.component.wordpress.api.model.SearchCriteria</code> type.          *           * Group: common          */
DECL|method|searchCriteria ( String searchCriteria)
specifier|default
name|WordpressEndpointConsumerBuilder
name|searchCriteria
parameter_list|(
name|String
name|searchCriteria
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"searchCriteria"
argument_list|,
name|searchCriteria
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Wordpress API URL from your site, e.g.          * http://myblog.com/wp-json/.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: common          */
DECL|method|url (String url)
specifier|default
name|WordpressEndpointConsumerBuilder
name|url
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"url"
argument_list|,
name|url
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Authorized user to perform writing operations.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|user (String user)
specifier|default
name|WordpressEndpointConsumerBuilder
name|user
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"user"
argument_list|,
name|user
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|WordpressEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|WordpressEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Wordpress component.      */
DECL|interface|AdvancedWordpressEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedWordpressEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|WordpressEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|WordpressEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedWordpressEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedWordpressEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedWordpressEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedWordpressEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedWordpressEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedWordpressEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedWordpressEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedWordpressEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Wordpress component.      */
DECL|interface|WordpressEndpointProducerBuilder
specifier|public
interface|interface
name|WordpressEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedWordpressEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedWordpressEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The endpoint operation.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|operation (String operation)
specifier|default
name|WordpressEndpointProducerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The second part of an endpoint operation. Needed only when endpoint          * semantic is not enough, like wordpress:post:delete.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|operationDetail ( String operationDetail)
specifier|default
name|WordpressEndpointProducerBuilder
name|operationDetail
parameter_list|(
name|String
name|operationDetail
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operationDetail"
argument_list|,
name|operationDetail
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Wordpress REST API version.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|apiVersion (String apiVersion)
specifier|default
name|WordpressEndpointProducerBuilder
name|apiVersion
parameter_list|(
name|String
name|apiVersion
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiVersion"
argument_list|,
name|apiVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The criteria to use with complex searches.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: common          */
DECL|method|criteria ( Map<String, Object> criteria)
specifier|default
name|WordpressEndpointProducerBuilder
name|criteria
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|criteria
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"criteria"
argument_list|,
name|criteria
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The criteria to use with complex searches.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: common          */
DECL|method|criteria (String criteria)
specifier|default
name|WordpressEndpointProducerBuilder
name|criteria
parameter_list|(
name|String
name|criteria
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"criteria"
argument_list|,
name|criteria
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to bypass trash and force deletion.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: common          */
DECL|method|force (Boolean force)
specifier|default
name|WordpressEndpointProducerBuilder
name|force
parameter_list|(
name|Boolean
name|force
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"force"
argument_list|,
name|force
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to bypass trash and force deletion.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: common          */
DECL|method|force (String force)
specifier|default
name|WordpressEndpointProducerBuilder
name|force
parameter_list|(
name|String
name|force
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"force"
argument_list|,
name|force
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The entity ID. Should be passed when the operation performed requires          * a specific entity, e.g. deleting a post.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|id (Integer id)
specifier|default
name|WordpressEndpointProducerBuilder
name|id
parameter_list|(
name|Integer
name|id
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The entity ID. Should be passed when the operation performed requires          * a specific entity, e.g. deleting a post.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|id (String id)
specifier|default
name|WordpressEndpointProducerBuilder
name|id
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password from authorized user.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|password (String password)
specifier|default
name|WordpressEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Search criteria.          *           * The option is a:          *<code>org.apache.camel.component.wordpress.api.model.SearchCriteria</code> type.          *           * Group: common          */
DECL|method|searchCriteria ( Object searchCriteria)
specifier|default
name|WordpressEndpointProducerBuilder
name|searchCriteria
parameter_list|(
name|Object
name|searchCriteria
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"searchCriteria"
argument_list|,
name|searchCriteria
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Search criteria.          *           * The option will be converted to a          *<code>org.apache.camel.component.wordpress.api.model.SearchCriteria</code> type.          *           * Group: common          */
DECL|method|searchCriteria ( String searchCriteria)
specifier|default
name|WordpressEndpointProducerBuilder
name|searchCriteria
parameter_list|(
name|String
name|searchCriteria
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"searchCriteria"
argument_list|,
name|searchCriteria
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Wordpress API URL from your site, e.g.          * http://myblog.com/wp-json/.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: common          */
DECL|method|url (String url)
specifier|default
name|WordpressEndpointProducerBuilder
name|url
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"url"
argument_list|,
name|url
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Authorized user to perform writing operations.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|user (String user)
specifier|default
name|WordpressEndpointProducerBuilder
name|user
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"user"
argument_list|,
name|user
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|WordpressEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|WordpressEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Wordpress component.      */
DECL|interface|AdvancedWordpressEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedWordpressEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|WordpressEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|WordpressEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedWordpressEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedWordpressEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedWordpressEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedWordpressEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Wordpress component.      */
DECL|interface|WordpressEndpointBuilder
specifier|public
interface|interface
name|WordpressEndpointBuilder
extends|extends
name|WordpressEndpointConsumerBuilder
extends|,
name|WordpressEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedWordpressEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedWordpressEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The endpoint operation.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|operation (String operation)
specifier|default
name|WordpressEndpointBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The second part of an endpoint operation. Needed only when endpoint          * semantic is not enough, like wordpress:post:delete.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|operationDetail (String operationDetail)
specifier|default
name|WordpressEndpointBuilder
name|operationDetail
parameter_list|(
name|String
name|operationDetail
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operationDetail"
argument_list|,
name|operationDetail
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Wordpress REST API version.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|apiVersion (String apiVersion)
specifier|default
name|WordpressEndpointBuilder
name|apiVersion
parameter_list|(
name|String
name|apiVersion
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiVersion"
argument_list|,
name|apiVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The criteria to use with complex searches.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: common          */
DECL|method|criteria (Map<String, Object> criteria)
specifier|default
name|WordpressEndpointBuilder
name|criteria
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|criteria
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"criteria"
argument_list|,
name|criteria
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The criteria to use with complex searches.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: common          */
DECL|method|criteria (String criteria)
specifier|default
name|WordpressEndpointBuilder
name|criteria
parameter_list|(
name|String
name|criteria
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"criteria"
argument_list|,
name|criteria
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to bypass trash and force deletion.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: common          */
DECL|method|force (Boolean force)
specifier|default
name|WordpressEndpointBuilder
name|force
parameter_list|(
name|Boolean
name|force
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"force"
argument_list|,
name|force
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to bypass trash and force deletion.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: common          */
DECL|method|force (String force)
specifier|default
name|WordpressEndpointBuilder
name|force
parameter_list|(
name|String
name|force
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"force"
argument_list|,
name|force
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The entity ID. Should be passed when the operation performed requires          * a specific entity, e.g. deleting a post.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: common          */
DECL|method|id (Integer id)
specifier|default
name|WordpressEndpointBuilder
name|id
parameter_list|(
name|Integer
name|id
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The entity ID. Should be passed when the operation performed requires          * a specific entity, e.g. deleting a post.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: common          */
DECL|method|id (String id)
specifier|default
name|WordpressEndpointBuilder
name|id
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password from authorized user.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|password (String password)
specifier|default
name|WordpressEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Search criteria.          *           * The option is a:          *<code>org.apache.camel.component.wordpress.api.model.SearchCriteria</code> type.          *           * Group: common          */
DECL|method|searchCriteria (Object searchCriteria)
specifier|default
name|WordpressEndpointBuilder
name|searchCriteria
parameter_list|(
name|Object
name|searchCriteria
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"searchCriteria"
argument_list|,
name|searchCriteria
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Search criteria.          *           * The option will be converted to a          *<code>org.apache.camel.component.wordpress.api.model.SearchCriteria</code> type.          *           * Group: common          */
DECL|method|searchCriteria (String searchCriteria)
specifier|default
name|WordpressEndpointBuilder
name|searchCriteria
parameter_list|(
name|String
name|searchCriteria
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"searchCriteria"
argument_list|,
name|searchCriteria
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Wordpress API URL from your site, e.g.          * http://myblog.com/wp-json/.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: common          */
DECL|method|url (String url)
specifier|default
name|WordpressEndpointBuilder
name|url
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"url"
argument_list|,
name|url
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Authorized user to perform writing operations.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|user (String user)
specifier|default
name|WordpressEndpointBuilder
name|user
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"user"
argument_list|,
name|user
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Wordpress component.      */
DECL|interface|AdvancedWordpressEndpointBuilder
specifier|public
interface|interface
name|AdvancedWordpressEndpointBuilder
extends|extends
name|AdvancedWordpressEndpointConsumerBuilder
extends|,
name|AdvancedWordpressEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|WordpressEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|WordpressEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedWordpressEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedWordpressEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedWordpressEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedWordpressEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Integrates Camel with Wordpress.      * Maven coordinates: org.apache.camel:camel-wordpress      */
DECL|method|wordpress (String path)
specifier|default
name|WordpressEndpointBuilder
name|wordpress
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|WordpressEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|WordpressEndpointBuilder
implements|,
name|AdvancedWordpressEndpointBuilder
block|{
specifier|public
name|WordpressEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"wordpress"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|WordpressEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

