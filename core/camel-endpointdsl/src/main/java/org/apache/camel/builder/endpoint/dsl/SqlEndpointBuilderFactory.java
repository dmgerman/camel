begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PollingConsumerPollStrategy
import|;
end_import

begin_comment
comment|/**  * The sql component allows you to work with databases using JDBC SQL queries.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|SqlEndpointBuilderFactory
specifier|public
interface|interface
name|SqlEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the SQL component.      */
DECL|interface|SqlEndpointConsumerBuilder
specifier|public
interface|interface
name|SqlEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSqlEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether to allow using named parameters in the queries.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|allowNamedParameters ( boolean allowNamedParameters)
specifier|default
name|SqlEndpointConsumerBuilder
name|allowNamedParameters
parameter_list|(
name|boolean
name|allowNamedParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowNamedParameters"
argument_list|,
name|allowNamedParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to allow using named parameters in the queries.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|allowNamedParameters ( String allowNamedParameters)
specifier|default
name|SqlEndpointConsumerBuilder
name|allowNamedParameters
parameter_list|(
name|String
name|allowNamedParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowNamedParameters"
argument_list|,
name|allowNamedParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the DataSource to use to communicate with the database.          *           * The option is a:<code>javax.sql.DataSource</code> type.          *           * Group: common          */
DECL|method|dataSource (Object dataSource)
specifier|default
name|SqlEndpointConsumerBuilder
name|dataSource
parameter_list|(
name|Object
name|dataSource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataSource"
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the DataSource to use to communicate with the database.          *           * The option will be converted to a<code>javax.sql.DataSource</code>          * type.          *           * Group: common          */
DECL|method|dataSource (String dataSource)
specifier|default
name|SqlEndpointConsumerBuilder
name|dataSource
parameter_list|(
name|String
name|dataSource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataSource"
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the reference to a DataSource to lookup from the registry, to          * use for communicating with the database.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|dataSourceRef (String dataSourceRef)
specifier|default
name|SqlEndpointConsumerBuilder
name|dataSourceRef
parameter_list|(
name|String
name|dataSourceRef
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataSourceRef"
argument_list|,
name|dataSourceRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify the full package and class name to use as conversion when          * outputType=SelectOne.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|outputClass (String outputClass)
specifier|default
name|SqlEndpointConsumerBuilder
name|outputClass
parameter_list|(
name|String
name|outputClass
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputClass"
argument_list|,
name|outputClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Store the query result in a header instead of the message body. By          * default, outputHeader == null and the query result is stored in the          * message body, any existing content in the message body is discarded.          * If outputHeader is set, the value is used as the name of the header          * to store the query result and the original message body is preserved.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|outputHeader (String outputHeader)
specifier|default
name|SqlEndpointConsumerBuilder
name|outputHeader
parameter_list|(
name|String
name|outputHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputHeader"
argument_list|,
name|outputHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Make the output of consumer or producer to SelectList as List of Map,          * or SelectOne as single Java object in the following way: a) If the          * query has only single column, then that JDBC Column object is          * returned. (such as SELECT COUNT( ) FROM PROJECT will return a Long          * object. b) If the query has more than one column, then it will return          * a Map of that result. c) If the outputClass is set, then it will          * convert the query result into an Java bean object by calling all the          * setters that match the column names. It will assume your class has a          * default constructor to create instance with. d) If the query resulted          * in more than one rows, it throws an non-unique result exception.          *           * The option is a:          *<code>org.apache.camel.component.sql.SqlOutputType</code> type.          *           * Group: common          */
DECL|method|outputType (SqlOutputType outputType)
specifier|default
name|SqlEndpointConsumerBuilder
name|outputType
parameter_list|(
name|SqlOutputType
name|outputType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputType"
argument_list|,
name|outputType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Make the output of consumer or producer to SelectList as List of Map,          * or SelectOne as single Java object in the following way: a) If the          * query has only single column, then that JDBC Column object is          * returned. (such as SELECT COUNT( ) FROM PROJECT will return a Long          * object. b) If the query has more than one column, then it will return          * a Map of that result. c) If the outputClass is set, then it will          * convert the query result into an Java bean object by calling all the          * setters that match the column names. It will assume your class has a          * default constructor to create instance with. d) If the query resulted          * in more than one rows, it throws an non-unique result exception.          *           * The option will be converted to a          *<code>org.apache.camel.component.sql.SqlOutputType</code> type.          *           * Group: common          */
DECL|method|outputType (String outputType)
specifier|default
name|SqlEndpointConsumerBuilder
name|outputType
parameter_list|(
name|String
name|outputType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputType"
argument_list|,
name|outputType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The separator to use when parameter values is taken from message body          * (if the body is a String type), to be inserted at # placeholders.          * Notice if you use named parameters, then a Map type is used instead.          * The default value is comma.          *           * The option is a:<code>char</code> type.          *           * Group: common          */
DECL|method|separator (char separator)
specifier|default
name|SqlEndpointConsumerBuilder
name|separator
parameter_list|(
name|char
name|separator
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"separator"
argument_list|,
name|separator
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The separator to use when parameter values is taken from message body          * (if the body is a String type), to be inserted at # placeholders.          * Notice if you use named parameters, then a Map type is used instead.          * The default value is comma.          *           * The option will be converted to a<code>char</code> type.          *           * Group: common          */
DECL|method|separator (String separator)
specifier|default
name|SqlEndpointConsumerBuilder
name|separator
parameter_list|(
name|String
name|separator
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"separator"
argument_list|,
name|separator
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to break batch if onConsume failed.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|breakBatchOnConsumeFail ( boolean breakBatchOnConsumeFail)
specifier|default
name|SqlEndpointConsumerBuilder
name|breakBatchOnConsumeFail
parameter_list|(
name|boolean
name|breakBatchOnConsumeFail
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"breakBatchOnConsumeFail"
argument_list|,
name|breakBatchOnConsumeFail
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to break batch if onConsume failed.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|breakBatchOnConsumeFail ( String breakBatchOnConsumeFail)
specifier|default
name|SqlEndpointConsumerBuilder
name|breakBatchOnConsumeFail
parameter_list|(
name|String
name|breakBatchOnConsumeFail
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"breakBatchOnConsumeFail"
argument_list|,
name|breakBatchOnConsumeFail
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|SqlEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|SqlEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets an expected update count to validate when using onConsume.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|expectedUpdateCount ( int expectedUpdateCount)
specifier|default
name|SqlEndpointConsumerBuilder
name|expectedUpdateCount
parameter_list|(
name|int
name|expectedUpdateCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"expectedUpdateCount"
argument_list|,
name|expectedUpdateCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets an expected update count to validate when using onConsume.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|expectedUpdateCount ( String expectedUpdateCount)
specifier|default
name|SqlEndpointConsumerBuilder
name|expectedUpdateCount
parameter_list|(
name|String
name|expectedUpdateCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"expectedUpdateCount"
argument_list|,
name|expectedUpdateCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum number of messages to poll.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|maxMessagesPerPoll ( int maxMessagesPerPoll)
specifier|default
name|SqlEndpointConsumerBuilder
name|maxMessagesPerPoll
parameter_list|(
name|int
name|maxMessagesPerPoll
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessagesPerPoll"
argument_list|,
name|maxMessagesPerPoll
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the maximum number of messages to poll.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|maxMessagesPerPoll ( String maxMessagesPerPoll)
specifier|default
name|SqlEndpointConsumerBuilder
name|maxMessagesPerPoll
parameter_list|(
name|String
name|maxMessagesPerPoll
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessagesPerPoll"
argument_list|,
name|maxMessagesPerPoll
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * After processing each row then this query can be executed, if the          * Exchange was processed successfully, for example to mark the row as          * processed. The query can have parameter.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|onConsume (String onConsume)
specifier|default
name|SqlEndpointConsumerBuilder
name|onConsume
parameter_list|(
name|String
name|onConsume
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"onConsume"
argument_list|,
name|onConsume
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * After processing the entire batch, this query can be executed to bulk          * update rows etc. The query cannot have parameters.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|onConsumeBatchComplete ( String onConsumeBatchComplete)
specifier|default
name|SqlEndpointConsumerBuilder
name|onConsumeBatchComplete
parameter_list|(
name|String
name|onConsumeBatchComplete
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"onConsumeBatchComplete"
argument_list|,
name|onConsumeBatchComplete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * After processing each row then this query can be executed, if the          * Exchange failed, for example to mark the row as failed. The query can          * have parameter.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|onConsumeFailed ( String onConsumeFailed)
specifier|default
name|SqlEndpointConsumerBuilder
name|onConsumeFailed
parameter_list|(
name|String
name|onConsumeFailed
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"onConsumeFailed"
argument_list|,
name|onConsumeFailed
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether empty resultset should be allowed to be sent to the next          * hop. Defaults to false. So the empty resultset will be filtered out.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|routeEmptyResultSet ( boolean routeEmptyResultSet)
specifier|default
name|SqlEndpointConsumerBuilder
name|routeEmptyResultSet
parameter_list|(
name|boolean
name|routeEmptyResultSet
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"routeEmptyResultSet"
argument_list|,
name|routeEmptyResultSet
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether empty resultset should be allowed to be sent to the next          * hop. Defaults to false. So the empty resultset will be filtered out.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|routeEmptyResultSet ( String routeEmptyResultSet)
specifier|default
name|SqlEndpointConsumerBuilder
name|routeEmptyResultSet
parameter_list|(
name|String
name|routeEmptyResultSet
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"routeEmptyResultSet"
argument_list|,
name|routeEmptyResultSet
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( boolean sendEmptyMessageWhenIdle)
specifier|default
name|SqlEndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|boolean
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( String sendEmptyMessageWhenIdle)
specifier|default
name|SqlEndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|String
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables or disables transaction. If enabled then if processing an          * exchange failed then the consumer break out processing any further          * exchanges to cause a rollback eager.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|transacted (boolean transacted)
specifier|default
name|SqlEndpointConsumerBuilder
name|transacted
parameter_list|(
name|boolean
name|transacted
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"transacted"
argument_list|,
name|transacted
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables or disables transaction. If enabled then if processing an          * exchange failed then the consumer break out processing any further          * exchanges to cause a rollback eager.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|transacted (String transacted)
specifier|default
name|SqlEndpointConsumerBuilder
name|transacted
parameter_list|(
name|String
name|transacted
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"transacted"
argument_list|,
name|transacted
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets how resultset should be delivered to route. Indicates delivery          * as either a list or individual object. defaults to true.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|useIterator (boolean useIterator)
specifier|default
name|SqlEndpointConsumerBuilder
name|useIterator
parameter_list|(
name|boolean
name|useIterator
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useIterator"
argument_list|,
name|useIterator
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets how resultset should be delivered to route. Indicates delivery          * as either a list or individual object. defaults to true.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|useIterator (String useIterator)
specifier|default
name|SqlEndpointConsumerBuilder
name|useIterator
parameter_list|(
name|String
name|useIterator
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useIterator"
argument_list|,
name|useIterator
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( int backoffErrorThreshold)
specifier|default
name|SqlEndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|int
name|backoffErrorThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( String backoffErrorThreshold)
specifier|default
name|SqlEndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|String
name|backoffErrorThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( int backoffIdleThreshold)
specifier|default
name|SqlEndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|int
name|backoffIdleThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( String backoffIdleThreshold)
specifier|default
name|SqlEndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|String
name|backoffIdleThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( int backoffMultiplier)
specifier|default
name|SqlEndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|int
name|backoffMultiplier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( String backoffMultiplier)
specifier|default
name|SqlEndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|String
name|backoffMultiplier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (long delay)
specifier|default
name|SqlEndpointConsumerBuilder
name|delay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (String delay)
specifier|default
name|SqlEndpointConsumerBuilder
name|delay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy (boolean greedy)
specifier|default
name|SqlEndpointConsumerBuilder
name|greedy
parameter_list|(
name|boolean
name|greedy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy (String greedy)
specifier|default
name|SqlEndpointConsumerBuilder
name|greedy
parameter_list|(
name|String
name|greedy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay (long initialDelay)
specifier|default
name|SqlEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|long
name|initialDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay (String initialDelay)
specifier|default
name|SqlEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|String
name|initialDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies a maximum limit of number of fires. So if you set it to 1,          * the scheduler will only fire once. If you set it to 5, it will only          * fire five times. A value of zero or negative means fire forever.          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|repeatCount (long repeatCount)
specifier|default
name|SqlEndpointConsumerBuilder
name|repeatCount
parameter_list|(
name|long
name|repeatCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"repeatCount"
argument_list|,
name|repeatCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies a maximum limit of number of fires. So if you set it to 1,          * the scheduler will only fire once. If you set it to 5, it will only          * fire five times. A value of zero or negative means fire forever.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|repeatCount (String repeatCount)
specifier|default
name|SqlEndpointConsumerBuilder
name|repeatCount
parameter_list|(
name|String
name|repeatCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"repeatCount"
argument_list|,
name|repeatCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option is a:<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( LoggingLevel runLoggingLevel)
specifier|default
name|SqlEndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|LoggingLevel
name|runLoggingLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( String runLoggingLevel)
specifier|default
name|SqlEndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|String
name|runLoggingLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option is a:          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( ScheduledExecutorService scheduledExecutorService)
specifier|default
name|SqlEndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|ScheduledExecutorService
name|scheduledExecutorService
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option will be converted to a          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( String scheduledExecutorService)
specifier|default
name|SqlEndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|String
name|scheduledExecutorService
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a cron scheduler from either camel-spring or camel-quartz          * component.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: scheduler          */
DECL|method|scheduler (String scheduler)
specifier|default
name|SqlEndpointConsumerBuilder
name|scheduler
parameter_list|(
name|String
name|scheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduler"
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz, Spring based scheduler.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( Map<String, Object> schedulerProperties)
specifier|default
name|SqlEndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|schedulerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz, Spring based scheduler.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( String schedulerProperties)
specifier|default
name|SqlEndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|String
name|schedulerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler (boolean startScheduler)
specifier|default
name|SqlEndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|boolean
name|startScheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler (String startScheduler)
specifier|default
name|SqlEndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|String
name|startScheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option is a:<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit (TimeUnit timeUnit)
specifier|default
name|SqlEndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option will be converted to a          *<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit (String timeUnit)
specifier|default
name|SqlEndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|String
name|timeUnit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay (boolean useFixedDelay)
specifier|default
name|SqlEndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|boolean
name|useFixedDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay (String useFixedDelay)
specifier|default
name|SqlEndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|String
name|useFixedDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the SQL component.      */
DECL|interface|AdvancedSqlEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedSqlEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SqlEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SqlEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option is a:          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( PollingConsumerPollStrategy pollStrategy)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|PollingConsumerPollStrategy
name|pollStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option will be converted to a          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( String pollStrategy)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|String
name|pollStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to plugin to use a custom          * org.apache.camel.component.sql.SqlProcessingStrategy to execute          * queries when the consumer has processed the rows/batch.          *           * The option is a:          *<code>org.apache.camel.component.sql.SqlProcessingStrategy</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|processingStrategy ( Object processingStrategy)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|processingStrategy
parameter_list|(
name|Object
name|processingStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"processingStrategy"
argument_list|,
name|processingStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to plugin to use a custom          * org.apache.camel.component.sql.SqlProcessingStrategy to execute          * queries when the consumer has processed the rows/batch.          *           * The option will be converted to a          *<code>org.apache.camel.component.sql.SqlProcessingStrategy</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|processingStrategy ( String processingStrategy)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|processingStrategy
parameter_list|(
name|String
name|processingStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"processingStrategy"
argument_list|,
name|processingStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled then the populateStatement method from          * org.apache.camel.component.sql.SqlPrepareStatementStrategy is always          * invoked, also if there is no expected parameters to be prepared. When          * this is false then the populateStatement is only invoked if there is          * 1 or more expected parameters to be set; for example this avoids          * reading the message body/headers for SQL queries with no parameters.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|alwaysPopulateStatement ( boolean alwaysPopulateStatement)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|alwaysPopulateStatement
parameter_list|(
name|boolean
name|alwaysPopulateStatement
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"alwaysPopulateStatement"
argument_list|,
name|alwaysPopulateStatement
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled then the populateStatement method from          * org.apache.camel.component.sql.SqlPrepareStatementStrategy is always          * invoked, also if there is no expected parameters to be prepared. When          * this is false then the populateStatement is only invoked if there is          * 1 or more expected parameters to be set; for example this avoids          * reading the message body/headers for SQL queries with no parameters.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|alwaysPopulateStatement ( String alwaysPopulateStatement)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|alwaysPopulateStatement
parameter_list|(
name|String
name|alwaysPopulateStatement
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"alwaysPopulateStatement"
argument_list|,
name|alwaysPopulateStatement
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set greater than zero, then Camel will use this count value of          * parameters to replace instead of querying via JDBC metadata API. This          * is useful if the JDBC vendor could not return correct parameters          * count, then user may override instead.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|parametersCount ( int parametersCount)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|parametersCount
parameter_list|(
name|int
name|parametersCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"parametersCount"
argument_list|,
name|parametersCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set greater than zero, then Camel will use this count value of          * parameters to replace instead of querying via JDBC metadata API. This          * is useful if the JDBC vendor could not return correct parameters          * count, then user may override instead.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|parametersCount ( String parametersCount)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|parametersCount
parameter_list|(
name|String
name|parametersCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"parametersCount"
argument_list|,
name|parametersCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies a character that will be replaced to in SQL query. Notice,          * that it is simple String.replaceAll() operation and no SQL parsing is          * involved (quoted strings will also change).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|placeholder ( String placeholder)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|placeholder
parameter_list|(
name|String
name|placeholder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"placeholder"
argument_list|,
name|placeholder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to plugin to use a custom          * org.apache.camel.component.sql.SqlPrepareStatementStrategy to control          * preparation of the query and prepared statement.          *           * The option is a:          *<code>org.apache.camel.component.sql.SqlPrepareStatementStrategy</code> type.          *           * Group: advanced          */
DECL|method|prepareStatementStrategy ( Object prepareStatementStrategy)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|prepareStatementStrategy
parameter_list|(
name|Object
name|prepareStatementStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"prepareStatementStrategy"
argument_list|,
name|prepareStatementStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to plugin to use a custom          * org.apache.camel.component.sql.SqlPrepareStatementStrategy to control          * preparation of the query and prepared statement.          *           * The option will be converted to a          *<code>org.apache.camel.component.sql.SqlPrepareStatementStrategy</code> type.          *           * Group: advanced          */
DECL|method|prepareStatementStrategy ( String prepareStatementStrategy)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|prepareStatementStrategy
parameter_list|(
name|String
name|prepareStatementStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"prepareStatementStrategy"
argument_list|,
name|prepareStatementStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the Spring JdbcTemplate with the key/values from the Map.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|templateOptions ( Map<String, Object> templateOptions)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|templateOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|templateOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"templateOptions"
argument_list|,
name|templateOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the Spring JdbcTemplate with the key/values from the Map.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|templateOptions ( String templateOptions)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|templateOptions
parameter_list|(
name|String
name|templateOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"templateOptions"
argument_list|,
name|templateOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to use placeholder and replace all placeholder          * characters with sign in the SQL queries. This option is default true.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|usePlaceholder ( boolean usePlaceholder)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|usePlaceholder
parameter_list|(
name|boolean
name|usePlaceholder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"usePlaceholder"
argument_list|,
name|usePlaceholder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to use placeholder and replace all placeholder          * characters with sign in the SQL queries. This option is default true.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|usePlaceholder ( String usePlaceholder)
specifier|default
name|AdvancedSqlEndpointConsumerBuilder
name|usePlaceholder
parameter_list|(
name|String
name|usePlaceholder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"usePlaceholder"
argument_list|,
name|usePlaceholder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the SQL component.      */
DECL|interface|SqlEndpointProducerBuilder
specifier|public
interface|interface
name|SqlEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSqlEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSqlEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether to allow using named parameters in the queries.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|allowNamedParameters ( boolean allowNamedParameters)
specifier|default
name|SqlEndpointProducerBuilder
name|allowNamedParameters
parameter_list|(
name|boolean
name|allowNamedParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowNamedParameters"
argument_list|,
name|allowNamedParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to allow using named parameters in the queries.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|allowNamedParameters ( String allowNamedParameters)
specifier|default
name|SqlEndpointProducerBuilder
name|allowNamedParameters
parameter_list|(
name|String
name|allowNamedParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowNamedParameters"
argument_list|,
name|allowNamedParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the DataSource to use to communicate with the database.          *           * The option is a:<code>javax.sql.DataSource</code> type.          *           * Group: common          */
DECL|method|dataSource (Object dataSource)
specifier|default
name|SqlEndpointProducerBuilder
name|dataSource
parameter_list|(
name|Object
name|dataSource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataSource"
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the DataSource to use to communicate with the database.          *           * The option will be converted to a<code>javax.sql.DataSource</code>          * type.          *           * Group: common          */
DECL|method|dataSource (String dataSource)
specifier|default
name|SqlEndpointProducerBuilder
name|dataSource
parameter_list|(
name|String
name|dataSource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataSource"
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the reference to a DataSource to lookup from the registry, to          * use for communicating with the database.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|dataSourceRef (String dataSourceRef)
specifier|default
name|SqlEndpointProducerBuilder
name|dataSourceRef
parameter_list|(
name|String
name|dataSourceRef
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataSourceRef"
argument_list|,
name|dataSourceRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify the full package and class name to use as conversion when          * outputType=SelectOne.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|outputClass (String outputClass)
specifier|default
name|SqlEndpointProducerBuilder
name|outputClass
parameter_list|(
name|String
name|outputClass
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputClass"
argument_list|,
name|outputClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Store the query result in a header instead of the message body. By          * default, outputHeader == null and the query result is stored in the          * message body, any existing content in the message body is discarded.          * If outputHeader is set, the value is used as the name of the header          * to store the query result and the original message body is preserved.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|outputHeader (String outputHeader)
specifier|default
name|SqlEndpointProducerBuilder
name|outputHeader
parameter_list|(
name|String
name|outputHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputHeader"
argument_list|,
name|outputHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Make the output of consumer or producer to SelectList as List of Map,          * or SelectOne as single Java object in the following way: a) If the          * query has only single column, then that JDBC Column object is          * returned. (such as SELECT COUNT( ) FROM PROJECT will return a Long          * object. b) If the query has more than one column, then it will return          * a Map of that result. c) If the outputClass is set, then it will          * convert the query result into an Java bean object by calling all the          * setters that match the column names. It will assume your class has a          * default constructor to create instance with. d) If the query resulted          * in more than one rows, it throws an non-unique result exception.          *           * The option is a:          *<code>org.apache.camel.component.sql.SqlOutputType</code> type.          *           * Group: common          */
DECL|method|outputType (SqlOutputType outputType)
specifier|default
name|SqlEndpointProducerBuilder
name|outputType
parameter_list|(
name|SqlOutputType
name|outputType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputType"
argument_list|,
name|outputType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Make the output of consumer or producer to SelectList as List of Map,          * or SelectOne as single Java object in the following way: a) If the          * query has only single column, then that JDBC Column object is          * returned. (such as SELECT COUNT( ) FROM PROJECT will return a Long          * object. b) If the query has more than one column, then it will return          * a Map of that result. c) If the outputClass is set, then it will          * convert the query result into an Java bean object by calling all the          * setters that match the column names. It will assume your class has a          * default constructor to create instance with. d) If the query resulted          * in more than one rows, it throws an non-unique result exception.          *           * The option will be converted to a          *<code>org.apache.camel.component.sql.SqlOutputType</code> type.          *           * Group: common          */
DECL|method|outputType (String outputType)
specifier|default
name|SqlEndpointProducerBuilder
name|outputType
parameter_list|(
name|String
name|outputType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputType"
argument_list|,
name|outputType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The separator to use when parameter values is taken from message body          * (if the body is a String type), to be inserted at # placeholders.          * Notice if you use named parameters, then a Map type is used instead.          * The default value is comma.          *           * The option is a:<code>char</code> type.          *           * Group: common          */
DECL|method|separator (char separator)
specifier|default
name|SqlEndpointProducerBuilder
name|separator
parameter_list|(
name|char
name|separator
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"separator"
argument_list|,
name|separator
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The separator to use when parameter values is taken from message body          * (if the body is a String type), to be inserted at # placeholders.          * Notice if you use named parameters, then a Map type is used instead.          * The default value is comma.          *           * The option will be converted to a<code>char</code> type.          *           * Group: common          */
DECL|method|separator (String separator)
specifier|default
name|SqlEndpointProducerBuilder
name|separator
parameter_list|(
name|String
name|separator
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"separator"
argument_list|,
name|separator
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables or disables batch mode.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|batch (boolean batch)
specifier|default
name|SqlEndpointProducerBuilder
name|batch
parameter_list|(
name|boolean
name|batch
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"batch"
argument_list|,
name|batch
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enables or disables batch mode.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|batch (String batch)
specifier|default
name|SqlEndpointProducerBuilder
name|batch
parameter_list|(
name|String
name|batch
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"batch"
argument_list|,
name|batch
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|SqlEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|SqlEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set, will ignore the results of the SQL query and use the existing          * IN message as the OUT message for the continuation of processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|noop (boolean noop)
specifier|default
name|SqlEndpointProducerBuilder
name|noop
parameter_list|(
name|boolean
name|noop
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"noop"
argument_list|,
name|noop
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set, will ignore the results of the SQL query and use the existing          * IN message as the OUT message for the continuation of processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|noop (String noop)
specifier|default
name|SqlEndpointProducerBuilder
name|noop
parameter_list|(
name|String
name|noop
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"noop"
argument_list|,
name|noop
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use the message body as the SQL and then headers for          * parameters. If this option is enabled then the SQL in the uri is not          * used.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|useMessageBodyForSql ( boolean useMessageBodyForSql)
specifier|default
name|SqlEndpointProducerBuilder
name|useMessageBodyForSql
parameter_list|(
name|boolean
name|useMessageBodyForSql
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useMessageBodyForSql"
argument_list|,
name|useMessageBodyForSql
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use the message body as the SQL and then headers for          * parameters. If this option is enabled then the SQL in the uri is not          * used.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|useMessageBodyForSql ( String useMessageBodyForSql)
specifier|default
name|SqlEndpointProducerBuilder
name|useMessageBodyForSql
parameter_list|(
name|String
name|useMessageBodyForSql
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useMessageBodyForSql"
argument_list|,
name|useMessageBodyForSql
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the SQL component.      */
DECL|interface|AdvancedSqlEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedSqlEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SqlEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SqlEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * If enabled then the populateStatement method from          * org.apache.camel.component.sql.SqlPrepareStatementStrategy is always          * invoked, also if there is no expected parameters to be prepared. When          * this is false then the populateStatement is only invoked if there is          * 1 or more expected parameters to be set; for example this avoids          * reading the message body/headers for SQL queries with no parameters.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|alwaysPopulateStatement ( boolean alwaysPopulateStatement)
specifier|default
name|AdvancedSqlEndpointProducerBuilder
name|alwaysPopulateStatement
parameter_list|(
name|boolean
name|alwaysPopulateStatement
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"alwaysPopulateStatement"
argument_list|,
name|alwaysPopulateStatement
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled then the populateStatement method from          * org.apache.camel.component.sql.SqlPrepareStatementStrategy is always          * invoked, also if there is no expected parameters to be prepared. When          * this is false then the populateStatement is only invoked if there is          * 1 or more expected parameters to be set; for example this avoids          * reading the message body/headers for SQL queries with no parameters.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|alwaysPopulateStatement ( String alwaysPopulateStatement)
specifier|default
name|AdvancedSqlEndpointProducerBuilder
name|alwaysPopulateStatement
parameter_list|(
name|String
name|alwaysPopulateStatement
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"alwaysPopulateStatement"
argument_list|,
name|alwaysPopulateStatement
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSqlEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSqlEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set greater than zero, then Camel will use this count value of          * parameters to replace instead of querying via JDBC metadata API. This          * is useful if the JDBC vendor could not return correct parameters          * count, then user may override instead.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|parametersCount ( int parametersCount)
specifier|default
name|AdvancedSqlEndpointProducerBuilder
name|parametersCount
parameter_list|(
name|int
name|parametersCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"parametersCount"
argument_list|,
name|parametersCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set greater than zero, then Camel will use this count value of          * parameters to replace instead of querying via JDBC metadata API. This          * is useful if the JDBC vendor could not return correct parameters          * count, then user may override instead.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|parametersCount ( String parametersCount)
specifier|default
name|AdvancedSqlEndpointProducerBuilder
name|parametersCount
parameter_list|(
name|String
name|parametersCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"parametersCount"
argument_list|,
name|parametersCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies a character that will be replaced to in SQL query. Notice,          * that it is simple String.replaceAll() operation and no SQL parsing is          * involved (quoted strings will also change).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|placeholder ( String placeholder)
specifier|default
name|AdvancedSqlEndpointProducerBuilder
name|placeholder
parameter_list|(
name|String
name|placeholder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"placeholder"
argument_list|,
name|placeholder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to plugin to use a custom          * org.apache.camel.component.sql.SqlPrepareStatementStrategy to control          * preparation of the query and prepared statement.          *           * The option is a:          *<code>org.apache.camel.component.sql.SqlPrepareStatementStrategy</code> type.          *           * Group: advanced          */
DECL|method|prepareStatementStrategy ( Object prepareStatementStrategy)
specifier|default
name|AdvancedSqlEndpointProducerBuilder
name|prepareStatementStrategy
parameter_list|(
name|Object
name|prepareStatementStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"prepareStatementStrategy"
argument_list|,
name|prepareStatementStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to plugin to use a custom          * org.apache.camel.component.sql.SqlPrepareStatementStrategy to control          * preparation of the query and prepared statement.          *           * The option will be converted to a          *<code>org.apache.camel.component.sql.SqlPrepareStatementStrategy</code> type.          *           * Group: advanced          */
DECL|method|prepareStatementStrategy ( String prepareStatementStrategy)
specifier|default
name|AdvancedSqlEndpointProducerBuilder
name|prepareStatementStrategy
parameter_list|(
name|String
name|prepareStatementStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"prepareStatementStrategy"
argument_list|,
name|prepareStatementStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSqlEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedSqlEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the Spring JdbcTemplate with the key/values from the Map.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|templateOptions ( Map<String, Object> templateOptions)
specifier|default
name|AdvancedSqlEndpointProducerBuilder
name|templateOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|templateOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"templateOptions"
argument_list|,
name|templateOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the Spring JdbcTemplate with the key/values from the Map.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|templateOptions ( String templateOptions)
specifier|default
name|AdvancedSqlEndpointProducerBuilder
name|templateOptions
parameter_list|(
name|String
name|templateOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"templateOptions"
argument_list|,
name|templateOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to use placeholder and replace all placeholder          * characters with sign in the SQL queries. This option is default true.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|usePlaceholder ( boolean usePlaceholder)
specifier|default
name|AdvancedSqlEndpointProducerBuilder
name|usePlaceholder
parameter_list|(
name|boolean
name|usePlaceholder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"usePlaceholder"
argument_list|,
name|usePlaceholder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to use placeholder and replace all placeholder          * characters with sign in the SQL queries. This option is default true.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|usePlaceholder ( String usePlaceholder)
specifier|default
name|AdvancedSqlEndpointProducerBuilder
name|usePlaceholder
parameter_list|(
name|String
name|usePlaceholder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"usePlaceholder"
argument_list|,
name|usePlaceholder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the SQL component.      */
DECL|interface|SqlEndpointBuilder
specifier|public
interface|interface
name|SqlEndpointBuilder
extends|extends
name|SqlEndpointConsumerBuilder
extends|,
name|SqlEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSqlEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSqlEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether to allow using named parameters in the queries.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|allowNamedParameters ( boolean allowNamedParameters)
specifier|default
name|SqlEndpointBuilder
name|allowNamedParameters
parameter_list|(
name|boolean
name|allowNamedParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowNamedParameters"
argument_list|,
name|allowNamedParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to allow using named parameters in the queries.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|allowNamedParameters ( String allowNamedParameters)
specifier|default
name|SqlEndpointBuilder
name|allowNamedParameters
parameter_list|(
name|String
name|allowNamedParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"allowNamedParameters"
argument_list|,
name|allowNamedParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the DataSource to use to communicate with the database.          *           * The option is a:<code>javax.sql.DataSource</code> type.          *           * Group: common          */
DECL|method|dataSource (Object dataSource)
specifier|default
name|SqlEndpointBuilder
name|dataSource
parameter_list|(
name|Object
name|dataSource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataSource"
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the DataSource to use to communicate with the database.          *           * The option will be converted to a<code>javax.sql.DataSource</code>          * type.          *           * Group: common          */
DECL|method|dataSource (String dataSource)
specifier|default
name|SqlEndpointBuilder
name|dataSource
parameter_list|(
name|String
name|dataSource
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataSource"
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the reference to a DataSource to lookup from the registry, to          * use for communicating with the database.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|dataSourceRef (String dataSourceRef)
specifier|default
name|SqlEndpointBuilder
name|dataSourceRef
parameter_list|(
name|String
name|dataSourceRef
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dataSourceRef"
argument_list|,
name|dataSourceRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify the full package and class name to use as conversion when          * outputType=SelectOne.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|outputClass (String outputClass)
specifier|default
name|SqlEndpointBuilder
name|outputClass
parameter_list|(
name|String
name|outputClass
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputClass"
argument_list|,
name|outputClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Store the query result in a header instead of the message body. By          * default, outputHeader == null and the query result is stored in the          * message body, any existing content in the message body is discarded.          * If outputHeader is set, the value is used as the name of the header          * to store the query result and the original message body is preserved.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|outputHeader (String outputHeader)
specifier|default
name|SqlEndpointBuilder
name|outputHeader
parameter_list|(
name|String
name|outputHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputHeader"
argument_list|,
name|outputHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Make the output of consumer or producer to SelectList as List of Map,          * or SelectOne as single Java object in the following way: a) If the          * query has only single column, then that JDBC Column object is          * returned. (such as SELECT COUNT( ) FROM PROJECT will return a Long          * object. b) If the query has more than one column, then it will return          * a Map of that result. c) If the outputClass is set, then it will          * convert the query result into an Java bean object by calling all the          * setters that match the column names. It will assume your class has a          * default constructor to create instance with. d) If the query resulted          * in more than one rows, it throws an non-unique result exception.          *           * The option is a:          *<code>org.apache.camel.component.sql.SqlOutputType</code> type.          *           * Group: common          */
DECL|method|outputType (SqlOutputType outputType)
specifier|default
name|SqlEndpointBuilder
name|outputType
parameter_list|(
name|SqlOutputType
name|outputType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputType"
argument_list|,
name|outputType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Make the output of consumer or producer to SelectList as List of Map,          * or SelectOne as single Java object in the following way: a) If the          * query has only single column, then that JDBC Column object is          * returned. (such as SELECT COUNT( ) FROM PROJECT will return a Long          * object. b) If the query has more than one column, then it will return          * a Map of that result. c) If the outputClass is set, then it will          * convert the query result into an Java bean object by calling all the          * setters that match the column names. It will assume your class has a          * default constructor to create instance with. d) If the query resulted          * in more than one rows, it throws an non-unique result exception.          *           * The option will be converted to a          *<code>org.apache.camel.component.sql.SqlOutputType</code> type.          *           * Group: common          */
DECL|method|outputType (String outputType)
specifier|default
name|SqlEndpointBuilder
name|outputType
parameter_list|(
name|String
name|outputType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputType"
argument_list|,
name|outputType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The separator to use when parameter values is taken from message body          * (if the body is a String type), to be inserted at # placeholders.          * Notice if you use named parameters, then a Map type is used instead.          * The default value is comma.          *           * The option is a:<code>char</code> type.          *           * Group: common          */
DECL|method|separator (char separator)
specifier|default
name|SqlEndpointBuilder
name|separator
parameter_list|(
name|char
name|separator
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"separator"
argument_list|,
name|separator
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The separator to use when parameter values is taken from message body          * (if the body is a String type), to be inserted at # placeholders.          * Notice if you use named parameters, then a Map type is used instead.          * The default value is comma.          *           * The option will be converted to a<code>char</code> type.          *           * Group: common          */
DECL|method|separator (String separator)
specifier|default
name|SqlEndpointBuilder
name|separator
parameter_list|(
name|String
name|separator
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"separator"
argument_list|,
name|separator
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the SQL component.      */
DECL|interface|AdvancedSqlEndpointBuilder
specifier|public
interface|interface
name|AdvancedSqlEndpointBuilder
extends|extends
name|AdvancedSqlEndpointConsumerBuilder
extends|,
name|AdvancedSqlEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SqlEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SqlEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * If enabled then the populateStatement method from          * org.apache.camel.component.sql.SqlPrepareStatementStrategy is always          * invoked, also if there is no expected parameters to be prepared. When          * this is false then the populateStatement is only invoked if there is          * 1 or more expected parameters to be set; for example this avoids          * reading the message body/headers for SQL queries with no parameters.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|alwaysPopulateStatement ( boolean alwaysPopulateStatement)
specifier|default
name|AdvancedSqlEndpointBuilder
name|alwaysPopulateStatement
parameter_list|(
name|boolean
name|alwaysPopulateStatement
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"alwaysPopulateStatement"
argument_list|,
name|alwaysPopulateStatement
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled then the populateStatement method from          * org.apache.camel.component.sql.SqlPrepareStatementStrategy is always          * invoked, also if there is no expected parameters to be prepared. When          * this is false then the populateStatement is only invoked if there is          * 1 or more expected parameters to be set; for example this avoids          * reading the message body/headers for SQL queries with no parameters.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|alwaysPopulateStatement ( String alwaysPopulateStatement)
specifier|default
name|AdvancedSqlEndpointBuilder
name|alwaysPopulateStatement
parameter_list|(
name|String
name|alwaysPopulateStatement
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"alwaysPopulateStatement"
argument_list|,
name|alwaysPopulateStatement
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSqlEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSqlEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set greater than zero, then Camel will use this count value of          * parameters to replace instead of querying via JDBC metadata API. This          * is useful if the JDBC vendor could not return correct parameters          * count, then user may override instead.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|parametersCount (int parametersCount)
specifier|default
name|AdvancedSqlEndpointBuilder
name|parametersCount
parameter_list|(
name|int
name|parametersCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"parametersCount"
argument_list|,
name|parametersCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set greater than zero, then Camel will use this count value of          * parameters to replace instead of querying via JDBC metadata API. This          * is useful if the JDBC vendor could not return correct parameters          * count, then user may override instead.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|parametersCount ( String parametersCount)
specifier|default
name|AdvancedSqlEndpointBuilder
name|parametersCount
parameter_list|(
name|String
name|parametersCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"parametersCount"
argument_list|,
name|parametersCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies a character that will be replaced to in SQL query. Notice,          * that it is simple String.replaceAll() operation and no SQL parsing is          * involved (quoted strings will also change).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|placeholder (String placeholder)
specifier|default
name|AdvancedSqlEndpointBuilder
name|placeholder
parameter_list|(
name|String
name|placeholder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"placeholder"
argument_list|,
name|placeholder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to plugin to use a custom          * org.apache.camel.component.sql.SqlPrepareStatementStrategy to control          * preparation of the query and prepared statement.          *           * The option is a:          *<code>org.apache.camel.component.sql.SqlPrepareStatementStrategy</code> type.          *           * Group: advanced          */
DECL|method|prepareStatementStrategy ( Object prepareStatementStrategy)
specifier|default
name|AdvancedSqlEndpointBuilder
name|prepareStatementStrategy
parameter_list|(
name|Object
name|prepareStatementStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"prepareStatementStrategy"
argument_list|,
name|prepareStatementStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to plugin to use a custom          * org.apache.camel.component.sql.SqlPrepareStatementStrategy to control          * preparation of the query and prepared statement.          *           * The option will be converted to a          *<code>org.apache.camel.component.sql.SqlPrepareStatementStrategy</code> type.          *           * Group: advanced          */
DECL|method|prepareStatementStrategy ( String prepareStatementStrategy)
specifier|default
name|AdvancedSqlEndpointBuilder
name|prepareStatementStrategy
parameter_list|(
name|String
name|prepareStatementStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"prepareStatementStrategy"
argument_list|,
name|prepareStatementStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedSqlEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedSqlEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the Spring JdbcTemplate with the key/values from the Map.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|templateOptions ( Map<String, Object> templateOptions)
specifier|default
name|AdvancedSqlEndpointBuilder
name|templateOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|templateOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"templateOptions"
argument_list|,
name|templateOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures the Spring JdbcTemplate with the key/values from the Map.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|templateOptions ( String templateOptions)
specifier|default
name|AdvancedSqlEndpointBuilder
name|templateOptions
parameter_list|(
name|String
name|templateOptions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"templateOptions"
argument_list|,
name|templateOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to use placeholder and replace all placeholder          * characters with sign in the SQL queries. This option is default true.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|usePlaceholder (boolean usePlaceholder)
specifier|default
name|AdvancedSqlEndpointBuilder
name|usePlaceholder
parameter_list|(
name|boolean
name|usePlaceholder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"usePlaceholder"
argument_list|,
name|usePlaceholder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to use placeholder and replace all placeholder          * characters with sign in the SQL queries. This option is default true.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|usePlaceholder (String usePlaceholder)
specifier|default
name|AdvancedSqlEndpointBuilder
name|usePlaceholder
parameter_list|(
name|String
name|usePlaceholder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"usePlaceholder"
argument_list|,
name|usePlaceholder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for<code>org.apache.camel.component.sql.SqlOutputType</code>      * enum.      */
DECL|enum|SqlOutputType
enum|enum
name|SqlOutputType
block|{
DECL|enumConstant|SelectOne
name|SelectOne
block|,
DECL|enumConstant|SelectList
name|SelectList
block|,
DECL|enumConstant|StreamList
name|StreamList
block|;     }
comment|/**      * SQL (camel-sql)      * The sql component allows you to work with databases using JDBC SQL      * queries.      *       * Category: database,sql      * Since: 1.4      * Maven coordinates: org.apache.camel:camel-sql      *       * Syntax:<code>sql:query</code>      *       * Path parameter: query (required)      * Sets the SQL query to perform. You can externalize the query by using      * file: or classpath: as prefix and specify the location of the file.      */
DECL|method|sql (String path)
specifier|default
name|SqlEndpointBuilder
name|sql
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|SqlEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|SqlEndpointBuilder
implements|,
name|AdvancedSqlEndpointBuilder
block|{
specifier|public
name|SqlEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"sql"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SqlEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

