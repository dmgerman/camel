begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The jcache component enables you to perform caching operations using  * JSR107/JCache as cache implementation.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|JCacheEndpointBuilderFactory
specifier|public
interface|interface
name|JCacheEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the JCache component.      */
DECL|interface|JCacheEndpointConsumerBuilder
specifier|public
interface|interface
name|JCacheEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJCacheEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * A Configuration for the Cache.          *           * The option is a:<code>javax.cache.configuration.Configuration</code>          * type.          *           * Group: common          */
DECL|method|cacheConfiguration ( Object cacheConfiguration)
specifier|default
name|JCacheEndpointConsumerBuilder
name|cacheConfiguration
parameter_list|(
name|Object
name|cacheConfiguration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheConfiguration"
argument_list|,
name|cacheConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A Configuration for the Cache.          *           * The option will be converted to a          *<code>javax.cache.configuration.Configuration</code> type.          *           * Group: common          */
DECL|method|cacheConfiguration ( String cacheConfiguration)
specifier|default
name|JCacheEndpointConsumerBuilder
name|cacheConfiguration
parameter_list|(
name|String
name|cacheConfiguration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheConfiguration"
argument_list|,
name|cacheConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Properties for the javax.cache.spi.CachingProvider to create the          * CacheManager.          *           * The option is a:<code>java.util.Properties</code> type.          *           * Group: common          */
DECL|method|cacheConfigurationProperties ( Properties cacheConfigurationProperties)
specifier|default
name|JCacheEndpointConsumerBuilder
name|cacheConfigurationProperties
parameter_list|(
name|Properties
name|cacheConfigurationProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheConfigurationProperties"
argument_list|,
name|cacheConfigurationProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Properties for the javax.cache.spi.CachingProvider to create the          * CacheManager.          *           * The option will be converted to a<code>java.util.Properties</code>          * type.          *           * Group: common          */
DECL|method|cacheConfigurationProperties ( String cacheConfigurationProperties)
specifier|default
name|JCacheEndpointConsumerBuilder
name|cacheConfigurationProperties
parameter_list|(
name|String
name|cacheConfigurationProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheConfigurationProperties"
argument_list|,
name|cacheConfigurationProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The fully qualified class name of the          * javax.cache.spi.CachingProvider.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|cachingProvider ( String cachingProvider)
specifier|default
name|JCacheEndpointConsumerBuilder
name|cachingProvider
parameter_list|(
name|String
name|cachingProvider
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cachingProvider"
argument_list|,
name|cachingProvider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An implementation specific URI for the CacheManager.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|configurationUri ( String configurationUri)
specifier|default
name|JCacheEndpointConsumerBuilder
name|configurationUri
parameter_list|(
name|String
name|configurationUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"configurationUri"
argument_list|,
name|configurationUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether management gathering is enabled.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|managementEnabled ( boolean managementEnabled)
specifier|default
name|JCacheEndpointConsumerBuilder
name|managementEnabled
parameter_list|(
name|boolean
name|managementEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"managementEnabled"
argument_list|,
name|managementEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether management gathering is enabled.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|managementEnabled ( String managementEnabled)
specifier|default
name|JCacheEndpointConsumerBuilder
name|managementEnabled
parameter_list|(
name|String
name|managementEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"managementEnabled"
argument_list|,
name|managementEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If read-through caching should be used.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|readThrough (boolean readThrough)
specifier|default
name|JCacheEndpointConsumerBuilder
name|readThrough
parameter_list|(
name|boolean
name|readThrough
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readThrough"
argument_list|,
name|readThrough
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If read-through caching should be used.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|readThrough (String readThrough)
specifier|default
name|JCacheEndpointConsumerBuilder
name|readThrough
parameter_list|(
name|String
name|readThrough
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readThrough"
argument_list|,
name|readThrough
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether statistics gathering is enabled.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|statisticsEnabled ( boolean statisticsEnabled)
specifier|default
name|JCacheEndpointConsumerBuilder
name|statisticsEnabled
parameter_list|(
name|boolean
name|statisticsEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"statisticsEnabled"
argument_list|,
name|statisticsEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether statistics gathering is enabled.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|statisticsEnabled ( String statisticsEnabled)
specifier|default
name|JCacheEndpointConsumerBuilder
name|statisticsEnabled
parameter_list|(
name|String
name|statisticsEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"statisticsEnabled"
argument_list|,
name|statisticsEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If cache should use store-by-value or store-by-reference semantics.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|storeByValue (boolean storeByValue)
specifier|default
name|JCacheEndpointConsumerBuilder
name|storeByValue
parameter_list|(
name|boolean
name|storeByValue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"storeByValue"
argument_list|,
name|storeByValue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If cache should use store-by-value or store-by-reference semantics.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|storeByValue (String storeByValue)
specifier|default
name|JCacheEndpointConsumerBuilder
name|storeByValue
parameter_list|(
name|String
name|storeByValue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"storeByValue"
argument_list|,
name|storeByValue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If write-through caching should be used.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|writeThrough (boolean writeThrough)
specifier|default
name|JCacheEndpointConsumerBuilder
name|writeThrough
parameter_list|(
name|boolean
name|writeThrough
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeThrough"
argument_list|,
name|writeThrough
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If write-through caching should be used.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|writeThrough (String writeThrough)
specifier|default
name|JCacheEndpointConsumerBuilder
name|writeThrough
parameter_list|(
name|String
name|writeThrough
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeThrough"
argument_list|,
name|writeThrough
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|JCacheEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|JCacheEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Events a consumer should filter. If using filteredEvents option, then          * eventFilters one will be ignored.          *           * The option is a:          *<code>java.util.List&lt;javax.cache.event.EventType&gt;</code> type.          *           * Group: consumer          */
DECL|method|filteredEvents ( List<EventType> filteredEvents)
specifier|default
name|JCacheEndpointConsumerBuilder
name|filteredEvents
parameter_list|(
name|List
argument_list|<
name|EventType
argument_list|>
name|filteredEvents
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filteredEvents"
argument_list|,
name|filteredEvents
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Events a consumer should filter. If using filteredEvents option, then          * eventFilters one will be ignored.          *           * The option will be converted to a          *<code>java.util.List&lt;javax.cache.event.EventType&gt;</code> type.          *           * Group: consumer          */
DECL|method|filteredEvents ( String filteredEvents)
specifier|default
name|JCacheEndpointConsumerBuilder
name|filteredEvents
parameter_list|(
name|String
name|filteredEvents
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filteredEvents"
argument_list|,
name|filteredEvents
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * if the old value is required for events.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|oldValueRequired ( boolean oldValueRequired)
specifier|default
name|JCacheEndpointConsumerBuilder
name|oldValueRequired
parameter_list|(
name|boolean
name|oldValueRequired
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"oldValueRequired"
argument_list|,
name|oldValueRequired
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * if the old value is required for events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|oldValueRequired ( String oldValueRequired)
specifier|default
name|JCacheEndpointConsumerBuilder
name|oldValueRequired
parameter_list|(
name|String
name|oldValueRequired
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"oldValueRequired"
argument_list|,
name|oldValueRequired
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * if the event listener should block the thread causing the event.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|JCacheEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * if the event listener should block the thread causing the event.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|synchronous (String synchronous)
specifier|default
name|JCacheEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the JCache component.      */
DECL|interface|AdvancedJCacheEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedJCacheEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|JCacheEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|JCacheEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The CacheEntryEventFilter. If using eventFilters option, then          * filteredEvents one will be ignored.          *           * The option is a:          *<code>java.util.List&lt;javax.cache.event.CacheEntryEventFilter&gt;</code> type.          *           * Group: consumer (advanced)          */
DECL|method|eventFilters ( List<Object> eventFilters)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|eventFilters
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|eventFilters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"eventFilters"
argument_list|,
name|eventFilters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheEntryEventFilter. If using eventFilters option, then          * filteredEvents one will be ignored.          *           * The option will be converted to a          *<code>java.util.List&lt;javax.cache.event.CacheEntryEventFilter&gt;</code> type.          *           * Group: consumer (advanced)          */
DECL|method|eventFilters ( String eventFilters)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|eventFilters
parameter_list|(
name|String
name|eventFilters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"eventFilters"
argument_list|,
name|eventFilters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheLoader factory.          *           * The option is a:          *<code>javax.cache.configuration.Factory&lt;javax.cache.integration.CacheLoader&gt;</code> type.          *           * Group: advanced          */
DECL|method|cacheLoaderFactory ( Object cacheLoaderFactory)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|cacheLoaderFactory
parameter_list|(
name|Object
name|cacheLoaderFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheLoaderFactory"
argument_list|,
name|cacheLoaderFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheLoader factory.          *           * The option will be converted to a          *<code>javax.cache.configuration.Factory&lt;javax.cache.integration.CacheLoader&gt;</code> type.          *           * Group: advanced          */
DECL|method|cacheLoaderFactory ( String cacheLoaderFactory)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|cacheLoaderFactory
parameter_list|(
name|String
name|cacheLoaderFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheLoaderFactory"
argument_list|,
name|cacheLoaderFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheWriter factory.          *           * The option is a:          *<code>javax.cache.configuration.Factory&lt;javax.cache.integration.CacheWriter&gt;</code> type.          *           * Group: advanced          */
DECL|method|cacheWriterFactory ( Object cacheWriterFactory)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|cacheWriterFactory
parameter_list|(
name|Object
name|cacheWriterFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheWriterFactory"
argument_list|,
name|cacheWriterFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheWriter factory.          *           * The option will be converted to a          *<code>javax.cache.configuration.Factory&lt;javax.cache.integration.CacheWriter&gt;</code> type.          *           * Group: advanced          */
DECL|method|cacheWriterFactory ( String cacheWriterFactory)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|cacheWriterFactory
parameter_list|(
name|String
name|cacheWriterFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheWriterFactory"
argument_list|,
name|cacheWriterFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|createCacheIfNotExists ( boolean createCacheIfNotExists)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|createCacheIfNotExists
parameter_list|(
name|boolean
name|createCacheIfNotExists
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createCacheIfNotExists"
argument_list|,
name|createCacheIfNotExists
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|createCacheIfNotExists ( String createCacheIfNotExists)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|createCacheIfNotExists
parameter_list|(
name|String
name|createCacheIfNotExists
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createCacheIfNotExists"
argument_list|,
name|createCacheIfNotExists
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The ExpiryPolicy factory.          *           * The option is a:          *<code>javax.cache.configuration.Factory&lt;javax.cache.expiry.ExpiryPolicy&gt;</code> type.          *           * Group: advanced          */
DECL|method|expiryPolicyFactory ( Object expiryPolicyFactory)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|expiryPolicyFactory
parameter_list|(
name|Object
name|expiryPolicyFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"expiryPolicyFactory"
argument_list|,
name|expiryPolicyFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The ExpiryPolicy factory.          *           * The option will be converted to a          *<code>javax.cache.configuration.Factory&lt;javax.cache.expiry.ExpiryPolicy&gt;</code> type.          *           * Group: advanced          */
DECL|method|expiryPolicyFactory ( String expiryPolicyFactory)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|expiryPolicyFactory
parameter_list|(
name|String
name|expiryPolicyFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"expiryPolicyFactory"
argument_list|,
name|expiryPolicyFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a camel-cache should try to find implementations of          * jcache api in runtimes like OSGi.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|lookupProviders ( boolean lookupProviders)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|lookupProviders
parameter_list|(
name|boolean
name|lookupProviders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lookupProviders"
argument_list|,
name|lookupProviders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a camel-cache should try to find implementations of          * jcache api in runtimes like OSGi.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|lookupProviders ( String lookupProviders)
specifier|default
name|AdvancedJCacheEndpointConsumerBuilder
name|lookupProviders
parameter_list|(
name|String
name|lookupProviders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lookupProviders"
argument_list|,
name|lookupProviders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the JCache component.      */
DECL|interface|JCacheEndpointProducerBuilder
specifier|public
interface|interface
name|JCacheEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJCacheEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJCacheEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * A Configuration for the Cache.          *           * The option is a:<code>javax.cache.configuration.Configuration</code>          * type.          *           * Group: common          */
DECL|method|cacheConfiguration ( Object cacheConfiguration)
specifier|default
name|JCacheEndpointProducerBuilder
name|cacheConfiguration
parameter_list|(
name|Object
name|cacheConfiguration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheConfiguration"
argument_list|,
name|cacheConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A Configuration for the Cache.          *           * The option will be converted to a          *<code>javax.cache.configuration.Configuration</code> type.          *           * Group: common          */
DECL|method|cacheConfiguration ( String cacheConfiguration)
specifier|default
name|JCacheEndpointProducerBuilder
name|cacheConfiguration
parameter_list|(
name|String
name|cacheConfiguration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheConfiguration"
argument_list|,
name|cacheConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Properties for the javax.cache.spi.CachingProvider to create the          * CacheManager.          *           * The option is a:<code>java.util.Properties</code> type.          *           * Group: common          */
DECL|method|cacheConfigurationProperties ( Properties cacheConfigurationProperties)
specifier|default
name|JCacheEndpointProducerBuilder
name|cacheConfigurationProperties
parameter_list|(
name|Properties
name|cacheConfigurationProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheConfigurationProperties"
argument_list|,
name|cacheConfigurationProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Properties for the javax.cache.spi.CachingProvider to create the          * CacheManager.          *           * The option will be converted to a<code>java.util.Properties</code>          * type.          *           * Group: common          */
DECL|method|cacheConfigurationProperties ( String cacheConfigurationProperties)
specifier|default
name|JCacheEndpointProducerBuilder
name|cacheConfigurationProperties
parameter_list|(
name|String
name|cacheConfigurationProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheConfigurationProperties"
argument_list|,
name|cacheConfigurationProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The fully qualified class name of the          * javax.cache.spi.CachingProvider.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|cachingProvider ( String cachingProvider)
specifier|default
name|JCacheEndpointProducerBuilder
name|cachingProvider
parameter_list|(
name|String
name|cachingProvider
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cachingProvider"
argument_list|,
name|cachingProvider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An implementation specific URI for the CacheManager.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|configurationUri ( String configurationUri)
specifier|default
name|JCacheEndpointProducerBuilder
name|configurationUri
parameter_list|(
name|String
name|configurationUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"configurationUri"
argument_list|,
name|configurationUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether management gathering is enabled.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|managementEnabled ( boolean managementEnabled)
specifier|default
name|JCacheEndpointProducerBuilder
name|managementEnabled
parameter_list|(
name|boolean
name|managementEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"managementEnabled"
argument_list|,
name|managementEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether management gathering is enabled.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|managementEnabled ( String managementEnabled)
specifier|default
name|JCacheEndpointProducerBuilder
name|managementEnabled
parameter_list|(
name|String
name|managementEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"managementEnabled"
argument_list|,
name|managementEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If read-through caching should be used.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|readThrough (boolean readThrough)
specifier|default
name|JCacheEndpointProducerBuilder
name|readThrough
parameter_list|(
name|boolean
name|readThrough
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readThrough"
argument_list|,
name|readThrough
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If read-through caching should be used.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|readThrough (String readThrough)
specifier|default
name|JCacheEndpointProducerBuilder
name|readThrough
parameter_list|(
name|String
name|readThrough
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readThrough"
argument_list|,
name|readThrough
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether statistics gathering is enabled.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|statisticsEnabled ( boolean statisticsEnabled)
specifier|default
name|JCacheEndpointProducerBuilder
name|statisticsEnabled
parameter_list|(
name|boolean
name|statisticsEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"statisticsEnabled"
argument_list|,
name|statisticsEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether statistics gathering is enabled.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|statisticsEnabled ( String statisticsEnabled)
specifier|default
name|JCacheEndpointProducerBuilder
name|statisticsEnabled
parameter_list|(
name|String
name|statisticsEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"statisticsEnabled"
argument_list|,
name|statisticsEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If cache should use store-by-value or store-by-reference semantics.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|storeByValue (boolean storeByValue)
specifier|default
name|JCacheEndpointProducerBuilder
name|storeByValue
parameter_list|(
name|boolean
name|storeByValue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"storeByValue"
argument_list|,
name|storeByValue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If cache should use store-by-value or store-by-reference semantics.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|storeByValue (String storeByValue)
specifier|default
name|JCacheEndpointProducerBuilder
name|storeByValue
parameter_list|(
name|String
name|storeByValue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"storeByValue"
argument_list|,
name|storeByValue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If write-through caching should be used.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|writeThrough (boolean writeThrough)
specifier|default
name|JCacheEndpointProducerBuilder
name|writeThrough
parameter_list|(
name|boolean
name|writeThrough
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeThrough"
argument_list|,
name|writeThrough
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If write-through caching should be used.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|writeThrough (String writeThrough)
specifier|default
name|JCacheEndpointProducerBuilder
name|writeThrough
parameter_list|(
name|String
name|writeThrough
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeThrough"
argument_list|,
name|writeThrough
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure using a cache operation by default. If an operation in          * the message header, then the operation from the header takes          * precedence.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|action (String action)
specifier|default
name|JCacheEndpointProducerBuilder
name|action
parameter_list|(
name|String
name|action
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"action"
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|JCacheEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|JCacheEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the JCache component.      */
DECL|interface|AdvancedJCacheEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedJCacheEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|JCacheEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|JCacheEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJCacheEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJCacheEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheLoader factory.          *           * The option is a:          *<code>javax.cache.configuration.Factory&lt;javax.cache.integration.CacheLoader&gt;</code> type.          *           * Group: advanced          */
DECL|method|cacheLoaderFactory ( Object cacheLoaderFactory)
specifier|default
name|AdvancedJCacheEndpointProducerBuilder
name|cacheLoaderFactory
parameter_list|(
name|Object
name|cacheLoaderFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheLoaderFactory"
argument_list|,
name|cacheLoaderFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheLoader factory.          *           * The option will be converted to a          *<code>javax.cache.configuration.Factory&lt;javax.cache.integration.CacheLoader&gt;</code> type.          *           * Group: advanced          */
DECL|method|cacheLoaderFactory ( String cacheLoaderFactory)
specifier|default
name|AdvancedJCacheEndpointProducerBuilder
name|cacheLoaderFactory
parameter_list|(
name|String
name|cacheLoaderFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheLoaderFactory"
argument_list|,
name|cacheLoaderFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheWriter factory.          *           * The option is a:          *<code>javax.cache.configuration.Factory&lt;javax.cache.integration.CacheWriter&gt;</code> type.          *           * Group: advanced          */
DECL|method|cacheWriterFactory ( Object cacheWriterFactory)
specifier|default
name|AdvancedJCacheEndpointProducerBuilder
name|cacheWriterFactory
parameter_list|(
name|Object
name|cacheWriterFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheWriterFactory"
argument_list|,
name|cacheWriterFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheWriter factory.          *           * The option will be converted to a          *<code>javax.cache.configuration.Factory&lt;javax.cache.integration.CacheWriter&gt;</code> type.          *           * Group: advanced          */
DECL|method|cacheWriterFactory ( String cacheWriterFactory)
specifier|default
name|AdvancedJCacheEndpointProducerBuilder
name|cacheWriterFactory
parameter_list|(
name|String
name|cacheWriterFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheWriterFactory"
argument_list|,
name|cacheWriterFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|createCacheIfNotExists ( boolean createCacheIfNotExists)
specifier|default
name|AdvancedJCacheEndpointProducerBuilder
name|createCacheIfNotExists
parameter_list|(
name|boolean
name|createCacheIfNotExists
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createCacheIfNotExists"
argument_list|,
name|createCacheIfNotExists
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|createCacheIfNotExists ( String createCacheIfNotExists)
specifier|default
name|AdvancedJCacheEndpointProducerBuilder
name|createCacheIfNotExists
parameter_list|(
name|String
name|createCacheIfNotExists
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createCacheIfNotExists"
argument_list|,
name|createCacheIfNotExists
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The ExpiryPolicy factory.          *           * The option is a:          *<code>javax.cache.configuration.Factory&lt;javax.cache.expiry.ExpiryPolicy&gt;</code> type.          *           * Group: advanced          */
DECL|method|expiryPolicyFactory ( Object expiryPolicyFactory)
specifier|default
name|AdvancedJCacheEndpointProducerBuilder
name|expiryPolicyFactory
parameter_list|(
name|Object
name|expiryPolicyFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"expiryPolicyFactory"
argument_list|,
name|expiryPolicyFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The ExpiryPolicy factory.          *           * The option will be converted to a          *<code>javax.cache.configuration.Factory&lt;javax.cache.expiry.ExpiryPolicy&gt;</code> type.          *           * Group: advanced          */
DECL|method|expiryPolicyFactory ( String expiryPolicyFactory)
specifier|default
name|AdvancedJCacheEndpointProducerBuilder
name|expiryPolicyFactory
parameter_list|(
name|String
name|expiryPolicyFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"expiryPolicyFactory"
argument_list|,
name|expiryPolicyFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a camel-cache should try to find implementations of          * jcache api in runtimes like OSGi.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|lookupProviders ( boolean lookupProviders)
specifier|default
name|AdvancedJCacheEndpointProducerBuilder
name|lookupProviders
parameter_list|(
name|boolean
name|lookupProviders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lookupProviders"
argument_list|,
name|lookupProviders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a camel-cache should try to find implementations of          * jcache api in runtimes like OSGi.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|lookupProviders ( String lookupProviders)
specifier|default
name|AdvancedJCacheEndpointProducerBuilder
name|lookupProviders
parameter_list|(
name|String
name|lookupProviders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lookupProviders"
argument_list|,
name|lookupProviders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the JCache component.      */
DECL|interface|JCacheEndpointBuilder
specifier|public
interface|interface
name|JCacheEndpointBuilder
extends|extends
name|JCacheEndpointConsumerBuilder
extends|,
name|JCacheEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJCacheEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJCacheEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * A Configuration for the Cache.          *           * The option is a:<code>javax.cache.configuration.Configuration</code>          * type.          *           * Group: common          */
DECL|method|cacheConfiguration ( Object cacheConfiguration)
specifier|default
name|JCacheEndpointBuilder
name|cacheConfiguration
parameter_list|(
name|Object
name|cacheConfiguration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheConfiguration"
argument_list|,
name|cacheConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A Configuration for the Cache.          *           * The option will be converted to a          *<code>javax.cache.configuration.Configuration</code> type.          *           * Group: common          */
DECL|method|cacheConfiguration ( String cacheConfiguration)
specifier|default
name|JCacheEndpointBuilder
name|cacheConfiguration
parameter_list|(
name|String
name|cacheConfiguration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheConfiguration"
argument_list|,
name|cacheConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Properties for the javax.cache.spi.CachingProvider to create the          * CacheManager.          *           * The option is a:<code>java.util.Properties</code> type.          *           * Group: common          */
DECL|method|cacheConfigurationProperties ( Properties cacheConfigurationProperties)
specifier|default
name|JCacheEndpointBuilder
name|cacheConfigurationProperties
parameter_list|(
name|Properties
name|cacheConfigurationProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheConfigurationProperties"
argument_list|,
name|cacheConfigurationProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Properties for the javax.cache.spi.CachingProvider to create the          * CacheManager.          *           * The option will be converted to a<code>java.util.Properties</code>          * type.          *           * Group: common          */
DECL|method|cacheConfigurationProperties ( String cacheConfigurationProperties)
specifier|default
name|JCacheEndpointBuilder
name|cacheConfigurationProperties
parameter_list|(
name|String
name|cacheConfigurationProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheConfigurationProperties"
argument_list|,
name|cacheConfigurationProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The fully qualified class name of the          * javax.cache.spi.CachingProvider.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|cachingProvider (String cachingProvider)
specifier|default
name|JCacheEndpointBuilder
name|cachingProvider
parameter_list|(
name|String
name|cachingProvider
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cachingProvider"
argument_list|,
name|cachingProvider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An implementation specific URI for the CacheManager.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|configurationUri (String configurationUri)
specifier|default
name|JCacheEndpointBuilder
name|configurationUri
parameter_list|(
name|String
name|configurationUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"configurationUri"
argument_list|,
name|configurationUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether management gathering is enabled.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|managementEnabled ( boolean managementEnabled)
specifier|default
name|JCacheEndpointBuilder
name|managementEnabled
parameter_list|(
name|boolean
name|managementEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"managementEnabled"
argument_list|,
name|managementEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether management gathering is enabled.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|managementEnabled (String managementEnabled)
specifier|default
name|JCacheEndpointBuilder
name|managementEnabled
parameter_list|(
name|String
name|managementEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"managementEnabled"
argument_list|,
name|managementEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If read-through caching should be used.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|readThrough (boolean readThrough)
specifier|default
name|JCacheEndpointBuilder
name|readThrough
parameter_list|(
name|boolean
name|readThrough
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readThrough"
argument_list|,
name|readThrough
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If read-through caching should be used.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|readThrough (String readThrough)
specifier|default
name|JCacheEndpointBuilder
name|readThrough
parameter_list|(
name|String
name|readThrough
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readThrough"
argument_list|,
name|readThrough
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether statistics gathering is enabled.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|statisticsEnabled ( boolean statisticsEnabled)
specifier|default
name|JCacheEndpointBuilder
name|statisticsEnabled
parameter_list|(
name|boolean
name|statisticsEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"statisticsEnabled"
argument_list|,
name|statisticsEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether statistics gathering is enabled.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|statisticsEnabled (String statisticsEnabled)
specifier|default
name|JCacheEndpointBuilder
name|statisticsEnabled
parameter_list|(
name|String
name|statisticsEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"statisticsEnabled"
argument_list|,
name|statisticsEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If cache should use store-by-value or store-by-reference semantics.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|storeByValue (boolean storeByValue)
specifier|default
name|JCacheEndpointBuilder
name|storeByValue
parameter_list|(
name|boolean
name|storeByValue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"storeByValue"
argument_list|,
name|storeByValue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If cache should use store-by-value or store-by-reference semantics.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|storeByValue (String storeByValue)
specifier|default
name|JCacheEndpointBuilder
name|storeByValue
parameter_list|(
name|String
name|storeByValue
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"storeByValue"
argument_list|,
name|storeByValue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If write-through caching should be used.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|writeThrough (boolean writeThrough)
specifier|default
name|JCacheEndpointBuilder
name|writeThrough
parameter_list|(
name|boolean
name|writeThrough
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeThrough"
argument_list|,
name|writeThrough
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If write-through caching should be used.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|writeThrough (String writeThrough)
specifier|default
name|JCacheEndpointBuilder
name|writeThrough
parameter_list|(
name|String
name|writeThrough
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"writeThrough"
argument_list|,
name|writeThrough
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the JCache component.      */
DECL|interface|AdvancedJCacheEndpointBuilder
specifier|public
interface|interface
name|AdvancedJCacheEndpointBuilder
extends|extends
name|AdvancedJCacheEndpointConsumerBuilder
extends|,
name|AdvancedJCacheEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|JCacheEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|JCacheEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJCacheEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJCacheEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheLoader factory.          *           * The option is a:          *<code>javax.cache.configuration.Factory&lt;javax.cache.integration.CacheLoader&gt;</code> type.          *           * Group: advanced          */
DECL|method|cacheLoaderFactory ( Object cacheLoaderFactory)
specifier|default
name|AdvancedJCacheEndpointBuilder
name|cacheLoaderFactory
parameter_list|(
name|Object
name|cacheLoaderFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheLoaderFactory"
argument_list|,
name|cacheLoaderFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheLoader factory.          *           * The option will be converted to a          *<code>javax.cache.configuration.Factory&lt;javax.cache.integration.CacheLoader&gt;</code> type.          *           * Group: advanced          */
DECL|method|cacheLoaderFactory ( String cacheLoaderFactory)
specifier|default
name|AdvancedJCacheEndpointBuilder
name|cacheLoaderFactory
parameter_list|(
name|String
name|cacheLoaderFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheLoaderFactory"
argument_list|,
name|cacheLoaderFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheWriter factory.          *           * The option is a:          *<code>javax.cache.configuration.Factory&lt;javax.cache.integration.CacheWriter&gt;</code> type.          *           * Group: advanced          */
DECL|method|cacheWriterFactory ( Object cacheWriterFactory)
specifier|default
name|AdvancedJCacheEndpointBuilder
name|cacheWriterFactory
parameter_list|(
name|Object
name|cacheWriterFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheWriterFactory"
argument_list|,
name|cacheWriterFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CacheWriter factory.          *           * The option will be converted to a          *<code>javax.cache.configuration.Factory&lt;javax.cache.integration.CacheWriter&gt;</code> type.          *           * Group: advanced          */
DECL|method|cacheWriterFactory ( String cacheWriterFactory)
specifier|default
name|AdvancedJCacheEndpointBuilder
name|cacheWriterFactory
parameter_list|(
name|String
name|cacheWriterFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cacheWriterFactory"
argument_list|,
name|cacheWriterFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|createCacheIfNotExists ( boolean createCacheIfNotExists)
specifier|default
name|AdvancedJCacheEndpointBuilder
name|createCacheIfNotExists
parameter_list|(
name|boolean
name|createCacheIfNotExists
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createCacheIfNotExists"
argument_list|,
name|createCacheIfNotExists
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|createCacheIfNotExists ( String createCacheIfNotExists)
specifier|default
name|AdvancedJCacheEndpointBuilder
name|createCacheIfNotExists
parameter_list|(
name|String
name|createCacheIfNotExists
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createCacheIfNotExists"
argument_list|,
name|createCacheIfNotExists
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The ExpiryPolicy factory.          *           * The option is a:          *<code>javax.cache.configuration.Factory&lt;javax.cache.expiry.ExpiryPolicy&gt;</code> type.          *           * Group: advanced          */
DECL|method|expiryPolicyFactory ( Object expiryPolicyFactory)
specifier|default
name|AdvancedJCacheEndpointBuilder
name|expiryPolicyFactory
parameter_list|(
name|Object
name|expiryPolicyFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"expiryPolicyFactory"
argument_list|,
name|expiryPolicyFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The ExpiryPolicy factory.          *           * The option will be converted to a          *<code>javax.cache.configuration.Factory&lt;javax.cache.expiry.ExpiryPolicy&gt;</code> type.          *           * Group: advanced          */
DECL|method|expiryPolicyFactory ( String expiryPolicyFactory)
specifier|default
name|AdvancedJCacheEndpointBuilder
name|expiryPolicyFactory
parameter_list|(
name|String
name|expiryPolicyFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"expiryPolicyFactory"
argument_list|,
name|expiryPolicyFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a camel-cache should try to find implementations of          * jcache api in runtimes like OSGi.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|lookupProviders ( boolean lookupProviders)
specifier|default
name|AdvancedJCacheEndpointBuilder
name|lookupProviders
parameter_list|(
name|boolean
name|lookupProviders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lookupProviders"
argument_list|,
name|lookupProviders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a camel-cache should try to find implementations of          * jcache api in runtimes like OSGi.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|lookupProviders ( String lookupProviders)
specifier|default
name|AdvancedJCacheEndpointBuilder
name|lookupProviders
parameter_list|(
name|String
name|lookupProviders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lookupProviders"
argument_list|,
name|lookupProviders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for<code>javax.cache.event.EventType</code> enum.      */
DECL|enum|EventType
enum|enum
name|EventType
block|{
DECL|enumConstant|CREATED
name|CREATED
block|,
DECL|enumConstant|UPDATED
name|UPDATED
block|,
DECL|enumConstant|REMOVED
name|REMOVED
block|,
DECL|enumConstant|EXPIRED
name|EXPIRED
block|;     }
comment|/**      * JCache (camel-jcache)      * The jcache component enables you to perform caching operations using      * JSR107/JCache as cache implementation.      *       * Syntax:<code>jcache:cacheName</code>      * Category: cache,datagrid,clustering      * Available as of version: 2.17      * Maven coordinates: org.apache.camel:camel-jcache      */
DECL|method|jCache (String path)
specifier|default
name|JCacheEndpointBuilder
name|jCache
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|JCacheEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|JCacheEndpointBuilder
implements|,
name|AdvancedJCacheEndpointBuilder
block|{
specifier|public
name|JCacheEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"jcache"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|JCacheEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

