begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_comment
comment|/**  * The cxfrs component is used for JAX-RS REST services using Apache CXF.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|CxfRsEndpointBuilderFactory
specifier|public
interface|interface
name|CxfRsEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the CXF-RS component.      */
DECL|interface|CxfRsEndpointConsumerBuilder
specifier|public
interface|interface
name|CxfRsEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCxfRsEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To lookup an existing configured CxfRsEndpoint. Must used bean: as          * prefix.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|beanId (String beanId)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|beanId
parameter_list|(
name|String
name|beanId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"beanId"
argument_list|,
name|beanId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The service publish address.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|address (String address)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|address
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"address"
argument_list|,
name|address
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the feature list to the CxfRs endpoint.          * The option is a          *<code>java.util.List&lt;org.apache.cxf.feature.Feature&gt;</code>          * type.          * @group common          */
DECL|method|features (List<Object> features)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|features
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|features
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"features"
argument_list|,
name|features
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the feature list to the CxfRs endpoint.          * The option will be converted to a          *<code>java.util.List&lt;org.apache.cxf.feature.Feature&gt;</code>          * type.          * @group common          */
DECL|method|features (String features)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|features
parameter_list|(
name|String
name|features
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"features"
argument_list|,
name|features
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option enables CXF Logging Feature which writes inbound and          * outbound REST messages to log.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|loggingFeatureEnabled ( boolean loggingFeatureEnabled)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|loggingFeatureEnabled
parameter_list|(
name|boolean
name|loggingFeatureEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFeatureEnabled"
argument_list|,
name|loggingFeatureEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option enables CXF Logging Feature which writes inbound and          * outbound REST messages to log.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|loggingFeatureEnabled ( String loggingFeatureEnabled)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|loggingFeatureEnabled
parameter_list|(
name|String
name|loggingFeatureEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFeatureEnabled"
argument_list|,
name|loggingFeatureEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To limit the total size of number of bytes the logger will output          * when logging feature has been enabled.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|loggingSizeLimit ( int loggingSizeLimit)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|loggingSizeLimit
parameter_list|(
name|int
name|loggingSizeLimit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingSizeLimit"
argument_list|,
name|loggingSizeLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To limit the total size of number of bytes the logger will output          * when logging feature has been enabled.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|loggingSizeLimit ( String loggingSizeLimit)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|loggingSizeLimit
parameter_list|(
name|String
name|loggingSizeLimit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingSizeLimit"
argument_list|,
name|loggingSizeLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to specify the model file which is useful for the          * resource class without annotation. When using this option, then the          * service class can be omitted, to emulate document-only endpoints.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|modelRef (String modelRef)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|modelRef
parameter_list|(
name|String
name|modelRef
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"modelRef"
argument_list|,
name|modelRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set custom JAX-RS provider(s) list to the CxfRs endpoint. You can          * specify a string with a list of providers to lookup in the registy          * separated by comma.          * The option is a<code>java.util.List&lt;java.lang.Object&gt;</code>          * type.          * @group common          */
DECL|method|providers (List<Object> providers)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|providers
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|providers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"providers"
argument_list|,
name|providers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set custom JAX-RS provider(s) list to the CxfRs endpoint. You can          * specify a string with a list of providers to lookup in the registy          * separated by comma.          * The option will be converted to a          *<code>java.util.List&lt;java.lang.Object&gt;</code> type.          * @group common          */
DECL|method|providers (String providers)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|providers
parameter_list|(
name|String
name|providers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"providers"
argument_list|,
name|providers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The resource classes which you want to export as REST service.          * Multiple classes can be separated by comma.          * The option is a          *<code>java.util.List&lt;java.lang.Class&lt;java.lang.Object&gt;&gt;</code> type.          * @group common          */
DECL|method|resourceClasses ( List<Class<Object>> resourceClasses)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|resourceClasses
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|<
name|Object
argument_list|>
argument_list|>
name|resourceClasses
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceClasses"
argument_list|,
name|resourceClasses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The resource classes which you want to export as REST service.          * Multiple classes can be separated by comma.          * The option will be converted to a          *<code>java.util.List&lt;java.lang.Class&lt;java.lang.Object&gt;&gt;</code> type.          * @group common          */
DECL|method|resourceClasses ( String resourceClasses)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|resourceClasses
parameter_list|(
name|String
name|resourceClasses
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceClasses"
argument_list|,
name|resourceClasses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the locations of the schema(s) which can be used to validate the          * incoming XML or JAXB-driven JSON.          * The option is a<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          * @group common          */
DECL|method|schemaLocations ( List<String> schemaLocations)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|schemaLocations
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|schemaLocations
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"schemaLocations"
argument_list|,
name|schemaLocations
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the locations of the schema(s) which can be used to validate the          * incoming XML or JAXB-driven JSON.          * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          * @group common          */
DECL|method|schemaLocations ( String schemaLocations)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|schemaLocations
parameter_list|(
name|String
name|schemaLocations
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"schemaLocations"
argument_list|,
name|schemaLocations
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option controls whether the PhaseInterceptorChain skips logging          * the Fault that it catches.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|skipFaultLogging ( boolean skipFaultLogging)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|skipFaultLogging
parameter_list|(
name|boolean
name|skipFaultLogging
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipFaultLogging"
argument_list|,
name|skipFaultLogging
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option controls whether the PhaseInterceptorChain skips logging          * the Fault that it catches.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|skipFaultLogging ( String skipFaultLogging)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|skipFaultLogging
parameter_list|(
name|String
name|skipFaultLogging
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipFaultLogging"
argument_list|,
name|skipFaultLogging
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets how requests and responses will be mapped to/from Camel. Two          * values are possible: SimpleConsumer: This binding style processes          * request parameters, multiparts, etc. and maps them to IN headers, IN          * attachments and to the message body. It aims to eliminate low-level          * processing of org.apache.cxf.message.MessageContentsList. It also          * also adds more flexibility and simplicity to the response mapping.          * Only available for consumers. Default: The default style. For          * consumers this passes on a MessageContentsList to the route,          * requiring low-level processing in the route. This is the traditional          * binding style, which simply dumps the          * org.apache.cxf.message.MessageContentsList coming in from the CXF          * stack onto the IN message body. The user is then responsible for          * processing it according to the contract defined by the JAX-RS method          * signature. Custom: allows you to specify a custom binding through the          * binding option.          * The option is a          *<code>org.apache.camel.component.cxf.jaxrs.BindingStyle</code> type.          * @group consumer          */
DECL|method|bindingStyle ( BindingStyle bindingStyle)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|bindingStyle
parameter_list|(
name|BindingStyle
name|bindingStyle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bindingStyle"
argument_list|,
name|bindingStyle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets how requests and responses will be mapped to/from Camel. Two          * values are possible: SimpleConsumer: This binding style processes          * request parameters, multiparts, etc. and maps them to IN headers, IN          * attachments and to the message body. It aims to eliminate low-level          * processing of org.apache.cxf.message.MessageContentsList. It also          * also adds more flexibility and simplicity to the response mapping.          * Only available for consumers. Default: The default style. For          * consumers this passes on a MessageContentsList to the route,          * requiring low-level processing in the route. This is the traditional          * binding style, which simply dumps the          * org.apache.cxf.message.MessageContentsList coming in from the CXF          * stack onto the IN message body. The user is then responsible for          * processing it according to the contract defined by the JAX-RS method          * signature. Custom: allows you to specify a custom binding through the          * binding option.          * The option will be converted to a          *<code>org.apache.camel.component.cxf.jaxrs.BindingStyle</code> type.          * @group consumer          */
DECL|method|bindingStyle (String bindingStyle)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|bindingStyle
parameter_list|(
name|String
name|bindingStyle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bindingStyle"
argument_list|,
name|bindingStyle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option can override the endpointUrl that published from the WADL          * which can be accessed with resource address url plus _wadl.          * The option is a<code>java.lang.String</code> type.          * @group consumer          */
DECL|method|publishedEndpointUrl ( String publishedEndpointUrl)
specifier|default
name|CxfRsEndpointConsumerBuilder
name|publishedEndpointUrl
parameter_list|(
name|String
name|publishedEndpointUrl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publishedEndpointUrl"
argument_list|,
name|publishedEndpointUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the CXF-RS component.      */
DECL|interface|AdvancedCxfRsEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedCxfRsEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CxfRsEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CxfRsEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The service beans which you want to export as REST service. Multiple          * beans can be separated by comma.          * The option is a<code>java.util.List&lt;java.lang.Object&gt;</code>          * type.          * @group consumer (advanced)          */
DECL|method|serviceBeans ( List<Object> serviceBeans)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|serviceBeans
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|serviceBeans
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceBeans"
argument_list|,
name|serviceBeans
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The service beans which you want to export as REST service. Multiple          * beans can be separated by comma.          * The option will be converted to a          *<code>java.util.List&lt;java.lang.Object&gt;</code> type.          * @group consumer (advanced)          */
DECL|method|serviceBeans ( String serviceBeans)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|serviceBeans
parameter_list|(
name|String
name|serviceBeans
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceBeans"
argument_list|,
name|serviceBeans
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CxfBinding to control the binding between Camel          * Message and CXF Message.          * The option is a          *<code>org.apache.camel.component.cxf.jaxrs.CxfRsBinding</code> type.          * @group advanced          */
DECL|method|binding (Object binding)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|binding
parameter_list|(
name|Object
name|binding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"binding"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CxfBinding to control the binding between Camel          * Message and CXF Message.          * The option will be converted to a          *<code>org.apache.camel.component.cxf.jaxrs.CxfRsBinding</code> type.          * @group advanced          */
DECL|method|binding (String binding)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|binding
parameter_list|(
name|String
name|binding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"binding"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured CXF Bus.          * The option is a<code>org.apache.cxf.Bus</code> type.          * @group advanced          */
DECL|method|bus (Object bus)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|bus
parameter_list|(
name|Object
name|bus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bus"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured CXF Bus.          * The option will be converted to a<code>org.apache.cxf.Bus</code>          * type.          * @group advanced          */
DECL|method|bus (String bus)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|bus
parameter_list|(
name|String
name|bus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bus"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the CXF continuation timeout which could          * be used in CxfConsumer by default when the CXF server is using Jetty          * or Servlet transport.          * The option is a<code>long</code> type.          * @group advanced          */
DECL|method|continuationTimeout ( long continuationTimeout)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|continuationTimeout
parameter_list|(
name|long
name|continuationTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"continuationTimeout"
argument_list|,
name|continuationTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the CXF continuation timeout which could          * be used in CxfConsumer by default when the CXF server is using Jetty          * or Servlet transport.          * The option will be converted to a<code>long</code> type.          * @group advanced          */
DECL|method|continuationTimeout ( String continuationTimeout)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|continuationTimeout
parameter_list|(
name|String
name|continuationTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"continuationTimeout"
argument_list|,
name|continuationTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option could apply the implementation of          * org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer which          * supports to configure the CXF endpoint in programmatic way. User can          * configure the CXF server and client by implementing          * configure{Server/Client} method of CxfEndpointConfigurer.          * The option is a          *<code>org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer</code> type.          * @group advanced          */
DECL|method|cxfRsEndpointConfigurer ( Object cxfRsEndpointConfigurer)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|cxfRsEndpointConfigurer
parameter_list|(
name|Object
name|cxfRsEndpointConfigurer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfRsEndpointConfigurer"
argument_list|,
name|cxfRsEndpointConfigurer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option could apply the implementation of          * org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer which          * supports to configure the CXF endpoint in programmatic way. User can          * configure the CXF server and client by implementing          * configure{Server/Client} method of CxfEndpointConfigurer.          * The option will be converted to a          *<code>org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer</code> type.          * @group advanced          */
DECL|method|cxfRsEndpointConfigurer ( String cxfRsEndpointConfigurer)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|cxfRsEndpointConfigurer
parameter_list|(
name|String
name|cxfRsEndpointConfigurer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfRsEndpointConfigurer"
argument_list|,
name|cxfRsEndpointConfigurer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will set the default bus when CXF endpoint create a bus by itself.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|defaultBus ( boolean defaultBus)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|defaultBus
parameter_list|(
name|boolean
name|defaultBus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultBus"
argument_list|,
name|defaultBus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will set the default bus when CXF endpoint create a bus by itself.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|defaultBus ( String defaultBus)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|defaultBus
parameter_list|(
name|String
name|defaultBus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultBus"
argument_list|,
name|defaultBus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option is a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When the option is true, Camel will perform the invocation of the          * resource class instance and put the response object into the exchange          * for further processing.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|performInvocation ( boolean performInvocation)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|performInvocation
parameter_list|(
name|boolean
name|performInvocation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"performInvocation"
argument_list|,
name|performInvocation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When the option is true, Camel will perform the invocation of the          * resource class instance and put the response object into the exchange          * for further processing.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|performInvocation ( String performInvocation)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|performInvocation
parameter_list|(
name|String
name|performInvocation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"performInvocation"
argument_list|,
name|performInvocation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When the option is true, JAXRS UriInfo, HttpHeaders, Request and          * SecurityContext contexts will be available to custom CXFRS processors          * as typed Camel exchange properties. These contexts can be used to          * analyze the current requests using JAX-RS API.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|propagateContexts ( boolean propagateContexts)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|propagateContexts
parameter_list|(
name|boolean
name|propagateContexts
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"propagateContexts"
argument_list|,
name|propagateContexts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When the option is true, JAXRS UriInfo, HttpHeaders, Request and          * SecurityContext contexts will be available to custom CXFRS processors          * as typed Camel exchange properties. These contexts can be used to          * analyze the current requests using JAX-RS API.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|propagateContexts ( String propagateContexts)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|propagateContexts
parameter_list|(
name|String
name|propagateContexts
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"propagateContexts"
argument_list|,
name|propagateContexts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedCxfRsEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the CXF-RS component.      */
DECL|interface|CxfRsEndpointProducerBuilder
specifier|public
interface|interface
name|CxfRsEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCxfRsEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To lookup an existing configured CxfRsEndpoint. Must used bean: as          * prefix.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|beanId (String beanId)
specifier|default
name|CxfRsEndpointProducerBuilder
name|beanId
parameter_list|(
name|String
name|beanId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"beanId"
argument_list|,
name|beanId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The service publish address.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|address (String address)
specifier|default
name|CxfRsEndpointProducerBuilder
name|address
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"address"
argument_list|,
name|address
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the feature list to the CxfRs endpoint.          * The option is a          *<code>java.util.List&lt;org.apache.cxf.feature.Feature&gt;</code>          * type.          * @group common          */
DECL|method|features (List<Object> features)
specifier|default
name|CxfRsEndpointProducerBuilder
name|features
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|features
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"features"
argument_list|,
name|features
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the feature list to the CxfRs endpoint.          * The option will be converted to a          *<code>java.util.List&lt;org.apache.cxf.feature.Feature&gt;</code>          * type.          * @group common          */
DECL|method|features (String features)
specifier|default
name|CxfRsEndpointProducerBuilder
name|features
parameter_list|(
name|String
name|features
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"features"
argument_list|,
name|features
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option enables CXF Logging Feature which writes inbound and          * outbound REST messages to log.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|loggingFeatureEnabled ( boolean loggingFeatureEnabled)
specifier|default
name|CxfRsEndpointProducerBuilder
name|loggingFeatureEnabled
parameter_list|(
name|boolean
name|loggingFeatureEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFeatureEnabled"
argument_list|,
name|loggingFeatureEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option enables CXF Logging Feature which writes inbound and          * outbound REST messages to log.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|loggingFeatureEnabled ( String loggingFeatureEnabled)
specifier|default
name|CxfRsEndpointProducerBuilder
name|loggingFeatureEnabled
parameter_list|(
name|String
name|loggingFeatureEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFeatureEnabled"
argument_list|,
name|loggingFeatureEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To limit the total size of number of bytes the logger will output          * when logging feature has been enabled.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|loggingSizeLimit ( int loggingSizeLimit)
specifier|default
name|CxfRsEndpointProducerBuilder
name|loggingSizeLimit
parameter_list|(
name|int
name|loggingSizeLimit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingSizeLimit"
argument_list|,
name|loggingSizeLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To limit the total size of number of bytes the logger will output          * when logging feature has been enabled.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|loggingSizeLimit ( String loggingSizeLimit)
specifier|default
name|CxfRsEndpointProducerBuilder
name|loggingSizeLimit
parameter_list|(
name|String
name|loggingSizeLimit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingSizeLimit"
argument_list|,
name|loggingSizeLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to specify the model file which is useful for the          * resource class without annotation. When using this option, then the          * service class can be omitted, to emulate document-only endpoints.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|modelRef (String modelRef)
specifier|default
name|CxfRsEndpointProducerBuilder
name|modelRef
parameter_list|(
name|String
name|modelRef
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"modelRef"
argument_list|,
name|modelRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set custom JAX-RS provider(s) list to the CxfRs endpoint. You can          * specify a string with a list of providers to lookup in the registy          * separated by comma.          * The option is a<code>java.util.List&lt;java.lang.Object&gt;</code>          * type.          * @group common          */
DECL|method|providers (List<Object> providers)
specifier|default
name|CxfRsEndpointProducerBuilder
name|providers
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|providers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"providers"
argument_list|,
name|providers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set custom JAX-RS provider(s) list to the CxfRs endpoint. You can          * specify a string with a list of providers to lookup in the registy          * separated by comma.          * The option will be converted to a          *<code>java.util.List&lt;java.lang.Object&gt;</code> type.          * @group common          */
DECL|method|providers (String providers)
specifier|default
name|CxfRsEndpointProducerBuilder
name|providers
parameter_list|(
name|String
name|providers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"providers"
argument_list|,
name|providers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The resource classes which you want to export as REST service.          * Multiple classes can be separated by comma.          * The option is a          *<code>java.util.List&lt;java.lang.Class&lt;java.lang.Object&gt;&gt;</code> type.          * @group common          */
DECL|method|resourceClasses ( List<Class<Object>> resourceClasses)
specifier|default
name|CxfRsEndpointProducerBuilder
name|resourceClasses
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|<
name|Object
argument_list|>
argument_list|>
name|resourceClasses
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceClasses"
argument_list|,
name|resourceClasses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The resource classes which you want to export as REST service.          * Multiple classes can be separated by comma.          * The option will be converted to a          *<code>java.util.List&lt;java.lang.Class&lt;java.lang.Object&gt;&gt;</code> type.          * @group common          */
DECL|method|resourceClasses ( String resourceClasses)
specifier|default
name|CxfRsEndpointProducerBuilder
name|resourceClasses
parameter_list|(
name|String
name|resourceClasses
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceClasses"
argument_list|,
name|resourceClasses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the locations of the schema(s) which can be used to validate the          * incoming XML or JAXB-driven JSON.          * The option is a<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          * @group common          */
DECL|method|schemaLocations ( List<String> schemaLocations)
specifier|default
name|CxfRsEndpointProducerBuilder
name|schemaLocations
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|schemaLocations
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"schemaLocations"
argument_list|,
name|schemaLocations
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the locations of the schema(s) which can be used to validate the          * incoming XML or JAXB-driven JSON.          * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          * @group common          */
DECL|method|schemaLocations ( String schemaLocations)
specifier|default
name|CxfRsEndpointProducerBuilder
name|schemaLocations
parameter_list|(
name|String
name|schemaLocations
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"schemaLocations"
argument_list|,
name|schemaLocations
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option controls whether the PhaseInterceptorChain skips logging          * the Fault that it catches.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|skipFaultLogging ( boolean skipFaultLogging)
specifier|default
name|CxfRsEndpointProducerBuilder
name|skipFaultLogging
parameter_list|(
name|boolean
name|skipFaultLogging
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipFaultLogging"
argument_list|,
name|skipFaultLogging
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option controls whether the PhaseInterceptorChain skips logging          * the Fault that it catches.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|skipFaultLogging ( String skipFaultLogging)
specifier|default
name|CxfRsEndpointProducerBuilder
name|skipFaultLogging
parameter_list|(
name|String
name|skipFaultLogging
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipFaultLogging"
argument_list|,
name|skipFaultLogging
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure a cookie handler to maintain a HTTP session.          * The option is a          *<code>org.apache.camel.http.common.cookie.CookieHandler</code> type.          * @group producer          */
DECL|method|cookieHandler (Object cookieHandler)
specifier|default
name|CxfRsEndpointProducerBuilder
name|cookieHandler
parameter_list|(
name|Object
name|cookieHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cookieHandler"
argument_list|,
name|cookieHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure a cookie handler to maintain a HTTP session.          * The option will be converted to a          *<code>org.apache.camel.http.common.cookie.CookieHandler</code> type.          * @group producer          */
DECL|method|cookieHandler (String cookieHandler)
specifier|default
name|CxfRsEndpointProducerBuilder
name|cookieHandler
parameter_list|(
name|String
name|cookieHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cookieHandler"
argument_list|,
name|cookieHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The hostname verifier to be used. Use the # notation to reference a          * HostnameVerifier from the registry.          * The option is a<code>javax.net.ssl.HostnameVerifier</code> type.          * @group producer          */
DECL|method|hostnameVerifier ( Object hostnameVerifier)
specifier|default
name|CxfRsEndpointProducerBuilder
name|hostnameVerifier
parameter_list|(
name|Object
name|hostnameVerifier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hostnameVerifier"
argument_list|,
name|hostnameVerifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The hostname verifier to be used. Use the # notation to reference a          * HostnameVerifier from the registry.          * The option will be converted to a          *<code>javax.net.ssl.HostnameVerifier</code> type.          * @group producer          */
DECL|method|hostnameVerifier ( String hostnameVerifier)
specifier|default
name|CxfRsEndpointProducerBuilder
name|hostnameVerifier
parameter_list|(
name|String
name|hostnameVerifier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hostnameVerifier"
argument_list|,
name|hostnameVerifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|CxfRsEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|CxfRsEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Camel SSL setting reference. Use the # notation to reference the          * SSL Context.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group producer          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|CxfRsEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Camel SSL setting reference. Use the # notation to reference the          * SSL Context.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group producer          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|CxfRsEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option tells the CxfRsProducer to inspect return codes and will          * generate an Exception if the return code is larger than 207.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|throwExceptionOnFailure ( boolean throwExceptionOnFailure)
specifier|default
name|CxfRsEndpointProducerBuilder
name|throwExceptionOnFailure
parameter_list|(
name|boolean
name|throwExceptionOnFailure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"throwExceptionOnFailure"
argument_list|,
name|throwExceptionOnFailure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option tells the CxfRsProducer to inspect return codes and will          * generate an Exception if the return code is larger than 207.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|throwExceptionOnFailure ( String throwExceptionOnFailure)
specifier|default
name|CxfRsEndpointProducerBuilder
name|throwExceptionOnFailure
parameter_list|(
name|String
name|throwExceptionOnFailure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"throwExceptionOnFailure"
argument_list|,
name|throwExceptionOnFailure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the CXF-RS component.      */
DECL|interface|AdvancedCxfRsEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedCxfRsEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CxfRsEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CxfRsEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * If it is true, the CxfRsProducer will use the HttpClientAPI to invoke          * the service. If it is false, the CxfRsProducer will use the          * ProxyClientAPI to invoke the service.          * The option is a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|httpClientAPI ( boolean httpClientAPI)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|httpClientAPI
parameter_list|(
name|boolean
name|httpClientAPI
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpClientAPI"
argument_list|,
name|httpClientAPI
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If it is true, the CxfRsProducer will use the HttpClientAPI to invoke          * the service. If it is false, the CxfRsProducer will use the          * ProxyClientAPI to invoke the service.          * The option will be converted to a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|httpClientAPI ( String httpClientAPI)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|httpClientAPI
parameter_list|(
name|String
name|httpClientAPI
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpClientAPI"
argument_list|,
name|httpClientAPI
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to tell CxfRsProducer to ignore the message body          * of the DELETE method when using HTTP API.          * The option is a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|ignoreDeleteMethodMessageBody ( boolean ignoreDeleteMethodMessageBody)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|ignoreDeleteMethodMessageBody
parameter_list|(
name|boolean
name|ignoreDeleteMethodMessageBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ignoreDeleteMethodMessageBody"
argument_list|,
name|ignoreDeleteMethodMessageBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to tell CxfRsProducer to ignore the message body          * of the DELETE method when using HTTP API.          * The option will be converted to a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|ignoreDeleteMethodMessageBody ( String ignoreDeleteMethodMessageBody)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|ignoreDeleteMethodMessageBody
parameter_list|(
name|String
name|ignoreDeleteMethodMessageBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"ignoreDeleteMethodMessageBody"
argument_list|,
name|ignoreDeleteMethodMessageBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option allows you to configure the maximum size of the cache.          * The implementation caches CXF clients or ClientFactoryBean in          * CxfProvider and CxfRsProvider.          * The option is a<code>int</code> type.          * @group producer (advanced)          */
DECL|method|maxClientCacheSize ( int maxClientCacheSize)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|maxClientCacheSize
parameter_list|(
name|int
name|maxClientCacheSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxClientCacheSize"
argument_list|,
name|maxClientCacheSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option allows you to configure the maximum size of the cache.          * The implementation caches CXF clients or ClientFactoryBean in          * CxfProvider and CxfRsProvider.          * The option will be converted to a<code>int</code> type.          * @group producer (advanced)          */
DECL|method|maxClientCacheSize ( String maxClientCacheSize)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|maxClientCacheSize
parameter_list|(
name|String
name|maxClientCacheSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxClientCacheSize"
argument_list|,
name|maxClientCacheSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CxfBinding to control the binding between Camel          * Message and CXF Message.          * The option is a          *<code>org.apache.camel.component.cxf.jaxrs.CxfRsBinding</code> type.          * @group advanced          */
DECL|method|binding (Object binding)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|binding
parameter_list|(
name|Object
name|binding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"binding"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CxfBinding to control the binding between Camel          * Message and CXF Message.          * The option will be converted to a          *<code>org.apache.camel.component.cxf.jaxrs.CxfRsBinding</code> type.          * @group advanced          */
DECL|method|binding (String binding)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|binding
parameter_list|(
name|String
name|binding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"binding"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured CXF Bus.          * The option is a<code>org.apache.cxf.Bus</code> type.          * @group advanced          */
DECL|method|bus (Object bus)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|bus
parameter_list|(
name|Object
name|bus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bus"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured CXF Bus.          * The option will be converted to a<code>org.apache.cxf.Bus</code>          * type.          * @group advanced          */
DECL|method|bus (String bus)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|bus
parameter_list|(
name|String
name|bus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bus"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the CXF continuation timeout which could          * be used in CxfConsumer by default when the CXF server is using Jetty          * or Servlet transport.          * The option is a<code>long</code> type.          * @group advanced          */
DECL|method|continuationTimeout ( long continuationTimeout)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|continuationTimeout
parameter_list|(
name|long
name|continuationTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"continuationTimeout"
argument_list|,
name|continuationTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the CXF continuation timeout which could          * be used in CxfConsumer by default when the CXF server is using Jetty          * or Servlet transport.          * The option will be converted to a<code>long</code> type.          * @group advanced          */
DECL|method|continuationTimeout ( String continuationTimeout)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|continuationTimeout
parameter_list|(
name|String
name|continuationTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"continuationTimeout"
argument_list|,
name|continuationTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option could apply the implementation of          * org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer which          * supports to configure the CXF endpoint in programmatic way. User can          * configure the CXF server and client by implementing          * configure{Server/Client} method of CxfEndpointConfigurer.          * The option is a          *<code>org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer</code> type.          * @group advanced          */
DECL|method|cxfRsEndpointConfigurer ( Object cxfRsEndpointConfigurer)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|cxfRsEndpointConfigurer
parameter_list|(
name|Object
name|cxfRsEndpointConfigurer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfRsEndpointConfigurer"
argument_list|,
name|cxfRsEndpointConfigurer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option could apply the implementation of          * org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer which          * supports to configure the CXF endpoint in programmatic way. User can          * configure the CXF server and client by implementing          * configure{Server/Client} method of CxfEndpointConfigurer.          * The option will be converted to a          *<code>org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer</code> type.          * @group advanced          */
DECL|method|cxfRsEndpointConfigurer ( String cxfRsEndpointConfigurer)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|cxfRsEndpointConfigurer
parameter_list|(
name|String
name|cxfRsEndpointConfigurer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfRsEndpointConfigurer"
argument_list|,
name|cxfRsEndpointConfigurer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will set the default bus when CXF endpoint create a bus by itself.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|defaultBus ( boolean defaultBus)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|defaultBus
parameter_list|(
name|boolean
name|defaultBus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultBus"
argument_list|,
name|defaultBus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will set the default bus when CXF endpoint create a bus by itself.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|defaultBus ( String defaultBus)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|defaultBus
parameter_list|(
name|String
name|defaultBus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultBus"
argument_list|,
name|defaultBus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option is a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When the option is true, Camel will perform the invocation of the          * resource class instance and put the response object into the exchange          * for further processing.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|performInvocation ( boolean performInvocation)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|performInvocation
parameter_list|(
name|boolean
name|performInvocation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"performInvocation"
argument_list|,
name|performInvocation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When the option is true, Camel will perform the invocation of the          * resource class instance and put the response object into the exchange          * for further processing.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|performInvocation ( String performInvocation)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|performInvocation
parameter_list|(
name|String
name|performInvocation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"performInvocation"
argument_list|,
name|performInvocation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When the option is true, JAXRS UriInfo, HttpHeaders, Request and          * SecurityContext contexts will be available to custom CXFRS processors          * as typed Camel exchange properties. These contexts can be used to          * analyze the current requests using JAX-RS API.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|propagateContexts ( boolean propagateContexts)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|propagateContexts
parameter_list|(
name|boolean
name|propagateContexts
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"propagateContexts"
argument_list|,
name|propagateContexts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When the option is true, JAXRS UriInfo, HttpHeaders, Request and          * SecurityContext contexts will be available to custom CXFRS processors          * as typed Camel exchange properties. These contexts can be used to          * analyze the current requests using JAX-RS API.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|propagateContexts ( String propagateContexts)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|propagateContexts
parameter_list|(
name|String
name|propagateContexts
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"propagateContexts"
argument_list|,
name|propagateContexts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedCxfRsEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the CXF-RS component.      */
DECL|interface|CxfRsEndpointBuilder
specifier|public
interface|interface
name|CxfRsEndpointBuilder
extends|extends
name|CxfRsEndpointConsumerBuilder
extends|,
name|CxfRsEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCxfRsEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To lookup an existing configured CxfRsEndpoint. Must used bean: as          * prefix.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|beanId (String beanId)
specifier|default
name|CxfRsEndpointBuilder
name|beanId
parameter_list|(
name|String
name|beanId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"beanId"
argument_list|,
name|beanId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The service publish address.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|address (String address)
specifier|default
name|CxfRsEndpointBuilder
name|address
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"address"
argument_list|,
name|address
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the feature list to the CxfRs endpoint.          * The option is a          *<code>java.util.List&lt;org.apache.cxf.feature.Feature&gt;</code>          * type.          * @group common          */
DECL|method|features (List<Object> features)
specifier|default
name|CxfRsEndpointBuilder
name|features
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|features
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"features"
argument_list|,
name|features
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the feature list to the CxfRs endpoint.          * The option will be converted to a          *<code>java.util.List&lt;org.apache.cxf.feature.Feature&gt;</code>          * type.          * @group common          */
DECL|method|features (String features)
specifier|default
name|CxfRsEndpointBuilder
name|features
parameter_list|(
name|String
name|features
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"features"
argument_list|,
name|features
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option enables CXF Logging Feature which writes inbound and          * outbound REST messages to log.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|loggingFeatureEnabled ( boolean loggingFeatureEnabled)
specifier|default
name|CxfRsEndpointBuilder
name|loggingFeatureEnabled
parameter_list|(
name|boolean
name|loggingFeatureEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFeatureEnabled"
argument_list|,
name|loggingFeatureEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option enables CXF Logging Feature which writes inbound and          * outbound REST messages to log.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|loggingFeatureEnabled ( String loggingFeatureEnabled)
specifier|default
name|CxfRsEndpointBuilder
name|loggingFeatureEnabled
parameter_list|(
name|String
name|loggingFeatureEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFeatureEnabled"
argument_list|,
name|loggingFeatureEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To limit the total size of number of bytes the logger will output          * when logging feature has been enabled.          * The option is a<code>int</code> type.          * @group common          */
DECL|method|loggingSizeLimit (int loggingSizeLimit)
specifier|default
name|CxfRsEndpointBuilder
name|loggingSizeLimit
parameter_list|(
name|int
name|loggingSizeLimit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingSizeLimit"
argument_list|,
name|loggingSizeLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To limit the total size of number of bytes the logger will output          * when logging feature has been enabled.          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|loggingSizeLimit (String loggingSizeLimit)
specifier|default
name|CxfRsEndpointBuilder
name|loggingSizeLimit
parameter_list|(
name|String
name|loggingSizeLimit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingSizeLimit"
argument_list|,
name|loggingSizeLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to specify the model file which is useful for the          * resource class without annotation. When using this option, then the          * service class can be omitted, to emulate document-only endpoints.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|modelRef (String modelRef)
specifier|default
name|CxfRsEndpointBuilder
name|modelRef
parameter_list|(
name|String
name|modelRef
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"modelRef"
argument_list|,
name|modelRef
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set custom JAX-RS provider(s) list to the CxfRs endpoint. You can          * specify a string with a list of providers to lookup in the registy          * separated by comma.          * The option is a<code>java.util.List&lt;java.lang.Object&gt;</code>          * type.          * @group common          */
DECL|method|providers (List<Object> providers)
specifier|default
name|CxfRsEndpointBuilder
name|providers
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|providers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"providers"
argument_list|,
name|providers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set custom JAX-RS provider(s) list to the CxfRs endpoint. You can          * specify a string with a list of providers to lookup in the registy          * separated by comma.          * The option will be converted to a          *<code>java.util.List&lt;java.lang.Object&gt;</code> type.          * @group common          */
DECL|method|providers (String providers)
specifier|default
name|CxfRsEndpointBuilder
name|providers
parameter_list|(
name|String
name|providers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"providers"
argument_list|,
name|providers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The resource classes which you want to export as REST service.          * Multiple classes can be separated by comma.          * The option is a          *<code>java.util.List&lt;java.lang.Class&lt;java.lang.Object&gt;&gt;</code> type.          * @group common          */
DECL|method|resourceClasses ( List<Class<Object>> resourceClasses)
specifier|default
name|CxfRsEndpointBuilder
name|resourceClasses
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|<
name|Object
argument_list|>
argument_list|>
name|resourceClasses
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceClasses"
argument_list|,
name|resourceClasses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The resource classes which you want to export as REST service.          * Multiple classes can be separated by comma.          * The option will be converted to a          *<code>java.util.List&lt;java.lang.Class&lt;java.lang.Object&gt;&gt;</code> type.          * @group common          */
DECL|method|resourceClasses (String resourceClasses)
specifier|default
name|CxfRsEndpointBuilder
name|resourceClasses
parameter_list|(
name|String
name|resourceClasses
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resourceClasses"
argument_list|,
name|resourceClasses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the locations of the schema(s) which can be used to validate the          * incoming XML or JAXB-driven JSON.          * The option is a<code>java.util.List&lt;java.lang.String&gt;</code>          * type.          * @group common          */
DECL|method|schemaLocations ( List<String> schemaLocations)
specifier|default
name|CxfRsEndpointBuilder
name|schemaLocations
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|schemaLocations
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"schemaLocations"
argument_list|,
name|schemaLocations
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the locations of the schema(s) which can be used to validate the          * incoming XML or JAXB-driven JSON.          * The option will be converted to a          *<code>java.util.List&lt;java.lang.String&gt;</code> type.          * @group common          */
DECL|method|schemaLocations (String schemaLocations)
specifier|default
name|CxfRsEndpointBuilder
name|schemaLocations
parameter_list|(
name|String
name|schemaLocations
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"schemaLocations"
argument_list|,
name|schemaLocations
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option controls whether the PhaseInterceptorChain skips logging          * the Fault that it catches.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|skipFaultLogging (boolean skipFaultLogging)
specifier|default
name|CxfRsEndpointBuilder
name|skipFaultLogging
parameter_list|(
name|boolean
name|skipFaultLogging
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipFaultLogging"
argument_list|,
name|skipFaultLogging
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option controls whether the PhaseInterceptorChain skips logging          * the Fault that it catches.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|skipFaultLogging (String skipFaultLogging)
specifier|default
name|CxfRsEndpointBuilder
name|skipFaultLogging
parameter_list|(
name|String
name|skipFaultLogging
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipFaultLogging"
argument_list|,
name|skipFaultLogging
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the CXF-RS component.      */
DECL|interface|AdvancedCxfRsEndpointBuilder
specifier|public
interface|interface
name|AdvancedCxfRsEndpointBuilder
extends|extends
name|AdvancedCxfRsEndpointConsumerBuilder
extends|,
name|AdvancedCxfRsEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CxfRsEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CxfRsEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CxfBinding to control the binding between Camel          * Message and CXF Message.          * The option is a          *<code>org.apache.camel.component.cxf.jaxrs.CxfRsBinding</code> type.          * @group advanced          */
DECL|method|binding (Object binding)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|binding
parameter_list|(
name|Object
name|binding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"binding"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CxfBinding to control the binding between Camel          * Message and CXF Message.          * The option will be converted to a          *<code>org.apache.camel.component.cxf.jaxrs.CxfRsBinding</code> type.          * @group advanced          */
DECL|method|binding (String binding)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|binding
parameter_list|(
name|String
name|binding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"binding"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured CXF Bus.          * The option is a<code>org.apache.cxf.Bus</code> type.          * @group advanced          */
DECL|method|bus (Object bus)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|bus
parameter_list|(
name|Object
name|bus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bus"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured CXF Bus.          * The option will be converted to a<code>org.apache.cxf.Bus</code>          * type.          * @group advanced          */
DECL|method|bus (String bus)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|bus
parameter_list|(
name|String
name|bus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bus"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the CXF continuation timeout which could          * be used in CxfConsumer by default when the CXF server is using Jetty          * or Servlet transport.          * The option is a<code>long</code> type.          * @group advanced          */
DECL|method|continuationTimeout ( long continuationTimeout)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|continuationTimeout
parameter_list|(
name|long
name|continuationTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"continuationTimeout"
argument_list|,
name|continuationTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the CXF continuation timeout which could          * be used in CxfConsumer by default when the CXF server is using Jetty          * or Servlet transport.          * The option will be converted to a<code>long</code> type.          * @group advanced          */
DECL|method|continuationTimeout ( String continuationTimeout)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|continuationTimeout
parameter_list|(
name|String
name|continuationTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"continuationTimeout"
argument_list|,
name|continuationTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option could apply the implementation of          * org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer which          * supports to configure the CXF endpoint in programmatic way. User can          * configure the CXF server and client by implementing          * configure{Server/Client} method of CxfEndpointConfigurer.          * The option is a          *<code>org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer</code> type.          * @group advanced          */
DECL|method|cxfRsEndpointConfigurer ( Object cxfRsEndpointConfigurer)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|cxfRsEndpointConfigurer
parameter_list|(
name|Object
name|cxfRsEndpointConfigurer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfRsEndpointConfigurer"
argument_list|,
name|cxfRsEndpointConfigurer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option could apply the implementation of          * org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer which          * supports to configure the CXF endpoint in programmatic way. User can          * configure the CXF server and client by implementing          * configure{Server/Client} method of CxfEndpointConfigurer.          * The option will be converted to a          *<code>org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer</code> type.          * @group advanced          */
DECL|method|cxfRsEndpointConfigurer ( String cxfRsEndpointConfigurer)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|cxfRsEndpointConfigurer
parameter_list|(
name|String
name|cxfRsEndpointConfigurer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfRsEndpointConfigurer"
argument_list|,
name|cxfRsEndpointConfigurer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will set the default bus when CXF endpoint create a bus by itself.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|defaultBus (boolean defaultBus)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|defaultBus
parameter_list|(
name|boolean
name|defaultBus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultBus"
argument_list|,
name|defaultBus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will set the default bus when CXF endpoint create a bus by itself.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|defaultBus (String defaultBus)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|defaultBus
parameter_list|(
name|String
name|defaultBus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultBus"
argument_list|,
name|defaultBus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option is a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When the option is true, Camel will perform the invocation of the          * resource class instance and put the response object into the exchange          * for further processing.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|performInvocation ( boolean performInvocation)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|performInvocation
parameter_list|(
name|boolean
name|performInvocation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"performInvocation"
argument_list|,
name|performInvocation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When the option is true, Camel will perform the invocation of the          * resource class instance and put the response object into the exchange          * for further processing.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|performInvocation ( String performInvocation)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|performInvocation
parameter_list|(
name|String
name|performInvocation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"performInvocation"
argument_list|,
name|performInvocation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When the option is true, JAXRS UriInfo, HttpHeaders, Request and          * SecurityContext contexts will be available to custom CXFRS processors          * as typed Camel exchange properties. These contexts can be used to          * analyze the current requests using JAX-RS API.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|propagateContexts ( boolean propagateContexts)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|propagateContexts
parameter_list|(
name|boolean
name|propagateContexts
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"propagateContexts"
argument_list|,
name|propagateContexts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * When the option is true, JAXRS UriInfo, HttpHeaders, Request and          * SecurityContext contexts will be available to custom CXFRS processors          * as typed Camel exchange properties. These contexts can be used to          * analyze the current requests using JAX-RS API.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|propagateContexts ( String propagateContexts)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|propagateContexts
parameter_list|(
name|String
name|propagateContexts
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"propagateContexts"
argument_list|,
name|propagateContexts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedCxfRsEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.cxf.jaxrs.BindingStyle</code> enum.      */
DECL|enum|BindingStyle
enum|enum
name|BindingStyle
block|{
DECL|enumConstant|SimpleConsumer
DECL|enumConstant|Default
DECL|enumConstant|Custom
name|SimpleConsumer
block|,
name|Default
block|,
name|Custom
block|;     }
comment|/**      * The cxfrs component is used for JAX-RS REST services using Apache CXF.      * Creates a builder to build endpoints for the CXF-RS component.      */
DECL|method|cxfRs (String path)
specifier|default
name|CxfRsEndpointBuilder
name|cxfRs
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|CxfRsEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|CxfRsEndpointBuilder
implements|,
name|AdvancedCxfRsEndpointBuilder
block|{
specifier|public
name|CxfRsEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"cxfrs"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|CxfRsEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

