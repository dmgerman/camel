begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_comment
comment|/**  * The flink component can be used to send DataSet jobs to Apache Flink cluster.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|FlinkEndpointBuilderFactory
specifier|public
interface|interface
name|FlinkEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint for the Apache Flink component.      */
DECL|interface|FlinkEndpointBuilder
specifier|public
specifier|static
interface|interface
name|FlinkEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|public
specifier|default
name|AdvancedFlinkEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedFlinkEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Type of the endpoint (dataset, datastream).          * The option is a          *<code>org.apache.camel.component.flink.EndpointType</code> type.          * @group producer          */
DECL|method|endpointType ( EndpointType endpointType)
specifier|public
specifier|default
name|FlinkEndpointBuilder
name|endpointType
parameter_list|(
name|EndpointType
name|endpointType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"endpointType"
argument_list|,
name|endpointType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Type of the endpoint (dataset, datastream).          * The option will be converted to a          *<code>org.apache.camel.component.flink.EndpointType</code> type.          * @group producer          */
DECL|method|endpointType (String endpointType)
specifier|public
specifier|default
name|FlinkEndpointBuilder
name|endpointType
parameter_list|(
name|String
name|endpointType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"endpointType"
argument_list|,
name|endpointType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Indicates if results should be collected or counted.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|collect (boolean collect)
specifier|public
specifier|default
name|FlinkEndpointBuilder
name|collect
parameter_list|(
name|boolean
name|collect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"collect"
argument_list|,
name|collect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Indicates if results should be collected or counted.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|collect (String collect)
specifier|public
specifier|default
name|FlinkEndpointBuilder
name|collect
parameter_list|(
name|String
name|collect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"collect"
argument_list|,
name|collect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * DataSet to compute against.          * The option is a<code>org.apache.flink.api.java.DataSet</code> type.          * @group producer          */
DECL|method|dataSet (Object dataSet)
specifier|public
specifier|default
name|FlinkEndpointBuilder
name|dataSet
parameter_list|(
name|Object
name|dataSet
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataSet"
argument_list|,
name|dataSet
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * DataSet to compute against.          * The option will be converted to a          *<code>org.apache.flink.api.java.DataSet</code> type.          * @group producer          */
DECL|method|dataSet (String dataSet)
specifier|public
specifier|default
name|FlinkEndpointBuilder
name|dataSet
parameter_list|(
name|String
name|dataSet
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataSet"
argument_list|,
name|dataSet
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Function performing action against a DataSet.          * The option is a          *<code>org.apache.camel.component.flink.DataSetCallback</code> type.          * @group producer          */
DECL|method|dataSetCallback ( Object dataSetCallback)
specifier|public
specifier|default
name|FlinkEndpointBuilder
name|dataSetCallback
parameter_list|(
name|Object
name|dataSetCallback
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataSetCallback"
argument_list|,
name|dataSetCallback
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Function performing action against a DataSet.          * The option will be converted to a          *<code>org.apache.camel.component.flink.DataSetCallback</code> type.          * @group producer          */
DECL|method|dataSetCallback ( String dataSetCallback)
specifier|public
specifier|default
name|FlinkEndpointBuilder
name|dataSetCallback
parameter_list|(
name|String
name|dataSetCallback
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataSetCallback"
argument_list|,
name|dataSetCallback
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * DataStream to compute against.          * The option is a          *<code>org.apache.flink.streaming.api.datastream.DataStream</code>          * type.          * @group producer          */
DECL|method|dataStream (Object dataStream)
specifier|public
specifier|default
name|FlinkEndpointBuilder
name|dataStream
parameter_list|(
name|Object
name|dataStream
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataStream"
argument_list|,
name|dataStream
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * DataStream to compute against.          * The option will be converted to a          *<code>org.apache.flink.streaming.api.datastream.DataStream</code>          * type.          * @group producer          */
DECL|method|dataStream (String dataStream)
specifier|public
specifier|default
name|FlinkEndpointBuilder
name|dataStream
parameter_list|(
name|String
name|dataStream
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataStream"
argument_list|,
name|dataStream
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Function performing action against a DataStream.          * The option is a          *<code>org.apache.camel.component.flink.DataStreamCallback</code>          * type.          * @group producer          */
DECL|method|dataStreamCallback ( Object dataStreamCallback)
specifier|public
specifier|default
name|FlinkEndpointBuilder
name|dataStreamCallback
parameter_list|(
name|Object
name|dataStreamCallback
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataStreamCallback"
argument_list|,
name|dataStreamCallback
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Function performing action against a DataStream.          * The option will be converted to a          *<code>org.apache.camel.component.flink.DataStreamCallback</code>          * type.          * @group producer          */
DECL|method|dataStreamCallback ( String dataStreamCallback)
specifier|public
specifier|default
name|FlinkEndpointBuilder
name|dataStreamCallback
parameter_list|(
name|String
name|dataStreamCallback
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataStreamCallback"
argument_list|,
name|dataStreamCallback
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Apache Flink component.      */
DECL|interface|AdvancedFlinkEndpointBuilder
specifier|public
specifier|static
interface|interface
name|AdvancedFlinkEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|public
specifier|default
name|FlinkEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|FlinkEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedFlinkEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedFlinkEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|public
specifier|default
name|AdvancedFlinkEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|public
specifier|default
name|AdvancedFlinkEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for<code>org.apache.camel.component.flink.EndpointType</code>      * enum.      */
DECL|enum|EndpointType
specifier|public
specifier|static
enum|enum
name|EndpointType
block|{
DECL|enumConstant|dataset
DECL|enumConstant|datastream
name|dataset
block|,
name|datastream
block|;     }
comment|/**      * The flink component can be used to send DataSet jobs to Apache Flink      * cluster. Creates a builder to build endpoints for the Apache Flink      * component.      */
DECL|method|flink (String path)
specifier|public
specifier|default
name|FlinkEndpointBuilder
name|flink
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|FlinkEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|FlinkEndpointBuilder
implements|,
name|AdvancedFlinkEndpointBuilder
block|{
specifier|public
name|FlinkEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"flink"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|FlinkEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

