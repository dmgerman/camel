begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The couchdb component is used for integrate with CouchDB databases.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|CouchDbEndpointBuilderFactory
specifier|public
interface|interface
name|CouchDbEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the CouchDB component.      */
DECL|interface|CouchDbEndpointConsumerBuilder
specifier|public
interface|interface
name|CouchDbEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCouchDbEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCouchDbEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The protocol to use for communicating with the database.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|protocol (String protocol)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|protocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"protocol"
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Hostname of the running couchdb instance.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|hostname (String hostname)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|hostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hostname"
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the running couchdb instance.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|port (int port)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the running couchdb instance.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|port (String port)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of the database to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|database (String database)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|database
parameter_list|(
name|String
name|database
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"database"
argument_list|,
name|database
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Creates the database if it does not already exist.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|createDatabase ( boolean createDatabase)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|createDatabase
parameter_list|(
name|boolean
name|createDatabase
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createDatabase"
argument_list|,
name|createDatabase
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Creates the database if it does not already exist.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|createDatabase ( String createDatabase)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|createDatabase
parameter_list|(
name|String
name|createDatabase
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createDatabase"
argument_list|,
name|createDatabase
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Document deletes are published as events.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|deletes (boolean deletes)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|deletes
parameter_list|(
name|boolean
name|deletes
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deletes"
argument_list|,
name|deletes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Document deletes are published as events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|deletes (String deletes)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|deletes
parameter_list|(
name|String
name|deletes
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deletes"
argument_list|,
name|deletes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How often to send an empty message to keep socket alive in millis.          *           * The option is a:<code>long</code> type.          *           * Group: consumer          */
DECL|method|heartbeat (long heartbeat)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|heartbeat
parameter_list|(
name|long
name|heartbeat
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"heartbeat"
argument_list|,
name|heartbeat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * How often to send an empty message to keep socket alive in millis.          *           * The option will be converted to a<code>long</code> type.          *           * Group: consumer          */
DECL|method|heartbeat (String heartbeat)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|heartbeat
parameter_list|(
name|String
name|heartbeat
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"heartbeat"
argument_list|,
name|heartbeat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Start tracking changes immediately after the given update sequence.          * The default, null, will start monitoring from the latest sequence.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|since (String since)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|since
parameter_list|(
name|String
name|since
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"since"
argument_list|,
name|since
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies how many revisions are returned in the changes array. The          * default, main_only, will only return the current winning revision;          * all_docs will return all leaf revisions (including conflicts and          * deleted former conflicts.).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|style (String style)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|style
parameter_list|(
name|String
name|style
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"style"
argument_list|,
name|style
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Document inserts/updates are published as events.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|updates (boolean updates)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|updates
parameter_list|(
name|boolean
name|updates
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"updates"
argument_list|,
name|updates
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Document inserts/updates are published as events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|updates (String updates)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|updates
parameter_list|(
name|String
name|updates
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"updates"
argument_list|,
name|updates
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for authenticated databases.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username in case of authenticated databases.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|CouchDbEndpointConsumerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the CouchDB component.      */
DECL|interface|AdvancedCouchDbEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedCouchDbEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CouchDbEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CouchDbEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedCouchDbEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedCouchDbEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedCouchDbEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedCouchDbEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCouchDbEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCouchDbEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedCouchDbEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedCouchDbEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the CouchDB component.      */
DECL|interface|CouchDbEndpointProducerBuilder
specifier|public
interface|interface
name|CouchDbEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCouchDbEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCouchDbEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The protocol to use for communicating with the database.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|protocol (String protocol)
specifier|default
name|CouchDbEndpointProducerBuilder
name|protocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"protocol"
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Hostname of the running couchdb instance.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|hostname (String hostname)
specifier|default
name|CouchDbEndpointProducerBuilder
name|hostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hostname"
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the running couchdb instance.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|port (int port)
specifier|default
name|CouchDbEndpointProducerBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the running couchdb instance.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|port (String port)
specifier|default
name|CouchDbEndpointProducerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of the database to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|database (String database)
specifier|default
name|CouchDbEndpointProducerBuilder
name|database
parameter_list|(
name|String
name|database
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"database"
argument_list|,
name|database
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Creates the database if it does not already exist.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|createDatabase ( boolean createDatabase)
specifier|default
name|CouchDbEndpointProducerBuilder
name|createDatabase
parameter_list|(
name|boolean
name|createDatabase
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createDatabase"
argument_list|,
name|createDatabase
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Creates the database if it does not already exist.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|createDatabase ( String createDatabase)
specifier|default
name|CouchDbEndpointProducerBuilder
name|createDatabase
parameter_list|(
name|String
name|createDatabase
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createDatabase"
argument_list|,
name|createDatabase
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|CouchDbEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|CouchDbEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for authenticated databases.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|CouchDbEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username in case of authenticated databases.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|CouchDbEndpointProducerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the CouchDB component.      */
DECL|interface|AdvancedCouchDbEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedCouchDbEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CouchDbEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CouchDbEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCouchDbEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCouchDbEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedCouchDbEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedCouchDbEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the CouchDB component.      */
DECL|interface|CouchDbEndpointBuilder
specifier|public
interface|interface
name|CouchDbEndpointBuilder
extends|extends
name|CouchDbEndpointConsumerBuilder
extends|,
name|CouchDbEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCouchDbEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCouchDbEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The protocol to use for communicating with the database.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|protocol (String protocol)
specifier|default
name|CouchDbEndpointBuilder
name|protocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"protocol"
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Hostname of the running couchdb instance.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|hostname (String hostname)
specifier|default
name|CouchDbEndpointBuilder
name|hostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hostname"
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the running couchdb instance.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|port (int port)
specifier|default
name|CouchDbEndpointBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the running couchdb instance.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|port (String port)
specifier|default
name|CouchDbEndpointBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of the database to use.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|database (String database)
specifier|default
name|CouchDbEndpointBuilder
name|database
parameter_list|(
name|String
name|database
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"database"
argument_list|,
name|database
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Creates the database if it does not already exist.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|createDatabase (boolean createDatabase)
specifier|default
name|CouchDbEndpointBuilder
name|createDatabase
parameter_list|(
name|boolean
name|createDatabase
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createDatabase"
argument_list|,
name|createDatabase
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Creates the database if it does not already exist.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|createDatabase (String createDatabase)
specifier|default
name|CouchDbEndpointBuilder
name|createDatabase
parameter_list|(
name|String
name|createDatabase
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"createDatabase"
argument_list|,
name|createDatabase
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password for authenticated databases.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|CouchDbEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username in case of authenticated databases.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|CouchDbEndpointBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the CouchDB component.      */
DECL|interface|AdvancedCouchDbEndpointBuilder
specifier|public
interface|interface
name|AdvancedCouchDbEndpointBuilder
extends|extends
name|AdvancedCouchDbEndpointConsumerBuilder
extends|,
name|AdvancedCouchDbEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CouchDbEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CouchDbEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCouchDbEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCouchDbEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedCouchDbEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedCouchDbEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * CouchDB (camel-couchdb)      * The couchdb component is used for integrate with CouchDB databases.      *       * Syntax:<code>couchdb:protocol:hostname:port/database</code>      * Category: database,nosql      * Available as of version: 2.11      * Maven coordinates: org.apache.camel:camel-couchdb      */
DECL|method|couchDb (String path)
specifier|default
name|CouchDbEndpointBuilder
name|couchDb
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|CouchDbEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|CouchDbEndpointBuilder
implements|,
name|AdvancedCouchDbEndpointBuilder
block|{
specifier|public
name|CouchDbEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"couchdb"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|CouchDbEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

