begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * Communicates with OData 2.0 services using Apache Olingo.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|Olingo2EndpointBuilderFactory
specifier|public
interface|interface
name|Olingo2EndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Olingo2 component.      */
DECL|interface|Olingo2EndpointConsumerBuilder
specifier|public
interface|interface
name|Olingo2EndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedOlingo2EndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedOlingo2EndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option is a          *<code>org.apache.camel.component.olingo2.internal.Olingo2ApiName</code> type.          * @group common          */
DECL|method|apiName (Olingo2ApiName apiName)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|apiName
parameter_list|(
name|Olingo2ApiName
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option will be converted to a          *<code>org.apache.camel.component.olingo2.internal.Olingo2ApiName</code> type.          * @group common          */
DECL|method|apiName (String apiName)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|apiName
parameter_list|(
name|String
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What sub operation to use for the selected operation.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|methodName (String methodName)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|methodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"methodName"
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP connection creation timeout in milliseconds, defaults to 30,000          * (30 seconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|connectTimeout (int connectTimeout)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|connectTimeout
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP connection creation timeout in milliseconds, defaults to 30,000          * (30 seconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|connectTimeout ( String connectTimeout)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|connectTimeout
parameter_list|(
name|String
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Content-Type header value can be used to specify JSON or XML message          * format, defaults to application/json;charset=utf-8.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|contentType (String contentType)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|contentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"contentType"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set this to true to filter out results that have already been          * communicated by this component.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|filterAlreadySeen ( boolean filterAlreadySeen)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|filterAlreadySeen
parameter_list|(
name|boolean
name|filterAlreadySeen
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filterAlreadySeen"
argument_list|,
name|filterAlreadySeen
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set this to true to filter out results that have already been          * communicated by this component.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|filterAlreadySeen ( String filterAlreadySeen)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|filterAlreadySeen
parameter_list|(
name|String
name|filterAlreadySeen
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filterAlreadySeen"
argument_list|,
name|filterAlreadySeen
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP async client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          * The option is a          *<code>org.apache.http.impl.nio.client.HttpAsyncClientBuilder</code>          * type.          * @group common          */
DECL|method|httpAsyncClientBuilder ( Object httpAsyncClientBuilder)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|httpAsyncClientBuilder
parameter_list|(
name|Object
name|httpAsyncClientBuilder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpAsyncClientBuilder"
argument_list|,
name|httpAsyncClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP async client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          * The option will be converted to a          *<code>org.apache.http.impl.nio.client.HttpAsyncClientBuilder</code>          * type.          * @group common          */
DECL|method|httpAsyncClientBuilder ( String httpAsyncClientBuilder)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|httpAsyncClientBuilder
parameter_list|(
name|String
name|httpAsyncClientBuilder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpAsyncClientBuilder"
argument_list|,
name|httpAsyncClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          * The option is a          *<code>org.apache.http.impl.client.HttpClientBuilder</code> type.          * @group common          */
DECL|method|httpClientBuilder ( Object httpClientBuilder)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|httpClientBuilder
parameter_list|(
name|Object
name|httpClientBuilder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpClientBuilder"
argument_list|,
name|httpClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          * The option will be converted to a          *<code>org.apache.http.impl.client.HttpClientBuilder</code> type.          * @group common          */
DECL|method|httpClientBuilder ( String httpClientBuilder)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|httpClientBuilder
parameter_list|(
name|String
name|httpClientBuilder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpClientBuilder"
argument_list|,
name|httpClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP headers to inject into every request, this could include          * OAuth tokens, etc.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.String&gt;</code> type.          * @group common          */
DECL|method|httpHeaders ( Map<String, String> httpHeaders)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|httpHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP headers to inject into every request, this could include          * OAuth tokens, etc.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>          * type.          * @group common          */
DECL|method|httpHeaders (String httpHeaders)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|httpHeaders
parameter_list|(
name|String
name|httpHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|inBody (String inBody)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP proxy server configuration.          * The option is a<code>org.apache.http.HttpHost</code> type.          * @group common          */
DECL|method|proxy (Object proxy)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|proxy
parameter_list|(
name|Object
name|proxy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxy"
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP proxy server configuration.          * The option will be converted to a          *<code>org.apache.http.HttpHost</code> type.          * @group common          */
DECL|method|proxy (String proxy)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|proxy
parameter_list|(
name|String
name|proxy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxy"
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Target OData service base URI, e.g.          * http://services.odata.org/OData/OData.svc.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|serviceUri (String serviceUri)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|serviceUri
parameter_list|(
name|String
name|serviceUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceUri"
argument_list|,
name|serviceUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP request timeout in milliseconds, defaults to 30,000 (30          * seconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|socketTimeout (int socketTimeout)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|socketTimeout
parameter_list|(
name|int
name|socketTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP request timeout in milliseconds, defaults to 30,000 (30          * seconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|socketTimeout ( String socketTimeout)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|socketTimeout
parameter_list|(
name|String
name|socketTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group common          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group common          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|Olingo2EndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Olingo2 component.      */
DECL|interface|AdvancedOlingo2EndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedOlingo2EndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|Olingo2EndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|Olingo2EndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedOlingo2EndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedOlingo2EndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedOlingo2EndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedOlingo2EndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedOlingo2EndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedOlingo2EndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedOlingo2EndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedOlingo2EndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Olingo2 component.      */
DECL|interface|Olingo2EndpointProducerBuilder
specifier|public
specifier|static
interface|interface
name|Olingo2EndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedOlingo2EndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedOlingo2EndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option is a          *<code>org.apache.camel.component.olingo2.internal.Olingo2ApiName</code> type.          * @group common          */
DECL|method|apiName (Olingo2ApiName apiName)
specifier|default
name|Olingo2EndpointProducerBuilder
name|apiName
parameter_list|(
name|Olingo2ApiName
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option will be converted to a          *<code>org.apache.camel.component.olingo2.internal.Olingo2ApiName</code> type.          * @group common          */
DECL|method|apiName (String apiName)
specifier|default
name|Olingo2EndpointProducerBuilder
name|apiName
parameter_list|(
name|String
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What sub operation to use for the selected operation.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|methodName (String methodName)
specifier|default
name|Olingo2EndpointProducerBuilder
name|methodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"methodName"
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP connection creation timeout in milliseconds, defaults to 30,000          * (30 seconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|connectTimeout (int connectTimeout)
specifier|default
name|Olingo2EndpointProducerBuilder
name|connectTimeout
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP connection creation timeout in milliseconds, defaults to 30,000          * (30 seconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|connectTimeout ( String connectTimeout)
specifier|default
name|Olingo2EndpointProducerBuilder
name|connectTimeout
parameter_list|(
name|String
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Content-Type header value can be used to specify JSON or XML message          * format, defaults to application/json;charset=utf-8.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|contentType (String contentType)
specifier|default
name|Olingo2EndpointProducerBuilder
name|contentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"contentType"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set this to true to filter out results that have already been          * communicated by this component.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|filterAlreadySeen ( boolean filterAlreadySeen)
specifier|default
name|Olingo2EndpointProducerBuilder
name|filterAlreadySeen
parameter_list|(
name|boolean
name|filterAlreadySeen
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filterAlreadySeen"
argument_list|,
name|filterAlreadySeen
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set this to true to filter out results that have already been          * communicated by this component.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|filterAlreadySeen ( String filterAlreadySeen)
specifier|default
name|Olingo2EndpointProducerBuilder
name|filterAlreadySeen
parameter_list|(
name|String
name|filterAlreadySeen
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filterAlreadySeen"
argument_list|,
name|filterAlreadySeen
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP async client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          * The option is a          *<code>org.apache.http.impl.nio.client.HttpAsyncClientBuilder</code>          * type.          * @group common          */
DECL|method|httpAsyncClientBuilder ( Object httpAsyncClientBuilder)
specifier|default
name|Olingo2EndpointProducerBuilder
name|httpAsyncClientBuilder
parameter_list|(
name|Object
name|httpAsyncClientBuilder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpAsyncClientBuilder"
argument_list|,
name|httpAsyncClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP async client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          * The option will be converted to a          *<code>org.apache.http.impl.nio.client.HttpAsyncClientBuilder</code>          * type.          * @group common          */
DECL|method|httpAsyncClientBuilder ( String httpAsyncClientBuilder)
specifier|default
name|Olingo2EndpointProducerBuilder
name|httpAsyncClientBuilder
parameter_list|(
name|String
name|httpAsyncClientBuilder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpAsyncClientBuilder"
argument_list|,
name|httpAsyncClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          * The option is a          *<code>org.apache.http.impl.client.HttpClientBuilder</code> type.          * @group common          */
DECL|method|httpClientBuilder ( Object httpClientBuilder)
specifier|default
name|Olingo2EndpointProducerBuilder
name|httpClientBuilder
parameter_list|(
name|Object
name|httpClientBuilder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpClientBuilder"
argument_list|,
name|httpClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          * The option will be converted to a          *<code>org.apache.http.impl.client.HttpClientBuilder</code> type.          * @group common          */
DECL|method|httpClientBuilder ( String httpClientBuilder)
specifier|default
name|Olingo2EndpointProducerBuilder
name|httpClientBuilder
parameter_list|(
name|String
name|httpClientBuilder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpClientBuilder"
argument_list|,
name|httpClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP headers to inject into every request, this could include          * OAuth tokens, etc.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.String&gt;</code> type.          * @group common          */
DECL|method|httpHeaders ( Map<String, String> httpHeaders)
specifier|default
name|Olingo2EndpointProducerBuilder
name|httpHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP headers to inject into every request, this could include          * OAuth tokens, etc.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>          * type.          * @group common          */
DECL|method|httpHeaders (String httpHeaders)
specifier|default
name|Olingo2EndpointProducerBuilder
name|httpHeaders
parameter_list|(
name|String
name|httpHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|inBody (String inBody)
specifier|default
name|Olingo2EndpointProducerBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP proxy server configuration.          * The option is a<code>org.apache.http.HttpHost</code> type.          * @group common          */
DECL|method|proxy (Object proxy)
specifier|default
name|Olingo2EndpointProducerBuilder
name|proxy
parameter_list|(
name|Object
name|proxy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxy"
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP proxy server configuration.          * The option will be converted to a          *<code>org.apache.http.HttpHost</code> type.          * @group common          */
DECL|method|proxy (String proxy)
specifier|default
name|Olingo2EndpointProducerBuilder
name|proxy
parameter_list|(
name|String
name|proxy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxy"
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Target OData service base URI, e.g.          * http://services.odata.org/OData/OData.svc.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|serviceUri (String serviceUri)
specifier|default
name|Olingo2EndpointProducerBuilder
name|serviceUri
parameter_list|(
name|String
name|serviceUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceUri"
argument_list|,
name|serviceUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP request timeout in milliseconds, defaults to 30,000 (30          * seconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|socketTimeout (int socketTimeout)
specifier|default
name|Olingo2EndpointProducerBuilder
name|socketTimeout
parameter_list|(
name|int
name|socketTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP request timeout in milliseconds, defaults to 30,000 (30          * seconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|socketTimeout ( String socketTimeout)
specifier|default
name|Olingo2EndpointProducerBuilder
name|socketTimeout
parameter_list|(
name|String
name|socketTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group common          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|Olingo2EndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group common          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|Olingo2EndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|Olingo2EndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|Olingo2EndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Olingo2 component.      */
DECL|interface|AdvancedOlingo2EndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedOlingo2EndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|Olingo2EndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|Olingo2EndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedOlingo2EndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedOlingo2EndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedOlingo2EndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedOlingo2EndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Olingo2 component.      */
DECL|interface|Olingo2EndpointBuilder
specifier|public
specifier|static
interface|interface
name|Olingo2EndpointBuilder
extends|extends
name|Olingo2EndpointConsumerBuilder
extends|,
name|Olingo2EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedOlingo2EndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedOlingo2EndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option is a          *<code>org.apache.camel.component.olingo2.internal.Olingo2ApiName</code> type.          * @group common          */
DECL|method|apiName (Olingo2ApiName apiName)
specifier|default
name|Olingo2EndpointBuilder
name|apiName
parameter_list|(
name|Olingo2ApiName
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What kind of operation to perform.          * The option will be converted to a          *<code>org.apache.camel.component.olingo2.internal.Olingo2ApiName</code> type.          * @group common          */
DECL|method|apiName (String apiName)
specifier|default
name|Olingo2EndpointBuilder
name|apiName
parameter_list|(
name|String
name|apiName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"apiName"
argument_list|,
name|apiName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * What sub operation to use for the selected operation.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|methodName (String methodName)
specifier|default
name|Olingo2EndpointBuilder
name|methodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"methodName"
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP connection creation timeout in milliseconds, defaults to 30,000          * (30 seconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|connectTimeout (int connectTimeout)
specifier|default
name|Olingo2EndpointBuilder
name|connectTimeout
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP connection creation timeout in milliseconds, defaults to 30,000          * (30 seconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|connectTimeout (String connectTimeout)
specifier|default
name|Olingo2EndpointBuilder
name|connectTimeout
parameter_list|(
name|String
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Content-Type header value can be used to specify JSON or XML message          * format, defaults to application/json;charset=utf-8.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|contentType (String contentType)
specifier|default
name|Olingo2EndpointBuilder
name|contentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"contentType"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set this to true to filter out results that have already been          * communicated by this component.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|filterAlreadySeen ( boolean filterAlreadySeen)
specifier|default
name|Olingo2EndpointBuilder
name|filterAlreadySeen
parameter_list|(
name|boolean
name|filterAlreadySeen
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filterAlreadySeen"
argument_list|,
name|filterAlreadySeen
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set this to true to filter out results that have already been          * communicated by this component.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|filterAlreadySeen ( String filterAlreadySeen)
specifier|default
name|Olingo2EndpointBuilder
name|filterAlreadySeen
parameter_list|(
name|String
name|filterAlreadySeen
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filterAlreadySeen"
argument_list|,
name|filterAlreadySeen
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP async client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          * The option is a          *<code>org.apache.http.impl.nio.client.HttpAsyncClientBuilder</code>          * type.          * @group common          */
DECL|method|httpAsyncClientBuilder ( Object httpAsyncClientBuilder)
specifier|default
name|Olingo2EndpointBuilder
name|httpAsyncClientBuilder
parameter_list|(
name|Object
name|httpAsyncClientBuilder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpAsyncClientBuilder"
argument_list|,
name|httpAsyncClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP async client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          * The option will be converted to a          *<code>org.apache.http.impl.nio.client.HttpAsyncClientBuilder</code>          * type.          * @group common          */
DECL|method|httpAsyncClientBuilder ( String httpAsyncClientBuilder)
specifier|default
name|Olingo2EndpointBuilder
name|httpAsyncClientBuilder
parameter_list|(
name|String
name|httpAsyncClientBuilder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpAsyncClientBuilder"
argument_list|,
name|httpAsyncClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          * The option is a          *<code>org.apache.http.impl.client.HttpClientBuilder</code> type.          * @group common          */
DECL|method|httpClientBuilder ( Object httpClientBuilder)
specifier|default
name|Olingo2EndpointBuilder
name|httpClientBuilder
parameter_list|(
name|Object
name|httpClientBuilder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpClientBuilder"
argument_list|,
name|httpClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          * The option will be converted to a          *<code>org.apache.http.impl.client.HttpClientBuilder</code> type.          * @group common          */
DECL|method|httpClientBuilder ( String httpClientBuilder)
specifier|default
name|Olingo2EndpointBuilder
name|httpClientBuilder
parameter_list|(
name|String
name|httpClientBuilder
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpClientBuilder"
argument_list|,
name|httpClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP headers to inject into every request, this could include          * OAuth tokens, etc.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.String&gt;</code> type.          * @group common          */
DECL|method|httpHeaders ( Map<String, String> httpHeaders)
specifier|default
name|Olingo2EndpointBuilder
name|httpHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP headers to inject into every request, this could include          * OAuth tokens, etc.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>          * type.          * @group common          */
DECL|method|httpHeaders (String httpHeaders)
specifier|default
name|Olingo2EndpointBuilder
name|httpHeaders
parameter_list|(
name|String
name|httpHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|inBody (String inBody)
specifier|default
name|Olingo2EndpointBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP proxy server configuration.          * The option is a<code>org.apache.http.HttpHost</code> type.          * @group common          */
DECL|method|proxy (Object proxy)
specifier|default
name|Olingo2EndpointBuilder
name|proxy
parameter_list|(
name|Object
name|proxy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxy"
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP proxy server configuration.          * The option will be converted to a          *<code>org.apache.http.HttpHost</code> type.          * @group common          */
DECL|method|proxy (String proxy)
specifier|default
name|Olingo2EndpointBuilder
name|proxy
parameter_list|(
name|String
name|proxy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxy"
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Target OData service base URI, e.g.          * http://services.odata.org/OData/OData.svc.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|serviceUri (String serviceUri)
specifier|default
name|Olingo2EndpointBuilder
name|serviceUri
parameter_list|(
name|String
name|serviceUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceUri"
argument_list|,
name|serviceUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP request timeout in milliseconds, defaults to 30,000 (30          * seconds).          * The option is a<code>int</code> type.          * @group common          */
DECL|method|socketTimeout (int socketTimeout)
specifier|default
name|Olingo2EndpointBuilder
name|socketTimeout
parameter_list|(
name|int
name|socketTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP request timeout in milliseconds, defaults to 30,000 (30          * seconds).          * The option will be converted to a<code>int</code> type.          * @group common          */
DECL|method|socketTimeout (String socketTimeout)
specifier|default
name|Olingo2EndpointBuilder
name|socketTimeout
parameter_list|(
name|String
name|socketTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group common          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|Olingo2EndpointBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group common          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|Olingo2EndpointBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Olingo2 component.      */
DECL|interface|AdvancedOlingo2EndpointBuilder
specifier|public
specifier|static
interface|interface
name|AdvancedOlingo2EndpointBuilder
extends|extends
name|AdvancedOlingo2EndpointConsumerBuilder
extends|,
name|AdvancedOlingo2EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|Olingo2EndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|Olingo2EndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedOlingo2EndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedOlingo2EndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedOlingo2EndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedOlingo2EndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.olingo2.internal.Olingo2ApiName</code>      * enum.      */
DECL|enum|Olingo2ApiName
specifier|public
specifier|static
enum|enum
name|Olingo2ApiName
block|{
DECL|enumConstant|DEFAULT
name|DEFAULT
block|;     }
comment|/**      * Communicates with OData 2.0 services using Apache Olingo. Creates a      * builder to build endpoints for the Olingo2 component.      */
DECL|method|olingo2 (String path)
specifier|default
name|Olingo2EndpointBuilder
name|olingo2
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|Olingo2EndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|Olingo2EndpointBuilder
implements|,
name|AdvancedOlingo2EndpointBuilder
block|{
specifier|public
name|Olingo2EndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"olingo2"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Olingo2EndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

