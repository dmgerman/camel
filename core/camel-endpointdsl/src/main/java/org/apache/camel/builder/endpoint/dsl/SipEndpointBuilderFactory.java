begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * To send and receive messages using the SIP protocol (used in telco and  * mobile).  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|SipEndpointBuilderFactory
specifier|public
interface|interface
name|SipEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the SIP component.      */
DECL|interface|SipEndpointConsumerBuilder
specifier|public
interface|interface
name|SipEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSipEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Should connections be cached by the SipStack to reduce cost of          * connection creation. This is useful if the connection is used for          * long running conversations.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|cacheConnections ( boolean cacheConnections)
specifier|default
name|SipEndpointConsumerBuilder
name|cacheConnections
parameter_list|(
name|boolean
name|cacheConnections
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheConnections"
argument_list|,
name|cacheConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Should connections be cached by the SipStack to reduce cost of          * connection creation. This is useful if the connection is used for          * long running conversations.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|cacheConnections ( String cacheConnections)
specifier|default
name|SipEndpointConsumerBuilder
name|cacheConnections
parameter_list|(
name|String
name|cacheConnections
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheConnections"
argument_list|,
name|cacheConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for contentSubType can be set to any valid MimeSubType.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|contentSubType (String contentSubType)
specifier|default
name|SipEndpointConsumerBuilder
name|contentSubType
parameter_list|(
name|String
name|contentSubType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentSubType"
argument_list|,
name|contentSubType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for contentType can be set to any valid MimeType.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|contentType (String contentType)
specifier|default
name|SipEndpointConsumerBuilder
name|contentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentType"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for a String based event type.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|eventHeaderName ( String eventHeaderName)
specifier|default
name|SipEndpointConsumerBuilder
name|eventHeaderName
parameter_list|(
name|String
name|eventHeaderName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventHeaderName"
argument_list|,
name|eventHeaderName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for a String based event Id. Mandatory setting unless a          * registry based FromHeader is specified.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|eventId (String eventId)
specifier|default
name|SipEndpointConsumerBuilder
name|eventId
parameter_list|(
name|String
name|eventId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventId"
argument_list|,
name|eventId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Hostname of the message originator. Mandatory setting unless a          * registry based FromHeader is specified.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|fromHost (String fromHost)
specifier|default
name|SipEndpointConsumerBuilder
name|fromHost
parameter_list|(
name|String
name|fromHost
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromHost"
argument_list|,
name|fromHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port of the message originator. Mandatory setting unless a registry          * based FromHeader is specified.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|fromPort (int fromPort)
specifier|default
name|SipEndpointConsumerBuilder
name|fromPort
parameter_list|(
name|int
name|fromPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromPort"
argument_list|,
name|fromPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port of the message originator. Mandatory setting unless a registry          * based FromHeader is specified.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|fromPort (String fromPort)
specifier|default
name|SipEndpointConsumerBuilder
name|fromPort
parameter_list|(
name|String
name|fromPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromPort"
argument_list|,
name|fromPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username of the message originator. Mandatory setting unless a          * registry based custom FromHeader is specified.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|fromUser (String fromUser)
specifier|default
name|SipEndpointConsumerBuilder
name|fromUser
parameter_list|(
name|String
name|fromUser
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromUser"
argument_list|,
name|fromUser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The amount of time a message received at an endpoint is considered          * valid.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|msgExpiration (int msgExpiration)
specifier|default
name|SipEndpointConsumerBuilder
name|msgExpiration
parameter_list|(
name|int
name|msgExpiration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"msgExpiration"
argument_list|,
name|msgExpiration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The amount of time a message received at an endpoint is considered          * valid.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|msgExpiration (String msgExpiration)
specifier|default
name|SipEndpointConsumerBuilder
name|msgExpiration
parameter_list|(
name|String
name|msgExpiration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"msgExpiration"
argument_list|,
name|msgExpiration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for specifying amount of time to wait for a Response and/or          * Acknowledgement can be received from another SIP stack.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|receiveTimeoutMillis ( long receiveTimeoutMillis)
specifier|default
name|SipEndpointConsumerBuilder
name|receiveTimeoutMillis
parameter_list|(
name|long
name|receiveTimeoutMillis
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveTimeoutMillis"
argument_list|,
name|receiveTimeoutMillis
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for specifying amount of time to wait for a Response and/or          * Acknowledgement can be received from another SIP stack.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|receiveTimeoutMillis ( String receiveTimeoutMillis)
specifier|default
name|SipEndpointConsumerBuilder
name|receiveTimeoutMillis
parameter_list|(
name|String
name|receiveTimeoutMillis
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveTimeoutMillis"
argument_list|,
name|receiveTimeoutMillis
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of the SIP Stack instance associated with an SIP Endpoint.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|stackName (String stackName)
specifier|default
name|SipEndpointConsumerBuilder
name|stackName
parameter_list|(
name|String
name|stackName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"stackName"
argument_list|,
name|stackName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Hostname of the message receiver. Mandatory setting unless a registry          * based ToHeader is specified.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|toHost (String toHost)
specifier|default
name|SipEndpointConsumerBuilder
name|toHost
parameter_list|(
name|String
name|toHost
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toHost"
argument_list|,
name|toHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Portname of the message receiver. Mandatory setting unless a registry          * based ToHeader is specified.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|toPort (int toPort)
specifier|default
name|SipEndpointConsumerBuilder
name|toPort
parameter_list|(
name|int
name|toPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toPort"
argument_list|,
name|toPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Portname of the message receiver. Mandatory setting unless a registry          * based ToHeader is specified.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|toPort (String toPort)
specifier|default
name|SipEndpointConsumerBuilder
name|toPort
parameter_list|(
name|String
name|toPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toPort"
argument_list|,
name|toPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username of the message receiver. Mandatory setting unless a registry          * based custom ToHeader is specified.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|toUser (String toUser)
specifier|default
name|SipEndpointConsumerBuilder
name|toUser
parameter_list|(
name|String
name|toUser
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toUser"
argument_list|,
name|toUser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for choice of transport protocol. Valid choices are tcp or          * udp.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|transport (String transport)
specifier|default
name|SipEndpointConsumerBuilder
name|transport
parameter_list|(
name|String
name|transport
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"transport"
argument_list|,
name|transport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|SipEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|SipEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This setting is used to determine whether the kind of header          * (FromHeader,ToHeader etc) that needs to be created for this endpoint.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|consumer (boolean consumer)
specifier|default
name|SipEndpointConsumerBuilder
name|consumer
parameter_list|(
name|boolean
name|consumer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"consumer"
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This setting is used to determine whether the kind of header          * (FromHeader,ToHeader etc) that needs to be created for this endpoint.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|consumer (String consumer)
specifier|default
name|SipEndpointConsumerBuilder
name|consumer
parameter_list|(
name|String
name|consumer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"consumer"
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This setting is used to distinguish between a Presence Agent& a          * consumer. This is due to the fact that the SIP Camel component ships          * with a basic Presence Agent (for testing purposes only). Consumers          * have to set this flag to true.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|presenceAgent (boolean presenceAgent)
specifier|default
name|SipEndpointConsumerBuilder
name|presenceAgent
parameter_list|(
name|boolean
name|presenceAgent
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"presenceAgent"
argument_list|,
name|presenceAgent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This setting is used to distinguish between a Presence Agent& a          * consumer. This is due to the fact that the SIP Camel component ships          * with a basic Presence Agent (for testing purposes only). Consumers          * have to set this flag to true.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|presenceAgent (String presenceAgent)
specifier|default
name|SipEndpointConsumerBuilder
name|presenceAgent
parameter_list|(
name|String
name|presenceAgent
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"presenceAgent"
argument_list|,
name|presenceAgent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of client debug log file to use for logging.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: logging          */
DECL|method|implementationDebugLogFile ( String implementationDebugLogFile)
specifier|default
name|SipEndpointConsumerBuilder
name|implementationDebugLogFile
parameter_list|(
name|String
name|implementationDebugLogFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"implementationDebugLogFile"
argument_list|,
name|implementationDebugLogFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of server log file to use for logging.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: logging          */
DECL|method|implementationServerLogFile ( String implementationServerLogFile)
specifier|default
name|SipEndpointConsumerBuilder
name|implementationServerLogFile
parameter_list|(
name|String
name|implementationServerLogFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"implementationServerLogFile"
argument_list|,
name|implementationServerLogFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Logging level for tracing.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: logging          */
DECL|method|implementationTraceLevel ( String implementationTraceLevel)
specifier|default
name|SipEndpointConsumerBuilder
name|implementationTraceLevel
parameter_list|(
name|String
name|implementationTraceLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"implementationTraceLevel"
argument_list|,
name|implementationTraceLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of maximum proxy forwards.          *           * The option is a:<code>int</code> type.          *           * Group: proxy          */
DECL|method|maxForwards (int maxForwards)
specifier|default
name|SipEndpointConsumerBuilder
name|maxForwards
parameter_list|(
name|int
name|maxForwards
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxForwards"
argument_list|,
name|maxForwards
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of maximum proxy forwards.          *           * The option will be converted to a<code>int</code> type.          *           * Group: proxy          */
DECL|method|maxForwards (String maxForwards)
specifier|default
name|SipEndpointConsumerBuilder
name|maxForwards
parameter_list|(
name|String
name|maxForwards
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxForwards"
argument_list|,
name|maxForwards
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This setting is used when requests are sent to the Presence Agent via          * a proxy.          *           * The option is a:<code>boolean</code> type.          *           * Group: proxy          */
DECL|method|useRouterForAllUris ( boolean useRouterForAllUris)
specifier|default
name|SipEndpointConsumerBuilder
name|useRouterForAllUris
parameter_list|(
name|boolean
name|useRouterForAllUris
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useRouterForAllUris"
argument_list|,
name|useRouterForAllUris
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This setting is used when requests are sent to the Presence Agent via          * a proxy.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: proxy          */
DECL|method|useRouterForAllUris ( String useRouterForAllUris)
specifier|default
name|SipEndpointConsumerBuilder
name|useRouterForAllUris
parameter_list|(
name|String
name|useRouterForAllUris
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useRouterForAllUris"
argument_list|,
name|useRouterForAllUris
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the SIP component.      */
DECL|interface|AdvancedSipEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedSipEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SipEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SipEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom AddressFactory.          *           * The option is a:<code>javax.sip.address.AddressFactory</code> type.          *           * Group: advanced          */
DECL|method|addressFactory ( Object addressFactory)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|addressFactory
parameter_list|(
name|Object
name|addressFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"addressFactory"
argument_list|,
name|addressFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom AddressFactory.          *           * The option will be converted to a          *<code>javax.sip.address.AddressFactory</code> type.          *           * Group: advanced          */
DECL|method|addressFactory ( String addressFactory)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|addressFactory
parameter_list|(
name|String
name|addressFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"addressFactory"
argument_list|,
name|addressFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing call details. Must implement the          * type javax.sip.header.CallIdHeader.          *           * The option is a:<code>javax.sip.header.CallIdHeader</code> type.          *           * Group: advanced          */
DECL|method|callIdHeader ( Object callIdHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|callIdHeader
parameter_list|(
name|Object
name|callIdHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"callIdHeader"
argument_list|,
name|callIdHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing call details. Must implement the          * type javax.sip.header.CallIdHeader.          *           * The option will be converted to a          *<code>javax.sip.header.CallIdHeader</code> type.          *           * Group: advanced          */
DECL|method|callIdHeader ( String callIdHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|callIdHeader
parameter_list|(
name|String
name|callIdHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"callIdHeader"
argument_list|,
name|callIdHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An optional custom Header object containing verbose contact details          * (email, phone number etc). Must implement the type          * javax.sip.header.ContactHeader.          *           * The option is a:<code>javax.sip.header.ContactHeader</code> type.          *           * Group: advanced          */
DECL|method|contactHeader ( Object contactHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|contactHeader
parameter_list|(
name|Object
name|contactHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contactHeader"
argument_list|,
name|contactHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An optional custom Header object containing verbose contact details          * (email, phone number etc). Must implement the type          * javax.sip.header.ContactHeader.          *           * The option will be converted to a          *<code>javax.sip.header.ContactHeader</code> type.          *           * Group: advanced          */
DECL|method|contactHeader ( String contactHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|contactHeader
parameter_list|(
name|String
name|contactHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contactHeader"
argument_list|,
name|contactHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message content details. Must          * implement the type javax.sip.header.ContentTypeHeader.          *           * The option is a:<code>javax.sip.header.ContentTypeHeader</code>          * type.          *           * Group: advanced          */
DECL|method|contentTypeHeader ( Object contentTypeHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|contentTypeHeader
parameter_list|(
name|Object
name|contentTypeHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentTypeHeader"
argument_list|,
name|contentTypeHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message content details. Must          * implement the type javax.sip.header.ContentTypeHeader.          *           * The option will be converted to a          *<code>javax.sip.header.ContentTypeHeader</code> type.          *           * Group: advanced          */
DECL|method|contentTypeHeader ( String contentTypeHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|contentTypeHeader
parameter_list|(
name|String
name|contentTypeHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentTypeHeader"
argument_list|,
name|contentTypeHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing event details. Must implement the          * type javax.sip.header.EventHeader.          *           * The option is a:<code>javax.sip.header.EventHeader</code> type.          *           * Group: advanced          */
DECL|method|eventHeader ( Object eventHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|eventHeader
parameter_list|(
name|Object
name|eventHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventHeader"
argument_list|,
name|eventHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing event details. Must implement the          * type javax.sip.header.EventHeader.          *           * The option will be converted to a          *<code>javax.sip.header.EventHeader</code> type.          *           * Group: advanced          */
DECL|method|eventHeader ( String eventHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|eventHeader
parameter_list|(
name|String
name|eventHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventHeader"
argument_list|,
name|eventHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message expiration details. Must          * implement the type javax.sip.header.ExpiresHeader.          *           * The option is a:<code>javax.sip.header.ExpiresHeader</code> type.          *           * Group: advanced          */
DECL|method|expiresHeader ( Object expiresHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|expiresHeader
parameter_list|(
name|Object
name|expiresHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"expiresHeader"
argument_list|,
name|expiresHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message expiration details. Must          * implement the type javax.sip.header.ExpiresHeader.          *           * The option will be converted to a          *<code>javax.sip.header.ExpiresHeader</code> type.          *           * Group: advanced          */
DECL|method|expiresHeader ( String expiresHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|expiresHeader
parameter_list|(
name|String
name|expiresHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"expiresHeader"
argument_list|,
name|expiresHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing user/application specific details.          * Must implement the type javax.sip.header.ExtensionHeader.          *           * The option is a:<code>javax.sip.header.ExtensionHeader</code> type.          *           * Group: advanced          */
DECL|method|extensionHeader ( Object extensionHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|extensionHeader
parameter_list|(
name|Object
name|extensionHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"extensionHeader"
argument_list|,
name|extensionHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing user/application specific details.          * Must implement the type javax.sip.header.ExtensionHeader.          *           * The option will be converted to a          *<code>javax.sip.header.ExtensionHeader</code> type.          *           * Group: advanced          */
DECL|method|extensionHeader ( String extensionHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|extensionHeader
parameter_list|(
name|String
name|extensionHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"extensionHeader"
argument_list|,
name|extensionHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message originator settings. Must          * implement the type javax.sip.header.FromHeader.          *           * The option is a:<code>javax.sip.header.FromHeader</code> type.          *           * Group: advanced          */
DECL|method|fromHeader (Object fromHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|fromHeader
parameter_list|(
name|Object
name|fromHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromHeader"
argument_list|,
name|fromHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message originator settings. Must          * implement the type javax.sip.header.FromHeader.          *           * The option will be converted to a          *<code>javax.sip.header.FromHeader</code> type.          *           * Group: advanced          */
DECL|method|fromHeader (String fromHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|fromHeader
parameter_list|(
name|String
name|fromHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromHeader"
argument_list|,
name|fromHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFactory.          *           * The option is a:<code>javax.sip.header.HeaderFactory</code> type.          *           * Group: advanced          */
DECL|method|headerFactory ( Object headerFactory)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|headerFactory
parameter_list|(
name|Object
name|headerFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"headerFactory"
argument_list|,
name|headerFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFactory.          *           * The option will be converted to a          *<code>javax.sip.header.HeaderFactory</code> type.          *           * Group: advanced          */
DECL|method|headerFactory ( String headerFactory)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|headerFactory
parameter_list|(
name|String
name|headerFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"headerFactory"
argument_list|,
name|headerFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom ListeningPoint implementation.          *           * The option is a:<code>javax.sip.ListeningPoint</code> type.          *           * Group: advanced          */
DECL|method|listeningPoint ( Object listeningPoint)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|listeningPoint
parameter_list|(
name|Object
name|listeningPoint
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"listeningPoint"
argument_list|,
name|listeningPoint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom ListeningPoint implementation.          *           * The option will be converted to a          *<code>javax.sip.ListeningPoint</code> type.          *           * Group: advanced          */
DECL|method|listeningPoint ( String listeningPoint)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|listeningPoint
parameter_list|(
name|String
name|listeningPoint
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"listeningPoint"
argument_list|,
name|listeningPoint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing details on maximum proxy forwards.          * This header places a limit on the viaHeaders possible. Must implement          * the type javax.sip.header.MaxForwardsHeader.          *           * The option is a:<code>javax.sip.header.MaxForwardsHeader</code>          * type.          *           * Group: advanced          */
DECL|method|maxForwardsHeader ( Object maxForwardsHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|maxForwardsHeader
parameter_list|(
name|Object
name|maxForwardsHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxForwardsHeader"
argument_list|,
name|maxForwardsHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing details on maximum proxy forwards.          * This header places a limit on the viaHeaders possible. Must implement          * the type javax.sip.header.MaxForwardsHeader.          *           * The option will be converted to a          *<code>javax.sip.header.MaxForwardsHeader</code> type.          *           * Group: advanced          */
DECL|method|maxForwardsHeader ( String maxForwardsHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|maxForwardsHeader
parameter_list|(
name|String
name|maxForwardsHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxForwardsHeader"
argument_list|,
name|maxForwardsHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for maximum allowed Message size in bytes.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|maxMessageSize ( int maxMessageSize)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|maxMessageSize
parameter_list|(
name|int
name|maxMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessageSize"
argument_list|,
name|maxMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for maximum allowed Message size in bytes.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|maxMessageSize ( String maxMessageSize)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|maxMessageSize
parameter_list|(
name|String
name|maxMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessageSize"
argument_list|,
name|maxMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom MessageFactory.          *           * The option is a:<code>javax.sip.message.MessageFactory</code> type.          *           * Group: advanced          */
DECL|method|messageFactory ( Object messageFactory)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|messageFactory
parameter_list|(
name|Object
name|messageFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageFactory"
argument_list|,
name|messageFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom MessageFactory.          *           * The option will be converted to a          *<code>javax.sip.message.MessageFactory</code> type.          *           * Group: advanced          */
DECL|method|messageFactory ( String messageFactory)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|messageFactory
parameter_list|(
name|String
name|messageFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageFactory"
argument_list|,
name|messageFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipFactory to create the SipStack to be used.          *           * The option is a:<code>javax.sip.SipFactory</code> type.          *           * Group: advanced          */
DECL|method|sipFactory (Object sipFactory)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|sipFactory
parameter_list|(
name|Object
name|sipFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipFactory"
argument_list|,
name|sipFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipFactory to create the SipStack to be used.          *           * The option will be converted to a<code>javax.sip.SipFactory</code>          * type.          *           * Group: advanced          */
DECL|method|sipFactory (String sipFactory)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|sipFactory
parameter_list|(
name|String
name|sipFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipFactory"
argument_list|,
name|sipFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipStack.          *           * The option is a:<code>javax.sip.SipStack</code> type.          *           * Group: advanced          */
DECL|method|sipStack (Object sipStack)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|sipStack
parameter_list|(
name|Object
name|sipStack
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipStack"
argument_list|,
name|sipStack
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipStack.          *           * The option will be converted to a<code>javax.sip.SipStack</code>          * type.          *           * Group: advanced          */
DECL|method|sipStack (String sipStack)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|sipStack
parameter_list|(
name|String
name|sipStack
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipStack"
argument_list|,
name|sipStack
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipURI. If none configured, then the SipUri fallback          * to use the options toUser toHost:toPort.          *           * The option is a:<code>javax.sip.address.SipURI</code> type.          *           * Group: advanced          */
DECL|method|sipUri (Object sipUri)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|sipUri
parameter_list|(
name|Object
name|sipUri
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipUri"
argument_list|,
name|sipUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipURI. If none configured, then the SipUri fallback          * to use the options toUser toHost:toPort.          *           * The option will be converted to a          *<code>javax.sip.address.SipURI</code> type.          *           * Group: advanced          */
DECL|method|sipUri (String sipUri)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|sipUri
parameter_list|(
name|String
name|sipUri
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipUri"
argument_list|,
name|sipUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message receiver settings. Must          * implement the type javax.sip.header.ToHeader.          *           * The option is a:<code>javax.sip.header.ToHeader</code> type.          *           * Group: advanced          */
DECL|method|toHeader (Object toHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|toHeader
parameter_list|(
name|Object
name|toHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toHeader"
argument_list|,
name|toHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message receiver settings. Must          * implement the type javax.sip.header.ToHeader.          *           * The option will be converted to a          *<code>javax.sip.header.ToHeader</code> type.          *           * Group: advanced          */
DECL|method|toHeader (String toHeader)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|toHeader
parameter_list|(
name|String
name|toHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toHeader"
argument_list|,
name|toHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * List of custom Header objects of the type javax.sip.header.ViaHeader.          * Each ViaHeader containing a proxy address for request forwarding.          * (Note this header is automatically updated by each proxy when the          * request arrives at its listener).          *           * The option is a:          *<code>java.util.List&lt;javax.sip.header.ViaHeader&gt;</code> type.          *           * Group: advanced          */
DECL|method|viaHeaders ( List<Object> viaHeaders)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|viaHeaders
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|viaHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"viaHeaders"
argument_list|,
name|viaHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * List of custom Header objects of the type javax.sip.header.ViaHeader.          * Each ViaHeader containing a proxy address for request forwarding.          * (Note this header is automatically updated by each proxy when the          * request arrives at its listener).          *           * The option will be converted to a          *<code>java.util.List&lt;javax.sip.header.ViaHeader&gt;</code> type.          *           * Group: advanced          */
DECL|method|viaHeaders (String viaHeaders)
specifier|default
name|AdvancedSipEndpointConsumerBuilder
name|viaHeaders
parameter_list|(
name|String
name|viaHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"viaHeaders"
argument_list|,
name|viaHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the SIP component.      */
DECL|interface|SipEndpointProducerBuilder
specifier|public
interface|interface
name|SipEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSipEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Should connections be cached by the SipStack to reduce cost of          * connection creation. This is useful if the connection is used for          * long running conversations.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|cacheConnections ( boolean cacheConnections)
specifier|default
name|SipEndpointProducerBuilder
name|cacheConnections
parameter_list|(
name|boolean
name|cacheConnections
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheConnections"
argument_list|,
name|cacheConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Should connections be cached by the SipStack to reduce cost of          * connection creation. This is useful if the connection is used for          * long running conversations.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|cacheConnections ( String cacheConnections)
specifier|default
name|SipEndpointProducerBuilder
name|cacheConnections
parameter_list|(
name|String
name|cacheConnections
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheConnections"
argument_list|,
name|cacheConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for contentSubType can be set to any valid MimeSubType.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|contentSubType (String contentSubType)
specifier|default
name|SipEndpointProducerBuilder
name|contentSubType
parameter_list|(
name|String
name|contentSubType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentSubType"
argument_list|,
name|contentSubType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for contentType can be set to any valid MimeType.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|contentType (String contentType)
specifier|default
name|SipEndpointProducerBuilder
name|contentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentType"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for a String based event type.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|eventHeaderName ( String eventHeaderName)
specifier|default
name|SipEndpointProducerBuilder
name|eventHeaderName
parameter_list|(
name|String
name|eventHeaderName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventHeaderName"
argument_list|,
name|eventHeaderName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for a String based event Id. Mandatory setting unless a          * registry based FromHeader is specified.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|eventId (String eventId)
specifier|default
name|SipEndpointProducerBuilder
name|eventId
parameter_list|(
name|String
name|eventId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventId"
argument_list|,
name|eventId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Hostname of the message originator. Mandatory setting unless a          * registry based FromHeader is specified.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|fromHost (String fromHost)
specifier|default
name|SipEndpointProducerBuilder
name|fromHost
parameter_list|(
name|String
name|fromHost
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromHost"
argument_list|,
name|fromHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port of the message originator. Mandatory setting unless a registry          * based FromHeader is specified.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|fromPort (int fromPort)
specifier|default
name|SipEndpointProducerBuilder
name|fromPort
parameter_list|(
name|int
name|fromPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromPort"
argument_list|,
name|fromPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port of the message originator. Mandatory setting unless a registry          * based FromHeader is specified.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|fromPort (String fromPort)
specifier|default
name|SipEndpointProducerBuilder
name|fromPort
parameter_list|(
name|String
name|fromPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromPort"
argument_list|,
name|fromPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username of the message originator. Mandatory setting unless a          * registry based custom FromHeader is specified.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|fromUser (String fromUser)
specifier|default
name|SipEndpointProducerBuilder
name|fromUser
parameter_list|(
name|String
name|fromUser
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromUser"
argument_list|,
name|fromUser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The amount of time a message received at an endpoint is considered          * valid.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|msgExpiration (int msgExpiration)
specifier|default
name|SipEndpointProducerBuilder
name|msgExpiration
parameter_list|(
name|int
name|msgExpiration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"msgExpiration"
argument_list|,
name|msgExpiration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The amount of time a message received at an endpoint is considered          * valid.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|msgExpiration (String msgExpiration)
specifier|default
name|SipEndpointProducerBuilder
name|msgExpiration
parameter_list|(
name|String
name|msgExpiration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"msgExpiration"
argument_list|,
name|msgExpiration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for specifying amount of time to wait for a Response and/or          * Acknowledgement can be received from another SIP stack.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|receiveTimeoutMillis ( long receiveTimeoutMillis)
specifier|default
name|SipEndpointProducerBuilder
name|receiveTimeoutMillis
parameter_list|(
name|long
name|receiveTimeoutMillis
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveTimeoutMillis"
argument_list|,
name|receiveTimeoutMillis
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for specifying amount of time to wait for a Response and/or          * Acknowledgement can be received from another SIP stack.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|receiveTimeoutMillis ( String receiveTimeoutMillis)
specifier|default
name|SipEndpointProducerBuilder
name|receiveTimeoutMillis
parameter_list|(
name|String
name|receiveTimeoutMillis
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveTimeoutMillis"
argument_list|,
name|receiveTimeoutMillis
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of the SIP Stack instance associated with an SIP Endpoint.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|stackName (String stackName)
specifier|default
name|SipEndpointProducerBuilder
name|stackName
parameter_list|(
name|String
name|stackName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"stackName"
argument_list|,
name|stackName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Hostname of the message receiver. Mandatory setting unless a registry          * based ToHeader is specified.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|toHost (String toHost)
specifier|default
name|SipEndpointProducerBuilder
name|toHost
parameter_list|(
name|String
name|toHost
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toHost"
argument_list|,
name|toHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Portname of the message receiver. Mandatory setting unless a registry          * based ToHeader is specified.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|toPort (int toPort)
specifier|default
name|SipEndpointProducerBuilder
name|toPort
parameter_list|(
name|int
name|toPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toPort"
argument_list|,
name|toPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Portname of the message receiver. Mandatory setting unless a registry          * based ToHeader is specified.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|toPort (String toPort)
specifier|default
name|SipEndpointProducerBuilder
name|toPort
parameter_list|(
name|String
name|toPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toPort"
argument_list|,
name|toPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username of the message receiver. Mandatory setting unless a registry          * based custom ToHeader is specified.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|toUser (String toUser)
specifier|default
name|SipEndpointProducerBuilder
name|toUser
parameter_list|(
name|String
name|toUser
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toUser"
argument_list|,
name|toUser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for choice of transport protocol. Valid choices are tcp or          * udp.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|transport (String transport)
specifier|default
name|SipEndpointProducerBuilder
name|transport
parameter_list|(
name|String
name|transport
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"transport"
argument_list|,
name|transport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|SipEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|SipEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of client debug log file to use for logging.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: logging          */
DECL|method|implementationDebugLogFile ( String implementationDebugLogFile)
specifier|default
name|SipEndpointProducerBuilder
name|implementationDebugLogFile
parameter_list|(
name|String
name|implementationDebugLogFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"implementationDebugLogFile"
argument_list|,
name|implementationDebugLogFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of server log file to use for logging.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: logging          */
DECL|method|implementationServerLogFile ( String implementationServerLogFile)
specifier|default
name|SipEndpointProducerBuilder
name|implementationServerLogFile
parameter_list|(
name|String
name|implementationServerLogFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"implementationServerLogFile"
argument_list|,
name|implementationServerLogFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Logging level for tracing.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: logging          */
DECL|method|implementationTraceLevel ( String implementationTraceLevel)
specifier|default
name|SipEndpointProducerBuilder
name|implementationTraceLevel
parameter_list|(
name|String
name|implementationTraceLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"implementationTraceLevel"
argument_list|,
name|implementationTraceLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of maximum proxy forwards.          *           * The option is a:<code>int</code> type.          *           * Group: proxy          */
DECL|method|maxForwards (int maxForwards)
specifier|default
name|SipEndpointProducerBuilder
name|maxForwards
parameter_list|(
name|int
name|maxForwards
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxForwards"
argument_list|,
name|maxForwards
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of maximum proxy forwards.          *           * The option will be converted to a<code>int</code> type.          *           * Group: proxy          */
DECL|method|maxForwards (String maxForwards)
specifier|default
name|SipEndpointProducerBuilder
name|maxForwards
parameter_list|(
name|String
name|maxForwards
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxForwards"
argument_list|,
name|maxForwards
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This setting is used when requests are sent to the Presence Agent via          * a proxy.          *           * The option is a:<code>boolean</code> type.          *           * Group: proxy          */
DECL|method|useRouterForAllUris ( boolean useRouterForAllUris)
specifier|default
name|SipEndpointProducerBuilder
name|useRouterForAllUris
parameter_list|(
name|boolean
name|useRouterForAllUris
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useRouterForAllUris"
argument_list|,
name|useRouterForAllUris
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This setting is used when requests are sent to the Presence Agent via          * a proxy.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: proxy          */
DECL|method|useRouterForAllUris ( String useRouterForAllUris)
specifier|default
name|SipEndpointProducerBuilder
name|useRouterForAllUris
parameter_list|(
name|String
name|useRouterForAllUris
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useRouterForAllUris"
argument_list|,
name|useRouterForAllUris
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the SIP component.      */
DECL|interface|AdvancedSipEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedSipEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SipEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SipEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To use a custom AddressFactory.          *           * The option is a:<code>javax.sip.address.AddressFactory</code> type.          *           * Group: advanced          */
DECL|method|addressFactory ( Object addressFactory)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|addressFactory
parameter_list|(
name|Object
name|addressFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"addressFactory"
argument_list|,
name|addressFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom AddressFactory.          *           * The option will be converted to a          *<code>javax.sip.address.AddressFactory</code> type.          *           * Group: advanced          */
DECL|method|addressFactory ( String addressFactory)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|addressFactory
parameter_list|(
name|String
name|addressFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"addressFactory"
argument_list|,
name|addressFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing call details. Must implement the          * type javax.sip.header.CallIdHeader.          *           * The option is a:<code>javax.sip.header.CallIdHeader</code> type.          *           * Group: advanced          */
DECL|method|callIdHeader ( Object callIdHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|callIdHeader
parameter_list|(
name|Object
name|callIdHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"callIdHeader"
argument_list|,
name|callIdHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing call details. Must implement the          * type javax.sip.header.CallIdHeader.          *           * The option will be converted to a          *<code>javax.sip.header.CallIdHeader</code> type.          *           * Group: advanced          */
DECL|method|callIdHeader ( String callIdHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|callIdHeader
parameter_list|(
name|String
name|callIdHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"callIdHeader"
argument_list|,
name|callIdHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An optional custom Header object containing verbose contact details          * (email, phone number etc). Must implement the type          * javax.sip.header.ContactHeader.          *           * The option is a:<code>javax.sip.header.ContactHeader</code> type.          *           * Group: advanced          */
DECL|method|contactHeader ( Object contactHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|contactHeader
parameter_list|(
name|Object
name|contactHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contactHeader"
argument_list|,
name|contactHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An optional custom Header object containing verbose contact details          * (email, phone number etc). Must implement the type          * javax.sip.header.ContactHeader.          *           * The option will be converted to a          *<code>javax.sip.header.ContactHeader</code> type.          *           * Group: advanced          */
DECL|method|contactHeader ( String contactHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|contactHeader
parameter_list|(
name|String
name|contactHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contactHeader"
argument_list|,
name|contactHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message content details. Must          * implement the type javax.sip.header.ContentTypeHeader.          *           * The option is a:<code>javax.sip.header.ContentTypeHeader</code>          * type.          *           * Group: advanced          */
DECL|method|contentTypeHeader ( Object contentTypeHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|contentTypeHeader
parameter_list|(
name|Object
name|contentTypeHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentTypeHeader"
argument_list|,
name|contentTypeHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message content details. Must          * implement the type javax.sip.header.ContentTypeHeader.          *           * The option will be converted to a          *<code>javax.sip.header.ContentTypeHeader</code> type.          *           * Group: advanced          */
DECL|method|contentTypeHeader ( String contentTypeHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|contentTypeHeader
parameter_list|(
name|String
name|contentTypeHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentTypeHeader"
argument_list|,
name|contentTypeHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing event details. Must implement the          * type javax.sip.header.EventHeader.          *           * The option is a:<code>javax.sip.header.EventHeader</code> type.          *           * Group: advanced          */
DECL|method|eventHeader ( Object eventHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|eventHeader
parameter_list|(
name|Object
name|eventHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventHeader"
argument_list|,
name|eventHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing event details. Must implement the          * type javax.sip.header.EventHeader.          *           * The option will be converted to a          *<code>javax.sip.header.EventHeader</code> type.          *           * Group: advanced          */
DECL|method|eventHeader ( String eventHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|eventHeader
parameter_list|(
name|String
name|eventHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventHeader"
argument_list|,
name|eventHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message expiration details. Must          * implement the type javax.sip.header.ExpiresHeader.          *           * The option is a:<code>javax.sip.header.ExpiresHeader</code> type.          *           * Group: advanced          */
DECL|method|expiresHeader ( Object expiresHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|expiresHeader
parameter_list|(
name|Object
name|expiresHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"expiresHeader"
argument_list|,
name|expiresHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message expiration details. Must          * implement the type javax.sip.header.ExpiresHeader.          *           * The option will be converted to a          *<code>javax.sip.header.ExpiresHeader</code> type.          *           * Group: advanced          */
DECL|method|expiresHeader ( String expiresHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|expiresHeader
parameter_list|(
name|String
name|expiresHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"expiresHeader"
argument_list|,
name|expiresHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing user/application specific details.          * Must implement the type javax.sip.header.ExtensionHeader.          *           * The option is a:<code>javax.sip.header.ExtensionHeader</code> type.          *           * Group: advanced          */
DECL|method|extensionHeader ( Object extensionHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|extensionHeader
parameter_list|(
name|Object
name|extensionHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"extensionHeader"
argument_list|,
name|extensionHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing user/application specific details.          * Must implement the type javax.sip.header.ExtensionHeader.          *           * The option will be converted to a          *<code>javax.sip.header.ExtensionHeader</code> type.          *           * Group: advanced          */
DECL|method|extensionHeader ( String extensionHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|extensionHeader
parameter_list|(
name|String
name|extensionHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"extensionHeader"
argument_list|,
name|extensionHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message originator settings. Must          * implement the type javax.sip.header.FromHeader.          *           * The option is a:<code>javax.sip.header.FromHeader</code> type.          *           * Group: advanced          */
DECL|method|fromHeader (Object fromHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|fromHeader
parameter_list|(
name|Object
name|fromHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromHeader"
argument_list|,
name|fromHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message originator settings. Must          * implement the type javax.sip.header.FromHeader.          *           * The option will be converted to a          *<code>javax.sip.header.FromHeader</code> type.          *           * Group: advanced          */
DECL|method|fromHeader (String fromHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|fromHeader
parameter_list|(
name|String
name|fromHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromHeader"
argument_list|,
name|fromHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFactory.          *           * The option is a:<code>javax.sip.header.HeaderFactory</code> type.          *           * Group: advanced          */
DECL|method|headerFactory ( Object headerFactory)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|headerFactory
parameter_list|(
name|Object
name|headerFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"headerFactory"
argument_list|,
name|headerFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFactory.          *           * The option will be converted to a          *<code>javax.sip.header.HeaderFactory</code> type.          *           * Group: advanced          */
DECL|method|headerFactory ( String headerFactory)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|headerFactory
parameter_list|(
name|String
name|headerFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"headerFactory"
argument_list|,
name|headerFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom ListeningPoint implementation.          *           * The option is a:<code>javax.sip.ListeningPoint</code> type.          *           * Group: advanced          */
DECL|method|listeningPoint ( Object listeningPoint)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|listeningPoint
parameter_list|(
name|Object
name|listeningPoint
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"listeningPoint"
argument_list|,
name|listeningPoint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom ListeningPoint implementation.          *           * The option will be converted to a          *<code>javax.sip.ListeningPoint</code> type.          *           * Group: advanced          */
DECL|method|listeningPoint ( String listeningPoint)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|listeningPoint
parameter_list|(
name|String
name|listeningPoint
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"listeningPoint"
argument_list|,
name|listeningPoint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing details on maximum proxy forwards.          * This header places a limit on the viaHeaders possible. Must implement          * the type javax.sip.header.MaxForwardsHeader.          *           * The option is a:<code>javax.sip.header.MaxForwardsHeader</code>          * type.          *           * Group: advanced          */
DECL|method|maxForwardsHeader ( Object maxForwardsHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|maxForwardsHeader
parameter_list|(
name|Object
name|maxForwardsHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxForwardsHeader"
argument_list|,
name|maxForwardsHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing details on maximum proxy forwards.          * This header places a limit on the viaHeaders possible. Must implement          * the type javax.sip.header.MaxForwardsHeader.          *           * The option will be converted to a          *<code>javax.sip.header.MaxForwardsHeader</code> type.          *           * Group: advanced          */
DECL|method|maxForwardsHeader ( String maxForwardsHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|maxForwardsHeader
parameter_list|(
name|String
name|maxForwardsHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxForwardsHeader"
argument_list|,
name|maxForwardsHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for maximum allowed Message size in bytes.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|maxMessageSize ( int maxMessageSize)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|maxMessageSize
parameter_list|(
name|int
name|maxMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessageSize"
argument_list|,
name|maxMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for maximum allowed Message size in bytes.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|maxMessageSize ( String maxMessageSize)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|maxMessageSize
parameter_list|(
name|String
name|maxMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessageSize"
argument_list|,
name|maxMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom MessageFactory.          *           * The option is a:<code>javax.sip.message.MessageFactory</code> type.          *           * Group: advanced          */
DECL|method|messageFactory ( Object messageFactory)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|messageFactory
parameter_list|(
name|Object
name|messageFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageFactory"
argument_list|,
name|messageFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom MessageFactory.          *           * The option will be converted to a          *<code>javax.sip.message.MessageFactory</code> type.          *           * Group: advanced          */
DECL|method|messageFactory ( String messageFactory)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|messageFactory
parameter_list|(
name|String
name|messageFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageFactory"
argument_list|,
name|messageFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipFactory to create the SipStack to be used.          *           * The option is a:<code>javax.sip.SipFactory</code> type.          *           * Group: advanced          */
DECL|method|sipFactory (Object sipFactory)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|sipFactory
parameter_list|(
name|Object
name|sipFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipFactory"
argument_list|,
name|sipFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipFactory to create the SipStack to be used.          *           * The option will be converted to a<code>javax.sip.SipFactory</code>          * type.          *           * Group: advanced          */
DECL|method|sipFactory (String sipFactory)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|sipFactory
parameter_list|(
name|String
name|sipFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipFactory"
argument_list|,
name|sipFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipStack.          *           * The option is a:<code>javax.sip.SipStack</code> type.          *           * Group: advanced          */
DECL|method|sipStack (Object sipStack)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|sipStack
parameter_list|(
name|Object
name|sipStack
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipStack"
argument_list|,
name|sipStack
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipStack.          *           * The option will be converted to a<code>javax.sip.SipStack</code>          * type.          *           * Group: advanced          */
DECL|method|sipStack (String sipStack)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|sipStack
parameter_list|(
name|String
name|sipStack
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipStack"
argument_list|,
name|sipStack
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipURI. If none configured, then the SipUri fallback          * to use the options toUser toHost:toPort.          *           * The option is a:<code>javax.sip.address.SipURI</code> type.          *           * Group: advanced          */
DECL|method|sipUri (Object sipUri)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|sipUri
parameter_list|(
name|Object
name|sipUri
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipUri"
argument_list|,
name|sipUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipURI. If none configured, then the SipUri fallback          * to use the options toUser toHost:toPort.          *           * The option will be converted to a          *<code>javax.sip.address.SipURI</code> type.          *           * Group: advanced          */
DECL|method|sipUri (String sipUri)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|sipUri
parameter_list|(
name|String
name|sipUri
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipUri"
argument_list|,
name|sipUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message receiver settings. Must          * implement the type javax.sip.header.ToHeader.          *           * The option is a:<code>javax.sip.header.ToHeader</code> type.          *           * Group: advanced          */
DECL|method|toHeader (Object toHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|toHeader
parameter_list|(
name|Object
name|toHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toHeader"
argument_list|,
name|toHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message receiver settings. Must          * implement the type javax.sip.header.ToHeader.          *           * The option will be converted to a          *<code>javax.sip.header.ToHeader</code> type.          *           * Group: advanced          */
DECL|method|toHeader (String toHeader)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|toHeader
parameter_list|(
name|String
name|toHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toHeader"
argument_list|,
name|toHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * List of custom Header objects of the type javax.sip.header.ViaHeader.          * Each ViaHeader containing a proxy address for request forwarding.          * (Note this header is automatically updated by each proxy when the          * request arrives at its listener).          *           * The option is a:          *<code>java.util.List&lt;javax.sip.header.ViaHeader&gt;</code> type.          *           * Group: advanced          */
DECL|method|viaHeaders ( List<Object> viaHeaders)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|viaHeaders
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|viaHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"viaHeaders"
argument_list|,
name|viaHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * List of custom Header objects of the type javax.sip.header.ViaHeader.          * Each ViaHeader containing a proxy address for request forwarding.          * (Note this header is automatically updated by each proxy when the          * request arrives at its listener).          *           * The option will be converted to a          *<code>java.util.List&lt;javax.sip.header.ViaHeader&gt;</code> type.          *           * Group: advanced          */
DECL|method|viaHeaders (String viaHeaders)
specifier|default
name|AdvancedSipEndpointProducerBuilder
name|viaHeaders
parameter_list|(
name|String
name|viaHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"viaHeaders"
argument_list|,
name|viaHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the SIP component.      */
DECL|interface|SipEndpointBuilder
specifier|public
interface|interface
name|SipEndpointBuilder
extends|extends
name|SipEndpointConsumerBuilder
extends|,
name|SipEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedSipEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedSipEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Should connections be cached by the SipStack to reduce cost of          * connection creation. This is useful if the connection is used for          * long running conversations.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|cacheConnections (boolean cacheConnections)
specifier|default
name|SipEndpointBuilder
name|cacheConnections
parameter_list|(
name|boolean
name|cacheConnections
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheConnections"
argument_list|,
name|cacheConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Should connections be cached by the SipStack to reduce cost of          * connection creation. This is useful if the connection is used for          * long running conversations.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|cacheConnections (String cacheConnections)
specifier|default
name|SipEndpointBuilder
name|cacheConnections
parameter_list|(
name|String
name|cacheConnections
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheConnections"
argument_list|,
name|cacheConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for contentSubType can be set to any valid MimeSubType.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|contentSubType (String contentSubType)
specifier|default
name|SipEndpointBuilder
name|contentSubType
parameter_list|(
name|String
name|contentSubType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentSubType"
argument_list|,
name|contentSubType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for contentType can be set to any valid MimeType.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|contentType (String contentType)
specifier|default
name|SipEndpointBuilder
name|contentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentType"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for a String based event type.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|eventHeaderName (String eventHeaderName)
specifier|default
name|SipEndpointBuilder
name|eventHeaderName
parameter_list|(
name|String
name|eventHeaderName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventHeaderName"
argument_list|,
name|eventHeaderName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for a String based event Id. Mandatory setting unless a          * registry based FromHeader is specified.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|eventId (String eventId)
specifier|default
name|SipEndpointBuilder
name|eventId
parameter_list|(
name|String
name|eventId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventId"
argument_list|,
name|eventId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Hostname of the message originator. Mandatory setting unless a          * registry based FromHeader is specified.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|fromHost (String fromHost)
specifier|default
name|SipEndpointBuilder
name|fromHost
parameter_list|(
name|String
name|fromHost
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromHost"
argument_list|,
name|fromHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port of the message originator. Mandatory setting unless a registry          * based FromHeader is specified.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|fromPort (int fromPort)
specifier|default
name|SipEndpointBuilder
name|fromPort
parameter_list|(
name|int
name|fromPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromPort"
argument_list|,
name|fromPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port of the message originator. Mandatory setting unless a registry          * based FromHeader is specified.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|fromPort (String fromPort)
specifier|default
name|SipEndpointBuilder
name|fromPort
parameter_list|(
name|String
name|fromPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromPort"
argument_list|,
name|fromPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username of the message originator. Mandatory setting unless a          * registry based custom FromHeader is specified.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|fromUser (String fromUser)
specifier|default
name|SipEndpointBuilder
name|fromUser
parameter_list|(
name|String
name|fromUser
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromUser"
argument_list|,
name|fromUser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The amount of time a message received at an endpoint is considered          * valid.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|msgExpiration (int msgExpiration)
specifier|default
name|SipEndpointBuilder
name|msgExpiration
parameter_list|(
name|int
name|msgExpiration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"msgExpiration"
argument_list|,
name|msgExpiration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The amount of time a message received at an endpoint is considered          * valid.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|msgExpiration (String msgExpiration)
specifier|default
name|SipEndpointBuilder
name|msgExpiration
parameter_list|(
name|String
name|msgExpiration
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"msgExpiration"
argument_list|,
name|msgExpiration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for specifying amount of time to wait for a Response and/or          * Acknowledgement can be received from another SIP stack.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|receiveTimeoutMillis ( long receiveTimeoutMillis)
specifier|default
name|SipEndpointBuilder
name|receiveTimeoutMillis
parameter_list|(
name|long
name|receiveTimeoutMillis
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveTimeoutMillis"
argument_list|,
name|receiveTimeoutMillis
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for specifying amount of time to wait for a Response and/or          * Acknowledgement can be received from another SIP stack.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|receiveTimeoutMillis ( String receiveTimeoutMillis)
specifier|default
name|SipEndpointBuilder
name|receiveTimeoutMillis
parameter_list|(
name|String
name|receiveTimeoutMillis
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"receiveTimeoutMillis"
argument_list|,
name|receiveTimeoutMillis
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of the SIP Stack instance associated with an SIP Endpoint.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|stackName (String stackName)
specifier|default
name|SipEndpointBuilder
name|stackName
parameter_list|(
name|String
name|stackName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"stackName"
argument_list|,
name|stackName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Hostname of the message receiver. Mandatory setting unless a registry          * based ToHeader is specified.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|toHost (String toHost)
specifier|default
name|SipEndpointBuilder
name|toHost
parameter_list|(
name|String
name|toHost
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toHost"
argument_list|,
name|toHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Portname of the message receiver. Mandatory setting unless a registry          * based ToHeader is specified.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|toPort (int toPort)
specifier|default
name|SipEndpointBuilder
name|toPort
parameter_list|(
name|int
name|toPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toPort"
argument_list|,
name|toPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Portname of the message receiver. Mandatory setting unless a registry          * based ToHeader is specified.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|toPort (String toPort)
specifier|default
name|SipEndpointBuilder
name|toPort
parameter_list|(
name|String
name|toPort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toPort"
argument_list|,
name|toPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username of the message receiver. Mandatory setting unless a registry          * based custom ToHeader is specified.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|toUser (String toUser)
specifier|default
name|SipEndpointBuilder
name|toUser
parameter_list|(
name|String
name|toUser
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toUser"
argument_list|,
name|toUser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for choice of transport protocol. Valid choices are tcp or          * udp.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|transport (String transport)
specifier|default
name|SipEndpointBuilder
name|transport
parameter_list|(
name|String
name|transport
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"transport"
argument_list|,
name|transport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of client debug log file to use for logging.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: logging          */
DECL|method|implementationDebugLogFile ( String implementationDebugLogFile)
specifier|default
name|SipEndpointBuilder
name|implementationDebugLogFile
parameter_list|(
name|String
name|implementationDebugLogFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"implementationDebugLogFile"
argument_list|,
name|implementationDebugLogFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of server log file to use for logging.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: logging          */
DECL|method|implementationServerLogFile ( String implementationServerLogFile)
specifier|default
name|SipEndpointBuilder
name|implementationServerLogFile
parameter_list|(
name|String
name|implementationServerLogFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"implementationServerLogFile"
argument_list|,
name|implementationServerLogFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Logging level for tracing.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: logging          */
DECL|method|implementationTraceLevel ( String implementationTraceLevel)
specifier|default
name|SipEndpointBuilder
name|implementationTraceLevel
parameter_list|(
name|String
name|implementationTraceLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"implementationTraceLevel"
argument_list|,
name|implementationTraceLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of maximum proxy forwards.          *           * The option is a:<code>int</code> type.          *           * Group: proxy          */
DECL|method|maxForwards (int maxForwards)
specifier|default
name|SipEndpointBuilder
name|maxForwards
parameter_list|(
name|int
name|maxForwards
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxForwards"
argument_list|,
name|maxForwards
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Number of maximum proxy forwards.          *           * The option will be converted to a<code>int</code> type.          *           * Group: proxy          */
DECL|method|maxForwards (String maxForwards)
specifier|default
name|SipEndpointBuilder
name|maxForwards
parameter_list|(
name|String
name|maxForwards
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxForwards"
argument_list|,
name|maxForwards
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This setting is used when requests are sent to the Presence Agent via          * a proxy.          *           * The option is a:<code>boolean</code> type.          *           * Group: proxy          */
DECL|method|useRouterForAllUris ( boolean useRouterForAllUris)
specifier|default
name|SipEndpointBuilder
name|useRouterForAllUris
parameter_list|(
name|boolean
name|useRouterForAllUris
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useRouterForAllUris"
argument_list|,
name|useRouterForAllUris
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This setting is used when requests are sent to the Presence Agent via          * a proxy.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: proxy          */
DECL|method|useRouterForAllUris ( String useRouterForAllUris)
specifier|default
name|SipEndpointBuilder
name|useRouterForAllUris
parameter_list|(
name|String
name|useRouterForAllUris
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useRouterForAllUris"
argument_list|,
name|useRouterForAllUris
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the SIP component.      */
DECL|interface|AdvancedSipEndpointBuilder
specifier|public
interface|interface
name|AdvancedSipEndpointBuilder
extends|extends
name|AdvancedSipEndpointConsumerBuilder
extends|,
name|AdvancedSipEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|SipEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|SipEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To use a custom AddressFactory.          *           * The option is a:<code>javax.sip.address.AddressFactory</code> type.          *           * Group: advanced          */
DECL|method|addressFactory (Object addressFactory)
specifier|default
name|AdvancedSipEndpointBuilder
name|addressFactory
parameter_list|(
name|Object
name|addressFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"addressFactory"
argument_list|,
name|addressFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom AddressFactory.          *           * The option will be converted to a          *<code>javax.sip.address.AddressFactory</code> type.          *           * Group: advanced          */
DECL|method|addressFactory (String addressFactory)
specifier|default
name|AdvancedSipEndpointBuilder
name|addressFactory
parameter_list|(
name|String
name|addressFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"addressFactory"
argument_list|,
name|addressFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedSipEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedSipEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing call details. Must implement the          * type javax.sip.header.CallIdHeader.          *           * The option is a:<code>javax.sip.header.CallIdHeader</code> type.          *           * Group: advanced          */
DECL|method|callIdHeader (Object callIdHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|callIdHeader
parameter_list|(
name|Object
name|callIdHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"callIdHeader"
argument_list|,
name|callIdHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing call details. Must implement the          * type javax.sip.header.CallIdHeader.          *           * The option will be converted to a          *<code>javax.sip.header.CallIdHeader</code> type.          *           * Group: advanced          */
DECL|method|callIdHeader (String callIdHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|callIdHeader
parameter_list|(
name|String
name|callIdHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"callIdHeader"
argument_list|,
name|callIdHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An optional custom Header object containing verbose contact details          * (email, phone number etc). Must implement the type          * javax.sip.header.ContactHeader.          *           * The option is a:<code>javax.sip.header.ContactHeader</code> type.          *           * Group: advanced          */
DECL|method|contactHeader (Object contactHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|contactHeader
parameter_list|(
name|Object
name|contactHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contactHeader"
argument_list|,
name|contactHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An optional custom Header object containing verbose contact details          * (email, phone number etc). Must implement the type          * javax.sip.header.ContactHeader.          *           * The option will be converted to a          *<code>javax.sip.header.ContactHeader</code> type.          *           * Group: advanced          */
DECL|method|contactHeader (String contactHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|contactHeader
parameter_list|(
name|String
name|contactHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contactHeader"
argument_list|,
name|contactHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message content details. Must          * implement the type javax.sip.header.ContentTypeHeader.          *           * The option is a:<code>javax.sip.header.ContentTypeHeader</code>          * type.          *           * Group: advanced          */
DECL|method|contentTypeHeader ( Object contentTypeHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|contentTypeHeader
parameter_list|(
name|Object
name|contentTypeHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentTypeHeader"
argument_list|,
name|contentTypeHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message content details. Must          * implement the type javax.sip.header.ContentTypeHeader.          *           * The option will be converted to a          *<code>javax.sip.header.ContentTypeHeader</code> type.          *           * Group: advanced          */
DECL|method|contentTypeHeader ( String contentTypeHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|contentTypeHeader
parameter_list|(
name|String
name|contentTypeHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentTypeHeader"
argument_list|,
name|contentTypeHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing event details. Must implement the          * type javax.sip.header.EventHeader.          *           * The option is a:<code>javax.sip.header.EventHeader</code> type.          *           * Group: advanced          */
DECL|method|eventHeader (Object eventHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|eventHeader
parameter_list|(
name|Object
name|eventHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventHeader"
argument_list|,
name|eventHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing event details. Must implement the          * type javax.sip.header.EventHeader.          *           * The option will be converted to a          *<code>javax.sip.header.EventHeader</code> type.          *           * Group: advanced          */
DECL|method|eventHeader (String eventHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|eventHeader
parameter_list|(
name|String
name|eventHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventHeader"
argument_list|,
name|eventHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message expiration details. Must          * implement the type javax.sip.header.ExpiresHeader.          *           * The option is a:<code>javax.sip.header.ExpiresHeader</code> type.          *           * Group: advanced          */
DECL|method|expiresHeader (Object expiresHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|expiresHeader
parameter_list|(
name|Object
name|expiresHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"expiresHeader"
argument_list|,
name|expiresHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message expiration details. Must          * implement the type javax.sip.header.ExpiresHeader.          *           * The option will be converted to a          *<code>javax.sip.header.ExpiresHeader</code> type.          *           * Group: advanced          */
DECL|method|expiresHeader (String expiresHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|expiresHeader
parameter_list|(
name|String
name|expiresHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"expiresHeader"
argument_list|,
name|expiresHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing user/application specific details.          * Must implement the type javax.sip.header.ExtensionHeader.          *           * The option is a:<code>javax.sip.header.ExtensionHeader</code> type.          *           * Group: advanced          */
DECL|method|extensionHeader ( Object extensionHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|extensionHeader
parameter_list|(
name|Object
name|extensionHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"extensionHeader"
argument_list|,
name|extensionHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing user/application specific details.          * Must implement the type javax.sip.header.ExtensionHeader.          *           * The option will be converted to a          *<code>javax.sip.header.ExtensionHeader</code> type.          *           * Group: advanced          */
DECL|method|extensionHeader ( String extensionHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|extensionHeader
parameter_list|(
name|String
name|extensionHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"extensionHeader"
argument_list|,
name|extensionHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message originator settings. Must          * implement the type javax.sip.header.FromHeader.          *           * The option is a:<code>javax.sip.header.FromHeader</code> type.          *           * Group: advanced          */
DECL|method|fromHeader (Object fromHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|fromHeader
parameter_list|(
name|Object
name|fromHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromHeader"
argument_list|,
name|fromHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message originator settings. Must          * implement the type javax.sip.header.FromHeader.          *           * The option will be converted to a          *<code>javax.sip.header.FromHeader</code> type.          *           * Group: advanced          */
DECL|method|fromHeader (String fromHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|fromHeader
parameter_list|(
name|String
name|fromHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fromHeader"
argument_list|,
name|fromHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFactory.          *           * The option is a:<code>javax.sip.header.HeaderFactory</code> type.          *           * Group: advanced          */
DECL|method|headerFactory (Object headerFactory)
specifier|default
name|AdvancedSipEndpointBuilder
name|headerFactory
parameter_list|(
name|Object
name|headerFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"headerFactory"
argument_list|,
name|headerFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFactory.          *           * The option will be converted to a          *<code>javax.sip.header.HeaderFactory</code> type.          *           * Group: advanced          */
DECL|method|headerFactory (String headerFactory)
specifier|default
name|AdvancedSipEndpointBuilder
name|headerFactory
parameter_list|(
name|String
name|headerFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"headerFactory"
argument_list|,
name|headerFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom ListeningPoint implementation.          *           * The option is a:<code>javax.sip.ListeningPoint</code> type.          *           * Group: advanced          */
DECL|method|listeningPoint (Object listeningPoint)
specifier|default
name|AdvancedSipEndpointBuilder
name|listeningPoint
parameter_list|(
name|Object
name|listeningPoint
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"listeningPoint"
argument_list|,
name|listeningPoint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom ListeningPoint implementation.          *           * The option will be converted to a          *<code>javax.sip.ListeningPoint</code> type.          *           * Group: advanced          */
DECL|method|listeningPoint (String listeningPoint)
specifier|default
name|AdvancedSipEndpointBuilder
name|listeningPoint
parameter_list|(
name|String
name|listeningPoint
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"listeningPoint"
argument_list|,
name|listeningPoint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing details on maximum proxy forwards.          * This header places a limit on the viaHeaders possible. Must implement          * the type javax.sip.header.MaxForwardsHeader.          *           * The option is a:<code>javax.sip.header.MaxForwardsHeader</code>          * type.          *           * Group: advanced          */
DECL|method|maxForwardsHeader ( Object maxForwardsHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|maxForwardsHeader
parameter_list|(
name|Object
name|maxForwardsHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxForwardsHeader"
argument_list|,
name|maxForwardsHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing details on maximum proxy forwards.          * This header places a limit on the viaHeaders possible. Must implement          * the type javax.sip.header.MaxForwardsHeader.          *           * The option will be converted to a          *<code>javax.sip.header.MaxForwardsHeader</code> type.          *           * Group: advanced          */
DECL|method|maxForwardsHeader ( String maxForwardsHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|maxForwardsHeader
parameter_list|(
name|String
name|maxForwardsHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxForwardsHeader"
argument_list|,
name|maxForwardsHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for maximum allowed Message size in bytes.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|maxMessageSize (int maxMessageSize)
specifier|default
name|AdvancedSipEndpointBuilder
name|maxMessageSize
parameter_list|(
name|int
name|maxMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessageSize"
argument_list|,
name|maxMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting for maximum allowed Message size in bytes.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|maxMessageSize (String maxMessageSize)
specifier|default
name|AdvancedSipEndpointBuilder
name|maxMessageSize
parameter_list|(
name|String
name|maxMessageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessageSize"
argument_list|,
name|maxMessageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom MessageFactory.          *           * The option is a:<code>javax.sip.message.MessageFactory</code> type.          *           * Group: advanced          */
DECL|method|messageFactory (Object messageFactory)
specifier|default
name|AdvancedSipEndpointBuilder
name|messageFactory
parameter_list|(
name|Object
name|messageFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageFactory"
argument_list|,
name|messageFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom MessageFactory.          *           * The option will be converted to a          *<code>javax.sip.message.MessageFactory</code> type.          *           * Group: advanced          */
DECL|method|messageFactory (String messageFactory)
specifier|default
name|AdvancedSipEndpointBuilder
name|messageFactory
parameter_list|(
name|String
name|messageFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageFactory"
argument_list|,
name|messageFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipFactory to create the SipStack to be used.          *           * The option is a:<code>javax.sip.SipFactory</code> type.          *           * Group: advanced          */
DECL|method|sipFactory (Object sipFactory)
specifier|default
name|AdvancedSipEndpointBuilder
name|sipFactory
parameter_list|(
name|Object
name|sipFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipFactory"
argument_list|,
name|sipFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipFactory to create the SipStack to be used.          *           * The option will be converted to a<code>javax.sip.SipFactory</code>          * type.          *           * Group: advanced          */
DECL|method|sipFactory (String sipFactory)
specifier|default
name|AdvancedSipEndpointBuilder
name|sipFactory
parameter_list|(
name|String
name|sipFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipFactory"
argument_list|,
name|sipFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipStack.          *           * The option is a:<code>javax.sip.SipStack</code> type.          *           * Group: advanced          */
DECL|method|sipStack (Object sipStack)
specifier|default
name|AdvancedSipEndpointBuilder
name|sipStack
parameter_list|(
name|Object
name|sipStack
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipStack"
argument_list|,
name|sipStack
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipStack.          *           * The option will be converted to a<code>javax.sip.SipStack</code>          * type.          *           * Group: advanced          */
DECL|method|sipStack (String sipStack)
specifier|default
name|AdvancedSipEndpointBuilder
name|sipStack
parameter_list|(
name|String
name|sipStack
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipStack"
argument_list|,
name|sipStack
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipURI. If none configured, then the SipUri fallback          * to use the options toUser toHost:toPort.          *           * The option is a:<code>javax.sip.address.SipURI</code> type.          *           * Group: advanced          */
DECL|method|sipUri (Object sipUri)
specifier|default
name|AdvancedSipEndpointBuilder
name|sipUri
parameter_list|(
name|Object
name|sipUri
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipUri"
argument_list|,
name|sipUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom SipURI. If none configured, then the SipUri fallback          * to use the options toUser toHost:toPort.          *           * The option will be converted to a          *<code>javax.sip.address.SipURI</code> type.          *           * Group: advanced          */
DECL|method|sipUri (String sipUri)
specifier|default
name|AdvancedSipEndpointBuilder
name|sipUri
parameter_list|(
name|String
name|sipUri
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sipUri"
argument_list|,
name|sipUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedSipEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedSipEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message receiver settings. Must          * implement the type javax.sip.header.ToHeader.          *           * The option is a:<code>javax.sip.header.ToHeader</code> type.          *           * Group: advanced          */
DECL|method|toHeader (Object toHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|toHeader
parameter_list|(
name|Object
name|toHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toHeader"
argument_list|,
name|toHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A custom Header object containing message receiver settings. Must          * implement the type javax.sip.header.ToHeader.          *           * The option will be converted to a          *<code>javax.sip.header.ToHeader</code> type.          *           * Group: advanced          */
DECL|method|toHeader (String toHeader)
specifier|default
name|AdvancedSipEndpointBuilder
name|toHeader
parameter_list|(
name|String
name|toHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"toHeader"
argument_list|,
name|toHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * List of custom Header objects of the type javax.sip.header.ViaHeader.          * Each ViaHeader containing a proxy address for request forwarding.          * (Note this header is automatically updated by each proxy when the          * request arrives at its listener).          *           * The option is a:          *<code>java.util.List&lt;javax.sip.header.ViaHeader&gt;</code> type.          *           * Group: advanced          */
DECL|method|viaHeaders (List<Object> viaHeaders)
specifier|default
name|AdvancedSipEndpointBuilder
name|viaHeaders
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|viaHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"viaHeaders"
argument_list|,
name|viaHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * List of custom Header objects of the type javax.sip.header.ViaHeader.          * Each ViaHeader containing a proxy address for request forwarding.          * (Note this header is automatically updated by each proxy when the          * request arrives at its listener).          *           * The option will be converted to a          *<code>java.util.List&lt;javax.sip.header.ViaHeader&gt;</code> type.          *           * Group: advanced          */
DECL|method|viaHeaders (String viaHeaders)
specifier|default
name|AdvancedSipEndpointBuilder
name|viaHeaders
parameter_list|(
name|String
name|viaHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"viaHeaders"
argument_list|,
name|viaHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * SIP (camel-sip)      * To send and receive messages using the SIP protocol (used in telco and      * mobile).      *       * Category: mobile      * Available as of version: 2.5      * Maven coordinates: org.apache.camel:camel-sip      *       * Syntax:<code>sip:uri</code>      *       * Path parameter: uri (required)      * URI of the SIP server to connect to (the username and password can be      * included such as: john:secretmyserver:9999)      */
DECL|method|sip (String path)
specifier|default
name|SipEndpointBuilder
name|sip
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|SipEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|SipEndpointBuilder
implements|,
name|AdvancedSipEndpointBuilder
block|{
specifier|public
name|SipEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"sip"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SipEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

