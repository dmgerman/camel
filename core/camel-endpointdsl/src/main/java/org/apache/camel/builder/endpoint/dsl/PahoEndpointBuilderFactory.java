begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * Component for communicating with MQTT message brokers using Eclipse Paho MQTT  * Client.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|PahoEndpointBuilderFactory
specifier|public
interface|interface
name|PahoEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Paho component.      */
DECL|interface|PahoEndpointConsumerBuilder
specifier|public
interface|interface
name|PahoEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedPahoEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets whether the client will automatically attempt to reconnect to          * the server if the connection is lost. If set to false, the client          * will not attempt to automatically reconnect to the server in the          * event that the connection is lost. If set to true, in the event that          * the connection is lost, the client will attempt to reconnect to the          * server. It will initially wait 1 second before it attempts to          * reconnect, for every failed reconnect attempt, the delay will double          * until it is at 2 minutes at which point the delay will stay at 2          * minutes.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|automaticReconnect ( boolean automaticReconnect)
specifier|default
name|PahoEndpointConsumerBuilder
name|automaticReconnect
parameter_list|(
name|boolean
name|automaticReconnect
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"automaticReconnect"
argument_list|,
name|automaticReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether the client will automatically attempt to reconnect to          * the server if the connection is lost. If set to false, the client          * will not attempt to automatically reconnect to the server in the          * event that the connection is lost. If set to true, in the event that          * the connection is lost, the client will attempt to reconnect to the          * server. It will initially wait 1 second before it attempts to          * reconnect, for every failed reconnect attempt, the delay will double          * until it is at 2 minutes at which point the delay will stay at 2          * minutes.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|automaticReconnect ( String automaticReconnect)
specifier|default
name|PahoEndpointConsumerBuilder
name|automaticReconnect
parameter_list|(
name|String
name|automaticReconnect
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"automaticReconnect"
argument_list|,
name|automaticReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The URL of the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|brokerUrl (String brokerUrl)
specifier|default
name|PahoEndpointConsumerBuilder
name|brokerUrl
parameter_list|(
name|String
name|brokerUrl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"brokerUrl"
argument_list|,
name|brokerUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether the client and server should remember state across          * restarts and reconnects. If set to false both the client and server          * will maintain state across restarts of the client, the server and the          * connection. As state is maintained: Message delivery will be reliable          * meeting the specified QOS even if the client, server or connection          * are restarted. The server will treat a subscription as durable. If          * set to true the client and server will not maintain state across          * restarts of the client, the server or the connection. This means          * Message delivery to the specified QOS cannot be maintained if the          * client, server or connection are restarted The server will treat a          * subscription as non-durable.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|cleanSession (boolean cleanSession)
specifier|default
name|PahoEndpointConsumerBuilder
name|cleanSession
parameter_list|(
name|boolean
name|cleanSession
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cleanSession"
argument_list|,
name|cleanSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether the client and server should remember state across          * restarts and reconnects. If set to false both the client and server          * will maintain state across restarts of the client, the server and the          * connection. As state is maintained: Message delivery will be reliable          * meeting the specified QOS even if the client, server or connection          * are restarted. The server will treat a subscription as durable. If          * set to true the client and server will not maintain state across          * restarts of the client, the server or the connection. This means          * Message delivery to the specified QOS cannot be maintained if the          * client, server or connection are restarted The server will treat a          * subscription as non-durable.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|cleanSession (String cleanSession)
specifier|default
name|PahoEndpointConsumerBuilder
name|cleanSession
parameter_list|(
name|String
name|cleanSession
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cleanSession"
argument_list|,
name|cleanSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * MQTT client identifier. The identifier must be unique.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientId (String clientId)
specifier|default
name|PahoEndpointConsumerBuilder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientId"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the connection timeout value. This value, measured in seconds,          * defines the maximum time interval the client will wait for the          * network connection to the MQTT server to be established. The default          * timeout is 30 seconds. A value of 0 disables timeout processing          * meaning the client will wait until the network connection is made          * successfully or fails.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|connectionTimeout ( int connectionTimeout)
specifier|default
name|PahoEndpointConsumerBuilder
name|connectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the connection timeout value. This value, measured in seconds,          * defines the maximum time interval the client will wait for the          * network connection to the MQTT server to be established. The default          * timeout is 30 seconds. A value of 0 disables timeout processing          * meaning the client will wait until the network connection is made          * successfully or fails.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|connectionTimeout ( String connectionTimeout)
specifier|default
name|PahoEndpointConsumerBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Base directory used by file persistence. Will by default use user          * directory.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|filePersistenceDirectory ( String filePersistenceDirectory)
specifier|default
name|PahoEndpointConsumerBuilder
name|filePersistenceDirectory
parameter_list|(
name|String
name|filePersistenceDirectory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"filePersistenceDirectory"
argument_list|,
name|filePersistenceDirectory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the keep alive interval. This value, measured in seconds,          * defines the maximum time interval between messages sent or received.          * It enables the client to detect if the server is no longer available,          * without having to wait for the TCP/IP timeout. The client will ensure          * that at least one message travels across the network within each keep          * alive period. In the absence of a data-related message during the          * time period, the client sends a very small ping message, which the          * server will acknowledge. A value of 0 disables keepalive processing          * in the client. The default value is 60 seconds.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|keepAliveInterval ( int keepAliveInterval)
specifier|default
name|PahoEndpointConsumerBuilder
name|keepAliveInterval
parameter_list|(
name|int
name|keepAliveInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keepAliveInterval"
argument_list|,
name|keepAliveInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the keep alive interval. This value, measured in seconds,          * defines the maximum time interval between messages sent or received.          * It enables the client to detect if the server is no longer available,          * without having to wait for the TCP/IP timeout. The client will ensure          * that at least one message travels across the network within each keep          * alive period. In the absence of a data-related message during the          * time period, the client sends a very small ping message, which the          * server will acknowledge. A value of 0 disables keepalive processing          * in the client. The default value is 60 seconds.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|keepAliveInterval ( String keepAliveInterval)
specifier|default
name|PahoEndpointConsumerBuilder
name|keepAliveInterval
parameter_list|(
name|String
name|keepAliveInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keepAliveInterval"
argument_list|,
name|keepAliveInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the max inflight. please increase this value in a high traffic          * environment. The default value is 10.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxInflight (int maxInflight)
specifier|default
name|PahoEndpointConsumerBuilder
name|maxInflight
parameter_list|(
name|int
name|maxInflight
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxInflight"
argument_list|,
name|maxInflight
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the max inflight. please increase this value in a high traffic          * environment. The default value is 10.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxInflight (String maxInflight)
specifier|default
name|PahoEndpointConsumerBuilder
name|maxInflight
parameter_list|(
name|String
name|maxInflight
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxInflight"
argument_list|,
name|maxInflight
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Get the maximum time (in millis) to wait between reconnects.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxReconnectDelay ( int maxReconnectDelay)
specifier|default
name|PahoEndpointConsumerBuilder
name|maxReconnectDelay
parameter_list|(
name|int
name|maxReconnectDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxReconnectDelay"
argument_list|,
name|maxReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Get the maximum time (in millis) to wait between reconnects.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxReconnectDelay ( String maxReconnectDelay)
specifier|default
name|PahoEndpointConsumerBuilder
name|maxReconnectDelay
parameter_list|(
name|String
name|maxReconnectDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxReconnectDelay"
argument_list|,
name|maxReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the MQTT version. The default action is to connect with version          * 3.1.1, and to fall back to 3.1 if that fails. Version 3.1.1 or 3.1          * can be selected specifically, with no fall back, by using the          * MQTT_VERSION_3_1_1 or MQTT_VERSION_3_1 options respectively.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|mqttVersion (int mqttVersion)
specifier|default
name|PahoEndpointConsumerBuilder
name|mqttVersion
parameter_list|(
name|int
name|mqttVersion
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mqttVersion"
argument_list|,
name|mqttVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the MQTT version. The default action is to connect with version          * 3.1.1, and to fall back to 3.1 if that fails. Version 3.1.1 or 3.1          * can be selected specifically, with no fall back, by using the          * MQTT_VERSION_3_1_1 or MQTT_VERSION_3_1 options respectively.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|mqttVersion (String mqttVersion)
specifier|default
name|PahoEndpointConsumerBuilder
name|mqttVersion
parameter_list|(
name|String
name|mqttVersion
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mqttVersion"
argument_list|,
name|mqttVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client persistence to be used - memory or file.          *           * The option is a:          *<code>org.apache.camel.component.paho.PahoPersistence</code> type.          *           * Group: common          */
DECL|method|persistence ( PahoPersistence persistence)
specifier|default
name|PahoEndpointConsumerBuilder
name|persistence
parameter_list|(
name|PahoPersistence
name|persistence
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"persistence"
argument_list|,
name|persistence
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client persistence to be used - memory or file.          *           * The option will be converted to a          *<code>org.apache.camel.component.paho.PahoPersistence</code> type.          *           * Group: common          */
DECL|method|persistence (String persistence)
specifier|default
name|PahoEndpointConsumerBuilder
name|persistence
parameter_list|(
name|String
name|persistence
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"persistence"
argument_list|,
name|persistence
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client quality of service level (0-2).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|qos (int qos)
specifier|default
name|PahoEndpointConsumerBuilder
name|qos
parameter_list|(
name|int
name|qos
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"qos"
argument_list|,
name|qos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client quality of service level (0-2).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|qos (String qos)
specifier|default
name|PahoEndpointConsumerBuilder
name|qos
parameter_list|(
name|String
name|qos
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"qos"
argument_list|,
name|qos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Retain option.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|retained (boolean retained)
specifier|default
name|PahoEndpointConsumerBuilder
name|retained
parameter_list|(
name|boolean
name|retained
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"retained"
argument_list|,
name|retained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Retain option.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|retained (String retained)
specifier|default
name|PahoEndpointConsumerBuilder
name|retained
parameter_list|(
name|String
name|retained
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"retained"
argument_list|,
name|retained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a list of one or more serverURIs the client may connect to.          * Multiple servers can be separated by comma. Each serverURI specifies          * the address of a server that the client may connect to. Two types of          * connection are supported tcp:// for a TCP connection and ssl:// for a          * TCP connection secured by SSL/TLS. For example: tcp://localhost:1883          * ssl://localhost:8883 If the port is not specified, it will default to          * 1883 for tcp:// URIs, and 8883 for ssl:// URIs. If serverURIs is set          * then it overrides the serverURI parameter passed in on the          * constructor of the MQTT client. When an attempt to connect is          * initiated the client will start with the first serverURI in the list          * and work through the list until a connection is established with a          * server. If a connection cannot be made to any of the servers then the          * connect attempt fails. Specifying a list of servers that a client may          * connect to has several uses: High Availability and reliable message          * delivery Some MQTT servers support a high availability feature where          * two or more equal MQTT servers share state. An MQTT client can          * connect to any of the equal servers and be assured that messages are          * reliably delivered and durable subscriptions are maintained no matter          * which server the client connects to. The cleansession flag must be          * set to false if durable subscriptions and/or reliable message          * delivery is required. Hunt List A set of servers may be specified          * that are not equal (as in the high availability option). As no state          * is shared across the servers reliable message delivery and durable          * subscriptions are not valid. The cleansession flag must be set to          * true if the hunt list mode is used.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|serverURIs (String serverURIs)
specifier|default
name|PahoEndpointConsumerBuilder
name|serverURIs
parameter_list|(
name|String
name|serverURIs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"serverURIs"
argument_list|,
name|serverURIs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|willPayload (String willPayload)
specifier|default
name|PahoEndpointConsumerBuilder
name|willPayload
parameter_list|(
name|String
name|willPayload
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willPayload"
argument_list|,
name|willPayload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|willQos (int willQos)
specifier|default
name|PahoEndpointConsumerBuilder
name|willQos
parameter_list|(
name|int
name|willQos
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willQos"
argument_list|,
name|willQos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|willQos (String willQos)
specifier|default
name|PahoEndpointConsumerBuilder
name|willQos
parameter_list|(
name|String
name|willQos
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willQos"
argument_list|,
name|willQos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|willRetained (boolean willRetained)
specifier|default
name|PahoEndpointConsumerBuilder
name|willRetained
parameter_list|(
name|boolean
name|willRetained
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willRetained"
argument_list|,
name|willRetained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|willRetained (String willRetained)
specifier|default
name|PahoEndpointConsumerBuilder
name|willRetained
parameter_list|(
name|String
name|willRetained
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willRetained"
argument_list|,
name|willRetained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|willTopic (String willTopic)
specifier|default
name|PahoEndpointConsumerBuilder
name|willTopic
parameter_list|(
name|String
name|willTopic
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willTopic"
argument_list|,
name|willTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|PahoEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|PahoEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether SSL HostnameVerifier is enabled or not. The default value is          * true.          *           * The option is a:<code>boolean</code> type.          *           * Group: security          */
DECL|method|httpsHostnameVerificationEnabled ( boolean httpsHostnameVerificationEnabled)
specifier|default
name|PahoEndpointConsumerBuilder
name|httpsHostnameVerificationEnabled
parameter_list|(
name|boolean
name|httpsHostnameVerificationEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpsHostnameVerificationEnabled"
argument_list|,
name|httpsHostnameVerificationEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether SSL HostnameVerifier is enabled or not. The default value is          * true.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: security          */
DECL|method|httpsHostnameVerificationEnabled ( String httpsHostnameVerificationEnabled)
specifier|default
name|PahoEndpointConsumerBuilder
name|httpsHostnameVerificationEnabled
parameter_list|(
name|String
name|httpsHostnameVerificationEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpsHostnameVerificationEnabled"
argument_list|,
name|httpsHostnameVerificationEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password to be used for authentication against the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|PahoEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SocketFactory to use. This allows an application to apply          * its own policies around the creation of network sockets. If using an          * SSL connection, an SSLSocketFactory can be used to supply          * application-specific security settings.          *           * The option is a:<code>javax.net.SocketFactory</code> type.          *           * Group: security          */
DECL|method|socketFactory (Object socketFactory)
specifier|default
name|PahoEndpointConsumerBuilder
name|socketFactory
parameter_list|(
name|Object
name|socketFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"socketFactory"
argument_list|,
name|socketFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SocketFactory to use. This allows an application to apply          * its own policies around the creation of network sockets. If using an          * SSL connection, an SSLSocketFactory can be used to supply          * application-specific security settings.          *           * The option will be converted to a          *<code>javax.net.SocketFactory</code> type.          *           * Group: security          */
DECL|method|socketFactory (String socketFactory)
specifier|default
name|PahoEndpointConsumerBuilder
name|socketFactory
parameter_list|(
name|String
name|socketFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"socketFactory"
argument_list|,
name|socketFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SSL properties for the connection. Note that these          * properties are only valid if an implementation of the Java Secure          * Socket Extensions (JSSE) is available. These properties are not used          * if a custom SocketFactory has been set. The following properties can          * be used: com.ibm.ssl.protocol One of: SSL, SSLv3, TLS, TLSv1,          * SSL_TLS. com.ibm.ssl.contextProvider Underlying JSSE provider. For          * example IBMJSSE2 or SunJSSE com.ibm.ssl.keyStore The name of the file          * that contains the KeyStore object that you want the KeyManager to          * use. For example /mydir/etc/key.p12 com.ibm.ssl.keyStorePassword The          * password for the KeyStore object that you want the KeyManager to use.          * The password can either be in plain-text, or may be obfuscated using          * the static method: com.ibm.micro.security.Password.obfuscate(char          * password). This obfuscates the password using a simple and insecure          * XOR and Base64 encoding mechanism. Note that this is only a simple          * scrambler to obfuscate clear-text passwords. com.ibm.ssl.keyStoreType          * Type of key store, for example PKCS12, JKS, or JCEKS.          * com.ibm.ssl.keyStoreProvider Key store provider, for example IBMJCE          * or IBMJCEFIPS. com.ibm.ssl.trustStore The name of the file that          * contains the KeyStore object that you want the TrustManager to use.          * com.ibm.ssl.trustStorePassword The password for the TrustStore object          * that you want the TrustManager to use. The password can either be in          * plain-text, or may be obfuscated using the static method:          * com.ibm.micro.security.Password.obfuscate(char password). This          * obfuscates the password using a simple and insecure XOR and Base64          * encoding mechanism. Note that this is only a simple scrambler to          * obfuscate clear-text passwords. com.ibm.ssl.trustStoreType The type          * of KeyStore object that you want the default TrustManager to use.          * Same possible values as keyStoreType. com.ibm.ssl.trustStoreProvider          * Trust store provider, for example IBMJCE or IBMJCEFIPS.          * com.ibm.ssl.enabledCipherSuites A list of which ciphers are enabled.          * Values are dependent on the provider, for example:          * SSL_RSA_WITH_AES_128_CBC_SHA;SSL_RSA_WITH_3DES_EDE_CBC_SHA.          * com.ibm.ssl.keyManager Sets the algorithm that will be used to          * instantiate a KeyManagerFactory object instead of using the default          * algorithm available in the platform. Example values: IbmX509 or          * IBMJ9X509. com.ibm.ssl.trustManager Sets the algorithm that will be          * used to instantiate a TrustManagerFactory object instead of using the          * default algorithm available in the platform. Example values: PKIX or          * IBMJ9X509.          *           * The option is a:<code>java.util.Properties</code> type.          *           * Group: security          */
DECL|method|sslClientProps ( Properties sslClientProps)
specifier|default
name|PahoEndpointConsumerBuilder
name|sslClientProps
parameter_list|(
name|Properties
name|sslClientProps
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslClientProps"
argument_list|,
name|sslClientProps
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SSL properties for the connection. Note that these          * properties are only valid if an implementation of the Java Secure          * Socket Extensions (JSSE) is available. These properties are not used          * if a custom SocketFactory has been set. The following properties can          * be used: com.ibm.ssl.protocol One of: SSL, SSLv3, TLS, TLSv1,          * SSL_TLS. com.ibm.ssl.contextProvider Underlying JSSE provider. For          * example IBMJSSE2 or SunJSSE com.ibm.ssl.keyStore The name of the file          * that contains the KeyStore object that you want the KeyManager to          * use. For example /mydir/etc/key.p12 com.ibm.ssl.keyStorePassword The          * password for the KeyStore object that you want the KeyManager to use.          * The password can either be in plain-text, or may be obfuscated using          * the static method: com.ibm.micro.security.Password.obfuscate(char          * password). This obfuscates the password using a simple and insecure          * XOR and Base64 encoding mechanism. Note that this is only a simple          * scrambler to obfuscate clear-text passwords. com.ibm.ssl.keyStoreType          * Type of key store, for example PKCS12, JKS, or JCEKS.          * com.ibm.ssl.keyStoreProvider Key store provider, for example IBMJCE          * or IBMJCEFIPS. com.ibm.ssl.trustStore The name of the file that          * contains the KeyStore object that you want the TrustManager to use.          * com.ibm.ssl.trustStorePassword The password for the TrustStore object          * that you want the TrustManager to use. The password can either be in          * plain-text, or may be obfuscated using the static method:          * com.ibm.micro.security.Password.obfuscate(char password). This          * obfuscates the password using a simple and insecure XOR and Base64          * encoding mechanism. Note that this is only a simple scrambler to          * obfuscate clear-text passwords. com.ibm.ssl.trustStoreType The type          * of KeyStore object that you want the default TrustManager to use.          * Same possible values as keyStoreType. com.ibm.ssl.trustStoreProvider          * Trust store provider, for example IBMJCE or IBMJCEFIPS.          * com.ibm.ssl.enabledCipherSuites A list of which ciphers are enabled.          * Values are dependent on the provider, for example:          * SSL_RSA_WITH_AES_128_CBC_SHA;SSL_RSA_WITH_3DES_EDE_CBC_SHA.          * com.ibm.ssl.keyManager Sets the algorithm that will be used to          * instantiate a KeyManagerFactory object instead of using the default          * algorithm available in the platform. Example values: IbmX509 or          * IBMJ9X509. com.ibm.ssl.trustManager Sets the algorithm that will be          * used to instantiate a TrustManagerFactory object instead of using the          * default algorithm available in the platform. Example values: PKIX or          * IBMJ9X509.          *           * The option will be converted to a<code>java.util.Properties</code>          * type.          *           * Group: security          */
DECL|method|sslClientProps (String sslClientProps)
specifier|default
name|PahoEndpointConsumerBuilder
name|sslClientProps
parameter_list|(
name|String
name|sslClientProps
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslClientProps"
argument_list|,
name|sslClientProps
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the HostnameVerifier for the SSL connection. Note that it will          * be used after handshake on a connection and you should do actions by          * yourself when hostname is verified error. There is no default          * HostnameVerifier.          *           * The option is a:<code>javax.net.ssl.HostnameVerifier</code> type.          *           * Group: security          */
DECL|method|sslHostnameVerifier ( Object sslHostnameVerifier)
specifier|default
name|PahoEndpointConsumerBuilder
name|sslHostnameVerifier
parameter_list|(
name|Object
name|sslHostnameVerifier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslHostnameVerifier"
argument_list|,
name|sslHostnameVerifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the HostnameVerifier for the SSL connection. Note that it will          * be used after handshake on a connection and you should do actions by          * yourself when hostname is verified error. There is no default          * HostnameVerifier.          *           * The option will be converted to a          *<code>javax.net.ssl.HostnameVerifier</code> type.          *           * Group: security          */
DECL|method|sslHostnameVerifier ( String sslHostnameVerifier)
specifier|default
name|PahoEndpointConsumerBuilder
name|sslHostnameVerifier
parameter_list|(
name|String
name|sslHostnameVerifier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslHostnameVerifier"
argument_list|,
name|sslHostnameVerifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username to be used for authentication against the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|userName (String userName)
specifier|default
name|PahoEndpointConsumerBuilder
name|userName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Paho component.      */
DECL|interface|AdvancedPahoEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedPahoEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|PahoEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|PahoEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing mqtt client.          *           * The option is a:          *<code>org.eclipse.paho.client.mqttv3.MqttClient</code> type.          *           * Group: advanced          */
DECL|method|client (Object client)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|client
parameter_list|(
name|Object
name|client
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing mqtt client.          *           * The option will be converted to a          *<code>org.eclipse.paho.client.mqttv3.MqttClient</code> type.          *           * Group: advanced          */
DECL|method|client (String client)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|client
parameter_list|(
name|String
name|client
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Custom WebSocket Headers for the WebSocket Connection.          *           * The option is a:<code>java.util.Properties</code> type.          *           * Group: advanced          */
DECL|method|customWebSocketHeaders ( Properties customWebSocketHeaders)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|customWebSocketHeaders
parameter_list|(
name|Properties
name|customWebSocketHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"customWebSocketHeaders"
argument_list|,
name|customWebSocketHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Custom WebSocket Headers for the WebSocket Connection.          *           * The option will be converted to a<code>java.util.Properties</code>          * type.          *           * Group: advanced          */
DECL|method|customWebSocketHeaders ( String customWebSocketHeaders)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|customWebSocketHeaders
parameter_list|(
name|String
name|customWebSocketHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"customWebSocketHeaders"
argument_list|,
name|customWebSocketHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the time in seconds that the executor service should wait when          * terminating before forcefully terminating. It is not recommended to          * change this value unless you are absolutely sure that you need to.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|executorServiceTimeout ( int executorServiceTimeout)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|executorServiceTimeout
parameter_list|(
name|int
name|executorServiceTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"executorServiceTimeout"
argument_list|,
name|executorServiceTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the time in seconds that the executor service should wait when          * terminating before forcefully terminating. It is not recommended to          * change this value unless you are absolutely sure that you need to.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|executorServiceTimeout ( String executorServiceTimeout)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|executorServiceTimeout
parameter_list|(
name|String
name|executorServiceTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"executorServiceTimeout"
argument_list|,
name|executorServiceTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Paho component.      */
DECL|interface|PahoEndpointProducerBuilder
specifier|public
interface|interface
name|PahoEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedPahoEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedPahoEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets whether the client will automatically attempt to reconnect to          * the server if the connection is lost. If set to false, the client          * will not attempt to automatically reconnect to the server in the          * event that the connection is lost. If set to true, in the event that          * the connection is lost, the client will attempt to reconnect to the          * server. It will initially wait 1 second before it attempts to          * reconnect, for every failed reconnect attempt, the delay will double          * until it is at 2 minutes at which point the delay will stay at 2          * minutes.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|automaticReconnect ( boolean automaticReconnect)
specifier|default
name|PahoEndpointProducerBuilder
name|automaticReconnect
parameter_list|(
name|boolean
name|automaticReconnect
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"automaticReconnect"
argument_list|,
name|automaticReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether the client will automatically attempt to reconnect to          * the server if the connection is lost. If set to false, the client          * will not attempt to automatically reconnect to the server in the          * event that the connection is lost. If set to true, in the event that          * the connection is lost, the client will attempt to reconnect to the          * server. It will initially wait 1 second before it attempts to          * reconnect, for every failed reconnect attempt, the delay will double          * until it is at 2 minutes at which point the delay will stay at 2          * minutes.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|automaticReconnect ( String automaticReconnect)
specifier|default
name|PahoEndpointProducerBuilder
name|automaticReconnect
parameter_list|(
name|String
name|automaticReconnect
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"automaticReconnect"
argument_list|,
name|automaticReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The URL of the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|brokerUrl (String brokerUrl)
specifier|default
name|PahoEndpointProducerBuilder
name|brokerUrl
parameter_list|(
name|String
name|brokerUrl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"brokerUrl"
argument_list|,
name|brokerUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether the client and server should remember state across          * restarts and reconnects. If set to false both the client and server          * will maintain state across restarts of the client, the server and the          * connection. As state is maintained: Message delivery will be reliable          * meeting the specified QOS even if the client, server or connection          * are restarted. The server will treat a subscription as durable. If          * set to true the client and server will not maintain state across          * restarts of the client, the server or the connection. This means          * Message delivery to the specified QOS cannot be maintained if the          * client, server or connection are restarted The server will treat a          * subscription as non-durable.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|cleanSession (boolean cleanSession)
specifier|default
name|PahoEndpointProducerBuilder
name|cleanSession
parameter_list|(
name|boolean
name|cleanSession
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cleanSession"
argument_list|,
name|cleanSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether the client and server should remember state across          * restarts and reconnects. If set to false both the client and server          * will maintain state across restarts of the client, the server and the          * connection. As state is maintained: Message delivery will be reliable          * meeting the specified QOS even if the client, server or connection          * are restarted. The server will treat a subscription as durable. If          * set to true the client and server will not maintain state across          * restarts of the client, the server or the connection. This means          * Message delivery to the specified QOS cannot be maintained if the          * client, server or connection are restarted The server will treat a          * subscription as non-durable.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|cleanSession (String cleanSession)
specifier|default
name|PahoEndpointProducerBuilder
name|cleanSession
parameter_list|(
name|String
name|cleanSession
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cleanSession"
argument_list|,
name|cleanSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * MQTT client identifier. The identifier must be unique.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientId (String clientId)
specifier|default
name|PahoEndpointProducerBuilder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientId"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the connection timeout value. This value, measured in seconds,          * defines the maximum time interval the client will wait for the          * network connection to the MQTT server to be established. The default          * timeout is 30 seconds. A value of 0 disables timeout processing          * meaning the client will wait until the network connection is made          * successfully or fails.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|connectionTimeout ( int connectionTimeout)
specifier|default
name|PahoEndpointProducerBuilder
name|connectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the connection timeout value. This value, measured in seconds,          * defines the maximum time interval the client will wait for the          * network connection to the MQTT server to be established. The default          * timeout is 30 seconds. A value of 0 disables timeout processing          * meaning the client will wait until the network connection is made          * successfully or fails.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|connectionTimeout ( String connectionTimeout)
specifier|default
name|PahoEndpointProducerBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Base directory used by file persistence. Will by default use user          * directory.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|filePersistenceDirectory ( String filePersistenceDirectory)
specifier|default
name|PahoEndpointProducerBuilder
name|filePersistenceDirectory
parameter_list|(
name|String
name|filePersistenceDirectory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"filePersistenceDirectory"
argument_list|,
name|filePersistenceDirectory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the keep alive interval. This value, measured in seconds,          * defines the maximum time interval between messages sent or received.          * It enables the client to detect if the server is no longer available,          * without having to wait for the TCP/IP timeout. The client will ensure          * that at least one message travels across the network within each keep          * alive period. In the absence of a data-related message during the          * time period, the client sends a very small ping message, which the          * server will acknowledge. A value of 0 disables keepalive processing          * in the client. The default value is 60 seconds.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|keepAliveInterval ( int keepAliveInterval)
specifier|default
name|PahoEndpointProducerBuilder
name|keepAliveInterval
parameter_list|(
name|int
name|keepAliveInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keepAliveInterval"
argument_list|,
name|keepAliveInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the keep alive interval. This value, measured in seconds,          * defines the maximum time interval between messages sent or received.          * It enables the client to detect if the server is no longer available,          * without having to wait for the TCP/IP timeout. The client will ensure          * that at least one message travels across the network within each keep          * alive period. In the absence of a data-related message during the          * time period, the client sends a very small ping message, which the          * server will acknowledge. A value of 0 disables keepalive processing          * in the client. The default value is 60 seconds.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|keepAliveInterval ( String keepAliveInterval)
specifier|default
name|PahoEndpointProducerBuilder
name|keepAliveInterval
parameter_list|(
name|String
name|keepAliveInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keepAliveInterval"
argument_list|,
name|keepAliveInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the max inflight. please increase this value in a high traffic          * environment. The default value is 10.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxInflight (int maxInflight)
specifier|default
name|PahoEndpointProducerBuilder
name|maxInflight
parameter_list|(
name|int
name|maxInflight
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxInflight"
argument_list|,
name|maxInflight
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the max inflight. please increase this value in a high traffic          * environment. The default value is 10.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxInflight (String maxInflight)
specifier|default
name|PahoEndpointProducerBuilder
name|maxInflight
parameter_list|(
name|String
name|maxInflight
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxInflight"
argument_list|,
name|maxInflight
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Get the maximum time (in millis) to wait between reconnects.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxReconnectDelay ( int maxReconnectDelay)
specifier|default
name|PahoEndpointProducerBuilder
name|maxReconnectDelay
parameter_list|(
name|int
name|maxReconnectDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxReconnectDelay"
argument_list|,
name|maxReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Get the maximum time (in millis) to wait between reconnects.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxReconnectDelay ( String maxReconnectDelay)
specifier|default
name|PahoEndpointProducerBuilder
name|maxReconnectDelay
parameter_list|(
name|String
name|maxReconnectDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxReconnectDelay"
argument_list|,
name|maxReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the MQTT version. The default action is to connect with version          * 3.1.1, and to fall back to 3.1 if that fails. Version 3.1.1 or 3.1          * can be selected specifically, with no fall back, by using the          * MQTT_VERSION_3_1_1 or MQTT_VERSION_3_1 options respectively.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|mqttVersion (int mqttVersion)
specifier|default
name|PahoEndpointProducerBuilder
name|mqttVersion
parameter_list|(
name|int
name|mqttVersion
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mqttVersion"
argument_list|,
name|mqttVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the MQTT version. The default action is to connect with version          * 3.1.1, and to fall back to 3.1 if that fails. Version 3.1.1 or 3.1          * can be selected specifically, with no fall back, by using the          * MQTT_VERSION_3_1_1 or MQTT_VERSION_3_1 options respectively.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|mqttVersion (String mqttVersion)
specifier|default
name|PahoEndpointProducerBuilder
name|mqttVersion
parameter_list|(
name|String
name|mqttVersion
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mqttVersion"
argument_list|,
name|mqttVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client persistence to be used - memory or file.          *           * The option is a:          *<code>org.apache.camel.component.paho.PahoPersistence</code> type.          *           * Group: common          */
DECL|method|persistence ( PahoPersistence persistence)
specifier|default
name|PahoEndpointProducerBuilder
name|persistence
parameter_list|(
name|PahoPersistence
name|persistence
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"persistence"
argument_list|,
name|persistence
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client persistence to be used - memory or file.          *           * The option will be converted to a          *<code>org.apache.camel.component.paho.PahoPersistence</code> type.          *           * Group: common          */
DECL|method|persistence (String persistence)
specifier|default
name|PahoEndpointProducerBuilder
name|persistence
parameter_list|(
name|String
name|persistence
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"persistence"
argument_list|,
name|persistence
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client quality of service level (0-2).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|qos (int qos)
specifier|default
name|PahoEndpointProducerBuilder
name|qos
parameter_list|(
name|int
name|qos
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"qos"
argument_list|,
name|qos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client quality of service level (0-2).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|qos (String qos)
specifier|default
name|PahoEndpointProducerBuilder
name|qos
parameter_list|(
name|String
name|qos
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"qos"
argument_list|,
name|qos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Retain option.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|retained (boolean retained)
specifier|default
name|PahoEndpointProducerBuilder
name|retained
parameter_list|(
name|boolean
name|retained
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"retained"
argument_list|,
name|retained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Retain option.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|retained (String retained)
specifier|default
name|PahoEndpointProducerBuilder
name|retained
parameter_list|(
name|String
name|retained
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"retained"
argument_list|,
name|retained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a list of one or more serverURIs the client may connect to.          * Multiple servers can be separated by comma. Each serverURI specifies          * the address of a server that the client may connect to. Two types of          * connection are supported tcp:// for a TCP connection and ssl:// for a          * TCP connection secured by SSL/TLS. For example: tcp://localhost:1883          * ssl://localhost:8883 If the port is not specified, it will default to          * 1883 for tcp:// URIs, and 8883 for ssl:// URIs. If serverURIs is set          * then it overrides the serverURI parameter passed in on the          * constructor of the MQTT client. When an attempt to connect is          * initiated the client will start with the first serverURI in the list          * and work through the list until a connection is established with a          * server. If a connection cannot be made to any of the servers then the          * connect attempt fails. Specifying a list of servers that a client may          * connect to has several uses: High Availability and reliable message          * delivery Some MQTT servers support a high availability feature where          * two or more equal MQTT servers share state. An MQTT client can          * connect to any of the equal servers and be assured that messages are          * reliably delivered and durable subscriptions are maintained no matter          * which server the client connects to. The cleansession flag must be          * set to false if durable subscriptions and/or reliable message          * delivery is required. Hunt List A set of servers may be specified          * that are not equal (as in the high availability option). As no state          * is shared across the servers reliable message delivery and durable          * subscriptions are not valid. The cleansession flag must be set to          * true if the hunt list mode is used.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|serverURIs (String serverURIs)
specifier|default
name|PahoEndpointProducerBuilder
name|serverURIs
parameter_list|(
name|String
name|serverURIs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"serverURIs"
argument_list|,
name|serverURIs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|willPayload (String willPayload)
specifier|default
name|PahoEndpointProducerBuilder
name|willPayload
parameter_list|(
name|String
name|willPayload
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willPayload"
argument_list|,
name|willPayload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|willQos (int willQos)
specifier|default
name|PahoEndpointProducerBuilder
name|willQos
parameter_list|(
name|int
name|willQos
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willQos"
argument_list|,
name|willQos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|willQos (String willQos)
specifier|default
name|PahoEndpointProducerBuilder
name|willQos
parameter_list|(
name|String
name|willQos
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willQos"
argument_list|,
name|willQos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|willRetained (boolean willRetained)
specifier|default
name|PahoEndpointProducerBuilder
name|willRetained
parameter_list|(
name|boolean
name|willRetained
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willRetained"
argument_list|,
name|willRetained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|willRetained (String willRetained)
specifier|default
name|PahoEndpointProducerBuilder
name|willRetained
parameter_list|(
name|String
name|willRetained
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willRetained"
argument_list|,
name|willRetained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|willTopic (String willTopic)
specifier|default
name|PahoEndpointProducerBuilder
name|willTopic
parameter_list|(
name|String
name|willTopic
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willTopic"
argument_list|,
name|willTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|PahoEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|PahoEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether SSL HostnameVerifier is enabled or not. The default value is          * true.          *           * The option is a:<code>boolean</code> type.          *           * Group: security          */
DECL|method|httpsHostnameVerificationEnabled ( boolean httpsHostnameVerificationEnabled)
specifier|default
name|PahoEndpointProducerBuilder
name|httpsHostnameVerificationEnabled
parameter_list|(
name|boolean
name|httpsHostnameVerificationEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpsHostnameVerificationEnabled"
argument_list|,
name|httpsHostnameVerificationEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether SSL HostnameVerifier is enabled or not. The default value is          * true.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: security          */
DECL|method|httpsHostnameVerificationEnabled ( String httpsHostnameVerificationEnabled)
specifier|default
name|PahoEndpointProducerBuilder
name|httpsHostnameVerificationEnabled
parameter_list|(
name|String
name|httpsHostnameVerificationEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpsHostnameVerificationEnabled"
argument_list|,
name|httpsHostnameVerificationEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password to be used for authentication against the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|PahoEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SocketFactory to use. This allows an application to apply          * its own policies around the creation of network sockets. If using an          * SSL connection, an SSLSocketFactory can be used to supply          * application-specific security settings.          *           * The option is a:<code>javax.net.SocketFactory</code> type.          *           * Group: security          */
DECL|method|socketFactory (Object socketFactory)
specifier|default
name|PahoEndpointProducerBuilder
name|socketFactory
parameter_list|(
name|Object
name|socketFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"socketFactory"
argument_list|,
name|socketFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SocketFactory to use. This allows an application to apply          * its own policies around the creation of network sockets. If using an          * SSL connection, an SSLSocketFactory can be used to supply          * application-specific security settings.          *           * The option will be converted to a          *<code>javax.net.SocketFactory</code> type.          *           * Group: security          */
DECL|method|socketFactory (String socketFactory)
specifier|default
name|PahoEndpointProducerBuilder
name|socketFactory
parameter_list|(
name|String
name|socketFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"socketFactory"
argument_list|,
name|socketFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SSL properties for the connection. Note that these          * properties are only valid if an implementation of the Java Secure          * Socket Extensions (JSSE) is available. These properties are not used          * if a custom SocketFactory has been set. The following properties can          * be used: com.ibm.ssl.protocol One of: SSL, SSLv3, TLS, TLSv1,          * SSL_TLS. com.ibm.ssl.contextProvider Underlying JSSE provider. For          * example IBMJSSE2 or SunJSSE com.ibm.ssl.keyStore The name of the file          * that contains the KeyStore object that you want the KeyManager to          * use. For example /mydir/etc/key.p12 com.ibm.ssl.keyStorePassword The          * password for the KeyStore object that you want the KeyManager to use.          * The password can either be in plain-text, or may be obfuscated using          * the static method: com.ibm.micro.security.Password.obfuscate(char          * password). This obfuscates the password using a simple and insecure          * XOR and Base64 encoding mechanism. Note that this is only a simple          * scrambler to obfuscate clear-text passwords. com.ibm.ssl.keyStoreType          * Type of key store, for example PKCS12, JKS, or JCEKS.          * com.ibm.ssl.keyStoreProvider Key store provider, for example IBMJCE          * or IBMJCEFIPS. com.ibm.ssl.trustStore The name of the file that          * contains the KeyStore object that you want the TrustManager to use.          * com.ibm.ssl.trustStorePassword The password for the TrustStore object          * that you want the TrustManager to use. The password can either be in          * plain-text, or may be obfuscated using the static method:          * com.ibm.micro.security.Password.obfuscate(char password). This          * obfuscates the password using a simple and insecure XOR and Base64          * encoding mechanism. Note that this is only a simple scrambler to          * obfuscate clear-text passwords. com.ibm.ssl.trustStoreType The type          * of KeyStore object that you want the default TrustManager to use.          * Same possible values as keyStoreType. com.ibm.ssl.trustStoreProvider          * Trust store provider, for example IBMJCE or IBMJCEFIPS.          * com.ibm.ssl.enabledCipherSuites A list of which ciphers are enabled.          * Values are dependent on the provider, for example:          * SSL_RSA_WITH_AES_128_CBC_SHA;SSL_RSA_WITH_3DES_EDE_CBC_SHA.          * com.ibm.ssl.keyManager Sets the algorithm that will be used to          * instantiate a KeyManagerFactory object instead of using the default          * algorithm available in the platform. Example values: IbmX509 or          * IBMJ9X509. com.ibm.ssl.trustManager Sets the algorithm that will be          * used to instantiate a TrustManagerFactory object instead of using the          * default algorithm available in the platform. Example values: PKIX or          * IBMJ9X509.          *           * The option is a:<code>java.util.Properties</code> type.          *           * Group: security          */
DECL|method|sslClientProps ( Properties sslClientProps)
specifier|default
name|PahoEndpointProducerBuilder
name|sslClientProps
parameter_list|(
name|Properties
name|sslClientProps
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslClientProps"
argument_list|,
name|sslClientProps
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SSL properties for the connection. Note that these          * properties are only valid if an implementation of the Java Secure          * Socket Extensions (JSSE) is available. These properties are not used          * if a custom SocketFactory has been set. The following properties can          * be used: com.ibm.ssl.protocol One of: SSL, SSLv3, TLS, TLSv1,          * SSL_TLS. com.ibm.ssl.contextProvider Underlying JSSE provider. For          * example IBMJSSE2 or SunJSSE com.ibm.ssl.keyStore The name of the file          * that contains the KeyStore object that you want the KeyManager to          * use. For example /mydir/etc/key.p12 com.ibm.ssl.keyStorePassword The          * password for the KeyStore object that you want the KeyManager to use.          * The password can either be in plain-text, or may be obfuscated using          * the static method: com.ibm.micro.security.Password.obfuscate(char          * password). This obfuscates the password using a simple and insecure          * XOR and Base64 encoding mechanism. Note that this is only a simple          * scrambler to obfuscate clear-text passwords. com.ibm.ssl.keyStoreType          * Type of key store, for example PKCS12, JKS, or JCEKS.          * com.ibm.ssl.keyStoreProvider Key store provider, for example IBMJCE          * or IBMJCEFIPS. com.ibm.ssl.trustStore The name of the file that          * contains the KeyStore object that you want the TrustManager to use.          * com.ibm.ssl.trustStorePassword The password for the TrustStore object          * that you want the TrustManager to use. The password can either be in          * plain-text, or may be obfuscated using the static method:          * com.ibm.micro.security.Password.obfuscate(char password). This          * obfuscates the password using a simple and insecure XOR and Base64          * encoding mechanism. Note that this is only a simple scrambler to          * obfuscate clear-text passwords. com.ibm.ssl.trustStoreType The type          * of KeyStore object that you want the default TrustManager to use.          * Same possible values as keyStoreType. com.ibm.ssl.trustStoreProvider          * Trust store provider, for example IBMJCE or IBMJCEFIPS.          * com.ibm.ssl.enabledCipherSuites A list of which ciphers are enabled.          * Values are dependent on the provider, for example:          * SSL_RSA_WITH_AES_128_CBC_SHA;SSL_RSA_WITH_3DES_EDE_CBC_SHA.          * com.ibm.ssl.keyManager Sets the algorithm that will be used to          * instantiate a KeyManagerFactory object instead of using the default          * algorithm available in the platform. Example values: IbmX509 or          * IBMJ9X509. com.ibm.ssl.trustManager Sets the algorithm that will be          * used to instantiate a TrustManagerFactory object instead of using the          * default algorithm available in the platform. Example values: PKIX or          * IBMJ9X509.          *           * The option will be converted to a<code>java.util.Properties</code>          * type.          *           * Group: security          */
DECL|method|sslClientProps (String sslClientProps)
specifier|default
name|PahoEndpointProducerBuilder
name|sslClientProps
parameter_list|(
name|String
name|sslClientProps
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslClientProps"
argument_list|,
name|sslClientProps
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the HostnameVerifier for the SSL connection. Note that it will          * be used after handshake on a connection and you should do actions by          * yourself when hostname is verified error. There is no default          * HostnameVerifier.          *           * The option is a:<code>javax.net.ssl.HostnameVerifier</code> type.          *           * Group: security          */
DECL|method|sslHostnameVerifier ( Object sslHostnameVerifier)
specifier|default
name|PahoEndpointProducerBuilder
name|sslHostnameVerifier
parameter_list|(
name|Object
name|sslHostnameVerifier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslHostnameVerifier"
argument_list|,
name|sslHostnameVerifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the HostnameVerifier for the SSL connection. Note that it will          * be used after handshake on a connection and you should do actions by          * yourself when hostname is verified error. There is no default          * HostnameVerifier.          *           * The option will be converted to a          *<code>javax.net.ssl.HostnameVerifier</code> type.          *           * Group: security          */
DECL|method|sslHostnameVerifier ( String sslHostnameVerifier)
specifier|default
name|PahoEndpointProducerBuilder
name|sslHostnameVerifier
parameter_list|(
name|String
name|sslHostnameVerifier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslHostnameVerifier"
argument_list|,
name|sslHostnameVerifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username to be used for authentication against the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|userName (String userName)
specifier|default
name|PahoEndpointProducerBuilder
name|userName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Paho component.      */
DECL|interface|AdvancedPahoEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedPahoEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|PahoEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|PahoEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedPahoEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedPahoEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing mqtt client.          *           * The option is a:          *<code>org.eclipse.paho.client.mqttv3.MqttClient</code> type.          *           * Group: advanced          */
DECL|method|client (Object client)
specifier|default
name|AdvancedPahoEndpointProducerBuilder
name|client
parameter_list|(
name|Object
name|client
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing mqtt client.          *           * The option will be converted to a          *<code>org.eclipse.paho.client.mqttv3.MqttClient</code> type.          *           * Group: advanced          */
DECL|method|client (String client)
specifier|default
name|AdvancedPahoEndpointProducerBuilder
name|client
parameter_list|(
name|String
name|client
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Custom WebSocket Headers for the WebSocket Connection.          *           * The option is a:<code>java.util.Properties</code> type.          *           * Group: advanced          */
DECL|method|customWebSocketHeaders ( Properties customWebSocketHeaders)
specifier|default
name|AdvancedPahoEndpointProducerBuilder
name|customWebSocketHeaders
parameter_list|(
name|Properties
name|customWebSocketHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"customWebSocketHeaders"
argument_list|,
name|customWebSocketHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Custom WebSocket Headers for the WebSocket Connection.          *           * The option will be converted to a<code>java.util.Properties</code>          * type.          *           * Group: advanced          */
DECL|method|customWebSocketHeaders ( String customWebSocketHeaders)
specifier|default
name|AdvancedPahoEndpointProducerBuilder
name|customWebSocketHeaders
parameter_list|(
name|String
name|customWebSocketHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"customWebSocketHeaders"
argument_list|,
name|customWebSocketHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the time in seconds that the executor service should wait when          * terminating before forcefully terminating. It is not recommended to          * change this value unless you are absolutely sure that you need to.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|executorServiceTimeout ( int executorServiceTimeout)
specifier|default
name|AdvancedPahoEndpointProducerBuilder
name|executorServiceTimeout
parameter_list|(
name|int
name|executorServiceTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"executorServiceTimeout"
argument_list|,
name|executorServiceTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the time in seconds that the executor service should wait when          * terminating before forcefully terminating. It is not recommended to          * change this value unless you are absolutely sure that you need to.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|executorServiceTimeout ( String executorServiceTimeout)
specifier|default
name|AdvancedPahoEndpointProducerBuilder
name|executorServiceTimeout
parameter_list|(
name|String
name|executorServiceTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"executorServiceTimeout"
argument_list|,
name|executorServiceTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedPahoEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedPahoEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Paho component.      */
DECL|interface|PahoEndpointBuilder
specifier|public
interface|interface
name|PahoEndpointBuilder
extends|extends
name|PahoEndpointConsumerBuilder
extends|,
name|PahoEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedPahoEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedPahoEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets whether the client will automatically attempt to reconnect to          * the server if the connection is lost. If set to false, the client          * will not attempt to automatically reconnect to the server in the          * event that the connection is lost. If set to true, in the event that          * the connection is lost, the client will attempt to reconnect to the          * server. It will initially wait 1 second before it attempts to          * reconnect, for every failed reconnect attempt, the delay will double          * until it is at 2 minutes at which point the delay will stay at 2          * minutes.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|automaticReconnect ( boolean automaticReconnect)
specifier|default
name|PahoEndpointBuilder
name|automaticReconnect
parameter_list|(
name|boolean
name|automaticReconnect
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"automaticReconnect"
argument_list|,
name|automaticReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether the client will automatically attempt to reconnect to          * the server if the connection is lost. If set to false, the client          * will not attempt to automatically reconnect to the server in the          * event that the connection is lost. If set to true, in the event that          * the connection is lost, the client will attempt to reconnect to the          * server. It will initially wait 1 second before it attempts to          * reconnect, for every failed reconnect attempt, the delay will double          * until it is at 2 minutes at which point the delay will stay at 2          * minutes.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|automaticReconnect (String automaticReconnect)
specifier|default
name|PahoEndpointBuilder
name|automaticReconnect
parameter_list|(
name|String
name|automaticReconnect
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"automaticReconnect"
argument_list|,
name|automaticReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The URL of the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|brokerUrl (String brokerUrl)
specifier|default
name|PahoEndpointBuilder
name|brokerUrl
parameter_list|(
name|String
name|brokerUrl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"brokerUrl"
argument_list|,
name|brokerUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether the client and server should remember state across          * restarts and reconnects. If set to false both the client and server          * will maintain state across restarts of the client, the server and the          * connection. As state is maintained: Message delivery will be reliable          * meeting the specified QOS even if the client, server or connection          * are restarted. The server will treat a subscription as durable. If          * set to true the client and server will not maintain state across          * restarts of the client, the server or the connection. This means          * Message delivery to the specified QOS cannot be maintained if the          * client, server or connection are restarted The server will treat a          * subscription as non-durable.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|cleanSession (boolean cleanSession)
specifier|default
name|PahoEndpointBuilder
name|cleanSession
parameter_list|(
name|boolean
name|cleanSession
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cleanSession"
argument_list|,
name|cleanSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether the client and server should remember state across          * restarts and reconnects. If set to false both the client and server          * will maintain state across restarts of the client, the server and the          * connection. As state is maintained: Message delivery will be reliable          * meeting the specified QOS even if the client, server or connection          * are restarted. The server will treat a subscription as durable. If          * set to true the client and server will not maintain state across          * restarts of the client, the server or the connection. This means          * Message delivery to the specified QOS cannot be maintained if the          * client, server or connection are restarted The server will treat a          * subscription as non-durable.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|cleanSession (String cleanSession)
specifier|default
name|PahoEndpointBuilder
name|cleanSession
parameter_list|(
name|String
name|cleanSession
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cleanSession"
argument_list|,
name|cleanSession
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * MQTT client identifier. The identifier must be unique.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientId (String clientId)
specifier|default
name|PahoEndpointBuilder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientId"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the connection timeout value. This value, measured in seconds,          * defines the maximum time interval the client will wait for the          * network connection to the MQTT server to be established. The default          * timeout is 30 seconds. A value of 0 disables timeout processing          * meaning the client will wait until the network connection is made          * successfully or fails.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|connectionTimeout (int connectionTimeout)
specifier|default
name|PahoEndpointBuilder
name|connectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the connection timeout value. This value, measured in seconds,          * defines the maximum time interval the client will wait for the          * network connection to the MQTT server to be established. The default          * timeout is 30 seconds. A value of 0 disables timeout processing          * meaning the client will wait until the network connection is made          * successfully or fails.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|connectionTimeout (String connectionTimeout)
specifier|default
name|PahoEndpointBuilder
name|connectionTimeout
parameter_list|(
name|String
name|connectionTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectionTimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Base directory used by file persistence. Will by default use user          * directory.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|filePersistenceDirectory ( String filePersistenceDirectory)
specifier|default
name|PahoEndpointBuilder
name|filePersistenceDirectory
parameter_list|(
name|String
name|filePersistenceDirectory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"filePersistenceDirectory"
argument_list|,
name|filePersistenceDirectory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the keep alive interval. This value, measured in seconds,          * defines the maximum time interval between messages sent or received.          * It enables the client to detect if the server is no longer available,          * without having to wait for the TCP/IP timeout. The client will ensure          * that at least one message travels across the network within each keep          * alive period. In the absence of a data-related message during the          * time period, the client sends a very small ping message, which the          * server will acknowledge. A value of 0 disables keepalive processing          * in the client. The default value is 60 seconds.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|keepAliveInterval (int keepAliveInterval)
specifier|default
name|PahoEndpointBuilder
name|keepAliveInterval
parameter_list|(
name|int
name|keepAliveInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keepAliveInterval"
argument_list|,
name|keepAliveInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the keep alive interval. This value, measured in seconds,          * defines the maximum time interval between messages sent or received.          * It enables the client to detect if the server is no longer available,          * without having to wait for the TCP/IP timeout. The client will ensure          * that at least one message travels across the network within each keep          * alive period. In the absence of a data-related message during the          * time period, the client sends a very small ping message, which the          * server will acknowledge. A value of 0 disables keepalive processing          * in the client. The default value is 60 seconds.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|keepAliveInterval (String keepAliveInterval)
specifier|default
name|PahoEndpointBuilder
name|keepAliveInterval
parameter_list|(
name|String
name|keepAliveInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keepAliveInterval"
argument_list|,
name|keepAliveInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the max inflight. please increase this value in a high traffic          * environment. The default value is 10.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxInflight (int maxInflight)
specifier|default
name|PahoEndpointBuilder
name|maxInflight
parameter_list|(
name|int
name|maxInflight
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxInflight"
argument_list|,
name|maxInflight
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the max inflight. please increase this value in a high traffic          * environment. The default value is 10.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxInflight (String maxInflight)
specifier|default
name|PahoEndpointBuilder
name|maxInflight
parameter_list|(
name|String
name|maxInflight
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxInflight"
argument_list|,
name|maxInflight
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Get the maximum time (in millis) to wait between reconnects.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maxReconnectDelay (int maxReconnectDelay)
specifier|default
name|PahoEndpointBuilder
name|maxReconnectDelay
parameter_list|(
name|int
name|maxReconnectDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxReconnectDelay"
argument_list|,
name|maxReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Get the maximum time (in millis) to wait between reconnects.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maxReconnectDelay (String maxReconnectDelay)
specifier|default
name|PahoEndpointBuilder
name|maxReconnectDelay
parameter_list|(
name|String
name|maxReconnectDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxReconnectDelay"
argument_list|,
name|maxReconnectDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the MQTT version. The default action is to connect with version          * 3.1.1, and to fall back to 3.1 if that fails. Version 3.1.1 or 3.1          * can be selected specifically, with no fall back, by using the          * MQTT_VERSION_3_1_1 or MQTT_VERSION_3_1 options respectively.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|mqttVersion (int mqttVersion)
specifier|default
name|PahoEndpointBuilder
name|mqttVersion
parameter_list|(
name|int
name|mqttVersion
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mqttVersion"
argument_list|,
name|mqttVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the MQTT version. The default action is to connect with version          * 3.1.1, and to fall back to 3.1 if that fails. Version 3.1.1 or 3.1          * can be selected specifically, with no fall back, by using the          * MQTT_VERSION_3_1_1 or MQTT_VERSION_3_1 options respectively.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|mqttVersion (String mqttVersion)
specifier|default
name|PahoEndpointBuilder
name|mqttVersion
parameter_list|(
name|String
name|mqttVersion
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mqttVersion"
argument_list|,
name|mqttVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client persistence to be used - memory or file.          *           * The option is a:          *<code>org.apache.camel.component.paho.PahoPersistence</code> type.          *           * Group: common          */
DECL|method|persistence (PahoPersistence persistence)
specifier|default
name|PahoEndpointBuilder
name|persistence
parameter_list|(
name|PahoPersistence
name|persistence
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"persistence"
argument_list|,
name|persistence
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client persistence to be used - memory or file.          *           * The option will be converted to a          *<code>org.apache.camel.component.paho.PahoPersistence</code> type.          *           * Group: common          */
DECL|method|persistence (String persistence)
specifier|default
name|PahoEndpointBuilder
name|persistence
parameter_list|(
name|String
name|persistence
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"persistence"
argument_list|,
name|persistence
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client quality of service level (0-2).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|qos (int qos)
specifier|default
name|PahoEndpointBuilder
name|qos
parameter_list|(
name|int
name|qos
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"qos"
argument_list|,
name|qos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client quality of service level (0-2).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|qos (String qos)
specifier|default
name|PahoEndpointBuilder
name|qos
parameter_list|(
name|String
name|qos
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"qos"
argument_list|,
name|qos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Retain option.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|retained (boolean retained)
specifier|default
name|PahoEndpointBuilder
name|retained
parameter_list|(
name|boolean
name|retained
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"retained"
argument_list|,
name|retained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Retain option.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|retained (String retained)
specifier|default
name|PahoEndpointBuilder
name|retained
parameter_list|(
name|String
name|retained
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"retained"
argument_list|,
name|retained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a list of one or more serverURIs the client may connect to.          * Multiple servers can be separated by comma. Each serverURI specifies          * the address of a server that the client may connect to. Two types of          * connection are supported tcp:// for a TCP connection and ssl:// for a          * TCP connection secured by SSL/TLS. For example: tcp://localhost:1883          * ssl://localhost:8883 If the port is not specified, it will default to          * 1883 for tcp:// URIs, and 8883 for ssl:// URIs. If serverURIs is set          * then it overrides the serverURI parameter passed in on the          * constructor of the MQTT client. When an attempt to connect is          * initiated the client will start with the first serverURI in the list          * and work through the list until a connection is established with a          * server. If a connection cannot be made to any of the servers then the          * connect attempt fails. Specifying a list of servers that a client may          * connect to has several uses: High Availability and reliable message          * delivery Some MQTT servers support a high availability feature where          * two or more equal MQTT servers share state. An MQTT client can          * connect to any of the equal servers and be assured that messages are          * reliably delivered and durable subscriptions are maintained no matter          * which server the client connects to. The cleansession flag must be          * set to false if durable subscriptions and/or reliable message          * delivery is required. Hunt List A set of servers may be specified          * that are not equal (as in the high availability option). As no state          * is shared across the servers reliable message delivery and durable          * subscriptions are not valid. The cleansession flag must be set to          * true if the hunt list mode is used.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|serverURIs (String serverURIs)
specifier|default
name|PahoEndpointBuilder
name|serverURIs
parameter_list|(
name|String
name|serverURIs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"serverURIs"
argument_list|,
name|serverURIs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|willPayload (String willPayload)
specifier|default
name|PahoEndpointBuilder
name|willPayload
parameter_list|(
name|String
name|willPayload
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willPayload"
argument_list|,
name|willPayload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|willQos (int willQos)
specifier|default
name|PahoEndpointBuilder
name|willQos
parameter_list|(
name|int
name|willQos
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willQos"
argument_list|,
name|willQos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|willQos (String willQos)
specifier|default
name|PahoEndpointBuilder
name|willQos
parameter_list|(
name|String
name|willQos
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willQos"
argument_list|,
name|willQos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|willRetained (boolean willRetained)
specifier|default
name|PahoEndpointBuilder
name|willRetained
parameter_list|(
name|boolean
name|willRetained
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willRetained"
argument_list|,
name|willRetained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|willRetained (String willRetained)
specifier|default
name|PahoEndpointBuilder
name|willRetained
parameter_list|(
name|String
name|willRetained
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willRetained"
argument_list|,
name|willRetained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Last Will and Testament (LWT) for the connection. In the          * event that this client unexpectedly loses its connection to the          * server, the server will publish a message to itself using the          * supplied details. The topic to publish to The byte payload for the          * message. The quality of service to publish the message at (0, 1 or          * 2). Whether or not the message should be retained.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|willTopic (String willTopic)
specifier|default
name|PahoEndpointBuilder
name|willTopic
parameter_list|(
name|String
name|willTopic
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"willTopic"
argument_list|,
name|willTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether SSL HostnameVerifier is enabled or not. The default value is          * true.          *           * The option is a:<code>boolean</code> type.          *           * Group: security          */
DECL|method|httpsHostnameVerificationEnabled ( boolean httpsHostnameVerificationEnabled)
specifier|default
name|PahoEndpointBuilder
name|httpsHostnameVerificationEnabled
parameter_list|(
name|boolean
name|httpsHostnameVerificationEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpsHostnameVerificationEnabled"
argument_list|,
name|httpsHostnameVerificationEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether SSL HostnameVerifier is enabled or not. The default value is          * true.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: security          */
DECL|method|httpsHostnameVerificationEnabled ( String httpsHostnameVerificationEnabled)
specifier|default
name|PahoEndpointBuilder
name|httpsHostnameVerificationEnabled
parameter_list|(
name|String
name|httpsHostnameVerificationEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpsHostnameVerificationEnabled"
argument_list|,
name|httpsHostnameVerificationEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password to be used for authentication against the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|PahoEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SocketFactory to use. This allows an application to apply          * its own policies around the creation of network sockets. If using an          * SSL connection, an SSLSocketFactory can be used to supply          * application-specific security settings.          *           * The option is a:<code>javax.net.SocketFactory</code> type.          *           * Group: security          */
DECL|method|socketFactory (Object socketFactory)
specifier|default
name|PahoEndpointBuilder
name|socketFactory
parameter_list|(
name|Object
name|socketFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"socketFactory"
argument_list|,
name|socketFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SocketFactory to use. This allows an application to apply          * its own policies around the creation of network sockets. If using an          * SSL connection, an SSLSocketFactory can be used to supply          * application-specific security settings.          *           * The option will be converted to a          *<code>javax.net.SocketFactory</code> type.          *           * Group: security          */
DECL|method|socketFactory (String socketFactory)
specifier|default
name|PahoEndpointBuilder
name|socketFactory
parameter_list|(
name|String
name|socketFactory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"socketFactory"
argument_list|,
name|socketFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SSL properties for the connection. Note that these          * properties are only valid if an implementation of the Java Secure          * Socket Extensions (JSSE) is available. These properties are not used          * if a custom SocketFactory has been set. The following properties can          * be used: com.ibm.ssl.protocol One of: SSL, SSLv3, TLS, TLSv1,          * SSL_TLS. com.ibm.ssl.contextProvider Underlying JSSE provider. For          * example IBMJSSE2 or SunJSSE com.ibm.ssl.keyStore The name of the file          * that contains the KeyStore object that you want the KeyManager to          * use. For example /mydir/etc/key.p12 com.ibm.ssl.keyStorePassword The          * password for the KeyStore object that you want the KeyManager to use.          * The password can either be in plain-text, or may be obfuscated using          * the static method: com.ibm.micro.security.Password.obfuscate(char          * password). This obfuscates the password using a simple and insecure          * XOR and Base64 encoding mechanism. Note that this is only a simple          * scrambler to obfuscate clear-text passwords. com.ibm.ssl.keyStoreType          * Type of key store, for example PKCS12, JKS, or JCEKS.          * com.ibm.ssl.keyStoreProvider Key store provider, for example IBMJCE          * or IBMJCEFIPS. com.ibm.ssl.trustStore The name of the file that          * contains the KeyStore object that you want the TrustManager to use.          * com.ibm.ssl.trustStorePassword The password for the TrustStore object          * that you want the TrustManager to use. The password can either be in          * plain-text, or may be obfuscated using the static method:          * com.ibm.micro.security.Password.obfuscate(char password). This          * obfuscates the password using a simple and insecure XOR and Base64          * encoding mechanism. Note that this is only a simple scrambler to          * obfuscate clear-text passwords. com.ibm.ssl.trustStoreType The type          * of KeyStore object that you want the default TrustManager to use.          * Same possible values as keyStoreType. com.ibm.ssl.trustStoreProvider          * Trust store provider, for example IBMJCE or IBMJCEFIPS.          * com.ibm.ssl.enabledCipherSuites A list of which ciphers are enabled.          * Values are dependent on the provider, for example:          * SSL_RSA_WITH_AES_128_CBC_SHA;SSL_RSA_WITH_3DES_EDE_CBC_SHA.          * com.ibm.ssl.keyManager Sets the algorithm that will be used to          * instantiate a KeyManagerFactory object instead of using the default          * algorithm available in the platform. Example values: IbmX509 or          * IBMJ9X509. com.ibm.ssl.trustManager Sets the algorithm that will be          * used to instantiate a TrustManagerFactory object instead of using the          * default algorithm available in the platform. Example values: PKIX or          * IBMJ9X509.          *           * The option is a:<code>java.util.Properties</code> type.          *           * Group: security          */
DECL|method|sslClientProps (Properties sslClientProps)
specifier|default
name|PahoEndpointBuilder
name|sslClientProps
parameter_list|(
name|Properties
name|sslClientProps
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslClientProps"
argument_list|,
name|sslClientProps
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SSL properties for the connection. Note that these          * properties are only valid if an implementation of the Java Secure          * Socket Extensions (JSSE) is available. These properties are not used          * if a custom SocketFactory has been set. The following properties can          * be used: com.ibm.ssl.protocol One of: SSL, SSLv3, TLS, TLSv1,          * SSL_TLS. com.ibm.ssl.contextProvider Underlying JSSE provider. For          * example IBMJSSE2 or SunJSSE com.ibm.ssl.keyStore The name of the file          * that contains the KeyStore object that you want the KeyManager to          * use. For example /mydir/etc/key.p12 com.ibm.ssl.keyStorePassword The          * password for the KeyStore object that you want the KeyManager to use.          * The password can either be in plain-text, or may be obfuscated using          * the static method: com.ibm.micro.security.Password.obfuscate(char          * password). This obfuscates the password using a simple and insecure          * XOR and Base64 encoding mechanism. Note that this is only a simple          * scrambler to obfuscate clear-text passwords. com.ibm.ssl.keyStoreType          * Type of key store, for example PKCS12, JKS, or JCEKS.          * com.ibm.ssl.keyStoreProvider Key store provider, for example IBMJCE          * or IBMJCEFIPS. com.ibm.ssl.trustStore The name of the file that          * contains the KeyStore object that you want the TrustManager to use.          * com.ibm.ssl.trustStorePassword The password for the TrustStore object          * that you want the TrustManager to use. The password can either be in          * plain-text, or may be obfuscated using the static method:          * com.ibm.micro.security.Password.obfuscate(char password). This          * obfuscates the password using a simple and insecure XOR and Base64          * encoding mechanism. Note that this is only a simple scrambler to          * obfuscate clear-text passwords. com.ibm.ssl.trustStoreType The type          * of KeyStore object that you want the default TrustManager to use.          * Same possible values as keyStoreType. com.ibm.ssl.trustStoreProvider          * Trust store provider, for example IBMJCE or IBMJCEFIPS.          * com.ibm.ssl.enabledCipherSuites A list of which ciphers are enabled.          * Values are dependent on the provider, for example:          * SSL_RSA_WITH_AES_128_CBC_SHA;SSL_RSA_WITH_3DES_EDE_CBC_SHA.          * com.ibm.ssl.keyManager Sets the algorithm that will be used to          * instantiate a KeyManagerFactory object instead of using the default          * algorithm available in the platform. Example values: IbmX509 or          * IBMJ9X509. com.ibm.ssl.trustManager Sets the algorithm that will be          * used to instantiate a TrustManagerFactory object instead of using the          * default algorithm available in the platform. Example values: PKIX or          * IBMJ9X509.          *           * The option will be converted to a<code>java.util.Properties</code>          * type.          *           * Group: security          */
DECL|method|sslClientProps (String sslClientProps)
specifier|default
name|PahoEndpointBuilder
name|sslClientProps
parameter_list|(
name|String
name|sslClientProps
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslClientProps"
argument_list|,
name|sslClientProps
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the HostnameVerifier for the SSL connection. Note that it will          * be used after handshake on a connection and you should do actions by          * yourself when hostname is verified error. There is no default          * HostnameVerifier.          *           * The option is a:<code>javax.net.ssl.HostnameVerifier</code> type.          *           * Group: security          */
DECL|method|sslHostnameVerifier ( Object sslHostnameVerifier)
specifier|default
name|PahoEndpointBuilder
name|sslHostnameVerifier
parameter_list|(
name|Object
name|sslHostnameVerifier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslHostnameVerifier"
argument_list|,
name|sslHostnameVerifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the HostnameVerifier for the SSL connection. Note that it will          * be used after handshake on a connection and you should do actions by          * yourself when hostname is verified error. There is no default          * HostnameVerifier.          *           * The option will be converted to a          *<code>javax.net.ssl.HostnameVerifier</code> type.          *           * Group: security          */
DECL|method|sslHostnameVerifier ( String sslHostnameVerifier)
specifier|default
name|PahoEndpointBuilder
name|sslHostnameVerifier
parameter_list|(
name|String
name|sslHostnameVerifier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslHostnameVerifier"
argument_list|,
name|sslHostnameVerifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username to be used for authentication against the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|userName (String userName)
specifier|default
name|PahoEndpointBuilder
name|userName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Paho component.      */
DECL|interface|AdvancedPahoEndpointBuilder
specifier|public
interface|interface
name|AdvancedPahoEndpointBuilder
extends|extends
name|AdvancedPahoEndpointConsumerBuilder
extends|,
name|AdvancedPahoEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|PahoEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|PahoEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedPahoEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedPahoEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing mqtt client.          *           * The option is a:          *<code>org.eclipse.paho.client.mqttv3.MqttClient</code> type.          *           * Group: advanced          */
DECL|method|client (Object client)
specifier|default
name|AdvancedPahoEndpointBuilder
name|client
parameter_list|(
name|Object
name|client
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use an existing mqtt client.          *           * The option will be converted to a          *<code>org.eclipse.paho.client.mqttv3.MqttClient</code> type.          *           * Group: advanced          */
DECL|method|client (String client)
specifier|default
name|AdvancedPahoEndpointBuilder
name|client
parameter_list|(
name|String
name|client
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"client"
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Custom WebSocket Headers for the WebSocket Connection.          *           * The option is a:<code>java.util.Properties</code> type.          *           * Group: advanced          */
DECL|method|customWebSocketHeaders ( Properties customWebSocketHeaders)
specifier|default
name|AdvancedPahoEndpointBuilder
name|customWebSocketHeaders
parameter_list|(
name|Properties
name|customWebSocketHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"customWebSocketHeaders"
argument_list|,
name|customWebSocketHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the Custom WebSocket Headers for the WebSocket Connection.          *           * The option will be converted to a<code>java.util.Properties</code>          * type.          *           * Group: advanced          */
DECL|method|customWebSocketHeaders ( String customWebSocketHeaders)
specifier|default
name|AdvancedPahoEndpointBuilder
name|customWebSocketHeaders
parameter_list|(
name|String
name|customWebSocketHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"customWebSocketHeaders"
argument_list|,
name|customWebSocketHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the time in seconds that the executor service should wait when          * terminating before forcefully terminating. It is not recommended to          * change this value unless you are absolutely sure that you need to.          *           * The option is a:<code>int</code> type.          *           * Group: advanced          */
DECL|method|executorServiceTimeout ( int executorServiceTimeout)
specifier|default
name|AdvancedPahoEndpointBuilder
name|executorServiceTimeout
parameter_list|(
name|int
name|executorServiceTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"executorServiceTimeout"
argument_list|,
name|executorServiceTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the time in seconds that the executor service should wait when          * terminating before forcefully terminating. It is not recommended to          * change this value unless you are absolutely sure that you need to.          *           * The option will be converted to a<code>int</code> type.          *           * Group: advanced          */
DECL|method|executorServiceTimeout ( String executorServiceTimeout)
specifier|default
name|AdvancedPahoEndpointBuilder
name|executorServiceTimeout
parameter_list|(
name|String
name|executorServiceTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"executorServiceTimeout"
argument_list|,
name|executorServiceTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedPahoEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedPahoEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.paho.PahoPersistence</code> enum.      */
DECL|enum|PahoPersistence
enum|enum
name|PahoPersistence
block|{
DECL|enumConstant|FILE
name|FILE
block|,
DECL|enumConstant|MEMORY
name|MEMORY
block|;     }
comment|/**      * Paho (camel-paho)      * Component for communicating with MQTT message brokers using Eclipse Paho      * MQTT Client.      *       * Category: messaging,iot      * Available as of version: 2.16      * Maven coordinates: org.apache.camel:camel-paho      *       * Syntax:<code>paho:topic</code>      *       * Path parameter: topic (required)      * Name of the topic      */
DECL|method|paho (String path)
specifier|default
name|PahoEndpointBuilder
name|paho
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|PahoEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|PahoEndpointBuilder
implements|,
name|AdvancedPahoEndpointBuilder
block|{
specifier|public
name|PahoEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"paho"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|PahoEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

