begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * Component for communicating with MQTT M2M message brokers using Eclipse Paho  * MQTT Client.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|PahoEndpointBuilderFactory
specifier|public
interface|interface
name|PahoEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Paho component.      */
DECL|interface|PahoEndpointConsumerBuilder
specifier|public
interface|interface
name|PahoEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedPahoEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Name of the topic.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|topic (String topic)
specifier|default
name|PahoEndpointConsumerBuilder
name|topic
parameter_list|(
name|String
name|topic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"topic"
argument_list|,
name|topic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client will automatically attempt to reconnect to the server if the          * connection is lost.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoReconnect (boolean autoReconnect)
specifier|default
name|PahoEndpointConsumerBuilder
name|autoReconnect
parameter_list|(
name|boolean
name|autoReconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoReconnect"
argument_list|,
name|autoReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client will automatically attempt to reconnect to the server if the          * connection is lost.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoReconnect (String autoReconnect)
specifier|default
name|PahoEndpointConsumerBuilder
name|autoReconnect
parameter_list|(
name|String
name|autoReconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoReconnect"
argument_list|,
name|autoReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The URL of the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|brokerUrl (String brokerUrl)
specifier|default
name|PahoEndpointConsumerBuilder
name|brokerUrl
parameter_list|(
name|String
name|brokerUrl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"brokerUrl"
argument_list|,
name|brokerUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * MQTT client identifier.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientId (String clientId)
specifier|default
name|PahoEndpointConsumerBuilder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientId"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client connection options.          *           * The option is a:          *<code>org.eclipse.paho.client.mqttv3.MqttConnectOptions</code> type.          *           * Group: common          */
DECL|method|connectOptions (Object connectOptions)
specifier|default
name|PahoEndpointConsumerBuilder
name|connectOptions
parameter_list|(
name|Object
name|connectOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectOptions"
argument_list|,
name|connectOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client connection options.          *           * The option will be converted to a          *<code>org.eclipse.paho.client.mqttv3.MqttConnectOptions</code> type.          *           * Group: common          */
DECL|method|connectOptions (String connectOptions)
specifier|default
name|PahoEndpointConsumerBuilder
name|connectOptions
parameter_list|(
name|String
name|connectOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectOptions"
argument_list|,
name|connectOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Base directory used by the file persistence provider.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|filePersistenceDirectory ( String filePersistenceDirectory)
specifier|default
name|PahoEndpointConsumerBuilder
name|filePersistenceDirectory
parameter_list|(
name|String
name|filePersistenceDirectory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filePersistenceDirectory"
argument_list|,
name|filePersistenceDirectory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password to be used for authentication against the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|password (String password)
specifier|default
name|PahoEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client persistence to be used - memory or file.          *           * The option is a:          *<code>org.apache.camel.component.paho.PahoPersistence</code> type.          *           * Group: common          */
DECL|method|persistence ( PahoPersistence persistence)
specifier|default
name|PahoEndpointConsumerBuilder
name|persistence
parameter_list|(
name|PahoPersistence
name|persistence
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistence"
argument_list|,
name|persistence
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client persistence to be used - memory or file.          *           * The option will be converted to a          *<code>org.apache.camel.component.paho.PahoPersistence</code> type.          *           * Group: common          */
DECL|method|persistence (String persistence)
specifier|default
name|PahoEndpointConsumerBuilder
name|persistence
parameter_list|(
name|String
name|persistence
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistence"
argument_list|,
name|persistence
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client quality of service level (0-2).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|qos (int qos)
specifier|default
name|PahoEndpointConsumerBuilder
name|qos
parameter_list|(
name|int
name|qos
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"qos"
argument_list|,
name|qos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client quality of service level (0-2).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|qos (String qos)
specifier|default
name|PahoEndpointConsumerBuilder
name|qos
parameter_list|(
name|String
name|qos
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"qos"
argument_list|,
name|qos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if you don't want to resolve the MQTT Connect Options from          * registry.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|resolveMqttConnectOptions ( boolean resolveMqttConnectOptions)
specifier|default
name|PahoEndpointConsumerBuilder
name|resolveMqttConnectOptions
parameter_list|(
name|boolean
name|resolveMqttConnectOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resolveMqttConnectOptions"
argument_list|,
name|resolveMqttConnectOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if you don't want to resolve the MQTT Connect Options from          * registry.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|resolveMqttConnectOptions ( String resolveMqttConnectOptions)
specifier|default
name|PahoEndpointConsumerBuilder
name|resolveMqttConnectOptions
parameter_list|(
name|String
name|resolveMqttConnectOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resolveMqttConnectOptions"
argument_list|,
name|resolveMqttConnectOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Retain option.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|retained (boolean retained)
specifier|default
name|PahoEndpointConsumerBuilder
name|retained
parameter_list|(
name|boolean
name|retained
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retained"
argument_list|,
name|retained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Retain option.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|retained (String retained)
specifier|default
name|PahoEndpointConsumerBuilder
name|retained
parameter_list|(
name|String
name|retained
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retained"
argument_list|,
name|retained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username to be used for authentication against the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|userName (String userName)
specifier|default
name|PahoEndpointConsumerBuilder
name|userName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|PahoEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|PahoEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Paho component.      */
DECL|interface|AdvancedPahoEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedPahoEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|PahoEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|PahoEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedPahoEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Paho component.      */
DECL|interface|PahoEndpointProducerBuilder
specifier|public
interface|interface
name|PahoEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedPahoEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedPahoEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Name of the topic.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|topic (String topic)
specifier|default
name|PahoEndpointProducerBuilder
name|topic
parameter_list|(
name|String
name|topic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"topic"
argument_list|,
name|topic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client will automatically attempt to reconnect to the server if the          * connection is lost.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoReconnect (boolean autoReconnect)
specifier|default
name|PahoEndpointProducerBuilder
name|autoReconnect
parameter_list|(
name|boolean
name|autoReconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoReconnect"
argument_list|,
name|autoReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client will automatically attempt to reconnect to the server if the          * connection is lost.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoReconnect (String autoReconnect)
specifier|default
name|PahoEndpointProducerBuilder
name|autoReconnect
parameter_list|(
name|String
name|autoReconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoReconnect"
argument_list|,
name|autoReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The URL of the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|brokerUrl (String brokerUrl)
specifier|default
name|PahoEndpointProducerBuilder
name|brokerUrl
parameter_list|(
name|String
name|brokerUrl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"brokerUrl"
argument_list|,
name|brokerUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * MQTT client identifier.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientId (String clientId)
specifier|default
name|PahoEndpointProducerBuilder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientId"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client connection options.          *           * The option is a:          *<code>org.eclipse.paho.client.mqttv3.MqttConnectOptions</code> type.          *           * Group: common          */
DECL|method|connectOptions (Object connectOptions)
specifier|default
name|PahoEndpointProducerBuilder
name|connectOptions
parameter_list|(
name|Object
name|connectOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectOptions"
argument_list|,
name|connectOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client connection options.          *           * The option will be converted to a          *<code>org.eclipse.paho.client.mqttv3.MqttConnectOptions</code> type.          *           * Group: common          */
DECL|method|connectOptions (String connectOptions)
specifier|default
name|PahoEndpointProducerBuilder
name|connectOptions
parameter_list|(
name|String
name|connectOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectOptions"
argument_list|,
name|connectOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Base directory used by the file persistence provider.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|filePersistenceDirectory ( String filePersistenceDirectory)
specifier|default
name|PahoEndpointProducerBuilder
name|filePersistenceDirectory
parameter_list|(
name|String
name|filePersistenceDirectory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filePersistenceDirectory"
argument_list|,
name|filePersistenceDirectory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password to be used for authentication against the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|password (String password)
specifier|default
name|PahoEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client persistence to be used - memory or file.          *           * The option is a:          *<code>org.apache.camel.component.paho.PahoPersistence</code> type.          *           * Group: common          */
DECL|method|persistence ( PahoPersistence persistence)
specifier|default
name|PahoEndpointProducerBuilder
name|persistence
parameter_list|(
name|PahoPersistence
name|persistence
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistence"
argument_list|,
name|persistence
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client persistence to be used - memory or file.          *           * The option will be converted to a          *<code>org.apache.camel.component.paho.PahoPersistence</code> type.          *           * Group: common          */
DECL|method|persistence (String persistence)
specifier|default
name|PahoEndpointProducerBuilder
name|persistence
parameter_list|(
name|String
name|persistence
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistence"
argument_list|,
name|persistence
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client quality of service level (0-2).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|qos (int qos)
specifier|default
name|PahoEndpointProducerBuilder
name|qos
parameter_list|(
name|int
name|qos
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"qos"
argument_list|,
name|qos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client quality of service level (0-2).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|qos (String qos)
specifier|default
name|PahoEndpointProducerBuilder
name|qos
parameter_list|(
name|String
name|qos
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"qos"
argument_list|,
name|qos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if you don't want to resolve the MQTT Connect Options from          * registry.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|resolveMqttConnectOptions ( boolean resolveMqttConnectOptions)
specifier|default
name|PahoEndpointProducerBuilder
name|resolveMqttConnectOptions
parameter_list|(
name|boolean
name|resolveMqttConnectOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resolveMqttConnectOptions"
argument_list|,
name|resolveMqttConnectOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if you don't want to resolve the MQTT Connect Options from          * registry.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|resolveMqttConnectOptions ( String resolveMqttConnectOptions)
specifier|default
name|PahoEndpointProducerBuilder
name|resolveMqttConnectOptions
parameter_list|(
name|String
name|resolveMqttConnectOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resolveMqttConnectOptions"
argument_list|,
name|resolveMqttConnectOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Retain option.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|retained (boolean retained)
specifier|default
name|PahoEndpointProducerBuilder
name|retained
parameter_list|(
name|boolean
name|retained
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retained"
argument_list|,
name|retained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Retain option.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|retained (String retained)
specifier|default
name|PahoEndpointProducerBuilder
name|retained
parameter_list|(
name|String
name|retained
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retained"
argument_list|,
name|retained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username to be used for authentication against the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|userName (String userName)
specifier|default
name|PahoEndpointProducerBuilder
name|userName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|PahoEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|PahoEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Paho component.      */
DECL|interface|AdvancedPahoEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedPahoEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|PahoEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|PahoEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedPahoEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedPahoEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedPahoEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedPahoEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Paho component.      */
DECL|interface|PahoEndpointBuilder
specifier|public
interface|interface
name|PahoEndpointBuilder
extends|extends
name|PahoEndpointConsumerBuilder
extends|,
name|PahoEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedPahoEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedPahoEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Name of the topic.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|topic (String topic)
specifier|default
name|PahoEndpointBuilder
name|topic
parameter_list|(
name|String
name|topic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"topic"
argument_list|,
name|topic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client will automatically attempt to reconnect to the server if the          * connection is lost.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoReconnect (boolean autoReconnect)
specifier|default
name|PahoEndpointBuilder
name|autoReconnect
parameter_list|(
name|boolean
name|autoReconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoReconnect"
argument_list|,
name|autoReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client will automatically attempt to reconnect to the server if the          * connection is lost.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoReconnect (String autoReconnect)
specifier|default
name|PahoEndpointBuilder
name|autoReconnect
parameter_list|(
name|String
name|autoReconnect
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoReconnect"
argument_list|,
name|autoReconnect
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The URL of the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|brokerUrl (String brokerUrl)
specifier|default
name|PahoEndpointBuilder
name|brokerUrl
parameter_list|(
name|String
name|brokerUrl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"brokerUrl"
argument_list|,
name|brokerUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * MQTT client identifier.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientId (String clientId)
specifier|default
name|PahoEndpointBuilder
name|clientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientId"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client connection options.          *           * The option is a:          *<code>org.eclipse.paho.client.mqttv3.MqttConnectOptions</code> type.          *           * Group: common          */
DECL|method|connectOptions (Object connectOptions)
specifier|default
name|PahoEndpointBuilder
name|connectOptions
parameter_list|(
name|Object
name|connectOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectOptions"
argument_list|,
name|connectOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client connection options.          *           * The option will be converted to a          *<code>org.eclipse.paho.client.mqttv3.MqttConnectOptions</code> type.          *           * Group: common          */
DECL|method|connectOptions (String connectOptions)
specifier|default
name|PahoEndpointBuilder
name|connectOptions
parameter_list|(
name|String
name|connectOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectOptions"
argument_list|,
name|connectOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Base directory used by the file persistence provider.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|filePersistenceDirectory ( String filePersistenceDirectory)
specifier|default
name|PahoEndpointBuilder
name|filePersistenceDirectory
parameter_list|(
name|String
name|filePersistenceDirectory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filePersistenceDirectory"
argument_list|,
name|filePersistenceDirectory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password to be used for authentication against the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|password (String password)
specifier|default
name|PahoEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client persistence to be used - memory or file.          *           * The option is a:          *<code>org.apache.camel.component.paho.PahoPersistence</code> type.          *           * Group: common          */
DECL|method|persistence (PahoPersistence persistence)
specifier|default
name|PahoEndpointBuilder
name|persistence
parameter_list|(
name|PahoPersistence
name|persistence
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistence"
argument_list|,
name|persistence
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client persistence to be used - memory or file.          *           * The option will be converted to a          *<code>org.apache.camel.component.paho.PahoPersistence</code> type.          *           * Group: common          */
DECL|method|persistence (String persistence)
specifier|default
name|PahoEndpointBuilder
name|persistence
parameter_list|(
name|String
name|persistence
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistence"
argument_list|,
name|persistence
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client quality of service level (0-2).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|qos (int qos)
specifier|default
name|PahoEndpointBuilder
name|qos
parameter_list|(
name|int
name|qos
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"qos"
argument_list|,
name|qos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Client quality of service level (0-2).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|qos (String qos)
specifier|default
name|PahoEndpointBuilder
name|qos
parameter_list|(
name|String
name|qos
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"qos"
argument_list|,
name|qos
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if you don't want to resolve the MQTT Connect Options from          * registry.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|resolveMqttConnectOptions ( boolean resolveMqttConnectOptions)
specifier|default
name|PahoEndpointBuilder
name|resolveMqttConnectOptions
parameter_list|(
name|boolean
name|resolveMqttConnectOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resolveMqttConnectOptions"
argument_list|,
name|resolveMqttConnectOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if you don't want to resolve the MQTT Connect Options from          * registry.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|resolveMqttConnectOptions ( String resolveMqttConnectOptions)
specifier|default
name|PahoEndpointBuilder
name|resolveMqttConnectOptions
parameter_list|(
name|String
name|resolveMqttConnectOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"resolveMqttConnectOptions"
argument_list|,
name|resolveMqttConnectOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Retain option.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|retained (boolean retained)
specifier|default
name|PahoEndpointBuilder
name|retained
parameter_list|(
name|boolean
name|retained
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retained"
argument_list|,
name|retained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Retain option.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|retained (String retained)
specifier|default
name|PahoEndpointBuilder
name|retained
parameter_list|(
name|String
name|retained
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"retained"
argument_list|,
name|retained
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Username to be used for authentication against the MQTT broker.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|userName (String userName)
specifier|default
name|PahoEndpointBuilder
name|userName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Paho component.      */
DECL|interface|AdvancedPahoEndpointBuilder
specifier|public
interface|interface
name|AdvancedPahoEndpointBuilder
extends|extends
name|AdvancedPahoEndpointConsumerBuilder
extends|,
name|AdvancedPahoEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|PahoEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|PahoEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedPahoEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedPahoEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedPahoEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedPahoEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.paho.PahoPersistence</code> enum.      */
DECL|enum|PahoPersistence
enum|enum
name|PahoPersistence
block|{
DECL|enumConstant|FILE
name|FILE
block|,
DECL|enumConstant|MEMORY
name|MEMORY
block|;     }
comment|/**      * Paho (camel-paho)      * Component for communicating with MQTT M2M message brokers using Eclipse      * Paho MQTT Client.      *       * Syntax:<code>paho:topic</code>      * Category: messaging,iot      * Available as of version: 2.16      * Maven coordinates: org.apache.camel:camel-paho      */
DECL|method|paho (String path)
specifier|default
name|PahoEndpointBuilder
name|paho
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|PahoEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|PahoEndpointBuilder
implements|,
name|AdvancedPahoEndpointBuilder
block|{
specifier|public
name|PahoEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"paho"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|PahoEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

