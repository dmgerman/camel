begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_comment
comment|/**  * To call external HTTP services using Async Http Client.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|AhcEndpointBuilderFactory
specifier|public
interface|interface
name|AhcEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint for the AHC component.      */
DECL|interface|AhcEndpointBuilder
specifier|public
interface|interface
name|AhcEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedAhcEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedAhcEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The URI to use such as http://hostname:port/path.          * The option is a<code>java.net.URI</code> type.          * @group producer          */
DECL|method|httpUri (URI httpUri)
specifier|default
name|AhcEndpointBuilder
name|httpUri
parameter_list|(
name|URI
name|httpUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpUri"
argument_list|,
name|httpUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The URI to use such as http://hostname:port/path.          * The option will be converted to a<code>java.net.URI</code> type.          * @group producer          */
DECL|method|httpUri (String httpUri)
specifier|default
name|AhcEndpointBuilder
name|httpUri
parameter_list|(
name|String
name|httpUri
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpUri"
argument_list|,
name|httpUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, then the Exchange.HTTP_URI header is ignored,          * and use the endpoint's URI for request. You may also set the          * throwExceptionOnFailure to be false to let the AhcProducer send all          * the fault response back.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|bridgeEndpoint (boolean bridgeEndpoint)
specifier|default
name|AhcEndpointBuilder
name|bridgeEndpoint
parameter_list|(
name|boolean
name|bridgeEndpoint
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeEndpoint"
argument_list|,
name|bridgeEndpoint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, then the Exchange.HTTP_URI header is ignored,          * and use the endpoint's URI for request. You may also set the          * throwExceptionOnFailure to be false to let the AhcProducer send all          * the fault response back.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|bridgeEndpoint (String bridgeEndpoint)
specifier|default
name|AhcEndpointBuilder
name|bridgeEndpoint
parameter_list|(
name|String
name|bridgeEndpoint
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeEndpoint"
argument_list|,
name|bridgeEndpoint
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The initial in-memory buffer size used when transferring data between          * Camel and AHC Client.          * The option is a<code>int</code> type.          * @group producer          */
DECL|method|bufferSize (int bufferSize)
specifier|default
name|AhcEndpointBuilder
name|bufferSize
parameter_list|(
name|int
name|bufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bufferSize"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The initial in-memory buffer size used when transferring data between          * Camel and AHC Client.          * The option will be converted to a<code>int</code> type.          * @group producer          */
DECL|method|bufferSize (String bufferSize)
specifier|default
name|AhcEndpointBuilder
name|bufferSize
parameter_list|(
name|String
name|bufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bufferSize"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option is a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group producer          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AhcEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group producer          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AhcEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to disable throwing the AhcOperationFailedException in case of          * failed responses from the remote server. This allows you to get all          * responses regardless of the HTTP status code.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|throwExceptionOnFailure ( boolean throwExceptionOnFailure)
specifier|default
name|AhcEndpointBuilder
name|throwExceptionOnFailure
parameter_list|(
name|boolean
name|throwExceptionOnFailure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"throwExceptionOnFailure"
argument_list|,
name|throwExceptionOnFailure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to disable throwing the AhcOperationFailedException in case of          * failed responses from the remote server. This allows you to get all          * responses regardless of the HTTP status code.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|throwExceptionOnFailure ( String throwExceptionOnFailure)
specifier|default
name|AhcEndpointBuilder
name|throwExceptionOnFailure
parameter_list|(
name|String
name|throwExceptionOnFailure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"throwExceptionOnFailure"
argument_list|,
name|throwExceptionOnFailure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled and an Exchange failed processing on the consumer side,          * and if the caused Exception was send back serialized in the response          * as a application/x-java-serialized-object content type (for example          * using Jetty or Servlet Camel components). On the producer side the          * exception will be deserialized and thrown as is, instead of the          * AhcOperationFailedException. The caused exception is required to be          * serialized. This is by default turned off. If you enable this then be          * aware that Java will deserialize the incoming data from the request          * to Java and that can be a potential security risk.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|transferException (boolean transferException)
specifier|default
name|AhcEndpointBuilder
name|transferException
parameter_list|(
name|boolean
name|transferException
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled and an Exchange failed processing on the consumer side,          * and if the caused Exception was send back serialized in the response          * as a application/x-java-serialized-object content type (for example          * using Jetty or Servlet Camel components). On the producer side the          * exception will be deserialized and thrown as is, instead of the          * AhcOperationFailedException. The caused exception is required to be          * serialized. This is by default turned off. If you enable this then be          * aware that Java will deserialize the incoming data from the request          * to Java and that can be a potential security risk.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|transferException (String transferException)
specifier|default
name|AhcEndpointBuilder
name|transferException
parameter_list|(
name|String
name|transferException
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a org.apache.camel.support.jsse.SSLContextParameters in          * the Registry. This reference overrides any configured          * SSLContextParameters at the component level. See Using the JSSE          * Configuration Utility. Note that configuring this option will          * override any SSL/TLS configuration options provided through the          * clientConfig option at the endpoint or component level.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|AhcEndpointBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a org.apache.camel.support.jsse.SSLContextParameters in          * the Registry. This reference overrides any configured          * SSLContextParameters at the component level. See Using the JSSE          * Configuration Utility. Note that configuring this option will          * override any SSL/TLS configuration options provided through the          * clientConfig option at the endpoint or component level.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|AhcEndpointBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the AHC component.      */
DECL|interface|AdvancedAhcEndpointBuilder
specifier|public
interface|interface
name|AdvancedAhcEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|AhcEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|AhcEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedAhcEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedAhcEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom AhcBinding which allows to control how to bind          * between AHC and Camel.          * The option is a          *<code>org.apache.camel.component.ahc.AhcBinding</code> type.          * @group advanced          */
DECL|method|binding (Object binding)
specifier|default
name|AdvancedAhcEndpointBuilder
name|binding
parameter_list|(
name|Object
name|binding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"binding"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom AhcBinding which allows to control how to bind          * between AHC and Camel.          * The option will be converted to a          *<code>org.apache.camel.component.ahc.AhcBinding</code> type.          * @group advanced          */
DECL|method|binding (String binding)
specifier|default
name|AdvancedAhcEndpointBuilder
name|binding
parameter_list|(
name|String
name|binding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"binding"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the AsyncHttpClient to use a custom          * com.ning.http.client.AsyncHttpClientConfig instance.          * The option is a          *<code>org.asynchttpclient.AsyncHttpClientConfig</code> type.          * @group advanced          */
DECL|method|clientConfig (Object clientConfig)
specifier|default
name|AdvancedAhcEndpointBuilder
name|clientConfig
parameter_list|(
name|Object
name|clientConfig
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientConfig"
argument_list|,
name|clientConfig
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the AsyncHttpClient to use a custom          * com.ning.http.client.AsyncHttpClientConfig instance.          * The option will be converted to a          *<code>org.asynchttpclient.AsyncHttpClientConfig</code> type.          * @group advanced          */
DECL|method|clientConfig (String clientConfig)
specifier|default
name|AdvancedAhcEndpointBuilder
name|clientConfig
parameter_list|(
name|String
name|clientConfig
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientConfig"
argument_list|,
name|clientConfig
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the AsyncHttpClientConfig using the key/values from the          * Map.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          * @group advanced          */
DECL|method|clientConfigOptions ( Map<String, Object> clientConfigOptions)
specifier|default
name|AdvancedAhcEndpointBuilder
name|clientConfigOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|clientConfigOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientConfigOptions"
argument_list|,
name|clientConfigOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the AsyncHttpClientConfig using the key/values from the          * Map.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          * @group advanced          */
DECL|method|clientConfigOptions ( String clientConfigOptions)
specifier|default
name|AdvancedAhcEndpointBuilder
name|clientConfigOptions
parameter_list|(
name|String
name|clientConfigOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientConfigOptions"
argument_list|,
name|clientConfigOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedAhcEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedAhcEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the AsyncHttpClientConfig Realm using the key/values          * from the Map.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          * @group security          */
DECL|method|clientConfigRealmOptions ( Map<String, Object> clientConfigRealmOptions)
specifier|default
name|AdvancedAhcEndpointBuilder
name|clientConfigRealmOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|clientConfigRealmOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientConfigRealmOptions"
argument_list|,
name|clientConfigRealmOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the AsyncHttpClientConfig Realm using the key/values          * from the Map.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          * @group security          */
DECL|method|clientConfigRealmOptions ( String clientConfigRealmOptions)
specifier|default
name|AdvancedAhcEndpointBuilder
name|clientConfigRealmOptions
parameter_list|(
name|String
name|clientConfigRealmOptions
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"clientConfigRealmOptions"
argument_list|,
name|clientConfigRealmOptions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * To call external HTTP services using Async Http Client. Creates a builder      * to build endpoints for the AHC component.      */
DECL|method|ahc (String path)
specifier|default
name|AhcEndpointBuilder
name|ahc
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|AhcEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|AhcEndpointBuilder
implements|,
name|AdvancedAhcEndpointBuilder
block|{
specifier|public
name|AhcEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"ahc"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|AhcEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

