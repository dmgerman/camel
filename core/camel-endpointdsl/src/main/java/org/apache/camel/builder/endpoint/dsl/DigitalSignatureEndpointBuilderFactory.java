begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_comment
comment|/**  * The crypto component is used for signing and verifying exchanges using the  * Signature Service of the Java Cryptographic Extension (JCE).  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|DigitalSignatureEndpointBuilderFactory
specifier|public
interface|interface
name|DigitalSignatureEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint for the Crypto (JCE) component.      */
DECL|interface|DigitalSignatureEndpointBuilder
specifier|public
interface|interface
name|DigitalSignatureEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedDigitalSignatureEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedDigitalSignatureEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets the JCE name of the Algorithm that should be used for the          * signer.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|algorithm (String algorithm)
specifier|default
name|DigitalSignatureEndpointBuilder
name|algorithm
parameter_list|(
name|String
name|algorithm
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"algorithm"
argument_list|,
name|algorithm
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the alias used to query the KeyStore for keys and {link          * java.security.cert.Certificate Certificates} to be used in signing          * and verifying exchanges. This value can be provided at runtime via          * the message header          * org.apache.camel.component.crypto.DigitalSignatureConstants#KEYSTORE_ALIAS.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|alias (String alias)
specifier|default
name|DigitalSignatureEndpointBuilder
name|alias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"alias"
argument_list|,
name|alias
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the reference name for a PrivateKey that can be found in the          * registry.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|certificateName ( String certificateName)
specifier|default
name|DigitalSignatureEndpointBuilder
name|certificateName
parameter_list|(
name|String
name|certificateName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"certificateName"
argument_list|,
name|certificateName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the KeyStore that can contain keys and Certficates for use in          * signing and verifying exchanges. A KeyStore is typically used with an          * alias, either one supplied in the Route definition or dynamically via          * the message header CamelSignatureKeyStoreAlias. If no alias is          * supplied and there is only a single entry in the Keystore, then this          * single entry will be used.          *           * The option is a:<code>java.security.KeyStore</code> type.          *           * Group: producer          */
DECL|method|keystore (KeyStore keystore)
specifier|default
name|DigitalSignatureEndpointBuilder
name|keystore
parameter_list|(
name|KeyStore
name|keystore
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keystore"
argument_list|,
name|keystore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the KeyStore that can contain keys and Certficates for use in          * signing and verifying exchanges. A KeyStore is typically used with an          * alias, either one supplied in the Route definition or dynamically via          * the message header CamelSignatureKeyStoreAlias. If no alias is          * supplied and there is only a single entry in the Keystore, then this          * single entry will be used.          *           * The option will be converted to a<code>java.security.KeyStore</code>          * type.          *           * Group: producer          */
DECL|method|keystore (String keystore)
specifier|default
name|DigitalSignatureEndpointBuilder
name|keystore
parameter_list|(
name|String
name|keystore
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keystore"
argument_list|,
name|keystore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the reference name for a Keystore that can be found in the          * registry.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|keystoreName (String keystoreName)
specifier|default
name|DigitalSignatureEndpointBuilder
name|keystoreName
parameter_list|(
name|String
name|keystoreName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keystoreName"
argument_list|,
name|keystoreName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|DigitalSignatureEndpointBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|DigitalSignatureEndpointBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the PrivateKey that should be used to sign the exchange.          *           * The option is a:<code>java.security.PrivateKey</code> type.          *           * Group: producer          */
DECL|method|privateKey (PrivateKey privateKey)
specifier|default
name|DigitalSignatureEndpointBuilder
name|privateKey
parameter_list|(
name|PrivateKey
name|privateKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"privateKey"
argument_list|,
name|privateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the PrivateKey that should be used to sign the exchange.          *           * The option will be converted to a          *<code>java.security.PrivateKey</code> type.          *           * Group: producer          */
DECL|method|privateKey (String privateKey)
specifier|default
name|DigitalSignatureEndpointBuilder
name|privateKey
parameter_list|(
name|String
name|privateKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"privateKey"
argument_list|,
name|privateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the reference name for a PrivateKey that can be found in the          * registry.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|privateKeyName ( String privateKeyName)
specifier|default
name|DigitalSignatureEndpointBuilder
name|privateKeyName
parameter_list|(
name|String
name|privateKeyName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"privateKeyName"
argument_list|,
name|privateKeyName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the id of the security provider that provides the configured          * Signature algorithm.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|provider (String provider)
specifier|default
name|DigitalSignatureEndpointBuilder
name|provider
parameter_list|(
name|String
name|provider
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"provider"
argument_list|,
name|provider
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * references that should be resolved when the context changes.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|publicKeyName ( String publicKeyName)
specifier|default
name|DigitalSignatureEndpointBuilder
name|publicKeyName
parameter_list|(
name|String
name|publicKeyName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"publicKeyName"
argument_list|,
name|publicKeyName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the reference name for a SecureRandom that can be found in the          * registry.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|secureRandomName ( String secureRandomName)
specifier|default
name|DigitalSignatureEndpointBuilder
name|secureRandomName
parameter_list|(
name|String
name|secureRandomName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"secureRandomName"
argument_list|,
name|secureRandomName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the name of the message header that should be used to store the          * base64 encoded signature. This defaults to 'CamelDigitalSignature'.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|signatureHeaderName ( String signatureHeaderName)
specifier|default
name|DigitalSignatureEndpointBuilder
name|signatureHeaderName
parameter_list|(
name|String
name|signatureHeaderName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"signatureHeaderName"
argument_list|,
name|signatureHeaderName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the password used to access an aliased PrivateKey in the          * KeyStore.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|DigitalSignatureEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Crypto (JCE) component.      */
DECL|interface|AdvancedDigitalSignatureEndpointBuilder
specifier|public
interface|interface
name|AdvancedDigitalSignatureEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|DigitalSignatureEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|DigitalSignatureEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedDigitalSignatureEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedDigitalSignatureEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the size of the buffer used to read in the Exchange payload data.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: advanced          */
DECL|method|bufferSize ( Integer bufferSize)
specifier|default
name|AdvancedDigitalSignatureEndpointBuilder
name|bufferSize
parameter_list|(
name|Integer
name|bufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bufferSize"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the size of the buffer used to read in the Exchange payload data.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: advanced          */
DECL|method|bufferSize ( String bufferSize)
specifier|default
name|AdvancedDigitalSignatureEndpointBuilder
name|bufferSize
parameter_list|(
name|String
name|bufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bufferSize"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the Certificate that should be used to verify the signature in          * the exchange based on its payload.          *           * The option is a:<code>java.security.cert.Certificate</code> type.          *           * Group: advanced          */
DECL|method|certificate ( Certificate certificate)
specifier|default
name|AdvancedDigitalSignatureEndpointBuilder
name|certificate
parameter_list|(
name|Certificate
name|certificate
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"certificate"
argument_list|,
name|certificate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the Certificate that should be used to verify the signature in          * the exchange based on its payload.          *           * The option will be converted to a          *<code>java.security.cert.Certificate</code> type.          *           * Group: advanced          */
DECL|method|certificate ( String certificate)
specifier|default
name|AdvancedDigitalSignatureEndpointBuilder
name|certificate
parameter_list|(
name|String
name|certificate
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"certificate"
argument_list|,
name|certificate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Determines if the Signature specific headers be cleared after signing          * and verification. Defaults to true, and should only be made otherwise          * at your extreme peril as vital private information such as Keys and          * passwords may escape if unset.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|clearHeaders ( boolean clearHeaders)
specifier|default
name|AdvancedDigitalSignatureEndpointBuilder
name|clearHeaders
parameter_list|(
name|boolean
name|clearHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clearHeaders"
argument_list|,
name|clearHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Determines if the Signature specific headers be cleared after signing          * and verification. Defaults to true, and should only be made otherwise          * at your extreme peril as vital private information such as Keys and          * passwords may escape if unset.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|clearHeaders ( String clearHeaders)
specifier|default
name|AdvancedDigitalSignatureEndpointBuilder
name|clearHeaders
parameter_list|(
name|String
name|clearHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clearHeaders"
argument_list|,
name|clearHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the KeyStore that can contain keys and Certficates for use in          * signing and verifying exchanges based on the given          * KeyStoreParameters. A KeyStore is typically used with an alias,          * either one supplied in the Route definition or dynamically via the          * message header CamelSignatureKeyStoreAlias. If no alias is supplied          * and there is only a single entry in the Keystore, then this single          * entry will be used.          *           * The option is a:          *<code>org.apache.camel.support.jsse.KeyStoreParameters</code> type.          *           * Group: advanced          */
DECL|method|keyStoreParameters ( Object keyStoreParameters)
specifier|default
name|AdvancedDigitalSignatureEndpointBuilder
name|keyStoreParameters
parameter_list|(
name|Object
name|keyStoreParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyStoreParameters"
argument_list|,
name|keyStoreParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the KeyStore that can contain keys and Certficates for use in          * signing and verifying exchanges based on the given          * KeyStoreParameters. A KeyStore is typically used with an alias,          * either one supplied in the Route definition or dynamically via the          * message header CamelSignatureKeyStoreAlias. If no alias is supplied          * and there is only a single entry in the Keystore, then this single          * entry will be used.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.KeyStoreParameters</code> type.          *           * Group: advanced          */
DECL|method|keyStoreParameters ( String keyStoreParameters)
specifier|default
name|AdvancedDigitalSignatureEndpointBuilder
name|keyStoreParameters
parameter_list|(
name|String
name|keyStoreParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyStoreParameters"
argument_list|,
name|keyStoreParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the PublicKey that should be used to verify the signature in the          * exchange.          *           * The option is a:<code>java.security.PublicKey</code> type.          *           * Group: advanced          */
DECL|method|publicKey ( PublicKey publicKey)
specifier|default
name|AdvancedDigitalSignatureEndpointBuilder
name|publicKey
parameter_list|(
name|PublicKey
name|publicKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"publicKey"
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the PublicKey that should be used to verify the signature in the          * exchange.          *           * The option will be converted to a          *<code>java.security.PublicKey</code> type.          *           * Group: advanced          */
DECL|method|publicKey ( String publicKey)
specifier|default
name|AdvancedDigitalSignatureEndpointBuilder
name|publicKey
parameter_list|(
name|String
name|publicKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"publicKey"
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the SecureRandom used to initialize the Signature service.          *           * The option is a:<code>java.security.SecureRandom</code> type.          *           * Group: advanced          */
DECL|method|secureRandom ( SecureRandom secureRandom)
specifier|default
name|AdvancedDigitalSignatureEndpointBuilder
name|secureRandom
parameter_list|(
name|SecureRandom
name|secureRandom
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"secureRandom"
argument_list|,
name|secureRandom
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the SecureRandom used to initialize the Signature service.          *           * The option will be converted to a          *<code>java.security.SecureRandom</code> type.          *           * Group: advanced          */
DECL|method|secureRandom ( String secureRandom)
specifier|default
name|AdvancedDigitalSignatureEndpointBuilder
name|secureRandom
parameter_list|(
name|String
name|secureRandom
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"secureRandom"
argument_list|,
name|secureRandom
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedDigitalSignatureEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedDigitalSignatureEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Crypto (JCE) (camel-crypto)      * The crypto component is used for signing and verifying exchanges using      * the Signature Service of the Java Cryptographic Extension (JCE).      *       * Category: security,transformation      * Since: 2.3      * Maven coordinates: org.apache.camel:camel-crypto      *       * Syntax:<code>crypto:cryptoOperation:name</code>      *       * Path parameter: cryptoOperation (required)      * Set the Crypto operation from that supplied after the crypto scheme in      * the endpoint uri e.g. crypto:sign sets sign as the operation.      * The value can be one of: sign, verify      *       * Path parameter: name (required)      * The logical name of this operation.      */
DECL|method|crypto (String path)
specifier|default
name|DigitalSignatureEndpointBuilder
name|crypto
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|DigitalSignatureEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|DigitalSignatureEndpointBuilder
implements|,
name|AdvancedDigitalSignatureEndpointBuilder
block|{
specifier|public
name|DigitalSignatureEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"crypto"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DigitalSignatureEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

