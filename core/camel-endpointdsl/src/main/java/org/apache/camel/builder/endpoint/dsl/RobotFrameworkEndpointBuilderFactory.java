begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PollingConsumerPollStrategy
import|;
end_import

begin_comment
comment|/**  * Represents a RobotFramework endpoint.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|RobotFrameworkEndpointBuilderFactory
specifier|public
interface|interface
name|RobotFrameworkEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Robot Framework component.      */
DECL|interface|RobotFrameworkEndpointConsumerBuilder
specifier|public
interface|interface
name|RobotFrameworkEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedRobotFrameworkEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedRobotFrameworkEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * A text file to read more arguments from.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|argumentFile ( File argumentFile)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|argumentFile
parameter_list|(
name|File
name|argumentFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"argumentFile"
argument_list|,
name|argumentFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A text file to read more arguments from.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|argumentFile ( String argumentFile)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|argumentFile
parameter_list|(
name|String
name|argumentFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"argumentFile"
argument_list|,
name|argumentFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Creates combined statistics based on tags. Use the format tags:title          * List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|combinedTagStats ( String combinedTagStats)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|combinedTagStats
parameter_list|(
name|String
name|combinedTagStats
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"combinedTagStats"
argument_list|,
name|combinedTagStats
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to use resource content cache or not.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|contentCache ( boolean contentCache)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|contentCache
parameter_list|(
name|boolean
name|contentCache
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentCache"
argument_list|,
name|contentCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to use resource content cache or not.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|contentCache ( String contentCache)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|contentCache
parameter_list|(
name|String
name|contentCache
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentCache"
argument_list|,
name|contentCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Tests that have the given tags are considered critical. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|criticalTags ( String criticalTags)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|criticalTags
parameter_list|(
name|String
name|criticalTags
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"criticalTags"
argument_list|,
name|criticalTags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A debug file that is written during execution.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|debugFile (File debugFile)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|debugFile
parameter_list|(
name|File
name|debugFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"debugFile"
argument_list|,
name|debugFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A debug file that is written during execution.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|debugFile (String debugFile)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|debugFile
parameter_list|(
name|String
name|debugFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"debugFile"
argument_list|,
name|debugFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the documentation of the top-level tests suites.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|document (String document)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|document
parameter_list|(
name|String
name|document
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"document"
argument_list|,
name|document
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets dryrun mode on use. In the dry run mode tests are run without          * executing keywords originating from test libraries. Useful for          * validating test data syntax.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|dryrun (boolean dryrun)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|dryrun
parameter_list|(
name|boolean
name|dryrun
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dryrun"
argument_list|,
name|dryrun
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets dryrun mode on use. In the dry run mode tests are run without          * executing keywords originating from test libraries. Useful for          * validating test data syntax.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|dryrun (String dryrun)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|dryrun
parameter_list|(
name|String
name|dryrun
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dryrun"
argument_list|,
name|dryrun
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Selects the tests cases by tags. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|excludes (String excludes)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|excludes
parameter_list|(
name|String
name|excludes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"excludes"
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets robot to stop execution immediately if a critical test fails.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|exitOnFailure ( boolean exitOnFailure)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|exitOnFailure
parameter_list|(
name|boolean
name|exitOnFailure
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exitOnFailure"
argument_list|,
name|exitOnFailure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets robot to stop execution immediately if a critical test fails.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|exitOnFailure ( String exitOnFailure)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|exitOnFailure
parameter_list|(
name|String
name|exitOnFailure
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exitOnFailure"
argument_list|,
name|exitOnFailure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Selects the tests cases by tags. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|includes (String includes)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|includes
parameter_list|(
name|String
name|includes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"includes"
argument_list|,
name|includes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a single listener for monitoring tests execution.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|listener (String listener)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|listener
parameter_list|(
name|String
name|listener
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"listener"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets multiple listeners for monitoring tests execution. Use the          * format ListenerWithArgs:arg1:arg2 or simply ListenerWithoutArgs List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|listeners (String listeners)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|listeners
parameter_list|(
name|String
name|listeners
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"listeners"
argument_list|,
name|listeners
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated log file.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|log (File log)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|log
parameter_list|(
name|File
name|log
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"log"
argument_list|,
name|log
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated log file.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|log (String log)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|log
parameter_list|(
name|String
name|log
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"log"
argument_list|,
name|log
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the threshold level for logging.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|logLevel (String logLevel)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|logLevel
parameter_list|(
name|String
name|logLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"logLevel"
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a title for the generated tests log.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|logTitle (String logTitle)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|logTitle
parameter_list|(
name|String
name|logTitle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"logTitle"
argument_list|,
name|logTitle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets free metadata for the top level tests suites. comma seperated          * list of string resulting as List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|metadata (String metadata)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|metadata
parameter_list|(
name|String
name|metadata
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"metadata"
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Using ANSI colors in console. Normally colors work in unixes but not          * in Windows. Default is 'on'. 'on' - use colors in unixes but not in          * Windows 'off' - never use colors 'force' - always use colors (also in          * Windows).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|monitorColors ( String monitorColors)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|monitorColors
parameter_list|(
name|String
name|monitorColors
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"monitorColors"
argument_list|,
name|monitorColors
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Width of the monitor output. Default is 78.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|monitorWidth ( String monitorWidth)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|monitorWidth
parameter_list|(
name|String
name|monitorWidth
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"monitorWidth"
argument_list|,
name|monitorWidth
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of the top-level tests suites.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|name (String name)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Tests that have the given tags are not critical. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|nonCriticalTags ( String nonCriticalTags)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|nonCriticalTags
parameter_list|(
name|String
name|nonCriticalTags
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nonCriticalTags"
argument_list|,
name|nonCriticalTags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, sets the return code to zero regardless of failures in test          * cases. Error codes are returned normally.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|noStatusReturnCode ( boolean noStatusReturnCode)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|noStatusReturnCode
parameter_list|(
name|boolean
name|noStatusReturnCode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"noStatusReturnCode"
argument_list|,
name|noStatusReturnCode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, sets the return code to zero regardless of failures in test          * cases. Error codes are returned normally.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|noStatusReturnCode ( String noStatusReturnCode)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|noStatusReturnCode
parameter_list|(
name|String
name|noStatusReturnCode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"noStatusReturnCode"
argument_list|,
name|noStatusReturnCode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated output file.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|output (File output)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|output
parameter_list|(
name|File
name|output
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"output"
argument_list|,
name|output
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated output file.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|output (String output)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|output
parameter_list|(
name|String
name|output
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"output"
argument_list|,
name|output
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures where generated reports are to be placed.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|outputDirectory ( File outputDirectory)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|outputDirectory
parameter_list|(
name|File
name|outputDirectory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputDirectory"
argument_list|,
name|outputDirectory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures where generated reports are to be placed.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|outputDirectory ( String outputDirectory)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|outputDirectory
parameter_list|(
name|String
name|outputDirectory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputDirectory"
argument_list|,
name|outputDirectory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the test execution order to be randomized. Valid values are all,          * suite, and test.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|randomize (String randomize)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|randomize
parameter_list|(
name|String
name|randomize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"randomize"
argument_list|,
name|randomize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated report file.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|report (File report)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|report
parameter_list|(
name|File
name|report
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"report"
argument_list|,
name|report
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated report file.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|report (String report)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|report
parameter_list|(
name|String
name|report
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"report"
argument_list|,
name|report
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets background colors for the generated report and summary.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|reportBackground ( String reportBackground)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|reportBackground
parameter_list|(
name|String
name|reportBackground
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reportBackground"
argument_list|,
name|reportBackground
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a title for the generated tests report.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|reportTitle ( String reportTitle)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|reportTitle
parameter_list|(
name|String
name|reportTitle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reportTitle"
argument_list|,
name|reportTitle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Executes tests also if the top level test suite is empty. Useful e.g.          * with --include/--exclude when it is not an error that no test matches          * the condition.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|runEmptySuite ( boolean runEmptySuite)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|runEmptySuite
parameter_list|(
name|boolean
name|runEmptySuite
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runEmptySuite"
argument_list|,
name|runEmptySuite
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Executes tests also if the top level test suite is empty. Useful e.g.          * with --include/--exclude when it is not an error that no test matches          * the condition.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|runEmptySuite ( String runEmptySuite)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|runEmptySuite
parameter_list|(
name|String
name|runEmptySuite
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runEmptySuite"
argument_list|,
name|runEmptySuite
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Re-run failed tests, based on output.xml file.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|runFailed (File runFailed)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|runFailed
parameter_list|(
name|File
name|runFailed
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runFailed"
argument_list|,
name|runFailed
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Re-run failed tests, based on output.xml file.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|runFailed (String runFailed)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|runFailed
parameter_list|(
name|String
name|runFailed
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runFailed"
argument_list|,
name|runFailed
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the execution mode for this tests run. Note that this setting          * has been deprecated in Robot Framework 2.8. Use separate dryryn,          * skipTeardownOnExit, exitOnFailure, and randomize settings instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|runMode (String runMode)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|runMode
parameter_list|(
name|String
name|runMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runMode"
argument_list|,
name|runMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether the teardowns are skipped if the test execution is          * prematurely stopped.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipTeardownOnExit ( boolean skipTeardownOnExit)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|skipTeardownOnExit
parameter_list|(
name|boolean
name|skipTeardownOnExit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"skipTeardownOnExit"
argument_list|,
name|skipTeardownOnExit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether the teardowns are skipped if the test execution is          * prematurely stopped.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipTeardownOnExit ( String skipTeardownOnExit)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|skipTeardownOnExit
parameter_list|(
name|String
name|skipTeardownOnExit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"skipTeardownOnExit"
argument_list|,
name|skipTeardownOnExit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Splits output and log files.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|splitOutputs ( String splitOutputs)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|splitOutputs
parameter_list|(
name|String
name|splitOutputs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"splitOutputs"
argument_list|,
name|splitOutputs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Selects the tests suites by name. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|suites (String suites)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|suites
parameter_list|(
name|String
name|suites
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"suites"
argument_list|,
name|suites
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines how many levels to show in the Statistics by Suite table in          * outputs.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|suiteStatLevel ( String suiteStatLevel)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|suiteStatLevel
parameter_list|(
name|String
name|suiteStatLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"suiteStatLevel"
argument_list|,
name|suiteStatLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a title for the generated summary report.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|summaryTitle ( String summaryTitle)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|summaryTitle
parameter_list|(
name|String
name|summaryTitle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"summaryTitle"
argument_list|,
name|summaryTitle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Adds documentation to the specified tags. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tagDocs (String tagDocs)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|tagDocs
parameter_list|(
name|String
name|tagDocs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tagDocs"
argument_list|,
name|tagDocs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the tags(s) to all executed tests cases. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tags (String tags)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|tags
parameter_list|(
name|String
name|tags
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tags"
argument_list|,
name|tags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Excludes these tags from the Statistics by Tag and Test Details by          * Tag tables in outputs. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tagStatExcludes ( String tagStatExcludes)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|tagStatExcludes
parameter_list|(
name|String
name|tagStatExcludes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tagStatExcludes"
argument_list|,
name|tagStatExcludes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Includes only these tags in the Statistics by Tag and Test Details by          * Tag tables in outputs. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tagStatIncludes ( String tagStatIncludes)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|tagStatIncludes
parameter_list|(
name|String
name|tagStatIncludes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tagStatIncludes"
argument_list|,
name|tagStatIncludes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Adds external links to the Statistics by Tag table in outputs. Use          * the format pattern:link:title List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tagStatLinks ( String tagStatLinks)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|tagStatLinks
parameter_list|(
name|String
name|tagStatLinks
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tagStatLinks"
argument_list|,
name|tagStatLinks
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Selects the tests cases by name. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tests (String tests)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|tests
parameter_list|(
name|String
name|tests
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tests"
argument_list|,
name|tests
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Adds a timestamp to all output files.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|timestampOutputs ( boolean timestampOutputs)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|timestampOutputs
parameter_list|(
name|boolean
name|timestampOutputs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timestampOutputs"
argument_list|,
name|timestampOutputs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Adds a timestamp to all output files.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|timestampOutputs ( String timestampOutputs)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|timestampOutputs
parameter_list|(
name|String
name|timestampOutputs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timestampOutputs"
argument_list|,
name|timestampOutputs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets variables using variables files. Use the format path:args List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|variableFiles ( String variableFiles)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|variableFiles
parameter_list|(
name|String
name|variableFiles
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"variableFiles"
argument_list|,
name|variableFiles
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets individual variables. Use the format name:value List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|variables (String variables)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|variables
parameter_list|(
name|String
name|variables
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"variables"
argument_list|,
name|variables
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Show a warning when an invalid file is skipped.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|warnOnSkippedFiles ( boolean warnOnSkippedFiles)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|warnOnSkippedFiles
parameter_list|(
name|boolean
name|warnOnSkippedFiles
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"warnOnSkippedFiles"
argument_list|,
name|warnOnSkippedFiles
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Show a warning when an invalid file is skipped.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|warnOnSkippedFiles ( String warnOnSkippedFiles)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|warnOnSkippedFiles
parameter_list|(
name|String
name|warnOnSkippedFiles
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"warnOnSkippedFiles"
argument_list|,
name|warnOnSkippedFiles
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated XUnit compatible result file, relative          * to outputDirectory. The file is in xml format. By default, the file          * name is derived from the testCasesDirectory parameter, replacing          * blanks in the directory name by underscores.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|xunitFile (File xunitFile)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|xunitFile
parameter_list|(
name|File
name|xunitFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"xunitFile"
argument_list|,
name|xunitFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated XUnit compatible result file, relative          * to outputDirectory. The file is in xml format. By default, the file          * name is derived from the testCasesDirectory parameter, replacing          * blanks in the directory name by underscores.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|xunitFile (String xunitFile)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|xunitFile
parameter_list|(
name|String
name|xunitFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"xunitFile"
argument_list|,
name|xunitFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( boolean sendEmptyMessageWhenIdle)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|boolean
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( String sendEmptyMessageWhenIdle)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|String
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( int backoffErrorThreshold)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|int
name|backoffErrorThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( String backoffErrorThreshold)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|String
name|backoffErrorThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( int backoffIdleThreshold)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|int
name|backoffIdleThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( String backoffIdleThreshold)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|String
name|backoffIdleThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( int backoffMultiplier)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|int
name|backoffMultiplier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( String backoffMultiplier)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|String
name|backoffMultiplier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (long delay)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|delay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (String delay)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|delay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy (boolean greedy)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|greedy
parameter_list|(
name|boolean
name|greedy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy (String greedy)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|greedy
parameter_list|(
name|String
name|greedy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay ( long initialDelay)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|long
name|initialDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay ( String initialDelay)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|String
name|initialDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies a maximum limit of number of fires. So if you set it to 1,          * the scheduler will only fire once. If you set it to 5, it will only          * fire five times. A value of zero or negative means fire forever.          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|repeatCount ( long repeatCount)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|repeatCount
parameter_list|(
name|long
name|repeatCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"repeatCount"
argument_list|,
name|repeatCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies a maximum limit of number of fires. So if you set it to 1,          * the scheduler will only fire once. If you set it to 5, it will only          * fire five times. A value of zero or negative means fire forever.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|repeatCount ( String repeatCount)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|repeatCount
parameter_list|(
name|String
name|repeatCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"repeatCount"
argument_list|,
name|repeatCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option is a:<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( LoggingLevel runLoggingLevel)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|LoggingLevel
name|runLoggingLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( String runLoggingLevel)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|String
name|runLoggingLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option is a:          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( ScheduledExecutorService scheduledExecutorService)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|ScheduledExecutorService
name|scheduledExecutorService
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option will be converted to a          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( String scheduledExecutorService)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|String
name|scheduledExecutorService
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a cron scheduler from either camel-spring or camel-quartz          * component.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: scheduler          */
DECL|method|scheduler (String scheduler)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|scheduler
parameter_list|(
name|String
name|scheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduler"
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz, Spring based scheduler.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( Map<String, Object> schedulerProperties)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|schedulerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz, Spring based scheduler.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( String schedulerProperties)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|String
name|schedulerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler ( boolean startScheduler)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|boolean
name|startScheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler ( String startScheduler)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|String
name|startScheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option is a:<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit (TimeUnit timeUnit)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option will be converted to a          *<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit (String timeUnit)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|String
name|timeUnit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay ( boolean useFixedDelay)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|boolean
name|useFixedDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay ( String useFixedDelay)
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|String
name|useFixedDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Robot Framework      * component.      */
DECL|interface|AdvancedRobotFrameworkEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedRobotFrameworkEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|RobotFrameworkEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|RobotFrameworkEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedRobotFrameworkEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedRobotFrameworkEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedRobotFrameworkEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedRobotFrameworkEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option is a:          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( PollingConsumerPollStrategy pollStrategy)
specifier|default
name|AdvancedRobotFrameworkEndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|PollingConsumerPollStrategy
name|pollStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option will be converted to a          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( String pollStrategy)
specifier|default
name|AdvancedRobotFrameworkEndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|String
name|pollStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedRobotFrameworkEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedRobotFrameworkEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedRobotFrameworkEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedRobotFrameworkEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Robot Framework component.      */
DECL|interface|RobotFrameworkEndpointProducerBuilder
specifier|public
interface|interface
name|RobotFrameworkEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedRobotFrameworkEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedRobotFrameworkEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * A text file to read more arguments from.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|argumentFile ( File argumentFile)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|argumentFile
parameter_list|(
name|File
name|argumentFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"argumentFile"
argument_list|,
name|argumentFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A text file to read more arguments from.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|argumentFile ( String argumentFile)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|argumentFile
parameter_list|(
name|String
name|argumentFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"argumentFile"
argument_list|,
name|argumentFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Creates combined statistics based on tags. Use the format tags:title          * List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|combinedTagStats ( String combinedTagStats)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|combinedTagStats
parameter_list|(
name|String
name|combinedTagStats
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"combinedTagStats"
argument_list|,
name|combinedTagStats
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to use resource content cache or not.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|contentCache ( boolean contentCache)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|contentCache
parameter_list|(
name|boolean
name|contentCache
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentCache"
argument_list|,
name|contentCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to use resource content cache or not.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|contentCache ( String contentCache)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|contentCache
parameter_list|(
name|String
name|contentCache
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentCache"
argument_list|,
name|contentCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Tests that have the given tags are considered critical. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|criticalTags ( String criticalTags)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|criticalTags
parameter_list|(
name|String
name|criticalTags
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"criticalTags"
argument_list|,
name|criticalTags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A debug file that is written during execution.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|debugFile (File debugFile)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|debugFile
parameter_list|(
name|File
name|debugFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"debugFile"
argument_list|,
name|debugFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A debug file that is written during execution.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|debugFile (String debugFile)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|debugFile
parameter_list|(
name|String
name|debugFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"debugFile"
argument_list|,
name|debugFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the documentation of the top-level tests suites.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|document (String document)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|document
parameter_list|(
name|String
name|document
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"document"
argument_list|,
name|document
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets dryrun mode on use. In the dry run mode tests are run without          * executing keywords originating from test libraries. Useful for          * validating test data syntax.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|dryrun (boolean dryrun)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|dryrun
parameter_list|(
name|boolean
name|dryrun
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dryrun"
argument_list|,
name|dryrun
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets dryrun mode on use. In the dry run mode tests are run without          * executing keywords originating from test libraries. Useful for          * validating test data syntax.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|dryrun (String dryrun)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|dryrun
parameter_list|(
name|String
name|dryrun
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dryrun"
argument_list|,
name|dryrun
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Selects the tests cases by tags. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|excludes (String excludes)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|excludes
parameter_list|(
name|String
name|excludes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"excludes"
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets robot to stop execution immediately if a critical test fails.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|exitOnFailure ( boolean exitOnFailure)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|exitOnFailure
parameter_list|(
name|boolean
name|exitOnFailure
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exitOnFailure"
argument_list|,
name|exitOnFailure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets robot to stop execution immediately if a critical test fails.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|exitOnFailure ( String exitOnFailure)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|exitOnFailure
parameter_list|(
name|String
name|exitOnFailure
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exitOnFailure"
argument_list|,
name|exitOnFailure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Selects the tests cases by tags. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|includes (String includes)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|includes
parameter_list|(
name|String
name|includes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"includes"
argument_list|,
name|includes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a single listener for monitoring tests execution.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|listener (String listener)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|listener
parameter_list|(
name|String
name|listener
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"listener"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets multiple listeners for monitoring tests execution. Use the          * format ListenerWithArgs:arg1:arg2 or simply ListenerWithoutArgs List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|listeners (String listeners)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|listeners
parameter_list|(
name|String
name|listeners
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"listeners"
argument_list|,
name|listeners
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated log file.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|log (File log)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|log
parameter_list|(
name|File
name|log
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"log"
argument_list|,
name|log
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated log file.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|log (String log)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|log
parameter_list|(
name|String
name|log
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"log"
argument_list|,
name|log
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the threshold level for logging.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|logLevel (String logLevel)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|logLevel
parameter_list|(
name|String
name|logLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"logLevel"
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a title for the generated tests log.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|logTitle (String logTitle)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|logTitle
parameter_list|(
name|String
name|logTitle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"logTitle"
argument_list|,
name|logTitle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets free metadata for the top level tests suites. comma seperated          * list of string resulting as List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|metadata (String metadata)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|metadata
parameter_list|(
name|String
name|metadata
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"metadata"
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Using ANSI colors in console. Normally colors work in unixes but not          * in Windows. Default is 'on'. 'on' - use colors in unixes but not in          * Windows 'off' - never use colors 'force' - always use colors (also in          * Windows).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|monitorColors ( String monitorColors)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|monitorColors
parameter_list|(
name|String
name|monitorColors
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"monitorColors"
argument_list|,
name|monitorColors
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Width of the monitor output. Default is 78.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|monitorWidth ( String monitorWidth)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|monitorWidth
parameter_list|(
name|String
name|monitorWidth
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"monitorWidth"
argument_list|,
name|monitorWidth
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of the top-level tests suites.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|name (String name)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Tests that have the given tags are not critical. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|nonCriticalTags ( String nonCriticalTags)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|nonCriticalTags
parameter_list|(
name|String
name|nonCriticalTags
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nonCriticalTags"
argument_list|,
name|nonCriticalTags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, sets the return code to zero regardless of failures in test          * cases. Error codes are returned normally.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|noStatusReturnCode ( boolean noStatusReturnCode)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|noStatusReturnCode
parameter_list|(
name|boolean
name|noStatusReturnCode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"noStatusReturnCode"
argument_list|,
name|noStatusReturnCode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, sets the return code to zero regardless of failures in test          * cases. Error codes are returned normally.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|noStatusReturnCode ( String noStatusReturnCode)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|noStatusReturnCode
parameter_list|(
name|String
name|noStatusReturnCode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"noStatusReturnCode"
argument_list|,
name|noStatusReturnCode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated output file.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|output (File output)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|output
parameter_list|(
name|File
name|output
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"output"
argument_list|,
name|output
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated output file.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|output (String output)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|output
parameter_list|(
name|String
name|output
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"output"
argument_list|,
name|output
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures where generated reports are to be placed.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|outputDirectory ( File outputDirectory)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|outputDirectory
parameter_list|(
name|File
name|outputDirectory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputDirectory"
argument_list|,
name|outputDirectory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures where generated reports are to be placed.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|outputDirectory ( String outputDirectory)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|outputDirectory
parameter_list|(
name|String
name|outputDirectory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputDirectory"
argument_list|,
name|outputDirectory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the test execution order to be randomized. Valid values are all,          * suite, and test.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|randomize (String randomize)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|randomize
parameter_list|(
name|String
name|randomize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"randomize"
argument_list|,
name|randomize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated report file.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|report (File report)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|report
parameter_list|(
name|File
name|report
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"report"
argument_list|,
name|report
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated report file.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|report (String report)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|report
parameter_list|(
name|String
name|report
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"report"
argument_list|,
name|report
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets background colors for the generated report and summary.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|reportBackground ( String reportBackground)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|reportBackground
parameter_list|(
name|String
name|reportBackground
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reportBackground"
argument_list|,
name|reportBackground
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a title for the generated tests report.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|reportTitle ( String reportTitle)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|reportTitle
parameter_list|(
name|String
name|reportTitle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reportTitle"
argument_list|,
name|reportTitle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Executes tests also if the top level test suite is empty. Useful e.g.          * with --include/--exclude when it is not an error that no test matches          * the condition.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|runEmptySuite ( boolean runEmptySuite)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|runEmptySuite
parameter_list|(
name|boolean
name|runEmptySuite
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runEmptySuite"
argument_list|,
name|runEmptySuite
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Executes tests also if the top level test suite is empty. Useful e.g.          * with --include/--exclude when it is not an error that no test matches          * the condition.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|runEmptySuite ( String runEmptySuite)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|runEmptySuite
parameter_list|(
name|String
name|runEmptySuite
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runEmptySuite"
argument_list|,
name|runEmptySuite
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Re-run failed tests, based on output.xml file.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|runFailed (File runFailed)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|runFailed
parameter_list|(
name|File
name|runFailed
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runFailed"
argument_list|,
name|runFailed
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Re-run failed tests, based on output.xml file.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|runFailed (String runFailed)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|runFailed
parameter_list|(
name|String
name|runFailed
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runFailed"
argument_list|,
name|runFailed
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the execution mode for this tests run. Note that this setting          * has been deprecated in Robot Framework 2.8. Use separate dryryn,          * skipTeardownOnExit, exitOnFailure, and randomize settings instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|runMode (String runMode)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|runMode
parameter_list|(
name|String
name|runMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runMode"
argument_list|,
name|runMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether the teardowns are skipped if the test execution is          * prematurely stopped.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipTeardownOnExit ( boolean skipTeardownOnExit)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|skipTeardownOnExit
parameter_list|(
name|boolean
name|skipTeardownOnExit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"skipTeardownOnExit"
argument_list|,
name|skipTeardownOnExit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether the teardowns are skipped if the test execution is          * prematurely stopped.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipTeardownOnExit ( String skipTeardownOnExit)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|skipTeardownOnExit
parameter_list|(
name|String
name|skipTeardownOnExit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"skipTeardownOnExit"
argument_list|,
name|skipTeardownOnExit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Splits output and log files.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|splitOutputs ( String splitOutputs)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|splitOutputs
parameter_list|(
name|String
name|splitOutputs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"splitOutputs"
argument_list|,
name|splitOutputs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Selects the tests suites by name. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|suites (String suites)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|suites
parameter_list|(
name|String
name|suites
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"suites"
argument_list|,
name|suites
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines how many levels to show in the Statistics by Suite table in          * outputs.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|suiteStatLevel ( String suiteStatLevel)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|suiteStatLevel
parameter_list|(
name|String
name|suiteStatLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"suiteStatLevel"
argument_list|,
name|suiteStatLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a title for the generated summary report.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|summaryTitle ( String summaryTitle)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|summaryTitle
parameter_list|(
name|String
name|summaryTitle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"summaryTitle"
argument_list|,
name|summaryTitle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Adds documentation to the specified tags. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tagDocs (String tagDocs)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|tagDocs
parameter_list|(
name|String
name|tagDocs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tagDocs"
argument_list|,
name|tagDocs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the tags(s) to all executed tests cases. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tags (String tags)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|tags
parameter_list|(
name|String
name|tags
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tags"
argument_list|,
name|tags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Excludes these tags from the Statistics by Tag and Test Details by          * Tag tables in outputs. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tagStatExcludes ( String tagStatExcludes)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|tagStatExcludes
parameter_list|(
name|String
name|tagStatExcludes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tagStatExcludes"
argument_list|,
name|tagStatExcludes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Includes only these tags in the Statistics by Tag and Test Details by          * Tag tables in outputs. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tagStatIncludes ( String tagStatIncludes)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|tagStatIncludes
parameter_list|(
name|String
name|tagStatIncludes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tagStatIncludes"
argument_list|,
name|tagStatIncludes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Adds external links to the Statistics by Tag table in outputs. Use          * the format pattern:link:title List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tagStatLinks ( String tagStatLinks)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|tagStatLinks
parameter_list|(
name|String
name|tagStatLinks
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tagStatLinks"
argument_list|,
name|tagStatLinks
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Selects the tests cases by name. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tests (String tests)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|tests
parameter_list|(
name|String
name|tests
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tests"
argument_list|,
name|tests
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Adds a timestamp to all output files.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|timestampOutputs ( boolean timestampOutputs)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|timestampOutputs
parameter_list|(
name|boolean
name|timestampOutputs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timestampOutputs"
argument_list|,
name|timestampOutputs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Adds a timestamp to all output files.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|timestampOutputs ( String timestampOutputs)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|timestampOutputs
parameter_list|(
name|String
name|timestampOutputs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timestampOutputs"
argument_list|,
name|timestampOutputs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets variables using variables files. Use the format path:args List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|variableFiles ( String variableFiles)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|variableFiles
parameter_list|(
name|String
name|variableFiles
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"variableFiles"
argument_list|,
name|variableFiles
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets individual variables. Use the format name:value List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|variables (String variables)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|variables
parameter_list|(
name|String
name|variables
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"variables"
argument_list|,
name|variables
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Show a warning when an invalid file is skipped.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|warnOnSkippedFiles ( boolean warnOnSkippedFiles)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|warnOnSkippedFiles
parameter_list|(
name|boolean
name|warnOnSkippedFiles
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"warnOnSkippedFiles"
argument_list|,
name|warnOnSkippedFiles
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Show a warning when an invalid file is skipped.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|warnOnSkippedFiles ( String warnOnSkippedFiles)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|warnOnSkippedFiles
parameter_list|(
name|String
name|warnOnSkippedFiles
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"warnOnSkippedFiles"
argument_list|,
name|warnOnSkippedFiles
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated XUnit compatible result file, relative          * to outputDirectory. The file is in xml format. By default, the file          * name is derived from the testCasesDirectory parameter, replacing          * blanks in the directory name by underscores.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|xunitFile (File xunitFile)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|xunitFile
parameter_list|(
name|File
name|xunitFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"xunitFile"
argument_list|,
name|xunitFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated XUnit compatible result file, relative          * to outputDirectory. The file is in xml format. By default, the file          * name is derived from the testCasesDirectory parameter, replacing          * blanks in the directory name by underscores.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|xunitFile (String xunitFile)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|xunitFile
parameter_list|(
name|String
name|xunitFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"xunitFile"
argument_list|,
name|xunitFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Robot Framework      * component.      */
DECL|interface|AdvancedRobotFrameworkEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedRobotFrameworkEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|RobotFrameworkEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|RobotFrameworkEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedRobotFrameworkEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedRobotFrameworkEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedRobotFrameworkEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedRobotFrameworkEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Robot Framework component.      */
DECL|interface|RobotFrameworkEndpointBuilder
specifier|public
interface|interface
name|RobotFrameworkEndpointBuilder
extends|extends
name|RobotFrameworkEndpointConsumerBuilder
extends|,
name|RobotFrameworkEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedRobotFrameworkEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedRobotFrameworkEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * A text file to read more arguments from.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|argumentFile (File argumentFile)
specifier|default
name|RobotFrameworkEndpointBuilder
name|argumentFile
parameter_list|(
name|File
name|argumentFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"argumentFile"
argument_list|,
name|argumentFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A text file to read more arguments from.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|argumentFile (String argumentFile)
specifier|default
name|RobotFrameworkEndpointBuilder
name|argumentFile
parameter_list|(
name|String
name|argumentFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"argumentFile"
argument_list|,
name|argumentFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Creates combined statistics based on tags. Use the format tags:title          * List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|combinedTagStats ( String combinedTagStats)
specifier|default
name|RobotFrameworkEndpointBuilder
name|combinedTagStats
parameter_list|(
name|String
name|combinedTagStats
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"combinedTagStats"
argument_list|,
name|combinedTagStats
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to use resource content cache or not.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|contentCache (boolean contentCache)
specifier|default
name|RobotFrameworkEndpointBuilder
name|contentCache
parameter_list|(
name|boolean
name|contentCache
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentCache"
argument_list|,
name|contentCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to use resource content cache or not.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|contentCache (String contentCache)
specifier|default
name|RobotFrameworkEndpointBuilder
name|contentCache
parameter_list|(
name|String
name|contentCache
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentCache"
argument_list|,
name|contentCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Tests that have the given tags are considered critical. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|criticalTags (String criticalTags)
specifier|default
name|RobotFrameworkEndpointBuilder
name|criticalTags
parameter_list|(
name|String
name|criticalTags
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"criticalTags"
argument_list|,
name|criticalTags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A debug file that is written during execution.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|debugFile (File debugFile)
specifier|default
name|RobotFrameworkEndpointBuilder
name|debugFile
parameter_list|(
name|File
name|debugFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"debugFile"
argument_list|,
name|debugFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A debug file that is written during execution.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|debugFile (String debugFile)
specifier|default
name|RobotFrameworkEndpointBuilder
name|debugFile
parameter_list|(
name|String
name|debugFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"debugFile"
argument_list|,
name|debugFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the documentation of the top-level tests suites.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|document (String document)
specifier|default
name|RobotFrameworkEndpointBuilder
name|document
parameter_list|(
name|String
name|document
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"document"
argument_list|,
name|document
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets dryrun mode on use. In the dry run mode tests are run without          * executing keywords originating from test libraries. Useful for          * validating test data syntax.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|dryrun (boolean dryrun)
specifier|default
name|RobotFrameworkEndpointBuilder
name|dryrun
parameter_list|(
name|boolean
name|dryrun
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dryrun"
argument_list|,
name|dryrun
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets dryrun mode on use. In the dry run mode tests are run without          * executing keywords originating from test libraries. Useful for          * validating test data syntax.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|dryrun (String dryrun)
specifier|default
name|RobotFrameworkEndpointBuilder
name|dryrun
parameter_list|(
name|String
name|dryrun
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"dryrun"
argument_list|,
name|dryrun
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Selects the tests cases by tags. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|excludes (String excludes)
specifier|default
name|RobotFrameworkEndpointBuilder
name|excludes
parameter_list|(
name|String
name|excludes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"excludes"
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets robot to stop execution immediately if a critical test fails.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|exitOnFailure ( boolean exitOnFailure)
specifier|default
name|RobotFrameworkEndpointBuilder
name|exitOnFailure
parameter_list|(
name|boolean
name|exitOnFailure
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exitOnFailure"
argument_list|,
name|exitOnFailure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets robot to stop execution immediately if a critical test fails.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|exitOnFailure (String exitOnFailure)
specifier|default
name|RobotFrameworkEndpointBuilder
name|exitOnFailure
parameter_list|(
name|String
name|exitOnFailure
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exitOnFailure"
argument_list|,
name|exitOnFailure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Selects the tests cases by tags. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|includes (String includes)
specifier|default
name|RobotFrameworkEndpointBuilder
name|includes
parameter_list|(
name|String
name|includes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"includes"
argument_list|,
name|includes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a single listener for monitoring tests execution.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|listener (String listener)
specifier|default
name|RobotFrameworkEndpointBuilder
name|listener
parameter_list|(
name|String
name|listener
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"listener"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets multiple listeners for monitoring tests execution. Use the          * format ListenerWithArgs:arg1:arg2 or simply ListenerWithoutArgs List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|listeners (String listeners)
specifier|default
name|RobotFrameworkEndpointBuilder
name|listeners
parameter_list|(
name|String
name|listeners
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"listeners"
argument_list|,
name|listeners
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated log file.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|log (File log)
specifier|default
name|RobotFrameworkEndpointBuilder
name|log
parameter_list|(
name|File
name|log
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"log"
argument_list|,
name|log
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated log file.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|log (String log)
specifier|default
name|RobotFrameworkEndpointBuilder
name|log
parameter_list|(
name|String
name|log
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"log"
argument_list|,
name|log
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the threshold level for logging.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|logLevel (String logLevel)
specifier|default
name|RobotFrameworkEndpointBuilder
name|logLevel
parameter_list|(
name|String
name|logLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"logLevel"
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a title for the generated tests log.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|logTitle (String logTitle)
specifier|default
name|RobotFrameworkEndpointBuilder
name|logTitle
parameter_list|(
name|String
name|logTitle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"logTitle"
argument_list|,
name|logTitle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets free metadata for the top level tests suites. comma seperated          * list of string resulting as List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|metadata (String metadata)
specifier|default
name|RobotFrameworkEndpointBuilder
name|metadata
parameter_list|(
name|String
name|metadata
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"metadata"
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Using ANSI colors in console. Normally colors work in unixes but not          * in Windows. Default is 'on'. 'on' - use colors in unixes but not in          * Windows 'off' - never use colors 'force' - always use colors (also in          * Windows).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|monitorColors (String monitorColors)
specifier|default
name|RobotFrameworkEndpointBuilder
name|monitorColors
parameter_list|(
name|String
name|monitorColors
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"monitorColors"
argument_list|,
name|monitorColors
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Width of the monitor output. Default is 78.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|monitorWidth (String monitorWidth)
specifier|default
name|RobotFrameworkEndpointBuilder
name|monitorWidth
parameter_list|(
name|String
name|monitorWidth
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"monitorWidth"
argument_list|,
name|monitorWidth
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of the top-level tests suites.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|name (String name)
specifier|default
name|RobotFrameworkEndpointBuilder
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Tests that have the given tags are not critical. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|nonCriticalTags ( String nonCriticalTags)
specifier|default
name|RobotFrameworkEndpointBuilder
name|nonCriticalTags
parameter_list|(
name|String
name|nonCriticalTags
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nonCriticalTags"
argument_list|,
name|nonCriticalTags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, sets the return code to zero regardless of failures in test          * cases. Error codes are returned normally.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|noStatusReturnCode ( boolean noStatusReturnCode)
specifier|default
name|RobotFrameworkEndpointBuilder
name|noStatusReturnCode
parameter_list|(
name|boolean
name|noStatusReturnCode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"noStatusReturnCode"
argument_list|,
name|noStatusReturnCode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, sets the return code to zero regardless of failures in test          * cases. Error codes are returned normally.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|noStatusReturnCode ( String noStatusReturnCode)
specifier|default
name|RobotFrameworkEndpointBuilder
name|noStatusReturnCode
parameter_list|(
name|String
name|noStatusReturnCode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"noStatusReturnCode"
argument_list|,
name|noStatusReturnCode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated output file.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|output (File output)
specifier|default
name|RobotFrameworkEndpointBuilder
name|output
parameter_list|(
name|File
name|output
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"output"
argument_list|,
name|output
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated output file.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|output (String output)
specifier|default
name|RobotFrameworkEndpointBuilder
name|output
parameter_list|(
name|String
name|output
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"output"
argument_list|,
name|output
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures where generated reports are to be placed.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|outputDirectory ( File outputDirectory)
specifier|default
name|RobotFrameworkEndpointBuilder
name|outputDirectory
parameter_list|(
name|File
name|outputDirectory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputDirectory"
argument_list|,
name|outputDirectory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configures where generated reports are to be placed.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|outputDirectory ( String outputDirectory)
specifier|default
name|RobotFrameworkEndpointBuilder
name|outputDirectory
parameter_list|(
name|String
name|outputDirectory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outputDirectory"
argument_list|,
name|outputDirectory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the test execution order to be randomized. Valid values are all,          * suite, and test.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|randomize (String randomize)
specifier|default
name|RobotFrameworkEndpointBuilder
name|randomize
parameter_list|(
name|String
name|randomize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"randomize"
argument_list|,
name|randomize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated report file.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|report (File report)
specifier|default
name|RobotFrameworkEndpointBuilder
name|report
parameter_list|(
name|File
name|report
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"report"
argument_list|,
name|report
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated report file.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|report (String report)
specifier|default
name|RobotFrameworkEndpointBuilder
name|report
parameter_list|(
name|String
name|report
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"report"
argument_list|,
name|report
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets background colors for the generated report and summary.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|reportBackground ( String reportBackground)
specifier|default
name|RobotFrameworkEndpointBuilder
name|reportBackground
parameter_list|(
name|String
name|reportBackground
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reportBackground"
argument_list|,
name|reportBackground
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a title for the generated tests report.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|reportTitle (String reportTitle)
specifier|default
name|RobotFrameworkEndpointBuilder
name|reportTitle
parameter_list|(
name|String
name|reportTitle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"reportTitle"
argument_list|,
name|reportTitle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Executes tests also if the top level test suite is empty. Useful e.g.          * with --include/--exclude when it is not an error that no test matches          * the condition.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|runEmptySuite ( boolean runEmptySuite)
specifier|default
name|RobotFrameworkEndpointBuilder
name|runEmptySuite
parameter_list|(
name|boolean
name|runEmptySuite
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runEmptySuite"
argument_list|,
name|runEmptySuite
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Executes tests also if the top level test suite is empty. Useful e.g.          * with --include/--exclude when it is not an error that no test matches          * the condition.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|runEmptySuite (String runEmptySuite)
specifier|default
name|RobotFrameworkEndpointBuilder
name|runEmptySuite
parameter_list|(
name|String
name|runEmptySuite
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runEmptySuite"
argument_list|,
name|runEmptySuite
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Re-run failed tests, based on output.xml file.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|runFailed (File runFailed)
specifier|default
name|RobotFrameworkEndpointBuilder
name|runFailed
parameter_list|(
name|File
name|runFailed
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runFailed"
argument_list|,
name|runFailed
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Re-run failed tests, based on output.xml file.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|runFailed (String runFailed)
specifier|default
name|RobotFrameworkEndpointBuilder
name|runFailed
parameter_list|(
name|String
name|runFailed
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runFailed"
argument_list|,
name|runFailed
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the execution mode for this tests run. Note that this setting          * has been deprecated in Robot Framework 2.8. Use separate dryryn,          * skipTeardownOnExit, exitOnFailure, and randomize settings instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|runMode (String runMode)
specifier|default
name|RobotFrameworkEndpointBuilder
name|runMode
parameter_list|(
name|String
name|runMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runMode"
argument_list|,
name|runMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether the teardowns are skipped if the test execution is          * prematurely stopped.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipTeardownOnExit ( boolean skipTeardownOnExit)
specifier|default
name|RobotFrameworkEndpointBuilder
name|skipTeardownOnExit
parameter_list|(
name|boolean
name|skipTeardownOnExit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"skipTeardownOnExit"
argument_list|,
name|skipTeardownOnExit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether the teardowns are skipped if the test execution is          * prematurely stopped.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|skipTeardownOnExit ( String skipTeardownOnExit)
specifier|default
name|RobotFrameworkEndpointBuilder
name|skipTeardownOnExit
parameter_list|(
name|String
name|skipTeardownOnExit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"skipTeardownOnExit"
argument_list|,
name|skipTeardownOnExit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Splits output and log files.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|splitOutputs (String splitOutputs)
specifier|default
name|RobotFrameworkEndpointBuilder
name|splitOutputs
parameter_list|(
name|String
name|splitOutputs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"splitOutputs"
argument_list|,
name|splitOutputs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Selects the tests suites by name. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|suites (String suites)
specifier|default
name|RobotFrameworkEndpointBuilder
name|suites
parameter_list|(
name|String
name|suites
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"suites"
argument_list|,
name|suites
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines how many levels to show in the Statistics by Suite table in          * outputs.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|suiteStatLevel ( String suiteStatLevel)
specifier|default
name|RobotFrameworkEndpointBuilder
name|suiteStatLevel
parameter_list|(
name|String
name|suiteStatLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"suiteStatLevel"
argument_list|,
name|suiteStatLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets a title for the generated summary report.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|summaryTitle (String summaryTitle)
specifier|default
name|RobotFrameworkEndpointBuilder
name|summaryTitle
parameter_list|(
name|String
name|summaryTitle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"summaryTitle"
argument_list|,
name|summaryTitle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Adds documentation to the specified tags. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tagDocs (String tagDocs)
specifier|default
name|RobotFrameworkEndpointBuilder
name|tagDocs
parameter_list|(
name|String
name|tagDocs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tagDocs"
argument_list|,
name|tagDocs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the tags(s) to all executed tests cases. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tags (String tags)
specifier|default
name|RobotFrameworkEndpointBuilder
name|tags
parameter_list|(
name|String
name|tags
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tags"
argument_list|,
name|tags
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Excludes these tags from the Statistics by Tag and Test Details by          * Tag tables in outputs. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tagStatExcludes ( String tagStatExcludes)
specifier|default
name|RobotFrameworkEndpointBuilder
name|tagStatExcludes
parameter_list|(
name|String
name|tagStatExcludes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tagStatExcludes"
argument_list|,
name|tagStatExcludes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Includes only these tags in the Statistics by Tag and Test Details by          * Tag tables in outputs. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tagStatIncludes ( String tagStatIncludes)
specifier|default
name|RobotFrameworkEndpointBuilder
name|tagStatIncludes
parameter_list|(
name|String
name|tagStatIncludes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tagStatIncludes"
argument_list|,
name|tagStatIncludes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Adds external links to the Statistics by Tag table in outputs. Use          * the format pattern:link:title List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tagStatLinks (String tagStatLinks)
specifier|default
name|RobotFrameworkEndpointBuilder
name|tagStatLinks
parameter_list|(
name|String
name|tagStatLinks
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tagStatLinks"
argument_list|,
name|tagStatLinks
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Selects the tests cases by name. List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|tests (String tests)
specifier|default
name|RobotFrameworkEndpointBuilder
name|tests
parameter_list|(
name|String
name|tests
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tests"
argument_list|,
name|tests
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Adds a timestamp to all output files.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|timestampOutputs ( boolean timestampOutputs)
specifier|default
name|RobotFrameworkEndpointBuilder
name|timestampOutputs
parameter_list|(
name|boolean
name|timestampOutputs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timestampOutputs"
argument_list|,
name|timestampOutputs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Adds a timestamp to all output files.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|timestampOutputs ( String timestampOutputs)
specifier|default
name|RobotFrameworkEndpointBuilder
name|timestampOutputs
parameter_list|(
name|String
name|timestampOutputs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timestampOutputs"
argument_list|,
name|timestampOutputs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets variables using variables files. Use the format path:args List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|variableFiles (String variableFiles)
specifier|default
name|RobotFrameworkEndpointBuilder
name|variableFiles
parameter_list|(
name|String
name|variableFiles
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"variableFiles"
argument_list|,
name|variableFiles
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets individual variables. Use the format name:value List.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|variables (String variables)
specifier|default
name|RobotFrameworkEndpointBuilder
name|variables
parameter_list|(
name|String
name|variables
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"variables"
argument_list|,
name|variables
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Show a warning when an invalid file is skipped.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|warnOnSkippedFiles ( boolean warnOnSkippedFiles)
specifier|default
name|RobotFrameworkEndpointBuilder
name|warnOnSkippedFiles
parameter_list|(
name|boolean
name|warnOnSkippedFiles
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"warnOnSkippedFiles"
argument_list|,
name|warnOnSkippedFiles
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Show a warning when an invalid file is skipped.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|warnOnSkippedFiles ( String warnOnSkippedFiles)
specifier|default
name|RobotFrameworkEndpointBuilder
name|warnOnSkippedFiles
parameter_list|(
name|String
name|warnOnSkippedFiles
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"warnOnSkippedFiles"
argument_list|,
name|warnOnSkippedFiles
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated XUnit compatible result file, relative          * to outputDirectory. The file is in xml format. By default, the file          * name is derived from the testCasesDirectory parameter, replacing          * blanks in the directory name by underscores.          *           * The option is a:<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|xunitFile (File xunitFile)
specifier|default
name|RobotFrameworkEndpointBuilder
name|xunitFile
parameter_list|(
name|File
name|xunitFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"xunitFile"
argument_list|,
name|xunitFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the path to the generated XUnit compatible result file, relative          * to outputDirectory. The file is in xml format. By default, the file          * name is derived from the testCasesDirectory parameter, replacing          * blanks in the directory name by underscores.          *           * The option will be converted to a<code>java.io.File</code> type.          *           * Group: common          */
DECL|method|xunitFile (String xunitFile)
specifier|default
name|RobotFrameworkEndpointBuilder
name|xunitFile
parameter_list|(
name|String
name|xunitFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"xunitFile"
argument_list|,
name|xunitFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Robot Framework component.      */
DECL|interface|AdvancedRobotFrameworkEndpointBuilder
specifier|public
interface|interface
name|AdvancedRobotFrameworkEndpointBuilder
extends|extends
name|AdvancedRobotFrameworkEndpointConsumerBuilder
extends|,
name|AdvancedRobotFrameworkEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|RobotFrameworkEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|RobotFrameworkEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedRobotFrameworkEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedRobotFrameworkEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedRobotFrameworkEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedRobotFrameworkEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Robot Framework (camel-robotframework)      * Represents a RobotFramework endpoint.      *       * Category: testing      * Available as of version: 3.0      * Maven coordinates: org.apache.camel:camel-robotframework      *       * Syntax:<code>robotframework:resourceUri</code>      *       * Path parameter: resourceUri (required)      * Path to the resource. You can prefix with: classpath, file, http, ref, or      * bean. classpath, file and http loads the resource using these protocols      * (classpath is default). ref will lookup the resource in the registry.      * bean will call a method on a bean to be used as the resource. For bean      * you can specify the method name after dot, eg bean:myBean.myMethod.      */
DECL|method|robotframework (String path)
specifier|default
name|RobotFrameworkEndpointBuilder
name|robotframework
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|RobotFrameworkEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|RobotFrameworkEndpointBuilder
implements|,
name|AdvancedRobotFrameworkEndpointBuilder
block|{
specifier|public
name|RobotFrameworkEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"robotframework"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|RobotFrameworkEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

