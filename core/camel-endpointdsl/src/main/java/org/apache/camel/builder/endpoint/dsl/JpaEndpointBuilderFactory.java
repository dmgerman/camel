begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PollingConsumerPollStrategy
import|;
end_import

begin_comment
comment|/**  * The jpa component enables you to store and retrieve Java objects from  * databases using JPA.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|JpaEndpointBuilderFactory
specifier|public
interface|interface
name|JpaEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the JPA component.      */
DECL|interface|JpaEndpointConsumerBuilder
specifier|public
interface|interface
name|JpaEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJpaEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJpaEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The camel-jpa component will join transaction by default. You can use          * this option to turn this off, for example if you use LOCAL_RESOURCE          * and join transaction doesn't work with your JPA provider. This option          * can also be set globally on the JpaComponent, instead of having to          * set it on all endpoints.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|joinTransaction ( boolean joinTransaction)
specifier|default
name|JpaEndpointConsumerBuilder
name|joinTransaction
parameter_list|(
name|boolean
name|joinTransaction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"joinTransaction"
argument_list|,
name|joinTransaction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The camel-jpa component will join transaction by default. You can use          * this option to turn this off, for example if you use LOCAL_RESOURCE          * and join transaction doesn't work with your JPA provider. This option          * can also be set globally on the JpaComponent, instead of having to          * set it on all endpoints.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|joinTransaction ( String joinTransaction)
specifier|default
name|JpaEndpointConsumerBuilder
name|joinTransaction
parameter_list|(
name|String
name|joinTransaction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"joinTransaction"
argument_list|,
name|joinTransaction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the maximum number of results to retrieve on the Query.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maximumResults (int maximumResults)
specifier|default
name|JpaEndpointConsumerBuilder
name|maximumResults
parameter_list|(
name|int
name|maximumResults
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maximumResults"
argument_list|,
name|maximumResults
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the maximum number of results to retrieve on the Query.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maximumResults (String maximumResults)
specifier|default
name|JpaEndpointConsumerBuilder
name|maximumResults
parameter_list|(
name|String
name|maximumResults
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maximumResults"
argument_list|,
name|maximumResults
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a named query.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|namedQuery (String namedQuery)
specifier|default
name|JpaEndpointConsumerBuilder
name|namedQuery
parameter_list|(
name|String
name|namedQuery
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"namedQuery"
argument_list|,
name|namedQuery
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom native query. You may want to use the option          * resultClass also when using native queries.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|nativeQuery (String nativeQuery)
specifier|default
name|JpaEndpointConsumerBuilder
name|nativeQuery
parameter_list|(
name|String
name|nativeQuery
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nativeQuery"
argument_list|,
name|nativeQuery
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The JPA persistence unit used by default.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: common          */
DECL|method|persistenceUnit ( String persistenceUnit)
specifier|default
name|JpaEndpointConsumerBuilder
name|persistenceUnit
parameter_list|(
name|String
name|persistenceUnit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"persistenceUnit"
argument_list|,
name|persistenceUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom query.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|query (String query)
specifier|default
name|JpaEndpointConsumerBuilder
name|query
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"query"
argument_list|,
name|query
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the type of the returned payload (we will call          * entityManager.createNativeQuery(nativeQuery, resultClass) instead of          * entityManager.createNativeQuery(nativeQuery)). Without this option,          * we will return an object array. Only has an affect when using in          * conjunction with native query when consuming data.          *           * The option is a:<code>java.lang.Class&lt;java.lang.Object&gt;</code>          * type.          *           * Group: common          */
DECL|method|resultClass (Class<Object> resultClass)
specifier|default
name|JpaEndpointConsumerBuilder
name|resultClass
parameter_list|(
name|Class
argument_list|<
name|Object
argument_list|>
name|resultClass
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"resultClass"
argument_list|,
name|resultClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the type of the returned payload (we will call          * entityManager.createNativeQuery(nativeQuery, resultClass) instead of          * entityManager.createNativeQuery(nativeQuery)). Without this option,          * we will return an object array. Only has an affect when using in          * conjunction with native query when consuming data.          *           * The option will be converted to a          *<code>java.lang.Class&lt;java.lang.Object&gt;</code> type.          *           * Group: common          */
DECL|method|resultClass (String resultClass)
specifier|default
name|JpaEndpointConsumerBuilder
name|resultClass
parameter_list|(
name|String
name|resultClass
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"resultClass"
argument_list|,
name|resultClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|JpaEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|JpaEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the entity is deleted after it is consumed; if false, the          * entity is not deleted.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|consumeDelete (boolean consumeDelete)
specifier|default
name|JpaEndpointConsumerBuilder
name|consumeDelete
parameter_list|(
name|boolean
name|consumeDelete
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"consumeDelete"
argument_list|,
name|consumeDelete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If true, the entity is deleted after it is consumed; if false, the          * entity is not deleted.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|consumeDelete (String consumeDelete)
specifier|default
name|JpaEndpointConsumerBuilder
name|consumeDelete
parameter_list|(
name|String
name|consumeDelete
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"consumeDelete"
argument_list|,
name|consumeDelete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether or not to set an exclusive lock on each entity bean          * while processing the results from polling.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|consumeLockEntity ( boolean consumeLockEntity)
specifier|default
name|JpaEndpointConsumerBuilder
name|consumeLockEntity
parameter_list|(
name|boolean
name|consumeLockEntity
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"consumeLockEntity"
argument_list|,
name|consumeLockEntity
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether or not to set an exclusive lock on each entity bean          * while processing the results from polling.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|consumeLockEntity ( String consumeLockEntity)
specifier|default
name|JpaEndpointConsumerBuilder
name|consumeLockEntity
parameter_list|(
name|String
name|consumeLockEntity
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"consumeLockEntity"
argument_list|,
name|consumeLockEntity
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom DeleteHandler to delete the row after the consumer is          * done processing the exchange.          *           * The option is a:          *<code>org.apache.camel.component.jpa.DeleteHandler&lt;java.lang.Object&gt;</code> type.          *           * Group: consumer          */
DECL|method|deleteHandler (Object deleteHandler)
specifier|default
name|JpaEndpointConsumerBuilder
name|deleteHandler
parameter_list|(
name|Object
name|deleteHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"deleteHandler"
argument_list|,
name|deleteHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom DeleteHandler to delete the row after the consumer is          * done processing the exchange.          *           * The option will be converted to a          *<code>org.apache.camel.component.jpa.DeleteHandler&lt;java.lang.Object&gt;</code> type.          *           * Group: consumer          */
DECL|method|deleteHandler (String deleteHandler)
specifier|default
name|JpaEndpointConsumerBuilder
name|deleteHandler
parameter_list|(
name|String
name|deleteHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"deleteHandler"
argument_list|,
name|deleteHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the lock mode on the consumer.          *           * The option is a:<code>javax.persistence.LockModeType</code> type.          *           * Group: consumer          */
DECL|method|lockModeType ( LockModeType lockModeType)
specifier|default
name|JpaEndpointConsumerBuilder
name|lockModeType
parameter_list|(
name|LockModeType
name|lockModeType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lockModeType"
argument_list|,
name|lockModeType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the lock mode on the consumer.          *           * The option will be converted to a          *<code>javax.persistence.LockModeType</code> type.          *           * Group: consumer          */
DECL|method|lockModeType (String lockModeType)
specifier|default
name|JpaEndpointConsumerBuilder
name|lockModeType
parameter_list|(
name|String
name|lockModeType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lockModeType"
argument_list|,
name|lockModeType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An integer value to define the maximum number of messages to gather          * per poll. By default, no maximum is set. Can be used to avoid polling          * many thousands of messages when starting up the server. Set a value          * of 0 or negative to disable.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|maxMessagesPerPoll ( int maxMessagesPerPoll)
specifier|default
name|JpaEndpointConsumerBuilder
name|maxMessagesPerPoll
parameter_list|(
name|int
name|maxMessagesPerPoll
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessagesPerPoll"
argument_list|,
name|maxMessagesPerPoll
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An integer value to define the maximum number of messages to gather          * per poll. By default, no maximum is set. Can be used to avoid polling          * many thousands of messages when starting up the server. Set a value          * of 0 or negative to disable.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|maxMessagesPerPoll ( String maxMessagesPerPoll)
specifier|default
name|JpaEndpointConsumerBuilder
name|maxMessagesPerPoll
parameter_list|(
name|String
name|maxMessagesPerPoll
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxMessagesPerPoll"
argument_list|,
name|maxMessagesPerPoll
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom Pre-DeleteHandler to delete the row after the          * consumer has read the entity.          *           * The option is a:          *<code>org.apache.camel.component.jpa.DeleteHandler&lt;java.lang.Object&gt;</code> type.          *           * Group: consumer          */
DECL|method|preDeleteHandler ( Object preDeleteHandler)
specifier|default
name|JpaEndpointConsumerBuilder
name|preDeleteHandler
parameter_list|(
name|Object
name|preDeleteHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"preDeleteHandler"
argument_list|,
name|preDeleteHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom Pre-DeleteHandler to delete the row after the          * consumer has read the entity.          *           * The option will be converted to a          *<code>org.apache.camel.component.jpa.DeleteHandler&lt;java.lang.Object&gt;</code> type.          *           * Group: consumer          */
DECL|method|preDeleteHandler ( String preDeleteHandler)
specifier|default
name|JpaEndpointConsumerBuilder
name|preDeleteHandler
parameter_list|(
name|String
name|preDeleteHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"preDeleteHandler"
argument_list|,
name|preDeleteHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( boolean sendEmptyMessageWhenIdle)
specifier|default
name|JpaEndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|boolean
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( String sendEmptyMessageWhenIdle)
specifier|default
name|JpaEndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|String
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure whether to use NOWAIT on lock and silently skip the          * entity.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|skipLockedEntity ( boolean skipLockedEntity)
specifier|default
name|JpaEndpointConsumerBuilder
name|skipLockedEntity
parameter_list|(
name|boolean
name|skipLockedEntity
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"skipLockedEntity"
argument_list|,
name|skipLockedEntity
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure whether to use NOWAIT on lock and silently skip the          * entity.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|skipLockedEntity ( String skipLockedEntity)
specifier|default
name|JpaEndpointConsumerBuilder
name|skipLockedEntity
parameter_list|(
name|String
name|skipLockedEntity
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"skipLockedEntity"
argument_list|,
name|skipLockedEntity
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to run the consumer in transacted mode, by which all messages          * will either commit or rollback, when the entire batch has been          * processed. The default behavior (false) is to commit all the          * previously successfully processed messages, and only rollback the          * last failed message.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|transacted (boolean transacted)
specifier|default
name|JpaEndpointConsumerBuilder
name|transacted
parameter_list|(
name|boolean
name|transacted
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"transacted"
argument_list|,
name|transacted
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to run the consumer in transacted mode, by which all messages          * will either commit or rollback, when the entire batch has been          * processed. The default behavior (false) is to commit all the          * previously successfully processed messages, and only rollback the          * last failed message.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|transacted (String transacted)
specifier|default
name|JpaEndpointConsumerBuilder
name|transacted
parameter_list|(
name|String
name|transacted
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"transacted"
argument_list|,
name|transacted
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( int backoffErrorThreshold)
specifier|default
name|JpaEndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|int
name|backoffErrorThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( String backoffErrorThreshold)
specifier|default
name|JpaEndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|String
name|backoffErrorThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( int backoffIdleThreshold)
specifier|default
name|JpaEndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|int
name|backoffIdleThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( String backoffIdleThreshold)
specifier|default
name|JpaEndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|String
name|backoffIdleThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( int backoffMultiplier)
specifier|default
name|JpaEndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|int
name|backoffMultiplier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( String backoffMultiplier)
specifier|default
name|JpaEndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|String
name|backoffMultiplier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (long delay)
specifier|default
name|JpaEndpointConsumerBuilder
name|delay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (String delay)
specifier|default
name|JpaEndpointConsumerBuilder
name|delay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy (boolean greedy)
specifier|default
name|JpaEndpointConsumerBuilder
name|greedy
parameter_list|(
name|boolean
name|greedy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy (String greedy)
specifier|default
name|JpaEndpointConsumerBuilder
name|greedy
parameter_list|(
name|String
name|greedy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay (long initialDelay)
specifier|default
name|JpaEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|long
name|initialDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay (String initialDelay)
specifier|default
name|JpaEndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|String
name|initialDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option is a:<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( LoggingLevel runLoggingLevel)
specifier|default
name|JpaEndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|LoggingLevel
name|runLoggingLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( String runLoggingLevel)
specifier|default
name|JpaEndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|String
name|runLoggingLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option is a:          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( ScheduledExecutorService scheduledExecutorService)
specifier|default
name|JpaEndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|ScheduledExecutorService
name|scheduledExecutorService
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option will be converted to a          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( String scheduledExecutorService)
specifier|default
name|JpaEndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|String
name|scheduledExecutorService
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a cron scheduler from either camel-spring or camel-quartz          * component.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: scheduler          */
DECL|method|scheduler (String scheduler)
specifier|default
name|JpaEndpointConsumerBuilder
name|scheduler
parameter_list|(
name|String
name|scheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduler"
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz, Spring based scheduler.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( Map<String, Object> schedulerProperties)
specifier|default
name|JpaEndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|schedulerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz, Spring based scheduler.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( String schedulerProperties)
specifier|default
name|JpaEndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|String
name|schedulerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler (boolean startScheduler)
specifier|default
name|JpaEndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|boolean
name|startScheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler (String startScheduler)
specifier|default
name|JpaEndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|String
name|startScheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option is a:<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit (TimeUnit timeUnit)
specifier|default
name|JpaEndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option will be converted to a          *<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit (String timeUnit)
specifier|default
name|JpaEndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|String
name|timeUnit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay (boolean useFixedDelay)
specifier|default
name|JpaEndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|boolean
name|useFixedDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay (String useFixedDelay)
specifier|default
name|JpaEndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|String
name|useFixedDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the JPA component.      */
DECL|interface|AdvancedJpaEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedJpaEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|JpaEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|JpaEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedJpaEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedJpaEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedJpaEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedJpaEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This key/value mapping is used for building the query parameters. It          * is expected to be of the generic type java.util.Map where the keys          * are the named parameters of a given JPA query and the values are          * their corresponding effective values you want to select for. When          * it's used for producer, Simple expression can be used as a parameter          * value. It allows you to retrieve parameter values from the message          * body, header and etc.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: consumer (advanced)          */
DECL|method|parameters ( Map<String, Object> parameters)
specifier|default
name|AdvancedJpaEndpointConsumerBuilder
name|parameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"parameters"
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This key/value mapping is used for building the query parameters. It          * is expected to be of the generic type java.util.Map where the keys          * are the named parameters of a given JPA query and the values are          * their corresponding effective values you want to select for. When          * it's used for producer, Simple expression can be used as a parameter          * value. It allows you to retrieve parameter values from the message          * body, header and etc.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|parameters (String parameters)
specifier|default
name|AdvancedJpaEndpointConsumerBuilder
name|parameters
parameter_list|(
name|String
name|parameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"parameters"
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option is a:          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( PollingConsumerPollStrategy pollStrategy)
specifier|default
name|AdvancedJpaEndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|PollingConsumerPollStrategy
name|pollStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option will be converted to a          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( String pollStrategy)
specifier|default
name|AdvancedJpaEndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|String
name|pollStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJpaEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJpaEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Additional properties for the entity manager to use.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|entityManagerProperties ( Map<String, Object> entityManagerProperties)
specifier|default
name|AdvancedJpaEndpointConsumerBuilder
name|entityManagerProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entityManagerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"entityManagerProperties"
argument_list|,
name|entityManagerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Additional properties for the entity manager to use.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|entityManagerProperties ( String entityManagerProperties)
specifier|default
name|AdvancedJpaEndpointConsumerBuilder
name|entityManagerProperties
parameter_list|(
name|String
name|entityManagerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"entityManagerProperties"
argument_list|,
name|entityManagerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use Spring's SharedEntityManager for the          * consumer/producer. Note in most cases joinTransaction should be set          * to false as this is not an EXTENDED EntityManager.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|sharedEntityManager ( boolean sharedEntityManager)
specifier|default
name|AdvancedJpaEndpointConsumerBuilder
name|sharedEntityManager
parameter_list|(
name|boolean
name|sharedEntityManager
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sharedEntityManager"
argument_list|,
name|sharedEntityManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use Spring's SharedEntityManager for the          * consumer/producer. Note in most cases joinTransaction should be set          * to false as this is not an EXTENDED EntityManager.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|sharedEntityManager ( String sharedEntityManager)
specifier|default
name|AdvancedJpaEndpointConsumerBuilder
name|sharedEntityManager
parameter_list|(
name|String
name|sharedEntityManager
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sharedEntityManager"
argument_list|,
name|sharedEntityManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedJpaEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedJpaEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the JPA component.      */
DECL|interface|JpaEndpointProducerBuilder
specifier|public
interface|interface
name|JpaEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJpaEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJpaEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The camel-jpa component will join transaction by default. You can use          * this option to turn this off, for example if you use LOCAL_RESOURCE          * and join transaction doesn't work with your JPA provider. This option          * can also be set globally on the JpaComponent, instead of having to          * set it on all endpoints.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|joinTransaction ( boolean joinTransaction)
specifier|default
name|JpaEndpointProducerBuilder
name|joinTransaction
parameter_list|(
name|boolean
name|joinTransaction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"joinTransaction"
argument_list|,
name|joinTransaction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The camel-jpa component will join transaction by default. You can use          * this option to turn this off, for example if you use LOCAL_RESOURCE          * and join transaction doesn't work with your JPA provider. This option          * can also be set globally on the JpaComponent, instead of having to          * set it on all endpoints.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|joinTransaction ( String joinTransaction)
specifier|default
name|JpaEndpointProducerBuilder
name|joinTransaction
parameter_list|(
name|String
name|joinTransaction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"joinTransaction"
argument_list|,
name|joinTransaction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the maximum number of results to retrieve on the Query.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maximumResults (int maximumResults)
specifier|default
name|JpaEndpointProducerBuilder
name|maximumResults
parameter_list|(
name|int
name|maximumResults
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maximumResults"
argument_list|,
name|maximumResults
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the maximum number of results to retrieve on the Query.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maximumResults (String maximumResults)
specifier|default
name|JpaEndpointProducerBuilder
name|maximumResults
parameter_list|(
name|String
name|maximumResults
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maximumResults"
argument_list|,
name|maximumResults
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a named query.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|namedQuery (String namedQuery)
specifier|default
name|JpaEndpointProducerBuilder
name|namedQuery
parameter_list|(
name|String
name|namedQuery
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"namedQuery"
argument_list|,
name|namedQuery
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom native query. You may want to use the option          * resultClass also when using native queries.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|nativeQuery (String nativeQuery)
specifier|default
name|JpaEndpointProducerBuilder
name|nativeQuery
parameter_list|(
name|String
name|nativeQuery
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nativeQuery"
argument_list|,
name|nativeQuery
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The JPA persistence unit used by default.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: common          */
DECL|method|persistenceUnit ( String persistenceUnit)
specifier|default
name|JpaEndpointProducerBuilder
name|persistenceUnit
parameter_list|(
name|String
name|persistenceUnit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"persistenceUnit"
argument_list|,
name|persistenceUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom query.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|query (String query)
specifier|default
name|JpaEndpointProducerBuilder
name|query
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"query"
argument_list|,
name|query
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the type of the returned payload (we will call          * entityManager.createNativeQuery(nativeQuery, resultClass) instead of          * entityManager.createNativeQuery(nativeQuery)). Without this option,          * we will return an object array. Only has an affect when using in          * conjunction with native query when consuming data.          *           * The option is a:<code>java.lang.Class&lt;java.lang.Object&gt;</code>          * type.          *           * Group: common          */
DECL|method|resultClass (Class<Object> resultClass)
specifier|default
name|JpaEndpointProducerBuilder
name|resultClass
parameter_list|(
name|Class
argument_list|<
name|Object
argument_list|>
name|resultClass
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"resultClass"
argument_list|,
name|resultClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the type of the returned payload (we will call          * entityManager.createNativeQuery(nativeQuery, resultClass) instead of          * entityManager.createNativeQuery(nativeQuery)). Without this option,          * we will return an object array. Only has an affect when using in          * conjunction with native query when consuming data.          *           * The option will be converted to a          *<code>java.lang.Class&lt;java.lang.Object&gt;</code> type.          *           * Group: common          */
DECL|method|resultClass (String resultClass)
specifier|default
name|JpaEndpointProducerBuilder
name|resultClass
parameter_list|(
name|String
name|resultClass
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"resultClass"
argument_list|,
name|resultClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled then the producer will find a single entity by using the          * message body as key and entityType as the class type. This can be          * used instead of a query to find a single entity.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|findEntity (boolean findEntity)
specifier|default
name|JpaEndpointProducerBuilder
name|findEntity
parameter_list|(
name|boolean
name|findEntity
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"findEntity"
argument_list|,
name|findEntity
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled then the producer will find a single entity by using the          * message body as key and entityType as the class type. This can be          * used instead of a query to find a single entity.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|findEntity (String findEntity)
specifier|default
name|JpaEndpointProducerBuilder
name|findEntity
parameter_list|(
name|String
name|findEntity
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"findEntity"
argument_list|,
name|findEntity
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Flushes the EntityManager after the entity bean has been persisted.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|flushOnSend (boolean flushOnSend)
specifier|default
name|JpaEndpointProducerBuilder
name|flushOnSend
parameter_list|(
name|boolean
name|flushOnSend
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"flushOnSend"
argument_list|,
name|flushOnSend
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Flushes the EntityManager after the entity bean has been persisted.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|flushOnSend (String flushOnSend)
specifier|default
name|JpaEndpointProducerBuilder
name|flushOnSend
parameter_list|(
name|String
name|flushOnSend
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"flushOnSend"
argument_list|,
name|flushOnSend
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|JpaEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|JpaEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Indicates to use entityManager.remove(entity).          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|remove (boolean remove)
specifier|default
name|JpaEndpointProducerBuilder
name|remove
parameter_list|(
name|boolean
name|remove
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"remove"
argument_list|,
name|remove
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Indicates to use entityManager.remove(entity).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|remove (String remove)
specifier|default
name|JpaEndpointProducerBuilder
name|remove
parameter_list|(
name|String
name|remove
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"remove"
argument_list|,
name|remove
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure whether to use executeUpdate() when producer executes a          * query. When you use INSERT, UPDATE or DELETE statement as a named          * query, you need to specify this option to 'true'.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: producer          */
DECL|method|useExecuteUpdate ( Boolean useExecuteUpdate)
specifier|default
name|JpaEndpointProducerBuilder
name|useExecuteUpdate
parameter_list|(
name|Boolean
name|useExecuteUpdate
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useExecuteUpdate"
argument_list|,
name|useExecuteUpdate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure whether to use executeUpdate() when producer executes a          * query. When you use INSERT, UPDATE or DELETE statement as a named          * query, you need to specify this option to 'true'.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: producer          */
DECL|method|useExecuteUpdate ( String useExecuteUpdate)
specifier|default
name|JpaEndpointProducerBuilder
name|useExecuteUpdate
parameter_list|(
name|String
name|useExecuteUpdate
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useExecuteUpdate"
argument_list|,
name|useExecuteUpdate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Indicates to use entityManager.persist(entity) instead of          * entityManager.merge(entity). Note: entityManager.persist(entity)          * doesn't work for detached entities (where the EntityManager has to          * execute an UPDATE instead of an INSERT query)!.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|usePersist (boolean usePersist)
specifier|default
name|JpaEndpointProducerBuilder
name|usePersist
parameter_list|(
name|boolean
name|usePersist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"usePersist"
argument_list|,
name|usePersist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Indicates to use entityManager.persist(entity) instead of          * entityManager.merge(entity). Note: entityManager.persist(entity)          * doesn't work for detached entities (where the EntityManager has to          * execute an UPDATE instead of an INSERT query)!.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|usePersist (String usePersist)
specifier|default
name|JpaEndpointProducerBuilder
name|usePersist
parameter_list|(
name|String
name|usePersist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"usePersist"
argument_list|,
name|usePersist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the JPA component.      */
DECL|interface|AdvancedJpaEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedJpaEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|JpaEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|JpaEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * If set to true, then Camel will use the EntityManager from the header          * JpaConstants.ENTITY_MANAGER instead of the configured entity manager          * on the component/endpoint. This allows end users to control which          * entity manager will be in use.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer (advanced)          */
DECL|method|usePassedInEntityManager ( boolean usePassedInEntityManager)
specifier|default
name|AdvancedJpaEndpointProducerBuilder
name|usePassedInEntityManager
parameter_list|(
name|boolean
name|usePassedInEntityManager
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"usePassedInEntityManager"
argument_list|,
name|usePassedInEntityManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set to true, then Camel will use the EntityManager from the header          * JpaConstants.ENTITY_MANAGER instead of the configured entity manager          * on the component/endpoint. This allows end users to control which          * entity manager will be in use.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer (advanced)          */
DECL|method|usePassedInEntityManager ( String usePassedInEntityManager)
specifier|default
name|AdvancedJpaEndpointProducerBuilder
name|usePassedInEntityManager
parameter_list|(
name|String
name|usePassedInEntityManager
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"usePassedInEntityManager"
argument_list|,
name|usePassedInEntityManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJpaEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJpaEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Additional properties for the entity manager to use.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|entityManagerProperties ( Map<String, Object> entityManagerProperties)
specifier|default
name|AdvancedJpaEndpointProducerBuilder
name|entityManagerProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entityManagerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"entityManagerProperties"
argument_list|,
name|entityManagerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Additional properties for the entity manager to use.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|entityManagerProperties ( String entityManagerProperties)
specifier|default
name|AdvancedJpaEndpointProducerBuilder
name|entityManagerProperties
parameter_list|(
name|String
name|entityManagerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"entityManagerProperties"
argument_list|,
name|entityManagerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use Spring's SharedEntityManager for the          * consumer/producer. Note in most cases joinTransaction should be set          * to false as this is not an EXTENDED EntityManager.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|sharedEntityManager ( boolean sharedEntityManager)
specifier|default
name|AdvancedJpaEndpointProducerBuilder
name|sharedEntityManager
parameter_list|(
name|boolean
name|sharedEntityManager
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sharedEntityManager"
argument_list|,
name|sharedEntityManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use Spring's SharedEntityManager for the          * consumer/producer. Note in most cases joinTransaction should be set          * to false as this is not an EXTENDED EntityManager.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|sharedEntityManager ( String sharedEntityManager)
specifier|default
name|AdvancedJpaEndpointProducerBuilder
name|sharedEntityManager
parameter_list|(
name|String
name|sharedEntityManager
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sharedEntityManager"
argument_list|,
name|sharedEntityManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedJpaEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedJpaEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the JPA component.      */
DECL|interface|JpaEndpointBuilder
specifier|public
interface|interface
name|JpaEndpointBuilder
extends|extends
name|JpaEndpointConsumerBuilder
extends|,
name|JpaEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJpaEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJpaEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The camel-jpa component will join transaction by default. You can use          * this option to turn this off, for example if you use LOCAL_RESOURCE          * and join transaction doesn't work with your JPA provider. This option          * can also be set globally on the JpaComponent, instead of having to          * set it on all endpoints.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|joinTransaction (boolean joinTransaction)
specifier|default
name|JpaEndpointBuilder
name|joinTransaction
parameter_list|(
name|boolean
name|joinTransaction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"joinTransaction"
argument_list|,
name|joinTransaction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The camel-jpa component will join transaction by default. You can use          * this option to turn this off, for example if you use LOCAL_RESOURCE          * and join transaction doesn't work with your JPA provider. This option          * can also be set globally on the JpaComponent, instead of having to          * set it on all endpoints.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|joinTransaction (String joinTransaction)
specifier|default
name|JpaEndpointBuilder
name|joinTransaction
parameter_list|(
name|String
name|joinTransaction
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"joinTransaction"
argument_list|,
name|joinTransaction
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the maximum number of results to retrieve on the Query.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|maximumResults (int maximumResults)
specifier|default
name|JpaEndpointBuilder
name|maximumResults
parameter_list|(
name|int
name|maximumResults
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maximumResults"
argument_list|,
name|maximumResults
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the maximum number of results to retrieve on the Query.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|maximumResults (String maximumResults)
specifier|default
name|JpaEndpointBuilder
name|maximumResults
parameter_list|(
name|String
name|maximumResults
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maximumResults"
argument_list|,
name|maximumResults
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a named query.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|namedQuery (String namedQuery)
specifier|default
name|JpaEndpointBuilder
name|namedQuery
parameter_list|(
name|String
name|namedQuery
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"namedQuery"
argument_list|,
name|namedQuery
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom native query. You may want to use the option          * resultClass also when using native queries.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|nativeQuery (String nativeQuery)
specifier|default
name|JpaEndpointBuilder
name|nativeQuery
parameter_list|(
name|String
name|nativeQuery
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"nativeQuery"
argument_list|,
name|nativeQuery
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The JPA persistence unit used by default.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: common          */
DECL|method|persistenceUnit (String persistenceUnit)
specifier|default
name|JpaEndpointBuilder
name|persistenceUnit
parameter_list|(
name|String
name|persistenceUnit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"persistenceUnit"
argument_list|,
name|persistenceUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom query.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|query (String query)
specifier|default
name|JpaEndpointBuilder
name|query
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"query"
argument_list|,
name|query
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the type of the returned payload (we will call          * entityManager.createNativeQuery(nativeQuery, resultClass) instead of          * entityManager.createNativeQuery(nativeQuery)). Without this option,          * we will return an object array. Only has an affect when using in          * conjunction with native query when consuming data.          *           * The option is a:<code>java.lang.Class&lt;java.lang.Object&gt;</code>          * type.          *           * Group: common          */
DECL|method|resultClass (Class<Object> resultClass)
specifier|default
name|JpaEndpointBuilder
name|resultClass
parameter_list|(
name|Class
argument_list|<
name|Object
argument_list|>
name|resultClass
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"resultClass"
argument_list|,
name|resultClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines the type of the returned payload (we will call          * entityManager.createNativeQuery(nativeQuery, resultClass) instead of          * entityManager.createNativeQuery(nativeQuery)). Without this option,          * we will return an object array. Only has an affect when using in          * conjunction with native query when consuming data.          *           * The option will be converted to a          *<code>java.lang.Class&lt;java.lang.Object&gt;</code> type.          *           * Group: common          */
DECL|method|resultClass (String resultClass)
specifier|default
name|JpaEndpointBuilder
name|resultClass
parameter_list|(
name|String
name|resultClass
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"resultClass"
argument_list|,
name|resultClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the JPA component.      */
DECL|interface|AdvancedJpaEndpointBuilder
specifier|public
interface|interface
name|AdvancedJpaEndpointBuilder
extends|extends
name|AdvancedJpaEndpointConsumerBuilder
extends|,
name|AdvancedJpaEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|JpaEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|JpaEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJpaEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJpaEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Additional properties for the entity manager to use.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: advanced          */
DECL|method|entityManagerProperties ( Map<String, Object> entityManagerProperties)
specifier|default
name|AdvancedJpaEndpointBuilder
name|entityManagerProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entityManagerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"entityManagerProperties"
argument_list|,
name|entityManagerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Additional properties for the entity manager to use.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: advanced          */
DECL|method|entityManagerProperties ( String entityManagerProperties)
specifier|default
name|AdvancedJpaEndpointBuilder
name|entityManagerProperties
parameter_list|(
name|String
name|entityManagerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"entityManagerProperties"
argument_list|,
name|entityManagerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use Spring's SharedEntityManager for the          * consumer/producer. Note in most cases joinTransaction should be set          * to false as this is not an EXTENDED EntityManager.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|sharedEntityManager ( boolean sharedEntityManager)
specifier|default
name|AdvancedJpaEndpointBuilder
name|sharedEntityManager
parameter_list|(
name|boolean
name|sharedEntityManager
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sharedEntityManager"
argument_list|,
name|sharedEntityManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use Spring's SharedEntityManager for the          * consumer/producer. Note in most cases joinTransaction should be set          * to false as this is not an EXTENDED EntityManager.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|sharedEntityManager ( String sharedEntityManager)
specifier|default
name|AdvancedJpaEndpointBuilder
name|sharedEntityManager
parameter_list|(
name|String
name|sharedEntityManager
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sharedEntityManager"
argument_list|,
name|sharedEntityManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedJpaEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedJpaEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for<code>javax.persistence.LockModeType</code> enum.      */
DECL|enum|LockModeType
enum|enum
name|LockModeType
block|{
DECL|enumConstant|READ
name|READ
block|,
DECL|enumConstant|WRITE
name|WRITE
block|,
DECL|enumConstant|OPTIMISTIC
name|OPTIMISTIC
block|,
DECL|enumConstant|OPTIMISTIC_FORCE_INCREMENT
name|OPTIMISTIC_FORCE_INCREMENT
block|,
DECL|enumConstant|PESSIMISTIC_READ
name|PESSIMISTIC_READ
block|,
DECL|enumConstant|PESSIMISTIC_WRITE
name|PESSIMISTIC_WRITE
block|,
DECL|enumConstant|PESSIMISTIC_FORCE_INCREMENT
name|PESSIMISTIC_FORCE_INCREMENT
block|,
DECL|enumConstant|NONE
name|NONE
block|;     }
comment|/**      * JPA (camel-jpa)      * The jpa component enables you to store and retrieve Java objects from      * databases using JPA.      *       * Category: database,sql      * Available as of version: 1.0      * Maven coordinates: org.apache.camel:camel-jpa      *       * Syntax:<code>jpa:entityType</code>      *       * Path parameter: entityType (required)      * The JPA annotated class to use as entity.      */
DECL|method|jpa (String path)
specifier|default
name|JpaEndpointBuilder
name|jpa
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|JpaEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|JpaEndpointBuilder
implements|,
name|AdvancedJpaEndpointBuilder
block|{
specifier|public
name|JpaEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"jpa"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|JpaEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

