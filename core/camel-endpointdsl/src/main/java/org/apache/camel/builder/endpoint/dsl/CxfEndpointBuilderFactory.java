begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_comment
comment|/**  * The cxf component is used for SOAP WebServices using Apache CXF.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|CxfEndpointBuilderFactory
specifier|public
interface|interface
name|CxfEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the CXF component.      */
DECL|interface|CxfEndpointConsumerBuilder
specifier|public
interface|interface
name|CxfEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCxfEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To lookup an existing configured CxfEndpoint. Must used bean: as          * prefix.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|beanId (String beanId)
specifier|default
name|CxfEndpointConsumerBuilder
name|beanId
parameter_list|(
name|String
name|beanId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"beanId"
argument_list|,
name|beanId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The service publish address.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|address (String address)
specifier|default
name|CxfEndpointConsumerBuilder
name|address
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"address"
argument_list|,
name|address
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The data type messages supported by the CXF endpoint.          * The option is a          *<code>org.apache.camel.component.cxf.DataFormat</code> type.          * @group common          */
DECL|method|dataFormat (DataFormat dataFormat)
specifier|default
name|CxfEndpointConsumerBuilder
name|dataFormat
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataFormat"
argument_list|,
name|dataFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The data type messages supported by the CXF endpoint.          * The option will be converted to a          *<code>org.apache.camel.component.cxf.DataFormat</code> type.          * @group common          */
DECL|method|dataFormat (String dataFormat)
specifier|default
name|CxfEndpointConsumerBuilder
name|dataFormat
parameter_list|(
name|String
name|dataFormat
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataFormat"
argument_list|,
name|dataFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The WSDL style that describes how parameters are represented in the          * SOAP body. If the value is false, CXF will chose the document-literal          * unwrapped style, If the value is true, CXF will chose the          * document-literal wrapped style.          * The option is a<code>java.lang.Boolean</code> type.          * @group common          */
DECL|method|wrappedStyle (Boolean wrappedStyle)
specifier|default
name|CxfEndpointConsumerBuilder
name|wrappedStyle
parameter_list|(
name|Boolean
name|wrappedStyle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"wrappedStyle"
argument_list|,
name|wrappedStyle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The WSDL style that describes how parameters are represented in the          * SOAP body. If the value is false, CXF will chose the document-literal          * unwrapped style, If the value is true, CXF will chose the          * document-literal wrapped style.          * The option will be converted to a<code>java.lang.Boolean</code>          * type.          * @group common          */
DECL|method|wrappedStyle (String wrappedStyle)
specifier|default
name|CxfEndpointConsumerBuilder
name|wrappedStyle
parameter_list|(
name|String
name|wrappedStyle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"wrappedStyle"
argument_list|,
name|wrappedStyle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|CxfEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|CxfEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option enables CXF Logging Feature which writes inbound and          * outbound SOAP messages to log.          * The option is a<code>boolean</code> type.          * @group logging          */
DECL|method|loggingFeatureEnabled ( boolean loggingFeatureEnabled)
specifier|default
name|CxfEndpointConsumerBuilder
name|loggingFeatureEnabled
parameter_list|(
name|boolean
name|loggingFeatureEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFeatureEnabled"
argument_list|,
name|loggingFeatureEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option enables CXF Logging Feature which writes inbound and          * outbound SOAP messages to log.          * The option will be converted to a<code>boolean</code> type.          * @group logging          */
DECL|method|loggingFeatureEnabled ( String loggingFeatureEnabled)
specifier|default
name|CxfEndpointConsumerBuilder
name|loggingFeatureEnabled
parameter_list|(
name|String
name|loggingFeatureEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFeatureEnabled"
argument_list|,
name|loggingFeatureEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To limit the total size of number of bytes the logger will output          * when logging feature has been enabled and -1 for no limit.          * The option is a<code>int</code> type.          * @group logging          */
DECL|method|loggingSizeLimit (int loggingSizeLimit)
specifier|default
name|CxfEndpointConsumerBuilder
name|loggingSizeLimit
parameter_list|(
name|int
name|loggingSizeLimit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingSizeLimit"
argument_list|,
name|loggingSizeLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To limit the total size of number of bytes the logger will output          * when logging feature has been enabled and -1 for no limit.          * The option will be converted to a<code>int</code> type.          * @group logging          */
DECL|method|loggingSizeLimit ( String loggingSizeLimit)
specifier|default
name|CxfEndpointConsumerBuilder
name|loggingSizeLimit
parameter_list|(
name|String
name|loggingSizeLimit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingSizeLimit"
argument_list|,
name|loggingSizeLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option controls whether the PhaseInterceptorChain skips logging          * the Fault that it catches.          * The option is a<code>boolean</code> type.          * @group logging          */
DECL|method|skipFaultLogging ( boolean skipFaultLogging)
specifier|default
name|CxfEndpointConsumerBuilder
name|skipFaultLogging
parameter_list|(
name|boolean
name|skipFaultLogging
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipFaultLogging"
argument_list|,
name|skipFaultLogging
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option controls whether the PhaseInterceptorChain skips logging          * the Fault that it catches.          * The option will be converted to a<code>boolean</code> type.          * @group logging          */
DECL|method|skipFaultLogging ( String skipFaultLogging)
specifier|default
name|CxfEndpointConsumerBuilder
name|skipFaultLogging
parameter_list|(
name|String
name|skipFaultLogging
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipFaultLogging"
argument_list|,
name|skipFaultLogging
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the basic authentication information of          * password for the CXF client.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|password (String password)
specifier|default
name|CxfEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the basic authentication information of          * username for the CXF client.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|username (String username)
specifier|default
name|CxfEndpointConsumerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The bindingId for the service model to use.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|bindingId (String bindingId)
specifier|default
name|CxfEndpointConsumerBuilder
name|bindingId
parameter_list|(
name|String
name|bindingId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bindingId"
argument_list|,
name|bindingId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The endpoint name this service is implementing, it maps to the          * wsdl:portname. In the format of ns:PORT_NAME where ns is a namespace          * prefix valid at this scope.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|portName (String portName)
specifier|default
name|CxfEndpointConsumerBuilder
name|portName
parameter_list|(
name|String
name|portName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"portName"
argument_list|,
name|portName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option can override the endpointUrl that published from the WSDL          * which can be accessed with service address url plus wsd.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|publishedEndpointUrl ( String publishedEndpointUrl)
specifier|default
name|CxfEndpointConsumerBuilder
name|publishedEndpointUrl
parameter_list|(
name|String
name|publishedEndpointUrl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publishedEndpointUrl"
argument_list|,
name|publishedEndpointUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The class name of the SEI (Service Endpoint Interface) class which          * could have JSR181 annotation or not.          * The option is a<code>java.lang.Class&lt;java.lang.Object&gt;</code>          * type.          * @group service          */
DECL|method|serviceClass ( Class<Object> serviceClass)
specifier|default
name|CxfEndpointConsumerBuilder
name|serviceClass
parameter_list|(
name|Class
argument_list|<
name|Object
argument_list|>
name|serviceClass
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceClass"
argument_list|,
name|serviceClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The class name of the SEI (Service Endpoint Interface) class which          * could have JSR181 annotation or not.          * The option will be converted to a          *<code>java.lang.Class&lt;java.lang.Object&gt;</code> type.          * @group service          */
DECL|method|serviceClass (String serviceClass)
specifier|default
name|CxfEndpointConsumerBuilder
name|serviceClass
parameter_list|(
name|String
name|serviceClass
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceClass"
argument_list|,
name|serviceClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The service name this service is implementing, it maps to the          * wsdl:servicename.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|serviceName (String serviceName)
specifier|default
name|CxfEndpointConsumerBuilder
name|serviceName
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceName"
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The location of the WSDL. Can be on the classpath, file system, or be          * hosted remotely.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|wsdlURL (String wsdlURL)
specifier|default
name|CxfEndpointConsumerBuilder
name|wsdlURL
parameter_list|(
name|String
name|wsdlURL
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"wsdlURL"
argument_list|,
name|wsdlURL
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the CXF component.      */
DECL|interface|AdvancedCxfEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedCxfEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CxfEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CxfEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option controls whether the CXF component, when running in          * PAYLOAD mode, will DOM parse the incoming messages into DOM Elements          * or keep the payload as a javax.xml.transform.Source object that would          * allow streaming in some cases.          * The option is a<code>java.lang.Boolean</code> type.          * @group advanced          */
DECL|method|allowStreaming ( Boolean allowStreaming)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|allowStreaming
parameter_list|(
name|Boolean
name|allowStreaming
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowStreaming"
argument_list|,
name|allowStreaming
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option controls whether the CXF component, when running in          * PAYLOAD mode, will DOM parse the incoming messages into DOM Elements          * or keep the payload as a javax.xml.transform.Source object that would          * allow streaming in some cases.          * The option will be converted to a<code>java.lang.Boolean</code>          * type.          * @group advanced          */
DECL|method|allowStreaming ( String allowStreaming)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|allowStreaming
parameter_list|(
name|String
name|allowStreaming
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowStreaming"
argument_list|,
name|allowStreaming
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured CXF Bus.          * The option is a<code>org.apache.cxf.Bus</code> type.          * @group advanced          */
DECL|method|bus (Object bus)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|bus
parameter_list|(
name|Object
name|bus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bus"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured CXF Bus.          * The option will be converted to a<code>org.apache.cxf.Bus</code>          * type.          * @group advanced          */
DECL|method|bus (String bus)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|bus
parameter_list|(
name|String
name|bus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bus"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the CXF continuation timeout which could          * be used in CxfConsumer by default when the CXF server is using Jetty          * or Servlet transport.          * The option is a<code>long</code> type.          * @group advanced          */
DECL|method|continuationTimeout ( long continuationTimeout)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|continuationTimeout
parameter_list|(
name|long
name|continuationTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"continuationTimeout"
argument_list|,
name|continuationTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the CXF continuation timeout which could          * be used in CxfConsumer by default when the CXF server is using Jetty          * or Servlet transport.          * The option will be converted to a<code>long</code> type.          * @group advanced          */
DECL|method|continuationTimeout ( String continuationTimeout)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|continuationTimeout
parameter_list|(
name|String
name|continuationTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"continuationTimeout"
argument_list|,
name|continuationTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CxfBinding to control the binding between Camel          * Message and CXF Message.          * The option is a          *<code>org.apache.camel.component.cxf.CxfBinding</code> type.          * @group advanced          */
DECL|method|cxfBinding (Object cxfBinding)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|cxfBinding
parameter_list|(
name|Object
name|cxfBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfBinding"
argument_list|,
name|cxfBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CxfBinding to control the binding between Camel          * Message and CXF Message.          * The option will be converted to a          *<code>org.apache.camel.component.cxf.CxfBinding</code> type.          * @group advanced          */
DECL|method|cxfBinding (String cxfBinding)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|cxfBinding
parameter_list|(
name|String
name|cxfBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfBinding"
argument_list|,
name|cxfBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option could apply the implementation of          * org.apache.camel.component.cxf.CxfEndpointConfigurer which supports          * to configure the CXF endpoint in programmatic way. User can configure          * the CXF server and client by implementing configure{ServerClient}          * method of CxfEndpointConfigurer.          * The option is a          *<code>org.apache.camel.component.cxf.CxfEndpointConfigurer</code>          * type.          * @group advanced          */
DECL|method|cxfEndpointConfigurer ( Object cxfEndpointConfigurer)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|cxfEndpointConfigurer
parameter_list|(
name|Object
name|cxfEndpointConfigurer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfEndpointConfigurer"
argument_list|,
name|cxfEndpointConfigurer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option could apply the implementation of          * org.apache.camel.component.cxf.CxfEndpointConfigurer which supports          * to configure the CXF endpoint in programmatic way. User can configure          * the CXF server and client by implementing configure{ServerClient}          * method of CxfEndpointConfigurer.          * The option will be converted to a          *<code>org.apache.camel.component.cxf.CxfEndpointConfigurer</code>          * type.          * @group advanced          */
DECL|method|cxfEndpointConfigurer ( String cxfEndpointConfigurer)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|cxfEndpointConfigurer
parameter_list|(
name|String
name|cxfEndpointConfigurer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfEndpointConfigurer"
argument_list|,
name|cxfEndpointConfigurer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will set the default bus when CXF endpoint create a bus by itself.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|defaultBus (boolean defaultBus)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|defaultBus
parameter_list|(
name|boolean
name|defaultBus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultBus"
argument_list|,
name|defaultBus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will set the default bus when CXF endpoint create a bus by itself.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|defaultBus (String defaultBus)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|defaultBus
parameter_list|(
name|String
name|defaultBus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultBus"
argument_list|,
name|defaultBus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option is a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to merge protocol headers. If enabled then propagating          * headers between Camel and CXF becomes more consistent and similar.          * For more details see CAMEL-6393.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|mergeProtocolHeaders ( boolean mergeProtocolHeaders)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|mergeProtocolHeaders
parameter_list|(
name|boolean
name|mergeProtocolHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mergeProtocolHeaders"
argument_list|,
name|mergeProtocolHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to merge protocol headers. If enabled then propagating          * headers between Camel and CXF becomes more consistent and similar.          * For more details see CAMEL-6393.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|mergeProtocolHeaders ( String mergeProtocolHeaders)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|mergeProtocolHeaders
parameter_list|(
name|String
name|mergeProtocolHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mergeProtocolHeaders"
argument_list|,
name|mergeProtocolHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To enable MTOM (attachments). This requires to use POJO or PAYLOAD          * data format mode.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|mtomEnabled ( boolean mtomEnabled)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|mtomEnabled
parameter_list|(
name|boolean
name|mtomEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mtomEnabled"
argument_list|,
name|mtomEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To enable MTOM (attachments). This requires to use POJO or PAYLOAD          * data format mode.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|mtomEnabled ( String mtomEnabled)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|mtomEnabled
parameter_list|(
name|String
name|mtomEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mtomEnabled"
argument_list|,
name|mtomEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set additional CXF options using the key/value pairs from the Map.          * For example to turn on stacktraces in SOAP faults,          * properties.faultStackTraceEnabled=true.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          * @group advanced          */
DECL|method|properties ( Map<String, Object> properties)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|properties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"properties"
argument_list|,
name|properties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set additional CXF options using the key/value pairs from the Map.          * For example to turn on stacktraces in SOAP faults,          * properties.faultStackTraceEnabled=true.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          * @group advanced          */
DECL|method|properties (String properties)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|properties
parameter_list|(
name|String
name|properties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"properties"
argument_list|,
name|properties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether SOAP message validation should be disabled.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|skipPayloadMessagePartCheck ( boolean skipPayloadMessagePartCheck)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|skipPayloadMessagePartCheck
parameter_list|(
name|boolean
name|skipPayloadMessagePartCheck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipPayloadMessagePartCheck"
argument_list|,
name|skipPayloadMessagePartCheck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether SOAP message validation should be disabled.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|skipPayloadMessagePartCheck ( String skipPayloadMessagePartCheck)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|skipPayloadMessagePartCheck
parameter_list|(
name|String
name|skipPayloadMessagePartCheck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipPayloadMessagePartCheck"
argument_list|,
name|skipPayloadMessagePartCheck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedCxfEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the CXF component.      */
DECL|interface|CxfEndpointProducerBuilder
specifier|public
interface|interface
name|CxfEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCxfEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To lookup an existing configured CxfEndpoint. Must used bean: as          * prefix.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|beanId (String beanId)
specifier|default
name|CxfEndpointProducerBuilder
name|beanId
parameter_list|(
name|String
name|beanId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"beanId"
argument_list|,
name|beanId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The service publish address.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|address (String address)
specifier|default
name|CxfEndpointProducerBuilder
name|address
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"address"
argument_list|,
name|address
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The data type messages supported by the CXF endpoint.          * The option is a          *<code>org.apache.camel.component.cxf.DataFormat</code> type.          * @group common          */
DECL|method|dataFormat (DataFormat dataFormat)
specifier|default
name|CxfEndpointProducerBuilder
name|dataFormat
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataFormat"
argument_list|,
name|dataFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The data type messages supported by the CXF endpoint.          * The option will be converted to a          *<code>org.apache.camel.component.cxf.DataFormat</code> type.          * @group common          */
DECL|method|dataFormat (String dataFormat)
specifier|default
name|CxfEndpointProducerBuilder
name|dataFormat
parameter_list|(
name|String
name|dataFormat
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataFormat"
argument_list|,
name|dataFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The WSDL style that describes how parameters are represented in the          * SOAP body. If the value is false, CXF will chose the document-literal          * unwrapped style, If the value is true, CXF will chose the          * document-literal wrapped style.          * The option is a<code>java.lang.Boolean</code> type.          * @group common          */
DECL|method|wrappedStyle (Boolean wrappedStyle)
specifier|default
name|CxfEndpointProducerBuilder
name|wrappedStyle
parameter_list|(
name|Boolean
name|wrappedStyle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"wrappedStyle"
argument_list|,
name|wrappedStyle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The WSDL style that describes how parameters are represented in the          * SOAP body. If the value is false, CXF will chose the document-literal          * unwrapped style, If the value is true, CXF will chose the          * document-literal wrapped style.          * The option will be converted to a<code>java.lang.Boolean</code>          * type.          * @group common          */
DECL|method|wrappedStyle (String wrappedStyle)
specifier|default
name|CxfEndpointProducerBuilder
name|wrappedStyle
parameter_list|(
name|String
name|wrappedStyle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"wrappedStyle"
argument_list|,
name|wrappedStyle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure a cookie handler to maintain a HTTP session.          * The option is a          *<code>org.apache.camel.http.common.cookie.CookieHandler</code> type.          * @group producer          */
DECL|method|cookieHandler (Object cookieHandler)
specifier|default
name|CxfEndpointProducerBuilder
name|cookieHandler
parameter_list|(
name|Object
name|cookieHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cookieHandler"
argument_list|,
name|cookieHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure a cookie handler to maintain a HTTP session.          * The option will be converted to a          *<code>org.apache.camel.http.common.cookie.CookieHandler</code> type.          * @group producer          */
DECL|method|cookieHandler (String cookieHandler)
specifier|default
name|CxfEndpointProducerBuilder
name|cookieHandler
parameter_list|(
name|String
name|cookieHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cookieHandler"
argument_list|,
name|cookieHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option will set the default operationName that will be used by          * the CxfProducer which invokes the remote service.          * The option is a<code>java.lang.String</code> type.          * @group producer          */
DECL|method|defaultOperationName ( String defaultOperationName)
specifier|default
name|CxfEndpointProducerBuilder
name|defaultOperationName
parameter_list|(
name|String
name|defaultOperationName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultOperationName"
argument_list|,
name|defaultOperationName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option will set the default operationNamespace that will be used          * by the CxfProducer which invokes the remote service.          * The option is a<code>java.lang.String</code> type.          * @group producer          */
DECL|method|defaultOperationNamespace ( String defaultOperationNamespace)
specifier|default
name|CxfEndpointProducerBuilder
name|defaultOperationNamespace
parameter_list|(
name|String
name|defaultOperationNamespace
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultOperationNamespace"
argument_list|,
name|defaultOperationNamespace
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The hostname verifier to be used. Use the # notation to reference a          * HostnameVerifier from the registry.          * The option is a<code>javax.net.ssl.HostnameVerifier</code> type.          * @group producer          */
DECL|method|hostnameVerifier ( Object hostnameVerifier)
specifier|default
name|CxfEndpointProducerBuilder
name|hostnameVerifier
parameter_list|(
name|Object
name|hostnameVerifier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hostnameVerifier"
argument_list|,
name|hostnameVerifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The hostname verifier to be used. Use the # notation to reference a          * HostnameVerifier from the registry.          * The option will be converted to a          *<code>javax.net.ssl.HostnameVerifier</code> type.          * @group producer          */
DECL|method|hostnameVerifier ( String hostnameVerifier)
specifier|default
name|CxfEndpointProducerBuilder
name|hostnameVerifier
parameter_list|(
name|String
name|hostnameVerifier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hostnameVerifier"
argument_list|,
name|hostnameVerifier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|CxfEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|CxfEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Camel SSL setting reference. Use the # notation to reference the          * SSL Context.          * The option is a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group producer          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|CxfEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Camel SSL setting reference. Use the # notation to reference the          * SSL Context.          * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          * @group producer          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|CxfEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which kind of operation that CXF endpoint producer will invoke.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|wrapped (boolean wrapped)
specifier|default
name|CxfEndpointProducerBuilder
name|wrapped
parameter_list|(
name|boolean
name|wrapped
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"wrapped"
argument_list|,
name|wrapped
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which kind of operation that CXF endpoint producer will invoke.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|wrapped (String wrapped)
specifier|default
name|CxfEndpointProducerBuilder
name|wrapped
parameter_list|(
name|String
name|wrapped
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"wrapped"
argument_list|,
name|wrapped
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option enables CXF Logging Feature which writes inbound and          * outbound SOAP messages to log.          * The option is a<code>boolean</code> type.          * @group logging          */
DECL|method|loggingFeatureEnabled ( boolean loggingFeatureEnabled)
specifier|default
name|CxfEndpointProducerBuilder
name|loggingFeatureEnabled
parameter_list|(
name|boolean
name|loggingFeatureEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFeatureEnabled"
argument_list|,
name|loggingFeatureEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option enables CXF Logging Feature which writes inbound and          * outbound SOAP messages to log.          * The option will be converted to a<code>boolean</code> type.          * @group logging          */
DECL|method|loggingFeatureEnabled ( String loggingFeatureEnabled)
specifier|default
name|CxfEndpointProducerBuilder
name|loggingFeatureEnabled
parameter_list|(
name|String
name|loggingFeatureEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFeatureEnabled"
argument_list|,
name|loggingFeatureEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To limit the total size of number of bytes the logger will output          * when logging feature has been enabled and -1 for no limit.          * The option is a<code>int</code> type.          * @group logging          */
DECL|method|loggingSizeLimit (int loggingSizeLimit)
specifier|default
name|CxfEndpointProducerBuilder
name|loggingSizeLimit
parameter_list|(
name|int
name|loggingSizeLimit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingSizeLimit"
argument_list|,
name|loggingSizeLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To limit the total size of number of bytes the logger will output          * when logging feature has been enabled and -1 for no limit.          * The option will be converted to a<code>int</code> type.          * @group logging          */
DECL|method|loggingSizeLimit ( String loggingSizeLimit)
specifier|default
name|CxfEndpointProducerBuilder
name|loggingSizeLimit
parameter_list|(
name|String
name|loggingSizeLimit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingSizeLimit"
argument_list|,
name|loggingSizeLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option controls whether the PhaseInterceptorChain skips logging          * the Fault that it catches.          * The option is a<code>boolean</code> type.          * @group logging          */
DECL|method|skipFaultLogging ( boolean skipFaultLogging)
specifier|default
name|CxfEndpointProducerBuilder
name|skipFaultLogging
parameter_list|(
name|boolean
name|skipFaultLogging
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipFaultLogging"
argument_list|,
name|skipFaultLogging
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option controls whether the PhaseInterceptorChain skips logging          * the Fault that it catches.          * The option will be converted to a<code>boolean</code> type.          * @group logging          */
DECL|method|skipFaultLogging ( String skipFaultLogging)
specifier|default
name|CxfEndpointProducerBuilder
name|skipFaultLogging
parameter_list|(
name|String
name|skipFaultLogging
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipFaultLogging"
argument_list|,
name|skipFaultLogging
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the basic authentication information of          * password for the CXF client.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|password (String password)
specifier|default
name|CxfEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the basic authentication information of          * username for the CXF client.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|username (String username)
specifier|default
name|CxfEndpointProducerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The bindingId for the service model to use.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|bindingId (String bindingId)
specifier|default
name|CxfEndpointProducerBuilder
name|bindingId
parameter_list|(
name|String
name|bindingId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bindingId"
argument_list|,
name|bindingId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The endpoint name this service is implementing, it maps to the          * wsdl:portname. In the format of ns:PORT_NAME where ns is a namespace          * prefix valid at this scope.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|portName (String portName)
specifier|default
name|CxfEndpointProducerBuilder
name|portName
parameter_list|(
name|String
name|portName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"portName"
argument_list|,
name|portName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option can override the endpointUrl that published from the WSDL          * which can be accessed with service address url plus wsd.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|publishedEndpointUrl ( String publishedEndpointUrl)
specifier|default
name|CxfEndpointProducerBuilder
name|publishedEndpointUrl
parameter_list|(
name|String
name|publishedEndpointUrl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publishedEndpointUrl"
argument_list|,
name|publishedEndpointUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The class name of the SEI (Service Endpoint Interface) class which          * could have JSR181 annotation or not.          * The option is a<code>java.lang.Class&lt;java.lang.Object&gt;</code>          * type.          * @group service          */
DECL|method|serviceClass ( Class<Object> serviceClass)
specifier|default
name|CxfEndpointProducerBuilder
name|serviceClass
parameter_list|(
name|Class
argument_list|<
name|Object
argument_list|>
name|serviceClass
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceClass"
argument_list|,
name|serviceClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The class name of the SEI (Service Endpoint Interface) class which          * could have JSR181 annotation or not.          * The option will be converted to a          *<code>java.lang.Class&lt;java.lang.Object&gt;</code> type.          * @group service          */
DECL|method|serviceClass (String serviceClass)
specifier|default
name|CxfEndpointProducerBuilder
name|serviceClass
parameter_list|(
name|String
name|serviceClass
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceClass"
argument_list|,
name|serviceClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The service name this service is implementing, it maps to the          * wsdl:servicename.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|serviceName (String serviceName)
specifier|default
name|CxfEndpointProducerBuilder
name|serviceName
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceName"
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The location of the WSDL. Can be on the classpath, file system, or be          * hosted remotely.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|wsdlURL (String wsdlURL)
specifier|default
name|CxfEndpointProducerBuilder
name|wsdlURL
parameter_list|(
name|String
name|wsdlURL
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"wsdlURL"
argument_list|,
name|wsdlURL
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the CXF component.      */
DECL|interface|AdvancedCxfEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedCxfEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CxfEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CxfEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * This option controls whether the CXF component, when running in          * PAYLOAD mode, will DOM parse the incoming messages into DOM Elements          * or keep the payload as a javax.xml.transform.Source object that would          * allow streaming in some cases.          * The option is a<code>java.lang.Boolean</code> type.          * @group advanced          */
DECL|method|allowStreaming ( Boolean allowStreaming)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|allowStreaming
parameter_list|(
name|Boolean
name|allowStreaming
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowStreaming"
argument_list|,
name|allowStreaming
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option controls whether the CXF component, when running in          * PAYLOAD mode, will DOM parse the incoming messages into DOM Elements          * or keep the payload as a javax.xml.transform.Source object that would          * allow streaming in some cases.          * The option will be converted to a<code>java.lang.Boolean</code>          * type.          * @group advanced          */
DECL|method|allowStreaming ( String allowStreaming)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|allowStreaming
parameter_list|(
name|String
name|allowStreaming
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowStreaming"
argument_list|,
name|allowStreaming
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured CXF Bus.          * The option is a<code>org.apache.cxf.Bus</code> type.          * @group advanced          */
DECL|method|bus (Object bus)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|bus
parameter_list|(
name|Object
name|bus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bus"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured CXF Bus.          * The option will be converted to a<code>org.apache.cxf.Bus</code>          * type.          * @group advanced          */
DECL|method|bus (String bus)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|bus
parameter_list|(
name|String
name|bus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bus"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the CXF continuation timeout which could          * be used in CxfConsumer by default when the CXF server is using Jetty          * or Servlet transport.          * The option is a<code>long</code> type.          * @group advanced          */
DECL|method|continuationTimeout ( long continuationTimeout)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|continuationTimeout
parameter_list|(
name|long
name|continuationTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"continuationTimeout"
argument_list|,
name|continuationTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the CXF continuation timeout which could          * be used in CxfConsumer by default when the CXF server is using Jetty          * or Servlet transport.          * The option will be converted to a<code>long</code> type.          * @group advanced          */
DECL|method|continuationTimeout ( String continuationTimeout)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|continuationTimeout
parameter_list|(
name|String
name|continuationTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"continuationTimeout"
argument_list|,
name|continuationTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CxfBinding to control the binding between Camel          * Message and CXF Message.          * The option is a          *<code>org.apache.camel.component.cxf.CxfBinding</code> type.          * @group advanced          */
DECL|method|cxfBinding (Object cxfBinding)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|cxfBinding
parameter_list|(
name|Object
name|cxfBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfBinding"
argument_list|,
name|cxfBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CxfBinding to control the binding between Camel          * Message and CXF Message.          * The option will be converted to a          *<code>org.apache.camel.component.cxf.CxfBinding</code> type.          * @group advanced          */
DECL|method|cxfBinding (String cxfBinding)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|cxfBinding
parameter_list|(
name|String
name|cxfBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfBinding"
argument_list|,
name|cxfBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option could apply the implementation of          * org.apache.camel.component.cxf.CxfEndpointConfigurer which supports          * to configure the CXF endpoint in programmatic way. User can configure          * the CXF server and client by implementing configure{ServerClient}          * method of CxfEndpointConfigurer.          * The option is a          *<code>org.apache.camel.component.cxf.CxfEndpointConfigurer</code>          * type.          * @group advanced          */
DECL|method|cxfEndpointConfigurer ( Object cxfEndpointConfigurer)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|cxfEndpointConfigurer
parameter_list|(
name|Object
name|cxfEndpointConfigurer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfEndpointConfigurer"
argument_list|,
name|cxfEndpointConfigurer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option could apply the implementation of          * org.apache.camel.component.cxf.CxfEndpointConfigurer which supports          * to configure the CXF endpoint in programmatic way. User can configure          * the CXF server and client by implementing configure{ServerClient}          * method of CxfEndpointConfigurer.          * The option will be converted to a          *<code>org.apache.camel.component.cxf.CxfEndpointConfigurer</code>          * type.          * @group advanced          */
DECL|method|cxfEndpointConfigurer ( String cxfEndpointConfigurer)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|cxfEndpointConfigurer
parameter_list|(
name|String
name|cxfEndpointConfigurer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfEndpointConfigurer"
argument_list|,
name|cxfEndpointConfigurer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will set the default bus when CXF endpoint create a bus by itself.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|defaultBus (boolean defaultBus)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|defaultBus
parameter_list|(
name|boolean
name|defaultBus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultBus"
argument_list|,
name|defaultBus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will set the default bus when CXF endpoint create a bus by itself.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|defaultBus (String defaultBus)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|defaultBus
parameter_list|(
name|String
name|defaultBus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultBus"
argument_list|,
name|defaultBus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option is a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to merge protocol headers. If enabled then propagating          * headers between Camel and CXF becomes more consistent and similar.          * For more details see CAMEL-6393.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|mergeProtocolHeaders ( boolean mergeProtocolHeaders)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|mergeProtocolHeaders
parameter_list|(
name|boolean
name|mergeProtocolHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mergeProtocolHeaders"
argument_list|,
name|mergeProtocolHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to merge protocol headers. If enabled then propagating          * headers between Camel and CXF becomes more consistent and similar.          * For more details see CAMEL-6393.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|mergeProtocolHeaders ( String mergeProtocolHeaders)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|mergeProtocolHeaders
parameter_list|(
name|String
name|mergeProtocolHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mergeProtocolHeaders"
argument_list|,
name|mergeProtocolHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To enable MTOM (attachments). This requires to use POJO or PAYLOAD          * data format mode.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|mtomEnabled ( boolean mtomEnabled)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|mtomEnabled
parameter_list|(
name|boolean
name|mtomEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mtomEnabled"
argument_list|,
name|mtomEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To enable MTOM (attachments). This requires to use POJO or PAYLOAD          * data format mode.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|mtomEnabled ( String mtomEnabled)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|mtomEnabled
parameter_list|(
name|String
name|mtomEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mtomEnabled"
argument_list|,
name|mtomEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set additional CXF options using the key/value pairs from the Map.          * For example to turn on stacktraces in SOAP faults,          * properties.faultStackTraceEnabled=true.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          * @group advanced          */
DECL|method|properties ( Map<String, Object> properties)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|properties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"properties"
argument_list|,
name|properties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set additional CXF options using the key/value pairs from the Map.          * For example to turn on stacktraces in SOAP faults,          * properties.faultStackTraceEnabled=true.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          * @group advanced          */
DECL|method|properties (String properties)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|properties
parameter_list|(
name|String
name|properties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"properties"
argument_list|,
name|properties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether SOAP message validation should be disabled.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|skipPayloadMessagePartCheck ( boolean skipPayloadMessagePartCheck)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|skipPayloadMessagePartCheck
parameter_list|(
name|boolean
name|skipPayloadMessagePartCheck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipPayloadMessagePartCheck"
argument_list|,
name|skipPayloadMessagePartCheck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether SOAP message validation should be disabled.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|skipPayloadMessagePartCheck ( String skipPayloadMessagePartCheck)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|skipPayloadMessagePartCheck
parameter_list|(
name|String
name|skipPayloadMessagePartCheck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipPayloadMessagePartCheck"
argument_list|,
name|skipPayloadMessagePartCheck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedCxfEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the CXF component.      */
DECL|interface|CxfEndpointBuilder
specifier|public
interface|interface
name|CxfEndpointBuilder
extends|extends
name|CxfEndpointConsumerBuilder
extends|,
name|CxfEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCxfEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCxfEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To lookup an existing configured CxfEndpoint. Must used bean: as          * prefix.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|beanId (String beanId)
specifier|default
name|CxfEndpointBuilder
name|beanId
parameter_list|(
name|String
name|beanId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"beanId"
argument_list|,
name|beanId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The service publish address.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|address (String address)
specifier|default
name|CxfEndpointBuilder
name|address
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"address"
argument_list|,
name|address
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The data type messages supported by the CXF endpoint.          * The option is a          *<code>org.apache.camel.component.cxf.DataFormat</code> type.          * @group common          */
DECL|method|dataFormat (DataFormat dataFormat)
specifier|default
name|CxfEndpointBuilder
name|dataFormat
parameter_list|(
name|DataFormat
name|dataFormat
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataFormat"
argument_list|,
name|dataFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The data type messages supported by the CXF endpoint.          * The option will be converted to a          *<code>org.apache.camel.component.cxf.DataFormat</code> type.          * @group common          */
DECL|method|dataFormat (String dataFormat)
specifier|default
name|CxfEndpointBuilder
name|dataFormat
parameter_list|(
name|String
name|dataFormat
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dataFormat"
argument_list|,
name|dataFormat
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The WSDL style that describes how parameters are represented in the          * SOAP body. If the value is false, CXF will chose the document-literal          * unwrapped style, If the value is true, CXF will chose the          * document-literal wrapped style.          * The option is a<code>java.lang.Boolean</code> type.          * @group common          */
DECL|method|wrappedStyle (Boolean wrappedStyle)
specifier|default
name|CxfEndpointBuilder
name|wrappedStyle
parameter_list|(
name|Boolean
name|wrappedStyle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"wrappedStyle"
argument_list|,
name|wrappedStyle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The WSDL style that describes how parameters are represented in the          * SOAP body. If the value is false, CXF will chose the document-literal          * unwrapped style, If the value is true, CXF will chose the          * document-literal wrapped style.          * The option will be converted to a<code>java.lang.Boolean</code>          * type.          * @group common          */
DECL|method|wrappedStyle (String wrappedStyle)
specifier|default
name|CxfEndpointBuilder
name|wrappedStyle
parameter_list|(
name|String
name|wrappedStyle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"wrappedStyle"
argument_list|,
name|wrappedStyle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option enables CXF Logging Feature which writes inbound and          * outbound SOAP messages to log.          * The option is a<code>boolean</code> type.          * @group logging          */
DECL|method|loggingFeatureEnabled ( boolean loggingFeatureEnabled)
specifier|default
name|CxfEndpointBuilder
name|loggingFeatureEnabled
parameter_list|(
name|boolean
name|loggingFeatureEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFeatureEnabled"
argument_list|,
name|loggingFeatureEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option enables CXF Logging Feature which writes inbound and          * outbound SOAP messages to log.          * The option will be converted to a<code>boolean</code> type.          * @group logging          */
DECL|method|loggingFeatureEnabled ( String loggingFeatureEnabled)
specifier|default
name|CxfEndpointBuilder
name|loggingFeatureEnabled
parameter_list|(
name|String
name|loggingFeatureEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingFeatureEnabled"
argument_list|,
name|loggingFeatureEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To limit the total size of number of bytes the logger will output          * when logging feature has been enabled and -1 for no limit.          * The option is a<code>int</code> type.          * @group logging          */
DECL|method|loggingSizeLimit (int loggingSizeLimit)
specifier|default
name|CxfEndpointBuilder
name|loggingSizeLimit
parameter_list|(
name|int
name|loggingSizeLimit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingSizeLimit"
argument_list|,
name|loggingSizeLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To limit the total size of number of bytes the logger will output          * when logging feature has been enabled and -1 for no limit.          * The option will be converted to a<code>int</code> type.          * @group logging          */
DECL|method|loggingSizeLimit (String loggingSizeLimit)
specifier|default
name|CxfEndpointBuilder
name|loggingSizeLimit
parameter_list|(
name|String
name|loggingSizeLimit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"loggingSizeLimit"
argument_list|,
name|loggingSizeLimit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option controls whether the PhaseInterceptorChain skips logging          * the Fault that it catches.          * The option is a<code>boolean</code> type.          * @group logging          */
DECL|method|skipFaultLogging (boolean skipFaultLogging)
specifier|default
name|CxfEndpointBuilder
name|skipFaultLogging
parameter_list|(
name|boolean
name|skipFaultLogging
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipFaultLogging"
argument_list|,
name|skipFaultLogging
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option controls whether the PhaseInterceptorChain skips logging          * the Fault that it catches.          * The option will be converted to a<code>boolean</code> type.          * @group logging          */
DECL|method|skipFaultLogging (String skipFaultLogging)
specifier|default
name|CxfEndpointBuilder
name|skipFaultLogging
parameter_list|(
name|String
name|skipFaultLogging
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipFaultLogging"
argument_list|,
name|skipFaultLogging
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the basic authentication information of          * password for the CXF client.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|password (String password)
specifier|default
name|CxfEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the basic authentication information of          * username for the CXF client.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|username (String username)
specifier|default
name|CxfEndpointBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The bindingId for the service model to use.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|bindingId (String bindingId)
specifier|default
name|CxfEndpointBuilder
name|bindingId
parameter_list|(
name|String
name|bindingId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bindingId"
argument_list|,
name|bindingId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The endpoint name this service is implementing, it maps to the          * wsdl:portname. In the format of ns:PORT_NAME where ns is a namespace          * prefix valid at this scope.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|portName (String portName)
specifier|default
name|CxfEndpointBuilder
name|portName
parameter_list|(
name|String
name|portName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"portName"
argument_list|,
name|portName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option can override the endpointUrl that published from the WSDL          * which can be accessed with service address url plus wsd.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|publishedEndpointUrl ( String publishedEndpointUrl)
specifier|default
name|CxfEndpointBuilder
name|publishedEndpointUrl
parameter_list|(
name|String
name|publishedEndpointUrl
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publishedEndpointUrl"
argument_list|,
name|publishedEndpointUrl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The class name of the SEI (Service Endpoint Interface) class which          * could have JSR181 annotation or not.          * The option is a<code>java.lang.Class&lt;java.lang.Object&gt;</code>          * type.          * @group service          */
DECL|method|serviceClass (Class<Object> serviceClass)
specifier|default
name|CxfEndpointBuilder
name|serviceClass
parameter_list|(
name|Class
argument_list|<
name|Object
argument_list|>
name|serviceClass
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceClass"
argument_list|,
name|serviceClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The class name of the SEI (Service Endpoint Interface) class which          * could have JSR181 annotation or not.          * The option will be converted to a          *<code>java.lang.Class&lt;java.lang.Object&gt;</code> type.          * @group service          */
DECL|method|serviceClass (String serviceClass)
specifier|default
name|CxfEndpointBuilder
name|serviceClass
parameter_list|(
name|String
name|serviceClass
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceClass"
argument_list|,
name|serviceClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The service name this service is implementing, it maps to the          * wsdl:servicename.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|serviceName (String serviceName)
specifier|default
name|CxfEndpointBuilder
name|serviceName
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serviceName"
argument_list|,
name|serviceName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The location of the WSDL. Can be on the classpath, file system, or be          * hosted remotely.          * The option is a<code>java.lang.String</code> type.          * @group service          */
DECL|method|wsdlURL (String wsdlURL)
specifier|default
name|CxfEndpointBuilder
name|wsdlURL
parameter_list|(
name|String
name|wsdlURL
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"wsdlURL"
argument_list|,
name|wsdlURL
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the CXF component.      */
DECL|interface|AdvancedCxfEndpointBuilder
specifier|public
interface|interface
name|AdvancedCxfEndpointBuilder
extends|extends
name|AdvancedCxfEndpointConsumerBuilder
extends|,
name|AdvancedCxfEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CxfEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CxfEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * This option controls whether the CXF component, when running in          * PAYLOAD mode, will DOM parse the incoming messages into DOM Elements          * or keep the payload as a javax.xml.transform.Source object that would          * allow streaming in some cases.          * The option is a<code>java.lang.Boolean</code> type.          * @group advanced          */
DECL|method|allowStreaming (Boolean allowStreaming)
specifier|default
name|AdvancedCxfEndpointBuilder
name|allowStreaming
parameter_list|(
name|Boolean
name|allowStreaming
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowStreaming"
argument_list|,
name|allowStreaming
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option controls whether the CXF component, when running in          * PAYLOAD mode, will DOM parse the incoming messages into DOM Elements          * or keep the payload as a javax.xml.transform.Source object that would          * allow streaming in some cases.          * The option will be converted to a<code>java.lang.Boolean</code>          * type.          * @group advanced          */
DECL|method|allowStreaming (String allowStreaming)
specifier|default
name|AdvancedCxfEndpointBuilder
name|allowStreaming
parameter_list|(
name|String
name|allowStreaming
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"allowStreaming"
argument_list|,
name|allowStreaming
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCxfEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCxfEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured CXF Bus.          * The option is a<code>org.apache.cxf.Bus</code> type.          * @group advanced          */
DECL|method|bus (Object bus)
specifier|default
name|AdvancedCxfEndpointBuilder
name|bus
parameter_list|(
name|Object
name|bus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bus"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom configured CXF Bus.          * The option will be converted to a<code>org.apache.cxf.Bus</code>          * type.          * @group advanced          */
DECL|method|bus (String bus)
specifier|default
name|AdvancedCxfEndpointBuilder
name|bus
parameter_list|(
name|String
name|bus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bus"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the CXF continuation timeout which could          * be used in CxfConsumer by default when the CXF server is using Jetty          * or Servlet transport.          * The option is a<code>long</code> type.          * @group advanced          */
DECL|method|continuationTimeout ( long continuationTimeout)
specifier|default
name|AdvancedCxfEndpointBuilder
name|continuationTimeout
parameter_list|(
name|long
name|continuationTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"continuationTimeout"
argument_list|,
name|continuationTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option is used to set the CXF continuation timeout which could          * be used in CxfConsumer by default when the CXF server is using Jetty          * or Servlet transport.          * The option will be converted to a<code>long</code> type.          * @group advanced          */
DECL|method|continuationTimeout ( String continuationTimeout)
specifier|default
name|AdvancedCxfEndpointBuilder
name|continuationTimeout
parameter_list|(
name|String
name|continuationTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"continuationTimeout"
argument_list|,
name|continuationTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CxfBinding to control the binding between Camel          * Message and CXF Message.          * The option is a          *<code>org.apache.camel.component.cxf.CxfBinding</code> type.          * @group advanced          */
DECL|method|cxfBinding (Object cxfBinding)
specifier|default
name|AdvancedCxfEndpointBuilder
name|cxfBinding
parameter_list|(
name|Object
name|cxfBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfBinding"
argument_list|,
name|cxfBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CxfBinding to control the binding between Camel          * Message and CXF Message.          * The option will be converted to a          *<code>org.apache.camel.component.cxf.CxfBinding</code> type.          * @group advanced          */
DECL|method|cxfBinding (String cxfBinding)
specifier|default
name|AdvancedCxfEndpointBuilder
name|cxfBinding
parameter_list|(
name|String
name|cxfBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfBinding"
argument_list|,
name|cxfBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option could apply the implementation of          * org.apache.camel.component.cxf.CxfEndpointConfigurer which supports          * to configure the CXF endpoint in programmatic way. User can configure          * the CXF server and client by implementing configure{ServerClient}          * method of CxfEndpointConfigurer.          * The option is a          *<code>org.apache.camel.component.cxf.CxfEndpointConfigurer</code>          * type.          * @group advanced          */
DECL|method|cxfEndpointConfigurer ( Object cxfEndpointConfigurer)
specifier|default
name|AdvancedCxfEndpointBuilder
name|cxfEndpointConfigurer
parameter_list|(
name|Object
name|cxfEndpointConfigurer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfEndpointConfigurer"
argument_list|,
name|cxfEndpointConfigurer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This option could apply the implementation of          * org.apache.camel.component.cxf.CxfEndpointConfigurer which supports          * to configure the CXF endpoint in programmatic way. User can configure          * the CXF server and client by implementing configure{ServerClient}          * method of CxfEndpointConfigurer.          * The option will be converted to a          *<code>org.apache.camel.component.cxf.CxfEndpointConfigurer</code>          * type.          * @group advanced          */
DECL|method|cxfEndpointConfigurer ( String cxfEndpointConfigurer)
specifier|default
name|AdvancedCxfEndpointBuilder
name|cxfEndpointConfigurer
parameter_list|(
name|String
name|cxfEndpointConfigurer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cxfEndpointConfigurer"
argument_list|,
name|cxfEndpointConfigurer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will set the default bus when CXF endpoint create a bus by itself.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|defaultBus (boolean defaultBus)
specifier|default
name|AdvancedCxfEndpointBuilder
name|defaultBus
parameter_list|(
name|boolean
name|defaultBus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultBus"
argument_list|,
name|defaultBus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Will set the default bus when CXF endpoint create a bus by itself.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|defaultBus (String defaultBus)
specifier|default
name|AdvancedCxfEndpointBuilder
name|defaultBus
parameter_list|(
name|String
name|defaultBus
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"defaultBus"
argument_list|,
name|defaultBus
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option is a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedCxfEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          * @group advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedCxfEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to merge protocol headers. If enabled then propagating          * headers between Camel and CXF becomes more consistent and similar.          * For more details see CAMEL-6393.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|mergeProtocolHeaders ( boolean mergeProtocolHeaders)
specifier|default
name|AdvancedCxfEndpointBuilder
name|mergeProtocolHeaders
parameter_list|(
name|boolean
name|mergeProtocolHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mergeProtocolHeaders"
argument_list|,
name|mergeProtocolHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to merge protocol headers. If enabled then propagating          * headers between Camel and CXF becomes more consistent and similar.          * For more details see CAMEL-6393.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|mergeProtocolHeaders ( String mergeProtocolHeaders)
specifier|default
name|AdvancedCxfEndpointBuilder
name|mergeProtocolHeaders
parameter_list|(
name|String
name|mergeProtocolHeaders
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mergeProtocolHeaders"
argument_list|,
name|mergeProtocolHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To enable MTOM (attachments). This requires to use POJO or PAYLOAD          * data format mode.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|mtomEnabled (boolean mtomEnabled)
specifier|default
name|AdvancedCxfEndpointBuilder
name|mtomEnabled
parameter_list|(
name|boolean
name|mtomEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mtomEnabled"
argument_list|,
name|mtomEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To enable MTOM (attachments). This requires to use POJO or PAYLOAD          * data format mode.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|mtomEnabled (String mtomEnabled)
specifier|default
name|AdvancedCxfEndpointBuilder
name|mtomEnabled
parameter_list|(
name|String
name|mtomEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mtomEnabled"
argument_list|,
name|mtomEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set additional CXF options using the key/value pairs from the Map.          * For example to turn on stacktraces in SOAP faults,          * properties.faultStackTraceEnabled=true.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          * @group advanced          */
DECL|method|properties ( Map<String, Object> properties)
specifier|default
name|AdvancedCxfEndpointBuilder
name|properties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"properties"
argument_list|,
name|properties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To set additional CXF options using the key/value pairs from the Map.          * For example to turn on stacktraces in SOAP faults,          * properties.faultStackTraceEnabled=true.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          * @group advanced          */
DECL|method|properties (String properties)
specifier|default
name|AdvancedCxfEndpointBuilder
name|properties
parameter_list|(
name|String
name|properties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"properties"
argument_list|,
name|properties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether SOAP message validation should be disabled.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|skipPayloadMessagePartCheck ( boolean skipPayloadMessagePartCheck)
specifier|default
name|AdvancedCxfEndpointBuilder
name|skipPayloadMessagePartCheck
parameter_list|(
name|boolean
name|skipPayloadMessagePartCheck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipPayloadMessagePartCheck"
argument_list|,
name|skipPayloadMessagePartCheck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether SOAP message validation should be disabled.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|skipPayloadMessagePartCheck ( String skipPayloadMessagePartCheck)
specifier|default
name|AdvancedCxfEndpointBuilder
name|skipPayloadMessagePartCheck
parameter_list|(
name|String
name|skipPayloadMessagePartCheck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"skipPayloadMessagePartCheck"
argument_list|,
name|skipPayloadMessagePartCheck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedCxfEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedCxfEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for<code>org.apache.camel.component.cxf.DataFormat</code>      * enum.      */
DECL|enum|DataFormat
specifier|public
specifier|static
enum|enum
name|DataFormat
block|{
DECL|enumConstant|PAYLOAD
DECL|enumConstant|RAW
DECL|enumConstant|MESSAGE
DECL|enumConstant|CXF_MESSAGE
DECL|enumConstant|POJO
name|PAYLOAD
block|,
name|RAW
block|,
name|MESSAGE
block|,
name|CXF_MESSAGE
block|,
name|POJO
block|;     }
comment|/**      * The cxf component is used for SOAP WebServices using Apache CXF. Creates      * a builder to build endpoints for the CXF component.      */
DECL|method|cxf (String path)
specifier|default
name|CxfEndpointBuilder
name|cxf
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|CxfEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|CxfEndpointBuilder
implements|,
name|AdvancedCxfEndpointBuilder
block|{
specifier|public
name|CxfEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"cxf"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|CxfEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

