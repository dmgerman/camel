begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * Represents a Debezium MongoDB endpoint which is used to capture changes in  * MongoDB database so that that applications can see those changes and respond  * to them.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|DebeziumMongodbEndpointBuilderFactory
specifier|public
interface|interface
name|DebeziumMongodbEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint for the Debezium MongoDB Connector component.      */
DECL|interface|DebeziumMongodbEndpointBuilder
specifier|public
interface|interface
name|DebeziumMongodbEndpointBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedDebeziumMongodbEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedDebeziumMongodbEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Converter class that should be used to serialize and deserialize          * key data for offsets. The default is JSON converter.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|internalKeyConverter ( String internalKeyConverter)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|internalKeyConverter
parameter_list|(
name|String
name|internalKeyConverter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"internalKeyConverter"
argument_list|,
name|internalKeyConverter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Converter class that should be used to serialize and deserialize          * value data for offsets. The default is JSON converter.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|internalValueConverter ( String internalValueConverter)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|internalValueConverter
parameter_list|(
name|String
name|internalValueConverter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"internalValueConverter"
argument_list|,
name|internalValueConverter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the Java class of the commit policy. It defines when          * offsets commit has to be triggered based on the number of events          * processed and the time elapsed since the last commit. This class must          * implement the interface 'OffsetCommitPolicy'. The default is a          * periodic commit policy based upon time intervals.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|offsetCommitPolicy ( String offsetCommitPolicy)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|offsetCommitPolicy
parameter_list|(
name|String
name|offsetCommitPolicy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetCommitPolicy"
argument_list|,
name|offsetCommitPolicy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum number of milliseconds to wait for records to flush and          * partition offset data to be committed to offset storage before          * cancelling the process and restoring the offset data to be committed          * in a future attempt. The default is 5 seconds.          *           * The option is a:<code>long</code> type.          *           * Group: consumer          */
DECL|method|offsetCommitTimeoutMs ( long offsetCommitTimeoutMs)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|offsetCommitTimeoutMs
parameter_list|(
name|long
name|offsetCommitTimeoutMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetCommitTimeoutMs"
argument_list|,
name|offsetCommitTimeoutMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum number of milliseconds to wait for records to flush and          * partition offset data to be committed to offset storage before          * cancelling the process and restoring the offset data to be committed          * in a future attempt. The default is 5 seconds.          *           * The option will be converted to a<code>long</code> type.          *           * Group: consumer          */
DECL|method|offsetCommitTimeoutMs ( String offsetCommitTimeoutMs)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|offsetCommitTimeoutMs
parameter_list|(
name|String
name|offsetCommitTimeoutMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetCommitTimeoutMs"
argument_list|,
name|offsetCommitTimeoutMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval at which to try committing offsets. The default is 1 minute.          *           * The option is a:<code>long</code> type.          *           * Group: consumer          */
DECL|method|offsetFlushIntervalMs ( long offsetFlushIntervalMs)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|offsetFlushIntervalMs
parameter_list|(
name|long
name|offsetFlushIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetFlushIntervalMs"
argument_list|,
name|offsetFlushIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval at which to try committing offsets. The default is 1 minute.          *           * The option will be converted to a<code>long</code> type.          *           * Group: consumer          */
DECL|method|offsetFlushIntervalMs ( String offsetFlushIntervalMs)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|offsetFlushIntervalMs
parameter_list|(
name|String
name|offsetFlushIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetFlushIntervalMs"
argument_list|,
name|offsetFlushIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the Java class that is responsible for persistence of          * connector offsets.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|offsetStorage ( String offsetStorage)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|offsetStorage
parameter_list|(
name|String
name|offsetStorage
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorage"
argument_list|,
name|offsetStorage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Path to file where offsets are to be stored. Required when          * offset.storage is set to the FileOffsetBackingStore.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|offsetStorageFileName ( String offsetStorageFileName)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|offsetStorageFileName
parameter_list|(
name|String
name|offsetStorageFileName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorageFileName"
argument_list|,
name|offsetStorageFileName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of partitions used when creating the offset storage topic.          * Required when offset.storage is set to the 'KafkaOffsetBackingStore'.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|offsetStoragePartitions ( int offsetStoragePartitions)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|offsetStoragePartitions
parameter_list|(
name|int
name|offsetStoragePartitions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStoragePartitions"
argument_list|,
name|offsetStoragePartitions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of partitions used when creating the offset storage topic.          * Required when offset.storage is set to the 'KafkaOffsetBackingStore'.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|offsetStoragePartitions ( String offsetStoragePartitions)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|offsetStoragePartitions
parameter_list|(
name|String
name|offsetStoragePartitions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStoragePartitions"
argument_list|,
name|offsetStoragePartitions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Replication factor used when creating the offset storage topic.          * Required when offset.storage is set to the KafkaOffsetBackingStore.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|offsetStorageReplicationFactor ( int offsetStorageReplicationFactor)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|offsetStorageReplicationFactor
parameter_list|(
name|int
name|offsetStorageReplicationFactor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorageReplicationFactor"
argument_list|,
name|offsetStorageReplicationFactor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Replication factor used when creating the offset storage topic.          * Required when offset.storage is set to the KafkaOffsetBackingStore.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|offsetStorageReplicationFactor ( String offsetStorageReplicationFactor)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|offsetStorageReplicationFactor
parameter_list|(
name|String
name|offsetStorageReplicationFactor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorageReplicationFactor"
argument_list|,
name|offsetStorageReplicationFactor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the Kafka topic where offsets are to be stored. Required          * when offset.storage is set to the KafkaOffsetBackingStore.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|offsetStorageTopic ( String offsetStorageTopic)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|offsetStorageTopic
parameter_list|(
name|String
name|offsetStorageTopic
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorageTopic"
argument_list|,
name|offsetStorageTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Description is not available here, please check Debezium website for          * corresponding key 'collection.blacklist' description.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mongodb          */
DECL|method|collectionBlacklist ( String collectionBlacklist)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|collectionBlacklist
parameter_list|(
name|String
name|collectionBlacklist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"collectionBlacklist"
argument_list|,
name|collectionBlacklist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The collections for which changes are to be captured.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mongodb          */
DECL|method|collectionWhitelist ( String collectionWhitelist)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|collectionWhitelist
parameter_list|(
name|String
name|collectionWhitelist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"collectionWhitelist"
argument_list|,
name|collectionWhitelist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The initial delay when trying to reconnect to a primary after a          * connection cannot be made or when no primary is available. Defaults          * to 1 second (1000 ms).          *           * The option is a:<code>long</code> type.          *           * Group: mongodb          */
DECL|method|connectBackoffInitialDelayMs ( long connectBackoffInitialDelayMs)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|connectBackoffInitialDelayMs
parameter_list|(
name|long
name|connectBackoffInitialDelayMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectBackoffInitialDelayMs"
argument_list|,
name|connectBackoffInitialDelayMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The initial delay when trying to reconnect to a primary after a          * connection cannot be made or when no primary is available. Defaults          * to 1 second (1000 ms).          *           * The option will be converted to a<code>long</code> type.          *           * Group: mongodb          */
DECL|method|connectBackoffInitialDelayMs ( String connectBackoffInitialDelayMs)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|connectBackoffInitialDelayMs
parameter_list|(
name|String
name|connectBackoffInitialDelayMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectBackoffInitialDelayMs"
argument_list|,
name|connectBackoffInitialDelayMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum delay when trying to reconnect to a primary after a          * connection cannot be made or when no primary is available. Defaults          * to 120 second (120,000 ms).          *           * The option is a:<code>long</code> type.          *           * Group: mongodb          */
DECL|method|connectBackoffMaxDelayMs ( long connectBackoffMaxDelayMs)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|connectBackoffMaxDelayMs
parameter_list|(
name|long
name|connectBackoffMaxDelayMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectBackoffMaxDelayMs"
argument_list|,
name|connectBackoffMaxDelayMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum delay when trying to reconnect to a primary after a          * connection cannot be made or when no primary is available. Defaults          * to 120 second (120,000 ms).          *           * The option will be converted to a<code>long</code> type.          *           * Group: mongodb          */
DECL|method|connectBackoffMaxDelayMs ( String connectBackoffMaxDelayMs)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|connectBackoffMaxDelayMs
parameter_list|(
name|String
name|connectBackoffMaxDelayMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectBackoffMaxDelayMs"
argument_list|,
name|connectBackoffMaxDelayMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum number of failed connection attempts to a replica set primary          * before an exception occurs and task is aborted. Defaults to 16, which          * with the defaults for 'connect.backoff.initial.delay.ms' and          * 'connect.backoff.max.delay.ms' results in just over 20 minutes of          * attempts before failing.          *           * The option is a:<code>int</code> type.          *           * Group: mongodb          */
DECL|method|connectMaxAttempts ( int connectMaxAttempts)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|connectMaxAttempts
parameter_list|(
name|int
name|connectMaxAttempts
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectMaxAttempts"
argument_list|,
name|connectMaxAttempts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum number of failed connection attempts to a replica set primary          * before an exception occurs and task is aborted. Defaults to 16, which          * with the defaults for 'connect.backoff.initial.delay.ms' and          * 'connect.backoff.max.delay.ms' results in just over 20 minutes of          * attempts before failing.          *           * The option will be converted to a<code>int</code> type.          *           * Group: mongodb          */
DECL|method|connectMaxAttempts ( String connectMaxAttempts)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|connectMaxAttempts
parameter_list|(
name|String
name|connectMaxAttempts
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectMaxAttempts"
argument_list|,
name|connectMaxAttempts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The databases for which changes are to be excluded.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mongodb          */
DECL|method|databaseBlacklist ( String databaseBlacklist)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|databaseBlacklist
parameter_list|(
name|String
name|databaseBlacklist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseBlacklist"
argument_list|,
name|databaseBlacklist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The path to the file that will be used to record the database          * history.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mongodb          */
DECL|method|databaseHistoryFileFilename ( String databaseHistoryFileFilename)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|databaseHistoryFileFilename
parameter_list|(
name|String
name|databaseHistoryFileFilename
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryFileFilename"
argument_list|,
name|databaseHistoryFileFilename
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The databases for which changes are to be captured.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mongodb          */
DECL|method|databaseWhitelist ( String databaseWhitelist)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|databaseWhitelist
parameter_list|(
name|String
name|databaseWhitelist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseWhitelist"
argument_list|,
name|databaseWhitelist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Description is not available here, please check Debezium website for          * corresponding key 'field.blacklist' description.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mongodb          */
DECL|method|fieldBlacklist ( String fieldBlacklist)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|fieldBlacklist
parameter_list|(
name|String
name|fieldBlacklist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fieldBlacklist"
argument_list|,
name|fieldBlacklist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Description is not available here, please check Debezium website for          * corresponding key 'field.renames' description.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mongodb          */
DECL|method|fieldRenames (String fieldRenames)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|fieldRenames
parameter_list|(
name|String
name|fieldRenames
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fieldRenames"
argument_list|,
name|fieldRenames
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Length of an interval in milli-seconds in in which the connector          * periodically sends heartbeat messages to a heartbeat topic. Use 0 to          * disable heartbeat messages. Disabled by default.          *           * The option is a:<code>int</code> type.          *           * Group: mongodb          */
DECL|method|heartbeatIntervalMs ( int heartbeatIntervalMs)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|heartbeatIntervalMs
parameter_list|(
name|int
name|heartbeatIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"heartbeatIntervalMs"
argument_list|,
name|heartbeatIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Length of an interval in milli-seconds in in which the connector          * periodically sends heartbeat messages to a heartbeat topic. Use 0 to          * disable heartbeat messages. Disabled by default.          *           * The option will be converted to a<code>int</code> type.          *           * Group: mongodb          */
DECL|method|heartbeatIntervalMs ( String heartbeatIntervalMs)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|heartbeatIntervalMs
parameter_list|(
name|String
name|heartbeatIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"heartbeatIntervalMs"
argument_list|,
name|heartbeatIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The prefix that is used to name heartbeat topics.Defaults to          * __debezium-heartbeat.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mongodb          */
DECL|method|heartbeatTopicsPrefix ( String heartbeatTopicsPrefix)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|heartbeatTopicsPrefix
parameter_list|(
name|String
name|heartbeatTopicsPrefix
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"heartbeatTopicsPrefix"
argument_list|,
name|heartbeatTopicsPrefix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum number of threads used to perform an intial sync of the          * collections in a replica set. Defaults to 1.          *           * The option is a:<code>int</code> type.          *           * Group: mongodb          */
DECL|method|initialSyncMaxThreads ( int initialSyncMaxThreads)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|initialSyncMaxThreads
parameter_list|(
name|int
name|initialSyncMaxThreads
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialSyncMaxThreads"
argument_list|,
name|initialSyncMaxThreads
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum number of threads used to perform an intial sync of the          * collections in a replica set. Defaults to 1.          *           * The option will be converted to a<code>int</code> type.          *           * Group: mongodb          */
DECL|method|initialSyncMaxThreads ( String initialSyncMaxThreads)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|initialSyncMaxThreads
parameter_list|(
name|String
name|initialSyncMaxThreads
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialSyncMaxThreads"
argument_list|,
name|initialSyncMaxThreads
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of each batch of source records. Defaults to 2048.          *           * The option is a:<code>int</code> type.          *           * Group: mongodb          */
DECL|method|maxBatchSize (int maxBatchSize)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|maxBatchSize
parameter_list|(
name|int
name|maxBatchSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxBatchSize"
argument_list|,
name|maxBatchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of each batch of source records. Defaults to 2048.          *           * The option will be converted to a<code>int</code> type.          *           * Group: mongodb          */
DECL|method|maxBatchSize (String maxBatchSize)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|maxBatchSize
parameter_list|(
name|String
name|maxBatchSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxBatchSize"
argument_list|,
name|maxBatchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of the queue for change events read from the database          * log but not yet recorded or forwarded. Defaults to 8192, and should          * always be larger than the maximum batch size.          *           * The option is a:<code>int</code> type.          *           * Group: mongodb          */
DECL|method|maxQueueSize (int maxQueueSize)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|maxQueueSize
parameter_list|(
name|int
name|maxQueueSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxQueueSize"
argument_list|,
name|maxQueueSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of the queue for change events read from the database          * log but not yet recorded or forwarded. Defaults to 8192, and should          * always be larger than the maximum batch size.          *           * The option will be converted to a<code>int</code> type.          *           * Group: mongodb          */
DECL|method|maxQueueSize (String maxQueueSize)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|maxQueueSize
parameter_list|(
name|String
name|maxQueueSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxQueueSize"
argument_list|,
name|maxQueueSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The hostname and port pairs (in the form 'host' or 'host:port') of          * the MongoDB server(s) in the replica set.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mongodb          */
DECL|method|mongodbHosts (String mongodbHosts)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|mongodbHosts
parameter_list|(
name|String
name|mongodbHosts
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mongodbHosts"
argument_list|,
name|mongodbHosts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether the addresses in 'hosts' are seeds that should be          * used to discover all members of the cluster or replica set ('true'),          * or whether the address(es) in 'hosts' should be used as is ('false').          * The default is 'true'.          *           * The option is a:<code>boolean</code> type.          *           * Group: mongodb          */
DECL|method|mongodbMembersAutoDiscover ( boolean mongodbMembersAutoDiscover)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|mongodbMembersAutoDiscover
parameter_list|(
name|boolean
name|mongodbMembersAutoDiscover
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mongodbMembersAutoDiscover"
argument_list|,
name|mongodbMembersAutoDiscover
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether the addresses in 'hosts' are seeds that should be          * used to discover all members of the cluster or replica set ('true'),          * or whether the address(es) in 'hosts' should be used as is ('false').          * The default is 'true'.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: mongodb          */
DECL|method|mongodbMembersAutoDiscover ( String mongodbMembersAutoDiscover)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|mongodbMembersAutoDiscover
parameter_list|(
name|String
name|mongodbMembersAutoDiscover
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mongodbMembersAutoDiscover"
argument_list|,
name|mongodbMembersAutoDiscover
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Unique name that identifies the MongoDB replica set or cluster and          * all recorded offsets, andthat is used as a prefix for all schemas and          * topics. Each distinct MongoDB installation should have a separate          * namespace and monitored by at most one Debezium connector.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: mongodb          */
DECL|method|mongodbName (String mongodbName)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|mongodbName
parameter_list|(
name|String
name|mongodbName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mongodbName"
argument_list|,
name|mongodbName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password to be used when connecting to MongoDB, if necessary.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: mongodb          */
DECL|method|mongodbPassword ( String mongodbPassword)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|mongodbPassword
parameter_list|(
name|String
name|mongodbPassword
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mongodbPassword"
argument_list|,
name|mongodbPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Should connector use SSL to connect to MongoDB instances.          *           * The option is a:<code>boolean</code> type.          *           * Group: mongodb          */
DECL|method|mongodbSslEnabled ( boolean mongodbSslEnabled)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|mongodbSslEnabled
parameter_list|(
name|boolean
name|mongodbSslEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mongodbSslEnabled"
argument_list|,
name|mongodbSslEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Should connector use SSL to connect to MongoDB instances.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: mongodb          */
DECL|method|mongodbSslEnabled ( String mongodbSslEnabled)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|mongodbSslEnabled
parameter_list|(
name|String
name|mongodbSslEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mongodbSslEnabled"
argument_list|,
name|mongodbSslEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether invalid host names are allowed when using SSL. If true the          * connection will not prevent man-in-the-middle attacks.          *           * The option is a:<code>boolean</code> type.          *           * Group: mongodb          */
DECL|method|mongodbSslInvalidHostnameAllowed ( boolean mongodbSslInvalidHostnameAllowed)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|mongodbSslInvalidHostnameAllowed
parameter_list|(
name|boolean
name|mongodbSslInvalidHostnameAllowed
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mongodbSslInvalidHostnameAllowed"
argument_list|,
name|mongodbSslInvalidHostnameAllowed
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether invalid host names are allowed when using SSL. If true the          * connection will not prevent man-in-the-middle attacks.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: mongodb          */
DECL|method|mongodbSslInvalidHostnameAllowed ( String mongodbSslInvalidHostnameAllowed)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|mongodbSslInvalidHostnameAllowed
parameter_list|(
name|String
name|mongodbSslInvalidHostnameAllowed
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mongodbSslInvalidHostnameAllowed"
argument_list|,
name|mongodbSslInvalidHostnameAllowed
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Database user for connecting to MongoDB, if necessary.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mongodb          */
DECL|method|mongodbUser (String mongodbUser)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|mongodbUser
parameter_list|(
name|String
name|mongodbUser
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mongodbUser"
argument_list|,
name|mongodbUser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Frequency in milliseconds to wait for new change events to appear          * after receiving no events. Defaults to 500ms.          *           * The option is a:<code>long</code> type.          *           * Group: mongodb          */
DECL|method|pollIntervalMs ( long pollIntervalMs)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|pollIntervalMs
parameter_list|(
name|long
name|pollIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollIntervalMs"
argument_list|,
name|pollIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Frequency in milliseconds to wait for new change events to appear          * after receiving no events. Defaults to 500ms.          *           * The option will be converted to a<code>long</code> type.          *           * Group: mongodb          */
DECL|method|pollIntervalMs ( String pollIntervalMs)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|pollIntervalMs
parameter_list|(
name|String
name|pollIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollIntervalMs"
argument_list|,
name|pollIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of milliseconds to delay before a snapshot will begin.          *           * The option is a:<code>long</code> type.          *           * Group: mongodb          */
DECL|method|snapshotDelayMs ( long snapshotDelayMs)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|snapshotDelayMs
parameter_list|(
name|long
name|snapshotDelayMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotDelayMs"
argument_list|,
name|snapshotDelayMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of milliseconds to delay before a snapshot will begin.          *           * The option will be converted to a<code>long</code> type.          *           * Group: mongodb          */
DECL|method|snapshotDelayMs ( String snapshotDelayMs)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|snapshotDelayMs
parameter_list|(
name|String
name|snapshotDelayMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotDelayMs"
argument_list|,
name|snapshotDelayMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of records that should be loaded into memory while          * performing a snapshot.          *           * The option is a:<code>int</code> type.          *           * Group: mongodb          */
DECL|method|snapshotFetchSize ( int snapshotFetchSize)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|snapshotFetchSize
parameter_list|(
name|int
name|snapshotFetchSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotFetchSize"
argument_list|,
name|snapshotFetchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of records that should be loaded into memory while          * performing a snapshot.          *           * The option will be converted to a<code>int</code> type.          *           * Group: mongodb          */
DECL|method|snapshotFetchSize ( String snapshotFetchSize)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|snapshotFetchSize
parameter_list|(
name|String
name|snapshotFetchSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotFetchSize"
argument_list|,
name|snapshotFetchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The criteria for running a snapshot upon startup of the connector.          * Options include: 'initial' (the default) to specify the connector          * should always perform an initial sync when required; 'never' to          * specify the connector should never perform an initial sync.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mongodb          */
DECL|method|snapshotMode (String snapshotMode)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|snapshotMode
parameter_list|(
name|String
name|snapshotMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotMode"
argument_list|,
name|snapshotMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A version of the format of the publicly visible source part in the          * message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mongodb          */
DECL|method|sourceStructVersion ( String sourceStructVersion)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|sourceStructVersion
parameter_list|(
name|String
name|sourceStructVersion
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sourceStructVersion"
argument_list|,
name|sourceStructVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether delete operations should be represented by a delete event and          * a subsquenttombstone event (true) or only by a delete event (false).          * Emitting the tombstone event (the default behavior) allows Kafka to          * completely delete all events pertaining to the given key once the          * source record got deleted.          *           * The option is a:<code>boolean</code> type.          *           * Group: mongodb          */
DECL|method|tombstonesOnDelete ( boolean tombstonesOnDelete)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|tombstonesOnDelete
parameter_list|(
name|boolean
name|tombstonesOnDelete
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tombstonesOnDelete"
argument_list|,
name|tombstonesOnDelete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether delete operations should be represented by a delete event and          * a subsquenttombstone event (true) or only by a delete event (false).          * Emitting the tombstone event (the default behavior) allows Kafka to          * completely delete all events pertaining to the given key once the          * source record got deleted.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: mongodb          */
DECL|method|tombstonesOnDelete ( String tombstonesOnDelete)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|tombstonesOnDelete
parameter_list|(
name|String
name|tombstonesOnDelete
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tombstonesOnDelete"
argument_list|,
name|tombstonesOnDelete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Debezium MongoDB Connector      * component.      */
DECL|interface|AdvancedDebeziumMongodbEndpointBuilder
specifier|public
interface|interface
name|AdvancedDebeziumMongodbEndpointBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|DebeziumMongodbEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|DebeziumMongodbEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedDebeziumMongodbEndpointBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedDebeziumMongodbEndpointBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedDebeziumMongodbEndpointBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedDebeziumMongodbEndpointBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedDebeziumMongodbEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedDebeziumMongodbEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedDebeziumMongodbEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedDebeziumMongodbEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Debezium MongoDB Connector (camel-debezium-mongodb)      * Represents a Debezium MongoDB endpoint which is used to capture changes      * in MongoDB database so that that applications can see those changes and      * respond to them.      *       * Category: database,nosql,mongodb      * Available as of version: 3.0      * Maven coordinates: org.apache.camel:camel-debezium-mongodb      *       * Syntax:<code>debezium-mongodb:name</code>      *       * Path parameter: name (required)      * Unique name for the connector. Attempting to register again with the same      * name will fail.      */
DECL|method|debeziumMongodb (String path)
specifier|default
name|DebeziumMongodbEndpointBuilder
name|debeziumMongodb
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|DebeziumMongodbEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|DebeziumMongodbEndpointBuilder
implements|,
name|AdvancedDebeziumMongodbEndpointBuilder
block|{
specifier|public
name|DebeziumMongodbEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"debezium-mongodb"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DebeziumMongodbEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

