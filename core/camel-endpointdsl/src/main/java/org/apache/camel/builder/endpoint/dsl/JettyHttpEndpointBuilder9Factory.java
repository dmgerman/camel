begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_comment
comment|/**  * To use Jetty as a HTTP server as consumer for Camel routes.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|JettyHttpEndpointBuilder9Factory
specifier|public
interface|interface
name|JettyHttpEndpointBuilder9Factory
block|{
comment|/**      * Builder for endpoint for the Jetty component.      */
DECL|interface|JettyHttpEndpointBuilder9
specifier|public
interface|interface
name|JettyHttpEndpointBuilder9
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedJettyHttpEndpointBuilder9
operator|)
name|this
return|;
block|}
comment|/**          * Determines whether or not the raw input stream from Servlet is cached          * or not (Camel will read the stream into a in memory/overflow to file,          * Stream caching) cache. By default Camel will cache the Servlet input          * stream to support reading it multiple times to ensure it Camel can          * retrieve all data from the stream. However you can set this option to          * true when you for example need to access the raw stream, such as          * streaming it directly to a file or other persistent store.          * DefaultHttpBinding will copy the request input stream into a stream          * cache and put it into message body if this option is false to support          * reading the stream multiple times. If you use Servlet to bridge/proxy          * an endpoint then consider enabling this option to improve          * performance, in case you do not need to read the message payload          * multiple times. The http producer will by default cache the response          * body stream. If setting this option to true, then the producers will          * not cache the response body stream but use the response stream as-is          * as the message body.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|disableStreamCache ( boolean disableStreamCache)
specifier|default
name|JettyHttpEndpointBuilder9
name|disableStreamCache
parameter_list|(
name|boolean
name|disableStreamCache
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"disableStreamCache"
argument_list|,
name|disableStreamCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Determines whether or not the raw input stream from Servlet is cached          * or not (Camel will read the stream into a in memory/overflow to file,          * Stream caching) cache. By default Camel will cache the Servlet input          * stream to support reading it multiple times to ensure it Camel can          * retrieve all data from the stream. However you can set this option to          * true when you for example need to access the raw stream, such as          * streaming it directly to a file or other persistent store.          * DefaultHttpBinding will copy the request input stream into a stream          * cache and put it into message body if this option is false to support          * reading the stream multiple times. If you use Servlet to bridge/proxy          * an endpoint then consider enabling this option to improve          * performance, in case you do not need to read the message payload          * multiple times. The http producer will by default cache the response          * body stream. If setting this option to true, then the producers will          * not cache the response body stream but use the response stream as-is          * as the message body.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|disableStreamCache ( String disableStreamCache)
specifier|default
name|JettyHttpEndpointBuilder9
name|disableStreamCache
parameter_list|(
name|String
name|disableStreamCache
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"disableStreamCache"
argument_list|,
name|disableStreamCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          *           * The option is a:          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: common          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|JettyHttpEndpointBuilder9
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          *           * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: common          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|JettyHttpEndpointBuilder9
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure the consumer to work in async mode.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|async (boolean async)
specifier|default
name|JettyHttpEndpointBuilder9
name|async
parameter_list|(
name|boolean
name|async
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"async"
argument_list|,
name|async
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure the consumer to work in async mode.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|async (String async)
specifier|default
name|JettyHttpEndpointBuilder9
name|async
parameter_list|(
name|String
name|async
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"async"
argument_list|,
name|async
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|JettyHttpEndpointBuilder9
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|JettyHttpEndpointBuilder9
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is false the Servlet will disable the HTTP streaming          * and set the content-length header on the response.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|chunked (boolean chunked)
specifier|default
name|JettyHttpEndpointBuilder9
name|chunked
parameter_list|(
name|boolean
name|chunked
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"chunked"
argument_list|,
name|chunked
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is false the Servlet will disable the HTTP streaming          * and set the content-length header on the response.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|chunked (String chunked)
specifier|default
name|JettyHttpEndpointBuilder9
name|chunked
parameter_list|(
name|String
name|chunked
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"chunked"
argument_list|,
name|chunked
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to set a timeout in millis when using Jetty as consumer          * (server). By default Jetty uses 30000. You can use a value of = 0 to          * never expire. If a timeout occurs then the request will be expired          * and Jetty will return back a http error 503 to the client. This          * option is only in use when using Jetty with the Asynchronous Routing          * Engine.          *           * The option is a:<code>java.lang.Long</code> type.          *           * Group: consumer          */
DECL|method|continuationTimeout ( Long continuationTimeout)
specifier|default
name|JettyHttpEndpointBuilder9
name|continuationTimeout
parameter_list|(
name|Long
name|continuationTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"continuationTimeout"
argument_list|,
name|continuationTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows to set a timeout in millis when using Jetty as consumer          * (server). By default Jetty uses 30000. You can use a value of = 0 to          * never expire. If a timeout occurs then the request will be expired          * and Jetty will return back a http error 503 to the client. This          * option is only in use when using Jetty with the Asynchronous Routing          * Engine.          *           * The option will be converted to a<code>java.lang.Long</code> type.          *           * Group: consumer          */
DECL|method|continuationTimeout ( String continuationTimeout)
specifier|default
name|JettyHttpEndpointBuilder9
name|continuationTimeout
parameter_list|(
name|String
name|continuationTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"continuationTimeout"
argument_list|,
name|continuationTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, Jetty server will setup the CrossOriginFilter          * which supports the CORS out of box.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|enableCORS (boolean enableCORS)
specifier|default
name|JettyHttpEndpointBuilder9
name|enableCORS
parameter_list|(
name|boolean
name|enableCORS
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"enableCORS"
argument_list|,
name|enableCORS
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, Jetty server will setup the CrossOriginFilter          * which supports the CORS out of box.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|enableCORS (String enableCORS)
specifier|default
name|JettyHttpEndpointBuilder9
name|enableCORS
parameter_list|(
name|String
name|enableCORS
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"enableCORS"
argument_list|,
name|enableCORS
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is true, Jetty JMX support will be enabled for this          * endpoint. See Jetty JMX support for more details.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|enableJmx (boolean enableJmx)
specifier|default
name|JettyHttpEndpointBuilder9
name|enableJmx
parameter_list|(
name|boolean
name|enableJmx
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"enableJmx"
argument_list|,
name|enableJmx
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is true, Jetty JMX support will be enabled for this          * endpoint. See Jetty JMX support for more details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|enableJmx (String enableJmx)
specifier|default
name|JettyHttpEndpointBuilder9
name|enableJmx
parameter_list|(
name|String
name|enableJmx
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"enableJmx"
argument_list|,
name|enableJmx
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether org.apache.camel.component.jetty.MultiPartFilter is enabled          * or not. You should set this value to false when bridging endpoints,          * to ensure multipart requests is proxied/bridged as well.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|enableMultipartFilter ( boolean enableMultipartFilter)
specifier|default
name|JettyHttpEndpointBuilder9
name|enableMultipartFilter
parameter_list|(
name|boolean
name|enableMultipartFilter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"enableMultipartFilter"
argument_list|,
name|enableMultipartFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether org.apache.camel.component.jetty.MultiPartFilter is enabled          * or not. You should set this value to false when bridging endpoints,          * to ensure multipart requests is proxied/bridged as well.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|enableMultipartFilter ( String enableMultipartFilter)
specifier|default
name|JettyHttpEndpointBuilder9
name|enableMultipartFilter
parameter_list|(
name|String
name|enableMultipartFilter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"enableMultipartFilter"
argument_list|,
name|enableMultipartFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used to only allow consuming if the HttpMethod matches, such as          * GET/POST/PUT etc. Multiple methods can be specified separated by          * comma.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|httpMethodRestrict ( String httpMethodRestrict)
specifier|default
name|JettyHttpEndpointBuilder9
name|httpMethodRestrict
parameter_list|(
name|String
name|httpMethodRestrict
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpMethodRestrict"
argument_list|,
name|httpMethodRestrict
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the consumer should try to find a target consumer by          * matching the URI prefix if no exact match is found.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|matchOnUriPrefix ( boolean matchOnUriPrefix)
specifier|default
name|JettyHttpEndpointBuilder9
name|matchOnUriPrefix
parameter_list|(
name|boolean
name|matchOnUriPrefix
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"matchOnUriPrefix"
argument_list|,
name|matchOnUriPrefix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the consumer should try to find a target consumer by          * matching the URI prefix if no exact match is found.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|matchOnUriPrefix ( String matchOnUriPrefix)
specifier|default
name|JettyHttpEndpointBuilder9
name|matchOnUriPrefix
parameter_list|(
name|String
name|matchOnUriPrefix
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"matchOnUriPrefix"
argument_list|,
name|matchOnUriPrefix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled and an Exchange failed processing on the consumer side the          * response's body won't contain the exception's stack trace.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|muteException (boolean muteException)
specifier|default
name|JettyHttpEndpointBuilder9
name|muteException
parameter_list|(
name|boolean
name|muteException
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"muteException"
argument_list|,
name|muteException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled and an Exchange failed processing on the consumer side the          * response's body won't contain the exception's stack trace.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|muteException (String muteException)
specifier|default
name|JettyHttpEndpointBuilder9
name|muteException
parameter_list|(
name|String
name|muteException
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"muteException"
argument_list|,
name|muteException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom buffer size on the javax.servlet.ServletResponse.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: consumer          */
DECL|method|responseBufferSize ( Integer responseBufferSize)
specifier|default
name|JettyHttpEndpointBuilder9
name|responseBufferSize
parameter_list|(
name|Integer
name|responseBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"responseBufferSize"
argument_list|,
name|responseBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom buffer size on the javax.servlet.ServletResponse.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: consumer          */
DECL|method|responseBufferSize ( String responseBufferSize)
specifier|default
name|JettyHttpEndpointBuilder9
name|responseBufferSize
parameter_list|(
name|String
name|responseBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"responseBufferSize"
argument_list|,
name|responseBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, jetty server will send the date header to the          * client which sends the request. NOTE please make sure there is no any          * other camel-jetty endpoint is share the same port, otherwise this          * option may not work as expected.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendDateHeader (boolean sendDateHeader)
specifier|default
name|JettyHttpEndpointBuilder9
name|sendDateHeader
parameter_list|(
name|boolean
name|sendDateHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendDateHeader"
argument_list|,
name|sendDateHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, jetty server will send the date header to the          * client which sends the request. NOTE please make sure there is no any          * other camel-jetty endpoint is share the same port, otherwise this          * option may not work as expected.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendDateHeader (String sendDateHeader)
specifier|default
name|JettyHttpEndpointBuilder9
name|sendDateHeader
parameter_list|(
name|String
name|sendDateHeader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendDateHeader"
argument_list|,
name|sendDateHeader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, jetty will send the server header with the          * jetty version information to the client which sends the request. NOTE          * please make sure there is no any other camel-jetty endpoint is share          * the same port, otherwise this option may not work as expected.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendServerVersion ( boolean sendServerVersion)
specifier|default
name|JettyHttpEndpointBuilder9
name|sendServerVersion
parameter_list|(
name|boolean
name|sendServerVersion
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendServerVersion"
argument_list|,
name|sendServerVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, jetty will send the server header with the          * jetty version information to the client which sends the request. NOTE          * please make sure there is no any other camel-jetty endpoint is share          * the same port, otherwise this option may not work as expected.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendServerVersion ( String sendServerVersion)
specifier|default
name|JettyHttpEndpointBuilder9
name|sendServerVersion
parameter_list|(
name|String
name|sendServerVersion
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendServerVersion"
argument_list|,
name|sendServerVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to enable the session manager on the server side of          * Jetty.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sessionSupport (boolean sessionSupport)
specifier|default
name|JettyHttpEndpointBuilder9
name|sessionSupport
parameter_list|(
name|boolean
name|sessionSupport
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sessionSupport"
argument_list|,
name|sessionSupport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to enable the session manager on the server side of          * Jetty.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sessionSupport (String sessionSupport)
specifier|default
name|JettyHttpEndpointBuilder9
name|sessionSupport
parameter_list|(
name|String
name|sessionSupport
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sessionSupport"
argument_list|,
name|sessionSupport
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled and an Exchange failed processing on the consumer side,          * and if the caused Exception was send back serialized in the response          * as a application/x-java-serialized-object content type. On the          * producer side the exception will be deserialized and thrown as is,          * instead of the HttpOperationFailedException. The caused exception is          * required to be serialized. This is by default turned off. If you          * enable this then be aware that Java will deserialize the incoming          * data from the request to Java and that can be a potential security          * risk.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|transferException ( boolean transferException)
specifier|default
name|JettyHttpEndpointBuilder9
name|transferException
parameter_list|(
name|boolean
name|transferException
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled and an Exchange failed processing on the consumer side,          * and if the caused Exception was send back serialized in the response          * as a application/x-java-serialized-object content type. On the          * producer side the exception will be deserialized and thrown as is,          * instead of the HttpOperationFailedException. The caused exception is          * required to be serialized. This is by default turned off. If you          * enable this then be aware that Java will deserialize the incoming          * data from the request to Java and that can be a potential security          * risk.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|transferException ( String transferException)
specifier|default
name|JettyHttpEndpointBuilder9
name|transferException
parameter_list|(
name|String
name|transferException
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to use Jetty continuations for the Jetty Server.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|useContinuation ( boolean useContinuation)
specifier|default
name|JettyHttpEndpointBuilder9
name|useContinuation
parameter_list|(
name|boolean
name|useContinuation
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useContinuation"
argument_list|,
name|useContinuation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to use Jetty continuations for the Jetty Server.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|useContinuation (String useContinuation)
specifier|default
name|JettyHttpEndpointBuilder9
name|useContinuation
parameter_list|(
name|String
name|useContinuation
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useContinuation"
argument_list|,
name|useContinuation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|JettyHttpEndpointBuilder9
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|JettyHttpEndpointBuilder9
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Jetty component.      */
DECL|interface|AdvancedJettyHttpEndpointBuilder9
specifier|public
interface|interface
name|AdvancedJettyHttpEndpointBuilder9
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|JettyHttpEndpointBuilder9
name|basic
parameter_list|()
block|{
return|return
operator|(
name|JettyHttpEndpointBuilder9
operator|)
name|this
return|;
block|}
comment|/**          * To use a custom HttpBinding to control the mapping between Camel          * message and HttpClient.          *           * The option is a:          *<code>org.apache.camel.http.common.HttpBinding</code> type.          *           * Group: common (advanced)          */
DECL|method|httpBinding (Object httpBinding)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|httpBinding
parameter_list|(
name|Object
name|httpBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpBinding"
argument_list|,
name|httpBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HttpBinding to control the mapping between Camel          * message and HttpClient.          *           * The option will be converted to a          *<code>org.apache.camel.http.common.HttpBinding</code> type.          *           * Group: common (advanced)          */
DECL|method|httpBinding (String httpBinding)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|httpBinding
parameter_list|(
name|String
name|httpBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpBinding"
argument_list|,
name|httpBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to eager check whether the HTTP requests has content if the          * content-length header is 0 or not present. This can be turned on in          * case HTTP clients do not send streamed data.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|eagerCheckContentAvailable ( boolean eagerCheckContentAvailable)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|eagerCheckContentAvailable
parameter_list|(
name|boolean
name|eagerCheckContentAvailable
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eagerCheckContentAvailable"
argument_list|,
name|eagerCheckContentAvailable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to eager check whether the HTTP requests has content if the          * content-length header is 0 or not present. This can be turned on in          * case HTTP clients do not send streamed data.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|eagerCheckContentAvailable ( String eagerCheckContentAvailable)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|eagerCheckContentAvailable
parameter_list|(
name|String
name|eagerCheckContentAvailable
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eagerCheckContentAvailable"
argument_list|,
name|eagerCheckContentAvailable
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configuration of the filter init parameters. These parameters will be          * applied to the filter list before starting the jetty server.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.String&gt;</code> type.          *           * Group: consumer (advanced)          */
DECL|method|filterInitParameters ( Map<String, String> filterInitParameters)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|filterInitParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterInitParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"filterInitParameters"
argument_list|,
name|filterInitParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configuration of the filter init parameters. These parameters will be          * applied to the filter list before starting the jetty server.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|filterInitParameters ( String filterInitParameters)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|filterInitParameters
parameter_list|(
name|String
name|filterInitParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"filterInitParameters"
argument_list|,
name|filterInitParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows using a custom filters which is putted into a list and can be          * find in the Registry. Multiple values can be separated by comma.          *           * The option is a:          *<code>java.util.List&lt;javax.servlet.Filter&gt;</code> type.          *           * Group: consumer (advanced)          */
DECL|method|filters (List<Object> filters)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|filters
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|filters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"filters"
argument_list|,
name|filters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows using a custom filters which is putted into a list and can be          * find in the Registry. Multiple values can be separated by comma.          *           * The option will be converted to a          *<code>java.util.List&lt;javax.servlet.Filter&gt;</code> type.          *           * Group: consumer (advanced)          */
DECL|method|filters (String filters)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|filters
parameter_list|(
name|String
name|filters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"filters"
argument_list|,
name|filters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies a comma-delimited set of Handler instances to lookup in          * your Registry. These handlers are added to the Jetty servlet context          * (for example, to add security). Important: You can not use different          * handlers with different Jetty endpoints using the same port number.          * The handlers is associated to the port number. If you need different          * handlers, then use different port numbers.          *           * The option is a:          *<code>java.util.List&lt;org.eclipse.jetty.server.Handler&gt;</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|handlers (List<Object> handlers)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|handlers
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|handlers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"handlers"
argument_list|,
name|handlers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies a comma-delimited set of Handler instances to lookup in          * your Registry. These handlers are added to the Jetty servlet context          * (for example, to add security). Important: You can not use different          * handlers with different Jetty endpoints using the same port number.          * The handlers is associated to the port number. If you need different          * handlers, then use different port numbers.          *           * The option will be converted to a          *<code>java.util.List&lt;org.eclipse.jetty.server.Handler&gt;</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|handlers (String handlers)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|handlers
parameter_list|(
name|String
name|handlers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"handlers"
argument_list|,
name|handlers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows using a custom multipart filter. Note: setting          * multipartFilterRef forces the value of enableMultipartFilter to true.          *           * The option is a:<code>javax.servlet.Filter</code> type.          *           * Group: consumer (advanced)          */
DECL|method|multipartFilter ( Object multipartFilter)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|multipartFilter
parameter_list|(
name|Object
name|multipartFilter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"multipartFilter"
argument_list|,
name|multipartFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows using a custom multipart filter. Note: setting          * multipartFilterRef forces the value of enableMultipartFilter to true.          *           * The option will be converted to a<code>javax.servlet.Filter</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|multipartFilter ( String multipartFilter)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|multipartFilter
parameter_list|(
name|String
name|multipartFilter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"multipartFilter"
argument_list|,
name|multipartFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to enable HTTP OPTIONS for this Servlet consumer.          * By default OPTIONS is turned off.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|optionsEnabled ( boolean optionsEnabled)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|optionsEnabled
parameter_list|(
name|boolean
name|optionsEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"optionsEnabled"
argument_list|,
name|optionsEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to enable HTTP OPTIONS for this Servlet consumer.          * By default OPTIONS is turned off.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|optionsEnabled ( String optionsEnabled)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|optionsEnabled
parameter_list|(
name|String
name|optionsEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"optionsEnabled"
argument_list|,
name|optionsEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to enable HTTP TRACE for this Servlet consumer. By          * default TRACE is turned off.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|traceEnabled ( boolean traceEnabled)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|traceEnabled
parameter_list|(
name|boolean
name|traceEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"traceEnabled"
argument_list|,
name|traceEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to enable HTTP TRACE for this Servlet consumer. By          * default TRACE is turned off.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer (advanced)          */
DECL|method|traceEnabled ( String traceEnabled)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|traceEnabled
parameter_list|(
name|String
name|traceEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"traceEnabled"
argument_list|,
name|traceEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is true then IN exchange Body of the exchange will be          * mapped to HTTP body. Setting this to false will avoid the HTTP          * mapping.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|mapHttpMessageBody ( boolean mapHttpMessageBody)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|mapHttpMessageBody
parameter_list|(
name|boolean
name|mapHttpMessageBody
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mapHttpMessageBody"
argument_list|,
name|mapHttpMessageBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is true then IN exchange Body of the exchange will be          * mapped to HTTP body. Setting this to false will avoid the HTTP          * mapping.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|mapHttpMessageBody ( String mapHttpMessageBody)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|mapHttpMessageBody
parameter_list|(
name|String
name|mapHttpMessageBody
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mapHttpMessageBody"
argument_list|,
name|mapHttpMessageBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is true then IN exchange Form Encoded body of the          * exchange will be mapped to HTTP. Setting this to false will avoid the          * HTTP Form Encoded body mapping.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|mapHttpMessageFormUrlEncodedBody ( boolean mapHttpMessageFormUrlEncodedBody)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|mapHttpMessageFormUrlEncodedBody
parameter_list|(
name|boolean
name|mapHttpMessageFormUrlEncodedBody
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mapHttpMessageFormUrlEncodedBody"
argument_list|,
name|mapHttpMessageFormUrlEncodedBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is true then IN exchange Form Encoded body of the          * exchange will be mapped to HTTP. Setting this to false will avoid the          * HTTP Form Encoded body mapping.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|mapHttpMessageFormUrlEncodedBody ( String mapHttpMessageFormUrlEncodedBody)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|mapHttpMessageFormUrlEncodedBody
parameter_list|(
name|String
name|mapHttpMessageFormUrlEncodedBody
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mapHttpMessageFormUrlEncodedBody"
argument_list|,
name|mapHttpMessageFormUrlEncodedBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is true then IN exchange Headers of the exchange will          * be mapped to HTTP headers. Setting this to false will avoid the HTTP          * Headers mapping.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|mapHttpMessageHeaders ( boolean mapHttpMessageHeaders)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|mapHttpMessageHeaders
parameter_list|(
name|boolean
name|mapHttpMessageHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mapHttpMessageHeaders"
argument_list|,
name|mapHttpMessageHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is true then IN exchange Headers of the exchange will          * be mapped to HTTP headers. Setting this to false will avoid the HTTP          * Headers mapping.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|mapHttpMessageHeaders ( String mapHttpMessageHeaders)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|mapHttpMessageHeaders
parameter_list|(
name|String
name|mapHttpMessageHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"mapHttpMessageHeaders"
argument_list|,
name|mapHttpMessageHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedJettyHttpEndpointBuilder9
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Jetty (camel-jetty)      * To use Jetty as a HTTP server as consumer for Camel routes.      *       * Category: http      * Since: 1.2      * Maven coordinates: org.apache.camel:camel-jetty      *       * Syntax:<code>jetty:httpUri</code>      *       * Path parameter: httpUri (required)      * The url of the HTTP endpoint to call.      */
DECL|method|jetty (String path)
specifier|default
name|JettyHttpEndpointBuilder9
name|jetty
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|JettyHttpEndpointBuilder9Impl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|JettyHttpEndpointBuilder9
implements|,
name|AdvancedJettyHttpEndpointBuilder9
block|{
specifier|public
name|JettyHttpEndpointBuilder9Impl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"jetty"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|JettyHttpEndpointBuilder9Impl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

