begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * Provides functionality required by Healthcare providers to communicate with  * other systems using the MLLP protocol.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|MllpEndpointBuilderFactory
specifier|public
interface|interface
name|MllpEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the MLLP component.      */
DECL|interface|MllpEndpointConsumerBuilder
specifier|public
interface|interface
name|MllpEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedMllpEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Hostname or IP for connection for the TCP connection. The default          * value is null, which means any local IP address.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|hostname (String hostname)
specifier|default
name|MllpEndpointConsumerBuilder
name|hostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hostname"
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the TCP connection.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|port (int port)
specifier|default
name|MllpEndpointConsumerBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the TCP connection.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|port (String port)
specifier|default
name|MllpEndpointConsumerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the automatic generation of a MLLP Acknowledgement          * MLLP Consumers only.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoAck (boolean autoAck)
specifier|default
name|MllpEndpointConsumerBuilder
name|autoAck
parameter_list|(
name|boolean
name|autoAck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoAck"
argument_list|,
name|autoAck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the automatic generation of a MLLP Acknowledgement          * MLLP Consumers only.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoAck (String autoAck)
specifier|default
name|MllpEndpointConsumerBuilder
name|autoAck
parameter_list|(
name|String
name|autoAck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoAck"
argument_list|,
name|autoAck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the buffering of HL7 payloads before writing to the          * socket.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|bufferWrites (boolean bufferWrites)
specifier|default
name|MllpEndpointConsumerBuilder
name|bufferWrites
parameter_list|(
name|boolean
name|bufferWrites
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bufferWrites"
argument_list|,
name|bufferWrites
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the buffering of HL7 payloads before writing to the          * socket.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|bufferWrites (String bufferWrites)
specifier|default
name|MllpEndpointConsumerBuilder
name|bufferWrites
parameter_list|(
name|String
name|bufferWrites
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bufferWrites"
argument_list|,
name|bufferWrites
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the automatic generation of message headers from the          * HL7 Message MLLP Consumers only.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|hl7Headers (boolean hl7Headers)
specifier|default
name|MllpEndpointConsumerBuilder
name|hl7Headers
parameter_list|(
name|boolean
name|hl7Headers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hl7Headers"
argument_list|,
name|hl7Headers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the automatic generation of message headers from the          * HL7 Message MLLP Consumers only.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|hl7Headers (String hl7Headers)
specifier|default
name|MllpEndpointConsumerBuilder
name|hl7Headers
parameter_list|(
name|String
name|hl7Headers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hl7Headers"
argument_list|,
name|hl7Headers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable strict compliance to the MLLP standard. The MLLP          * standard specifies START_OF_BLOCKhl7 payloadEND_OF_BLOCKEND_OF_DATA,          * however, some systems do not send the final END_OF_DATA byte. This          * setting controls whether or not the final END_OF_DATA byte is          * required or optional.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|requireEndOfData ( boolean requireEndOfData)
specifier|default
name|MllpEndpointConsumerBuilder
name|requireEndOfData
parameter_list|(
name|boolean
name|requireEndOfData
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requireEndOfData"
argument_list|,
name|requireEndOfData
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable strict compliance to the MLLP standard. The MLLP          * standard specifies START_OF_BLOCKhl7 payloadEND_OF_BLOCKEND_OF_DATA,          * however, some systems do not send the final END_OF_DATA byte. This          * setting controls whether or not the final END_OF_DATA byte is          * required or optional.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|requireEndOfData ( String requireEndOfData)
specifier|default
name|MllpEndpointConsumerBuilder
name|requireEndOfData
parameter_list|(
name|String
name|requireEndOfData
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requireEndOfData"
argument_list|,
name|requireEndOfData
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable converting the payload to a String. If enabled, HL7          * Payloads received from external systems will be validated converted          * to a String. If the charsetName property is set, that character set          * will be used for the conversion. If the charsetName property is not          * set, the value of MSH-18 will be used to determine th appropriate          * character set. If MSH-18 is not set, then the default ISO-8859-1          * character set will be use.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|stringPayload (boolean stringPayload)
specifier|default
name|MllpEndpointConsumerBuilder
name|stringPayload
parameter_list|(
name|boolean
name|stringPayload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"stringPayload"
argument_list|,
name|stringPayload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable converting the payload to a String. If enabled, HL7          * Payloads received from external systems will be validated converted          * to a String. If the charsetName property is set, that character set          * will be used for the conversion. If the charsetName property is not          * set, the value of MSH-18 will be used to determine th appropriate          * character set. If MSH-18 is not set, then the default ISO-8859-1          * character set will be use.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|stringPayload (String stringPayload)
specifier|default
name|MllpEndpointConsumerBuilder
name|stringPayload
parameter_list|(
name|String
name|stringPayload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"stringPayload"
argument_list|,
name|stringPayload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the validation of HL7 Payloads If enabled, HL7          * Payloads received from external systems will be validated (see          * Hl7Util.generateInvalidPayloadExceptionMessage for details on the          * validation). If and invalid payload is detected, a          * MllpInvalidMessageException (for consumers) or a          * MllpInvalidAcknowledgementException will be thrown.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|validatePayload ( boolean validatePayload)
specifier|default
name|MllpEndpointConsumerBuilder
name|validatePayload
parameter_list|(
name|boolean
name|validatePayload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"validatePayload"
argument_list|,
name|validatePayload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the validation of HL7 Payloads If enabled, HL7          * Payloads received from external systems will be validated (see          * Hl7Util.generateInvalidPayloadExceptionMessage for details on the          * validation). If and invalid payload is detected, a          * MllpInvalidMessageException (for consumers) or a          * MllpInvalidAcknowledgementException will be thrown.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|validatePayload ( String validatePayload)
specifier|default
name|MllpEndpointConsumerBuilder
name|validatePayload
parameter_list|(
name|String
name|validatePayload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"validatePayload"
argument_list|,
name|validatePayload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * receive incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. If disabled, the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions by logging them at WARN or ERROR level and ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|MllpEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * receive incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. If disabled, the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions by logging them at WARN or ERROR level and ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|MllpEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the CamelCharsetName property on the exchange.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: codec          */
DECL|method|charsetName (String charsetName)
specifier|default
name|MllpEndpointConsumerBuilder
name|charsetName
parameter_list|(
name|String
name|charsetName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"charsetName"
argument_list|,
name|charsetName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the MLLP component.      */
DECL|interface|AdvancedMllpEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedMllpEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|MllpEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|MllpEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used (this          * component only supports synchronous operations).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used (this          * component only supports synchronous operations).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum queue length for incoming connection indications (a          * request to connect) is set to the backlog parameter. If a connection          * indication arrives when the queue is full, the connection is refused.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: tcp          */
DECL|method|backlog (Integer backlog)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|backlog
parameter_list|(
name|Integer
name|backlog
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backlog"
argument_list|,
name|backlog
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum queue length for incoming connection indications (a          * request to connect) is set to the backlog parameter. If a connection          * indication arrives when the queue is full, the connection is refused.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: tcp          */
DECL|method|backlog (String backlog)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|backlog
parameter_list|(
name|String
name|backlog
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backlog"
argument_list|,
name|backlog
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * TCP Server Only - Allow the endpoint to start before the TCP          * ServerSocket is bound. In some environments, it may be desirable to          * allow the endpoint to start before the TCP ServerSocket is bound.          *           * The option is a:<code>boolean</code> type.          *           * Group: tcp          */
DECL|method|lenientBind ( boolean lenientBind)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|lenientBind
parameter_list|(
name|boolean
name|lenientBind
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lenientBind"
argument_list|,
name|lenientBind
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * TCP Server Only - Allow the endpoint to start before the TCP          * ServerSocket is bound. In some environments, it may be desirable to          * allow the endpoint to start before the TCP ServerSocket is bound.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: tcp          */
DECL|method|lenientBind ( String lenientBind)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|lenientBind
parameter_list|(
name|String
name|lenientBind
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lenientBind"
argument_list|,
name|lenientBind
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of concurrent MLLP Consumer connections that will          * be allowed. If a new connection is received and the maximum is number          * are already established, the new connection will be reset          * immediately.          *           * The option is a:<code>int</code> type.          *           * Group: tcp          */
DECL|method|maxConcurrentConsumers ( int maxConcurrentConsumers)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|maxConcurrentConsumers
parameter_list|(
name|int
name|maxConcurrentConsumers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxConcurrentConsumers"
argument_list|,
name|maxConcurrentConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of concurrent MLLP Consumer connections that will          * be allowed. If a new connection is received and the maximum is number          * are already established, the new connection will be reset          * immediately.          *           * The option will be converted to a<code>int</code> type.          *           * Group: tcp          */
DECL|method|maxConcurrentConsumers ( String maxConcurrentConsumers)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|maxConcurrentConsumers
parameter_list|(
name|String
name|maxConcurrentConsumers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxConcurrentConsumers"
argument_list|,
name|maxConcurrentConsumers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/disable the SO_REUSEADDR socket option.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: tcp          */
DECL|method|reuseAddress ( Boolean reuseAddress)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|reuseAddress
parameter_list|(
name|Boolean
name|reuseAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/disable the SO_REUSEADDR socket option.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: tcp          */
DECL|method|reuseAddress ( String reuseAddress)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|reuseAddress
parameter_list|(
name|String
name|reuseAddress
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reuseAddress"
argument_list|,
name|reuseAddress
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout (in milliseconds) while waiting for a TCP connection TCP          * Server Only.          *           * The option is a:<code>int</code> type.          *           * Group: timeout          */
DECL|method|acceptTimeout ( int acceptTimeout)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|acceptTimeout
parameter_list|(
name|int
name|acceptTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"acceptTimeout"
argument_list|,
name|acceptTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout (in milliseconds) while waiting for a TCP connection TCP          * Server Only.          *           * The option will be converted to a<code>int</code> type.          *           * Group: timeout          */
DECL|method|acceptTimeout ( String acceptTimeout)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|acceptTimeout
parameter_list|(
name|String
name|acceptTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"acceptTimeout"
argument_list|,
name|acceptTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * TCP Server Only - The number of milliseconds to wait between bind          * attempts.          *           * The option is a:<code>int</code> type.          *           * Group: timeout          */
DECL|method|bindRetryInterval ( int bindRetryInterval)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|bindRetryInterval
parameter_list|(
name|int
name|bindRetryInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bindRetryInterval"
argument_list|,
name|bindRetryInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * TCP Server Only - The number of milliseconds to wait between bind          * attempts.          *           * The option will be converted to a<code>int</code> type.          *           * Group: timeout          */
DECL|method|bindRetryInterval ( String bindRetryInterval)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|bindRetryInterval
parameter_list|(
name|String
name|bindRetryInterval
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bindRetryInterval"
argument_list|,
name|bindRetryInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * TCP Server Only - The number of milliseconds to retry binding to a          * server port.          *           * The option is a:<code>int</code> type.          *           * Group: timeout          */
DECL|method|bindTimeout (int bindTimeout)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|bindTimeout
parameter_list|(
name|int
name|bindTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bindTimeout"
argument_list|,
name|bindTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * TCP Server Only - The number of milliseconds to retry binding to a          * server port.          *           * The option will be converted to a<code>int</code> type.          *           * Group: timeout          */
DECL|method|bindTimeout ( String bindTimeout)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|bindTimeout
parameter_list|(
name|String
name|bindTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bindTimeout"
argument_list|,
name|bindTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The approximate idle time allowed before the Client TCP Connection          * will be reset. A null value or a value less than or equal to zero          * will disable the idle timeout.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: timeout          */
DECL|method|idleTimeout ( Integer idleTimeout)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|idleTimeout
parameter_list|(
name|Integer
name|idleTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"idleTimeout"
argument_list|,
name|idleTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The approximate idle time allowed before the Client TCP Connection          * will be reset. A null value or a value less than or equal to zero          * will disable the idle timeout.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: timeout          */
DECL|method|idleTimeout ( String idleTimeout)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|idleTimeout
parameter_list|(
name|String
name|idleTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"idleTimeout"
argument_list|,
name|idleTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of timeouts (specified by receiveTimeout) allowed          * before the TCP Connection will be reset.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: timeout          */
annotation|@
name|Deprecated
DECL|method|maxReceiveTimeouts ( Integer maxReceiveTimeouts)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|maxReceiveTimeouts
parameter_list|(
name|Integer
name|maxReceiveTimeouts
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReceiveTimeouts"
argument_list|,
name|maxReceiveTimeouts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of timeouts (specified by receiveTimeout) allowed          * before the TCP Connection will be reset.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: timeout          */
annotation|@
name|Deprecated
DECL|method|maxReceiveTimeouts ( String maxReceiveTimeouts)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|maxReceiveTimeouts
parameter_list|(
name|String
name|maxReceiveTimeouts
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxReceiveTimeouts"
argument_list|,
name|maxReceiveTimeouts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SO_RCVBUF option to the specified value (in bytes).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: tcp          */
DECL|method|receiveBufferSize ( Integer receiveBufferSize)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|receiveBufferSize
parameter_list|(
name|Integer
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SO_RCVBUF option to the specified value (in bytes).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: tcp          */
DECL|method|receiveBufferSize ( String receiveBufferSize)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|receiveBufferSize
parameter_list|(
name|String
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SO_SNDBUF option to the specified value (in bytes).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: tcp          */
DECL|method|sendBufferSize ( Integer sendBufferSize)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|sendBufferSize
parameter_list|(
name|Integer
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SO_SNDBUF option to the specified value (in bytes).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: tcp          */
DECL|method|sendBufferSize ( String sendBufferSize)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|sendBufferSize
parameter_list|(
name|String
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The SO_TIMEOUT value (in milliseconds) used after the start of an          * MLLP frame has been received.          *           * The option is a:<code>int</code> type.          *           * Group: timeout          */
DECL|method|readTimeout (int readTimeout)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|readTimeout
parameter_list|(
name|int
name|readTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readTimeout"
argument_list|,
name|readTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The SO_TIMEOUT value (in milliseconds) used after the start of an          * MLLP frame has been received.          *           * The option will be converted to a<code>int</code> type.          *           * Group: timeout          */
DECL|method|readTimeout ( String readTimeout)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|readTimeout
parameter_list|(
name|String
name|readTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readTimeout"
argument_list|,
name|readTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The SO_TIMEOUT value (in milliseconds) used when waiting for the          * start of an MLLP frame.          *           * The option is a:<code>int</code> type.          *           * Group: timeout          */
DECL|method|receiveTimeout ( int receiveTimeout)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|receiveTimeout
parameter_list|(
name|int
name|receiveTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveTimeout"
argument_list|,
name|receiveTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The SO_TIMEOUT value (in milliseconds) used when waiting for the          * start of an MLLP frame.          *           * The option will be converted to a<code>int</code> type.          *           * Group: timeout          */
DECL|method|receiveTimeout ( String receiveTimeout)
specifier|default
name|AdvancedMllpEndpointConsumerBuilder
name|receiveTimeout
parameter_list|(
name|String
name|receiveTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveTimeout"
argument_list|,
name|receiveTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the MLLP component.      */
DECL|interface|MllpEndpointProducerBuilder
specifier|public
interface|interface
name|MllpEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedMllpEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Hostname or IP for connection for the TCP connection. The default          * value is null, which means any local IP address.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|hostname (String hostname)
specifier|default
name|MllpEndpointProducerBuilder
name|hostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hostname"
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the TCP connection.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|port (int port)
specifier|default
name|MllpEndpointProducerBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the TCP connection.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|port (String port)
specifier|default
name|MllpEndpointProducerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the automatic generation of a MLLP Acknowledgement          * MLLP Consumers only.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoAck (boolean autoAck)
specifier|default
name|MllpEndpointProducerBuilder
name|autoAck
parameter_list|(
name|boolean
name|autoAck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoAck"
argument_list|,
name|autoAck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the automatic generation of a MLLP Acknowledgement          * MLLP Consumers only.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoAck (String autoAck)
specifier|default
name|MllpEndpointProducerBuilder
name|autoAck
parameter_list|(
name|String
name|autoAck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoAck"
argument_list|,
name|autoAck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the buffering of HL7 payloads before writing to the          * socket.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|bufferWrites (boolean bufferWrites)
specifier|default
name|MllpEndpointProducerBuilder
name|bufferWrites
parameter_list|(
name|boolean
name|bufferWrites
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bufferWrites"
argument_list|,
name|bufferWrites
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the buffering of HL7 payloads before writing to the          * socket.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|bufferWrites (String bufferWrites)
specifier|default
name|MllpEndpointProducerBuilder
name|bufferWrites
parameter_list|(
name|String
name|bufferWrites
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bufferWrites"
argument_list|,
name|bufferWrites
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the automatic generation of message headers from the          * HL7 Message MLLP Consumers only.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|hl7Headers (boolean hl7Headers)
specifier|default
name|MllpEndpointProducerBuilder
name|hl7Headers
parameter_list|(
name|boolean
name|hl7Headers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hl7Headers"
argument_list|,
name|hl7Headers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the automatic generation of message headers from the          * HL7 Message MLLP Consumers only.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|hl7Headers (String hl7Headers)
specifier|default
name|MllpEndpointProducerBuilder
name|hl7Headers
parameter_list|(
name|String
name|hl7Headers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hl7Headers"
argument_list|,
name|hl7Headers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable strict compliance to the MLLP standard. The MLLP          * standard specifies START_OF_BLOCKhl7 payloadEND_OF_BLOCKEND_OF_DATA,          * however, some systems do not send the final END_OF_DATA byte. This          * setting controls whether or not the final END_OF_DATA byte is          * required or optional.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|requireEndOfData ( boolean requireEndOfData)
specifier|default
name|MllpEndpointProducerBuilder
name|requireEndOfData
parameter_list|(
name|boolean
name|requireEndOfData
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requireEndOfData"
argument_list|,
name|requireEndOfData
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable strict compliance to the MLLP standard. The MLLP          * standard specifies START_OF_BLOCKhl7 payloadEND_OF_BLOCKEND_OF_DATA,          * however, some systems do not send the final END_OF_DATA byte. This          * setting controls whether or not the final END_OF_DATA byte is          * required or optional.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|requireEndOfData ( String requireEndOfData)
specifier|default
name|MllpEndpointProducerBuilder
name|requireEndOfData
parameter_list|(
name|String
name|requireEndOfData
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requireEndOfData"
argument_list|,
name|requireEndOfData
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable converting the payload to a String. If enabled, HL7          * Payloads received from external systems will be validated converted          * to a String. If the charsetName property is set, that character set          * will be used for the conversion. If the charsetName property is not          * set, the value of MSH-18 will be used to determine th appropriate          * character set. If MSH-18 is not set, then the default ISO-8859-1          * character set will be use.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|stringPayload (boolean stringPayload)
specifier|default
name|MllpEndpointProducerBuilder
name|stringPayload
parameter_list|(
name|boolean
name|stringPayload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"stringPayload"
argument_list|,
name|stringPayload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable converting the payload to a String. If enabled, HL7          * Payloads received from external systems will be validated converted          * to a String. If the charsetName property is set, that character set          * will be used for the conversion. If the charsetName property is not          * set, the value of MSH-18 will be used to determine th appropriate          * character set. If MSH-18 is not set, then the default ISO-8859-1          * character set will be use.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|stringPayload (String stringPayload)
specifier|default
name|MllpEndpointProducerBuilder
name|stringPayload
parameter_list|(
name|String
name|stringPayload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"stringPayload"
argument_list|,
name|stringPayload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the validation of HL7 Payloads If enabled, HL7          * Payloads received from external systems will be validated (see          * Hl7Util.generateInvalidPayloadExceptionMessage for details on the          * validation). If and invalid payload is detected, a          * MllpInvalidMessageException (for consumers) or a          * MllpInvalidAcknowledgementException will be thrown.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|validatePayload ( boolean validatePayload)
specifier|default
name|MllpEndpointProducerBuilder
name|validatePayload
parameter_list|(
name|boolean
name|validatePayload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"validatePayload"
argument_list|,
name|validatePayload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the validation of HL7 Payloads If enabled, HL7          * Payloads received from external systems will be validated (see          * Hl7Util.generateInvalidPayloadExceptionMessage for details on the          * validation). If and invalid payload is detected, a          * MllpInvalidMessageException (for consumers) or a          * MllpInvalidAcknowledgementException will be thrown.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|validatePayload ( String validatePayload)
specifier|default
name|MllpEndpointProducerBuilder
name|validatePayload
parameter_list|(
name|String
name|validatePayload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"validatePayload"
argument_list|,
name|validatePayload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|MllpEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|MllpEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the CamelCharsetName property on the exchange.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: codec          */
DECL|method|charsetName (String charsetName)
specifier|default
name|MllpEndpointProducerBuilder
name|charsetName
parameter_list|(
name|String
name|charsetName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"charsetName"
argument_list|,
name|charsetName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the MLLP component.      */
DECL|interface|AdvancedMllpEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedMllpEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|MllpEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|MllpEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used (this          * component only supports synchronous operations).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used (this          * component only supports synchronous operations).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout (in milliseconds) for establishing for a TCP connection TCP          * Client only.          *           * The option is a:<code>int</code> type.          *           * Group: timeout          */
DECL|method|connectTimeout ( int connectTimeout)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|connectTimeout
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout (in milliseconds) for establishing for a TCP connection TCP          * Client only.          *           * The option will be converted to a<code>int</code> type.          *           * Group: timeout          */
DECL|method|connectTimeout ( String connectTimeout)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|connectTimeout
parameter_list|(
name|String
name|connectTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The approximate idle time allowed before the Client TCP Connection          * will be reset. A null value or a value less than or equal to zero          * will disable the idle timeout.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: timeout          */
DECL|method|idleTimeout ( Integer idleTimeout)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|idleTimeout
parameter_list|(
name|Integer
name|idleTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"idleTimeout"
argument_list|,
name|idleTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The approximate idle time allowed before the Client TCP Connection          * will be reset. A null value or a value less than or equal to zero          * will disable the idle timeout.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: timeout          */
DECL|method|idleTimeout ( String idleTimeout)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|idleTimeout
parameter_list|(
name|String
name|idleTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"idleTimeout"
argument_list|,
name|idleTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/disable the SO_KEEPALIVE socket option.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: tcp          */
DECL|method|keepAlive (Boolean keepAlive)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|keepAlive
parameter_list|(
name|Boolean
name|keepAlive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/disable the SO_KEEPALIVE socket option.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: tcp          */
DECL|method|keepAlive (String keepAlive)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|keepAlive
parameter_list|(
name|String
name|keepAlive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SO_RCVBUF option to the specified value (in bytes).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: tcp          */
DECL|method|receiveBufferSize ( Integer receiveBufferSize)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|receiveBufferSize
parameter_list|(
name|Integer
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SO_RCVBUF option to the specified value (in bytes).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: tcp          */
DECL|method|receiveBufferSize ( String receiveBufferSize)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|receiveBufferSize
parameter_list|(
name|String
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SO_SNDBUF option to the specified value (in bytes).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: tcp          */
DECL|method|sendBufferSize ( Integer sendBufferSize)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|sendBufferSize
parameter_list|(
name|Integer
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SO_SNDBUF option to the specified value (in bytes).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: tcp          */
DECL|method|sendBufferSize ( String sendBufferSize)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|sendBufferSize
parameter_list|(
name|String
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/disable the TCP_NODELAY socket option.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: tcp          */
DECL|method|tcpNoDelay ( Boolean tcpNoDelay)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|tcpNoDelay
parameter_list|(
name|Boolean
name|tcpNoDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/disable the TCP_NODELAY socket option.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: tcp          */
DECL|method|tcpNoDelay (String tcpNoDelay)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|tcpNoDelay
parameter_list|(
name|String
name|tcpNoDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The SO_TIMEOUT value (in milliseconds) used after the start of an          * MLLP frame has been received.          *           * The option is a:<code>int</code> type.          *           * Group: timeout          */
DECL|method|readTimeout (int readTimeout)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|readTimeout
parameter_list|(
name|int
name|readTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readTimeout"
argument_list|,
name|readTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The SO_TIMEOUT value (in milliseconds) used after the start of an          * MLLP frame has been received.          *           * The option will be converted to a<code>int</code> type.          *           * Group: timeout          */
DECL|method|readTimeout ( String readTimeout)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|readTimeout
parameter_list|(
name|String
name|readTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readTimeout"
argument_list|,
name|readTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The SO_TIMEOUT value (in milliseconds) used when waiting for the          * start of an MLLP frame.          *           * The option is a:<code>int</code> type.          *           * Group: timeout          */
DECL|method|receiveTimeout ( int receiveTimeout)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|receiveTimeout
parameter_list|(
name|int
name|receiveTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveTimeout"
argument_list|,
name|receiveTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The SO_TIMEOUT value (in milliseconds) used when waiting for the          * start of an MLLP frame.          *           * The option will be converted to a<code>int</code> type.          *           * Group: timeout          */
DECL|method|receiveTimeout ( String receiveTimeout)
specifier|default
name|AdvancedMllpEndpointProducerBuilder
name|receiveTimeout
parameter_list|(
name|String
name|receiveTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveTimeout"
argument_list|,
name|receiveTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the MLLP component.      */
DECL|interface|MllpEndpointBuilder
specifier|public
interface|interface
name|MllpEndpointBuilder
extends|extends
name|MllpEndpointConsumerBuilder
extends|,
name|MllpEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedMllpEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedMllpEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Hostname or IP for connection for the TCP connection. The default          * value is null, which means any local IP address.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|hostname (String hostname)
specifier|default
name|MllpEndpointBuilder
name|hostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hostname"
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the TCP connection.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|port (int port)
specifier|default
name|MllpEndpointBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the TCP connection.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|port (String port)
specifier|default
name|MllpEndpointBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the automatic generation of a MLLP Acknowledgement          * MLLP Consumers only.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoAck (boolean autoAck)
specifier|default
name|MllpEndpointBuilder
name|autoAck
parameter_list|(
name|boolean
name|autoAck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoAck"
argument_list|,
name|autoAck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the automatic generation of a MLLP Acknowledgement          * MLLP Consumers only.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoAck (String autoAck)
specifier|default
name|MllpEndpointBuilder
name|autoAck
parameter_list|(
name|String
name|autoAck
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoAck"
argument_list|,
name|autoAck
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the buffering of HL7 payloads before writing to the          * socket.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|bufferWrites (boolean bufferWrites)
specifier|default
name|MllpEndpointBuilder
name|bufferWrites
parameter_list|(
name|boolean
name|bufferWrites
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bufferWrites"
argument_list|,
name|bufferWrites
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the buffering of HL7 payloads before writing to the          * socket.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|bufferWrites (String bufferWrites)
specifier|default
name|MllpEndpointBuilder
name|bufferWrites
parameter_list|(
name|String
name|bufferWrites
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bufferWrites"
argument_list|,
name|bufferWrites
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the automatic generation of message headers from the          * HL7 Message MLLP Consumers only.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|hl7Headers (boolean hl7Headers)
specifier|default
name|MllpEndpointBuilder
name|hl7Headers
parameter_list|(
name|boolean
name|hl7Headers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hl7Headers"
argument_list|,
name|hl7Headers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the automatic generation of message headers from the          * HL7 Message MLLP Consumers only.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|hl7Headers (String hl7Headers)
specifier|default
name|MllpEndpointBuilder
name|hl7Headers
parameter_list|(
name|String
name|hl7Headers
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hl7Headers"
argument_list|,
name|hl7Headers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable strict compliance to the MLLP standard. The MLLP          * standard specifies START_OF_BLOCKhl7 payloadEND_OF_BLOCKEND_OF_DATA,          * however, some systems do not send the final END_OF_DATA byte. This          * setting controls whether or not the final END_OF_DATA byte is          * required or optional.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|requireEndOfData (boolean requireEndOfData)
specifier|default
name|MllpEndpointBuilder
name|requireEndOfData
parameter_list|(
name|boolean
name|requireEndOfData
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requireEndOfData"
argument_list|,
name|requireEndOfData
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable strict compliance to the MLLP standard. The MLLP          * standard specifies START_OF_BLOCKhl7 payloadEND_OF_BLOCKEND_OF_DATA,          * however, some systems do not send the final END_OF_DATA byte. This          * setting controls whether or not the final END_OF_DATA byte is          * required or optional.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|requireEndOfData (String requireEndOfData)
specifier|default
name|MllpEndpointBuilder
name|requireEndOfData
parameter_list|(
name|String
name|requireEndOfData
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"requireEndOfData"
argument_list|,
name|requireEndOfData
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable converting the payload to a String. If enabled, HL7          * Payloads received from external systems will be validated converted          * to a String. If the charsetName property is set, that character set          * will be used for the conversion. If the charsetName property is not          * set, the value of MSH-18 will be used to determine th appropriate          * character set. If MSH-18 is not set, then the default ISO-8859-1          * character set will be use.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|stringPayload (boolean stringPayload)
specifier|default
name|MllpEndpointBuilder
name|stringPayload
parameter_list|(
name|boolean
name|stringPayload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"stringPayload"
argument_list|,
name|stringPayload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable converting the payload to a String. If enabled, HL7          * Payloads received from external systems will be validated converted          * to a String. If the charsetName property is set, that character set          * will be used for the conversion. If the charsetName property is not          * set, the value of MSH-18 will be used to determine th appropriate          * character set. If MSH-18 is not set, then the default ISO-8859-1          * character set will be use.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|stringPayload (String stringPayload)
specifier|default
name|MllpEndpointBuilder
name|stringPayload
parameter_list|(
name|String
name|stringPayload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"stringPayload"
argument_list|,
name|stringPayload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the validation of HL7 Payloads If enabled, HL7          * Payloads received from external systems will be validated (see          * Hl7Util.generateInvalidPayloadExceptionMessage for details on the          * validation). If and invalid payload is detected, a          * MllpInvalidMessageException (for consumers) or a          * MllpInvalidAcknowledgementException will be thrown.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|validatePayload (boolean validatePayload)
specifier|default
name|MllpEndpointBuilder
name|validatePayload
parameter_list|(
name|boolean
name|validatePayload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"validatePayload"
argument_list|,
name|validatePayload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Enable/Disable the validation of HL7 Payloads If enabled, HL7          * Payloads received from external systems will be validated (see          * Hl7Util.generateInvalidPayloadExceptionMessage for details on the          * validation). If and invalid payload is detected, a          * MllpInvalidMessageException (for consumers) or a          * MllpInvalidAcknowledgementException will be thrown.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|validatePayload (String validatePayload)
specifier|default
name|MllpEndpointBuilder
name|validatePayload
parameter_list|(
name|String
name|validatePayload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"validatePayload"
argument_list|,
name|validatePayload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the CamelCharsetName property on the exchange.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: codec          */
DECL|method|charsetName (String charsetName)
specifier|default
name|MllpEndpointBuilder
name|charsetName
parameter_list|(
name|String
name|charsetName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"charsetName"
argument_list|,
name|charsetName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the MLLP component.      */
DECL|interface|AdvancedMllpEndpointBuilder
specifier|public
interface|interface
name|AdvancedMllpEndpointBuilder
extends|extends
name|AdvancedMllpEndpointConsumerBuilder
extends|,
name|AdvancedMllpEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|MllpEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|MllpEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedMllpEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedMllpEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used (this          * component only supports synchronous operations).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedMllpEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used (this          * component only supports synchronous operations).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedMllpEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The approximate idle time allowed before the Client TCP Connection          * will be reset. A null value or a value less than or equal to zero          * will disable the idle timeout.          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: timeout          */
DECL|method|idleTimeout (Integer idleTimeout)
specifier|default
name|AdvancedMllpEndpointBuilder
name|idleTimeout
parameter_list|(
name|Integer
name|idleTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"idleTimeout"
argument_list|,
name|idleTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The approximate idle time allowed before the Client TCP Connection          * will be reset. A null value or a value less than or equal to zero          * will disable the idle timeout.          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: timeout          */
DECL|method|idleTimeout (String idleTimeout)
specifier|default
name|AdvancedMllpEndpointBuilder
name|idleTimeout
parameter_list|(
name|String
name|idleTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"idleTimeout"
argument_list|,
name|idleTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SO_RCVBUF option to the specified value (in bytes).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: tcp          */
DECL|method|receiveBufferSize ( Integer receiveBufferSize)
specifier|default
name|AdvancedMllpEndpointBuilder
name|receiveBufferSize
parameter_list|(
name|Integer
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SO_RCVBUF option to the specified value (in bytes).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: tcp          */
DECL|method|receiveBufferSize ( String receiveBufferSize)
specifier|default
name|AdvancedMllpEndpointBuilder
name|receiveBufferSize
parameter_list|(
name|String
name|receiveBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveBufferSize"
argument_list|,
name|receiveBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SO_SNDBUF option to the specified value (in bytes).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: tcp          */
DECL|method|sendBufferSize ( Integer sendBufferSize)
specifier|default
name|AdvancedMllpEndpointBuilder
name|sendBufferSize
parameter_list|(
name|Integer
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the SO_SNDBUF option to the specified value (in bytes).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: tcp          */
DECL|method|sendBufferSize (String sendBufferSize)
specifier|default
name|AdvancedMllpEndpointBuilder
name|sendBufferSize
parameter_list|(
name|String
name|sendBufferSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendBufferSize"
argument_list|,
name|sendBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The SO_TIMEOUT value (in milliseconds) used after the start of an          * MLLP frame has been received.          *           * The option is a:<code>int</code> type.          *           * Group: timeout          */
DECL|method|readTimeout (int readTimeout)
specifier|default
name|AdvancedMllpEndpointBuilder
name|readTimeout
parameter_list|(
name|int
name|readTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readTimeout"
argument_list|,
name|readTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The SO_TIMEOUT value (in milliseconds) used after the start of an          * MLLP frame has been received.          *           * The option will be converted to a<code>int</code> type.          *           * Group: timeout          */
DECL|method|readTimeout (String readTimeout)
specifier|default
name|AdvancedMllpEndpointBuilder
name|readTimeout
parameter_list|(
name|String
name|readTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"readTimeout"
argument_list|,
name|readTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The SO_TIMEOUT value (in milliseconds) used when waiting for the          * start of an MLLP frame.          *           * The option is a:<code>int</code> type.          *           * Group: timeout          */
DECL|method|receiveTimeout (int receiveTimeout)
specifier|default
name|AdvancedMllpEndpointBuilder
name|receiveTimeout
parameter_list|(
name|int
name|receiveTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveTimeout"
argument_list|,
name|receiveTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The SO_TIMEOUT value (in milliseconds) used when waiting for the          * start of an MLLP frame.          *           * The option will be converted to a<code>int</code> type.          *           * Group: timeout          */
DECL|method|receiveTimeout (String receiveTimeout)
specifier|default
name|AdvancedMllpEndpointBuilder
name|receiveTimeout
parameter_list|(
name|String
name|receiveTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"receiveTimeout"
argument_list|,
name|receiveTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * MLLP (camel-mllp)      * Provides functionality required by Healthcare providers to communicate      * with other systems using the MLLP protocol.      *       * Syntax:<code>mllp:hostname:port</code>      * Category: mllp      * Available as of version: 2.17      * Maven coordinates: org.apache.camel:camel-mllp      */
DECL|method|mllp (String path)
specifier|default
name|MllpEndpointBuilder
name|mllp
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|MllpEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|MllpEndpointBuilder
implements|,
name|AdvancedMllpEndpointBuilder
block|{
specifier|public
name|MllpEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"mllp"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|MllpEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

