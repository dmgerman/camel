begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_comment
comment|/**  * The undertow component provides HTTP and WebSocket based endpoints for  * consuming and producing HTTP/WebSocket requests.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|UndertowEndpointBuilderFactory
specifier|public
interface|interface
name|UndertowEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Undertow component.      */
DECL|interface|UndertowEndpointConsumerBuilder
specifier|public
interface|interface
name|UndertowEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedUndertowEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedUndertowEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether or not the consumer should write access log.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: consumer          */
DECL|method|accessLog (Boolean accessLog)
specifier|default
name|UndertowEndpointConsumerBuilder
name|accessLog
parameter_list|(
name|Boolean
name|accessLog
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessLog"
argument_list|,
name|accessLog
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the consumer should write access log.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: consumer          */
DECL|method|accessLog (String accessLog)
specifier|default
name|UndertowEndpointConsumerBuilder
name|accessLog
parameter_list|(
name|String
name|accessLog
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessLog"
argument_list|,
name|accessLog
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|UndertowEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|UndertowEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used to only allow consuming if the HttpMethod matches, such as          * GET/POST/PUT etc. Multiple methods can be specified separated by          * comma.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|httpMethodRestrict ( String httpMethodRestrict)
specifier|default
name|UndertowEndpointConsumerBuilder
name|httpMethodRestrict
parameter_list|(
name|String
name|httpMethodRestrict
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"httpMethodRestrict"
argument_list|,
name|httpMethodRestrict
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the consumer should try to find a target consumer by          * matching the URI prefix if no exact match is found.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: consumer          */
DECL|method|matchOnUriPrefix ( Boolean matchOnUriPrefix)
specifier|default
name|UndertowEndpointConsumerBuilder
name|matchOnUriPrefix
parameter_list|(
name|Boolean
name|matchOnUriPrefix
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"matchOnUriPrefix"
argument_list|,
name|matchOnUriPrefix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the consumer should try to find a target consumer by          * matching the URI prefix if no exact match is found.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: consumer          */
DECL|method|matchOnUriPrefix ( String matchOnUriPrefix)
specifier|default
name|UndertowEndpointConsumerBuilder
name|matchOnUriPrefix
parameter_list|(
name|String
name|matchOnUriPrefix
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"matchOnUriPrefix"
argument_list|,
name|matchOnUriPrefix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to enable HTTP OPTIONS for this Servlet consumer.          * By default OPTIONS is turned off.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|optionsEnabled ( boolean optionsEnabled)
specifier|default
name|UndertowEndpointConsumerBuilder
name|optionsEnabled
parameter_list|(
name|boolean
name|optionsEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"optionsEnabled"
argument_list|,
name|optionsEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies whether to enable HTTP OPTIONS for this Servlet consumer.          * By default OPTIONS is turned off.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|optionsEnabled ( String optionsEnabled)
specifier|default
name|UndertowEndpointConsumerBuilder
name|optionsEnabled
parameter_list|(
name|String
name|optionsEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"optionsEnabled"
argument_list|,
name|optionsEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * For HTTP endpoint: if true, text and binary messages will be wrapped          * as java.io.InputStream before they are passed to an Exchange;          * otherwise they will be passed as byte. For WebSocket endpoint: if          * true, text and binary messages will be wrapped as java.io.Reader and          * java.io.InputStream respectively before they are passed to an          * Exchange; otherwise they will be passed as String and byte          * respectively.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|useStreaming ( boolean useStreaming)
specifier|default
name|UndertowEndpointConsumerBuilder
name|useStreaming
parameter_list|(
name|boolean
name|useStreaming
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useStreaming"
argument_list|,
name|useStreaming
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * For HTTP endpoint: if true, text and binary messages will be wrapped          * as java.io.InputStream before they are passed to an Exchange;          * otherwise they will be passed as byte. For WebSocket endpoint: if          * true, text and binary messages will be wrapped as java.io.Reader and          * java.io.InputStream respectively before they are passed to an          * Exchange; otherwise they will be passed as String and byte          * respectively.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|useStreaming (String useStreaming)
specifier|default
name|UndertowEndpointConsumerBuilder
name|useStreaming
parameter_list|(
name|String
name|useStreaming
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useStreaming"
argument_list|,
name|useStreaming
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * if true, the consumer will post notifications to the route when a new          * WebSocket peer connects, disconnects, etc. See          * UndertowConstants.EVENT_TYPE and EventType.          *           * The option is a:<code>boolean</code> type.          *           * Group: websocket          */
DECL|method|fireWebSocketChannelEvents ( boolean fireWebSocketChannelEvents)
specifier|default
name|UndertowEndpointConsumerBuilder
name|fireWebSocketChannelEvents
parameter_list|(
name|boolean
name|fireWebSocketChannelEvents
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fireWebSocketChannelEvents"
argument_list|,
name|fireWebSocketChannelEvents
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * if true, the consumer will post notifications to the route when a new          * WebSocket peer connects, disconnects, etc. See          * UndertowConstants.EVENT_TYPE and EventType.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: websocket          */
DECL|method|fireWebSocketChannelEvents ( String fireWebSocketChannelEvents)
specifier|default
name|UndertowEndpointConsumerBuilder
name|fireWebSocketChannelEvents
parameter_list|(
name|String
name|fireWebSocketChannelEvents
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fireWebSocketChannelEvents"
argument_list|,
name|fireWebSocketChannelEvents
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * if true, text and binary messages coming through a WebSocket will be          * wrapped as java.io.Reader and java.io.InputStream respectively before          * they are passed to an Exchange; otherwise they will be passed as          * String and byte respectively.          *           * The option is a:<code>boolean</code> type.          *           * Group: websocket          */
DECL|method|useStreaming ( boolean useStreaming)
specifier|default
name|UndertowEndpointConsumerBuilder
name|useStreaming
parameter_list|(
name|boolean
name|useStreaming
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useStreaming"
argument_list|,
name|useStreaming
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * if true, text and binary messages coming through a WebSocket will be          * wrapped as java.io.Reader and java.io.InputStream respectively before          * they are passed to an Exchange; otherwise they will be passed as          * String and byte respectively.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: websocket          */
DECL|method|useStreaming (String useStreaming)
specifier|default
name|UndertowEndpointConsumerBuilder
name|useStreaming
parameter_list|(
name|String
name|useStreaming
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useStreaming"
argument_list|,
name|useStreaming
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|UndertowEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|UndertowEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Undertow component.      */
DECL|interface|AdvancedUndertowEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedUndertowEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|UndertowEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|UndertowEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedUndertowEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedUndertowEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedUndertowEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedUndertowEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which Undertow AccessLogReciever should be used Will use          * JBossLoggingAccessLogReceiver if not specifid.          *           * The option is a:          *<code>io.undertow.server.handlers.accesslog.AccessLogReceiver</code>          * type.          *           * Group: advanced          */
DECL|method|accessLogReceiver ( Object accessLogReceiver)
specifier|default
name|AdvancedUndertowEndpointConsumerBuilder
name|accessLogReceiver
parameter_list|(
name|Object
name|accessLogReceiver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessLogReceiver"
argument_list|,
name|accessLogReceiver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which Undertow AccessLogReciever should be used Will use          * JBossLoggingAccessLogReceiver if not specifid.          *           * The option will be converted to a          *<code>io.undertow.server.handlers.accesslog.AccessLogReceiver</code>          * type.          *           * Group: advanced          */
DECL|method|accessLogReceiver ( String accessLogReceiver)
specifier|default
name|AdvancedUndertowEndpointConsumerBuilder
name|accessLogReceiver
parameter_list|(
name|String
name|accessLogReceiver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessLogReceiver"
argument_list|,
name|accessLogReceiver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedUndertowEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedUndertowEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          *           * The option is a:          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedUndertowEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          *           * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedUndertowEndpointConsumerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedUndertowEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedUndertowEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom UndertowHttpBinding to control the mapping between          * Camel message and undertow.          *           * The option is a:          *<code>org.apache.camel.component.undertow.UndertowHttpBinding</code>          * type.          *           * Group: advanced          */
DECL|method|undertowHttpBinding ( Object undertowHttpBinding)
specifier|default
name|AdvancedUndertowEndpointConsumerBuilder
name|undertowHttpBinding
parameter_list|(
name|Object
name|undertowHttpBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"undertowHttpBinding"
argument_list|,
name|undertowHttpBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom UndertowHttpBinding to control the mapping between          * Camel message and undertow.          *           * The option will be converted to a          *<code>org.apache.camel.component.undertow.UndertowHttpBinding</code>          * type.          *           * Group: advanced          */
DECL|method|undertowHttpBinding ( String undertowHttpBinding)
specifier|default
name|AdvancedUndertowEndpointConsumerBuilder
name|undertowHttpBinding
parameter_list|(
name|String
name|undertowHttpBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"undertowHttpBinding"
argument_list|,
name|undertowHttpBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Undertow component.      */
DECL|interface|UndertowEndpointProducerBuilder
specifier|public
interface|interface
name|UndertowEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedUndertowEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedUndertowEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Configure a cookie handler to maintain a HTTP session.          *           * The option is a:          *<code>org.apache.camel.http.common.cookie.CookieHandler</code> type.          *           * Group: producer          */
DECL|method|cookieHandler ( Object cookieHandler)
specifier|default
name|UndertowEndpointProducerBuilder
name|cookieHandler
parameter_list|(
name|Object
name|cookieHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cookieHandler"
argument_list|,
name|cookieHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure a cookie handler to maintain a HTTP session.          *           * The option will be converted to a          *<code>org.apache.camel.http.common.cookie.CookieHandler</code> type.          *           * Group: producer          */
DECL|method|cookieHandler ( String cookieHandler)
specifier|default
name|UndertowEndpointProducerBuilder
name|cookieHandler
parameter_list|(
name|String
name|cookieHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cookieHandler"
argument_list|,
name|cookieHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to ensure socket is not closed due to inactivity.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: producer          */
DECL|method|keepAlive (Boolean keepAlive)
specifier|default
name|UndertowEndpointProducerBuilder
name|keepAlive
parameter_list|(
name|Boolean
name|keepAlive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to ensure socket is not closed due to inactivity.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: producer          */
DECL|method|keepAlive (String keepAlive)
specifier|default
name|UndertowEndpointProducerBuilder
name|keepAlive
parameter_list|(
name|String
name|keepAlive
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"keepAlive"
argument_list|,
name|keepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|UndertowEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|UndertowEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets additional channel options. The options that can be used are          * defined in org.xnio.Options. To configure from endpoint uri, then          * prefix each option with option., such as          * option.close-abort=true&option.send-buffer=8192.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: producer          */
DECL|method|options ( Map<String, Object> options)
specifier|default
name|UndertowEndpointProducerBuilder
name|options
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"options"
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets additional channel options. The options that can be used are          * defined in org.xnio.Options. To configure from endpoint uri, then          * prefix each option with option., such as          * option.close-abort=true&option.send-buffer=8192.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: producer          */
DECL|method|options (String options)
specifier|default
name|UndertowEndpointProducerBuilder
name|options
parameter_list|(
name|String
name|options
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"options"
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to facilitate socket multiplexing.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: producer          */
DECL|method|reuseAddresses ( Boolean reuseAddresses)
specifier|default
name|UndertowEndpointProducerBuilder
name|reuseAddresses
parameter_list|(
name|Boolean
name|reuseAddresses
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reuseAddresses"
argument_list|,
name|reuseAddresses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to facilitate socket multiplexing.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: producer          */
DECL|method|reuseAddresses ( String reuseAddresses)
specifier|default
name|UndertowEndpointProducerBuilder
name|reuseAddresses
parameter_list|(
name|String
name|reuseAddresses
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"reuseAddresses"
argument_list|,
name|reuseAddresses
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to improve TCP protocol performance.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: producer          */
DECL|method|tcpNoDelay (Boolean tcpNoDelay)
specifier|default
name|UndertowEndpointProducerBuilder
name|tcpNoDelay
parameter_list|(
name|Boolean
name|tcpNoDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting to improve TCP protocol performance.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: producer          */
DECL|method|tcpNoDelay (String tcpNoDelay)
specifier|default
name|UndertowEndpointProducerBuilder
name|tcpNoDelay
parameter_list|(
name|String
name|tcpNoDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"tcpNoDelay"
argument_list|,
name|tcpNoDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to disable throwing the HttpOperationFailedException in case          * of failed responses from the remote server. This allows you to get          * all responses regardless of the HTTP status code.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: producer          */
DECL|method|throwExceptionOnFailure ( Boolean throwExceptionOnFailure)
specifier|default
name|UndertowEndpointProducerBuilder
name|throwExceptionOnFailure
parameter_list|(
name|Boolean
name|throwExceptionOnFailure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"throwExceptionOnFailure"
argument_list|,
name|throwExceptionOnFailure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Option to disable throwing the HttpOperationFailedException in case          * of failed responses from the remote server. This allows you to get          * all responses regardless of the HTTP status code.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: producer          */
DECL|method|throwExceptionOnFailure ( String throwExceptionOnFailure)
specifier|default
name|UndertowEndpointProducerBuilder
name|throwExceptionOnFailure
parameter_list|(
name|String
name|throwExceptionOnFailure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"throwExceptionOnFailure"
argument_list|,
name|throwExceptionOnFailure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled and an Exchange failed processing on the consumer side and          * if the caused Exception was send back serialized in the response as a          * application/x-java-serialized-object content type. On the producer          * side the exception will be deserialized and thrown as is instead of          * the HttpOperationFailedException. The caused exception is required to          * be serialized. This is by default turned off. If you enable this then          * be aware that Java will deserialize the incoming data from the          * request to Java and that can be a potential security risk.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: producer          */
DECL|method|transferException ( Boolean transferException)
specifier|default
name|UndertowEndpointProducerBuilder
name|transferException
parameter_list|(
name|Boolean
name|transferException
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If enabled and an Exchange failed processing on the consumer side and          * if the caused Exception was send back serialized in the response as a          * application/x-java-serialized-object content type. On the producer          * side the exception will be deserialized and thrown as is instead of          * the HttpOperationFailedException. The caused exception is required to          * be serialized. This is by default turned off. If you enable this then          * be aware that Java will deserialize the incoming data from the          * request to Java and that can be a potential security risk.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: producer          */
DECL|method|transferException ( String transferException)
specifier|default
name|UndertowEndpointProducerBuilder
name|transferException
parameter_list|(
name|String
name|transferException
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"transferException"
argument_list|,
name|transferException
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout in milliseconds when sending to a websocket channel. The          * default timeout is 30000 (30 seconds).          *           * The option is a:<code>java.lang.Integer</code> type.          *           * Group: websocket          */
DECL|method|sendTimeout (Integer sendTimeout)
specifier|default
name|UndertowEndpointProducerBuilder
name|sendTimeout
parameter_list|(
name|Integer
name|sendTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendTimeout"
argument_list|,
name|sendTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Timeout in milliseconds when sending to a websocket channel. The          * default timeout is 30000 (30 seconds).          *           * The option will be converted to a<code>java.lang.Integer</code>          * type.          *           * Group: websocket          */
DECL|method|sendTimeout (String sendTimeout)
specifier|default
name|UndertowEndpointProducerBuilder
name|sendTimeout
parameter_list|(
name|String
name|sendTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendTimeout"
argument_list|,
name|sendTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To send to all websocket subscribers. Can be used to configure on          * endpoint level, instead of having to use the          * UndertowConstants.SEND_TO_ALL header on the message.          *           * The option is a:<code>java.lang.Boolean</code> type.          *           * Group: websocket          */
DECL|method|sendToAll (Boolean sendToAll)
specifier|default
name|UndertowEndpointProducerBuilder
name|sendToAll
parameter_list|(
name|Boolean
name|sendToAll
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendToAll"
argument_list|,
name|sendToAll
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To send to all websocket subscribers. Can be used to configure on          * endpoint level, instead of having to use the          * UndertowConstants.SEND_TO_ALL header on the message.          *           * The option will be converted to a<code>java.lang.Boolean</code>          * type.          *           * Group: websocket          */
DECL|method|sendToAll (String sendToAll)
specifier|default
name|UndertowEndpointProducerBuilder
name|sendToAll
parameter_list|(
name|String
name|sendToAll
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendToAll"
argument_list|,
name|sendToAll
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|UndertowEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|UndertowEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Undertow component.      */
DECL|interface|AdvancedUndertowEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedUndertowEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|UndertowEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|UndertowEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Which Undertow AccessLogReciever should be used Will use          * JBossLoggingAccessLogReceiver if not specifid.          *           * The option is a:          *<code>io.undertow.server.handlers.accesslog.AccessLogReceiver</code>          * type.          *           * Group: advanced          */
DECL|method|accessLogReceiver ( Object accessLogReceiver)
specifier|default
name|AdvancedUndertowEndpointProducerBuilder
name|accessLogReceiver
parameter_list|(
name|Object
name|accessLogReceiver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessLogReceiver"
argument_list|,
name|accessLogReceiver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which Undertow AccessLogReciever should be used Will use          * JBossLoggingAccessLogReceiver if not specifid.          *           * The option will be converted to a          *<code>io.undertow.server.handlers.accesslog.AccessLogReceiver</code>          * type.          *           * Group: advanced          */
DECL|method|accessLogReceiver ( String accessLogReceiver)
specifier|default
name|AdvancedUndertowEndpointProducerBuilder
name|accessLogReceiver
parameter_list|(
name|String
name|accessLogReceiver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessLogReceiver"
argument_list|,
name|accessLogReceiver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedUndertowEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedUndertowEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          *           * The option is a:          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedUndertowEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          *           * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedUndertowEndpointProducerBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedUndertowEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedUndertowEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom UndertowHttpBinding to control the mapping between          * Camel message and undertow.          *           * The option is a:          *<code>org.apache.camel.component.undertow.UndertowHttpBinding</code>          * type.          *           * Group: advanced          */
DECL|method|undertowHttpBinding ( Object undertowHttpBinding)
specifier|default
name|AdvancedUndertowEndpointProducerBuilder
name|undertowHttpBinding
parameter_list|(
name|Object
name|undertowHttpBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"undertowHttpBinding"
argument_list|,
name|undertowHttpBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom UndertowHttpBinding to control the mapping between          * Camel message and undertow.          *           * The option will be converted to a          *<code>org.apache.camel.component.undertow.UndertowHttpBinding</code>          * type.          *           * Group: advanced          */
DECL|method|undertowHttpBinding ( String undertowHttpBinding)
specifier|default
name|AdvancedUndertowEndpointProducerBuilder
name|undertowHttpBinding
parameter_list|(
name|String
name|undertowHttpBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"undertowHttpBinding"
argument_list|,
name|undertowHttpBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Undertow component.      */
DECL|interface|UndertowEndpointBuilder
specifier|public
interface|interface
name|UndertowEndpointBuilder
extends|extends
name|UndertowEndpointConsumerBuilder
extends|,
name|UndertowEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedUndertowEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedUndertowEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|UndertowEndpointBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|UndertowEndpointBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Undertow component.      */
DECL|interface|AdvancedUndertowEndpointBuilder
specifier|public
interface|interface
name|AdvancedUndertowEndpointBuilder
extends|extends
name|AdvancedUndertowEndpointConsumerBuilder
extends|,
name|AdvancedUndertowEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|UndertowEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|UndertowEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Which Undertow AccessLogReciever should be used Will use          * JBossLoggingAccessLogReceiver if not specifid.          *           * The option is a:          *<code>io.undertow.server.handlers.accesslog.AccessLogReceiver</code>          * type.          *           * Group: advanced          */
DECL|method|accessLogReceiver ( Object accessLogReceiver)
specifier|default
name|AdvancedUndertowEndpointBuilder
name|accessLogReceiver
parameter_list|(
name|Object
name|accessLogReceiver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessLogReceiver"
argument_list|,
name|accessLogReceiver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Which Undertow AccessLogReciever should be used Will use          * JBossLoggingAccessLogReceiver if not specifid.          *           * The option will be converted to a          *<code>io.undertow.server.handlers.accesslog.AccessLogReceiver</code>          * type.          *           * Group: advanced          */
DECL|method|accessLogReceiver ( String accessLogReceiver)
specifier|default
name|AdvancedUndertowEndpointBuilder
name|accessLogReceiver
parameter_list|(
name|String
name|accessLogReceiver
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessLogReceiver"
argument_list|,
name|accessLogReceiver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedUndertowEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedUndertowEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          *           * The option is a:          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( HeaderFilterStrategy headerFilterStrategy)
specifier|default
name|AdvancedUndertowEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HeaderFilterStrategy to filter header to and from          * Camel message.          *           * The option will be converted to a          *<code>org.apache.camel.spi.HeaderFilterStrategy</code> type.          *           * Group: advanced          */
DECL|method|headerFilterStrategy ( String headerFilterStrategy)
specifier|default
name|AdvancedUndertowEndpointBuilder
name|headerFilterStrategy
parameter_list|(
name|String
name|headerFilterStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"headerFilterStrategy"
argument_list|,
name|headerFilterStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedUndertowEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedUndertowEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom UndertowHttpBinding to control the mapping between          * Camel message and undertow.          *           * The option is a:          *<code>org.apache.camel.component.undertow.UndertowHttpBinding</code>          * type.          *           * Group: advanced          */
DECL|method|undertowHttpBinding ( Object undertowHttpBinding)
specifier|default
name|AdvancedUndertowEndpointBuilder
name|undertowHttpBinding
parameter_list|(
name|Object
name|undertowHttpBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"undertowHttpBinding"
argument_list|,
name|undertowHttpBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom UndertowHttpBinding to control the mapping between          * Camel message and undertow.          *           * The option will be converted to a          *<code>org.apache.camel.component.undertow.UndertowHttpBinding</code>          * type.          *           * Group: advanced          */
DECL|method|undertowHttpBinding ( String undertowHttpBinding)
specifier|default
name|AdvancedUndertowEndpointBuilder
name|undertowHttpBinding
parameter_list|(
name|String
name|undertowHttpBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"undertowHttpBinding"
argument_list|,
name|undertowHttpBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Undertow (camel-undertow)      * The undertow component provides HTTP and WebSocket based endpoints for      * consuming and producing HTTP/WebSocket requests.      *       * Category: http,websocket      * Available as of version: 2.16      * Maven coordinates: org.apache.camel:camel-undertow      *       * Syntax:<code>undertow:httpURI</code>      *       * Path parameter: httpURI (required)      * The url of the HTTP endpoint to use.      */
DECL|method|undertow (String path)
specifier|default
name|UndertowEndpointBuilder
name|undertow
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|UndertowEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|UndertowEndpointBuilder
implements|,
name|AdvancedUndertowEndpointBuilder
block|{
specifier|public
name|UndertowEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"undertow"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|UndertowEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

