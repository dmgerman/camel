begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * For reading/writing from/to an HBase store (Hadoop database).  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|HBaseEndpointBuilderFactory
specifier|public
interface|interface
name|HBaseEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the HBase component.      */
DECL|interface|HBaseEndpointConsumerBuilder
specifier|public
interface|interface
name|HBaseEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedHBaseEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedHBaseEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To use a custom CellMappingStrategyFactory that is responsible for          * mapping cells.          *           * The option is a:          *<code>org.apache.camel.component.hbase.mapping.CellMappingStrategyFactory</code> type.          *           * Group: common          */
DECL|method|cellMappingStrategyFactory ( Object cellMappingStrategyFactory)
specifier|default
name|HBaseEndpointConsumerBuilder
name|cellMappingStrategyFactory
parameter_list|(
name|Object
name|cellMappingStrategyFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cellMappingStrategyFactory"
argument_list|,
name|cellMappingStrategyFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CellMappingStrategyFactory that is responsible for          * mapping cells.          *           * The option will be converted to a          *<code>org.apache.camel.component.hbase.mapping.CellMappingStrategyFactory</code> type.          *           * Group: common          */
DECL|method|cellMappingStrategyFactory ( String cellMappingStrategyFactory)
specifier|default
name|HBaseEndpointConsumerBuilder
name|cellMappingStrategyFactory
parameter_list|(
name|String
name|cellMappingStrategyFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cellMappingStrategyFactory"
argument_list|,
name|cellMappingStrategyFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of filters to use.          *           * The option is a:          *<code>java.util.List&lt;org.apache.hadoop.hbase.filter.Filter&gt;</code> type.          *           * Group: common          */
DECL|method|filters (List<Object> filters)
specifier|default
name|HBaseEndpointConsumerBuilder
name|filters
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|filters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filters"
argument_list|,
name|filters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of filters to use.          *           * The option will be converted to a          *<code>java.util.List&lt;org.apache.hadoop.hbase.filter.Filter&gt;</code> type.          *           * Group: common          */
DECL|method|filters (String filters)
specifier|default
name|HBaseEndpointConsumerBuilder
name|filters
parameter_list|(
name|String
name|filters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filters"
argument_list|,
name|filters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The class name of a custom mapping strategy implementation.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mappingStrategyClassName ( String mappingStrategyClassName)
specifier|default
name|HBaseEndpointConsumerBuilder
name|mappingStrategyClassName
parameter_list|(
name|String
name|mappingStrategyClassName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mappingStrategyClassName"
argument_list|,
name|mappingStrategyClassName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The strategy to use for mapping Camel messages to HBase columns.          * Supported values: header, or body.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mappingStrategyName ( String mappingStrategyName)
specifier|default
name|HBaseEndpointConsumerBuilder
name|mappingStrategyName
parameter_list|(
name|String
name|mappingStrategyName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mappingStrategyName"
argument_list|,
name|mappingStrategyName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To map the key/values from the Map to a HBaseRow. The following keys          * is supported: rowId - The id of the row. This has limited use as the          * row usually changes per Exchange. rowType - The type to covert row id          * to. Supported operations: CamelHBaseScan. family - The column family.          * Supports a number suffix for referring to more than one columns.          * qualifier - The column qualifier. Supports a number suffix for          * referring to more than one columns. value - The value. Supports a          * number suffix for referring to more than one columns valueType - The          * value type. Supports a number suffix for referring to more than one          * columns. Supported operations: CamelHBaseGet, and CamelHBaseScan.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: common          */
DECL|method|rowMapping ( Map<String, Object> rowMapping)
specifier|default
name|HBaseEndpointConsumerBuilder
name|rowMapping
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rowMapping
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"rowMapping"
argument_list|,
name|rowMapping
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To map the key/values from the Map to a HBaseRow. The following keys          * is supported: rowId - The id of the row. This has limited use as the          * row usually changes per Exchange. rowType - The type to covert row id          * to. Supported operations: CamelHBaseScan. family - The column family.          * Supports a number suffix for referring to more than one columns.          * qualifier - The column qualifier. Supports a number suffix for          * referring to more than one columns. value - The value. Supports a          * number suffix for referring to more than one columns valueType - The          * value type. Supports a number suffix for referring to more than one          * columns. Supported operations: CamelHBaseGet, and CamelHBaseScan.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: common          */
DECL|method|rowMapping (String rowMapping)
specifier|default
name|HBaseEndpointConsumerBuilder
name|rowMapping
parameter_list|(
name|String
name|rowMapping
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"rowMapping"
argument_list|,
name|rowMapping
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An instance of org.apache.camel.component.hbase.model.HBaseRow which          * describes how each row should be modeled.          *           * The option is a:          *<code>org.apache.camel.component.hbase.model.HBaseRow</code> type.          *           * Group: common          */
DECL|method|rowModel (Object rowModel)
specifier|default
name|HBaseEndpointConsumerBuilder
name|rowModel
parameter_list|(
name|Object
name|rowModel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"rowModel"
argument_list|,
name|rowModel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An instance of org.apache.camel.component.hbase.model.HBaseRow which          * describes how each row should be modeled.          *           * The option will be converted to a          *<code>org.apache.camel.component.hbase.model.HBaseRow</code> type.          *           * Group: common          */
DECL|method|rowModel (String rowModel)
specifier|default
name|HBaseEndpointConsumerBuilder
name|rowModel
parameter_list|(
name|String
name|rowModel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"rowModel"
argument_list|,
name|rowModel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines privileges to communicate with HBase such as using kerberos.          *           * The option is a:          *<code>org.apache.hadoop.security.UserGroupInformation</code> type.          *           * Group: common          */
DECL|method|userGroupInformation ( Object userGroupInformation)
specifier|default
name|HBaseEndpointConsumerBuilder
name|userGroupInformation
parameter_list|(
name|Object
name|userGroupInformation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userGroupInformation"
argument_list|,
name|userGroupInformation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines privileges to communicate with HBase such as using kerberos.          *           * The option will be converted to a          *<code>org.apache.hadoop.security.UserGroupInformation</code> type.          *           * Group: common          */
DECL|method|userGroupInformation ( String userGroupInformation)
specifier|default
name|HBaseEndpointConsumerBuilder
name|userGroupInformation
parameter_list|(
name|String
name|userGroupInformation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userGroupInformation"
argument_list|,
name|userGroupInformation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|HBaseEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|HBaseEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Gets the maximum number of messages as a limit to poll at each          * polling. Is default unlimited, but use 0 or negative number to          * disable it as unlimited.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|maxMessagesPerPoll ( int maxMessagesPerPoll)
specifier|default
name|HBaseEndpointConsumerBuilder
name|maxMessagesPerPoll
parameter_list|(
name|int
name|maxMessagesPerPoll
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxMessagesPerPoll"
argument_list|,
name|maxMessagesPerPoll
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Gets the maximum number of messages as a limit to poll at each          * polling. Is default unlimited, but use 0 or negative number to          * disable it as unlimited.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|maxMessagesPerPoll ( String maxMessagesPerPoll)
specifier|default
name|HBaseEndpointConsumerBuilder
name|maxMessagesPerPoll
parameter_list|(
name|String
name|maxMessagesPerPoll
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxMessagesPerPoll"
argument_list|,
name|maxMessagesPerPoll
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The HBase operation to perform.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|operation (String operation)
specifier|default
name|HBaseEndpointConsumerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, Camel HBase Consumer will remove the rows          * which it processes.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|remove (boolean remove)
specifier|default
name|HBaseEndpointConsumerBuilder
name|remove
parameter_list|(
name|boolean
name|remove
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"remove"
argument_list|,
name|remove
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the option is true, Camel HBase Consumer will remove the rows          * which it processes.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|remove (String remove)
specifier|default
name|HBaseEndpointConsumerBuilder
name|remove
parameter_list|(
name|String
name|remove
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"remove"
argument_list|,
name|remove
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HBaseRemoveHandler that is executed when a row is to          * be removed.          *           * The option is a:          *<code>org.apache.camel.component.hbase.HBaseRemoveHandler</code>          * type.          *           * Group: consumer          */
DECL|method|removeHandler (Object removeHandler)
specifier|default
name|HBaseEndpointConsumerBuilder
name|removeHandler
parameter_list|(
name|Object
name|removeHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"removeHandler"
argument_list|,
name|removeHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom HBaseRemoveHandler that is executed when a row is to          * be removed.          *           * The option will be converted to a          *<code>org.apache.camel.component.hbase.HBaseRemoveHandler</code>          * type.          *           * Group: consumer          */
DECL|method|removeHandler (String removeHandler)
specifier|default
name|HBaseEndpointConsumerBuilder
name|removeHandler
parameter_list|(
name|String
name|removeHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"removeHandler"
argument_list|,
name|removeHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the HBase component.      */
DECL|interface|AdvancedHBaseEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedHBaseEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|HBaseEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|HBaseEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedHBaseEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedHBaseEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedHBaseEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedHBaseEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedHBaseEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedHBaseEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedHBaseEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedHBaseEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the HBase component.      */
DECL|interface|HBaseEndpointProducerBuilder
specifier|public
interface|interface
name|HBaseEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedHBaseEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedHBaseEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To use a custom CellMappingStrategyFactory that is responsible for          * mapping cells.          *           * The option is a:          *<code>org.apache.camel.component.hbase.mapping.CellMappingStrategyFactory</code> type.          *           * Group: common          */
DECL|method|cellMappingStrategyFactory ( Object cellMappingStrategyFactory)
specifier|default
name|HBaseEndpointProducerBuilder
name|cellMappingStrategyFactory
parameter_list|(
name|Object
name|cellMappingStrategyFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cellMappingStrategyFactory"
argument_list|,
name|cellMappingStrategyFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CellMappingStrategyFactory that is responsible for          * mapping cells.          *           * The option will be converted to a          *<code>org.apache.camel.component.hbase.mapping.CellMappingStrategyFactory</code> type.          *           * Group: common          */
DECL|method|cellMappingStrategyFactory ( String cellMappingStrategyFactory)
specifier|default
name|HBaseEndpointProducerBuilder
name|cellMappingStrategyFactory
parameter_list|(
name|String
name|cellMappingStrategyFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cellMappingStrategyFactory"
argument_list|,
name|cellMappingStrategyFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of filters to use.          *           * The option is a:          *<code>java.util.List&lt;org.apache.hadoop.hbase.filter.Filter&gt;</code> type.          *           * Group: common          */
DECL|method|filters (List<Object> filters)
specifier|default
name|HBaseEndpointProducerBuilder
name|filters
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|filters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filters"
argument_list|,
name|filters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of filters to use.          *           * The option will be converted to a          *<code>java.util.List&lt;org.apache.hadoop.hbase.filter.Filter&gt;</code> type.          *           * Group: common          */
DECL|method|filters (String filters)
specifier|default
name|HBaseEndpointProducerBuilder
name|filters
parameter_list|(
name|String
name|filters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filters"
argument_list|,
name|filters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The class name of a custom mapping strategy implementation.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mappingStrategyClassName ( String mappingStrategyClassName)
specifier|default
name|HBaseEndpointProducerBuilder
name|mappingStrategyClassName
parameter_list|(
name|String
name|mappingStrategyClassName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mappingStrategyClassName"
argument_list|,
name|mappingStrategyClassName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The strategy to use for mapping Camel messages to HBase columns.          * Supported values: header, or body.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mappingStrategyName ( String mappingStrategyName)
specifier|default
name|HBaseEndpointProducerBuilder
name|mappingStrategyName
parameter_list|(
name|String
name|mappingStrategyName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mappingStrategyName"
argument_list|,
name|mappingStrategyName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To map the key/values from the Map to a HBaseRow. The following keys          * is supported: rowId - The id of the row. This has limited use as the          * row usually changes per Exchange. rowType - The type to covert row id          * to. Supported operations: CamelHBaseScan. family - The column family.          * Supports a number suffix for referring to more than one columns.          * qualifier - The column qualifier. Supports a number suffix for          * referring to more than one columns. value - The value. Supports a          * number suffix for referring to more than one columns valueType - The          * value type. Supports a number suffix for referring to more than one          * columns. Supported operations: CamelHBaseGet, and CamelHBaseScan.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: common          */
DECL|method|rowMapping ( Map<String, Object> rowMapping)
specifier|default
name|HBaseEndpointProducerBuilder
name|rowMapping
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rowMapping
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"rowMapping"
argument_list|,
name|rowMapping
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To map the key/values from the Map to a HBaseRow. The following keys          * is supported: rowId - The id of the row. This has limited use as the          * row usually changes per Exchange. rowType - The type to covert row id          * to. Supported operations: CamelHBaseScan. family - The column family.          * Supports a number suffix for referring to more than one columns.          * qualifier - The column qualifier. Supports a number suffix for          * referring to more than one columns. value - The value. Supports a          * number suffix for referring to more than one columns valueType - The          * value type. Supports a number suffix for referring to more than one          * columns. Supported operations: CamelHBaseGet, and CamelHBaseScan.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: common          */
DECL|method|rowMapping (String rowMapping)
specifier|default
name|HBaseEndpointProducerBuilder
name|rowMapping
parameter_list|(
name|String
name|rowMapping
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"rowMapping"
argument_list|,
name|rowMapping
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An instance of org.apache.camel.component.hbase.model.HBaseRow which          * describes how each row should be modeled.          *           * The option is a:          *<code>org.apache.camel.component.hbase.model.HBaseRow</code> type.          *           * Group: common          */
DECL|method|rowModel (Object rowModel)
specifier|default
name|HBaseEndpointProducerBuilder
name|rowModel
parameter_list|(
name|Object
name|rowModel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"rowModel"
argument_list|,
name|rowModel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An instance of org.apache.camel.component.hbase.model.HBaseRow which          * describes how each row should be modeled.          *           * The option will be converted to a          *<code>org.apache.camel.component.hbase.model.HBaseRow</code> type.          *           * Group: common          */
DECL|method|rowModel (String rowModel)
specifier|default
name|HBaseEndpointProducerBuilder
name|rowModel
parameter_list|(
name|String
name|rowModel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"rowModel"
argument_list|,
name|rowModel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines privileges to communicate with HBase such as using kerberos.          *           * The option is a:          *<code>org.apache.hadoop.security.UserGroupInformation</code> type.          *           * Group: common          */
DECL|method|userGroupInformation ( Object userGroupInformation)
specifier|default
name|HBaseEndpointProducerBuilder
name|userGroupInformation
parameter_list|(
name|Object
name|userGroupInformation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userGroupInformation"
argument_list|,
name|userGroupInformation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines privileges to communicate with HBase such as using kerberos.          *           * The option will be converted to a          *<code>org.apache.hadoop.security.UserGroupInformation</code> type.          *           * Group: common          */
DECL|method|userGroupInformation ( String userGroupInformation)
specifier|default
name|HBaseEndpointProducerBuilder
name|userGroupInformation
parameter_list|(
name|String
name|userGroupInformation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userGroupInformation"
argument_list|,
name|userGroupInformation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|HBaseEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|HBaseEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of rows to scan.          *           * The option is a:<code>int</code> type.          *           * Group: producer          */
DECL|method|maxResults (int maxResults)
specifier|default
name|HBaseEndpointProducerBuilder
name|maxResults
parameter_list|(
name|int
name|maxResults
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxResults"
argument_list|,
name|maxResults
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of rows to scan.          *           * The option will be converted to a<code>int</code> type.          *           * Group: producer          */
DECL|method|maxResults (String maxResults)
specifier|default
name|HBaseEndpointProducerBuilder
name|maxResults
parameter_list|(
name|String
name|maxResults
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxResults"
argument_list|,
name|maxResults
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the HBase component.      */
DECL|interface|AdvancedHBaseEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedHBaseEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|HBaseEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|HBaseEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedHBaseEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedHBaseEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedHBaseEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedHBaseEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the HBase component.      */
DECL|interface|HBaseEndpointBuilder
specifier|public
interface|interface
name|HBaseEndpointBuilder
extends|extends
name|HBaseEndpointConsumerBuilder
extends|,
name|HBaseEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedHBaseEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedHBaseEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To use a custom CellMappingStrategyFactory that is responsible for          * mapping cells.          *           * The option is a:          *<code>org.apache.camel.component.hbase.mapping.CellMappingStrategyFactory</code> type.          *           * Group: common          */
DECL|method|cellMappingStrategyFactory ( Object cellMappingStrategyFactory)
specifier|default
name|HBaseEndpointBuilder
name|cellMappingStrategyFactory
parameter_list|(
name|Object
name|cellMappingStrategyFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cellMappingStrategyFactory"
argument_list|,
name|cellMappingStrategyFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a custom CellMappingStrategyFactory that is responsible for          * mapping cells.          *           * The option will be converted to a          *<code>org.apache.camel.component.hbase.mapping.CellMappingStrategyFactory</code> type.          *           * Group: common          */
DECL|method|cellMappingStrategyFactory ( String cellMappingStrategyFactory)
specifier|default
name|HBaseEndpointBuilder
name|cellMappingStrategyFactory
parameter_list|(
name|String
name|cellMappingStrategyFactory
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cellMappingStrategyFactory"
argument_list|,
name|cellMappingStrategyFactory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of filters to use.          *           * The option is a:          *<code>java.util.List&lt;org.apache.hadoop.hbase.filter.Filter&gt;</code> type.          *           * Group: common          */
DECL|method|filters (List<Object> filters)
specifier|default
name|HBaseEndpointBuilder
name|filters
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|filters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filters"
argument_list|,
name|filters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of filters to use.          *           * The option will be converted to a          *<code>java.util.List&lt;org.apache.hadoop.hbase.filter.Filter&gt;</code> type.          *           * Group: common          */
DECL|method|filters (String filters)
specifier|default
name|HBaseEndpointBuilder
name|filters
parameter_list|(
name|String
name|filters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"filters"
argument_list|,
name|filters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The class name of a custom mapping strategy implementation.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mappingStrategyClassName ( String mappingStrategyClassName)
specifier|default
name|HBaseEndpointBuilder
name|mappingStrategyClassName
parameter_list|(
name|String
name|mappingStrategyClassName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mappingStrategyClassName"
argument_list|,
name|mappingStrategyClassName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The strategy to use for mapping Camel messages to HBase columns.          * Supported values: header, or body.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|mappingStrategyName ( String mappingStrategyName)
specifier|default
name|HBaseEndpointBuilder
name|mappingStrategyName
parameter_list|(
name|String
name|mappingStrategyName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mappingStrategyName"
argument_list|,
name|mappingStrategyName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To map the key/values from the Map to a HBaseRow. The following keys          * is supported: rowId - The id of the row. This has limited use as the          * row usually changes per Exchange. rowType - The type to covert row id          * to. Supported operations: CamelHBaseScan. family - The column family.          * Supports a number suffix for referring to more than one columns.          * qualifier - The column qualifier. Supports a number suffix for          * referring to more than one columns. value - The value. Supports a          * number suffix for referring to more than one columns valueType - The          * value type. Supports a number suffix for referring to more than one          * columns. Supported operations: CamelHBaseGet, and CamelHBaseScan.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: common          */
DECL|method|rowMapping (Map<String, Object> rowMapping)
specifier|default
name|HBaseEndpointBuilder
name|rowMapping
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rowMapping
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"rowMapping"
argument_list|,
name|rowMapping
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To map the key/values from the Map to a HBaseRow. The following keys          * is supported: rowId - The id of the row. This has limited use as the          * row usually changes per Exchange. rowType - The type to covert row id          * to. Supported operations: CamelHBaseScan. family - The column family.          * Supports a number suffix for referring to more than one columns.          * qualifier - The column qualifier. Supports a number suffix for          * referring to more than one columns. value - The value. Supports a          * number suffix for referring to more than one columns valueType - The          * value type. Supports a number suffix for referring to more than one          * columns. Supported operations: CamelHBaseGet, and CamelHBaseScan.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: common          */
DECL|method|rowMapping (String rowMapping)
specifier|default
name|HBaseEndpointBuilder
name|rowMapping
parameter_list|(
name|String
name|rowMapping
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"rowMapping"
argument_list|,
name|rowMapping
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An instance of org.apache.camel.component.hbase.model.HBaseRow which          * describes how each row should be modeled.          *           * The option is a:          *<code>org.apache.camel.component.hbase.model.HBaseRow</code> type.          *           * Group: common          */
DECL|method|rowModel (Object rowModel)
specifier|default
name|HBaseEndpointBuilder
name|rowModel
parameter_list|(
name|Object
name|rowModel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"rowModel"
argument_list|,
name|rowModel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * An instance of org.apache.camel.component.hbase.model.HBaseRow which          * describes how each row should be modeled.          *           * The option will be converted to a          *<code>org.apache.camel.component.hbase.model.HBaseRow</code> type.          *           * Group: common          */
DECL|method|rowModel (String rowModel)
specifier|default
name|HBaseEndpointBuilder
name|rowModel
parameter_list|(
name|String
name|rowModel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"rowModel"
argument_list|,
name|rowModel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines privileges to communicate with HBase such as using kerberos.          *           * The option is a:          *<code>org.apache.hadoop.security.UserGroupInformation</code> type.          *           * Group: common          */
DECL|method|userGroupInformation ( Object userGroupInformation)
specifier|default
name|HBaseEndpointBuilder
name|userGroupInformation
parameter_list|(
name|Object
name|userGroupInformation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userGroupInformation"
argument_list|,
name|userGroupInformation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Defines privileges to communicate with HBase such as using kerberos.          *           * The option will be converted to a          *<code>org.apache.hadoop.security.UserGroupInformation</code> type.          *           * Group: common          */
DECL|method|userGroupInformation ( String userGroupInformation)
specifier|default
name|HBaseEndpointBuilder
name|userGroupInformation
parameter_list|(
name|String
name|userGroupInformation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"userGroupInformation"
argument_list|,
name|userGroupInformation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the HBase component.      */
DECL|interface|AdvancedHBaseEndpointBuilder
specifier|public
interface|interface
name|AdvancedHBaseEndpointBuilder
extends|extends
name|AdvancedHBaseEndpointConsumerBuilder
extends|,
name|AdvancedHBaseEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|HBaseEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|HBaseEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedHBaseEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedHBaseEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedHBaseEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedHBaseEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * HBase (camel-hbase)      * For reading/writing from/to an HBase store (Hadoop database).      *       * Syntax:<code>hbase:tableName</code>      * Category: hadoop      * Available as of version: 2.10      * Maven coordinates: org.apache.camel:camel-hbase      */
DECL|method|hBase (String path)
specifier|default
name|HBaseEndpointBuilder
name|hBase
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|HBaseEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|HBaseEndpointBuilder
implements|,
name|AdvancedHBaseEndpointBuilder
block|{
specifier|public
name|HBaseEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"hbase"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|HBaseEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

