begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The coap component is used for sending and receiving messages from COAP  * capable devices.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|CoAPEndpointBuilderFactory
specifier|public
interface|interface
name|CoAPEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the CoAP component.      */
DECL|interface|CoAPEndpointConsumerBuilder
specifier|public
interface|interface
name|CoAPEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCoAPEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCoAPEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets the alias used to query the KeyStore for the private key and          * certificate. This parameter is used when we are enabling TLS with          * certificates on the service side, and similarly on the client side          * when TLS is used with certificates and client authentication. If the          * parameter is not specified then the default behavior is to use the          * first alias in the keystore that contains a key entry. This          * configuration parameter does not apply to configuring TLS via a Raw          * Public Key or a Pre-Shared Key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|alias (String alias)
specifier|default
name|CoAPEndpointConsumerBuilder
name|alias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"alias"
argument_list|,
name|alias
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the cipherSuites String. This is a comma separated String of          * ciphersuites to configure. If it is not specified, then it falls back          * to getting the ciphersuites from the sslContextParameters object.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|cipherSuites (String cipherSuites)
specifier|default
name|CoAPEndpointConsumerBuilder
name|cipherSuites
parameter_list|(
name|String
name|cipherSuites
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cipherSuites"
argument_list|,
name|cipherSuites
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the configuration options for server-side client-authentication          * requirements. The value must be one of NONE, WANT, REQUIRE. If this          * value is not specified, then it falls back to checking the          * sslContextParameters.getServerParameters().getClientAuthentication()          * value.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientAuthentication ( String clientAuthentication)
specifier|default
name|CoAPEndpointConsumerBuilder
name|clientAuthentication
parameter_list|(
name|String
name|clientAuthentication
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientAuthentication"
argument_list|,
name|clientAuthentication
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the configured private key for use with Raw Public Key.          *           * The option is a:<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|privateKey (PrivateKey privateKey)
specifier|default
name|CoAPEndpointConsumerBuilder
name|privateKey
parameter_list|(
name|PrivateKey
name|privateKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"privateKey"
argument_list|,
name|privateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the configured private key for use with Raw Public Key.          *           * The option will be converted to a          *<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|privateKey (String privateKey)
specifier|default
name|CoAPEndpointConsumerBuilder
name|privateKey
parameter_list|(
name|String
name|privateKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"privateKey"
argument_list|,
name|privateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the PskStore to use for pre-shared key.          *           * The option is a:          *<code>org.eclipse.californium.scandium.dtls.pskstore.PskStore</code>          * type.          *           * Group: common          */
DECL|method|pskStore (Object pskStore)
specifier|default
name|CoAPEndpointConsumerBuilder
name|pskStore
parameter_list|(
name|Object
name|pskStore
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pskStore"
argument_list|,
name|pskStore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the PskStore to use for pre-shared key.          *           * The option will be converted to a          *<code>org.eclipse.californium.scandium.dtls.pskstore.PskStore</code>          * type.          *           * Group: common          */
DECL|method|pskStore (String pskStore)
specifier|default
name|CoAPEndpointConsumerBuilder
name|pskStore
parameter_list|(
name|String
name|pskStore
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pskStore"
argument_list|,
name|pskStore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the configured public key for use with Raw Public Key.          *           * The option is a:<code>java.security.PublicKey</code> type.          *           * Group: common          */
DECL|method|publicKey (PublicKey publicKey)
specifier|default
name|CoAPEndpointConsumerBuilder
name|publicKey
parameter_list|(
name|PublicKey
name|publicKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"publicKey"
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the configured public key for use with Raw Public Key.          *           * The option will be converted to a          *<code>java.security.PublicKey</code> type.          *           * Group: common          */
DECL|method|publicKey (String publicKey)
specifier|default
name|CoAPEndpointConsumerBuilder
name|publicKey
parameter_list|(
name|String
name|publicKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"publicKey"
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the SSLContextParameters object for setting up TLS. This is          * required for coapstcp, and for coaps when we are using certificates          * for TLS (as opposed to RPK or PKS).          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: common          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|CoAPEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the SSLContextParameters object for setting up TLS. This is          * required for coapstcp, and for coaps when we are using certificates          * for TLS (as opposed to RPK or PKS).          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: common          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|CoAPEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the TrustedRpkStore to use to determine trust in raw public keys.          *           * The option is a:          *<code>org.eclipse.californium.scandium.dtls.rpkstore.TrustedRpkStore</code> type.          *           * Group: common          */
DECL|method|trustedRpkStore ( Object trustedRpkStore)
specifier|default
name|CoAPEndpointConsumerBuilder
name|trustedRpkStore
parameter_list|(
name|Object
name|trustedRpkStore
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustedRpkStore"
argument_list|,
name|trustedRpkStore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the TrustedRpkStore to use to determine trust in raw public keys.          *           * The option will be converted to a          *<code>org.eclipse.californium.scandium.dtls.rpkstore.TrustedRpkStore</code> type.          *           * Group: common          */
DECL|method|trustedRpkStore ( String trustedRpkStore)
specifier|default
name|CoAPEndpointConsumerBuilder
name|trustedRpkStore
parameter_list|(
name|String
name|trustedRpkStore
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustedRpkStore"
argument_list|,
name|trustedRpkStore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|CoAPEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|CoAPEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Comma separated list of methods that the CoAP consumer will bind to.          * The default is to bind to all methods (DELETE, GET, POST, PUT).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|coapMethodRestrict ( String coapMethodRestrict)
specifier|default
name|CoAPEndpointConsumerBuilder
name|coapMethodRestrict
parameter_list|(
name|String
name|coapMethodRestrict
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"coapMethodRestrict"
argument_list|,
name|coapMethodRestrict
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the CoAP component.      */
DECL|interface|AdvancedCoAPEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedCoAPEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CoAPEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CoAPEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedCoAPEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedCoAPEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedCoAPEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedCoAPEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCoAPEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCoAPEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedCoAPEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedCoAPEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the CoAP component.      */
DECL|interface|CoAPEndpointProducerBuilder
specifier|public
interface|interface
name|CoAPEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCoAPEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCoAPEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets the alias used to query the KeyStore for the private key and          * certificate. This parameter is used when we are enabling TLS with          * certificates on the service side, and similarly on the client side          * when TLS is used with certificates and client authentication. If the          * parameter is not specified then the default behavior is to use the          * first alias in the keystore that contains a key entry. This          * configuration parameter does not apply to configuring TLS via a Raw          * Public Key or a Pre-Shared Key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|alias (String alias)
specifier|default
name|CoAPEndpointProducerBuilder
name|alias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"alias"
argument_list|,
name|alias
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the cipherSuites String. This is a comma separated String of          * ciphersuites to configure. If it is not specified, then it falls back          * to getting the ciphersuites from the sslContextParameters object.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|cipherSuites (String cipherSuites)
specifier|default
name|CoAPEndpointProducerBuilder
name|cipherSuites
parameter_list|(
name|String
name|cipherSuites
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cipherSuites"
argument_list|,
name|cipherSuites
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the configuration options for server-side client-authentication          * requirements. The value must be one of NONE, WANT, REQUIRE. If this          * value is not specified, then it falls back to checking the          * sslContextParameters.getServerParameters().getClientAuthentication()          * value.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientAuthentication ( String clientAuthentication)
specifier|default
name|CoAPEndpointProducerBuilder
name|clientAuthentication
parameter_list|(
name|String
name|clientAuthentication
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientAuthentication"
argument_list|,
name|clientAuthentication
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the configured private key for use with Raw Public Key.          *           * The option is a:<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|privateKey (PrivateKey privateKey)
specifier|default
name|CoAPEndpointProducerBuilder
name|privateKey
parameter_list|(
name|PrivateKey
name|privateKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"privateKey"
argument_list|,
name|privateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the configured private key for use with Raw Public Key.          *           * The option will be converted to a          *<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|privateKey (String privateKey)
specifier|default
name|CoAPEndpointProducerBuilder
name|privateKey
parameter_list|(
name|String
name|privateKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"privateKey"
argument_list|,
name|privateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the PskStore to use for pre-shared key.          *           * The option is a:          *<code>org.eclipse.californium.scandium.dtls.pskstore.PskStore</code>          * type.          *           * Group: common          */
DECL|method|pskStore (Object pskStore)
specifier|default
name|CoAPEndpointProducerBuilder
name|pskStore
parameter_list|(
name|Object
name|pskStore
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pskStore"
argument_list|,
name|pskStore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the PskStore to use for pre-shared key.          *           * The option will be converted to a          *<code>org.eclipse.californium.scandium.dtls.pskstore.PskStore</code>          * type.          *           * Group: common          */
DECL|method|pskStore (String pskStore)
specifier|default
name|CoAPEndpointProducerBuilder
name|pskStore
parameter_list|(
name|String
name|pskStore
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pskStore"
argument_list|,
name|pskStore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the configured public key for use with Raw Public Key.          *           * The option is a:<code>java.security.PublicKey</code> type.          *           * Group: common          */
DECL|method|publicKey (PublicKey publicKey)
specifier|default
name|CoAPEndpointProducerBuilder
name|publicKey
parameter_list|(
name|PublicKey
name|publicKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"publicKey"
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the configured public key for use with Raw Public Key.          *           * The option will be converted to a          *<code>java.security.PublicKey</code> type.          *           * Group: common          */
DECL|method|publicKey (String publicKey)
specifier|default
name|CoAPEndpointProducerBuilder
name|publicKey
parameter_list|(
name|String
name|publicKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"publicKey"
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the SSLContextParameters object for setting up TLS. This is          * required for coapstcp, and for coaps when we are using certificates          * for TLS (as opposed to RPK or PKS).          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: common          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|CoAPEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the SSLContextParameters object for setting up TLS. This is          * required for coapstcp, and for coaps when we are using certificates          * for TLS (as opposed to RPK or PKS).          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: common          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|CoAPEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the TrustedRpkStore to use to determine trust in raw public keys.          *           * The option is a:          *<code>org.eclipse.californium.scandium.dtls.rpkstore.TrustedRpkStore</code> type.          *           * Group: common          */
DECL|method|trustedRpkStore ( Object trustedRpkStore)
specifier|default
name|CoAPEndpointProducerBuilder
name|trustedRpkStore
parameter_list|(
name|Object
name|trustedRpkStore
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustedRpkStore"
argument_list|,
name|trustedRpkStore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the TrustedRpkStore to use to determine trust in raw public keys.          *           * The option will be converted to a          *<code>org.eclipse.californium.scandium.dtls.rpkstore.TrustedRpkStore</code> type.          *           * Group: common          */
DECL|method|trustedRpkStore ( String trustedRpkStore)
specifier|default
name|CoAPEndpointProducerBuilder
name|trustedRpkStore
parameter_list|(
name|String
name|trustedRpkStore
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustedRpkStore"
argument_list|,
name|trustedRpkStore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|CoAPEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|CoAPEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the CoAP component.      */
DECL|interface|AdvancedCoAPEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedCoAPEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CoAPEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CoAPEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCoAPEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCoAPEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedCoAPEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedCoAPEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the CoAP component.      */
DECL|interface|CoAPEndpointBuilder
specifier|public
interface|interface
name|CoAPEndpointBuilder
extends|extends
name|CoAPEndpointConsumerBuilder
extends|,
name|CoAPEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCoAPEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCoAPEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets the alias used to query the KeyStore for the private key and          * certificate. This parameter is used when we are enabling TLS with          * certificates on the service side, and similarly on the client side          * when TLS is used with certificates and client authentication. If the          * parameter is not specified then the default behavior is to use the          * first alias in the keystore that contains a key entry. This          * configuration parameter does not apply to configuring TLS via a Raw          * Public Key or a Pre-Shared Key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|alias (String alias)
specifier|default
name|CoAPEndpointBuilder
name|alias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"alias"
argument_list|,
name|alias
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the cipherSuites String. This is a comma separated String of          * ciphersuites to configure. If it is not specified, then it falls back          * to getting the ciphersuites from the sslContextParameters object.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|cipherSuites (String cipherSuites)
specifier|default
name|CoAPEndpointBuilder
name|cipherSuites
parameter_list|(
name|String
name|cipherSuites
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cipherSuites"
argument_list|,
name|cipherSuites
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the configuration options for server-side client-authentication          * requirements. The value must be one of NONE, WANT, REQUIRE. If this          * value is not specified, then it falls back to checking the          * sslContextParameters.getServerParameters().getClientAuthentication()          * value.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|clientAuthentication ( String clientAuthentication)
specifier|default
name|CoAPEndpointBuilder
name|clientAuthentication
parameter_list|(
name|String
name|clientAuthentication
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"clientAuthentication"
argument_list|,
name|clientAuthentication
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the configured private key for use with Raw Public Key.          *           * The option is a:<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|privateKey (PrivateKey privateKey)
specifier|default
name|CoAPEndpointBuilder
name|privateKey
parameter_list|(
name|PrivateKey
name|privateKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"privateKey"
argument_list|,
name|privateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the configured private key for use with Raw Public Key.          *           * The option will be converted to a          *<code>java.security.PrivateKey</code> type.          *           * Group: common          */
DECL|method|privateKey (String privateKey)
specifier|default
name|CoAPEndpointBuilder
name|privateKey
parameter_list|(
name|String
name|privateKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"privateKey"
argument_list|,
name|privateKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the PskStore to use for pre-shared key.          *           * The option is a:          *<code>org.eclipse.californium.scandium.dtls.pskstore.PskStore</code>          * type.          *           * Group: common          */
DECL|method|pskStore (Object pskStore)
specifier|default
name|CoAPEndpointBuilder
name|pskStore
parameter_list|(
name|Object
name|pskStore
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pskStore"
argument_list|,
name|pskStore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the PskStore to use for pre-shared key.          *           * The option will be converted to a          *<code>org.eclipse.californium.scandium.dtls.pskstore.PskStore</code>          * type.          *           * Group: common          */
DECL|method|pskStore (String pskStore)
specifier|default
name|CoAPEndpointBuilder
name|pskStore
parameter_list|(
name|String
name|pskStore
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pskStore"
argument_list|,
name|pskStore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the configured public key for use with Raw Public Key.          *           * The option is a:<code>java.security.PublicKey</code> type.          *           * Group: common          */
DECL|method|publicKey (PublicKey publicKey)
specifier|default
name|CoAPEndpointBuilder
name|publicKey
parameter_list|(
name|PublicKey
name|publicKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"publicKey"
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the configured public key for use with Raw Public Key.          *           * The option will be converted to a          *<code>java.security.PublicKey</code> type.          *           * Group: common          */
DECL|method|publicKey (String publicKey)
specifier|default
name|CoAPEndpointBuilder
name|publicKey
parameter_list|(
name|String
name|publicKey
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"publicKey"
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the SSLContextParameters object for setting up TLS. This is          * required for coapstcp, and for coaps when we are using certificates          * for TLS (as opposed to RPK or PKS).          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: common          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|CoAPEndpointBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the SSLContextParameters object for setting up TLS. This is          * required for coapstcp, and for coaps when we are using certificates          * for TLS (as opposed to RPK or PKS).          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: common          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|CoAPEndpointBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the TrustedRpkStore to use to determine trust in raw public keys.          *           * The option is a:          *<code>org.eclipse.californium.scandium.dtls.rpkstore.TrustedRpkStore</code> type.          *           * Group: common          */
DECL|method|trustedRpkStore (Object trustedRpkStore)
specifier|default
name|CoAPEndpointBuilder
name|trustedRpkStore
parameter_list|(
name|Object
name|trustedRpkStore
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustedRpkStore"
argument_list|,
name|trustedRpkStore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the TrustedRpkStore to use to determine trust in raw public keys.          *           * The option will be converted to a          *<code>org.eclipse.californium.scandium.dtls.rpkstore.TrustedRpkStore</code> type.          *           * Group: common          */
DECL|method|trustedRpkStore (String trustedRpkStore)
specifier|default
name|CoAPEndpointBuilder
name|trustedRpkStore
parameter_list|(
name|String
name|trustedRpkStore
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"trustedRpkStore"
argument_list|,
name|trustedRpkStore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the CoAP component.      */
DECL|interface|AdvancedCoAPEndpointBuilder
specifier|public
interface|interface
name|AdvancedCoAPEndpointBuilder
extends|extends
name|AdvancedCoAPEndpointConsumerBuilder
extends|,
name|AdvancedCoAPEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CoAPEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CoAPEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCoAPEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCoAPEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedCoAPEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedCoAPEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * CoAP (camel-coap)      * The coap component is used for sending and receiving messages from COAP      * capable devices.      *       * Category: iot      * Available as of version: 2.16      * Maven coordinates: org.apache.camel:camel-coap      *       * Syntax:<code>coap:uri</code>      *       * Path parameter: uri      * The URI for the CoAP endpoint      */
DECL|method|coap (String path)
specifier|default
name|CoAPEndpointBuilder
name|coap
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|coap
argument_list|(
literal|"coap"
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/**      * CoAP (camel-coap)      * The coap component is used for sending and receiving messages from COAP      * capable devices.      *       * Category: iot      * Available as of version: 2.16      * Maven coordinates: org.apache.camel:camel-coap      *       * Syntax:<code>coap+tcp:uri</code>      *       * Path parameter: uri      * The URI for the CoAP endpoint      */
DECL|method|coapTcp (String path)
specifier|default
name|CoAPEndpointBuilder
name|coapTcp
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|coap
argument_list|(
literal|"coap+tcp"
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/**      * CoAP (Secure) (camel-coap)      * The coap component is used for sending and receiving messages from COAP      * capable devices.      *       * Category: iot      * Available as of version: 2.16      * Maven coordinates: org.apache.camel:camel-coap      *       * Syntax:<code>coaps:uri</code>      *       * Path parameter: uri      * The URI for the CoAP endpoint      */
DECL|method|coaps (String path)
specifier|default
name|CoAPEndpointBuilder
name|coaps
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|coap
argument_list|(
literal|"coaps"
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/**      * CoAP (camel-coap)      * The coap component is used for sending and receiving messages from COAP      * capable devices.      *       * Category: iot      * Available as of version: 2.16      * Maven coordinates: org.apache.camel:camel-coap      *       * Syntax:<code>coaps+tcp:uri</code>      *       * Path parameter: uri      * The URI for the CoAP endpoint      */
DECL|method|coapsTcp (String path)
specifier|default
name|CoAPEndpointBuilder
name|coapsTcp
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|coap
argument_list|(
literal|"coaps+tcp"
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/**      * CoAP (camel-coap)      * The coap component is used for sending and receiving messages from COAP      * capable devices.      *       * Category: iot      * Available as of version: 2.16      * Maven coordinates: org.apache.camel:camel-coap      */
DECL|method|coap (String scheme, String path)
specifier|default
name|CoAPEndpointBuilder
name|coap
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|path
parameter_list|)
block|{
class|class
name|CoAPEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|CoAPEndpointBuilder
implements|,
name|AdvancedCoAPEndpointBuilder
block|{
specifier|public
name|CoAPEndpointBuilderImpl
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|scheme
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|CoAPEndpointBuilderImpl
argument_list|(
name|scheme
argument_list|,
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

