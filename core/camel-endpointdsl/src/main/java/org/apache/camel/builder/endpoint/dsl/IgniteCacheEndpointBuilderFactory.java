begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The Ignite Cache endpoint is one of camel-ignite endpoints which allows you  * to interact with an Ignite Cache.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|IgniteCacheEndpointBuilderFactory
specifier|public
interface|interface
name|IgniteCacheEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Ignite Cache component.      */
DECL|interface|IgniteCacheEndpointConsumerBuilder
specifier|public
interface|interface
name|IgniteCacheEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedIgniteCacheEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedIgniteCacheEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets whether to propagate the incoming body if the return type of the          * underlying Ignite operation is void.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|propagateIncomingBodyIfNoReturnValue ( boolean propagateIncomingBodyIfNoReturnValue)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|propagateIncomingBodyIfNoReturnValue
parameter_list|(
name|boolean
name|propagateIncomingBodyIfNoReturnValue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"propagateIncomingBodyIfNoReturnValue"
argument_list|,
name|propagateIncomingBodyIfNoReturnValue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to propagate the incoming body if the return type of the          * underlying Ignite operation is void.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|propagateIncomingBodyIfNoReturnValue ( String propagateIncomingBodyIfNoReturnValue)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|propagateIncomingBodyIfNoReturnValue
parameter_list|(
name|String
name|propagateIncomingBodyIfNoReturnValue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"propagateIncomingBodyIfNoReturnValue"
argument_list|,
name|propagateIncomingBodyIfNoReturnValue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to treat Collections as cache objects or as Collections          * of items to insert/update/compute, etc.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|treatCollectionsAsCacheObjects ( boolean treatCollectionsAsCacheObjects)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|treatCollectionsAsCacheObjects
parameter_list|(
name|boolean
name|treatCollectionsAsCacheObjects
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"treatCollectionsAsCacheObjects"
argument_list|,
name|treatCollectionsAsCacheObjects
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to treat Collections as cache objects or as Collections          * of items to insert/update/compute, etc.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|treatCollectionsAsCacheObjects ( String treatCollectionsAsCacheObjects)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|treatCollectionsAsCacheObjects
parameter_list|(
name|String
name|treatCollectionsAsCacheObjects
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"treatCollectionsAsCacheObjects"
argument_list|,
name|treatCollectionsAsCacheObjects
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether auto unsubscribe is enabled in the Continuous Query Consumer.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|autoUnsubscribe ( boolean autoUnsubscribe)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|autoUnsubscribe
parameter_list|(
name|boolean
name|autoUnsubscribe
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoUnsubscribe"
argument_list|,
name|autoUnsubscribe
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether auto unsubscribe is enabled in the Continuous Query Consumer.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|autoUnsubscribe ( String autoUnsubscribe)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|autoUnsubscribe
parameter_list|(
name|String
name|autoUnsubscribe
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"autoUnsubscribe"
argument_list|,
name|autoUnsubscribe
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to process existing results that match the query. Used on          * initialization of the Continuous Query Consumer.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|fireExistingQueryResults ( boolean fireExistingQueryResults)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|fireExistingQueryResults
parameter_list|(
name|boolean
name|fireExistingQueryResults
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fireExistingQueryResults"
argument_list|,
name|fireExistingQueryResults
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to process existing results that match the query. Used on          * initialization of the Continuous Query Consumer.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|fireExistingQueryResults ( String fireExistingQueryResults)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|fireExistingQueryResults
parameter_list|(
name|String
name|fireExistingQueryResults
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"fireExistingQueryResults"
argument_list|,
name|fireExistingQueryResults
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to pack each update in an individual Exchange, even if          * multiple updates are received in one batch. Only used by the          * Continuous Query Consumer.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|oneExchangePerUpdate ( boolean oneExchangePerUpdate)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|oneExchangePerUpdate
parameter_list|(
name|boolean
name|oneExchangePerUpdate
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"oneExchangePerUpdate"
argument_list|,
name|oneExchangePerUpdate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to pack each update in an individual Exchange, even if          * multiple updates are received in one batch. Only used by the          * Continuous Query Consumer.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|oneExchangePerUpdate ( String oneExchangePerUpdate)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|oneExchangePerUpdate
parameter_list|(
name|String
name|oneExchangePerUpdate
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"oneExchangePerUpdate"
argument_list|,
name|oneExchangePerUpdate
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The page size. Only used by the Continuous Query Consumer.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|pageSize (int pageSize)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|pageSize
parameter_list|(
name|int
name|pageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pageSize"
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The page size. Only used by the Continuous Query Consumer.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|pageSize (String pageSize)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|pageSize
parameter_list|(
name|String
name|pageSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pageSize"
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The remote filter, only used by the Continuous Query Consumer.          *           * The option is a:          *<code>org.apache.ignite.cache.CacheEntryEventSerializableFilter&lt;java.lang.Object, java.lang.Object&gt;</code> type.          *           * Group: consumer          */
DECL|method|remoteFilter ( Object remoteFilter)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|remoteFilter
parameter_list|(
name|Object
name|remoteFilter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"remoteFilter"
argument_list|,
name|remoteFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The remote filter, only used by the Continuous Query Consumer.          *           * The option will be converted to a          *<code>org.apache.ignite.cache.CacheEntryEventSerializableFilter&lt;java.lang.Object, java.lang.Object&gt;</code> type.          *           * Group: consumer          */
DECL|method|remoteFilter ( String remoteFilter)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|remoteFilter
parameter_list|(
name|String
name|remoteFilter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"remoteFilter"
argument_list|,
name|remoteFilter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The time interval for the Continuous Query Consumer.          *           * The option is a:<code>long</code> type.          *           * Group: consumer          */
DECL|method|timeInterval ( long timeInterval)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|timeInterval
parameter_list|(
name|long
name|timeInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeInterval"
argument_list|,
name|timeInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The time interval for the Continuous Query Consumer.          *           * The option will be converted to a<code>long</code> type.          *           * Group: consumer          */
DECL|method|timeInterval ( String timeInterval)
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|timeInterval
parameter_list|(
name|String
name|timeInterval
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeInterval"
argument_list|,
name|timeInterval
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Ignite Cache component.      */
DECL|interface|AdvancedIgniteCacheEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedIgniteCacheEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|IgniteCacheEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|IgniteCacheEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedIgniteCacheEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedIgniteCacheEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedIgniteCacheEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedIgniteCacheEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedIgniteCacheEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedIgniteCacheEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedIgniteCacheEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedIgniteCacheEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Ignite Cache component.      */
DECL|interface|IgniteCacheEndpointProducerBuilder
specifier|public
interface|interface
name|IgniteCacheEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedIgniteCacheEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedIgniteCacheEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets whether to propagate the incoming body if the return type of the          * underlying Ignite operation is void.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|propagateIncomingBodyIfNoReturnValue ( boolean propagateIncomingBodyIfNoReturnValue)
specifier|default
name|IgniteCacheEndpointProducerBuilder
name|propagateIncomingBodyIfNoReturnValue
parameter_list|(
name|boolean
name|propagateIncomingBodyIfNoReturnValue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"propagateIncomingBodyIfNoReturnValue"
argument_list|,
name|propagateIncomingBodyIfNoReturnValue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to propagate the incoming body if the return type of the          * underlying Ignite operation is void.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|propagateIncomingBodyIfNoReturnValue ( String propagateIncomingBodyIfNoReturnValue)
specifier|default
name|IgniteCacheEndpointProducerBuilder
name|propagateIncomingBodyIfNoReturnValue
parameter_list|(
name|String
name|propagateIncomingBodyIfNoReturnValue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"propagateIncomingBodyIfNoReturnValue"
argument_list|,
name|propagateIncomingBodyIfNoReturnValue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to treat Collections as cache objects or as Collections          * of items to insert/update/compute, etc.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|treatCollectionsAsCacheObjects ( boolean treatCollectionsAsCacheObjects)
specifier|default
name|IgniteCacheEndpointProducerBuilder
name|treatCollectionsAsCacheObjects
parameter_list|(
name|boolean
name|treatCollectionsAsCacheObjects
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"treatCollectionsAsCacheObjects"
argument_list|,
name|treatCollectionsAsCacheObjects
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to treat Collections as cache objects or as Collections          * of items to insert/update/compute, etc.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|treatCollectionsAsCacheObjects ( String treatCollectionsAsCacheObjects)
specifier|default
name|IgniteCacheEndpointProducerBuilder
name|treatCollectionsAsCacheObjects
parameter_list|(
name|String
name|treatCollectionsAsCacheObjects
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"treatCollectionsAsCacheObjects"
argument_list|,
name|treatCollectionsAsCacheObjects
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Query to execute, only needed for operations that require it, and          * for the Continuous Query Consumer.          *           * The option is a:          *<code>org.apache.ignite.cache.query.Query&lt;javax.cache.Cache$Entry&lt;java.lang.Object, java.lang.Object&gt;&gt;</code> type.          *           * Group: consumer          */
DECL|method|query (Object query)
specifier|default
name|IgniteCacheEndpointProducerBuilder
name|query
parameter_list|(
name|Object
name|query
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"query"
argument_list|,
name|query
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Query to execute, only needed for operations that require it, and          * for the Continuous Query Consumer.          *           * The option will be converted to a          *<code>org.apache.ignite.cache.query.Query&lt;javax.cache.Cache$Entry&lt;java.lang.Object, java.lang.Object&gt;&gt;</code> type.          *           * Group: consumer          */
DECL|method|query (String query)
specifier|default
name|IgniteCacheEndpointProducerBuilder
name|query
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"query"
argument_list|,
name|query
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CachePeekMode, only needed for operations that require it          * (IgniteCacheOperation#SIZE).          *           * The option is a:<code>org.apache.ignite.cache.CachePeekMode</code>          * type.          *           * Group: producer          */
DECL|method|cachePeekMode ( CachePeekMode cachePeekMode)
specifier|default
name|IgniteCacheEndpointProducerBuilder
name|cachePeekMode
parameter_list|(
name|CachePeekMode
name|cachePeekMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cachePeekMode"
argument_list|,
name|cachePeekMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The CachePeekMode, only needed for operations that require it          * (IgniteCacheOperation#SIZE).          *           * The option will be converted to a          *<code>org.apache.ignite.cache.CachePeekMode</code> type.          *           * Group: producer          */
DECL|method|cachePeekMode ( String cachePeekMode)
specifier|default
name|IgniteCacheEndpointProducerBuilder
name|cachePeekMode
parameter_list|(
name|String
name|cachePeekMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cachePeekMode"
argument_list|,
name|cachePeekMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to fail the initialization if the cache doesn't exist.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|failIfInexistentCache ( boolean failIfInexistentCache)
specifier|default
name|IgniteCacheEndpointProducerBuilder
name|failIfInexistentCache
parameter_list|(
name|boolean
name|failIfInexistentCache
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"failIfInexistentCache"
argument_list|,
name|failIfInexistentCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to fail the initialization if the cache doesn't exist.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|failIfInexistentCache ( String failIfInexistentCache)
specifier|default
name|IgniteCacheEndpointProducerBuilder
name|failIfInexistentCache
parameter_list|(
name|String
name|failIfInexistentCache
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"failIfInexistentCache"
argument_list|,
name|failIfInexistentCache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|IgniteCacheEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|IgniteCacheEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache operation to invoke. Possible values: GET, PUT, REMOVE,          * SIZE, REBALANCE, QUERY, CLEAR.          *           * The option is a:          *<code>org.apache.camel.component.ignite.cache.IgniteCacheOperation</code> type.          *           * Group: producer          */
DECL|method|operation ( IgniteCacheOperation operation)
specifier|default
name|IgniteCacheEndpointProducerBuilder
name|operation
parameter_list|(
name|IgniteCacheOperation
name|operation
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache operation to invoke. Possible values: GET, PUT, REMOVE,          * SIZE, REBALANCE, QUERY, CLEAR.          *           * The option will be converted to a          *<code>org.apache.camel.component.ignite.cache.IgniteCacheOperation</code> type.          *           * Group: producer          */
DECL|method|operation (String operation)
specifier|default
name|IgniteCacheEndpointProducerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Ignite Cache component.      */
DECL|interface|AdvancedIgniteCacheEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedIgniteCacheEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|IgniteCacheEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|IgniteCacheEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedIgniteCacheEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedIgniteCacheEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedIgniteCacheEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedIgniteCacheEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Ignite Cache component.      */
DECL|interface|IgniteCacheEndpointBuilder
specifier|public
interface|interface
name|IgniteCacheEndpointBuilder
extends|extends
name|IgniteCacheEndpointConsumerBuilder
extends|,
name|IgniteCacheEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedIgniteCacheEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedIgniteCacheEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Sets whether to propagate the incoming body if the return type of the          * underlying Ignite operation is void.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|propagateIncomingBodyIfNoReturnValue ( boolean propagateIncomingBodyIfNoReturnValue)
specifier|default
name|IgniteCacheEndpointBuilder
name|propagateIncomingBodyIfNoReturnValue
parameter_list|(
name|boolean
name|propagateIncomingBodyIfNoReturnValue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"propagateIncomingBodyIfNoReturnValue"
argument_list|,
name|propagateIncomingBodyIfNoReturnValue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to propagate the incoming body if the return type of the          * underlying Ignite operation is void.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|propagateIncomingBodyIfNoReturnValue ( String propagateIncomingBodyIfNoReturnValue)
specifier|default
name|IgniteCacheEndpointBuilder
name|propagateIncomingBodyIfNoReturnValue
parameter_list|(
name|String
name|propagateIncomingBodyIfNoReturnValue
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"propagateIncomingBodyIfNoReturnValue"
argument_list|,
name|propagateIncomingBodyIfNoReturnValue
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to treat Collections as cache objects or as Collections          * of items to insert/update/compute, etc.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|treatCollectionsAsCacheObjects ( boolean treatCollectionsAsCacheObjects)
specifier|default
name|IgniteCacheEndpointBuilder
name|treatCollectionsAsCacheObjects
parameter_list|(
name|boolean
name|treatCollectionsAsCacheObjects
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"treatCollectionsAsCacheObjects"
argument_list|,
name|treatCollectionsAsCacheObjects
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether to treat Collections as cache objects or as Collections          * of items to insert/update/compute, etc.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|treatCollectionsAsCacheObjects ( String treatCollectionsAsCacheObjects)
specifier|default
name|IgniteCacheEndpointBuilder
name|treatCollectionsAsCacheObjects
parameter_list|(
name|String
name|treatCollectionsAsCacheObjects
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"treatCollectionsAsCacheObjects"
argument_list|,
name|treatCollectionsAsCacheObjects
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Ignite Cache component.      */
DECL|interface|AdvancedIgniteCacheEndpointBuilder
specifier|public
interface|interface
name|AdvancedIgniteCacheEndpointBuilder
extends|extends
name|AdvancedIgniteCacheEndpointConsumerBuilder
extends|,
name|AdvancedIgniteCacheEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|IgniteCacheEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|IgniteCacheEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedIgniteCacheEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedIgniteCacheEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedIgniteCacheEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedIgniteCacheEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for<code>org.apache.ignite.cache.CachePeekMode</code> enum.      */
DECL|enum|CachePeekMode
enum|enum
name|CachePeekMode
block|{
DECL|enumConstant|ALL
name|ALL
block|,
DECL|enumConstant|NEAR
name|NEAR
block|,
DECL|enumConstant|PRIMARY
name|PRIMARY
block|,
DECL|enumConstant|BACKUP
name|BACKUP
block|,
DECL|enumConstant|ONHEAP
name|ONHEAP
block|,
DECL|enumConstant|OFFHEAP
name|OFFHEAP
block|;     }
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.ignite.cache.IgniteCacheOperation</code>      * enum.      */
DECL|enum|IgniteCacheOperation
enum|enum
name|IgniteCacheOperation
block|{
DECL|enumConstant|GET
name|GET
block|,
DECL|enumConstant|PUT
name|PUT
block|,
DECL|enumConstant|REMOVE
name|REMOVE
block|,
DECL|enumConstant|SIZE
name|SIZE
block|,
DECL|enumConstant|REBALANCE
name|REBALANCE
block|,
DECL|enumConstant|QUERY
name|QUERY
block|,
DECL|enumConstant|CLEAR
name|CLEAR
block|;     }
comment|/**      * Ignite Cache (camel-ignite)      * The Ignite Cache endpoint is one of camel-ignite endpoints which allows      * you to interact with an Ignite Cache.      *       * Category: nosql,cache,compute      * Since: 2.17      * Maven coordinates: org.apache.camel:camel-ignite      *       * Syntax:<code>ignite-cache:cacheName</code>      *       * Path parameter: cacheName (required)      * The cache name.      */
DECL|method|igniteCache (String path)
specifier|default
name|IgniteCacheEndpointBuilder
name|igniteCache
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|IgniteCacheEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|IgniteCacheEndpointBuilder
implements|,
name|AdvancedIgniteCacheEndpointBuilder
block|{
specifier|public
name|IgniteCacheEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"ignite-cache"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|IgniteCacheEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

