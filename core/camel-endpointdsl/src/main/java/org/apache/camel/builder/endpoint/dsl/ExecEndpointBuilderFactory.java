begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_comment
comment|/**  * The exec component can be used to execute OS system commands.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|ExecEndpointBuilderFactory
specifier|public
interface|interface
name|ExecEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint for the Exec component.      */
DECL|interface|ExecEndpointBuilder
specifier|public
interface|interface
name|ExecEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedExecEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedExecEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The arguments may be one or many whitespace-separated tokens.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|args (String args)
specifier|default
name|ExecEndpointBuilder
name|args
parameter_list|(
name|String
name|args
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"args"
argument_list|,
name|args
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A reference to a org.apache.commons.exec.ExecBinding in the Registry.          *           * The option is a:          *<code>org.apache.camel.component.exec.ExecBinding</code> type.          *           * Group: producer          */
DECL|method|binding (Object binding)
specifier|default
name|ExecEndpointBuilder
name|binding
parameter_list|(
name|Object
name|binding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"binding"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A reference to a org.apache.commons.exec.ExecBinding in the Registry.          *           * The option will be converted to a          *<code>org.apache.camel.component.exec.ExecBinding</code> type.          *           * Group: producer          */
DECL|method|binding (String binding)
specifier|default
name|ExecEndpointBuilder
name|binding
parameter_list|(
name|String
name|binding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"binding"
argument_list|,
name|binding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A reference to a org.apache.commons.exec.ExecCommandExecutor in the          * Registry that customizes the command execution. The default command          * executor utilizes the commons-exec library, which adds a shutdown          * hook for every executed command.          *           * The option is a:          *<code>org.apache.camel.component.exec.ExecCommandExecutor</code>          * type.          *           * Group: producer          */
DECL|method|commandExecutor (Object commandExecutor)
specifier|default
name|ExecEndpointBuilder
name|commandExecutor
parameter_list|(
name|Object
name|commandExecutor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"commandExecutor"
argument_list|,
name|commandExecutor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A reference to a org.apache.commons.exec.ExecCommandExecutor in the          * Registry that customizes the command execution. The default command          * executor utilizes the commons-exec library, which adds a shutdown          * hook for every executed command.          *           * The option will be converted to a          *<code>org.apache.camel.component.exec.ExecCommandExecutor</code>          * type.          *           * Group: producer          */
DECL|method|commandExecutor (String commandExecutor)
specifier|default
name|ExecEndpointBuilder
name|commandExecutor
parameter_list|(
name|String
name|commandExecutor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"commandExecutor"
argument_list|,
name|commandExecutor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer (boolean lazyStartProducer)
specifier|default
name|ExecEndpointBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer (String lazyStartProducer)
specifier|default
name|ExecEndpointBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of a file, created by the executable, that should be          * considered as its output. If no outFile is set, the standard output          * (stdout) of the executable will be used instead.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|outFile (String outFile)
specifier|default
name|ExecEndpointBuilder
name|outFile
parameter_list|(
name|String
name|outFile
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"outFile"
argument_list|,
name|outFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timeout, in milliseconds, after which the executable should be          * terminated. If execution has not completed within the timeout, the          * component will send a termination request.          *           * The option is a:<code>long</code> type.          *           * Group: producer          */
DECL|method|timeout (long timeout)
specifier|default
name|ExecEndpointBuilder
name|timeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The timeout, in milliseconds, after which the executable should be          * terminated. If execution has not completed within the timeout, the          * component will send a termination request.          *           * The option will be converted to a<code>long</code> type.          *           * Group: producer          */
DECL|method|timeout (String timeout)
specifier|default
name|ExecEndpointBuilder
name|timeout
parameter_list|(
name|String
name|timeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeout"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A boolean indicating that when stdout is empty, this component will          * populate the Camel Message Body with stderr. This behavior is          * disabled (false) by default.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|useStderrOnEmptyStdout ( boolean useStderrOnEmptyStdout)
specifier|default
name|ExecEndpointBuilder
name|useStderrOnEmptyStdout
parameter_list|(
name|boolean
name|useStderrOnEmptyStdout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useStderrOnEmptyStdout"
argument_list|,
name|useStderrOnEmptyStdout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A boolean indicating that when stdout is empty, this component will          * populate the Camel Message Body with stderr. This behavior is          * disabled (false) by default.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|useStderrOnEmptyStdout ( String useStderrOnEmptyStdout)
specifier|default
name|ExecEndpointBuilder
name|useStderrOnEmptyStdout
parameter_list|(
name|String
name|useStderrOnEmptyStdout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useStderrOnEmptyStdout"
argument_list|,
name|useStderrOnEmptyStdout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The directory in which the command should be executed. If null, the          * working directory of the current process will be used.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|workingDir (String workingDir)
specifier|default
name|ExecEndpointBuilder
name|workingDir
parameter_list|(
name|String
name|workingDir
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"workingDir"
argument_list|,
name|workingDir
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Exec component.      */
DECL|interface|AdvancedExecEndpointBuilder
specifier|public
interface|interface
name|AdvancedExecEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|ExecEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|ExecEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedExecEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedExecEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedExecEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedExecEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Exec (camel-exec)      * The exec component can be used to execute OS system commands.      *       * Category: system      * Available as of version: 2.3      * Maven coordinates: org.apache.camel:camel-exec      *       * Syntax:<code>exec:executable</code>      *       * Path parameter: executable (required)      * Sets the executable to be executed. The executable must not be empty or      * null.      */
DECL|method|exec (String path)
specifier|default
name|ExecEndpointBuilder
name|exec
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|ExecEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|ExecEndpointBuilder
implements|,
name|AdvancedExecEndpointBuilder
block|{
specifier|public
name|ExecEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"exec"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ExecEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

