begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * Represents a Debezium MySQL endpoint which is used to capture changes in  * MySQL database so that that applications can see those changes and respond to  * them.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|DebeziumMySqlEndpointBuilderFactory
specifier|public
interface|interface
name|DebeziumMySqlEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint for the Debezium MySQL Connector component.      */
DECL|interface|DebeziumMySqlEndpointBuilder
specifier|public
interface|interface
name|DebeziumMySqlEndpointBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedDebeziumMySqlEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedDebeziumMySqlEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Converter class that should be used to serialize and deserialize          * key data for offsets. The default is JSON converter.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|internalKeyConverter ( String internalKeyConverter)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|internalKeyConverter
parameter_list|(
name|String
name|internalKeyConverter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"internalKeyConverter"
argument_list|,
name|internalKeyConverter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The Converter class that should be used to serialize and deserialize          * value data for offsets. The default is JSON converter.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|internalValueConverter ( String internalValueConverter)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|internalValueConverter
parameter_list|(
name|String
name|internalValueConverter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"internalValueConverter"
argument_list|,
name|internalValueConverter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the Java class of the commit policy. It defines when          * offsets commit has to be triggered based on the number of events          * processed and the time elapsed since the last commit. This class must          * implement the interface 'OffsetCommitPolicy'. The default is a          * periodic commit policy based upon time intervals.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|offsetCommitPolicy ( String offsetCommitPolicy)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|offsetCommitPolicy
parameter_list|(
name|String
name|offsetCommitPolicy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetCommitPolicy"
argument_list|,
name|offsetCommitPolicy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum number of milliseconds to wait for records to flush and          * partition offset data to be committed to offset storage before          * cancelling the process and restoring the offset data to be committed          * in a future attempt. The default is 5 seconds.          *           * The option is a:<code>long</code> type.          *           * Group: consumer          */
DECL|method|offsetCommitTimeoutMs ( long offsetCommitTimeoutMs)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|offsetCommitTimeoutMs
parameter_list|(
name|long
name|offsetCommitTimeoutMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetCommitTimeoutMs"
argument_list|,
name|offsetCommitTimeoutMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum number of milliseconds to wait for records to flush and          * partition offset data to be committed to offset storage before          * cancelling the process and restoring the offset data to be committed          * in a future attempt. The default is 5 seconds.          *           * The option will be converted to a<code>long</code> type.          *           * Group: consumer          */
DECL|method|offsetCommitTimeoutMs ( String offsetCommitTimeoutMs)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|offsetCommitTimeoutMs
parameter_list|(
name|String
name|offsetCommitTimeoutMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetCommitTimeoutMs"
argument_list|,
name|offsetCommitTimeoutMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval at which to try committing offsets. The default is 1 minute.          *           * The option is a:<code>long</code> type.          *           * Group: consumer          */
DECL|method|offsetFlushIntervalMs ( long offsetFlushIntervalMs)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|offsetFlushIntervalMs
parameter_list|(
name|long
name|offsetFlushIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetFlushIntervalMs"
argument_list|,
name|offsetFlushIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval at which to try committing offsets. The default is 1 minute.          *           * The option will be converted to a<code>long</code> type.          *           * Group: consumer          */
DECL|method|offsetFlushIntervalMs ( String offsetFlushIntervalMs)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|offsetFlushIntervalMs
parameter_list|(
name|String
name|offsetFlushIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetFlushIntervalMs"
argument_list|,
name|offsetFlushIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the Java class that is responsible for persistence of          * connector offsets.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|offsetStorage (String offsetStorage)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|offsetStorage
parameter_list|(
name|String
name|offsetStorage
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorage"
argument_list|,
name|offsetStorage
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Path to file where offsets are to be stored. Required when          * offset.storage is set to the FileOffsetBackingStore.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|offsetStorageFileName ( String offsetStorageFileName)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|offsetStorageFileName
parameter_list|(
name|String
name|offsetStorageFileName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorageFileName"
argument_list|,
name|offsetStorageFileName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of partitions used when creating the offset storage topic.          * Required when offset.storage is set to the 'KafkaOffsetBackingStore'.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|offsetStoragePartitions ( int offsetStoragePartitions)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|offsetStoragePartitions
parameter_list|(
name|int
name|offsetStoragePartitions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStoragePartitions"
argument_list|,
name|offsetStoragePartitions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of partitions used when creating the offset storage topic.          * Required when offset.storage is set to the 'KafkaOffsetBackingStore'.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|offsetStoragePartitions ( String offsetStoragePartitions)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|offsetStoragePartitions
parameter_list|(
name|String
name|offsetStoragePartitions
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStoragePartitions"
argument_list|,
name|offsetStoragePartitions
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Replication factor used when creating the offset storage topic.          * Required when offset.storage is set to the KafkaOffsetBackingStore.          *           * The option is a:<code>int</code> type.          *           * Group: consumer          */
DECL|method|offsetStorageReplicationFactor ( int offsetStorageReplicationFactor)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|offsetStorageReplicationFactor
parameter_list|(
name|int
name|offsetStorageReplicationFactor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorageReplicationFactor"
argument_list|,
name|offsetStorageReplicationFactor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Replication factor used when creating the offset storage topic.          * Required when offset.storage is set to the KafkaOffsetBackingStore.          *           * The option will be converted to a<code>int</code> type.          *           * Group: consumer          */
DECL|method|offsetStorageReplicationFactor ( String offsetStorageReplicationFactor)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|offsetStorageReplicationFactor
parameter_list|(
name|String
name|offsetStorageReplicationFactor
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorageReplicationFactor"
argument_list|,
name|offsetStorageReplicationFactor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the Kafka topic where offsets are to be stored. Required          * when offset.storage is set to the KafkaOffsetBackingStore.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: consumer          */
DECL|method|offsetStorageTopic ( String offsetStorageTopic)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|offsetStorageTopic
parameter_list|(
name|String
name|offsetStorageTopic
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"offsetStorageTopic"
argument_list|,
name|offsetStorageTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify how BIGINT UNSIGNED columns should be represented in change          * events, including:'precise' uses java.math.BigDecimal to represent          * values, which are encoded in the change events using a binary          * representation and Kafka Connect's          * 'org.apache.kafka.connect.data.Decimal' type; 'long' (the default)          * represents values using Java's 'long', which may not offer the          * precision but will be far easier to use in consumers.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|bigintUnsignedHandlingMode ( String bigintUnsignedHandlingMode)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|bigintUnsignedHandlingMode
parameter_list|(
name|String
name|bigintUnsignedHandlingMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bigintUnsignedHandlingMode"
argument_list|,
name|bigintUnsignedHandlingMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The size of a look-ahead buffer used by the binlog reader to decide          * whether the transaction in progress is going to be committed or          * rolled back. Use 0 to disable look-ahead buffering. Defaults to 0          * (i.e. buffering is disabled).          *           * The option is a:<code>int</code> type.          *           * Group: mysql          */
DECL|method|binlogBufferSize ( int binlogBufferSize)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|binlogBufferSize
parameter_list|(
name|int
name|binlogBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"binlogBufferSize"
argument_list|,
name|binlogBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The size of a look-ahead buffer used by the binlog reader to decide          * whether the transaction in progress is going to be committed or          * rolled back. Use 0 to disable look-ahead buffering. Defaults to 0          * (i.e. buffering is disabled).          *           * The option will be converted to a<code>int</code> type.          *           * Group: mysql          */
DECL|method|binlogBufferSize ( String binlogBufferSize)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|binlogBufferSize
parameter_list|(
name|String
name|binlogBufferSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"binlogBufferSize"
argument_list|,
name|binlogBufferSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Description is not available here, please check Debezium website for          * corresponding key 'column.blacklist' description.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|columnBlacklist ( String columnBlacklist)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|columnBlacklist
parameter_list|(
name|String
name|columnBlacklist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"columnBlacklist"
argument_list|,
name|columnBlacklist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether a separate thread should be used to ensure the connection is          * kept alive.          *           * The option is a:<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|connectKeepAlive ( boolean connectKeepAlive)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|connectKeepAlive
parameter_list|(
name|boolean
name|connectKeepAlive
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectKeepAlive"
argument_list|,
name|connectKeepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether a separate thread should be used to ensure the connection is          * kept alive.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|connectKeepAlive ( String connectKeepAlive)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|connectKeepAlive
parameter_list|(
name|String
name|connectKeepAlive
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectKeepAlive"
argument_list|,
name|connectKeepAlive
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval in milliseconds to wait for connection checking if keep          * alive thread is used.          *           * The option is a:<code>long</code> type.          *           * Group: mysql          */
DECL|method|connectKeepAliveIntervalMs ( long connectKeepAliveIntervalMs)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|connectKeepAliveIntervalMs
parameter_list|(
name|long
name|connectKeepAliveIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectKeepAliveIntervalMs"
argument_list|,
name|connectKeepAliveIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Interval in milliseconds to wait for connection checking if keep          * alive thread is used.          *           * The option will be converted to a<code>long</code> type.          *           * Group: mysql          */
DECL|method|connectKeepAliveIntervalMs ( String connectKeepAliveIntervalMs)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|connectKeepAliveIntervalMs
parameter_list|(
name|String
name|connectKeepAliveIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectKeepAliveIntervalMs"
argument_list|,
name|connectKeepAliveIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum time in milliseconds to wait after trying to connect to the          * database before timing out.          *           * The option is a:<code>int</code> type.          *           * Group: mysql          */
DECL|method|connectTimeoutMs ( int connectTimeoutMs)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|connectTimeoutMs
parameter_list|(
name|int
name|connectTimeoutMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectTimeoutMs"
argument_list|,
name|connectTimeoutMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum time in milliseconds to wait after trying to connect to the          * database before timing out.          *           * The option will be converted to a<code>int</code> type.          *           * Group: mysql          */
DECL|method|connectTimeoutMs ( String connectTimeoutMs)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|connectTimeoutMs
parameter_list|(
name|String
name|connectTimeoutMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectTimeoutMs"
argument_list|,
name|connectTimeoutMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Description is not available here, please check Debezium website for          * corresponding key 'database.blacklist' description.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|databaseBlacklist ( String databaseBlacklist)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseBlacklist
parameter_list|(
name|String
name|databaseBlacklist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseBlacklist"
argument_list|,
name|databaseBlacklist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the DatabaseHistory class that should be used to store          * and recover database schema changes. The configuration properties for          * the history are prefixed with the 'database.history.' string.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|databaseHistory ( String databaseHistory)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseHistory
parameter_list|(
name|String
name|databaseHistory
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistory"
argument_list|,
name|databaseHistory
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The path to the file that will be used to record the database          * history.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|databaseHistoryFileFilename ( String databaseHistoryFileFilename)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseHistoryFileFilename
parameter_list|(
name|String
name|databaseHistoryFileFilename
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryFileFilename"
argument_list|,
name|databaseHistoryFileFilename
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A list of host/port pairs that the connector will use for          * establishing the initial connection to the Kafka cluster for          * retrieving database schema history previously stored by the          * connector. This should point to the same Kafka cluster used by the          * Kafka Connect process.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|databaseHistoryKafkaBootstrapServers ( String databaseHistoryKafkaBootstrapServers)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseHistoryKafkaBootstrapServers
parameter_list|(
name|String
name|databaseHistoryKafkaBootstrapServers
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryKafkaBootstrapServers"
argument_list|,
name|databaseHistoryKafkaBootstrapServers
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of attempts in a row that no data are returned from Kafka          * before recover completes. The maximum amount of time to wait after          * receiving no data is (recovery.attempts) x          * (recovery.poll.interval.ms).          *           * The option is a:<code>int</code> type.          *           * Group: mysql          */
DECL|method|databaseHistoryKafkaRecoveryAttempts ( int databaseHistoryKafkaRecoveryAttempts)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseHistoryKafkaRecoveryAttempts
parameter_list|(
name|int
name|databaseHistoryKafkaRecoveryAttempts
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryKafkaRecoveryAttempts"
argument_list|,
name|databaseHistoryKafkaRecoveryAttempts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of attempts in a row that no data are returned from Kafka          * before recover completes. The maximum amount of time to wait after          * receiving no data is (recovery.attempts) x          * (recovery.poll.interval.ms).          *           * The option will be converted to a<code>int</code> type.          *           * Group: mysql          */
DECL|method|databaseHistoryKafkaRecoveryAttempts ( String databaseHistoryKafkaRecoveryAttempts)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseHistoryKafkaRecoveryAttempts
parameter_list|(
name|String
name|databaseHistoryKafkaRecoveryAttempts
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryKafkaRecoveryAttempts"
argument_list|,
name|databaseHistoryKafkaRecoveryAttempts
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of milliseconds to wait while polling for persisted data          * during recovery.          *           * The option is a:<code>int</code> type.          *           * Group: mysql          */
DECL|method|databaseHistoryKafkaRecoveryPollIntervalMs ( int databaseHistoryKafkaRecoveryPollIntervalMs)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseHistoryKafkaRecoveryPollIntervalMs
parameter_list|(
name|int
name|databaseHistoryKafkaRecoveryPollIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryKafkaRecoveryPollIntervalMs"
argument_list|,
name|databaseHistoryKafkaRecoveryPollIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of milliseconds to wait while polling for persisted data          * during recovery.          *           * The option will be converted to a<code>int</code> type.          *           * Group: mysql          */
DECL|method|databaseHistoryKafkaRecoveryPollIntervalMs ( String databaseHistoryKafkaRecoveryPollIntervalMs)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseHistoryKafkaRecoveryPollIntervalMs
parameter_list|(
name|String
name|databaseHistoryKafkaRecoveryPollIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryKafkaRecoveryPollIntervalMs"
argument_list|,
name|databaseHistoryKafkaRecoveryPollIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of the topic for the database schema history.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|databaseHistoryKafkaTopic ( String databaseHistoryKafkaTopic)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseHistoryKafkaTopic
parameter_list|(
name|String
name|databaseHistoryKafkaTopic
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryKafkaTopic"
argument_list|,
name|databaseHistoryKafkaTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls the action Debezium will take when it meets a DDL statement          * in binlog, that it cannot parse.By default the connector will stop          * operating but by changing the setting it can ignore the statements          * which it cannot parse. If skipping is enabled then Debezium can miss          * metadata changes.          *           * The option is a:<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|databaseHistorySkipUnparseableDdl ( boolean databaseHistorySkipUnparseableDdl)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseHistorySkipUnparseableDdl
parameter_list|(
name|boolean
name|databaseHistorySkipUnparseableDdl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistorySkipUnparseableDdl"
argument_list|,
name|databaseHistorySkipUnparseableDdl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls the action Debezium will take when it meets a DDL statement          * in binlog, that it cannot parse.By default the connector will stop          * operating but by changing the setting it can ignore the statements          * which it cannot parse. If skipping is enabled then Debezium can miss          * metadata changes.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|databaseHistorySkipUnparseableDdl ( String databaseHistorySkipUnparseableDdl)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseHistorySkipUnparseableDdl
parameter_list|(
name|String
name|databaseHistorySkipUnparseableDdl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistorySkipUnparseableDdl"
argument_list|,
name|databaseHistorySkipUnparseableDdl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls what DDL will Debezium store in database history.By default          * (false) Debezium will store all incoming DDL statements. If set to          * truethen only DDL that manipulates a monitored table will be stored.          *           * The option is a:<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|databaseHistoryStoreOnlyMonitoredTablesDdl ( boolean databaseHistoryStoreOnlyMonitoredTablesDdl)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseHistoryStoreOnlyMonitoredTablesDdl
parameter_list|(
name|boolean
name|databaseHistoryStoreOnlyMonitoredTablesDdl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryStoreOnlyMonitoredTablesDdl"
argument_list|,
name|databaseHistoryStoreOnlyMonitoredTablesDdl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls what DDL will Debezium store in database history.By default          * (false) Debezium will store all incoming DDL statements. If set to          * truethen only DDL that manipulates a monitored table will be stored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|databaseHistoryStoreOnlyMonitoredTablesDdl ( String databaseHistoryStoreOnlyMonitoredTablesDdl)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseHistoryStoreOnlyMonitoredTablesDdl
parameter_list|(
name|String
name|databaseHistoryStoreOnlyMonitoredTablesDdl
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHistoryStoreOnlyMonitoredTablesDdl"
argument_list|,
name|databaseHistoryStoreOnlyMonitoredTablesDdl
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Resolvable hostname or IP address of the MySQL database server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|databaseHostname ( String databaseHostname)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseHostname
parameter_list|(
name|String
name|databaseHostname
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseHostname"
argument_list|,
name|databaseHostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A semicolon separated list of SQL statements to be executed when a          * JDBC connection (not binlog reading connection) to the database is          * established. Note that the connector may establish JDBC connections          * at its own discretion, so this should typically be used for          * configuration of session parameters only,but not for executing DML          * statements. Use doubled semicolon (';;') to use a semicolon as a          * character and not as a delimiter.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|databaseInitialStatements ( String databaseInitialStatements)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseInitialStatements
parameter_list|(
name|String
name|databaseInitialStatements
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseInitialStatements"
argument_list|,
name|databaseInitialStatements
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * JDBC Driver class name used to connect to the MySQL database server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|databaseJdbcDriver ( String databaseJdbcDriver)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseJdbcDriver
parameter_list|(
name|String
name|databaseJdbcDriver
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseJdbcDriver"
argument_list|,
name|databaseJdbcDriver
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password of the MySQL database user to be used when connecting to the          * database.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: mysql          */
DECL|method|databasePassword ( String databasePassword)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databasePassword
parameter_list|(
name|String
name|databasePassword
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databasePassword"
argument_list|,
name|databasePassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port of the MySQL database server.          *           * The option is a:<code>int</code> type.          *           * Group: mysql          */
DECL|method|databasePort (int databasePort)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databasePort
parameter_list|(
name|int
name|databasePort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databasePort"
argument_list|,
name|databasePort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port of the MySQL database server.          *           * The option will be converted to a<code>int</code> type.          *           * Group: mysql          */
DECL|method|databasePort (String databasePort)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databasePort
parameter_list|(
name|String
name|databasePort
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databasePort"
argument_list|,
name|databasePort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A numeric ID of this database client, which must be unique across all          * currently-running database processes in the cluster. This connector          * joins the MySQL database cluster as another server (with this unique          * ID) so it can read the binlog. By default, a random number is          * generated between 5400 and 6400.          *           * The option is a:<code>long</code> type.          *           * Group: mysql          */
DECL|method|databaseServerId ( long databaseServerId)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseServerId
parameter_list|(
name|long
name|databaseServerId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseServerId"
argument_list|,
name|databaseServerId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A numeric ID of this database client, which must be unique across all          * currently-running database processes in the cluster. This connector          * joins the MySQL database cluster as another server (with this unique          * ID) so it can read the binlog. By default, a random number is          * generated between 5400 and 6400.          *           * The option will be converted to a<code>long</code> type.          *           * Group: mysql          */
DECL|method|databaseServerId ( String databaseServerId)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseServerId
parameter_list|(
name|String
name|databaseServerId
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseServerId"
argument_list|,
name|databaseServerId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only relevant if parallel snapshotting is configured. During parallel          * snapshotting, multiple (4) connections open to the database client,          * and they each need their own unique connection ID. This offset is          * used to generate those IDs from the base configured cluster ID.          *           * The option is a:<code>long</code> type.          *           * Group: mysql          */
DECL|method|databaseServerIdOffset ( long databaseServerIdOffset)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseServerIdOffset
parameter_list|(
name|long
name|databaseServerIdOffset
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseServerIdOffset"
argument_list|,
name|databaseServerIdOffset
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Only relevant if parallel snapshotting is configured. During parallel          * snapshotting, multiple (4) connections open to the database client,          * and they each need their own unique connection ID. This offset is          * used to generate those IDs from the base configured cluster ID.          *           * The option will be converted to a<code>long</code> type.          *           * Group: mysql          */
DECL|method|databaseServerIdOffset ( String databaseServerIdOffset)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseServerIdOffset
parameter_list|(
name|String
name|databaseServerIdOffset
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseServerIdOffset"
argument_list|,
name|databaseServerIdOffset
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Unique name that identifies the database server and all recorded          * offsets, and that is used as a prefix for all schemas and topics.          * Each distinct installation should have a separate namespace and be          * monitored by at most one Debezium connector.          *           * The option is a:<code>java.lang.String</code> type.          *           * Required: true          * Group: mysql          */
DECL|method|databaseServerName ( String databaseServerName)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseServerName
parameter_list|(
name|String
name|databaseServerName
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseServerName"
argument_list|,
name|databaseServerName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Location of the Java keystore file containing an application          * process's own certificate and private key.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|databaseSslKeystore ( String databaseSslKeystore)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseSslKeystore
parameter_list|(
name|String
name|databaseSslKeystore
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseSslKeystore"
argument_list|,
name|databaseSslKeystore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password to access the private key from the keystore file specified          * by 'ssl.keystore' configuration property or the          * 'javax.net.ssl.keyStore' system or JVM property. This password is          * used to unlock the keystore file (store password), and to decrypt the          * private key stored in the keystore (key password).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|databaseSslKeystorePassword ( String databaseSslKeystorePassword)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseSslKeystorePassword
parameter_list|(
name|String
name|databaseSslKeystorePassword
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseSslKeystorePassword"
argument_list|,
name|databaseSslKeystorePassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to use an encrypted connection to MySQL. Options          * include'disabled' (the default) to use an unencrypted connection;          * 'preferred' to establish a secure (encrypted) connection if the          * server supports secure connections, but fall back to an unencrypted          * connection otherwise; 'required' to use a secure (encrypted)          * connection, and fail if one cannot be established; 'verify_ca' like          * 'required' but additionally verify the server TLS certificate against          * the configured Certificate Authority (CA) certificates, or fail if no          * valid matching CA certificates are found; or'verify_identity' like          * 'verify_ca' but additionally verify that the server certificate          * matches the host to which the connection is attempted.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|databaseSslMode ( String databaseSslMode)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseSslMode
parameter_list|(
name|String
name|databaseSslMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseSslMode"
argument_list|,
name|databaseSslMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Location of the Java truststore file containing the collection of CA          * certificates trusted by this application process (trust store).          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|databaseSslTruststore ( String databaseSslTruststore)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseSslTruststore
parameter_list|(
name|String
name|databaseSslTruststore
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseSslTruststore"
argument_list|,
name|databaseSslTruststore
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Password to unlock the keystore file (store password) specified by          * 'ssl.trustore' configuration property or the          * 'javax.net.ssl.trustStore' system or JVM property.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|databaseSslTruststorePassword ( String databaseSslTruststorePassword)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseSslTruststorePassword
parameter_list|(
name|String
name|databaseSslTruststorePassword
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseSslTruststorePassword"
argument_list|,
name|databaseSslTruststorePassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Name of the MySQL database user to be used when connecting to the          * database.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|databaseUser (String databaseUser)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseUser
parameter_list|(
name|String
name|databaseUser
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseUser"
argument_list|,
name|databaseUser
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The databases for which changes are to be captured.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|databaseWhitelist ( String databaseWhitelist)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|databaseWhitelist
parameter_list|(
name|String
name|databaseWhitelist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"databaseWhitelist"
argument_list|,
name|databaseWhitelist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify how DECIMAL and NUMERIC columns should be represented in          * change events, including:'precise' (the default) uses          * java.math.BigDecimal to represent values, which are encoded in the          * change events using a binary representation and Kafka Connect's          * 'org.apache.kafka.connect.data.Decimal' type; 'string' uses string to          * represent values; 'double' represents values using Java's 'double',          * which may not offer the precision but will be far easier to use in          * consumers.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|decimalHandlingMode ( String decimalHandlingMode)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|decimalHandlingMode
parameter_list|(
name|String
name|decimalHandlingMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"decimalHandlingMode"
argument_list|,
name|decimalHandlingMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * MySQL allows user to insert year value as either 2-digit or 4-digit.          * In case of two digit the value is automatically mapped into 1970 -          * 2069.false - delegates the implicit conversion to the databasetrue -          * (the default) Debezium makes the conversion.          *           * The option is a:<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|enableTimeAdjuster ( boolean enableTimeAdjuster)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|enableTimeAdjuster
parameter_list|(
name|boolean
name|enableTimeAdjuster
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"enableTimeAdjuster"
argument_list|,
name|enableTimeAdjuster
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * MySQL allows user to insert year value as either 2-digit or 4-digit.          * In case of two digit the value is automatically mapped into 1970 -          * 2069.false - delegates the implicit conversion to the databasetrue -          * (the default) Debezium makes the conversion.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|enableTimeAdjuster ( String enableTimeAdjuster)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|enableTimeAdjuster
parameter_list|(
name|String
name|enableTimeAdjuster
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"enableTimeAdjuster"
argument_list|,
name|enableTimeAdjuster
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify how failures during deserialization of binlog events (i.e.          * when encountering a corrupted event) should be handled,          * including:'fail' (the default) an exception indicating the          * problematic event and its binlog position is raised, causing the          * connector to be stopped; 'warn' the problematic event and its binlog          * position will be logged and the event will be skipped;'ignore' the          * problematic event will be skipped.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|eventDeserializationFailureHandlingMode ( String eventDeserializationFailureHandlingMode)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|eventDeserializationFailureHandlingMode
parameter_list|(
name|String
name|eventDeserializationFailureHandlingMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"eventDeserializationFailureHandlingMode"
argument_list|,
name|eventDeserializationFailureHandlingMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set to 'latest', when connector sees new GTID, it will start          * consuming gtid channel from the server latest executed gtid position.          * If 'earliest' connector starts reading channel from first available          * (not purged) gtid position on the server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|gtidNewChannelPosition ( String gtidNewChannelPosition)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|gtidNewChannelPosition
parameter_list|(
name|String
name|gtidNewChannelPosition
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"gtidNewChannelPosition"
argument_list|,
name|gtidNewChannelPosition
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The source UUIDs used to exclude GTID ranges when determine the          * starting position in the MySQL server's binlog.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|gtidSourceExcludes ( String gtidSourceExcludes)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|gtidSourceExcludes
parameter_list|(
name|String
name|gtidSourceExcludes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"gtidSourceExcludes"
argument_list|,
name|gtidSourceExcludes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set to true, we will only produce DML events into Kafka for          * transactions that were written on mysql servers with UUIDs matching          * the filters defined by the gtid.source.includes or          * gtid.source.excludes configuration options, if they are specified.          *           * The option is a:<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|gtidSourceFilterDmlEvents ( boolean gtidSourceFilterDmlEvents)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|gtidSourceFilterDmlEvents
parameter_list|(
name|boolean
name|gtidSourceFilterDmlEvents
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"gtidSourceFilterDmlEvents"
argument_list|,
name|gtidSourceFilterDmlEvents
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If set to true, we will only produce DML events into Kafka for          * transactions that were written on mysql servers with UUIDs matching          * the filters defined by the gtid.source.includes or          * gtid.source.excludes configuration options, if they are specified.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|gtidSourceFilterDmlEvents ( String gtidSourceFilterDmlEvents)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|gtidSourceFilterDmlEvents
parameter_list|(
name|String
name|gtidSourceFilterDmlEvents
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"gtidSourceFilterDmlEvents"
argument_list|,
name|gtidSourceFilterDmlEvents
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The source UUIDs used to include GTID ranges when determine the          * starting position in the MySQL server's binlog.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|gtidSourceIncludes ( String gtidSourceIncludes)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|gtidSourceIncludes
parameter_list|(
name|String
name|gtidSourceIncludes
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"gtidSourceIncludes"
argument_list|,
name|gtidSourceIncludes
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Length of an interval in milli-seconds in in which the connector          * periodically sends heartbeat messages to a heartbeat topic. Use 0 to          * disable heartbeat messages. Disabled by default.          *           * The option is a:<code>int</code> type.          *           * Group: mysql          */
DECL|method|heartbeatIntervalMs ( int heartbeatIntervalMs)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|heartbeatIntervalMs
parameter_list|(
name|int
name|heartbeatIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"heartbeatIntervalMs"
argument_list|,
name|heartbeatIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Length of an interval in milli-seconds in in which the connector          * periodically sends heartbeat messages to a heartbeat topic. Use 0 to          * disable heartbeat messages. Disabled by default.          *           * The option will be converted to a<code>int</code> type.          *           * Group: mysql          */
DECL|method|heartbeatIntervalMs ( String heartbeatIntervalMs)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|heartbeatIntervalMs
parameter_list|(
name|String
name|heartbeatIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"heartbeatIntervalMs"
argument_list|,
name|heartbeatIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The prefix that is used to name heartbeat topics.Defaults to          * __debezium-heartbeat.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|heartbeatTopicsPrefix ( String heartbeatTopicsPrefix)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|heartbeatTopicsPrefix
parameter_list|(
name|String
name|heartbeatTopicsPrefix
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"heartbeatTopicsPrefix"
argument_list|,
name|heartbeatTopicsPrefix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the connector should include the original SQL query that          * generated the change event. Note: This option requires MySQL be          * configured with the binlog_rows_query_log_events option set to ON.          * Query will not be present for events generated from snapshot.          * WARNING: Enabling this option may expose tables or fields explicitly          * blacklisted or masked by including the original SQL statement in the          * change event. For this reason the default value is 'false'.          *           * The option is a:<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|includeQuery (boolean includeQuery)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|includeQuery
parameter_list|(
name|boolean
name|includeQuery
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"includeQuery"
argument_list|,
name|includeQuery
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the connector should include the original SQL query that          * generated the change event. Note: This option requires MySQL be          * configured with the binlog_rows_query_log_events option set to ON.          * Query will not be present for events generated from snapshot.          * WARNING: Enabling this option may expose tables or fields explicitly          * blacklisted or masked by including the original SQL statement in the          * change event. For this reason the default value is 'false'.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|includeQuery (String includeQuery)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|includeQuery
parameter_list|(
name|String
name|includeQuery
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"includeQuery"
argument_list|,
name|includeQuery
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the connector should publish changes in the database schema          * to a Kafka topic with the same name as the database server ID. Each          * schema change will be recorded using a key that contains the database          * name and whose value includes the DDL statement(s).The default is          * 'true'. This is independent of how the connector internally records          * database history.          *           * The option is a:<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|includeSchemaChanges ( boolean includeSchemaChanges)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|includeSchemaChanges
parameter_list|(
name|boolean
name|includeSchemaChanges
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"includeSchemaChanges"
argument_list|,
name|includeSchemaChanges
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the connector should publish changes in the database schema          * to a Kafka topic with the same name as the database server ID. Each          * schema change will be recorded using a key that contains the database          * name and whose value includes the DDL statement(s).The default is          * 'true'. This is independent of how the connector internally records          * database history.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|includeSchemaChanges ( String includeSchemaChanges)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|includeSchemaChanges
parameter_list|(
name|String
name|includeSchemaChanges
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"includeSchemaChanges"
argument_list|,
name|includeSchemaChanges
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify how binlog events that belong to a table missing from          * internal schema representation (i.e. internal representation is not          * consistent with database) should be handled, including:'fail' (the          * default) an exception indicating the problematic event and its binlog          * position is raised, causing the connector to be stopped; 'warn' the          * problematic event and its binlog position will be logged and the          * event will be skipped;'ignore' the problematic event will be skipped.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|inconsistentSchemaHandlingMode ( String inconsistentSchemaHandlingMode)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|inconsistentSchemaHandlingMode
parameter_list|(
name|String
name|inconsistentSchemaHandlingMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"inconsistentSchemaHandlingMode"
argument_list|,
name|inconsistentSchemaHandlingMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of each batch of source records. Defaults to 2048.          *           * The option is a:<code>int</code> type.          *           * Group: mysql          */
DECL|method|maxBatchSize (int maxBatchSize)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|maxBatchSize
parameter_list|(
name|int
name|maxBatchSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxBatchSize"
argument_list|,
name|maxBatchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of each batch of source records. Defaults to 2048.          *           * The option will be converted to a<code>int</code> type.          *           * Group: mysql          */
DECL|method|maxBatchSize (String maxBatchSize)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|maxBatchSize
parameter_list|(
name|String
name|maxBatchSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxBatchSize"
argument_list|,
name|maxBatchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of the queue for change events read from the database          * log but not yet recorded or forwarded. Defaults to 8192, and should          * always be larger than the maximum batch size.          *           * The option is a:<code>int</code> type.          *           * Group: mysql          */
DECL|method|maxQueueSize (int maxQueueSize)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|maxQueueSize
parameter_list|(
name|int
name|maxQueueSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxQueueSize"
argument_list|,
name|maxQueueSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Maximum size of the queue for change events read from the database          * log but not yet recorded or forwarded. Defaults to 8192, and should          * always be larger than the maximum batch size.          *           * The option will be converted to a<code>int</code> type.          *           * Group: mysql          */
DECL|method|maxQueueSize (String maxQueueSize)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|maxQueueSize
parameter_list|(
name|String
name|maxQueueSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maxQueueSize"
argument_list|,
name|maxQueueSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A semicolon-separated list of expressions that match fully-qualified          * tables and column(s) to be used as message key. Each expression must          * match the pattern ':',where the table names could be defined as          * (DB_NAME.TABLE_NAME) or (SCHEMA_NAME.TABLE_NAME), depending on the          * specific connector,and the key columns are a comma-separated list of          * columns representing the custom key. For any table without an          * explicit key configuration the table's primary key column(s) will be          * used as message key.Example:          * dbserver1.inventory.orderlines:orderId,orderLineId;dbserver1.inventory.orders:id.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|messageKeyColumns ( String messageKeyColumns)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|messageKeyColumns
parameter_list|(
name|String
name|messageKeyColumns
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"messageKeyColumns"
argument_list|,
name|messageKeyColumns
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Frequency in milliseconds to wait for new change events to appear          * after receiving no events. Defaults to 500ms.          *           * The option is a:<code>long</code> type.          *           * Group: mysql          */
DECL|method|pollIntervalMs (long pollIntervalMs)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|pollIntervalMs
parameter_list|(
name|long
name|pollIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollIntervalMs"
argument_list|,
name|pollIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Frequency in milliseconds to wait for new change events to appear          * after receiving no events. Defaults to 500ms.          *           * The option will be converted to a<code>long</code> type.          *           * Group: mysql          */
DECL|method|pollIntervalMs ( String pollIntervalMs)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|pollIntervalMs
parameter_list|(
name|String
name|pollIntervalMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollIntervalMs"
argument_list|,
name|pollIntervalMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of milliseconds to delay before a snapshot will begin.          *           * The option is a:<code>long</code> type.          *           * Group: mysql          */
DECL|method|snapshotDelayMs ( long snapshotDelayMs)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|snapshotDelayMs
parameter_list|(
name|long
name|snapshotDelayMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotDelayMs"
argument_list|,
name|snapshotDelayMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of milliseconds to delay before a snapshot will begin.          *           * The option will be converted to a<code>long</code> type.          *           * Group: mysql          */
DECL|method|snapshotDelayMs ( String snapshotDelayMs)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|snapshotDelayMs
parameter_list|(
name|String
name|snapshotDelayMs
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotDelayMs"
argument_list|,
name|snapshotDelayMs
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of records that should be loaded into memory while          * performing a snapshot.          *           * The option is a:<code>int</code> type.          *           * Group: mysql          */
DECL|method|snapshotFetchSize ( int snapshotFetchSize)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|snapshotFetchSize
parameter_list|(
name|int
name|snapshotFetchSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotFetchSize"
argument_list|,
name|snapshotFetchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The maximum number of records that should be loaded into memory while          * performing a snapshot.          *           * The option will be converted to a<code>int</code> type.          *           * Group: mysql          */
DECL|method|snapshotFetchSize ( String snapshotFetchSize)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|snapshotFetchSize
parameter_list|(
name|String
name|snapshotFetchSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotFetchSize"
argument_list|,
name|snapshotFetchSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls how long the connector holds onto the global read lock while          * it is performing a snapshot. The default is 'minimal', which means          * the connector holds the global read lock (and thus prevents any          * updates) for just the initial portion of the snapshot while the          * database schemas and other metadata are being read. The remaining          * work in a snapshot involves selecting all rows from each table, and          * this can be done using the snapshot process' REPEATABLE READ          * transaction even when the lock is no longer held and other operations          * are updating the database. However, in some cases it may be desirable          * to block all writes for the entire duration of the snapshot; in such          * cases set this property to 'extended'. Using a value of 'none' will          * prevent the connector from acquiring any table locks during the          * snapshot process. This mode can only be used in combination with          * snapshot.mode values of 'schema_only' or 'schema_only_recovery' and          * is only safe to use if no schema changes are happening while the          * snapshot is taken.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|snapshotLockingMode ( String snapshotLockingMode)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|snapshotLockingMode
parameter_list|(
name|String
name|snapshotLockingMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotLockingMode"
argument_list|,
name|snapshotLockingMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The criteria for running a snapshot upon startup of the connector.          * Options include: 'when_needed' to specify that the connector run a          * snapshot upon startup whenever it deems it necessary; 'initial' (the          * default) to specify the connector can run a snapshot only when no          * offsets are available for the logical server name; 'initial_only'          * same as 'initial' except the connector should stop after completing          * the snapshot and before it would normally read the binlog; and'never'          * to specify the connector should never run a snapshot and that upon          * first startup the connector should read from the beginning of the          * binlog. The 'never' mode should be used with care, and only when the          * binlog is known to contain all history.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|snapshotMode (String snapshotMode)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|snapshotMode
parameter_list|(
name|String
name|snapshotMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotMode"
argument_list|,
name|snapshotMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * BETA FEATURE: On connector restart, the connector will check if there          * have been any new tables added to the configuration, and snapshot          * them. There is presently only two options:'off': Default behavior. Do          * not snapshot new tables.'parallel': The snapshot of the new tables          * will occur in parallel to the continued binlog reading of the old          * tables. When the snapshot completes, an independent binlog reader          * will begin reading the events for the new tables until it catches up          * to present time. At this point, both old and new binlog readers will          * be momentarily halted and new binlog reader will start that will read          * the binlog for all configured tables. The parallel binlog reader will          * have a configured server id of 10000 the primary binlog reader's          * server id.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|snapshotNewTables ( String snapshotNewTables)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|snapshotNewTables
parameter_list|(
name|String
name|snapshotNewTables
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotNewTables"
argument_list|,
name|snapshotNewTables
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * This property contains a comma-separated list of fully-qualified          * tables (DB_NAME.TABLE_NAME) or (SCHEMA_NAME.TABLE_NAME), depending on          * thespecific connectors . Select statements for the individual tables          * are specified in further configuration properties, one for each          * table, identified by the id          * 'snapshot.select.statement.overrides.DB_NAME.TABLE_NAME' or          * 'snapshot.select.statement.overrides.SCHEMA_NAME.TABLE_NAME',          * respectively. The value of those properties is the select statement          * to use when retrieving data from the specific table during          * snapshotting. A possible use case for large append-only tables is          * setting a specific point where to start (resume) snapshotting, in          * case a previous snapshotting was interrupted.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|snapshotSelectStatementOverrides ( String snapshotSelectStatementOverrides)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|snapshotSelectStatementOverrides
parameter_list|(
name|String
name|snapshotSelectStatementOverrides
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"snapshotSelectStatementOverrides"
argument_list|,
name|snapshotSelectStatementOverrides
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A version of the format of the publicly visible source part in the          * message.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|sourceStructVersion ( String sourceStructVersion)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|sourceStructVersion
parameter_list|(
name|String
name|sourceStructVersion
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sourceStructVersion"
argument_list|,
name|sourceStructVersion
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Description is not available here, please check Debezium website for          * corresponding key 'table.blacklist' description.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|tableBlacklist ( String tableBlacklist)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|tableBlacklist
parameter_list|(
name|String
name|tableBlacklist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tableBlacklist"
argument_list|,
name|tableBlacklist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Flag specifying whether built-in tables should be ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|tableIgnoreBuiltin ( boolean tableIgnoreBuiltin)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|tableIgnoreBuiltin
parameter_list|(
name|boolean
name|tableIgnoreBuiltin
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tableIgnoreBuiltin"
argument_list|,
name|tableIgnoreBuiltin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Flag specifying whether built-in tables should be ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|tableIgnoreBuiltin ( String tableIgnoreBuiltin)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|tableIgnoreBuiltin
parameter_list|(
name|String
name|tableIgnoreBuiltin
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tableIgnoreBuiltin"
argument_list|,
name|tableIgnoreBuiltin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The tables for which changes are to be captured.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|tableWhitelist ( String tableWhitelist)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|tableWhitelist
parameter_list|(
name|String
name|tableWhitelist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tableWhitelist"
argument_list|,
name|tableWhitelist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time, date and timestamps can be represented with different kinds of          * precisions, including:'adaptive_time_microseconds': the precision of          * date and timestamp values is based the database column's precision;          * but time fields always use microseconds precision;'connect': always          * represents time, date and timestamp values using Kafka Connect's          * built-in representations for Time, Date, and Timestamp, which uses          * millisecond precision regardless of the database columns' precision.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: mysql          */
DECL|method|timePrecisionMode ( String timePrecisionMode)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|timePrecisionMode
parameter_list|(
name|String
name|timePrecisionMode
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timePrecisionMode"
argument_list|,
name|timePrecisionMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether delete operations should be represented by a delete event and          * a subsquenttombstone event (true) or only by a delete event (false).          * Emitting the tombstone event (the default behavior) allows Kafka to          * completely delete all events pertaining to the given key once the          * source record got deleted.          *           * The option is a:<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|tombstonesOnDelete ( boolean tombstonesOnDelete)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|tombstonesOnDelete
parameter_list|(
name|boolean
name|tombstonesOnDelete
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tombstonesOnDelete"
argument_list|,
name|tombstonesOnDelete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether delete operations should be represented by a delete event and          * a subsquenttombstone event (true) or only by a delete event (false).          * Emitting the tombstone event (the default behavior) allows Kafka to          * completely delete all events pertaining to the given key once the          * source record got deleted.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: mysql          */
DECL|method|tombstonesOnDelete ( String tombstonesOnDelete)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|tombstonesOnDelete
parameter_list|(
name|String
name|tombstonesOnDelete
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"tombstonesOnDelete"
argument_list|,
name|tombstonesOnDelete
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Debezium MySQL Connector component.      */
DECL|interface|AdvancedDebeziumMySqlEndpointBuilder
specifier|public
interface|interface
name|AdvancedDebeziumMySqlEndpointBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|DebeziumMySqlEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|DebeziumMySqlEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedDebeziumMySqlEndpointBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedDebeziumMySqlEndpointBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedDebeziumMySqlEndpointBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedDebeziumMySqlEndpointBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedDebeziumMySqlEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedDebeziumMySqlEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedDebeziumMySqlEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedDebeziumMySqlEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Debezium MySQL Connector (camel-debezium-mysql)      * Represents a Debezium MySQL endpoint which is used to capture changes in      * MySQL database so that that applications can see those changes and      * respond to them.      *       * Category: database,sql,mysql      * Since: 3.0      * Maven coordinates: org.apache.camel:camel-debezium-mysql      *       * Syntax:<code>debezium-mysql:name</code>      *       * Path parameter: name (required)      * Unique name for the connector. Attempting to register again with the same      * name will fail.      */
DECL|method|debeziumMysql (String path)
specifier|default
name|DebeziumMySqlEndpointBuilder
name|debeziumMysql
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|DebeziumMySqlEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|DebeziumMySqlEndpointBuilder
implements|,
name|AdvancedDebeziumMySqlEndpointBuilder
block|{
specifier|public
name|DebeziumMySqlEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"debezium-mysql"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DebeziumMySqlEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

