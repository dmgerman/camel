begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The caffeine-cache component is used for integration with Caffeine Cache.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|CaffeineCacheEndpointBuilderFactory
specifier|public
interface|interface
name|CaffeineCacheEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Caffeine Cache component.      */
DECL|interface|CaffeineCacheEndpointConsumerBuilder
specifier|public
interface|interface
name|CaffeineCacheEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCaffeineCacheEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCaffeineCacheEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCacheIfNotExist ( boolean createCacheIfNotExist)
specifier|default
name|CaffeineCacheEndpointConsumerBuilder
name|createCacheIfNotExist
parameter_list|(
name|boolean
name|createCacheIfNotExist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"createCacheIfNotExist"
argument_list|,
name|createCacheIfNotExist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCacheIfNotExist ( String createCacheIfNotExist)
specifier|default
name|CaffeineCacheEndpointConsumerBuilder
name|createCacheIfNotExist
parameter_list|(
name|String
name|createCacheIfNotExist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"createCacheIfNotExist"
argument_list|,
name|createCacheIfNotExist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|CaffeineCacheEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|CaffeineCacheEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Caffeine Cache component.      */
DECL|interface|AdvancedCaffeineCacheEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedCaffeineCacheEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CaffeineCacheEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CaffeineCacheEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedCaffeineCacheEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedCaffeineCacheEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedCaffeineCacheEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedCaffeineCacheEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCaffeineCacheEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCaffeineCacheEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache key type, default java.lang.Object.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|keyType ( String keyType)
specifier|default
name|AdvancedCaffeineCacheEndpointConsumerBuilder
name|keyType
parameter_list|(
name|String
name|keyType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyType"
argument_list|,
name|keyType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedCaffeineCacheEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedCaffeineCacheEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache value type, default java.lang.Object.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|valueType ( String valueType)
specifier|default
name|AdvancedCaffeineCacheEndpointConsumerBuilder
name|valueType
parameter_list|(
name|String
name|valueType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"valueType"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Caffeine Cache component.      */
DECL|interface|CaffeineCacheEndpointProducerBuilder
specifier|public
interface|interface
name|CaffeineCacheEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCaffeineCacheEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCaffeineCacheEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCacheIfNotExist ( boolean createCacheIfNotExist)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|createCacheIfNotExist
parameter_list|(
name|boolean
name|createCacheIfNotExist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"createCacheIfNotExist"
argument_list|,
name|createCacheIfNotExist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCacheIfNotExist ( String createCacheIfNotExist)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|createCacheIfNotExist
parameter_list|(
name|String
name|createCacheIfNotExist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"createCacheIfNotExist"
argument_list|,
name|createCacheIfNotExist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the default cache action. If an action is set in the          * message header, then the operation from the header takes precedence.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: producer          */
DECL|method|action (String action)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|action
parameter_list|(
name|String
name|action
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"action"
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure an already instantiated cache to be used.          *           * The option is a:          *<code>com.github.benmanes.caffeine.cache.Cache</code> type.          *           * Group: producer          */
DECL|method|cache (Object cache)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|cache
parameter_list|(
name|Object
name|cache
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cache"
argument_list|,
name|cache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure an already instantiated cache to be used.          *           * The option will be converted to a          *<code>com.github.benmanes.caffeine.cache.Cache</code> type.          *           * Group: producer          */
DECL|method|cache (String cache)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|cache
parameter_list|(
name|String
name|cache
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cache"
argument_list|,
name|cache
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure a CacheLoader in case of a LoadCache use.          *           * The option is a:          *<code>com.github.benmanes.caffeine.cache.CacheLoader</code> type.          *           * Group: producer          */
DECL|method|cacheLoader ( Object cacheLoader)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|cacheLoader
parameter_list|(
name|Object
name|cacheLoader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheLoader"
argument_list|,
name|cacheLoader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure a CacheLoader in case of a LoadCache use.          *           * The option will be converted to a          *<code>com.github.benmanes.caffeine.cache.CacheLoader</code> type.          *           * Group: producer          */
DECL|method|cacheLoader ( String cacheLoader)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|cacheLoader
parameter_list|(
name|String
name|cacheLoader
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"cacheLoader"
argument_list|,
name|cacheLoader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the eviction Type for this cache.          *           * The option is a:          *<code>org.apache.camel.component.caffeine.EvictionType</code> type.          *           * Group: producer          */
DECL|method|evictionType ( EvictionType evictionType)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|evictionType
parameter_list|(
name|EvictionType
name|evictionType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"evictionType"
argument_list|,
name|evictionType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the eviction Type for this cache.          *           * The option will be converted to a          *<code>org.apache.camel.component.caffeine.EvictionType</code> type.          *           * Group: producer          */
DECL|method|evictionType ( String evictionType)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|evictionType
parameter_list|(
name|String
name|evictionType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"evictionType"
argument_list|,
name|evictionType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the expire After Access Time in case of time based Eviction (in          * seconds).          *           * The option is a:<code>int</code> type.          *           * Group: producer          */
DECL|method|expireAfterAccessTime ( int expireAfterAccessTime)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|expireAfterAccessTime
parameter_list|(
name|int
name|expireAfterAccessTime
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"expireAfterAccessTime"
argument_list|,
name|expireAfterAccessTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the expire After Access Time in case of time based Eviction (in          * seconds).          *           * The option will be converted to a<code>int</code> type.          *           * Group: producer          */
DECL|method|expireAfterAccessTime ( String expireAfterAccessTime)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|expireAfterAccessTime
parameter_list|(
name|String
name|expireAfterAccessTime
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"expireAfterAccessTime"
argument_list|,
name|expireAfterAccessTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the expire After Access Write in case of time based Eviction (in          * seconds).          *           * The option is a:<code>int</code> type.          *           * Group: producer          */
DECL|method|expireAfterWriteTime ( int expireAfterWriteTime)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|expireAfterWriteTime
parameter_list|(
name|int
name|expireAfterWriteTime
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"expireAfterWriteTime"
argument_list|,
name|expireAfterWriteTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the expire After Access Write in case of time based Eviction (in          * seconds).          *           * The option will be converted to a<code>int</code> type.          *           * Group: producer          */
DECL|method|expireAfterWriteTime ( String expireAfterWriteTime)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|expireAfterWriteTime
parameter_list|(
name|String
name|expireAfterWriteTime
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"expireAfterWriteTime"
argument_list|,
name|expireAfterWriteTime
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the initial Capacity for the cache.          *           * The option is a:<code>int</code> type.          *           * Group: producer          */
DECL|method|initialCapacity ( int initialCapacity)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|initialCapacity
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialCapacity"
argument_list|,
name|initialCapacity
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the initial Capacity for the cache.          *           * The option will be converted to a<code>int</code> type.          *           * Group: producer          */
DECL|method|initialCapacity ( String initialCapacity)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|initialCapacity
parameter_list|(
name|String
name|initialCapacity
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialCapacity"
argument_list|,
name|initialCapacity
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the default action key. If a key is set in the message          * header, then the key from the header takes precedence.          *           * The option is a:<code>java.lang.Object</code> type.          *           * Group: producer          */
DECL|method|key (Object key)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|key
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"key"
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure the default action key. If a key is set in the message          * header, then the key from the header takes precedence.          *           * The option will be converted to a<code>java.lang.Object</code> type.          *           * Group: producer          */
DECL|method|key (String key)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|key
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"key"
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the maximum size for the cache.          *           * The option is a:<code>int</code> type.          *           * Group: producer          */
DECL|method|maximumSize (int maximumSize)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|maximumSize
parameter_list|(
name|int
name|maximumSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maximumSize"
argument_list|,
name|maximumSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the maximum size for the cache.          *           * The option will be converted to a<code>int</code> type.          *           * Group: producer          */
DECL|method|maximumSize ( String maximumSize)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|maximumSize
parameter_list|(
name|String
name|maximumSize
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"maximumSize"
argument_list|,
name|maximumSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a specific removal Listener for the cache.          *           * The option is a:          *<code>com.github.benmanes.caffeine.cache.RemovalListener</code> type.          *           * Group: producer          */
DECL|method|removalListener ( Object removalListener)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|removalListener
parameter_list|(
name|Object
name|removalListener
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"removalListener"
argument_list|,
name|removalListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a specific removal Listener for the cache.          *           * The option will be converted to a          *<code>com.github.benmanes.caffeine.cache.RemovalListener</code> type.          *           * Group: producer          */
DECL|method|removalListener ( String removalListener)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|removalListener
parameter_list|(
name|String
name|removalListener
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"removalListener"
argument_list|,
name|removalListener
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a specific Stats Counter for the cache stats.          *           * The option is a:          *<code>com.github.benmanes.caffeine.cache.stats.StatsCounter</code>          * type.          *           * Group: producer          */
DECL|method|statsCounter ( Object statsCounter)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|statsCounter
parameter_list|(
name|Object
name|statsCounter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"statsCounter"
argument_list|,
name|statsCounter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set a specific Stats Counter for the cache stats.          *           * The option will be converted to a          *<code>com.github.benmanes.caffeine.cache.stats.StatsCounter</code>          * type.          *           * Group: producer          */
DECL|method|statsCounter ( String statsCounter)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|statsCounter
parameter_list|(
name|String
name|statsCounter
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"statsCounter"
argument_list|,
name|statsCounter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To enable stats on the cache.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|statsEnabled ( boolean statsEnabled)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|statsEnabled
parameter_list|(
name|boolean
name|statsEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"statsEnabled"
argument_list|,
name|statsEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To enable stats on the cache.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|statsEnabled ( String statsEnabled)
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|statsEnabled
parameter_list|(
name|String
name|statsEnabled
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"statsEnabled"
argument_list|,
name|statsEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Caffeine Cache component.      */
DECL|interface|AdvancedCaffeineCacheEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedCaffeineCacheEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CaffeineCacheEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CaffeineCacheEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCaffeineCacheEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCaffeineCacheEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache key type, default java.lang.Object.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|keyType ( String keyType)
specifier|default
name|AdvancedCaffeineCacheEndpointProducerBuilder
name|keyType
parameter_list|(
name|String
name|keyType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyType"
argument_list|,
name|keyType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedCaffeineCacheEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedCaffeineCacheEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache value type, default java.lang.Object.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|valueType ( String valueType)
specifier|default
name|AdvancedCaffeineCacheEndpointProducerBuilder
name|valueType
parameter_list|(
name|String
name|valueType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"valueType"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Caffeine Cache component.      */
DECL|interface|CaffeineCacheEndpointBuilder
specifier|public
interface|interface
name|CaffeineCacheEndpointBuilder
extends|extends
name|CaffeineCacheEndpointConsumerBuilder
extends|,
name|CaffeineCacheEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedCaffeineCacheEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedCaffeineCacheEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCacheIfNotExist ( boolean createCacheIfNotExist)
specifier|default
name|CaffeineCacheEndpointBuilder
name|createCacheIfNotExist
parameter_list|(
name|boolean
name|createCacheIfNotExist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"createCacheIfNotExist"
argument_list|,
name|createCacheIfNotExist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Configure if a cache need to be created if it does exist or can't be          * pre-configured.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|createCacheIfNotExist ( String createCacheIfNotExist)
specifier|default
name|CaffeineCacheEndpointBuilder
name|createCacheIfNotExist
parameter_list|(
name|String
name|createCacheIfNotExist
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"createCacheIfNotExist"
argument_list|,
name|createCacheIfNotExist
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Caffeine Cache component.      */
DECL|interface|AdvancedCaffeineCacheEndpointBuilder
specifier|public
interface|interface
name|AdvancedCaffeineCacheEndpointBuilder
extends|extends
name|AdvancedCaffeineCacheEndpointConsumerBuilder
extends|,
name|AdvancedCaffeineCacheEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|CaffeineCacheEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|CaffeineCacheEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedCaffeineCacheEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedCaffeineCacheEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache key type, default java.lang.Object.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|keyType (String keyType)
specifier|default
name|AdvancedCaffeineCacheEndpointBuilder
name|keyType
parameter_list|(
name|String
name|keyType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"keyType"
argument_list|,
name|keyType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedCaffeineCacheEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedCaffeineCacheEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The cache value type, default java.lang.Object.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: advanced          */
DECL|method|valueType (String valueType)
specifier|default
name|AdvancedCaffeineCacheEndpointBuilder
name|valueType
parameter_list|(
name|String
name|valueType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"valueType"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.caffeine.EvictionType</code> enum.      */
DECL|enum|EvictionType
enum|enum
name|EvictionType
block|{
DECL|enumConstant|size_based
name|size_based
block|,
DECL|enumConstant|time_based
name|time_based
block|;     }
comment|/**      * Caffeine Cache (camel-caffeine)      * The caffeine-cache component is used for integration with Caffeine Cache.      *       * Category: cache,datagrid,clustering      * Since: 2.20      * Maven coordinates: org.apache.camel:camel-caffeine      *       * Syntax:<code>caffeine-cache:cacheName</code>      *       * Path parameter: cacheName (required)      * the cache name      */
DECL|method|caffeineCache (String path)
specifier|default
name|CaffeineCacheEndpointBuilder
name|caffeineCache
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|CaffeineCacheEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|CaffeineCacheEndpointBuilder
implements|,
name|AdvancedCaffeineCacheEndpointBuilder
block|{
specifier|public
name|CaffeineCacheEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"caffeine-cache"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|CaffeineCacheEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

