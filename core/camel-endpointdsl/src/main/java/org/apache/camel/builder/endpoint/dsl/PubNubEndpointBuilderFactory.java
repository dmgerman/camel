begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * To send and receive messages to PubNub data stream network for connected  * devices.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|PubNubEndpointBuilderFactory
specifier|public
interface|interface
name|PubNubEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the PubNub component.      */
DECL|interface|PubNubEndpointConsumerBuilder
specifier|public
interface|interface
name|PubNubEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|public
specifier|default
name|AdvancedPubNubEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedPubNubEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The channel used for subscribing/publishing events.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|channel (String channel)
specifier|public
specifier|default
name|PubNubEndpointConsumerBuilder
name|channel
parameter_list|(
name|String
name|channel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channel"
argument_list|,
name|channel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * UUID to be used as a device identifier, a default UUID is generated          * if not passed.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|uuid (String uuid)
specifier|public
specifier|default
name|PubNubEndpointConsumerBuilder
name|uuid
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"uuid"
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|public
specifier|default
name|PubNubEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|public
specifier|default
name|PubNubEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Also subscribe to related presence information.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|withPresence ( boolean withPresence)
specifier|public
specifier|default
name|PubNubEndpointConsumerBuilder
name|withPresence
parameter_list|(
name|boolean
name|withPresence
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"withPresence"
argument_list|,
name|withPresence
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Also subscribe to related presence information.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|withPresence ( String withPresence)
specifier|public
specifier|default
name|PubNubEndpointConsumerBuilder
name|withPresence
parameter_list|(
name|String
name|withPresence
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"withPresence"
argument_list|,
name|withPresence
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If Access Manager is utilized, client will use this authKey in all          * restricted requests.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|authKey (String authKey)
specifier|public
specifier|default
name|PubNubEndpointConsumerBuilder
name|authKey
parameter_list|(
name|String
name|authKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"authKey"
argument_list|,
name|authKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If cipher is passed, all communicatons to/from PubNub will be          * encrypted.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|cipherKey (String cipherKey)
specifier|public
specifier|default
name|PubNubEndpointConsumerBuilder
name|cipherKey
parameter_list|(
name|String
name|cipherKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cipherKey"
argument_list|,
name|cipherKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The publish key obtained from your PubNub account. Required when          * publishing messages.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|publishKey ( String publishKey)
specifier|public
specifier|default
name|PubNubEndpointConsumerBuilder
name|publishKey
parameter_list|(
name|String
name|publishKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publishKey"
argument_list|,
name|publishKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The secret key used for message signing.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|secretKey (String secretKey)
specifier|public
specifier|default
name|PubNubEndpointConsumerBuilder
name|secretKey
parameter_list|(
name|String
name|secretKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secretKey"
argument_list|,
name|secretKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use SSL for secure transmission.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|secure (boolean secure)
specifier|public
specifier|default
name|PubNubEndpointConsumerBuilder
name|secure
parameter_list|(
name|boolean
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use SSL for secure transmission.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|secure (String secure)
specifier|public
specifier|default
name|PubNubEndpointConsumerBuilder
name|secure
parameter_list|(
name|String
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The subscribe key obtained from your PubNub account. Required when          * subscribing to channels or listening for presence events.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|subscribeKey ( String subscribeKey)
specifier|public
specifier|default
name|PubNubEndpointConsumerBuilder
name|subscribeKey
parameter_list|(
name|String
name|subscribeKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"subscribeKey"
argument_list|,
name|subscribeKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the PubNub component.      */
DECL|interface|AdvancedPubNubEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedPubNubEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|public
specifier|default
name|PubNubEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|PubNubEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|public
specifier|default
name|AdvancedPubNubEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|public
specifier|default
name|AdvancedPubNubEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|public
specifier|default
name|AdvancedPubNubEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|public
specifier|default
name|AdvancedPubNubEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedPubNubEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedPubNubEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a Pubnub client in the registry.          * The option is a<code>com.pubnub.api.PubNub</code> type.          * @group advanced          */
DECL|method|pubnub ( Object pubnub)
specifier|public
specifier|default
name|AdvancedPubNubEndpointConsumerBuilder
name|pubnub
parameter_list|(
name|Object
name|pubnub
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pubnub"
argument_list|,
name|pubnub
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a Pubnub client in the registry.          * The option will be converted to a<code>com.pubnub.api.PubNub</code>          * type.          * @group advanced          */
DECL|method|pubnub ( String pubnub)
specifier|public
specifier|default
name|AdvancedPubNubEndpointConsumerBuilder
name|pubnub
parameter_list|(
name|String
name|pubnub
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pubnub"
argument_list|,
name|pubnub
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|public
specifier|default
name|AdvancedPubNubEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|public
specifier|default
name|AdvancedPubNubEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the PubNub component.      */
DECL|interface|PubNubEndpointProducerBuilder
specifier|public
specifier|static
interface|interface
name|PubNubEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|public
specifier|default
name|AdvancedPubNubEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedPubNubEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The channel used for subscribing/publishing events.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|channel (String channel)
specifier|public
specifier|default
name|PubNubEndpointProducerBuilder
name|channel
parameter_list|(
name|String
name|channel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channel"
argument_list|,
name|channel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * UUID to be used as a device identifier, a default UUID is generated          * if not passed.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|uuid (String uuid)
specifier|public
specifier|default
name|PubNubEndpointProducerBuilder
name|uuid
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"uuid"
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|public
specifier|default
name|PubNubEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|public
specifier|default
name|PubNubEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The operation to perform. PUBLISH: Default. Send a message to all          * subscribers of a channel. FIRE: allows the client to send a message          * to BLOCKS Event Handlers. These messages will go directly to any          * Event Handlers registered on the channel. HERENOW: Obtain information          * about the current state of a channel including a list of unique          * user-ids currently subscribed to the channel and the total occupancy          * count. WHERENOW: Obtain information about the current list of          * channels to which a uuid is subscribed to. GETSTATE: Used to get          * key/value pairs specific to a subscriber uuid. State information is          * supplied as a JSON object of key/value pairs SETSTATE: Used to set          * key/value pairs specific to a subscriber uuid GETHISTORY: Fetches          * historical messages of a channel.          * The option is a<code>java.lang.String</code> type.          * @group producer          */
DECL|method|operation (String operation)
specifier|public
specifier|default
name|PubNubEndpointProducerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If Access Manager is utilized, client will use this authKey in all          * restricted requests.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|authKey (String authKey)
specifier|public
specifier|default
name|PubNubEndpointProducerBuilder
name|authKey
parameter_list|(
name|String
name|authKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"authKey"
argument_list|,
name|authKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If cipher is passed, all communicatons to/from PubNub will be          * encrypted.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|cipherKey (String cipherKey)
specifier|public
specifier|default
name|PubNubEndpointProducerBuilder
name|cipherKey
parameter_list|(
name|String
name|cipherKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cipherKey"
argument_list|,
name|cipherKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The publish key obtained from your PubNub account. Required when          * publishing messages.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|publishKey ( String publishKey)
specifier|public
specifier|default
name|PubNubEndpointProducerBuilder
name|publishKey
parameter_list|(
name|String
name|publishKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publishKey"
argument_list|,
name|publishKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The secret key used for message signing.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|secretKey (String secretKey)
specifier|public
specifier|default
name|PubNubEndpointProducerBuilder
name|secretKey
parameter_list|(
name|String
name|secretKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secretKey"
argument_list|,
name|secretKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use SSL for secure transmission.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|secure (boolean secure)
specifier|public
specifier|default
name|PubNubEndpointProducerBuilder
name|secure
parameter_list|(
name|boolean
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use SSL for secure transmission.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|secure (String secure)
specifier|public
specifier|default
name|PubNubEndpointProducerBuilder
name|secure
parameter_list|(
name|String
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The subscribe key obtained from your PubNub account. Required when          * subscribing to channels or listening for presence events.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|subscribeKey ( String subscribeKey)
specifier|public
specifier|default
name|PubNubEndpointProducerBuilder
name|subscribeKey
parameter_list|(
name|String
name|subscribeKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"subscribeKey"
argument_list|,
name|subscribeKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the PubNub component.      */
DECL|interface|AdvancedPubNubEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedPubNubEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|public
specifier|default
name|PubNubEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|PubNubEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedPubNubEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedPubNubEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a Pubnub client in the registry.          * The option is a<code>com.pubnub.api.PubNub</code> type.          * @group advanced          */
DECL|method|pubnub ( Object pubnub)
specifier|public
specifier|default
name|AdvancedPubNubEndpointProducerBuilder
name|pubnub
parameter_list|(
name|Object
name|pubnub
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pubnub"
argument_list|,
name|pubnub
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a Pubnub client in the registry.          * The option will be converted to a<code>com.pubnub.api.PubNub</code>          * type.          * @group advanced          */
DECL|method|pubnub ( String pubnub)
specifier|public
specifier|default
name|AdvancedPubNubEndpointProducerBuilder
name|pubnub
parameter_list|(
name|String
name|pubnub
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pubnub"
argument_list|,
name|pubnub
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|public
specifier|default
name|AdvancedPubNubEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|public
specifier|default
name|AdvancedPubNubEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the PubNub component.      */
DECL|interface|PubNubEndpointBuilder
specifier|public
specifier|static
interface|interface
name|PubNubEndpointBuilder
extends|extends
name|PubNubEndpointConsumerBuilder
extends|,
name|PubNubEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|public
specifier|default
name|AdvancedPubNubEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedPubNubEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The channel used for subscribing/publishing events.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|channel (String channel)
specifier|public
specifier|default
name|PubNubEndpointBuilder
name|channel
parameter_list|(
name|String
name|channel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"channel"
argument_list|,
name|channel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * UUID to be used as a device identifier, a default UUID is generated          * if not passed.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|uuid (String uuid)
specifier|public
specifier|default
name|PubNubEndpointBuilder
name|uuid
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"uuid"
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If Access Manager is utilized, client will use this authKey in all          * restricted requests.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|authKey (String authKey)
specifier|public
specifier|default
name|PubNubEndpointBuilder
name|authKey
parameter_list|(
name|String
name|authKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"authKey"
argument_list|,
name|authKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If cipher is passed, all communicatons to/from PubNub will be          * encrypted.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|cipherKey (String cipherKey)
specifier|public
specifier|default
name|PubNubEndpointBuilder
name|cipherKey
parameter_list|(
name|String
name|cipherKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"cipherKey"
argument_list|,
name|cipherKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The publish key obtained from your PubNub account. Required when          * publishing messages.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|publishKey (String publishKey)
specifier|public
specifier|default
name|PubNubEndpointBuilder
name|publishKey
parameter_list|(
name|String
name|publishKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"publishKey"
argument_list|,
name|publishKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The secret key used for message signing.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|secretKey (String secretKey)
specifier|public
specifier|default
name|PubNubEndpointBuilder
name|secretKey
parameter_list|(
name|String
name|secretKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secretKey"
argument_list|,
name|secretKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use SSL for secure transmission.          * The option is a<code>boolean</code> type.          * @group security          */
DECL|method|secure (boolean secure)
specifier|public
specifier|default
name|PubNubEndpointBuilder
name|secure
parameter_list|(
name|boolean
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use SSL for secure transmission.          * The option will be converted to a<code>boolean</code> type.          * @group security          */
DECL|method|secure (String secure)
specifier|public
specifier|default
name|PubNubEndpointBuilder
name|secure
parameter_list|(
name|String
name|secure
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secure"
argument_list|,
name|secure
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The subscribe key obtained from your PubNub account. Required when          * subscribing to channels or listening for presence events.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|subscribeKey (String subscribeKey)
specifier|public
specifier|default
name|PubNubEndpointBuilder
name|subscribeKey
parameter_list|(
name|String
name|subscribeKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"subscribeKey"
argument_list|,
name|subscribeKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the PubNub component.      */
DECL|interface|AdvancedPubNubEndpointBuilder
specifier|public
specifier|static
interface|interface
name|AdvancedPubNubEndpointBuilder
extends|extends
name|AdvancedPubNubEndpointConsumerBuilder
extends|,
name|AdvancedPubNubEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|public
specifier|default
name|PubNubEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|PubNubEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedPubNubEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedPubNubEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a Pubnub client in the registry.          * The option is a<code>com.pubnub.api.PubNub</code> type.          * @group advanced          */
DECL|method|pubnub (Object pubnub)
specifier|public
specifier|default
name|AdvancedPubNubEndpointBuilder
name|pubnub
parameter_list|(
name|Object
name|pubnub
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pubnub"
argument_list|,
name|pubnub
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a Pubnub client in the registry.          * The option will be converted to a<code>com.pubnub.api.PubNub</code>          * type.          * @group advanced          */
DECL|method|pubnub (String pubnub)
specifier|public
specifier|default
name|AdvancedPubNubEndpointBuilder
name|pubnub
parameter_list|(
name|String
name|pubnub
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pubnub"
argument_list|,
name|pubnub
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|public
specifier|default
name|AdvancedPubNubEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|public
specifier|default
name|AdvancedPubNubEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * To send and receive messages to PubNub data stream network for connected      * devices. Creates a builder to build endpoints for the PubNub component.      */
DECL|method|pubNub (String path)
specifier|public
specifier|default
name|PubNubEndpointBuilder
name|pubNub
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|PubNubEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|PubNubEndpointBuilder
implements|,
name|AdvancedPubNubEndpointBuilder
block|{
specifier|public
name|PubNubEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"pubnub"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|PubNubEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

