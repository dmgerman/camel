begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PollingConsumerPollStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ScheduledPollConsumerScheduler
import|;
end_import

begin_comment
comment|/**  * The aws-s3 component is used for storing and retrieving objecct from Amazon  * S3 Storage Service.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|S3EndpointBuilderFactory
specifier|public
interface|interface
name|S3EndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the AWS S3 Storage Service component.      */
DECL|interface|S3EndpointConsumerBuilder
specifier|public
interface|interface
name|S3EndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedS3EndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Bucket name or ARN.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|bucketNameOrArn (String bucketNameOrArn)
specifier|default
name|S3EndpointConsumerBuilder
name|bucketNameOrArn
parameter_list|(
name|String
name|bucketNameOrArn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bucketNameOrArn"
argument_list|,
name|bucketNameOrArn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a com.amazonaws.services.s3.AmazonS3 in the registry.          * The option is a<code>com.amazonaws.services.s3.AmazonS3</code> type.          * @group common          */
DECL|method|amazonS3Client (Object amazonS3Client)
specifier|default
name|S3EndpointConsumerBuilder
name|amazonS3Client
parameter_list|(
name|Object
name|amazonS3Client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"amazonS3Client"
argument_list|,
name|amazonS3Client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a com.amazonaws.services.s3.AmazonS3 in the registry.          * The option will be converted to a          *<code>com.amazonaws.services.s3.AmazonS3</code> type.          * @group common          */
DECL|method|amazonS3Client (String amazonS3Client)
specifier|default
name|S3EndpointConsumerBuilder
name|amazonS3Client
parameter_list|(
name|String
name|amazonS3Client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"amazonS3Client"
argument_list|,
name|amazonS3Client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting the autocreation of the bucket.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|autoCreateBucket ( boolean autoCreateBucket)
specifier|default
name|S3EndpointConsumerBuilder
name|autoCreateBucket
parameter_list|(
name|boolean
name|autoCreateBucket
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoCreateBucket"
argument_list|,
name|autoCreateBucket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting the autocreation of the bucket.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|autoCreateBucket ( String autoCreateBucket)
specifier|default
name|S3EndpointConsumerBuilder
name|autoCreateBucket
parameter_list|(
name|String
name|autoCreateBucket
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoCreateBucket"
argument_list|,
name|autoCreateBucket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the S3 client should use path style access.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|pathStyleAccess ( boolean pathStyleAccess)
specifier|default
name|S3EndpointConsumerBuilder
name|pathStyleAccess
parameter_list|(
name|boolean
name|pathStyleAccess
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pathStyleAccess"
argument_list|,
name|pathStyleAccess
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the S3 client should use path style access.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|pathStyleAccess (String pathStyleAccess)
specifier|default
name|S3EndpointConsumerBuilder
name|pathStyleAccess
parameter_list|(
name|String
name|pathStyleAccess
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pathStyleAccess"
argument_list|,
name|pathStyleAccess
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The policy for this queue to set in the          * com.amazonaws.services.s3.AmazonS3#setBucketPolicy() method.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|policy (String policy)
specifier|default
name|S3EndpointConsumerBuilder
name|policy
parameter_list|(
name|String
name|policy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"policy"
argument_list|,
name|policy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To define a proxy host when instantiating the SQS client.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|proxyHost (String proxyHost)
specifier|default
name|S3EndpointConsumerBuilder
name|proxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyHost"
argument_list|,
name|proxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify a proxy port to be used inside the client definition.          * The option is a<code>java.lang.Integer</code> type.          * @group common          */
DECL|method|proxyPort (Integer proxyPort)
specifier|default
name|S3EndpointConsumerBuilder
name|proxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify a proxy port to be used inside the client definition.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group common          */
DECL|method|proxyPort (String proxyPort)
specifier|default
name|S3EndpointConsumerBuilder
name|proxyPort
parameter_list|(
name|String
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The region in which S3 client needs to work.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|region (String region)
specifier|default
name|S3EndpointConsumerBuilder
name|region
parameter_list|(
name|String
name|region
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"region"
argument_list|,
name|region
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set whether the S3 client should expect to load credentials on an EC2          * instance or to expect static credentials to be passed in.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|useIAMCredentials ( boolean useIAMCredentials)
specifier|default
name|S3EndpointConsumerBuilder
name|useIAMCredentials
parameter_list|(
name|boolean
name|useIAMCredentials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useIAMCredentials"
argument_list|,
name|useIAMCredentials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set whether the S3 client should expect to load credentials on an EC2          * instance or to expect static credentials to be passed in.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|useIAMCredentials ( String useIAMCredentials)
specifier|default
name|S3EndpointConsumerBuilder
name|useIAMCredentials
parameter_list|(
name|String
name|useIAMCredentials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useIAMCredentials"
argument_list|,
name|useIAMCredentials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|S3EndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|S3EndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delete objects from S3 after they have been retrieved. The delete is          * only performed if the Exchange is committed. If a rollback occurs,          * the object is not deleted. If this option is false, then the same          * objects will be retrieve over and over again on the polls. Therefore          * you need to use the Idempotent Consumer EIP in the route to filter          * out duplicates. You can filter using the S3Constants#BUCKET_NAME and          * S3Constants#KEY headers, or only the S3Constants#KEY header.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|deleteAfterRead ( boolean deleteAfterRead)
specifier|default
name|S3EndpointConsumerBuilder
name|deleteAfterRead
parameter_list|(
name|boolean
name|deleteAfterRead
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deleteAfterRead"
argument_list|,
name|deleteAfterRead
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delete objects from S3 after they have been retrieved. The delete is          * only performed if the Exchange is committed. If a rollback occurs,          * the object is not deleted. If this option is false, then the same          * objects will be retrieve over and over again on the polls. Therefore          * you need to use the Idempotent Consumer EIP in the route to filter          * out duplicates. You can filter using the S3Constants#BUCKET_NAME and          * S3Constants#KEY headers, or only the S3Constants#KEY header.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|deleteAfterRead (String deleteAfterRead)
specifier|default
name|S3EndpointConsumerBuilder
name|deleteAfterRead
parameter_list|(
name|String
name|deleteAfterRead
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deleteAfterRead"
argument_list|,
name|deleteAfterRead
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The delimiter which is used in the          * com.amazonaws.services.s3.model.ListObjectsRequest to only consume          * objects we are interested in.          * The option is a<code>java.lang.String</code> type.          * @group consumer          */
DECL|method|delimiter (String delimiter)
specifier|default
name|S3EndpointConsumerBuilder
name|delimiter
parameter_list|(
name|String
name|delimiter
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delimiter"
argument_list|,
name|delimiter
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To get the object from the bucket with the given file name.          * The option is a<code>java.lang.String</code> type.          * @group consumer          */
DECL|method|fileName (String fileName)
specifier|default
name|S3EndpointConsumerBuilder
name|fileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"fileName"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If it is true, the exchange body will be set to a stream to the          * contents of the file. If false, the headers will be set with the S3          * object metadata, but the body will be null. This option is strongly          * related to autocloseBody option. In case of setting includeBody to          * true and autocloseBody to false, it will be up to the caller to close          * the S3Object stream. Setting autocloseBody to true, will close the          * S3Object stream automatically.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|includeBody (boolean includeBody)
specifier|default
name|S3EndpointConsumerBuilder
name|includeBody
parameter_list|(
name|boolean
name|includeBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"includeBody"
argument_list|,
name|includeBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If it is true, the exchange body will be set to a stream to the          * contents of the file. If false, the headers will be set with the S3          * object metadata, but the body will be null. This option is strongly          * related to autocloseBody option. In case of setting includeBody to          * true and autocloseBody to false, it will be up to the caller to close          * the S3Object stream. Setting autocloseBody to true, will close the          * S3Object stream automatically.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|includeBody (String includeBody)
specifier|default
name|S3EndpointConsumerBuilder
name|includeBody
parameter_list|(
name|String
name|includeBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"includeBody"
argument_list|,
name|includeBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the maxConnections parameter in the S3 client configuration.          * The option is a<code>int</code> type.          * @group consumer          */
DECL|method|maxConnections (int maxConnections)
specifier|default
name|S3EndpointConsumerBuilder
name|maxConnections
parameter_list|(
name|int
name|maxConnections
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxConnections"
argument_list|,
name|maxConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set the maxConnections parameter in the S3 client configuration.          * The option will be converted to a<code>int</code> type.          * @group consumer          */
DECL|method|maxConnections (String maxConnections)
specifier|default
name|S3EndpointConsumerBuilder
name|maxConnections
parameter_list|(
name|String
name|maxConnections
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxConnections"
argument_list|,
name|maxConnections
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Gets the maximum number of messages as a limit to poll at each          * polling. Is default unlimited, but use 0 or negative number to          * disable it as unlimited.          * The option is a<code>int</code> type.          * @group consumer          */
DECL|method|maxMessagesPerPoll ( int maxMessagesPerPoll)
specifier|default
name|S3EndpointConsumerBuilder
name|maxMessagesPerPoll
parameter_list|(
name|int
name|maxMessagesPerPoll
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxMessagesPerPoll"
argument_list|,
name|maxMessagesPerPoll
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Gets the maximum number of messages as a limit to poll at each          * polling. Is default unlimited, but use 0 or negative number to          * disable it as unlimited.          * The option will be converted to a<code>int</code> type.          * @group consumer          */
DECL|method|maxMessagesPerPoll ( String maxMessagesPerPoll)
specifier|default
name|S3EndpointConsumerBuilder
name|maxMessagesPerPoll
parameter_list|(
name|String
name|maxMessagesPerPoll
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"maxMessagesPerPoll"
argument_list|,
name|maxMessagesPerPoll
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The prefix which is used in the          * com.amazonaws.services.s3.model.ListObjectsRequest to only consume          * objects we are interested in.          * The option is a<code>java.lang.String</code> type.          * @group consumer          */
DECL|method|prefix (String prefix)
specifier|default
name|S3EndpointConsumerBuilder
name|prefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"prefix"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          * The option is a<code>boolean</code> type.          * @group consumer          */
DECL|method|sendEmptyMessageWhenIdle ( boolean sendEmptyMessageWhenIdle)
specifier|default
name|S3EndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|boolean
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          * The option will be converted to a<code>boolean</code> type.          * @group consumer          */
DECL|method|sendEmptyMessageWhenIdle ( String sendEmptyMessageWhenIdle)
specifier|default
name|S3EndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|String
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          * The option is a<code>int</code> type.          * @group scheduler          */
DECL|method|backoffErrorThreshold ( int backoffErrorThreshold)
specifier|default
name|S3EndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|int
name|backoffErrorThreshold
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          * The option will be converted to a<code>int</code> type.          * @group scheduler          */
DECL|method|backoffErrorThreshold ( String backoffErrorThreshold)
specifier|default
name|S3EndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|String
name|backoffErrorThreshold
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          * The option is a<code>int</code> type.          * @group scheduler          */
DECL|method|backoffIdleThreshold ( int backoffIdleThreshold)
specifier|default
name|S3EndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|int
name|backoffIdleThreshold
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          * The option will be converted to a<code>int</code> type.          * @group scheduler          */
DECL|method|backoffIdleThreshold ( String backoffIdleThreshold)
specifier|default
name|S3EndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|String
name|backoffIdleThreshold
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          * The option is a<code>int</code> type.          * @group scheduler          */
DECL|method|backoffMultiplier ( int backoffMultiplier)
specifier|default
name|S3EndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|int
name|backoffMultiplier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          * The option will be converted to a<code>int</code> type.          * @group scheduler          */
DECL|method|backoffMultiplier ( String backoffMultiplier)
specifier|default
name|S3EndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|String
name|backoffMultiplier
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          * The option is a<code>long</code> type.          * @group scheduler          */
DECL|method|delay (long delay)
specifier|default
name|S3EndpointConsumerBuilder
name|delay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          * The option will be converted to a<code>long</code> type.          * @group scheduler          */
DECL|method|delay (String delay)
specifier|default
name|S3EndpointConsumerBuilder
name|delay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          * The option is a<code>boolean</code> type.          * @group scheduler          */
DECL|method|greedy (boolean greedy)
specifier|default
name|S3EndpointConsumerBuilder
name|greedy
parameter_list|(
name|boolean
name|greedy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          * The option will be converted to a<code>boolean</code> type.          * @group scheduler          */
DECL|method|greedy (String greedy)
specifier|default
name|S3EndpointConsumerBuilder
name|greedy
parameter_list|(
name|String
name|greedy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          * The option is a<code>long</code> type.          * @group scheduler          */
DECL|method|initialDelay (long initialDelay)
specifier|default
name|S3EndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|long
name|initialDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          * The option will be converted to a<code>long</code> type.          * @group scheduler          */
DECL|method|initialDelay (String initialDelay)
specifier|default
name|S3EndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|String
name|initialDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          * The option is a<code>org.apache.camel.LoggingLevel</code> type.          * @group scheduler          */
DECL|method|runLoggingLevel ( LoggingLevel runLoggingLevel)
specifier|default
name|S3EndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|LoggingLevel
name|runLoggingLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          * @group scheduler          */
DECL|method|runLoggingLevel (String runLoggingLevel)
specifier|default
name|S3EndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|String
name|runLoggingLevel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          * The option is a          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          * @group scheduler          */
DECL|method|scheduledExecutorService ( ScheduledExecutorService scheduledExecutorService)
specifier|default
name|S3EndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|ScheduledExecutorService
name|scheduledExecutorService
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          * The option will be converted to a          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          * @group scheduler          */
DECL|method|scheduledExecutorService ( String scheduledExecutorService)
specifier|default
name|S3EndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|String
name|scheduledExecutorService
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a cron scheduler from either camel-spring or camel-quartz2          * component.          * The option is a          *<code>org.apache.camel.spi.ScheduledPollConsumerScheduler</code>          * type.          * @group scheduler          */
DECL|method|scheduler ( ScheduledPollConsumerScheduler scheduler)
specifier|default
name|S3EndpointConsumerBuilder
name|scheduler
parameter_list|(
name|ScheduledPollConsumerScheduler
name|scheduler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scheduler"
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a cron scheduler from either camel-spring or camel-quartz2          * component.          * The option will be converted to a          *<code>org.apache.camel.spi.ScheduledPollConsumerScheduler</code>          * type.          * @group scheduler          */
DECL|method|scheduler (String scheduler)
specifier|default
name|S3EndpointConsumerBuilder
name|scheduler
parameter_list|(
name|String
name|scheduler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"scheduler"
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz2, Spring based scheduler.          * The option is a<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          * @group scheduler          */
DECL|method|schedulerProperties ( Map<String, Object> schedulerProperties)
specifier|default
name|S3EndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|schedulerProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz2, Spring based scheduler.          * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          * @group scheduler          */
DECL|method|schedulerProperties ( String schedulerProperties)
specifier|default
name|S3EndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|String
name|schedulerProperties
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          * The option is a<code>boolean</code> type.          * @group scheduler          */
DECL|method|startScheduler (boolean startScheduler)
specifier|default
name|S3EndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|boolean
name|startScheduler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          * The option will be converted to a<code>boolean</code> type.          * @group scheduler          */
DECL|method|startScheduler (String startScheduler)
specifier|default
name|S3EndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|String
name|startScheduler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          * The option is a<code>java.util.concurrent.TimeUnit</code> type.          * @group scheduler          */
DECL|method|timeUnit (TimeUnit timeUnit)
specifier|default
name|S3EndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          * The option will be converted to a          *<code>java.util.concurrent.TimeUnit</code> type.          * @group scheduler          */
DECL|method|timeUnit (String timeUnit)
specifier|default
name|S3EndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|String
name|timeUnit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          * The option is a<code>boolean</code> type.          * @group scheduler          */
DECL|method|useFixedDelay (boolean useFixedDelay)
specifier|default
name|S3EndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|boolean
name|useFixedDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          * The option will be converted to a<code>boolean</code> type.          * @group scheduler          */
DECL|method|useFixedDelay (String useFixedDelay)
specifier|default
name|S3EndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|String
name|useFixedDelay
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Access Key.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|accessKey (String accessKey)
specifier|default
name|S3EndpointConsumerBuilder
name|accessKey
parameter_list|(
name|String
name|accessKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessKey"
argument_list|,
name|accessKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Secret Key.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|secretKey (String secretKey)
specifier|default
name|S3EndpointConsumerBuilder
name|secretKey
parameter_list|(
name|String
name|secretKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secretKey"
argument_list|,
name|secretKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the AWS S3 Storage Service      * component.      */
DECL|interface|AdvancedS3EndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedS3EndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|S3EndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|S3EndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The encryption materials to use in case of Symmetric/Asymmetric          * client usage.          * The option is a          *<code>com.amazonaws.services.s3.model.EncryptionMaterials</code>          * type.          * @group common (advanced)          */
DECL|method|encryptionMaterials ( Object encryptionMaterials)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|encryptionMaterials
parameter_list|(
name|Object
name|encryptionMaterials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptionMaterials"
argument_list|,
name|encryptionMaterials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The encryption materials to use in case of Symmetric/Asymmetric          * client usage.          * The option will be converted to a          *<code>com.amazonaws.services.s3.model.EncryptionMaterials</code>          * type.          * @group common (advanced)          */
DECL|method|encryptionMaterials ( String encryptionMaterials)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|encryptionMaterials
parameter_list|(
name|String
name|encryptionMaterials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptionMaterials"
argument_list|,
name|encryptionMaterials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if encryption must be used or not.          * The option is a<code>boolean</code> type.          * @group common (advanced)          */
DECL|method|useEncryption ( boolean useEncryption)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|useEncryption
parameter_list|(
name|boolean
name|useEncryption
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useEncryption"
argument_list|,
name|useEncryption
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if encryption must be used or not.          * The option will be converted to a<code>boolean</code> type.          * @group common (advanced)          */
DECL|method|useEncryption ( String useEncryption)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|useEncryption
parameter_list|(
name|String
name|useEncryption
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useEncryption"
argument_list|,
name|useEncryption
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is true and includeBody is true, then the          * S3Object.close() method will be called on exchange completion. This          * option is strongly related to includeBody option. In case of setting          * includeBody to true and autocloseBody to false, it will be up to the          * caller to close the S3Object stream. Setting autocloseBody to true,          * will close the S3Object stream automatically.          * The option is a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|autocloseBody ( boolean autocloseBody)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|autocloseBody
parameter_list|(
name|boolean
name|autocloseBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autocloseBody"
argument_list|,
name|autocloseBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If this option is true and includeBody is true, then the          * S3Object.close() method will be called on exchange completion. This          * option is strongly related to includeBody option. In case of setting          * includeBody to true and autocloseBody to false, it will be up to the          * caller to close the S3Object stream. Setting autocloseBody to true,          * will close the S3Object stream automatically.          * The option will be converted to a<code>boolean</code> type.          * @group consumer (advanced)          */
DECL|method|autocloseBody ( String autocloseBody)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|autocloseBody
parameter_list|(
name|String
name|autocloseBody
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autocloseBody"
argument_list|,
name|autocloseBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option is a<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          * @group consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option is a<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          * @group consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          * The option is a          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          * @group consumer (advanced)          */
DECL|method|pollStrategy ( PollingConsumerPollStrategy pollStrategy)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|PollingConsumerPollStrategy
name|pollStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          * The option will be converted to a          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          * @group consumer (advanced)          */
DECL|method|pollStrategy ( String pollStrategy)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|String
name|pollStrategy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Accelerate Mode enabled is true or false.          * The option is a<code>boolean</code> type.          * @group  advanced          */
DECL|method|accelerateModeEnabled ( boolean accelerateModeEnabled)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|accelerateModeEnabled
parameter_list|(
name|boolean
name|accelerateModeEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accelerateModeEnabled"
argument_list|,
name|accelerateModeEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Accelerate Mode enabled is true or false.          * The option will be converted to a<code>boolean</code> type.          * @group  advanced          */
DECL|method|accelerateModeEnabled ( String accelerateModeEnabled)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|accelerateModeEnabled
parameter_list|(
name|String
name|accelerateModeEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accelerateModeEnabled"
argument_list|,
name|accelerateModeEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if disabled Chunked Encoding is true or false.          * The option is a<code>boolean</code> type.          * @group  advanced          */
DECL|method|chunkedEncodingDisabled ( boolean chunkedEncodingDisabled)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|chunkedEncodingDisabled
parameter_list|(
name|boolean
name|chunkedEncodingDisabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"chunkedEncodingDisabled"
argument_list|,
name|chunkedEncodingDisabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if disabled Chunked Encoding is true or false.          * The option will be converted to a<code>boolean</code> type.          * @group  advanced          */
DECL|method|chunkedEncodingDisabled ( String chunkedEncodingDisabled)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|chunkedEncodingDisabled
parameter_list|(
name|String
name|chunkedEncodingDisabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"chunkedEncodingDisabled"
argument_list|,
name|chunkedEncodingDisabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Dualstack enabled is true or false.          * The option is a<code>boolean</code> type.          * @group  advanced          */
DECL|method|dualstackEnabled ( boolean dualstackEnabled)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|dualstackEnabled
parameter_list|(
name|boolean
name|dualstackEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dualstackEnabled"
argument_list|,
name|dualstackEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Dualstack enabled is true or false.          * The option will be converted to a<code>boolean</code> type.          * @group  advanced          */
DECL|method|dualstackEnabled ( String dualstackEnabled)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|dualstackEnabled
parameter_list|(
name|String
name|dualstackEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dualstackEnabled"
argument_list|,
name|dualstackEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Force Global Bucket Access enabled is true or false.          * The option is a<code>boolean</code> type.          * @group  advanced          */
DECL|method|forceGlobalBucketAccessEnabled ( boolean forceGlobalBucketAccessEnabled)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|forceGlobalBucketAccessEnabled
parameter_list|(
name|boolean
name|forceGlobalBucketAccessEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"forceGlobalBucketAccessEnabled"
argument_list|,
name|forceGlobalBucketAccessEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Force Global Bucket Access enabled is true or false.          * The option will be converted to a<code>boolean</code> type.          * @group  advanced          */
DECL|method|forceGlobalBucketAccessEnabled ( String forceGlobalBucketAccessEnabled)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|forceGlobalBucketAccessEnabled
parameter_list|(
name|String
name|forceGlobalBucketAccessEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"forceGlobalBucketAccessEnabled"
argument_list|,
name|forceGlobalBucketAccessEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Payload Signing enabled is true or false.          * The option is a<code>boolean</code> type.          * @group  advanced          */
DECL|method|payloadSigningEnabled ( boolean payloadSigningEnabled)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|payloadSigningEnabled
parameter_list|(
name|boolean
name|payloadSigningEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"payloadSigningEnabled"
argument_list|,
name|payloadSigningEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Payload Signing enabled is true or false.          * The option will be converted to a<code>boolean</code> type.          * @group  advanced          */
DECL|method|payloadSigningEnabled ( String payloadSigningEnabled)
specifier|default
name|AdvancedS3EndpointConsumerBuilder
name|payloadSigningEnabled
parameter_list|(
name|String
name|payloadSigningEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"payloadSigningEnabled"
argument_list|,
name|payloadSigningEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the AWS S3 Storage Service component.      */
DECL|interface|S3EndpointProducerBuilder
specifier|public
interface|interface
name|S3EndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedS3EndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Bucket name or ARN.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|bucketNameOrArn (String bucketNameOrArn)
specifier|default
name|S3EndpointProducerBuilder
name|bucketNameOrArn
parameter_list|(
name|String
name|bucketNameOrArn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bucketNameOrArn"
argument_list|,
name|bucketNameOrArn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a com.amazonaws.services.s3.AmazonS3 in the registry.          * The option is a<code>com.amazonaws.services.s3.AmazonS3</code> type.          * @group common          */
DECL|method|amazonS3Client (Object amazonS3Client)
specifier|default
name|S3EndpointProducerBuilder
name|amazonS3Client
parameter_list|(
name|Object
name|amazonS3Client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"amazonS3Client"
argument_list|,
name|amazonS3Client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a com.amazonaws.services.s3.AmazonS3 in the registry.          * The option will be converted to a          *<code>com.amazonaws.services.s3.AmazonS3</code> type.          * @group common          */
DECL|method|amazonS3Client (String amazonS3Client)
specifier|default
name|S3EndpointProducerBuilder
name|amazonS3Client
parameter_list|(
name|String
name|amazonS3Client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"amazonS3Client"
argument_list|,
name|amazonS3Client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting the autocreation of the bucket.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|autoCreateBucket ( boolean autoCreateBucket)
specifier|default
name|S3EndpointProducerBuilder
name|autoCreateBucket
parameter_list|(
name|boolean
name|autoCreateBucket
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoCreateBucket"
argument_list|,
name|autoCreateBucket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting the autocreation of the bucket.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|autoCreateBucket ( String autoCreateBucket)
specifier|default
name|S3EndpointProducerBuilder
name|autoCreateBucket
parameter_list|(
name|String
name|autoCreateBucket
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoCreateBucket"
argument_list|,
name|autoCreateBucket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the S3 client should use path style access.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|pathStyleAccess ( boolean pathStyleAccess)
specifier|default
name|S3EndpointProducerBuilder
name|pathStyleAccess
parameter_list|(
name|boolean
name|pathStyleAccess
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pathStyleAccess"
argument_list|,
name|pathStyleAccess
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the S3 client should use path style access.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|pathStyleAccess (String pathStyleAccess)
specifier|default
name|S3EndpointProducerBuilder
name|pathStyleAccess
parameter_list|(
name|String
name|pathStyleAccess
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pathStyleAccess"
argument_list|,
name|pathStyleAccess
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The policy for this queue to set in the          * com.amazonaws.services.s3.AmazonS3#setBucketPolicy() method.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|policy (String policy)
specifier|default
name|S3EndpointProducerBuilder
name|policy
parameter_list|(
name|String
name|policy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"policy"
argument_list|,
name|policy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To define a proxy host when instantiating the SQS client.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|proxyHost (String proxyHost)
specifier|default
name|S3EndpointProducerBuilder
name|proxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyHost"
argument_list|,
name|proxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify a proxy port to be used inside the client definition.          * The option is a<code>java.lang.Integer</code> type.          * @group common          */
DECL|method|proxyPort (Integer proxyPort)
specifier|default
name|S3EndpointProducerBuilder
name|proxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify a proxy port to be used inside the client definition.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group common          */
DECL|method|proxyPort (String proxyPort)
specifier|default
name|S3EndpointProducerBuilder
name|proxyPort
parameter_list|(
name|String
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The region in which S3 client needs to work.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|region (String region)
specifier|default
name|S3EndpointProducerBuilder
name|region
parameter_list|(
name|String
name|region
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"region"
argument_list|,
name|region
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set whether the S3 client should expect to load credentials on an EC2          * instance or to expect static credentials to be passed in.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|useIAMCredentials ( boolean useIAMCredentials)
specifier|default
name|S3EndpointProducerBuilder
name|useIAMCredentials
parameter_list|(
name|boolean
name|useIAMCredentials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useIAMCredentials"
argument_list|,
name|useIAMCredentials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set whether the S3 client should expect to load credentials on an EC2          * instance or to expect static credentials to be passed in.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|useIAMCredentials ( String useIAMCredentials)
specifier|default
name|S3EndpointProducerBuilder
name|useIAMCredentials
parameter_list|(
name|String
name|useIAMCredentials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useIAMCredentials"
argument_list|,
name|useIAMCredentials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delete file object after the S3 file has been uploaded.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|deleteAfterWrite ( boolean deleteAfterWrite)
specifier|default
name|S3EndpointProducerBuilder
name|deleteAfterWrite
parameter_list|(
name|boolean
name|deleteAfterWrite
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deleteAfterWrite"
argument_list|,
name|deleteAfterWrite
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delete file object after the S3 file has been uploaded.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|deleteAfterWrite ( String deleteAfterWrite)
specifier|default
name|S3EndpointProducerBuilder
name|deleteAfterWrite
parameter_list|(
name|String
name|deleteAfterWrite
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"deleteAfterWrite"
argument_list|,
name|deleteAfterWrite
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|S3EndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|S3EndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If it is true, camel will upload the file with multi part format, the          * part size is decided by the option of partSize.          * The option is a<code>boolean</code> type.          * @group producer          */
DECL|method|multiPartUpload ( boolean multiPartUpload)
specifier|default
name|S3EndpointProducerBuilder
name|multiPartUpload
parameter_list|(
name|boolean
name|multiPartUpload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"multiPartUpload"
argument_list|,
name|multiPartUpload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If it is true, camel will upload the file with multi part format, the          * part size is decided by the option of partSize.          * The option will be converted to a<code>boolean</code> type.          * @group producer          */
DECL|method|multiPartUpload (String multiPartUpload)
specifier|default
name|S3EndpointProducerBuilder
name|multiPartUpload
parameter_list|(
name|String
name|multiPartUpload
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"multiPartUpload"
argument_list|,
name|multiPartUpload
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The operation to do in case the user don't want to do only an upload.          * The option is a          *<code>org.apache.camel.component.aws.s3.S3Operations</code> type.          * @group producer          */
DECL|method|operation (S3Operations operation)
specifier|default
name|S3EndpointProducerBuilder
name|operation
parameter_list|(
name|S3Operations
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The operation to do in case the user don't want to do only an upload.          * The option will be converted to a          *<code>org.apache.camel.component.aws.s3.S3Operations</code> type.          * @group producer          */
DECL|method|operation (String operation)
specifier|default
name|S3EndpointProducerBuilder
name|operation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"operation"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setup the partSize which is used in multi part upload, the default          * size is 25M.          * The option is a<code>long</code> type.          * @group producer          */
DECL|method|partSize (long partSize)
specifier|default
name|S3EndpointProducerBuilder
name|partSize
parameter_list|(
name|long
name|partSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"partSize"
argument_list|,
name|partSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setup the partSize which is used in multi part upload, the default          * size is 25M.          * The option will be converted to a<code>long</code> type.          * @group producer          */
DECL|method|partSize (String partSize)
specifier|default
name|S3EndpointProducerBuilder
name|partSize
parameter_list|(
name|String
name|partSize
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"partSize"
argument_list|,
name|partSize
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the server-side encryption algorithm when encrypting the object          * using AWS-managed keys. For example use AES256.          * The option is a<code>java.lang.String</code> type.          * @group producer          */
DECL|method|serverSideEncryption ( String serverSideEncryption)
specifier|default
name|S3EndpointProducerBuilder
name|serverSideEncryption
parameter_list|(
name|String
name|serverSideEncryption
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"serverSideEncryption"
argument_list|,
name|serverSideEncryption
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The storage class to set in the          * com.amazonaws.services.s3.model.PutObjectRequest request.          * The option is a<code>java.lang.String</code> type.          * @group producer          */
DECL|method|storageClass (String storageClass)
specifier|default
name|S3EndpointProducerBuilder
name|storageClass
parameter_list|(
name|String
name|storageClass
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"storageClass"
argument_list|,
name|storageClass
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Access Key.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|accessKey (String accessKey)
specifier|default
name|S3EndpointProducerBuilder
name|accessKey
parameter_list|(
name|String
name|accessKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessKey"
argument_list|,
name|accessKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Secret Key.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|secretKey (String secretKey)
specifier|default
name|S3EndpointProducerBuilder
name|secretKey
parameter_list|(
name|String
name|secretKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secretKey"
argument_list|,
name|secretKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the AWS S3 Storage Service      * component.      */
DECL|interface|AdvancedS3EndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedS3EndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|S3EndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|S3EndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The encryption materials to use in case of Symmetric/Asymmetric          * client usage.          * The option is a          *<code>com.amazonaws.services.s3.model.EncryptionMaterials</code>          * type.          * @group common (advanced)          */
DECL|method|encryptionMaterials ( Object encryptionMaterials)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|encryptionMaterials
parameter_list|(
name|Object
name|encryptionMaterials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptionMaterials"
argument_list|,
name|encryptionMaterials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The encryption materials to use in case of Symmetric/Asymmetric          * client usage.          * The option will be converted to a          *<code>com.amazonaws.services.s3.model.EncryptionMaterials</code>          * type.          * @group common (advanced)          */
DECL|method|encryptionMaterials ( String encryptionMaterials)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|encryptionMaterials
parameter_list|(
name|String
name|encryptionMaterials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptionMaterials"
argument_list|,
name|encryptionMaterials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if encryption must be used or not.          * The option is a<code>boolean</code> type.          * @group common (advanced)          */
DECL|method|useEncryption ( boolean useEncryption)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|useEncryption
parameter_list|(
name|boolean
name|useEncryption
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useEncryption"
argument_list|,
name|useEncryption
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if encryption must be used or not.          * The option will be converted to a<code>boolean</code> type.          * @group common (advanced)          */
DECL|method|useEncryption ( String useEncryption)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|useEncryption
parameter_list|(
name|String
name|useEncryption
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useEncryption"
argument_list|,
name|useEncryption
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define the id of KMS key to use in case KMS is enabled.          * The option is a<code>java.lang.String</code> type.          * @group producer (advanced)          */
DECL|method|awsKMSKeyId (String awsKMSKeyId)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|awsKMSKeyId
parameter_list|(
name|String
name|awsKMSKeyId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"awsKMSKeyId"
argument_list|,
name|awsKMSKeyId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if KMS must be used or not.          * The option is a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|useAwsKMS (boolean useAwsKMS)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|useAwsKMS
parameter_list|(
name|boolean
name|useAwsKMS
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useAwsKMS"
argument_list|,
name|useAwsKMS
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if KMS must be used or not.          * The option will be converted to a<code>boolean</code> type.          * @group producer (advanced)          */
DECL|method|useAwsKMS (String useAwsKMS)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|useAwsKMS
parameter_list|(
name|String
name|useAwsKMS
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useAwsKMS"
argument_list|,
name|useAwsKMS
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Accelerate Mode enabled is true or false.          * The option is a<code>boolean</code> type.          * @group  advanced          */
DECL|method|accelerateModeEnabled ( boolean accelerateModeEnabled)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|accelerateModeEnabled
parameter_list|(
name|boolean
name|accelerateModeEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accelerateModeEnabled"
argument_list|,
name|accelerateModeEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Accelerate Mode enabled is true or false.          * The option will be converted to a<code>boolean</code> type.          * @group  advanced          */
DECL|method|accelerateModeEnabled ( String accelerateModeEnabled)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|accelerateModeEnabled
parameter_list|(
name|String
name|accelerateModeEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accelerateModeEnabled"
argument_list|,
name|accelerateModeEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if disabled Chunked Encoding is true or false.          * The option is a<code>boolean</code> type.          * @group  advanced          */
DECL|method|chunkedEncodingDisabled ( boolean chunkedEncodingDisabled)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|chunkedEncodingDisabled
parameter_list|(
name|boolean
name|chunkedEncodingDisabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"chunkedEncodingDisabled"
argument_list|,
name|chunkedEncodingDisabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if disabled Chunked Encoding is true or false.          * The option will be converted to a<code>boolean</code> type.          * @group  advanced          */
DECL|method|chunkedEncodingDisabled ( String chunkedEncodingDisabled)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|chunkedEncodingDisabled
parameter_list|(
name|String
name|chunkedEncodingDisabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"chunkedEncodingDisabled"
argument_list|,
name|chunkedEncodingDisabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Dualstack enabled is true or false.          * The option is a<code>boolean</code> type.          * @group  advanced          */
DECL|method|dualstackEnabled ( boolean dualstackEnabled)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|dualstackEnabled
parameter_list|(
name|boolean
name|dualstackEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dualstackEnabled"
argument_list|,
name|dualstackEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Dualstack enabled is true or false.          * The option will be converted to a<code>boolean</code> type.          * @group  advanced          */
DECL|method|dualstackEnabled ( String dualstackEnabled)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|dualstackEnabled
parameter_list|(
name|String
name|dualstackEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dualstackEnabled"
argument_list|,
name|dualstackEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Force Global Bucket Access enabled is true or false.          * The option is a<code>boolean</code> type.          * @group  advanced          */
DECL|method|forceGlobalBucketAccessEnabled ( boolean forceGlobalBucketAccessEnabled)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|forceGlobalBucketAccessEnabled
parameter_list|(
name|boolean
name|forceGlobalBucketAccessEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"forceGlobalBucketAccessEnabled"
argument_list|,
name|forceGlobalBucketAccessEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Force Global Bucket Access enabled is true or false.          * The option will be converted to a<code>boolean</code> type.          * @group  advanced          */
DECL|method|forceGlobalBucketAccessEnabled ( String forceGlobalBucketAccessEnabled)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|forceGlobalBucketAccessEnabled
parameter_list|(
name|String
name|forceGlobalBucketAccessEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"forceGlobalBucketAccessEnabled"
argument_list|,
name|forceGlobalBucketAccessEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Payload Signing enabled is true or false.          * The option is a<code>boolean</code> type.          * @group  advanced          */
DECL|method|payloadSigningEnabled ( boolean payloadSigningEnabled)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|payloadSigningEnabled
parameter_list|(
name|boolean
name|payloadSigningEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"payloadSigningEnabled"
argument_list|,
name|payloadSigningEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Payload Signing enabled is true or false.          * The option will be converted to a<code>boolean</code> type.          * @group  advanced          */
DECL|method|payloadSigningEnabled ( String payloadSigningEnabled)
specifier|default
name|AdvancedS3EndpointProducerBuilder
name|payloadSigningEnabled
parameter_list|(
name|String
name|payloadSigningEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"payloadSigningEnabled"
argument_list|,
name|payloadSigningEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the AWS S3 Storage Service component.      */
DECL|interface|S3EndpointBuilder
specifier|public
interface|interface
name|S3EndpointBuilder
extends|extends
name|S3EndpointConsumerBuilder
extends|,
name|S3EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedS3EndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedS3EndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Bucket name or ARN.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|bucketNameOrArn (String bucketNameOrArn)
specifier|default
name|S3EndpointBuilder
name|bucketNameOrArn
parameter_list|(
name|String
name|bucketNameOrArn
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bucketNameOrArn"
argument_list|,
name|bucketNameOrArn
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a com.amazonaws.services.s3.AmazonS3 in the registry.          * The option is a<code>com.amazonaws.services.s3.AmazonS3</code> type.          * @group common          */
DECL|method|amazonS3Client (Object amazonS3Client)
specifier|default
name|S3EndpointBuilder
name|amazonS3Client
parameter_list|(
name|Object
name|amazonS3Client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"amazonS3Client"
argument_list|,
name|amazonS3Client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Reference to a com.amazonaws.services.s3.AmazonS3 in the registry.          * The option will be converted to a          *<code>com.amazonaws.services.s3.AmazonS3</code> type.          * @group common          */
DECL|method|amazonS3Client (String amazonS3Client)
specifier|default
name|S3EndpointBuilder
name|amazonS3Client
parameter_list|(
name|String
name|amazonS3Client
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"amazonS3Client"
argument_list|,
name|amazonS3Client
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting the autocreation of the bucket.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|autoCreateBucket (boolean autoCreateBucket)
specifier|default
name|S3EndpointBuilder
name|autoCreateBucket
parameter_list|(
name|boolean
name|autoCreateBucket
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoCreateBucket"
argument_list|,
name|autoCreateBucket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Setting the autocreation of the bucket.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|autoCreateBucket (String autoCreateBucket)
specifier|default
name|S3EndpointBuilder
name|autoCreateBucket
parameter_list|(
name|String
name|autoCreateBucket
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoCreateBucket"
argument_list|,
name|autoCreateBucket
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the S3 client should use path style access.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|pathStyleAccess (boolean pathStyleAccess)
specifier|default
name|S3EndpointBuilder
name|pathStyleAccess
parameter_list|(
name|boolean
name|pathStyleAccess
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pathStyleAccess"
argument_list|,
name|pathStyleAccess
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the S3 client should use path style access.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|pathStyleAccess (String pathStyleAccess)
specifier|default
name|S3EndpointBuilder
name|pathStyleAccess
parameter_list|(
name|String
name|pathStyleAccess
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"pathStyleAccess"
argument_list|,
name|pathStyleAccess
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The policy for this queue to set in the          * com.amazonaws.services.s3.AmazonS3#setBucketPolicy() method.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|policy (String policy)
specifier|default
name|S3EndpointBuilder
name|policy
parameter_list|(
name|String
name|policy
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"policy"
argument_list|,
name|policy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To define a proxy host when instantiating the SQS client.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|proxyHost (String proxyHost)
specifier|default
name|S3EndpointBuilder
name|proxyHost
parameter_list|(
name|String
name|proxyHost
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyHost"
argument_list|,
name|proxyHost
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify a proxy port to be used inside the client definition.          * The option is a<code>java.lang.Integer</code> type.          * @group common          */
DECL|method|proxyPort (Integer proxyPort)
specifier|default
name|S3EndpointBuilder
name|proxyPort
parameter_list|(
name|Integer
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specify a proxy port to be used inside the client definition.          * The option will be converted to a<code>java.lang.Integer</code>          * type.          * @group common          */
DECL|method|proxyPort (String proxyPort)
specifier|default
name|S3EndpointBuilder
name|proxyPort
parameter_list|(
name|String
name|proxyPort
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"proxyPort"
argument_list|,
name|proxyPort
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The region in which S3 client needs to work.          * The option is a<code>java.lang.String</code> type.          * @group common          */
DECL|method|region (String region)
specifier|default
name|S3EndpointBuilder
name|region
parameter_list|(
name|String
name|region
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"region"
argument_list|,
name|region
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set whether the S3 client should expect to load credentials on an EC2          * instance or to expect static credentials to be passed in.          * The option is a<code>boolean</code> type.          * @group common          */
DECL|method|useIAMCredentials (boolean useIAMCredentials)
specifier|default
name|S3EndpointBuilder
name|useIAMCredentials
parameter_list|(
name|boolean
name|useIAMCredentials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useIAMCredentials"
argument_list|,
name|useIAMCredentials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set whether the S3 client should expect to load credentials on an EC2          * instance or to expect static credentials to be passed in.          * The option will be converted to a<code>boolean</code> type.          * @group common          */
DECL|method|useIAMCredentials (String useIAMCredentials)
specifier|default
name|S3EndpointBuilder
name|useIAMCredentials
parameter_list|(
name|String
name|useIAMCredentials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useIAMCredentials"
argument_list|,
name|useIAMCredentials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Access Key.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|accessKey (String accessKey)
specifier|default
name|S3EndpointBuilder
name|accessKey
parameter_list|(
name|String
name|accessKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accessKey"
argument_list|,
name|accessKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Amazon AWS Secret Key.          * The option is a<code>java.lang.String</code> type.          * @group security          */
DECL|method|secretKey (String secretKey)
specifier|default
name|S3EndpointBuilder
name|secretKey
parameter_list|(
name|String
name|secretKey
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"secretKey"
argument_list|,
name|secretKey
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the AWS S3 Storage Service component.      */
DECL|interface|AdvancedS3EndpointBuilder
specifier|public
interface|interface
name|AdvancedS3EndpointBuilder
extends|extends
name|AdvancedS3EndpointConsumerBuilder
extends|,
name|AdvancedS3EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|S3EndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|S3EndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * The encryption materials to use in case of Symmetric/Asymmetric          * client usage.          * The option is a          *<code>com.amazonaws.services.s3.model.EncryptionMaterials</code>          * type.          * @group common (advanced)          */
DECL|method|encryptionMaterials ( Object encryptionMaterials)
specifier|default
name|AdvancedS3EndpointBuilder
name|encryptionMaterials
parameter_list|(
name|Object
name|encryptionMaterials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptionMaterials"
argument_list|,
name|encryptionMaterials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The encryption materials to use in case of Symmetric/Asymmetric          * client usage.          * The option will be converted to a          *<code>com.amazonaws.services.s3.model.EncryptionMaterials</code>          * type.          * @group common (advanced)          */
DECL|method|encryptionMaterials ( String encryptionMaterials)
specifier|default
name|AdvancedS3EndpointBuilder
name|encryptionMaterials
parameter_list|(
name|String
name|encryptionMaterials
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"encryptionMaterials"
argument_list|,
name|encryptionMaterials
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if encryption must be used or not.          * The option is a<code>boolean</code> type.          * @group common (advanced)          */
DECL|method|useEncryption (boolean useEncryption)
specifier|default
name|AdvancedS3EndpointBuilder
name|useEncryption
parameter_list|(
name|boolean
name|useEncryption
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useEncryption"
argument_list|,
name|useEncryption
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if encryption must be used or not.          * The option will be converted to a<code>boolean</code> type.          * @group common (advanced)          */
DECL|method|useEncryption (String useEncryption)
specifier|default
name|AdvancedS3EndpointBuilder
name|useEncryption
parameter_list|(
name|String
name|useEncryption
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"useEncryption"
argument_list|,
name|useEncryption
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedS3EndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedS3EndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedS3EndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedS3EndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Accelerate Mode enabled is true or false.          * The option is a<code>boolean</code> type.          * @group  advanced          */
DECL|method|accelerateModeEnabled ( boolean accelerateModeEnabled)
specifier|default
name|AdvancedS3EndpointBuilder
name|accelerateModeEnabled
parameter_list|(
name|boolean
name|accelerateModeEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accelerateModeEnabled"
argument_list|,
name|accelerateModeEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Accelerate Mode enabled is true or false.          * The option will be converted to a<code>boolean</code> type.          * @group  advanced          */
DECL|method|accelerateModeEnabled ( String accelerateModeEnabled)
specifier|default
name|AdvancedS3EndpointBuilder
name|accelerateModeEnabled
parameter_list|(
name|String
name|accelerateModeEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"accelerateModeEnabled"
argument_list|,
name|accelerateModeEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if disabled Chunked Encoding is true or false.          * The option is a<code>boolean</code> type.          * @group  advanced          */
DECL|method|chunkedEncodingDisabled ( boolean chunkedEncodingDisabled)
specifier|default
name|AdvancedS3EndpointBuilder
name|chunkedEncodingDisabled
parameter_list|(
name|boolean
name|chunkedEncodingDisabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"chunkedEncodingDisabled"
argument_list|,
name|chunkedEncodingDisabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if disabled Chunked Encoding is true or false.          * The option will be converted to a<code>boolean</code> type.          * @group  advanced          */
DECL|method|chunkedEncodingDisabled ( String chunkedEncodingDisabled)
specifier|default
name|AdvancedS3EndpointBuilder
name|chunkedEncodingDisabled
parameter_list|(
name|String
name|chunkedEncodingDisabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"chunkedEncodingDisabled"
argument_list|,
name|chunkedEncodingDisabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Dualstack enabled is true or false.          * The option is a<code>boolean</code> type.          * @group  advanced          */
DECL|method|dualstackEnabled ( boolean dualstackEnabled)
specifier|default
name|AdvancedS3EndpointBuilder
name|dualstackEnabled
parameter_list|(
name|boolean
name|dualstackEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dualstackEnabled"
argument_list|,
name|dualstackEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Dualstack enabled is true or false.          * The option will be converted to a<code>boolean</code> type.          * @group  advanced          */
DECL|method|dualstackEnabled ( String dualstackEnabled)
specifier|default
name|AdvancedS3EndpointBuilder
name|dualstackEnabled
parameter_list|(
name|String
name|dualstackEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"dualstackEnabled"
argument_list|,
name|dualstackEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Force Global Bucket Access enabled is true or false.          * The option is a<code>boolean</code> type.          * @group  advanced          */
DECL|method|forceGlobalBucketAccessEnabled ( boolean forceGlobalBucketAccessEnabled)
specifier|default
name|AdvancedS3EndpointBuilder
name|forceGlobalBucketAccessEnabled
parameter_list|(
name|boolean
name|forceGlobalBucketAccessEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"forceGlobalBucketAccessEnabled"
argument_list|,
name|forceGlobalBucketAccessEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Force Global Bucket Access enabled is true or false.          * The option will be converted to a<code>boolean</code> type.          * @group  advanced          */
DECL|method|forceGlobalBucketAccessEnabled ( String forceGlobalBucketAccessEnabled)
specifier|default
name|AdvancedS3EndpointBuilder
name|forceGlobalBucketAccessEnabled
parameter_list|(
name|String
name|forceGlobalBucketAccessEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"forceGlobalBucketAccessEnabled"
argument_list|,
name|forceGlobalBucketAccessEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Payload Signing enabled is true or false.          * The option is a<code>boolean</code> type.          * @group  advanced          */
DECL|method|payloadSigningEnabled ( boolean payloadSigningEnabled)
specifier|default
name|AdvancedS3EndpointBuilder
name|payloadSigningEnabled
parameter_list|(
name|boolean
name|payloadSigningEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"payloadSigningEnabled"
argument_list|,
name|payloadSigningEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Define if Payload Signing enabled is true or false.          * The option will be converted to a<code>boolean</code> type.          * @group  advanced          */
DECL|method|payloadSigningEnabled ( String payloadSigningEnabled)
specifier|default
name|AdvancedS3EndpointBuilder
name|payloadSigningEnabled
parameter_list|(
name|String
name|payloadSigningEnabled
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"payloadSigningEnabled"
argument_list|,
name|payloadSigningEnabled
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Proxy enum for      *<code>org.apache.camel.component.aws.s3.S3Operations</code> enum.      */
DECL|enum|S3Operations
enum|enum
name|S3Operations
block|{
DECL|enumConstant|copyObject
name|copyObject
block|,
DECL|enumConstant|listObjects
name|listObjects
block|,
DECL|enumConstant|deleteObject
name|deleteObject
block|,
DECL|enumConstant|deleteBucket
name|deleteBucket
block|,
DECL|enumConstant|listBuckets
name|listBuckets
block|,
DECL|enumConstant|downloadLink
name|downloadLink
block|,
DECL|enumConstant|getObject
name|getObject
block|;     }
comment|/**      * The aws-s3 component is used for storing and retrieving objecct from      * Amazon S3 Storage Service.      * Maven coordinates: org.apache.camel:camel-aws-s3      */
DECL|method|s3 (String path)
specifier|default
name|S3EndpointBuilder
name|s3
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|S3EndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|S3EndpointBuilder
implements|,
name|AdvancedS3EndpointBuilder
block|{
specifier|public
name|S3EndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"aws-s3"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|S3EndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

