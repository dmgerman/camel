begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PollingConsumerPollStrategy
import|;
end_import

begin_comment
comment|/**  * Communicates with OData 4.0 services using Apache Olingo OData API.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|Olingo4EndpointBuilderFactory
specifier|public
interface|interface
name|Olingo4EndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the Olingo4 component.      */
DECL|interface|Olingo4EndpointConsumerBuilder
specifier|public
interface|interface
name|Olingo4EndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedOlingo4EndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedOlingo4EndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * HTTP connection creation timeout in milliseconds, defaults to 30,000          * (30 seconds).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|connectTimeout (int connectTimeout)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|connectTimeout
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP connection creation timeout in milliseconds, defaults to 30,000          * (30 seconds).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|connectTimeout ( String connectTimeout)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|connectTimeout
parameter_list|(
name|String
name|connectTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Content-Type header value can be used to specify JSON or XML message          * format, defaults to application/json;charset=utf-8.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|contentType (String contentType)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|contentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentType"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set this to true to filter out results that have already been          * communicated by this component.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|filterAlreadySeen ( boolean filterAlreadySeen)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|filterAlreadySeen
parameter_list|(
name|boolean
name|filterAlreadySeen
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"filterAlreadySeen"
argument_list|,
name|filterAlreadySeen
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set this to true to filter out results that have already been          * communicated by this component.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|filterAlreadySeen ( String filterAlreadySeen)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|filterAlreadySeen
parameter_list|(
name|String
name|filterAlreadySeen
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"filterAlreadySeen"
argument_list|,
name|filterAlreadySeen
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP async client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          *           * The option is a:          *<code>org.apache.http.impl.nio.client.HttpAsyncClientBuilder</code>          * type.          *           * Group: common          */
DECL|method|httpAsyncClientBuilder ( Object httpAsyncClientBuilder)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|httpAsyncClientBuilder
parameter_list|(
name|Object
name|httpAsyncClientBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpAsyncClientBuilder"
argument_list|,
name|httpAsyncClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP async client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          *           * The option will be converted to a          *<code>org.apache.http.impl.nio.client.HttpAsyncClientBuilder</code>          * type.          *           * Group: common          */
DECL|method|httpAsyncClientBuilder ( String httpAsyncClientBuilder)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|httpAsyncClientBuilder
parameter_list|(
name|String
name|httpAsyncClientBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpAsyncClientBuilder"
argument_list|,
name|httpAsyncClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          *           * The option is a:          *<code>org.apache.http.impl.client.HttpClientBuilder</code> type.          *           * Group: common          */
DECL|method|httpClientBuilder ( Object httpClientBuilder)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|httpClientBuilder
parameter_list|(
name|Object
name|httpClientBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpClientBuilder"
argument_list|,
name|httpClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          *           * The option will be converted to a          *<code>org.apache.http.impl.client.HttpClientBuilder</code> type.          *           * Group: common          */
DECL|method|httpClientBuilder ( String httpClientBuilder)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|httpClientBuilder
parameter_list|(
name|String
name|httpClientBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpClientBuilder"
argument_list|,
name|httpClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP headers to inject into every request, this could include          * OAuth tokens, etc.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.String&gt;</code> type.          *           * Group: common          */
DECL|method|httpHeaders ( Map<String, String> httpHeaders)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|httpHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP headers to inject into every request, this could include          * OAuth tokens, etc.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>          * type.          *           * Group: common          */
DECL|method|httpHeaders (String httpHeaders)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|httpHeaders
parameter_list|(
name|String
name|httpHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|inBody (String inBody)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP proxy server configuration.          *           * The option is a:<code>org.apache.http.HttpHost</code> type.          *           * Group: common          */
DECL|method|proxy (Object proxy)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|proxy
parameter_list|(
name|Object
name|proxy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxy"
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP proxy server configuration.          *           * The option will be converted to a          *<code>org.apache.http.HttpHost</code> type.          *           * Group: common          */
DECL|method|proxy (String proxy)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|proxy
parameter_list|(
name|String
name|proxy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxy"
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Target OData service base URI, e.g.          * http://services.odata.org/OData/OData.svc.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|serviceUri (String serviceUri)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|serviceUri
parameter_list|(
name|String
name|serviceUri
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"serviceUri"
argument_list|,
name|serviceUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP request timeout in milliseconds, defaults to 30,000 (30          * seconds).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|socketTimeout (int socketTimeout)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|socketTimeout
parameter_list|(
name|int
name|socketTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP request timeout in milliseconds, defaults to 30,000 (30          * seconds).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|socketTimeout ( String socketTimeout)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|socketTimeout
parameter_list|(
name|String
name|socketTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: common          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: common          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( boolean sendEmptyMessageWhenIdle)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|boolean
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If the polling consumer did not poll any files, you can enable this          * option to send an empty message (no body) instead.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|sendEmptyMessageWhenIdle ( String sendEmptyMessageWhenIdle)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|sendEmptyMessageWhenIdle
parameter_list|(
name|String
name|sendEmptyMessageWhenIdle
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sendEmptyMessageWhenIdle"
argument_list|,
name|sendEmptyMessageWhenIdle
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * For endpoints that return an array or collection, a consumer endpoint          * will map every element to distinct messages, unless splitResult is          * set to false.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|splitResult (boolean splitResult)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|splitResult
parameter_list|(
name|boolean
name|splitResult
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"splitResult"
argument_list|,
name|splitResult
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * For endpoints that return an array or collection, a consumer endpoint          * will map every element to distinct messages, unless splitResult is          * set to false.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|splitResult (String splitResult)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|splitResult
parameter_list|(
name|String
name|splitResult
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"splitResult"
argument_list|,
name|splitResult
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( int backoffErrorThreshold)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|int
name|backoffErrorThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent error polls (failed due some error) that          * should happen before the backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffErrorThreshold ( String backoffErrorThreshold)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|backoffErrorThreshold
parameter_list|(
name|String
name|backoffErrorThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffErrorThreshold"
argument_list|,
name|backoffErrorThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( int backoffIdleThreshold)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|int
name|backoffIdleThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The number of subsequent idle polls that should happen before the          * backoffMultipler should kick-in.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffIdleThreshold ( String backoffIdleThreshold)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|backoffIdleThreshold
parameter_list|(
name|String
name|backoffIdleThreshold
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffIdleThreshold"
argument_list|,
name|backoffIdleThreshold
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option is a:<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( int backoffMultiplier)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|int
name|backoffMultiplier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the scheduled polling consumer backoff if there has been a          * number of subsequent idles/errors in a row. The multiplier is then          * the number of polls that will be skipped before the next actual          * attempt is happening again. When this option is in use then          * backoffIdleThreshold and/or backoffErrorThreshold must also be          * configured.          *           * The option will be converted to a<code>int</code> type.          *           * Group: scheduler          */
DECL|method|backoffMultiplier ( String backoffMultiplier)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|backoffMultiplier
parameter_list|(
name|String
name|backoffMultiplier
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"backoffMultiplier"
argument_list|,
name|backoffMultiplier
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (long delay)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|delay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the next poll. You can also specify time values          * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|delay (String delay)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|delay
parameter_list|(
name|String
name|delay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy (boolean greedy)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|greedy
parameter_list|(
name|boolean
name|greedy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * If greedy is enabled, then the ScheduledPollConsumer will run          * immediately again, if the previous run polled 1 or more messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|greedy (String greedy)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|greedy
parameter_list|(
name|String
name|greedy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"greedy"
argument_list|,
name|greedy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay (long initialDelay)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|long
name|initialDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Milliseconds before the first poll starts. You can also specify time          * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30          * seconds), and 1h (1 hour).          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|initialDelay (String initialDelay)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|initialDelay
parameter_list|(
name|String
name|initialDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"initialDelay"
argument_list|,
name|initialDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies a maximum limit of number of fires. So if you set it to 1,          * the scheduler will only fire once. If you set it to 5, it will only          * fire five times. A value of zero or negative means fire forever.          *           * The option is a:<code>long</code> type.          *           * Group: scheduler          */
DECL|method|repeatCount (long repeatCount)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|repeatCount
parameter_list|(
name|long
name|repeatCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"repeatCount"
argument_list|,
name|repeatCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies a maximum limit of number of fires. So if you set it to 1,          * the scheduler will only fire once. If you set it to 5, it will only          * fire five times. A value of zero or negative means fire forever.          *           * The option will be converted to a<code>long</code> type.          *           * Group: scheduler          */
DECL|method|repeatCount (String repeatCount)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|repeatCount
parameter_list|(
name|String
name|repeatCount
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"repeatCount"
argument_list|,
name|repeatCount
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option is a:<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( LoggingLevel runLoggingLevel)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|LoggingLevel
name|runLoggingLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The consumer logs a start/complete log line when it polls. This          * option allows you to configure the logging level for that.          *           * The option will be converted to a          *<code>org.apache.camel.LoggingLevel</code> type.          *           * Group: scheduler          */
DECL|method|runLoggingLevel ( String runLoggingLevel)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|runLoggingLevel
parameter_list|(
name|String
name|runLoggingLevel
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"runLoggingLevel"
argument_list|,
name|runLoggingLevel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option is a:          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( ScheduledExecutorService scheduledExecutorService)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|ScheduledExecutorService
name|scheduledExecutorService
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for configuring a custom/shared thread pool to use for the          * consumer. By default each consumer has its own single threaded thread          * pool.          *           * The option will be converted to a          *<code>java.util.concurrent.ScheduledExecutorService</code> type.          *           * Group: scheduler          */
DECL|method|scheduledExecutorService ( String scheduledExecutorService)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|scheduledExecutorService
parameter_list|(
name|String
name|scheduledExecutorService
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduledExecutorService"
argument_list|,
name|scheduledExecutorService
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To use a cron scheduler from either camel-spring or camel-quartz          * component.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: scheduler          */
DECL|method|scheduler (String scheduler)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|scheduler
parameter_list|(
name|String
name|scheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"scheduler"
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz, Spring based scheduler.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.Object&gt;</code> type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( Map<String, Object> schedulerProperties)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|schedulerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure additional properties when using a custom scheduler or          * any of the Quartz, Spring based scheduler.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>          * type.          *           * Group: scheduler          */
DECL|method|schedulerProperties ( String schedulerProperties)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|schedulerProperties
parameter_list|(
name|String
name|schedulerProperties
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"schedulerProperties"
argument_list|,
name|schedulerProperties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler ( boolean startScheduler)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|boolean
name|startScheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the scheduler should be auto started.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|startScheduler ( String startScheduler)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|startScheduler
parameter_list|(
name|String
name|startScheduler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"startScheduler"
argument_list|,
name|startScheduler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option is a:<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit (TimeUnit timeUnit)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Time unit for initialDelay and delay options.          *           * The option will be converted to a          *<code>java.util.concurrent.TimeUnit</code> type.          *           * Group: scheduler          */
DECL|method|timeUnit (String timeUnit)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|timeUnit
parameter_list|(
name|String
name|timeUnit
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"timeUnit"
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option is a:<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay ( boolean useFixedDelay)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|boolean
name|useFixedDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Controls if fixed delay or fixed rate is used. See          * ScheduledExecutorService in JDK for details.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: scheduler          */
DECL|method|useFixedDelay ( String useFixedDelay)
specifier|default
name|Olingo4EndpointConsumerBuilder
name|useFixedDelay
parameter_list|(
name|String
name|useFixedDelay
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"useFixedDelay"
argument_list|,
name|useFixedDelay
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the Olingo4 component.      */
DECL|interface|AdvancedOlingo4EndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedOlingo4EndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|Olingo4EndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|Olingo4EndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedOlingo4EndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedOlingo4EndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedOlingo4EndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedOlingo4EndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option is a:          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( PollingConsumerPollStrategy pollStrategy)
specifier|default
name|AdvancedOlingo4EndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|PollingConsumerPollStrategy
name|pollStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing          * you to provide your custom implementation to control error handling          * usually occurred during the poll operation before an Exchange have          * been created and being routed in Camel.          *           * The option will be converted to a          *<code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.          *           * Group: consumer (advanced)          */
DECL|method|pollStrategy ( String pollStrategy)
specifier|default
name|AdvancedOlingo4EndpointConsumerBuilder
name|pollStrategy
parameter_list|(
name|String
name|pollStrategy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"pollStrategy"
argument_list|,
name|pollStrategy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedOlingo4EndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedOlingo4EndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedOlingo4EndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedOlingo4EndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the Olingo4 component.      */
DECL|interface|Olingo4EndpointProducerBuilder
specifier|public
interface|interface
name|Olingo4EndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedOlingo4EndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedOlingo4EndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * HTTP connection creation timeout in milliseconds, defaults to 30,000          * (30 seconds).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|connectTimeout (int connectTimeout)
specifier|default
name|Olingo4EndpointProducerBuilder
name|connectTimeout
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP connection creation timeout in milliseconds, defaults to 30,000          * (30 seconds).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|connectTimeout ( String connectTimeout)
specifier|default
name|Olingo4EndpointProducerBuilder
name|connectTimeout
parameter_list|(
name|String
name|connectTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Content-Type header value can be used to specify JSON or XML message          * format, defaults to application/json;charset=utf-8.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|contentType (String contentType)
specifier|default
name|Olingo4EndpointProducerBuilder
name|contentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentType"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set this to true to filter out results that have already been          * communicated by this component.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|filterAlreadySeen ( boolean filterAlreadySeen)
specifier|default
name|Olingo4EndpointProducerBuilder
name|filterAlreadySeen
parameter_list|(
name|boolean
name|filterAlreadySeen
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"filterAlreadySeen"
argument_list|,
name|filterAlreadySeen
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set this to true to filter out results that have already been          * communicated by this component.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|filterAlreadySeen ( String filterAlreadySeen)
specifier|default
name|Olingo4EndpointProducerBuilder
name|filterAlreadySeen
parameter_list|(
name|String
name|filterAlreadySeen
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"filterAlreadySeen"
argument_list|,
name|filterAlreadySeen
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP async client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          *           * The option is a:          *<code>org.apache.http.impl.nio.client.HttpAsyncClientBuilder</code>          * type.          *           * Group: common          */
DECL|method|httpAsyncClientBuilder ( Object httpAsyncClientBuilder)
specifier|default
name|Olingo4EndpointProducerBuilder
name|httpAsyncClientBuilder
parameter_list|(
name|Object
name|httpAsyncClientBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpAsyncClientBuilder"
argument_list|,
name|httpAsyncClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP async client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          *           * The option will be converted to a          *<code>org.apache.http.impl.nio.client.HttpAsyncClientBuilder</code>          * type.          *           * Group: common          */
DECL|method|httpAsyncClientBuilder ( String httpAsyncClientBuilder)
specifier|default
name|Olingo4EndpointProducerBuilder
name|httpAsyncClientBuilder
parameter_list|(
name|String
name|httpAsyncClientBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpAsyncClientBuilder"
argument_list|,
name|httpAsyncClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          *           * The option is a:          *<code>org.apache.http.impl.client.HttpClientBuilder</code> type.          *           * Group: common          */
DECL|method|httpClientBuilder ( Object httpClientBuilder)
specifier|default
name|Olingo4EndpointProducerBuilder
name|httpClientBuilder
parameter_list|(
name|Object
name|httpClientBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpClientBuilder"
argument_list|,
name|httpClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          *           * The option will be converted to a          *<code>org.apache.http.impl.client.HttpClientBuilder</code> type.          *           * Group: common          */
DECL|method|httpClientBuilder ( String httpClientBuilder)
specifier|default
name|Olingo4EndpointProducerBuilder
name|httpClientBuilder
parameter_list|(
name|String
name|httpClientBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpClientBuilder"
argument_list|,
name|httpClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP headers to inject into every request, this could include          * OAuth tokens, etc.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.String&gt;</code> type.          *           * Group: common          */
DECL|method|httpHeaders ( Map<String, String> httpHeaders)
specifier|default
name|Olingo4EndpointProducerBuilder
name|httpHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP headers to inject into every request, this could include          * OAuth tokens, etc.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>          * type.          *           * Group: common          */
DECL|method|httpHeaders (String httpHeaders)
specifier|default
name|Olingo4EndpointProducerBuilder
name|httpHeaders
parameter_list|(
name|String
name|httpHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|inBody (String inBody)
specifier|default
name|Olingo4EndpointProducerBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP proxy server configuration.          *           * The option is a:<code>org.apache.http.HttpHost</code> type.          *           * Group: common          */
DECL|method|proxy (Object proxy)
specifier|default
name|Olingo4EndpointProducerBuilder
name|proxy
parameter_list|(
name|Object
name|proxy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxy"
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP proxy server configuration.          *           * The option will be converted to a          *<code>org.apache.http.HttpHost</code> type.          *           * Group: common          */
DECL|method|proxy (String proxy)
specifier|default
name|Olingo4EndpointProducerBuilder
name|proxy
parameter_list|(
name|String
name|proxy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxy"
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Target OData service base URI, e.g.          * http://services.odata.org/OData/OData.svc.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|serviceUri (String serviceUri)
specifier|default
name|Olingo4EndpointProducerBuilder
name|serviceUri
parameter_list|(
name|String
name|serviceUri
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"serviceUri"
argument_list|,
name|serviceUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP request timeout in milliseconds, defaults to 30,000 (30          * seconds).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|socketTimeout (int socketTimeout)
specifier|default
name|Olingo4EndpointProducerBuilder
name|socketTimeout
parameter_list|(
name|int
name|socketTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP request timeout in milliseconds, defaults to 30,000 (30          * seconds).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|socketTimeout ( String socketTimeout)
specifier|default
name|Olingo4EndpointProducerBuilder
name|socketTimeout
parameter_list|(
name|String
name|socketTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: common          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|Olingo4EndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: common          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|Olingo4EndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|Olingo4EndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|Olingo4EndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the Olingo4 component.      */
DECL|interface|AdvancedOlingo4EndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedOlingo4EndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|Olingo4EndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|Olingo4EndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedOlingo4EndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedOlingo4EndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedOlingo4EndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedOlingo4EndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the Olingo4 component.      */
DECL|interface|Olingo4EndpointBuilder
specifier|public
interface|interface
name|Olingo4EndpointBuilder
extends|extends
name|Olingo4EndpointConsumerBuilder
extends|,
name|Olingo4EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedOlingo4EndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedOlingo4EndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * HTTP connection creation timeout in milliseconds, defaults to 30,000          * (30 seconds).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|connectTimeout (int connectTimeout)
specifier|default
name|Olingo4EndpointBuilder
name|connectTimeout
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP connection creation timeout in milliseconds, defaults to 30,000          * (30 seconds).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|connectTimeout (String connectTimeout)
specifier|default
name|Olingo4EndpointBuilder
name|connectTimeout
parameter_list|(
name|String
name|connectTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"connectTimeout"
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Content-Type header value can be used to specify JSON or XML message          * format, defaults to application/json;charset=utf-8.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|contentType (String contentType)
specifier|default
name|Olingo4EndpointBuilder
name|contentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"contentType"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set this to true to filter out results that have already been          * communicated by this component.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|filterAlreadySeen ( boolean filterAlreadySeen)
specifier|default
name|Olingo4EndpointBuilder
name|filterAlreadySeen
parameter_list|(
name|boolean
name|filterAlreadySeen
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"filterAlreadySeen"
argument_list|,
name|filterAlreadySeen
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Set this to true to filter out results that have already been          * communicated by this component.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|filterAlreadySeen ( String filterAlreadySeen)
specifier|default
name|Olingo4EndpointBuilder
name|filterAlreadySeen
parameter_list|(
name|String
name|filterAlreadySeen
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"filterAlreadySeen"
argument_list|,
name|filterAlreadySeen
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP async client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          *           * The option is a:          *<code>org.apache.http.impl.nio.client.HttpAsyncClientBuilder</code>          * type.          *           * Group: common          */
DECL|method|httpAsyncClientBuilder ( Object httpAsyncClientBuilder)
specifier|default
name|Olingo4EndpointBuilder
name|httpAsyncClientBuilder
parameter_list|(
name|Object
name|httpAsyncClientBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpAsyncClientBuilder"
argument_list|,
name|httpAsyncClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP async client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          *           * The option will be converted to a          *<code>org.apache.http.impl.nio.client.HttpAsyncClientBuilder</code>          * type.          *           * Group: common          */
DECL|method|httpAsyncClientBuilder ( String httpAsyncClientBuilder)
specifier|default
name|Olingo4EndpointBuilder
name|httpAsyncClientBuilder
parameter_list|(
name|String
name|httpAsyncClientBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpAsyncClientBuilder"
argument_list|,
name|httpAsyncClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          *           * The option is a:          *<code>org.apache.http.impl.client.HttpClientBuilder</code> type.          *           * Group: common          */
DECL|method|httpClientBuilder ( Object httpClientBuilder)
specifier|default
name|Olingo4EndpointBuilder
name|httpClientBuilder
parameter_list|(
name|Object
name|httpClientBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpClientBuilder"
argument_list|,
name|httpClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP client builder for more complex HTTP client          * configuration, overrides connectionTimeout, socketTimeout, proxy and          * sslContext. Note that a socketTimeout MUST be specified in the          * builder, otherwise OData requests could block indefinitely.          *           * The option will be converted to a          *<code>org.apache.http.impl.client.HttpClientBuilder</code> type.          *           * Group: common          */
DECL|method|httpClientBuilder ( String httpClientBuilder)
specifier|default
name|Olingo4EndpointBuilder
name|httpClientBuilder
parameter_list|(
name|String
name|httpClientBuilder
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpClientBuilder"
argument_list|,
name|httpClientBuilder
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP headers to inject into every request, this could include          * OAuth tokens, etc.          *           * The option is a:<code>java.util.Map&lt;java.lang.String,          * java.lang.String&gt;</code> type.          *           * Group: common          */
DECL|method|httpHeaders ( Map<String, String> httpHeaders)
specifier|default
name|Olingo4EndpointBuilder
name|httpHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Custom HTTP headers to inject into every request, this could include          * OAuth tokens, etc.          *           * The option will be converted to a          *<code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>          * type.          *           * Group: common          */
DECL|method|httpHeaders (String httpHeaders)
specifier|default
name|Olingo4EndpointBuilder
name|httpHeaders
parameter_list|(
name|String
name|httpHeaders
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"httpHeaders"
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the name of a parameter to be passed in the exchange In Body.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|inBody (String inBody)
specifier|default
name|Olingo4EndpointBuilder
name|inBody
parameter_list|(
name|String
name|inBody
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"inBody"
argument_list|,
name|inBody
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP proxy server configuration.          *           * The option is a:<code>org.apache.http.HttpHost</code> type.          *           * Group: common          */
DECL|method|proxy (Object proxy)
specifier|default
name|Olingo4EndpointBuilder
name|proxy
parameter_list|(
name|Object
name|proxy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxy"
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP proxy server configuration.          *           * The option will be converted to a          *<code>org.apache.http.HttpHost</code> type.          *           * Group: common          */
DECL|method|proxy (String proxy)
specifier|default
name|Olingo4EndpointBuilder
name|proxy
parameter_list|(
name|String
name|proxy
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"proxy"
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Target OData service base URI, e.g.          * http://services.odata.org/OData/OData.svc.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|serviceUri (String serviceUri)
specifier|default
name|Olingo4EndpointBuilder
name|serviceUri
parameter_list|(
name|String
name|serviceUri
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"serviceUri"
argument_list|,
name|serviceUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP request timeout in milliseconds, defaults to 30,000 (30          * seconds).          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|socketTimeout (int socketTimeout)
specifier|default
name|Olingo4EndpointBuilder
name|socketTimeout
parameter_list|(
name|int
name|socketTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * HTTP request timeout in milliseconds, defaults to 30,000 (30          * seconds).          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|socketTimeout (String socketTimeout)
specifier|default
name|Olingo4EndpointBuilder
name|socketTimeout
parameter_list|(
name|String
name|socketTimeout
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"socketTimeout"
argument_list|,
name|socketTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: common          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|Olingo4EndpointBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To configure security using SSLContextParameters.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: common          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|Olingo4EndpointBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Olingo4 component.      */
DECL|interface|AdvancedOlingo4EndpointBuilder
specifier|public
interface|interface
name|AdvancedOlingo4EndpointBuilder
extends|extends
name|AdvancedOlingo4EndpointConsumerBuilder
extends|,
name|AdvancedOlingo4EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|Olingo4EndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|Olingo4EndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedOlingo4EndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedOlingo4EndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedOlingo4EndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedOlingo4EndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|doSetProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Olingo4 (camel-olingo4)      * Communicates with OData 4.0 services using Apache Olingo OData API.      *       * Category: cloud      * Available as of version: 2.19      * Maven coordinates: org.apache.camel:camel-olingo4      *       * Syntax:<code>olingo4:apiName/methodName</code>      *       * Path parameter: apiName (required)      * What kind of operation to perform      * The value can be one of: DEFAULT      *       * Path parameter: methodName (required)      * What sub operation to use for the selected operation      */
DECL|method|olingo4 (String path)
specifier|default
name|Olingo4EndpointBuilder
name|olingo4
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|Olingo4EndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|Olingo4EndpointBuilder
implements|,
name|AdvancedOlingo4EndpointBuilder
block|{
specifier|public
name|Olingo4EndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"olingo4"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Olingo4EndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

