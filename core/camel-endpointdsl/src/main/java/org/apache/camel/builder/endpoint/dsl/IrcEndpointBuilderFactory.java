begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * The irc component implements an IRC (Internet Relay Chat) transport.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|IrcEndpointBuilderFactory
specifier|public
interface|interface
name|IrcEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint consumers for the IRC component.      */
DECL|interface|IrcEndpointConsumerBuilder
specifier|public
interface|interface
name|IrcEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedIrcEndpointConsumerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedIrcEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Hostname for the IRC chat server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|hostname (String hostname)
specifier|default
name|IrcEndpointConsumerBuilder
name|hostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hostname"
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the IRC chat server. If no port is configured then a          * default port of either 6667, 6668 or 6669 is used.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|port (int port)
specifier|default
name|IrcEndpointConsumerBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the IRC chat server. If no port is configured then a          * default port of either 6667, 6668 or 6669 is used.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|port (String port)
specifier|default
name|IrcEndpointConsumerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to auto re-join when being kicked.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoRejoin (boolean autoRejoin)
specifier|default
name|IrcEndpointConsumerBuilder
name|autoRejoin
parameter_list|(
name|boolean
name|autoRejoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoRejoin"
argument_list|,
name|autoRejoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to auto re-join when being kicked.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoRejoin (String autoRejoin)
specifier|default
name|IrcEndpointConsumerBuilder
name|autoRejoin
parameter_list|(
name|String
name|autoRejoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoRejoin"
argument_list|,
name|autoRejoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delay in milliseconds before sending commands after the connection is          * established.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|commandTimeout (long commandTimeout)
specifier|default
name|IrcEndpointConsumerBuilder
name|commandTimeout
parameter_list|(
name|long
name|commandTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"commandTimeout"
argument_list|,
name|commandTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delay in milliseconds before sending commands after the connection is          * established.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|commandTimeout (String commandTimeout)
specifier|default
name|IrcEndpointConsumerBuilder
name|commandTimeout
parameter_list|(
name|String
name|commandTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"commandTimeout"
argument_list|,
name|commandTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sends NAMES command to channel after joining it. onReply has to be          * true in order to process the result which will have the header value          * irc.num = '353'.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|namesOnJoin (boolean namesOnJoin)
specifier|default
name|IrcEndpointConsumerBuilder
name|namesOnJoin
parameter_list|(
name|boolean
name|namesOnJoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"namesOnJoin"
argument_list|,
name|namesOnJoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sends NAMES command to channel after joining it. onReply has to be          * true in order to process the result which will have the header value          * irc.num = '353'.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|namesOnJoin (String namesOnJoin)
specifier|default
name|IrcEndpointConsumerBuilder
name|namesOnJoin
parameter_list|(
name|String
name|namesOnJoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"namesOnJoin"
argument_list|,
name|namesOnJoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The nickname used in chat.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|nickname (String nickname)
specifier|default
name|IrcEndpointConsumerBuilder
name|nickname
parameter_list|(
name|String
name|nickname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nickname"
argument_list|,
name|nickname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use persistent messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|persistent (boolean persistent)
specifier|default
name|IrcEndpointConsumerBuilder
name|persistent
parameter_list|(
name|boolean
name|persistent
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistent"
argument_list|,
name|persistent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use persistent messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|persistent (String persistent)
specifier|default
name|IrcEndpointConsumerBuilder
name|persistent
parameter_list|(
name|String
name|persistent
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistent"
argument_list|,
name|persistent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The IRC user's actual name.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|realname (String realname)
specifier|default
name|IrcEndpointConsumerBuilder
name|realname
parameter_list|(
name|String
name|realname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"realname"
argument_list|,
name|realname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option is a:<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( boolean bridgeErrorHandler)
specifier|default
name|IrcEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|boolean
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Allows for bridging the consumer to the Camel routing Error Handler,          * which mean any exceptions occurred while the consumer is trying to          * pickup incoming messages, or the likes, will now be processed as a          * message and handled by the routing Error Handler. By default the          * consumer will use the org.apache.camel.spi.ExceptionHandler to deal          * with exceptions, that will be logged at WARN or ERROR level and          * ignored.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: consumer          */
DECL|method|bridgeErrorHandler ( String bridgeErrorHandler)
specifier|default
name|IrcEndpointConsumerBuilder
name|bridgeErrorHandler
parameter_list|(
name|String
name|bridgeErrorHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"bridgeErrorHandler"
argument_list|,
name|bridgeErrorHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user join events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onJoin (boolean onJoin)
specifier|default
name|IrcEndpointConsumerBuilder
name|onJoin
parameter_list|(
name|boolean
name|onJoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onJoin"
argument_list|,
name|onJoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user join events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onJoin (String onJoin)
specifier|default
name|IrcEndpointConsumerBuilder
name|onJoin
parameter_list|(
name|String
name|onJoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onJoin"
argument_list|,
name|onJoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle kick events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onKick (boolean onKick)
specifier|default
name|IrcEndpointConsumerBuilder
name|onKick
parameter_list|(
name|boolean
name|onKick
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onKick"
argument_list|,
name|onKick
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle kick events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onKick (String onKick)
specifier|default
name|IrcEndpointConsumerBuilder
name|onKick
parameter_list|(
name|String
name|onKick
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onKick"
argument_list|,
name|onKick
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle mode change events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onMode (boolean onMode)
specifier|default
name|IrcEndpointConsumerBuilder
name|onMode
parameter_list|(
name|boolean
name|onMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onMode"
argument_list|,
name|onMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle mode change events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onMode (String onMode)
specifier|default
name|IrcEndpointConsumerBuilder
name|onMode
parameter_list|(
name|String
name|onMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onMode"
argument_list|,
name|onMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle nickname change events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onNick (boolean onNick)
specifier|default
name|IrcEndpointConsumerBuilder
name|onNick
parameter_list|(
name|boolean
name|onNick
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onNick"
argument_list|,
name|onNick
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle nickname change events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onNick (String onNick)
specifier|default
name|IrcEndpointConsumerBuilder
name|onNick
parameter_list|(
name|String
name|onNick
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onNick"
argument_list|,
name|onNick
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user part events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onPart (boolean onPart)
specifier|default
name|IrcEndpointConsumerBuilder
name|onPart
parameter_list|(
name|boolean
name|onPart
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onPart"
argument_list|,
name|onPart
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user part events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onPart (String onPart)
specifier|default
name|IrcEndpointConsumerBuilder
name|onPart
parameter_list|(
name|String
name|onPart
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onPart"
argument_list|,
name|onPart
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle private message events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onPrivmsg (boolean onPrivmsg)
specifier|default
name|IrcEndpointConsumerBuilder
name|onPrivmsg
parameter_list|(
name|boolean
name|onPrivmsg
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onPrivmsg"
argument_list|,
name|onPrivmsg
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle private message events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onPrivmsg (String onPrivmsg)
specifier|default
name|IrcEndpointConsumerBuilder
name|onPrivmsg
parameter_list|(
name|String
name|onPrivmsg
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onPrivmsg"
argument_list|,
name|onPrivmsg
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user quit events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onQuit (boolean onQuit)
specifier|default
name|IrcEndpointConsumerBuilder
name|onQuit
parameter_list|(
name|boolean
name|onQuit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onQuit"
argument_list|,
name|onQuit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user quit events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onQuit (String onQuit)
specifier|default
name|IrcEndpointConsumerBuilder
name|onQuit
parameter_list|(
name|String
name|onQuit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onQuit"
argument_list|,
name|onQuit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to handle general responses to commands or          * informational messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onReply (boolean onReply)
specifier|default
name|IrcEndpointConsumerBuilder
name|onReply
parameter_list|(
name|boolean
name|onReply
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onReply"
argument_list|,
name|onReply
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to handle general responses to commands or          * informational messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onReply (String onReply)
specifier|default
name|IrcEndpointConsumerBuilder
name|onReply
parameter_list|(
name|String
name|onReply
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onReply"
argument_list|,
name|onReply
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle topic change events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onTopic (boolean onTopic)
specifier|default
name|IrcEndpointConsumerBuilder
name|onTopic
parameter_list|(
name|boolean
name|onTopic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onTopic"
argument_list|,
name|onTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle topic change events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onTopic (String onTopic)
specifier|default
name|IrcEndpointConsumerBuilder
name|onTopic
parameter_list|(
name|String
name|onTopic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onTopic"
argument_list|,
name|onTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Your IRC server nickname password.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|nickPassword (String nickPassword)
specifier|default
name|IrcEndpointConsumerBuilder
name|nickPassword
parameter_list|(
name|String
name|nickPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nickPassword"
argument_list|,
name|nickPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The IRC server password.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|IrcEndpointConsumerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used for configuring security using SSL. Reference to a          * org.apache.camel.support.jsse.SSLContextParameters in the Registry.          * This reference overrides any configured SSLContextParameters at the          * component level. Note that this setting overrides the trustManager          * option.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|IrcEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used for configuring security using SSL. Reference to a          * org.apache.camel.support.jsse.SSLContextParameters in the Registry.          * This reference overrides any configured SSLContextParameters at the          * component level. Note that this setting overrides the trustManager          * option.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|IrcEndpointConsumerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The trust manager used to verify the SSL server's certificate.          *           * The option is a:          *<code>org.schwering.irc.lib.ssl.SSLTrustManager</code> type.          *           * Group: security          */
DECL|method|trustManager (Object trustManager)
specifier|default
name|IrcEndpointConsumerBuilder
name|trustManager
parameter_list|(
name|Object
name|trustManager
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustManager"
argument_list|,
name|trustManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The trust manager used to verify the SSL server's certificate.          *           * The option will be converted to a          *<code>org.schwering.irc.lib.ssl.SSLTrustManager</code> type.          *           * Group: security          */
DECL|method|trustManager (String trustManager)
specifier|default
name|IrcEndpointConsumerBuilder
name|trustManager
parameter_list|(
name|String
name|trustManager
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustManager"
argument_list|,
name|trustManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The IRC server user name.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|IrcEndpointConsumerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint consumers for the IRC component.      */
DECL|interface|AdvancedIrcEndpointConsumerBuilder
specifier|public
interface|interface
name|AdvancedIrcEndpointConsumerBuilder
extends|extends
name|EndpointConsumerBuilder
block|{
DECL|method|basic ()
specifier|default
name|IrcEndpointConsumerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|IrcEndpointConsumerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option is a:<code>org.apache.camel.spi.ExceptionHandler</code>          * type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( ExceptionHandler exceptionHandler)
specifier|default
name|AdvancedIrcEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * To let the consumer use a custom ExceptionHandler. Notice if the          * option bridgeErrorHandler is enabled then this option is not in use.          * By default the consumer will deal with exceptions, that will be          * logged at WARN or ERROR level and ignored.          *           * The option will be converted to a          *<code>org.apache.camel.spi.ExceptionHandler</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exceptionHandler ( String exceptionHandler)
specifier|default
name|AdvancedIrcEndpointConsumerBuilder
name|exceptionHandler
parameter_list|(
name|String
name|exceptionHandler
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exceptionHandler"
argument_list|,
name|exceptionHandler
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option is a:<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( ExchangePattern exchangePattern)
specifier|default
name|AdvancedIrcEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|ExchangePattern
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets the exchange pattern when the consumer creates an exchange.          *           * The option will be converted to a          *<code>org.apache.camel.ExchangePattern</code> type.          *           * Group: consumer (advanced)          */
DECL|method|exchangePattern ( String exchangePattern)
specifier|default
name|AdvancedIrcEndpointConsumerBuilder
name|exchangePattern
parameter_list|(
name|String
name|exchangePattern
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"exchangePattern"
argument_list|,
name|exchangePattern
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedIrcEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedIrcEndpointConsumerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the server supports color codes.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|colors (boolean colors)
specifier|default
name|AdvancedIrcEndpointConsumerBuilder
name|colors
parameter_list|(
name|boolean
name|colors
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"colors"
argument_list|,
name|colors
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the server supports color codes.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|colors (String colors)
specifier|default
name|AdvancedIrcEndpointConsumerBuilder
name|colors
parameter_list|(
name|String
name|colors
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"colors"
argument_list|,
name|colors
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedIrcEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedIrcEndpointConsumerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint producers for the IRC component.      */
DECL|interface|IrcEndpointProducerBuilder
specifier|public
interface|interface
name|IrcEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedIrcEndpointProducerBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedIrcEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Hostname for the IRC chat server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|hostname (String hostname)
specifier|default
name|IrcEndpointProducerBuilder
name|hostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hostname"
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the IRC chat server. If no port is configured then a          * default port of either 6667, 6668 or 6669 is used.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|port (int port)
specifier|default
name|IrcEndpointProducerBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the IRC chat server. If no port is configured then a          * default port of either 6667, 6668 or 6669 is used.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|port (String port)
specifier|default
name|IrcEndpointProducerBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to auto re-join when being kicked.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoRejoin (boolean autoRejoin)
specifier|default
name|IrcEndpointProducerBuilder
name|autoRejoin
parameter_list|(
name|boolean
name|autoRejoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoRejoin"
argument_list|,
name|autoRejoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to auto re-join when being kicked.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoRejoin (String autoRejoin)
specifier|default
name|IrcEndpointProducerBuilder
name|autoRejoin
parameter_list|(
name|String
name|autoRejoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoRejoin"
argument_list|,
name|autoRejoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delay in milliseconds before sending commands after the connection is          * established.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|commandTimeout (long commandTimeout)
specifier|default
name|IrcEndpointProducerBuilder
name|commandTimeout
parameter_list|(
name|long
name|commandTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"commandTimeout"
argument_list|,
name|commandTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delay in milliseconds before sending commands after the connection is          * established.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|commandTimeout (String commandTimeout)
specifier|default
name|IrcEndpointProducerBuilder
name|commandTimeout
parameter_list|(
name|String
name|commandTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"commandTimeout"
argument_list|,
name|commandTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sends NAMES command to channel after joining it. onReply has to be          * true in order to process the result which will have the header value          * irc.num = '353'.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|namesOnJoin (boolean namesOnJoin)
specifier|default
name|IrcEndpointProducerBuilder
name|namesOnJoin
parameter_list|(
name|boolean
name|namesOnJoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"namesOnJoin"
argument_list|,
name|namesOnJoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sends NAMES command to channel after joining it. onReply has to be          * true in order to process the result which will have the header value          * irc.num = '353'.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|namesOnJoin (String namesOnJoin)
specifier|default
name|IrcEndpointProducerBuilder
name|namesOnJoin
parameter_list|(
name|String
name|namesOnJoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"namesOnJoin"
argument_list|,
name|namesOnJoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The nickname used in chat.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|nickname (String nickname)
specifier|default
name|IrcEndpointProducerBuilder
name|nickname
parameter_list|(
name|String
name|nickname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nickname"
argument_list|,
name|nickname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use persistent messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|persistent (boolean persistent)
specifier|default
name|IrcEndpointProducerBuilder
name|persistent
parameter_list|(
name|boolean
name|persistent
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistent"
argument_list|,
name|persistent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use persistent messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|persistent (String persistent)
specifier|default
name|IrcEndpointProducerBuilder
name|persistent
parameter_list|(
name|String
name|persistent
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistent"
argument_list|,
name|persistent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The IRC user's actual name.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|realname (String realname)
specifier|default
name|IrcEndpointProducerBuilder
name|realname
parameter_list|(
name|String
name|realname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"realname"
argument_list|,
name|realname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option is a:<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( boolean lazyStartProducer)
specifier|default
name|IrcEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|boolean
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the producer should be started lazy (on the first message).          * By starting lazy you can use this to allow CamelContext and routes to          * startup in situations where a producer may otherwise fail during          * starting and cause the route to fail being started. By deferring this          * startup to be lazy then the startup failure can be handled during          * routing messages via Camel's routing error handlers. Beware that when          * the first message is processed then creating and starting the          * producer may take a little time and prolong the total processing time          * of the processing.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: producer          */
DECL|method|lazyStartProducer ( String lazyStartProducer)
specifier|default
name|IrcEndpointProducerBuilder
name|lazyStartProducer
parameter_list|(
name|String
name|lazyStartProducer
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"lazyStartProducer"
argument_list|,
name|lazyStartProducer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user join events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onJoin (boolean onJoin)
specifier|default
name|IrcEndpointProducerBuilder
name|onJoin
parameter_list|(
name|boolean
name|onJoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onJoin"
argument_list|,
name|onJoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user join events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onJoin (String onJoin)
specifier|default
name|IrcEndpointProducerBuilder
name|onJoin
parameter_list|(
name|String
name|onJoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onJoin"
argument_list|,
name|onJoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle kick events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onKick (boolean onKick)
specifier|default
name|IrcEndpointProducerBuilder
name|onKick
parameter_list|(
name|boolean
name|onKick
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onKick"
argument_list|,
name|onKick
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle kick events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onKick (String onKick)
specifier|default
name|IrcEndpointProducerBuilder
name|onKick
parameter_list|(
name|String
name|onKick
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onKick"
argument_list|,
name|onKick
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle mode change events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onMode (boolean onMode)
specifier|default
name|IrcEndpointProducerBuilder
name|onMode
parameter_list|(
name|boolean
name|onMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onMode"
argument_list|,
name|onMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle mode change events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onMode (String onMode)
specifier|default
name|IrcEndpointProducerBuilder
name|onMode
parameter_list|(
name|String
name|onMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onMode"
argument_list|,
name|onMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle nickname change events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onNick (boolean onNick)
specifier|default
name|IrcEndpointProducerBuilder
name|onNick
parameter_list|(
name|boolean
name|onNick
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onNick"
argument_list|,
name|onNick
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle nickname change events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onNick (String onNick)
specifier|default
name|IrcEndpointProducerBuilder
name|onNick
parameter_list|(
name|String
name|onNick
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onNick"
argument_list|,
name|onNick
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user part events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onPart (boolean onPart)
specifier|default
name|IrcEndpointProducerBuilder
name|onPart
parameter_list|(
name|boolean
name|onPart
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onPart"
argument_list|,
name|onPart
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user part events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onPart (String onPart)
specifier|default
name|IrcEndpointProducerBuilder
name|onPart
parameter_list|(
name|String
name|onPart
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onPart"
argument_list|,
name|onPart
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle private message events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onPrivmsg (boolean onPrivmsg)
specifier|default
name|IrcEndpointProducerBuilder
name|onPrivmsg
parameter_list|(
name|boolean
name|onPrivmsg
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onPrivmsg"
argument_list|,
name|onPrivmsg
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle private message events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onPrivmsg (String onPrivmsg)
specifier|default
name|IrcEndpointProducerBuilder
name|onPrivmsg
parameter_list|(
name|String
name|onPrivmsg
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onPrivmsg"
argument_list|,
name|onPrivmsg
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user quit events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onQuit (boolean onQuit)
specifier|default
name|IrcEndpointProducerBuilder
name|onQuit
parameter_list|(
name|boolean
name|onQuit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onQuit"
argument_list|,
name|onQuit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user quit events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onQuit (String onQuit)
specifier|default
name|IrcEndpointProducerBuilder
name|onQuit
parameter_list|(
name|String
name|onQuit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onQuit"
argument_list|,
name|onQuit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to handle general responses to commands or          * informational messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onReply (boolean onReply)
specifier|default
name|IrcEndpointProducerBuilder
name|onReply
parameter_list|(
name|boolean
name|onReply
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onReply"
argument_list|,
name|onReply
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to handle general responses to commands or          * informational messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onReply (String onReply)
specifier|default
name|IrcEndpointProducerBuilder
name|onReply
parameter_list|(
name|String
name|onReply
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onReply"
argument_list|,
name|onReply
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle topic change events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onTopic (boolean onTopic)
specifier|default
name|IrcEndpointProducerBuilder
name|onTopic
parameter_list|(
name|boolean
name|onTopic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onTopic"
argument_list|,
name|onTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle topic change events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onTopic (String onTopic)
specifier|default
name|IrcEndpointProducerBuilder
name|onTopic
parameter_list|(
name|String
name|onTopic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onTopic"
argument_list|,
name|onTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Your IRC server nickname password.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|nickPassword (String nickPassword)
specifier|default
name|IrcEndpointProducerBuilder
name|nickPassword
parameter_list|(
name|String
name|nickPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nickPassword"
argument_list|,
name|nickPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The IRC server password.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|IrcEndpointProducerBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used for configuring security using SSL. Reference to a          * org.apache.camel.support.jsse.SSLContextParameters in the Registry.          * This reference overrides any configured SSLContextParameters at the          * component level. Note that this setting overrides the trustManager          * option.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|IrcEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used for configuring security using SSL. Reference to a          * org.apache.camel.support.jsse.SSLContextParameters in the Registry.          * This reference overrides any configured SSLContextParameters at the          * component level. Note that this setting overrides the trustManager          * option.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|IrcEndpointProducerBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The trust manager used to verify the SSL server's certificate.          *           * The option is a:          *<code>org.schwering.irc.lib.ssl.SSLTrustManager</code> type.          *           * Group: security          */
DECL|method|trustManager (Object trustManager)
specifier|default
name|IrcEndpointProducerBuilder
name|trustManager
parameter_list|(
name|Object
name|trustManager
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustManager"
argument_list|,
name|trustManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The trust manager used to verify the SSL server's certificate.          *           * The option will be converted to a          *<code>org.schwering.irc.lib.ssl.SSLTrustManager</code> type.          *           * Group: security          */
DECL|method|trustManager (String trustManager)
specifier|default
name|IrcEndpointProducerBuilder
name|trustManager
parameter_list|(
name|String
name|trustManager
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustManager"
argument_list|,
name|trustManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The IRC server user name.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|IrcEndpointProducerBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint producers for the IRC component.      */
DECL|interface|AdvancedIrcEndpointProducerBuilder
specifier|public
interface|interface
name|AdvancedIrcEndpointProducerBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|IrcEndpointProducerBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|IrcEndpointProducerBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedIrcEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedIrcEndpointProducerBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the server supports color codes.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|colors (boolean colors)
specifier|default
name|AdvancedIrcEndpointProducerBuilder
name|colors
parameter_list|(
name|boolean
name|colors
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"colors"
argument_list|,
name|colors
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the server supports color codes.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|colors (String colors)
specifier|default
name|AdvancedIrcEndpointProducerBuilder
name|colors
parameter_list|(
name|String
name|colors
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"colors"
argument_list|,
name|colors
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|default
name|AdvancedIrcEndpointProducerBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous ( String synchronous)
specifier|default
name|AdvancedIrcEndpointProducerBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Builder for endpoint for the IRC component.      */
DECL|interface|IrcEndpointBuilder
specifier|public
interface|interface
name|IrcEndpointBuilder
extends|extends
name|IrcEndpointConsumerBuilder
extends|,
name|IrcEndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|default
name|AdvancedIrcEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedIrcEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Hostname for the IRC chat server.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|hostname (String hostname)
specifier|default
name|IrcEndpointBuilder
name|hostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"hostname"
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the IRC chat server. If no port is configured then a          * default port of either 6667, 6668 or 6669 is used.          *           * The option is a:<code>int</code> type.          *           * Group: common          */
DECL|method|port (int port)
specifier|default
name|IrcEndpointBuilder
name|port
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Port number for the IRC chat server. If no port is configured then a          * default port of either 6667, 6668 or 6669 is used.          *           * The option will be converted to a<code>int</code> type.          *           * Group: common          */
DECL|method|port (String port)
specifier|default
name|IrcEndpointBuilder
name|port
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to auto re-join when being kicked.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoRejoin (boolean autoRejoin)
specifier|default
name|IrcEndpointBuilder
name|autoRejoin
parameter_list|(
name|boolean
name|autoRejoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoRejoin"
argument_list|,
name|autoRejoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether to auto re-join when being kicked.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|autoRejoin (String autoRejoin)
specifier|default
name|IrcEndpointBuilder
name|autoRejoin
parameter_list|(
name|String
name|autoRejoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"autoRejoin"
argument_list|,
name|autoRejoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delay in milliseconds before sending commands after the connection is          * established.          *           * The option is a:<code>long</code> type.          *           * Group: common          */
DECL|method|commandTimeout (long commandTimeout)
specifier|default
name|IrcEndpointBuilder
name|commandTimeout
parameter_list|(
name|long
name|commandTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"commandTimeout"
argument_list|,
name|commandTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Delay in milliseconds before sending commands after the connection is          * established.          *           * The option will be converted to a<code>long</code> type.          *           * Group: common          */
DECL|method|commandTimeout (String commandTimeout)
specifier|default
name|IrcEndpointBuilder
name|commandTimeout
parameter_list|(
name|String
name|commandTimeout
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"commandTimeout"
argument_list|,
name|commandTimeout
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sends NAMES command to channel after joining it. onReply has to be          * true in order to process the result which will have the header value          * irc.num = '353'.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
DECL|method|namesOnJoin (boolean namesOnJoin)
specifier|default
name|IrcEndpointBuilder
name|namesOnJoin
parameter_list|(
name|boolean
name|namesOnJoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"namesOnJoin"
argument_list|,
name|namesOnJoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sends NAMES command to channel after joining it. onReply has to be          * true in order to process the result which will have the header value          * irc.num = '353'.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
DECL|method|namesOnJoin (String namesOnJoin)
specifier|default
name|IrcEndpointBuilder
name|namesOnJoin
parameter_list|(
name|String
name|namesOnJoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"namesOnJoin"
argument_list|,
name|namesOnJoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The nickname used in chat.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|nickname (String nickname)
specifier|default
name|IrcEndpointBuilder
name|nickname
parameter_list|(
name|String
name|nickname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nickname"
argument_list|,
name|nickname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use persistent messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|persistent (boolean persistent)
specifier|default
name|IrcEndpointBuilder
name|persistent
parameter_list|(
name|boolean
name|persistent
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistent"
argument_list|,
name|persistent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Use persistent messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: common          */
annotation|@
name|Deprecated
DECL|method|persistent (String persistent)
specifier|default
name|IrcEndpointBuilder
name|persistent
parameter_list|(
name|String
name|persistent
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"persistent"
argument_list|,
name|persistent
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The IRC user's actual name.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: common          */
DECL|method|realname (String realname)
specifier|default
name|IrcEndpointBuilder
name|realname
parameter_list|(
name|String
name|realname
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"realname"
argument_list|,
name|realname
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user join events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onJoin (boolean onJoin)
specifier|default
name|IrcEndpointBuilder
name|onJoin
parameter_list|(
name|boolean
name|onJoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onJoin"
argument_list|,
name|onJoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user join events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onJoin (String onJoin)
specifier|default
name|IrcEndpointBuilder
name|onJoin
parameter_list|(
name|String
name|onJoin
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onJoin"
argument_list|,
name|onJoin
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle kick events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onKick (boolean onKick)
specifier|default
name|IrcEndpointBuilder
name|onKick
parameter_list|(
name|boolean
name|onKick
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onKick"
argument_list|,
name|onKick
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle kick events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onKick (String onKick)
specifier|default
name|IrcEndpointBuilder
name|onKick
parameter_list|(
name|String
name|onKick
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onKick"
argument_list|,
name|onKick
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle mode change events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onMode (boolean onMode)
specifier|default
name|IrcEndpointBuilder
name|onMode
parameter_list|(
name|boolean
name|onMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onMode"
argument_list|,
name|onMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle mode change events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onMode (String onMode)
specifier|default
name|IrcEndpointBuilder
name|onMode
parameter_list|(
name|String
name|onMode
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onMode"
argument_list|,
name|onMode
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle nickname change events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onNick (boolean onNick)
specifier|default
name|IrcEndpointBuilder
name|onNick
parameter_list|(
name|boolean
name|onNick
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onNick"
argument_list|,
name|onNick
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle nickname change events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onNick (String onNick)
specifier|default
name|IrcEndpointBuilder
name|onNick
parameter_list|(
name|String
name|onNick
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onNick"
argument_list|,
name|onNick
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user part events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onPart (boolean onPart)
specifier|default
name|IrcEndpointBuilder
name|onPart
parameter_list|(
name|boolean
name|onPart
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onPart"
argument_list|,
name|onPart
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user part events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onPart (String onPart)
specifier|default
name|IrcEndpointBuilder
name|onPart
parameter_list|(
name|String
name|onPart
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onPart"
argument_list|,
name|onPart
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle private message events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onPrivmsg (boolean onPrivmsg)
specifier|default
name|IrcEndpointBuilder
name|onPrivmsg
parameter_list|(
name|boolean
name|onPrivmsg
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onPrivmsg"
argument_list|,
name|onPrivmsg
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle private message events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onPrivmsg (String onPrivmsg)
specifier|default
name|IrcEndpointBuilder
name|onPrivmsg
parameter_list|(
name|String
name|onPrivmsg
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onPrivmsg"
argument_list|,
name|onPrivmsg
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user quit events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onQuit (boolean onQuit)
specifier|default
name|IrcEndpointBuilder
name|onQuit
parameter_list|(
name|boolean
name|onQuit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onQuit"
argument_list|,
name|onQuit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle user quit events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onQuit (String onQuit)
specifier|default
name|IrcEndpointBuilder
name|onQuit
parameter_list|(
name|String
name|onQuit
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onQuit"
argument_list|,
name|onQuit
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to handle general responses to commands or          * informational messages.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onReply (boolean onReply)
specifier|default
name|IrcEndpointBuilder
name|onReply
parameter_list|(
name|boolean
name|onReply
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onReply"
argument_list|,
name|onReply
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not to handle general responses to commands or          * informational messages.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onReply (String onReply)
specifier|default
name|IrcEndpointBuilder
name|onReply
parameter_list|(
name|String
name|onReply
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onReply"
argument_list|,
name|onReply
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle topic change events.          *           * The option is a:<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onTopic (boolean onTopic)
specifier|default
name|IrcEndpointBuilder
name|onTopic
parameter_list|(
name|boolean
name|onTopic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onTopic"
argument_list|,
name|onTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Handle topic change events.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: filter          */
DECL|method|onTopic (String onTopic)
specifier|default
name|IrcEndpointBuilder
name|onTopic
parameter_list|(
name|String
name|onTopic
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"onTopic"
argument_list|,
name|onTopic
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Your IRC server nickname password.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|nickPassword (String nickPassword)
specifier|default
name|IrcEndpointBuilder
name|nickPassword
parameter_list|(
name|String
name|nickPassword
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"nickPassword"
argument_list|,
name|nickPassword
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The IRC server password.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|password (String password)
specifier|default
name|IrcEndpointBuilder
name|password
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used for configuring security using SSL. Reference to a          * org.apache.camel.support.jsse.SSLContextParameters in the Registry.          * This reference overrides any configured SSLContextParameters at the          * component level. Note that this setting overrides the trustManager          * option.          *           * The option is a:          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( Object sslContextParameters)
specifier|default
name|IrcEndpointBuilder
name|sslContextParameters
parameter_list|(
name|Object
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Used for configuring security using SSL. Reference to a          * org.apache.camel.support.jsse.SSLContextParameters in the Registry.          * This reference overrides any configured SSLContextParameters at the          * component level. Note that this setting overrides the trustManager          * option.          *           * The option will be converted to a          *<code>org.apache.camel.support.jsse.SSLContextParameters</code> type.          *           * Group: security          */
DECL|method|sslContextParameters ( String sslContextParameters)
specifier|default
name|IrcEndpointBuilder
name|sslContextParameters
parameter_list|(
name|String
name|sslContextParameters
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sslContextParameters"
argument_list|,
name|sslContextParameters
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The trust manager used to verify the SSL server's certificate.          *           * The option is a:          *<code>org.schwering.irc.lib.ssl.SSLTrustManager</code> type.          *           * Group: security          */
DECL|method|trustManager (Object trustManager)
specifier|default
name|IrcEndpointBuilder
name|trustManager
parameter_list|(
name|Object
name|trustManager
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustManager"
argument_list|,
name|trustManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The trust manager used to verify the SSL server's certificate.          *           * The option will be converted to a          *<code>org.schwering.irc.lib.ssl.SSLTrustManager</code> type.          *           * Group: security          */
DECL|method|trustManager (String trustManager)
specifier|default
name|IrcEndpointBuilder
name|trustManager
parameter_list|(
name|String
name|trustManager
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"trustManager"
argument_list|,
name|trustManager
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The IRC server user name.          *           * The option is a:<code>java.lang.String</code> type.          *           * Group: security          */
DECL|method|username (String username)
specifier|default
name|IrcEndpointBuilder
name|username
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the IRC component.      */
DECL|interface|AdvancedIrcEndpointBuilder
specifier|public
interface|interface
name|AdvancedIrcEndpointBuilder
extends|extends
name|AdvancedIrcEndpointConsumerBuilder
extends|,
name|AdvancedIrcEndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|default
name|IrcEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|IrcEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|default
name|AdvancedIrcEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|default
name|AdvancedIrcEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the server supports color codes.          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|colors (boolean colors)
specifier|default
name|AdvancedIrcEndpointBuilder
name|colors
parameter_list|(
name|boolean
name|colors
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"colors"
argument_list|,
name|colors
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether or not the server supports color codes.          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|colors (String colors)
specifier|default
name|AdvancedIrcEndpointBuilder
name|colors
parameter_list|(
name|String
name|colors
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"colors"
argument_list|,
name|colors
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option is a:<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (boolean synchronous)
specifier|default
name|AdvancedIrcEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          *           * The option will be converted to a<code>boolean</code> type.          *           * Group: advanced          */
DECL|method|synchronous (String synchronous)
specifier|default
name|AdvancedIrcEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * The irc component implements an IRC (Internet Relay Chat) transport.      * Maven coordinates: org.apache.camel:camel-irc      */
DECL|method|irc (String path)
specifier|default
name|IrcEndpointBuilder
name|irc
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|IrcEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|IrcEndpointBuilder
implements|,
name|AdvancedIrcEndpointBuilder
block|{
specifier|public
name|IrcEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"irc"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|IrcEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

