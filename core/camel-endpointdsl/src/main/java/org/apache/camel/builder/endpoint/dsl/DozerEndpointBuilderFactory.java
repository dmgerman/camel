begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.builder.endpoint.dsl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|dsl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointConsumerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|EndpointProducerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|endpoint
operator|.
name|AbstractEndpointBuilder
import|;
end_import

begin_comment
comment|/**  * The dozer component provides the ability to map between Java beans using the  * Dozer mapping library.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_interface
annotation|@
name|Generated
argument_list|(
literal|"org.apache.camel.maven.packaging.EndpointDslMojo"
argument_list|)
DECL|interface|DozerEndpointBuilderFactory
specifier|public
interface|interface
name|DozerEndpointBuilderFactory
block|{
comment|/**      * Builder for endpoint for the Dozer component.      */
DECL|interface|DozerEndpointBuilder
specifier|public
specifier|static
interface|interface
name|DozerEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|advanced ()
specifier|public
specifier|default
name|AdvancedDozerEndpointBuilder
name|advanced
parameter_list|()
block|{
return|return
operator|(
name|AdvancedDozerEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * A human readable name of the mapping.          * The option is a<code>java.lang.String</code> type.          * @group producer          */
DECL|method|name (String name)
specifier|public
specifier|default
name|DozerEndpointBuilder
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of a DozerBeanMapperConfiguration bean in the Camel registry          * which should be used for configuring the Dozer mapping. This is an          * alternative to the mappingFile option that can be used for          * fine-grained control over how Dozer is configured. Remember to use a          * # prefix in the value to indicate that the bean is in the Camel          * registry (e.g. #myDozerConfig).          * The option is a          *<code>org.apache.camel.converter.dozer.DozerBeanMapperConfiguration</code> type.          * @group producer          */
DECL|method|mappingConfiguration ( Object mappingConfiguration)
specifier|public
specifier|default
name|DozerEndpointBuilder
name|mappingConfiguration
parameter_list|(
name|Object
name|mappingConfiguration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mappingConfiguration"
argument_list|,
name|mappingConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The name of a DozerBeanMapperConfiguration bean in the Camel registry          * which should be used for configuring the Dozer mapping. This is an          * alternative to the mappingFile option that can be used for          * fine-grained control over how Dozer is configured. Remember to use a          * # prefix in the value to indicate that the bean is in the Camel          * registry (e.g. #myDozerConfig).          * The option will be converted to a          *<code>org.apache.camel.converter.dozer.DozerBeanMapperConfiguration</code> type.          * @group producer          */
DECL|method|mappingConfiguration ( String mappingConfiguration)
specifier|public
specifier|default
name|DozerEndpointBuilder
name|mappingConfiguration
parameter_list|(
name|String
name|mappingConfiguration
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mappingConfiguration"
argument_list|,
name|mappingConfiguration
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The location of a Dozer configuration file. The file is loaded from          * the classpath by default, but you can use file:, classpath:, or http:          * to load the configuration from a specific location.          * The option is a<code>java.lang.String</code> type.          * @group producer          */
DECL|method|mappingFile (String mappingFile)
specifier|public
specifier|default
name|DozerEndpointBuilder
name|mappingFile
parameter_list|(
name|String
name|mappingFile
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"mappingFile"
argument_list|,
name|mappingFile
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The id of a dataFormat defined within the Camel Context to use for          * marshalling the mapping output to a non-Java type.          * The option is a<code>java.lang.String</code> type.          * @group producer          */
DECL|method|marshalId (String marshalId)
specifier|public
specifier|default
name|DozerEndpointBuilder
name|marshalId
parameter_list|(
name|String
name|marshalId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"marshalId"
argument_list|,
name|marshalId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Fully-qualified class name for the source type used in the mapping.          * If specified, the input to the mapping is converted to the specified          * type before being mapped with Dozer.          * The option is a<code>java.lang.String</code> type.          * @group producer          */
DECL|method|sourceModel (String sourceModel)
specifier|public
specifier|default
name|DozerEndpointBuilder
name|sourceModel
parameter_list|(
name|String
name|sourceModel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"sourceModel"
argument_list|,
name|sourceModel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Fully-qualified class name for the target type used in the mapping.          * The option is a<code>java.lang.String</code> type.          * @group producer          */
DECL|method|targetModel (String targetModel)
specifier|public
specifier|default
name|DozerEndpointBuilder
name|targetModel
parameter_list|(
name|String
name|targetModel
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"targetModel"
argument_list|,
name|targetModel
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * The id of a dataFormat defined within the Camel Context to use for          * unmarshalling the mapping input from a non-Java type.          * The option is a<code>java.lang.String</code> type.          * @group producer          */
DECL|method|unmarshalId (String unmarshalId)
specifier|public
specifier|default
name|DozerEndpointBuilder
name|unmarshalId
parameter_list|(
name|String
name|unmarshalId
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"unmarshalId"
argument_list|,
name|unmarshalId
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * Advanced builder for endpoint for the Dozer component.      */
DECL|interface|AdvancedDozerEndpointBuilder
specifier|public
specifier|static
interface|interface
name|AdvancedDozerEndpointBuilder
extends|extends
name|EndpointProducerBuilder
block|{
DECL|method|basic ()
specifier|public
specifier|default
name|DozerEndpointBuilder
name|basic
parameter_list|()
block|{
return|return
operator|(
name|DozerEndpointBuilder
operator|)
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( boolean basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedDozerEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|boolean
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Whether the endpoint should use basic property binding (Camel 2.x) or          * the newer property binding with additional capabilities.          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|basicPropertyBinding ( String basicPropertyBinding)
specifier|public
specifier|default
name|AdvancedDozerEndpointBuilder
name|basicPropertyBinding
parameter_list|(
name|String
name|basicPropertyBinding
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"basicPropertyBinding"
argument_list|,
name|basicPropertyBinding
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option is a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( boolean synchronous)
specifier|public
specifier|default
name|AdvancedDozerEndpointBuilder
name|synchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Sets whether synchronous processing should be strictly used, or Camel          * is allowed to use asynchronous processing (if supported).          * The option will be converted to a<code>boolean</code> type.          * @group advanced          */
DECL|method|synchronous ( String synchronous)
specifier|public
specifier|default
name|AdvancedDozerEndpointBuilder
name|synchronous
parameter_list|(
name|String
name|synchronous
parameter_list|)
block|{
name|setProperty
argument_list|(
literal|"synchronous"
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/**      * The dozer component provides the ability to map between Java beans using      * the Dozer mapping library. Creates a builder to build endpoints for the      * Dozer component.      */
DECL|method|dozer (String path)
specifier|public
specifier|default
name|DozerEndpointBuilder
name|dozer
parameter_list|(
name|String
name|path
parameter_list|)
block|{
class|class
name|DozerEndpointBuilderImpl
extends|extends
name|AbstractEndpointBuilder
implements|implements
name|DozerEndpointBuilder
implements|,
name|AdvancedDozerEndpointBuilder
block|{
specifier|public
name|DozerEndpointBuilderImpl
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|"dozer"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|DozerEndpointBuilderImpl
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_interface

end_unit

