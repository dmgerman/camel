begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_comment
comment|/**  * A Contract which represents the input type and/or output type of the {@link Endpoint} or {@link Processor}.  */
end_comment

begin_class
DECL|class|Contract
specifier|public
class|class
name|Contract
block|{
DECL|field|inputType
specifier|private
name|DataType
name|inputType
decl_stmt|;
DECL|field|outputType
specifier|private
name|DataType
name|outputType
decl_stmt|;
DECL|field|validateInput
specifier|private
name|boolean
name|validateInput
decl_stmt|;
DECL|field|validateOutput
specifier|private
name|boolean
name|validateOutput
decl_stmt|;
DECL|field|contractString
specifier|private
name|String
name|contractString
decl_stmt|;
DECL|method|getInputType ()
specifier|public
name|DataType
name|getInputType
parameter_list|()
block|{
return|return
name|inputType
return|;
block|}
comment|/**      * Set the input data type.      *      * @param inputType input data type      */
DECL|method|setInputType (String inputType)
specifier|public
name|void
name|setInputType
parameter_list|(
name|String
name|inputType
parameter_list|)
block|{
name|this
operator|.
name|inputType
operator|=
operator|new
name|DataType
argument_list|(
name|inputType
argument_list|)
expr_stmt|;
name|this
operator|.
name|contractString
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Set the input data type with Java class.      *      * @param clazz Java class which represents input data type      */
DECL|method|setInputType (Class<?> clazz)
specifier|public
name|void
name|setInputType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|inputType
operator|=
operator|new
name|DataType
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|this
operator|.
name|contractString
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getOutputType ()
specifier|public
name|DataType
name|getOutputType
parameter_list|()
block|{
return|return
name|outputType
return|;
block|}
comment|/**      * Set the output data type.      *      * @param outputType output data type      */
DECL|method|setOutputType (String outputType)
specifier|public
name|void
name|setOutputType
parameter_list|(
name|String
name|outputType
parameter_list|)
block|{
name|this
operator|.
name|outputType
operator|=
operator|new
name|DataType
argument_list|(
name|outputType
argument_list|)
expr_stmt|;
name|this
operator|.
name|contractString
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Set the output data type with Java class.      *      * @param clazz Java class which represents output data type      */
DECL|method|setOutputType (Class<?> clazz)
specifier|public
name|void
name|setOutputType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|outputType
operator|=
operator|new
name|DataType
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|this
operator|.
name|contractString
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|isValidateInput ()
specifier|public
name|boolean
name|isValidateInput
parameter_list|()
block|{
return|return
name|validateInput
return|;
block|}
comment|/**      * Whether to validate the input      */
DECL|method|setValidateInput (boolean validate)
specifier|public
name|void
name|setValidateInput
parameter_list|(
name|boolean
name|validate
parameter_list|)
block|{
name|this
operator|.
name|validateInput
operator|=
name|validate
expr_stmt|;
block|}
DECL|method|isValidateOutput ()
specifier|public
name|boolean
name|isValidateOutput
parameter_list|()
block|{
return|return
name|validateOutput
return|;
block|}
comment|/**      * Whether to validate the output      */
DECL|method|setValidateOutput (boolean validate)
specifier|public
name|void
name|setValidateOutput
parameter_list|(
name|boolean
name|validate
parameter_list|)
block|{
name|this
operator|.
name|validateOutput
operator|=
name|validate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|contractString
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|contractString
operator|=
literal|"DataType[input="
operator|+
name|this
operator|.
name|inputType
operator|+
literal|", output="
operator|+
name|this
operator|.
name|outputType
operator|+
literal|"]"
expr_stmt|;
block|}
return|return
name|contractString
return|;
block|}
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|inputType
operator|==
literal|null
operator|&&
name|outputType
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object target)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|target
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|target
operator|instanceof
name|Contract
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Contract
name|targetContract
init|=
operator|(
name|Contract
operator|)
name|target
decl_stmt|;
if|if
condition|(
name|getInputType
argument_list|()
operator|!=
literal|null
operator|||
name|targetContract
operator|.
name|getInputType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getInputType
argument_list|()
operator|==
literal|null
operator|||
name|targetContract
operator|.
name|getInputType
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|getInputType
argument_list|()
operator|.
name|equals
argument_list|(
name|targetContract
operator|.
name|getInputType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|getOutputType
argument_list|()
operator|!=
literal|null
operator|||
name|targetContract
operator|.
name|getOutputType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getOutputType
argument_list|()
operator|==
literal|null
operator|||
name|targetContract
operator|.
name|getOutputType
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|getOutputType
argument_list|()
operator|.
name|equals
argument_list|(
name|targetContract
operator|.
name|getOutputType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

