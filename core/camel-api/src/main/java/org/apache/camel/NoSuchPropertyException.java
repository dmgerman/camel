begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel
package|package
name|org
operator|.
name|apache
operator|.
name|camel
package|;
end_package

begin_comment
comment|/**  * An exception caused when a mandatory property is not available on a message  * {@link Exchange}  *   * @see org.apache.camel.support.ExchangeHelper#getMandatoryProperty(Exchange, String, Class)  *   */
end_comment

begin_class
DECL|class|NoSuchPropertyException
specifier|public
class|class
name|NoSuchPropertyException
extends|extends
name|CamelExchangeException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|8721487431101572630L
decl_stmt|;
DECL|field|propertyName
specifier|private
specifier|final
name|String
name|propertyName
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
specifier|transient
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
DECL|method|NoSuchPropertyException (Exchange exchange, String propertyName, Class<?> type)
specifier|public
name|NoSuchPropertyException
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|super
argument_list|(
literal|"No '"
operator|+
name|propertyName
operator|+
literal|"' property available of type: "
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
name|reason
argument_list|(
name|exchange
argument_list|,
name|propertyName
argument_list|)
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|this
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getPropertyName ()
specifier|public
name|String
name|getPropertyName
parameter_list|()
block|{
return|return
name|propertyName
return|;
block|}
DECL|method|getType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|reason (Exchange exchange, String propertyName)
specifier|protected
specifier|static
name|String
name|reason
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|propertyName
parameter_list|)
block|{
name|Object
name|value
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
return|return
name|valueDescription
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|valueDescription (Object value)
specifier|static
name|String
name|valueDescription
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
literal|" but has value: "
operator|+
name|value
operator|+
literal|" of type: "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

