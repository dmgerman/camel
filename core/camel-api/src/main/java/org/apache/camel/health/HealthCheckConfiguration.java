begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.health
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|TimeUtils
import|;
end_import

begin_class
DECL|class|HealthCheckConfiguration
specifier|public
class|class
name|HealthCheckConfiguration
implements|implements
name|Cloneable
block|{
DECL|field|DEFAULT_VALUE_ENABLED
specifier|public
specifier|static
specifier|final
name|Boolean
name|DEFAULT_VALUE_ENABLED
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
DECL|field|DEFAULT_VALUE_INTERVAL
specifier|public
specifier|static
specifier|final
name|Duration
name|DEFAULT_VALUE_INTERVAL
init|=
name|Duration
operator|.
name|ZERO
decl_stmt|;
DECL|field|DEFAULT_VALUE_FAILURE_THRESHOLD
specifier|public
specifier|static
specifier|final
name|Integer
name|DEFAULT_VALUE_FAILURE_THRESHOLD
init|=
literal|0
decl_stmt|;
comment|/**      * Set if the check associated to this configuration is enabled or not.      */
DECL|field|enabled
specifier|private
name|Boolean
name|enabled
decl_stmt|;
comment|/**      * Set the check interval.      */
DECL|field|interval
specifier|private
name|Duration
name|interval
decl_stmt|;
comment|/**      * Set the number of failure before reporting the service as un-healthy.      */
DECL|field|failureThreshold
specifier|private
name|Integer
name|failureThreshold
decl_stmt|;
comment|// *************************************************
comment|// Properties
comment|// *************************************************
comment|/**      * @return true if the check associated to this configuration is enabled,      *         false otherwise.      */
DECL|method|isEnabled ()
specifier|public
name|Boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
comment|/**      * Set if the check associated to this configuration is enabled or not.      */
DECL|method|setEnabled (Boolean enabled)
specifier|public
name|void
name|setEnabled
parameter_list|(
name|Boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
block|}
comment|/**      * @return the check interval.      */
DECL|method|getInterval ()
specifier|public
name|Duration
name|getInterval
parameter_list|()
block|{
return|return
name|interval
return|;
block|}
comment|/**      * Set the check interval.      */
DECL|method|setInterval (Duration interval)
specifier|public
name|void
name|setInterval
parameter_list|(
name|Duration
name|interval
parameter_list|)
block|{
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
block|}
comment|/**      * Set the check interval in a human readable format.      */
DECL|method|setInterval (String interval)
specifier|public
name|void
name|setInterval
parameter_list|(
name|String
name|interval
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|interval
argument_list|)
condition|)
block|{
name|this
operator|.
name|interval
operator|=
name|Duration
operator|.
name|ofMillis
argument_list|(
name|TimeUtils
operator|.
name|toMilliSeconds
argument_list|(
name|interval
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|interval
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * @return the number of failure before reporting the service as un-healthy.      */
DECL|method|getFailureThreshold ()
specifier|public
name|Integer
name|getFailureThreshold
parameter_list|()
block|{
return|return
name|failureThreshold
return|;
block|}
comment|/**      * Set the number of failure before reporting the service as un-healthy.      */
DECL|method|setFailureThreshold (Integer failureThreshold)
specifier|public
name|void
name|setFailureThreshold
parameter_list|(
name|Integer
name|failureThreshold
parameter_list|)
block|{
name|this
operator|.
name|failureThreshold
operator|=
name|failureThreshold
expr_stmt|;
block|}
comment|// *************************************************
comment|//
comment|// *************************************************
DECL|method|defaultValueEnabled ()
specifier|public
specifier|static
name|Boolean
name|defaultValueEnabled
parameter_list|()
block|{
return|return
name|DEFAULT_VALUE_ENABLED
return|;
block|}
DECL|method|defaultValueInterval ()
specifier|public
specifier|static
name|Duration
name|defaultValueInterval
parameter_list|()
block|{
return|return
name|DEFAULT_VALUE_INTERVAL
return|;
block|}
DECL|method|defaultValueFailureThreshold ()
specifier|public
specifier|static
name|Integer
name|defaultValueFailureThreshold
parameter_list|()
block|{
return|return
name|DEFAULT_VALUE_FAILURE_THRESHOLD
return|;
block|}
DECL|method|copy ()
specifier|public
name|HealthCheckConfiguration
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|HealthCheckConfiguration
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|builder ()
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|// *************************************************
comment|//
comment|// *************************************************
DECL|class|Builder
specifier|public
specifier|static
specifier|final
class|class
name|Builder
implements|implements
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Builder
argument_list|<
name|HealthCheckConfiguration
argument_list|>
block|{
DECL|field|enabled
specifier|private
name|Boolean
name|enabled
decl_stmt|;
DECL|field|interval
specifier|private
name|Duration
name|interval
decl_stmt|;
DECL|field|failureThreshold
specifier|private
name|Integer
name|failureThreshold
decl_stmt|;
DECL|method|Builder ()
specifier|private
name|Builder
parameter_list|()
block|{         }
DECL|method|complete (HealthCheckConfiguration template)
specifier|public
name|Builder
name|complete
parameter_list|(
name|HealthCheckConfiguration
name|template
parameter_list|)
block|{
if|if
condition|(
name|template
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|enabled
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|enabled
operator|=
name|template
operator|.
name|enabled
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|interval
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|interval
operator|=
name|template
operator|.
name|interval
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|failureThreshold
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|failureThreshold
operator|=
name|template
operator|.
name|failureThreshold
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
DECL|method|enabled (Boolean enabled)
specifier|public
name|Builder
name|enabled
parameter_list|(
name|Boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|interval (Duration interval)
specifier|public
name|Builder
name|interval
parameter_list|(
name|Duration
name|interval
parameter_list|)
block|{
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|interval (Long interval)
specifier|public
name|Builder
name|interval
parameter_list|(
name|Long
name|interval
parameter_list|)
block|{
return|return
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|interval
argument_list|)
condition|?
name|interval
argument_list|(
name|Duration
operator|.
name|ofMillis
argument_list|(
name|interval
argument_list|)
argument_list|)
else|:
name|this
return|;
block|}
DECL|method|interval (String interval)
specifier|public
name|Builder
name|interval
parameter_list|(
name|String
name|interval
parameter_list|)
block|{
return|return
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|interval
argument_list|)
condition|?
name|interval
argument_list|(
name|TimeUtils
operator|.
name|toMilliSeconds
argument_list|(
name|interval
argument_list|)
argument_list|)
else|:
name|this
return|;
block|}
DECL|method|failureThreshold (Integer failureThreshold)
specifier|public
name|Builder
name|failureThreshold
parameter_list|(
name|Integer
name|failureThreshold
parameter_list|)
block|{
name|this
operator|.
name|failureThreshold
operator|=
name|failureThreshold
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|build ()
specifier|public
name|HealthCheckConfiguration
name|build
parameter_list|()
block|{
name|HealthCheckConfiguration
name|conf
init|=
operator|new
name|HealthCheckConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setEnabled
argument_list|(
name|ObjectHelper
operator|.
name|supplyIfEmpty
argument_list|(
name|enabled
argument_list|,
name|HealthCheckConfiguration
operator|::
name|defaultValueEnabled
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInterval
argument_list|(
name|ObjectHelper
operator|.
name|supplyIfEmpty
argument_list|(
name|interval
argument_list|,
name|HealthCheckConfiguration
operator|::
name|defaultValueInterval
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFailureThreshold
argument_list|(
name|ObjectHelper
operator|.
name|supplyIfEmpty
argument_list|(
name|failureThreshold
argument_list|,
name|HealthCheckConfiguration
operator|::
name|defaultValueFailureThreshold
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
block|}
block|}
end_class

end_unit

