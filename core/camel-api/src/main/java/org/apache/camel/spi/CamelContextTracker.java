begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A {@link CamelContext} creation tracker.  */
end_comment

begin_class
DECL|class|CamelContextTracker
specifier|public
class|class
name|CamelContextTracker
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelContextTracker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TRACKERS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|CamelContextTracker
argument_list|>
name|TRACKERS
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|FunctionalInterface
DECL|interface|Filter
specifier|public
interface|interface
name|Filter
extends|extends
name|Predicate
argument_list|<
name|CamelContext
argument_list|>
block|{
DECL|method|accept (CamelContext camelContext)
name|boolean
name|accept
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|test (CamelContext camelContext)
specifier|default
name|boolean
name|test
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
return|return
name|accept
argument_list|(
name|camelContext
argument_list|)
return|;
block|}
block|}
DECL|field|filter
specifier|private
specifier|final
name|Filter
name|filter
decl_stmt|;
DECL|method|CamelContextTracker ()
specifier|public
name|CamelContextTracker
parameter_list|()
block|{
name|filter
operator|=
operator|new
name|Filter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
return|return
operator|!
name|camelContext
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Proxy"
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
DECL|method|CamelContextTracker (Filter filter)
specifier|public
name|CamelContextTracker
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
comment|/**      * Called to determine whether this tracker should accept the given context.      */
DECL|method|accept (CamelContext camelContext)
specifier|public
name|boolean
name|accept
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
return|return
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|accept
argument_list|(
name|camelContext
argument_list|)
return|;
block|}
comment|/**      * Called when a context is created.      */
DECL|method|contextCreated (CamelContext camelContext)
specifier|public
name|void
name|contextCreated
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
comment|// do nothing
block|}
DECL|method|open ()
specifier|public
specifier|final
name|void
name|open
parameter_list|()
block|{
name|TRACKERS
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
specifier|final
name|void
name|close
parameter_list|()
block|{
name|TRACKERS
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|notifyContextCreated (CamelContext camelContext)
specifier|public
specifier|static
specifier|synchronized
name|void
name|notifyContextCreated
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
for|for
control|(
name|CamelContextTracker
name|tracker
range|:
name|TRACKERS
control|)
block|{
try|try
block|{
if|if
condition|(
name|tracker
operator|.
name|accept
argument_list|(
name|camelContext
argument_list|)
condition|)
block|{
name|tracker
operator|.
name|contextCreated
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error calling CamelContext tracker. This exception is ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

