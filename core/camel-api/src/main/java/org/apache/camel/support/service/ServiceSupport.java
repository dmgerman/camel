begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.support.service
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StatefulService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A useful base class which ensures that a service is only initialized once and  * provides some helper methods for enquiring of its status.  *<p/>  * Implementations can extend this base class and implement {@link org.apache.camel.SuspendableService}  * in case they support suspend/resume.  *<p/>  *<b>Important:</b> You should override the lifecycle methods that start with<tt>do</tt>, eg {@link #doStart()}},  * {@link #doStop()}, etc. where you implement your logic. The methods {@link #start()}, {@link #stop()} should  *<b>NOT</b> be overridden as they are used internally to keep track of the state of this service and properly  * invoke the operation in a safe manner.  */
end_comment

begin_class
DECL|class|ServiceSupport
specifier|public
specifier|abstract
class|class
name|ServiceSupport
implements|implements
name|StatefulService
block|{
DECL|field|NEW
specifier|protected
specifier|static
specifier|final
name|int
name|NEW
init|=
literal|0
decl_stmt|;
DECL|field|INITIALIZED
specifier|protected
specifier|static
specifier|final
name|int
name|INITIALIZED
init|=
literal|1
decl_stmt|;
DECL|field|STARTING
specifier|protected
specifier|static
specifier|final
name|int
name|STARTING
init|=
literal|2
decl_stmt|;
DECL|field|STARTED
specifier|protected
specifier|static
specifier|final
name|int
name|STARTED
init|=
literal|3
decl_stmt|;
DECL|field|SUSPENDING
specifier|protected
specifier|static
specifier|final
name|int
name|SUSPENDING
init|=
literal|4
decl_stmt|;
DECL|field|SUSPENDED
specifier|protected
specifier|static
specifier|final
name|int
name|SUSPENDED
init|=
literal|5
decl_stmt|;
DECL|field|STOPPING
specifier|protected
specifier|static
specifier|final
name|int
name|STOPPING
init|=
literal|6
decl_stmt|;
DECL|field|STOPPED
specifier|protected
specifier|static
specifier|final
name|int
name|STOPPED
init|=
literal|7
decl_stmt|;
DECL|field|SHUTTINGDOWN
specifier|protected
specifier|static
specifier|final
name|int
name|SHUTTINGDOWN
init|=
literal|8
decl_stmt|;
DECL|field|SHUTDOWN
specifier|protected
specifier|static
specifier|final
name|int
name|SHUTDOWN
init|=
literal|9
decl_stmt|;
DECL|field|FAILED
specifier|protected
specifier|static
specifier|final
name|int
name|FAILED
init|=
literal|10
decl_stmt|;
DECL|field|log
specifier|protected
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|lock
specifier|protected
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|status
specifier|protected
specifier|volatile
name|int
name|status
init|=
name|NEW
decl_stmt|;
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|status
operator|==
name|NEW
condition|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|status
operator|==
name|NEW
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Initializing service: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|doInit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|status
operator|=
name|INITIALIZED
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      *<b>Important:</b> You should override the lifecycle methods that start with<tt>do</tt>, eg {@link #doStart()},      * {@link #doStop()}, etc. where you implement your logic. The methods {@link #start()}, {@link #stop()} should      *<b>NOT</b> be overriden as they are used internally to keep track of the state of this service and properly      * invoke the operation in a safe manner.      */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|status
operator|==
name|STARTED
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Service: {} already started"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|status
operator|==
name|STARTING
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Service: {} already starting"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|status
operator|=
name|FAILED
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Error while initializing service: "
operator|+
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
try|try
block|{
name|status
operator|=
name|STARTING
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Starting service: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|doStart
argument_list|()
expr_stmt|;
name|status
operator|=
name|STARTED
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Service started: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|status
operator|=
name|FAILED
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Error while starting service: "
operator|+
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      *<b>Important:</b> You should override the lifecycle methods that start with<tt>do</tt>, eg {@link #doStart()},      * {@link #doStop()}, etc. where you implement your logic. The methods {@link #start()}, {@link #stop()} should      *<b>NOT</b> be overridden as they are used internally to keep track of the state of this service and properly      * invoke the operation in a safe manner.      */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|status
operator|==
name|STOPPED
operator|||
name|status
operator|==
name|SHUTTINGDOWN
operator|||
name|status
operator|==
name|SHUTDOWN
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Service: {} already stopped"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|status
operator|==
name|STOPPING
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Service: {} already stopping"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
name|status
operator|=
name|STOPPING
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Stopping service: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|doStop
argument_list|()
expr_stmt|;
name|status
operator|=
name|STOPPED
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Service: {} stopped service"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|status
operator|=
name|FAILED
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Error while stopping service: "
operator|+
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      *<b>Important:</b> You should override the lifecycle methods that start with<tt>do</tt>, eg {@link #doStart()},      * {@link #doStop()}, etc. where you implement your logic. The methods {@link #start()}, {@link #stop()} should      *<b>NOT</b> be overridden as they are used internally to keep track of the state of this service and properly      * invoke the operation in a safe manner.      */
annotation|@
name|Override
DECL|method|suspend ()
specifier|public
name|void
name|suspend
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|status
operator|==
name|SUSPENDED
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Service: {} already suspended"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|status
operator|==
name|SUSPENDING
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Service: {} already suspending"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
name|status
operator|=
name|SUSPENDING
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Suspending service: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|doSuspend
argument_list|()
expr_stmt|;
name|status
operator|=
name|SUSPENDED
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Service suspended: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|status
operator|=
name|FAILED
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Error while suspending service: "
operator|+
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      *<b>Important:</b> You should override the lifecycle methods that start with<tt>do</tt>, eg {@link #doStart()},      * {@link #doStop()}, etc. where you implement your logic. The methods {@link #start()}, {@link #stop()} should      *<b>NOT</b> be overriden as they are used internally to keep track of the state of this service and properly      * invoke the operation in a safe manner.      */
annotation|@
name|Override
DECL|method|resume ()
specifier|public
name|void
name|resume
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|status
operator|!=
name|SUSPENDED
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Service is not suspended: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
name|status
operator|=
name|STARTING
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Resuming service: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|doResume
argument_list|()
expr_stmt|;
name|status
operator|=
name|STARTED
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Service resumed: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|status
operator|=
name|FAILED
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Error while resuming service: "
operator|+
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      *<b>Important:</b> You should override the lifecycle methods that start with<tt>do</tt>, eg {@link #doStart()},      * {@link #doStop()}, etc. where you implement your logic. The methods {@link #start()}, {@link #stop()} should      *<b>NOT</b> be overriden as they are used internally to keep track of the state of this service and properly      * invoke the operation in a safe manner.      */
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|status
operator|==
name|SHUTDOWN
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Service: {} already shut down"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|status
operator|==
name|SHUTTINGDOWN
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Service: {} already shutting down"
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
name|stop
argument_list|()
expr_stmt|;
name|status
operator|=
name|SHUTDOWN
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Shutting down service: {}"
argument_list|,
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|doShutdown
argument_list|()
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Service: {} shut down"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|status
operator|=
name|SHUTDOWN
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|status
operator|=
name|FAILED
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Error shutting down service: "
operator|+
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getStatus ()
specifier|public
name|ServiceStatus
name|getStatus
parameter_list|()
block|{
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|STARTING
case|:
return|return
name|ServiceStatus
operator|.
name|Starting
return|;
case|case
name|STARTED
case|:
return|return
name|ServiceStatus
operator|.
name|Started
return|;
case|case
name|SUSPENDING
case|:
return|return
name|ServiceStatus
operator|.
name|Suspending
return|;
case|case
name|SUSPENDED
case|:
return|return
name|ServiceStatus
operator|.
name|Suspended
return|;
case|case
name|STOPPING
case|:
return|return
name|ServiceStatus
operator|.
name|Stopping
return|;
default|default:
return|return
name|ServiceStatus
operator|.
name|Stopped
return|;
block|}
block|}
DECL|method|isNew ()
specifier|public
name|boolean
name|isNew
parameter_list|()
block|{
return|return
name|status
operator|==
name|NEW
return|;
block|}
DECL|method|isInit ()
specifier|public
name|boolean
name|isInit
parameter_list|()
block|{
return|return
name|status
operator|==
name|INITIALIZED
return|;
block|}
annotation|@
name|Override
DECL|method|isStarted ()
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|status
operator|==
name|STARTED
return|;
block|}
annotation|@
name|Override
DECL|method|isStarting ()
specifier|public
name|boolean
name|isStarting
parameter_list|()
block|{
return|return
name|status
operator|==
name|STARTING
return|;
block|}
annotation|@
name|Override
DECL|method|isStopping ()
specifier|public
name|boolean
name|isStopping
parameter_list|()
block|{
return|return
name|status
operator|==
name|STOPPING
return|;
block|}
annotation|@
name|Override
DECL|method|isStopped ()
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|status
operator|==
name|NEW
operator|||
name|status
operator|==
name|INITIALIZED
operator|||
name|status
operator|==
name|STOPPED
operator|||
name|status
operator|==
name|SHUTTINGDOWN
operator|||
name|status
operator|==
name|SHUTDOWN
operator|||
name|status
operator|==
name|FAILED
return|;
block|}
annotation|@
name|Override
DECL|method|isSuspending ()
specifier|public
name|boolean
name|isSuspending
parameter_list|()
block|{
return|return
name|status
operator|==
name|SUSPENDING
return|;
block|}
annotation|@
name|Override
DECL|method|isSuspended ()
specifier|public
name|boolean
name|isSuspended
parameter_list|()
block|{
return|return
name|status
operator|==
name|SUSPENDED
return|;
block|}
annotation|@
name|Override
DECL|method|isRunAllowed ()
specifier|public
name|boolean
name|isRunAllowed
parameter_list|()
block|{
return|return
name|isStartingOrStarted
argument_list|()
operator|||
name|isSuspendingOrSuspended
argument_list|()
return|;
block|}
DECL|method|isShutdown ()
specifier|public
name|boolean
name|isShutdown
parameter_list|()
block|{
return|return
name|status
operator|==
name|SHUTDOWN
return|;
block|}
comment|/**      * Is the service in progress of being stopped or already stopped      */
DECL|method|isStoppingOrStopped ()
specifier|public
name|boolean
name|isStoppingOrStopped
parameter_list|()
block|{
return|return
name|isStopping
argument_list|()
operator|||
name|isStopped
argument_list|()
return|;
block|}
comment|/**      * Is the service in progress of being suspended or already suspended      */
DECL|method|isSuspendingOrSuspended ()
specifier|public
name|boolean
name|isSuspendingOrSuspended
parameter_list|()
block|{
return|return
name|isSuspending
argument_list|()
operator|||
name|isSuspended
argument_list|()
return|;
block|}
comment|/**      * Is the service in progress of being suspended or already suspended      */
DECL|method|isStartingOrStarted ()
specifier|public
name|boolean
name|isStartingOrStarted
parameter_list|()
block|{
return|return
name|isStarting
argument_list|()
operator|||
name|isStarted
argument_list|()
return|;
block|}
comment|/**      * Initialize the service.      * This method will only be called once before starting.      */
DECL|method|doInit ()
specifier|protected
name|void
name|doInit
parameter_list|()
throws|throws
name|Exception
block|{     }
comment|/**      * Implementations override this method to support customized start/stop.      *<p/>      *<b>Important:</b> See {@link #doStop()} for more details.      *       * @see #doStop()      */
DECL|method|doStart ()
specifier|protected
specifier|abstract
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**      * Implementations override this method to support customized start/stop.      *<p/>      *<b>Important:</b> Camel will invoke this {@link #doStop()} method when      * the service is being stopped. This method will<b>also</b> be invoked      * if the service is still in<i>uninitialized</i> state (eg has not      * been started). The method is<b>always</b> called to allow the service      * to do custom logic when the service is being stopped, such as when      * {@link org.apache.camel.CamelContext} is shutting down.      *       * @see #doStart()       */
DECL|method|doStop ()
specifier|protected
specifier|abstract
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**      * Implementations override this method to support customized suspend/resume.      */
DECL|method|doSuspend ()
specifier|protected
name|void
name|doSuspend
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
comment|/**      * Implementations override this method to support customized suspend/resume.      */
DECL|method|doResume ()
specifier|protected
name|void
name|doResume
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
comment|/**      * Implementations override this method to perform customized shutdown.      */
DECL|method|doShutdown ()
specifier|protected
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
block|}
end_class

end_unit

