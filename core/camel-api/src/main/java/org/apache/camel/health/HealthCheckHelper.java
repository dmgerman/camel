begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.health
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|HealthCheckHelper
specifier|public
specifier|final
class|class
name|HealthCheckHelper
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HealthCheckHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|HealthCheckHelper ()
specifier|private
name|HealthCheckHelper
parameter_list|()
block|{     }
comment|/**      * Get the group of the given check or an empty string if the group is not set.      *      * @param check the health check      * @return the {@link HealthCheck#getGroup()} or an empty string if it is<code>null</code>      */
DECL|method|getGroup (HealthCheck check)
specifier|public
specifier|static
name|String
name|getGroup
parameter_list|(
name|HealthCheck
name|check
parameter_list|)
block|{
return|return
name|ObjectHelper
operator|.
name|supplyIfEmpty
argument_list|(
name|check
operator|.
name|getGroup
argument_list|()
argument_list|,
parameter_list|()
lambda|->
literal|""
argument_list|)
return|;
block|}
comment|/**      * Invokes the checks and returns a collection of results.      */
DECL|method|invoke (CamelContext camelContext)
specifier|public
specifier|static
name|Collection
argument_list|<
name|HealthCheck
operator|.
name|Result
argument_list|>
name|invoke
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
return|return
name|invoke
argument_list|(
name|camelContext
argument_list|,
name|check
lambda|->
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|check
lambda|->
literal|false
argument_list|)
return|;
block|}
comment|/**      * Invokes the checks and returns a collection of results.      */
DECL|method|invoke ( CamelContext camelContext, Function<HealthCheck, Map<String, Object>> optionsSupplier)
specifier|public
specifier|static
name|Collection
argument_list|<
name|HealthCheck
operator|.
name|Result
argument_list|>
name|invoke
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Function
argument_list|<
name|HealthCheck
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|optionsSupplier
parameter_list|)
block|{
return|return
name|invoke
argument_list|(
name|camelContext
argument_list|,
name|optionsSupplier
argument_list|,
name|check
lambda|->
literal|false
argument_list|)
return|;
block|}
comment|/**      * Invokes the checks and returns a collection of results.      */
DECL|method|invoke ( CamelContext camelContext, HealthCheckFilter filter)
specifier|public
specifier|static
name|Collection
argument_list|<
name|HealthCheck
operator|.
name|Result
argument_list|>
name|invoke
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|HealthCheckFilter
name|filter
parameter_list|)
block|{
return|return
name|invoke
argument_list|(
name|camelContext
argument_list|,
name|check
lambda|->
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|filter
argument_list|)
return|;
block|}
comment|/**      * Invokes the checks and returns a collection of results.      *      * @param camelContext the camel context.      * @param optionsSupplier a supplier for options.      * @param filter filter to exclude some checks.      */
DECL|method|invoke ( CamelContext camelContext, Function<HealthCheck, Map<String, Object>> optionsSupplier, HealthCheckFilter filter)
specifier|public
specifier|static
name|Collection
argument_list|<
name|HealthCheck
operator|.
name|Result
argument_list|>
name|invoke
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Function
argument_list|<
name|HealthCheck
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|optionsSupplier
parameter_list|,
name|HealthCheckFilter
name|filter
parameter_list|)
block|{
specifier|final
name|HealthCheckRegistry
name|registry
init|=
name|HealthCheckRegistry
operator|.
name|get
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
specifier|final
name|HealthCheckService
name|service
init|=
name|camelContext
operator|.
name|hasService
argument_list|(
name|HealthCheckService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
comment|// If a health check service is defined retrieve the current status
comment|// of the checks hold by the service.
return|return
name|service
operator|.
name|getResults
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|result
lambda|->
operator|!
name|filter
operator|.
name|test
argument_list|(
name|result
operator|.
name|getCheck
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|registry
operator|!=
literal|null
condition|)
block|{
comment|// If no health check service is defined, this endpoint invokes the
comment|// check one by one.
return|return
name|registry
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|HealthCheckHelper
operator|::
name|getGroup
argument_list|)
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getValue
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Collection
operator|::
name|stream
argument_list|)
operator|.
name|filter
argument_list|(
name|check
lambda|->
operator|!
name|filter
operator|.
name|test
argument_list|(
name|check
argument_list|)
argument_list|)
operator|.
name|sorted
argument_list|(
name|Comparator
operator|.
name|comparingInt
argument_list|(
name|HealthCheck
operator|::
name|getOrder
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|check
lambda|->
name|check
operator|.
name|call
argument_list|(
name|optionsSupplier
operator|.
name|apply
argument_list|(
name|check
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"No health check source found"
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|/**      * Query the status of a check by id. Note that this may result in an effective      * invocation of the {@link HealthCheck}, i.e. when no {@link HealthCheckService}      * is available.      *      * @param camelContext the camel context.      * @param id the check id.      * @param options the check options.      * @return an optional {@link HealthCheck.Result}.      */
DECL|method|query (CamelContext camelContext, String id, Map<String, Object> options)
specifier|public
specifier|static
name|Optional
argument_list|<
name|HealthCheck
operator|.
name|Result
argument_list|>
name|query
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
specifier|final
name|HealthCheckRegistry
name|registry
init|=
name|HealthCheckRegistry
operator|.
name|get
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
specifier|final
name|HealthCheckService
name|service
init|=
name|camelContext
operator|.
name|hasService
argument_list|(
name|HealthCheckService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
return|return
name|service
operator|.
name|getResults
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|result
lambda|->
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|result
operator|.
name|getCheck
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|id
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|registry
operator|!=
literal|null
condition|)
block|{
return|return
name|registry
operator|.
name|getCheck
argument_list|(
name|id
argument_list|)
operator|.
name|map
argument_list|(
name|check
lambda|->
name|check
operator|.
name|call
argument_list|(
name|options
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"No health check source found"
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/**      * Invoke a check by id.      *      * @param camelContext the camel context.      * @param id the check id.      * @param options the check options.      * @return an optional {@link HealthCheck.Result}.      */
DECL|method|invoke (CamelContext camelContext, String id, Map<String, Object> options)
specifier|public
specifier|static
name|Optional
argument_list|<
name|HealthCheck
operator|.
name|Result
argument_list|>
name|invoke
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
specifier|final
name|HealthCheckRegistry
name|registry
init|=
name|HealthCheckRegistry
operator|.
name|get
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
specifier|final
name|HealthCheckService
name|service
init|=
name|camelContext
operator|.
name|hasService
argument_list|(
name|HealthCheckService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
return|return
name|service
operator|.
name|call
argument_list|(
name|id
argument_list|,
name|options
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|registry
operator|!=
literal|null
condition|)
block|{
return|return
name|registry
operator|.
name|getCheck
argument_list|(
name|id
argument_list|)
operator|.
name|map
argument_list|(
name|check
lambda|->
name|check
operator|.
name|call
argument_list|(
name|options
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"No health check source found"
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

