begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.main.xml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|main
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|main
operator|.
name|Main
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|MainXmlTest
specifier|public
class|class
name|MainXmlTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
DECL|method|testMainRoutesCollector ()
specifier|public
name|void
name|testMainRoutesCollector
parameter_list|()
throws|throws
name|Exception
block|{
comment|// will load XML from target/classes when testing
name|doTestMain
argument_list|(
literal|"org/apache/camel/main/xml/camel-dummy.xml,org/apache/camel/main/xml/camel-scan.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMainRoutesCollectorScan ()
specifier|public
name|void
name|testMainRoutesCollectorScan
parameter_list|()
throws|throws
name|Exception
block|{
comment|// will load XML from target/classes when testing
name|doTestMain
argument_list|(
literal|"org/apache/camel/main/xml/camel-*.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMainRoutesCollectorScanInJar ()
specifier|public
name|void
name|testMainRoutesCollectorScanInJar
parameter_list|()
throws|throws
name|Exception
block|{
comment|// will load XML from camel-core test JAR when testing
name|doTestMain
argument_list|(
literal|"org/apache/camel/model/scan-*.xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestMain (String xmlRoutes)
specifier|protected
name|void
name|doTestMain
parameter_list|(
name|String
name|xmlRoutes
parameter_list|)
throws|throws
name|Exception
block|{
name|Main
name|main
init|=
operator|new
name|Main
argument_list|()
decl_stmt|;
name|main
operator|.
name|configure
argument_list|()
operator|.
name|withXmlRoutes
argument_list|(
name|xmlRoutes
argument_list|)
expr_stmt|;
name|main
operator|.
name|start
argument_list|()
expr_stmt|;
name|CamelContext
name|camelContext
init|=
name|main
operator|.
name|getCamelContext
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|camelContext
operator|.
name|getRoutes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MockEndpoint
name|endpoint
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
literal|"mock:scan"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|endpoint2
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
literal|"mock:dummy"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|endpoint2
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Bye World"
argument_list|)
expr_stmt|;
name|main
operator|.
name|getCamelTemplate
argument_list|()
operator|.
name|sendBody
argument_list|(
literal|"direct:scan"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|main
operator|.
name|getCamelTemplate
argument_list|()
operator|.
name|sendBody
argument_list|(
literal|"direct:dummy"
argument_list|,
literal|"Bye World"
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|endpoint2
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|main
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

