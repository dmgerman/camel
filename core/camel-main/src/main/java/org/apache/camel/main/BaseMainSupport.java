begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.main
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExtendedCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchLanguageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PropertyBindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|HystrixConfigurationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|Resilience4jConfigurationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelBeanPostProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PropertyConfigurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|LifecycleStrategySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|PropertyBindingSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|OrderedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
operator|.
name|invokeMethod
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReflectionHelper
operator|.
name|findMethod
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|matches
import|;
end_import

begin_comment
comment|/**  * Base class for main implementations to allow bootstrapping Camel in standalone mode.  */
end_comment

begin_class
DECL|class|BaseMainSupport
specifier|public
specifier|abstract
class|class
name|BaseMainSupport
extends|extends
name|ServiceSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BaseMainSupport
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|completed
specifier|protected
specifier|final
name|AtomicBoolean
name|completed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|latch
specifier|protected
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|camelContext
specifier|protected
specifier|volatile
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|camelTemplate
specifier|protected
specifier|volatile
name|ProducerTemplate
name|camelTemplate
decl_stmt|;
DECL|field|listeners
specifier|protected
specifier|final
name|List
argument_list|<
name|MainListener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|mainConfigurationProperties
specifier|protected
specifier|final
name|MainConfigurationProperties
name|mainConfigurationProperties
init|=
operator|new
name|MainConfigurationProperties
argument_list|()
decl_stmt|;
DECL|field|routesCollector
specifier|protected
name|RoutesCollector
name|routesCollector
init|=
operator|new
name|DefaultRoutesCollector
argument_list|()
decl_stmt|;
DECL|field|routeBuilders
specifier|protected
name|List
argument_list|<
name|RoutesBuilder
argument_list|>
name|routeBuilders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|routeBuilderClasses
specifier|protected
name|String
name|routeBuilderClasses
decl_stmt|;
DECL|field|configurations
specifier|protected
name|List
argument_list|<
name|Object
argument_list|>
name|configurations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|configurationClasses
specifier|protected
name|String
name|configurationClasses
decl_stmt|;
DECL|field|propertyPlaceholderLocations
specifier|protected
name|String
name|propertyPlaceholderLocations
decl_stmt|;
DECL|field|defaultPropertyPlaceholderLocation
specifier|protected
name|String
name|defaultPropertyPlaceholderLocation
init|=
literal|"classpath:application.properties;optional=true"
decl_stmt|;
DECL|field|initialProperties
specifier|protected
name|Properties
name|initialProperties
decl_stmt|;
DECL|field|overrideProperties
specifier|protected
name|Properties
name|overrideProperties
decl_stmt|;
DECL|method|loadEnvironmentVariablesAsProperties (String[] prefixes)
specifier|protected
specifier|static
name|Properties
name|loadEnvironmentVariablesAsProperties
parameter_list|(
name|String
index|[]
name|prefixes
parameter_list|)
block|{
name|Properties
name|answer
init|=
operator|new
name|OrderedProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefixes
operator|==
literal|null
operator|||
name|prefixes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|answer
return|;
block|}
for|for
control|(
name|String
name|prefix
range|:
name|prefixes
control|)
block|{
specifier|final
name|String
name|pk
init|=
name|prefix
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"[^\\w]"
argument_list|,
literal|"-"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|pk2
init|=
name|pk
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|'_'
argument_list|)
decl_stmt|;
name|System
operator|.
name|getenv
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|k
operator|=
name|k
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
name|pk
argument_list|)
operator|||
name|k
operator|.
name|startsWith
argument_list|(
name|pk2
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|k
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|'.'
argument_list|)
decl_stmt|;
name|answer
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|optionKey (String key)
specifier|protected
specifier|static
name|String
name|optionKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
comment|// as we ignore case for property names we should use keys in same case and without dashes
name|key
operator|=
name|StringHelper
operator|.
name|replaceAll
argument_list|(
name|key
argument_list|,
literal|"-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|key
operator|=
name|key
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
DECL|method|setPropertiesOnTarget (CamelContext context, Object target, Map<String, Object> properties, String optionPrefix, boolean failIfNotSet, boolean ignoreCase, Map<String, String> autoConfiguredProperties)
specifier|protected
specifier|static
name|boolean
name|setPropertiesOnTarget
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Object
name|target
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|,
name|String
name|optionPrefix
parameter_list|,
name|boolean
name|failIfNotSet
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|autoConfiguredProperties
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|context
argument_list|,
literal|"context"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|target
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|properties
argument_list|,
literal|"properties"
argument_list|)
expr_stmt|;
name|boolean
name|rc
init|=
literal|false
decl_stmt|;
name|PropertyConfigurer
name|configurer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|target
operator|instanceof
name|Component
condition|)
block|{
comment|// the component needs to be initialized to have the configurer ready
name|ServiceHelper
operator|.
name|initService
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|configurer
operator|=
operator|(
operator|(
name|Component
operator|)
name|target
operator|)
operator|.
name|getComponentPropertyConfigurer
argument_list|()
expr_stmt|;
block|}
try|try
block|{
comment|// keep a reference of the original keys
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|backup
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|rc
operator|=
name|PropertyBindingSupport
operator|.
name|build
argument_list|()
operator|.
name|withMandatory
argument_list|(
name|failIfNotSet
argument_list|)
operator|.
name|withRemoveParameters
argument_list|(
literal|true
argument_list|)
operator|.
name|withConfigurer
argument_list|(
name|configurer
argument_list|)
operator|.
name|withIgnoreCase
argument_list|(
name|ignoreCase
argument_list|)
operator|.
name|bind
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|properties
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|backup
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|properties
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|prefix
init|=
name|optionPrefix
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
operator|!
name|prefix
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|prefix
operator|=
literal|"."
operator|+
name|prefix
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configured property: {}{}={} on bean: {}"
argument_list|,
name|prefix
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|autoConfiguredProperties
operator|.
name|put
argument_list|(
name|prefix
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|PropertyBindingException
name|e
parameter_list|)
block|{
name|String
name|key
init|=
name|e
operator|.
name|getOptionKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|String
name|prefix
init|=
name|e
operator|.
name|getOptionPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
operator|!
name|prefix
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|prefix
operator|=
literal|"."
operator|+
name|prefix
expr_stmt|;
block|}
name|key
operator|=
name|prefix
operator|!=
literal|null
condition|?
name|prefix
operator|+
literal|"."
operator|+
name|e
operator|.
name|getPropertyName
argument_list|()
else|:
name|e
operator|.
name|getPropertyName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|failIfNotSet
condition|)
block|{
comment|// enrich the error with more precise details with option prefix and key
throw|throw
operator|new
name|PropertyBindingException
argument_list|(
name|e
operator|.
name|getTarget
argument_list|()
argument_list|,
name|e
operator|.
name|getPropertyName
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|optionPrefix
argument_list|,
name|key
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error configuring property ("
operator|+
name|key
operator|+
literal|") with name: "
operator|+
name|e
operator|.
name|getPropertyName
argument_list|()
operator|+
literal|") on bean: "
operator|+
name|target
operator|+
literal|" with value: "
operator|+
name|e
operator|.
name|getValue
argument_list|()
operator|+
literal|". This exception is ignored as failIfNotSet=false."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
comment|/**      * To configure options on Camel Main.      */
DECL|method|configure ()
specifier|public
name|MainConfigurationProperties
name|configure
parameter_list|()
block|{
return|return
name|mainConfigurationProperties
return|;
block|}
DECL|method|getConfigurationClasses ()
specifier|public
name|String
name|getConfigurationClasses
parameter_list|()
block|{
return|return
name|configurationClasses
return|;
block|}
DECL|method|setConfigurationClasses (String configurations)
specifier|public
name|void
name|setConfigurationClasses
parameter_list|(
name|String
name|configurations
parameter_list|)
block|{
name|this
operator|.
name|configurationClasses
operator|=
name|configurations
expr_stmt|;
block|}
DECL|method|addConfigurationClass (Class... configuration)
specifier|public
name|void
name|addConfigurationClass
parameter_list|(
name|Class
modifier|...
name|configuration
parameter_list|)
block|{
name|String
name|existing
init|=
name|configurationClasses
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
name|existing
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Class
name|clazz
range|:
name|configuration
control|)
block|{
if|if
condition|(
operator|!
name|existing
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|existing
operator|=
name|existing
operator|+
literal|","
expr_stmt|;
block|}
name|existing
operator|=
name|existing
operator|+
name|clazz
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
name|setConfigurationClasses
argument_list|(
name|existing
argument_list|)
expr_stmt|;
block|}
DECL|method|addConfiguration (Object configuration)
specifier|public
name|void
name|addConfiguration
parameter_list|(
name|Object
name|configuration
parameter_list|)
block|{
name|configurations
operator|.
name|add
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
DECL|method|getRoutesCollector ()
specifier|public
name|RoutesCollector
name|getRoutesCollector
parameter_list|()
block|{
return|return
name|routesCollector
return|;
block|}
comment|/**      * To use a custom {@link RoutesCollector}.      */
DECL|method|setRoutesCollector (RoutesCollector routesCollector)
specifier|public
name|void
name|setRoutesCollector
parameter_list|(
name|RoutesCollector
name|routesCollector
parameter_list|)
block|{
name|this
operator|.
name|routesCollector
operator|=
name|routesCollector
expr_stmt|;
block|}
DECL|method|getRouteBuilderClasses ()
specifier|public
name|String
name|getRouteBuilderClasses
parameter_list|()
block|{
return|return
name|routeBuilderClasses
return|;
block|}
DECL|method|setRouteBuilderClasses (String builders)
specifier|public
name|void
name|setRouteBuilderClasses
parameter_list|(
name|String
name|builders
parameter_list|)
block|{
name|this
operator|.
name|routeBuilderClasses
operator|=
name|builders
expr_stmt|;
block|}
DECL|method|getPropertyPlaceholderLocations ()
specifier|public
name|String
name|getPropertyPlaceholderLocations
parameter_list|()
block|{
return|return
name|propertyPlaceholderLocations
return|;
block|}
comment|/**      * A list of locations to add for loading properties.      * You can use comma to separate multiple locations.      */
DECL|method|setPropertyPlaceholderLocations (String location)
specifier|public
name|void
name|setPropertyPlaceholderLocations
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|propertyPlaceholderLocations
operator|=
name|location
expr_stmt|;
block|}
DECL|method|getDefaultPropertyPlaceholderLocation ()
specifier|public
name|String
name|getDefaultPropertyPlaceholderLocation
parameter_list|()
block|{
return|return
name|defaultPropertyPlaceholderLocation
return|;
block|}
comment|/**      * Set the default location for application properties if no locations have been set.      * If the value is set to "false" or empty, the default location is not taken into account.      *<p/>      * Default value is "classpath:application.properties;optional=true".      */
DECL|method|setDefaultPropertyPlaceholderLocation (String defaultPropertyPlaceholderLocation)
specifier|public
name|void
name|setDefaultPropertyPlaceholderLocation
parameter_list|(
name|String
name|defaultPropertyPlaceholderLocation
parameter_list|)
block|{
name|this
operator|.
name|defaultPropertyPlaceholderLocation
operator|=
name|defaultPropertyPlaceholderLocation
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|isAutoConfigurationEnabled ()
specifier|public
name|boolean
name|isAutoConfigurationEnabled
parameter_list|()
block|{
return|return
name|mainConfigurationProperties
operator|.
name|isAutoConfigurationEnabled
argument_list|()
return|;
block|}
comment|/**      * Whether auto-configuration of components/dataformats/languages is enabled or not.      * When enabled the configuration parameters are loaded from the properties component      * and configured as defaults (similar to spring-boot auto-configuration). You can prefix      * the parameters in the properties file with:      * - camel.component.name.option1=value1      * - camel.component.name.option2=value2      * - camel.dataformat.name.option1=value1      * - camel.dataformat.name.option2=value2      * - camel.language.name.option1=value1      * - camel.language.name.option2=value2      * Where name is the name of the component, dataformat or language such as seda,direct,jaxb.      *<p/>      * The auto-configuration also works for any options on components      * that is a complex type (not standard Java type) and there has been an explicit single      * bean instance registered to the Camel registry via the {@link org.apache.camel.spi.Registry#bind(String, Object)} method      * or by using the {@link org.apache.camel.BindToRegistry} annotation style.      *<p/>      * This option is default enabled.      * @deprecated use {@link #configure()}      */
annotation|@
name|Deprecated
DECL|method|setAutoConfigurationEnabled (boolean autoConfigurationEnabled)
specifier|public
name|void
name|setAutoConfigurationEnabled
parameter_list|(
name|boolean
name|autoConfigurationEnabled
parameter_list|)
block|{
name|mainConfigurationProperties
operator|.
name|setAutoConfigurationEnabled
argument_list|(
name|autoConfigurationEnabled
argument_list|)
expr_stmt|;
block|}
DECL|method|getInitialProperties ()
specifier|public
name|Properties
name|getInitialProperties
parameter_list|()
block|{
return|return
name|initialProperties
return|;
block|}
comment|/**      * Sets initial properties for the properties component,      * which will be used before any locations are resolved.      */
DECL|method|setInitialProperties (Properties initialProperties)
specifier|public
name|void
name|setInitialProperties
parameter_list|(
name|Properties
name|initialProperties
parameter_list|)
block|{
name|this
operator|.
name|initialProperties
operator|=
name|initialProperties
expr_stmt|;
block|}
comment|/**      * Adds a property (initial) for the properties component,      * which will be used before any locations are resolved.      *      * @param key    the property key      * @param value  the property value      *      * @see #addInitialProperty(String, String)      * @see #addOverrideProperty(String, String)      */
DECL|method|addProperty (String key, String value)
specifier|public
name|void
name|addProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|addInitialProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a initial property for the properties component,      * which will be used before any locations are resolved.      *      * @param key    the property key      * @param value  the property value      */
DECL|method|addInitialProperty (String key, String value)
specifier|public
name|void
name|addInitialProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|initialProperties
operator|==
literal|null
condition|)
block|{
name|initialProperties
operator|=
operator|new
name|OrderedProperties
argument_list|()
expr_stmt|;
block|}
name|initialProperties
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getOverrideProperties ()
specifier|public
name|Properties
name|getOverrideProperties
parameter_list|()
block|{
return|return
name|overrideProperties
return|;
block|}
comment|/**      * Sets a special list of override properties that take precedence      * and will use first, if a property exist.      */
DECL|method|setOverrideProperties (Properties overrideProperties)
specifier|public
name|void
name|setOverrideProperties
parameter_list|(
name|Properties
name|overrideProperties
parameter_list|)
block|{
name|this
operator|.
name|overrideProperties
operator|=
name|overrideProperties
expr_stmt|;
block|}
comment|/**      * Adds an override property that take precedence      * and will use first, if a property exist.      *      * @param key    the property key      * @param value  the property value      */
DECL|method|addOverrideProperty (String key, String value)
specifier|public
name|void
name|addOverrideProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|overrideProperties
operator|==
literal|null
condition|)
block|{
name|overrideProperties
operator|=
operator|new
name|OrderedProperties
argument_list|()
expr_stmt|;
block|}
name|overrideProperties
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
comment|/**      * @deprecated use {@link #getRoutesBuilders()}      */
annotation|@
name|Deprecated
DECL|method|getRouteBuilders ()
specifier|public
name|List
argument_list|<
name|RoutesBuilder
argument_list|>
name|getRouteBuilders
parameter_list|()
block|{
return|return
name|getRoutesBuilders
argument_list|()
return|;
block|}
comment|/**      * @deprecated use {@link #setRoutesBuilders(List)} ()}      */
annotation|@
name|Deprecated
DECL|method|setRouteBuilders (List<RoutesBuilder> routeBuilders)
specifier|public
name|void
name|setRouteBuilders
parameter_list|(
name|List
argument_list|<
name|RoutesBuilder
argument_list|>
name|routeBuilders
parameter_list|)
block|{
name|setRoutesBuilders
argument_list|(
name|routeBuilders
argument_list|)
expr_stmt|;
block|}
DECL|method|getRoutesBuilders ()
specifier|public
name|List
argument_list|<
name|RoutesBuilder
argument_list|>
name|getRoutesBuilders
parameter_list|()
block|{
return|return
name|routeBuilders
return|;
block|}
DECL|method|setRoutesBuilders (List<RoutesBuilder> routesBuilders)
specifier|public
name|void
name|setRoutesBuilders
parameter_list|(
name|List
argument_list|<
name|RoutesBuilder
argument_list|>
name|routesBuilders
parameter_list|)
block|{
name|this
operator|.
name|routeBuilders
operator|=
name|routeBuilders
expr_stmt|;
block|}
DECL|method|getConfigurations ()
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getConfigurations
parameter_list|()
block|{
return|return
name|configurations
return|;
block|}
DECL|method|setConfigurations (List<Object> configurations)
specifier|public
name|void
name|setConfigurations
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|configurations
parameter_list|)
block|{
name|this
operator|.
name|configurations
operator|=
name|configurations
expr_stmt|;
block|}
DECL|method|getRouteDefinitions ()
specifier|public
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|getRouteDefinitions
parameter_list|()
block|{
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelContext
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|addAll
argument_list|(
name|camelContext
operator|.
name|getExtension
argument_list|(
name|Model
operator|.
name|class
argument_list|)
operator|.
name|getRouteDefinitions
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getCamelTemplate ()
specifier|public
name|ProducerTemplate
name|getCamelTemplate
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|camelTemplate
operator|==
literal|null
condition|)
block|{
name|camelTemplate
operator|=
name|findOrCreateCamelTemplate
argument_list|()
expr_stmt|;
block|}
return|return
name|camelTemplate
return|;
block|}
DECL|method|findOrCreateCamelTemplate ()
specifier|protected
specifier|abstract
name|ProducerTemplate
name|findOrCreateCamelTemplate
parameter_list|()
function_decl|;
DECL|method|createCamelContext ()
specifier|protected
specifier|abstract
name|CamelContext
name|createCamelContext
parameter_list|()
function_decl|;
DECL|method|initCamelContext ()
specifier|protected
name|void
name|initCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|camelContext
operator|=
name|createCamelContext
argument_list|()
expr_stmt|;
if|if
condition|(
name|camelContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Created CamelContext is null"
argument_list|)
throw|;
block|}
name|postProcessCamelContext
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
DECL|method|loadRouteBuilders (CamelContext camelContext)
specifier|protected
name|void
name|loadRouteBuilders
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
comment|// lets use Camel's bean post processor on any existing route builder classes
comment|// so the instance has some support for dependency injection
name|CamelBeanPostProcessor
name|postProcessor
init|=
name|camelContext
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanPostProcessor
argument_list|()
decl_stmt|;
for|for
control|(
name|RoutesBuilder
name|routeBuilder
range|:
name|getRoutesBuilders
argument_list|()
control|)
block|{
name|postProcessor
operator|.
name|postProcessBeforeInitialization
argument_list|(
name|routeBuilder
argument_list|,
name|routeBuilder
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|postProcessor
operator|.
name|postProcessAfterInitialization
argument_list|(
name|routeBuilder
argument_list|,
name|routeBuilder
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|routeBuilderClasses
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|routeClasses
init|=
name|routeBuilderClasses
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|routeClass
range|:
name|routeClasses
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|routeClazz
init|=
name|camelContext
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
name|routeClass
argument_list|)
decl_stmt|;
comment|// lets use Camel's injector so the class has some support for dependency injection
name|Object
name|builder
init|=
name|camelContext
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|routeClazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|instanceof
name|RouteBuilder
condition|)
block|{
name|getRoutesBuilders
argument_list|()
operator|.
name|add
argument_list|(
operator|(
name|RouteBuilder
operator|)
name|builder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Class {} is not a RouteBuilder class"
argument_list|,
name|routeClazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|mainConfigurationProperties
operator|.
name|getPackageScanRouteBuilders
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|pkgs
init|=
name|mainConfigurationProperties
operator|.
name|getPackageScanRouteBuilders
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|set
init|=
name|camelContext
operator|.
name|getExtension
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getPackageScanClassResolver
argument_list|()
operator|.
name|findImplementations
argument_list|(
name|RoutesBuilder
operator|.
name|class
argument_list|,
name|pkgs
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|routeClazz
range|:
name|set
control|)
block|{
name|Object
name|builder
init|=
name|camelContext
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|routeClazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|instanceof
name|RouteBuilder
condition|)
block|{
name|getRoutesBuilders
argument_list|()
operator|.
name|add
argument_list|(
operator|(
name|RouteBuilder
operator|)
name|builder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Class {} is not a RouteBuilder class"
argument_list|,
name|routeClazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|loadConfigurations (CamelContext camelContext)
specifier|protected
name|void
name|loadConfigurations
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
comment|// lets use Camel's bean post processor on any existing configuration classes
comment|// so the instance has some support for dependency injection
name|CamelBeanPostProcessor
name|postProcessor
init|=
name|camelContext
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getBeanPostProcessor
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|configuration
range|:
name|getConfigurations
argument_list|()
control|)
block|{
name|postProcessor
operator|.
name|postProcessBeforeInitialization
argument_list|(
name|configuration
argument_list|,
name|configuration
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|postProcessor
operator|.
name|postProcessAfterInitialization
argument_list|(
name|configuration
argument_list|,
name|configuration
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configurationClasses
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|configClasses
init|=
name|configurationClasses
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|configClass
range|:
name|configClasses
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|configClazz
init|=
name|camelContext
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveClass
argument_list|(
name|configClass
argument_list|)
decl_stmt|;
comment|// lets use Camel's injector so the class has some support for dependency injection
name|Object
name|config
init|=
name|camelContext
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|configClazz
argument_list|)
decl_stmt|;
name|getConfigurations
argument_list|()
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Object
name|config
range|:
name|getConfigurations
argument_list|()
control|)
block|{
comment|// invoke configure method if exists
name|Method
name|method
init|=
name|findMethod
argument_list|(
name|config
operator|.
name|getClass
argument_list|()
argument_list|,
literal|"configure"
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Calling configure method on configuration class: {}"
argument_list|,
name|config
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|postProcessCamelContext (CamelContext camelContext)
specifier|protected
name|void
name|postProcessCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|propertyPlaceholderLocations
operator|!=
literal|null
condition|)
block|{
name|PropertiesComponent
name|pc
init|=
name|camelContext
operator|.
name|getPropertiesComponent
argument_list|()
decl_stmt|;
name|pc
operator|.
name|addLocation
argument_list|(
name|propertyPlaceholderLocations
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using properties from: {}"
argument_list|,
name|propertyPlaceholderLocations
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|defaultPropertyPlaceholderLocation
argument_list|)
operator|&&
operator|!
name|ObjectHelper
operator|.
name|equal
argument_list|(
literal|"false"
argument_list|,
name|defaultPropertyPlaceholderLocation
argument_list|)
condition|)
block|{
comment|// lets default to defaultPropertyPlaceholderLocation if
comment|// there are no existing locations configured
name|PropertiesComponent
name|pc
init|=
name|camelContext
operator|.
name|getPropertiesComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|pc
operator|.
name|getLocations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pc
operator|.
name|addLocation
argument_list|(
name|defaultPropertyPlaceholderLocation
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Using properties from {}"
argument_list|,
name|defaultPropertyPlaceholderLocation
argument_list|)
expr_stmt|;
block|}
name|PropertiesComponent
name|pc
init|=
name|camelContext
operator|.
name|getPropertiesComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|initialProperties
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|setInitialProperties
argument_list|(
name|initialProperties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|overrideProperties
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|setOverrideProperties
argument_list|(
name|overrideProperties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mainConfigurationProperties
operator|.
name|getDurationMaxMessages
argument_list|()
operator|>
literal|0
operator|||
name|mainConfigurationProperties
operator|.
name|getDurationMaxIdleSeconds
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// register lifecycle so we can trigger to shutdown the JVM when maximum number of messages has been processed
name|EventNotifier
name|notifier
init|=
operator|new
name|MainDurationEventNotifier
argument_list|(
name|camelContext
argument_list|,
name|mainConfigurationProperties
operator|.
name|getDurationMaxMessages
argument_list|()
argument_list|,
name|mainConfigurationProperties
operator|.
name|getDurationMaxIdleSeconds
argument_list|()
argument_list|,
name|completed
argument_list|,
name|latch
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// register our event notifier
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|addEventNotifier
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
block|}
comment|// gathers the properties (key=value) that was auto-configured
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|autoConfiguredProperties
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// need to eager allow to auto-configure properties component
if|if
condition|(
name|mainConfigurationProperties
operator|.
name|isAutoConfigurationEnabled
argument_list|()
condition|)
block|{
name|autoConfigurationFailFast
argument_list|(
name|camelContext
argument_list|,
name|autoConfiguredProperties
argument_list|)
expr_stmt|;
name|autoConfigurationPropertiesComponent
argument_list|(
name|camelContext
argument_list|,
name|autoConfiguredProperties
argument_list|)
expr_stmt|;
name|autoConfigurationMainConfiguration
argument_list|(
name|camelContext
argument_list|,
name|mainConfigurationProperties
argument_list|,
name|autoConfiguredProperties
argument_list|)
expr_stmt|;
block|}
comment|// configure from main configuration properties
name|doConfigureCamelContextFromMainConfiguration
argument_list|(
name|camelContext
argument_list|,
name|mainConfigurationProperties
argument_list|,
name|autoConfiguredProperties
argument_list|)
expr_stmt|;
comment|// try to load configuration classes
name|loadConfigurations
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
comment|// conventional configuration via properties to allow configuring options on
comment|// component, dataformat, and languages (like spring-boot auto-configuration)
if|if
condition|(
name|mainConfigurationProperties
operator|.
name|isAutowireComponentProperties
argument_list|()
operator|||
name|mainConfigurationProperties
operator|.
name|isAutowireComponentPropertiesDeep
argument_list|()
condition|)
block|{
name|autowireConfigurationFromRegistry
argument_list|(
name|camelContext
argument_list|,
name|mainConfigurationProperties
operator|.
name|isAutowireComponentPropertiesNonNullOnly
argument_list|()
argument_list|,
name|mainConfigurationProperties
operator|.
name|isAutowireComponentPropertiesDeep
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mainConfigurationProperties
operator|.
name|isAutoConfigurationEnabled
argument_list|()
condition|)
block|{
name|autoConfigurationFromProperties
argument_list|(
name|camelContext
argument_list|,
name|autoConfiguredProperties
argument_list|)
expr_stmt|;
block|}
comment|// tracing may be enabled by some other property (i.e. camel.context.tracer.exchange-formatter.show-headers)
if|if
condition|(
name|camelContext
operator|.
name|isTracing
argument_list|()
operator|&&
operator|!
name|mainConfigurationProperties
operator|.
name|isTracing
argument_list|()
condition|)
block|{
name|camelContext
operator|.
name|setTracing
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
comment|// log summary of configurations
if|if
condition|(
name|mainConfigurationProperties
operator|.
name|isAutoConfigurationLogSummary
argument_list|()
operator|&&
operator|!
name|autoConfiguredProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Auto-configuration summary:"
argument_list|)
expr_stmt|;
name|autoConfiguredProperties
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|boolean
name|sensitive
init|=
name|k
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|contains
argument_list|(
literal|"password"
argument_list|)
operator|||
name|k
operator|.
name|contains
argument_list|(
literal|"secret"
argument_list|)
operator|||
name|k
operator|.
name|contains
argument_list|(
literal|"passphrase"
argument_list|)
operator|||
name|k
operator|.
name|contains
argument_list|(
literal|"token"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sensitive
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\t{}=xxxxxx"
argument_list|,
name|k
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\t{}={}"
argument_list|,
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// try to load the route builders
name|loadRouteBuilders
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
comment|// then configure and add the routes
name|RoutesConfigurer
name|configurer
init|=
operator|new
name|RoutesConfigurer
argument_list|(
name|routesCollector
argument_list|,
name|routeBuilders
argument_list|)
decl_stmt|;
name|configurer
operator|.
name|configureRoutes
argument_list|(
name|camelContext
argument_list|,
name|mainConfigurationProperties
argument_list|)
expr_stmt|;
comment|// register lifecycle so we are notified in Camel is stopped from JMX or somewhere else
name|camelContext
operator|.
name|addLifecycleStrategy
argument_list|(
operator|new
name|MainLifecycleStrategy
argument_list|(
name|completed
argument_list|,
name|latch
argument_list|)
argument_list|)
expr_stmt|;
comment|// allow to do configuration before its started
for|for
control|(
name|MainListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|configure
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|autoConfigurationFailFast (CamelContext camelContext, Map<String, String> autoConfiguredProperties)
specifier|protected
name|void
name|autoConfigurationFailFast
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|autoConfiguredProperties
parameter_list|)
throws|throws
name|Exception
block|{
comment|// load properties
name|Properties
name|prop
init|=
name|camelContext
operator|.
name|getPropertiesComponent
argument_list|()
operator|.
name|loadProperties
argument_list|(
name|name
lambda|->
name|name
operator|.
name|startsWith
argument_list|(
literal|"camel."
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Properties from Camel properties component:"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|prop
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"    {}={}"
argument_list|,
name|key
argument_list|,
name|prop
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// special for environment-variable-enbaled as we need to know this early before we set all the other options
name|Object
name|envEnabled
init|=
name|prop
operator|.
name|remove
argument_list|(
literal|"camel.main.autoConfigurationEnvironmentVariablesEnabled"
argument_list|)
decl_stmt|;
if|if
condition|(
name|envEnabled
operator|==
literal|null
condition|)
block|{
name|envEnabled
operator|=
name|prop
operator|.
name|remove
argument_list|(
literal|"camel.main.auto-configuration-environment-variables-enabled"
argument_list|)
expr_stmt|;
if|if
condition|(
name|envEnabled
operator|!=
literal|null
condition|)
block|{
name|PropertyBindingSupport
operator|.
name|build
argument_list|()
operator|.
name|withMandatory
argument_list|(
literal|true
argument_list|)
operator|.
name|withIgnoreCase
argument_list|(
literal|true
argument_list|)
operator|.
name|bind
argument_list|(
name|camelContext
argument_list|,
name|mainConfigurationProperties
argument_list|,
literal|"autoConfigurationEnvironmentVariablesEnabled"
argument_list|,
name|envEnabled
argument_list|)
expr_stmt|;
name|autoConfiguredProperties
operator|.
name|put
argument_list|(
literal|"camel.main.auto-configuration-environment-variables-enabled"
argument_list|,
name|envEnabled
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// load properties from ENV (override existing)
name|Properties
name|propENV
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mainConfigurationProperties
operator|.
name|isAutoConfigurationEnvironmentVariablesEnabled
argument_list|()
condition|)
block|{
name|propENV
operator|=
name|loadEnvironmentVariablesAsProperties
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"camel.main."
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|propENV
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|prop
operator|.
name|putAll
argument_list|(
name|propENV
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Properties from OS environment variables:"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|propENV
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"    {}={}"
argument_list|,
name|key
argument_list|,
name|propENV
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// special for fail-fast as we need to know this early before we set all the other options
name|Object
name|failFast
init|=
name|propENV
operator|!=
literal|null
condition|?
name|propENV
operator|.
name|remove
argument_list|(
literal|"camel.main.autoconfigurationfailfast"
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|failFast
operator|!=
literal|null
condition|)
block|{
name|PropertyBindingSupport
operator|.
name|build
argument_list|()
operator|.
name|withMandatory
argument_list|(
literal|true
argument_list|)
operator|.
name|withIgnoreCase
argument_list|(
literal|true
argument_list|)
operator|.
name|bind
argument_list|(
name|camelContext
argument_list|,
name|mainConfigurationProperties
argument_list|,
literal|"autoConfigurationFailFast"
argument_list|,
name|failFast
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failFast
operator|=
name|prop
operator|.
name|remove
argument_list|(
literal|"camel.main.autoConfigurationFailFast"
argument_list|)
expr_stmt|;
if|if
condition|(
name|failFast
operator|==
literal|null
condition|)
block|{
name|failFast
operator|=
name|prop
operator|.
name|remove
argument_list|(
literal|"camel.main.auto-configuration-fail-fast"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|failFast
operator|!=
literal|null
condition|)
block|{
name|PropertyBindingSupport
operator|.
name|build
argument_list|()
operator|.
name|withMandatory
argument_list|(
literal|true
argument_list|)
operator|.
name|withIgnoreCase
argument_list|(
literal|true
argument_list|)
operator|.
name|bind
argument_list|(
name|camelContext
argument_list|,
name|mainConfigurationProperties
argument_list|,
literal|"autoConfigurationFailFast"
argument_list|,
name|failFast
argument_list|)
expr_stmt|;
name|autoConfiguredProperties
operator|.
name|put
argument_list|(
literal|"camel.main.auto-configuration-fail-fast"
argument_list|,
name|failFast
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Configures CamelContext from the {@link MainConfigurationProperties} properties.      */
DECL|method|doConfigureCamelContextFromMainConfiguration (CamelContext camelContext, MainConfigurationProperties config, Map<String, String> autoConfiguredProperties)
specifier|protected
name|void
name|doConfigureCamelContextFromMainConfiguration
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|MainConfigurationProperties
name|config
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|autoConfiguredProperties
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|config
operator|.
name|getFileConfigurations
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|locs
init|=
name|config
operator|.
name|getFileConfigurations
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|loc
range|:
name|locs
control|)
block|{
name|String
name|path
init|=
name|FileUtil
operator|.
name|onlyPath
argument_list|(
name|loc
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|String
name|pattern
init|=
name|loc
operator|.
name|length
argument_list|()
operator|>
name|path
operator|.
name|length
argument_list|()
condition|?
name|loc
operator|.
name|substring
argument_list|(
name|path
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
else|:
literal|null
decl_stmt|;
name|File
index|[]
name|files
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|listFiles
argument_list|(
name|f
lambda|->
name|matches
argument_list|(
name|pattern
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
init|(
name|FileInputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|props
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|overrideProperties
operator|==
literal|null
condition|)
block|{
comment|// setup override properties on properties component
name|overrideProperties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|PropertiesComponent
name|pc
init|=
name|camelContext
operator|.
name|getPropertiesComponent
argument_list|()
decl_stmt|;
name|pc
operator|.
name|setOverrideProperties
argument_list|(
name|overrideProperties
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded additional {} properties from file: {}"
argument_list|,
name|props
operator|.
name|size
argument_list|()
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|overrideProperties
operator|.
name|putAll
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|// configure the common/default options
name|DefaultConfigurationConfigurer
operator|.
name|configure
argument_list|(
name|camelContext
argument_list|,
name|config
argument_list|)
expr_stmt|;
comment|// lookup and configure SPI beans
name|DefaultConfigurationConfigurer
operator|.
name|afterPropertiesSet
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
comment|// now configure context/hystrix/resilience4j/rest with additional properties
name|Properties
name|prop
init|=
name|camelContext
operator|.
name|getPropertiesComponent
argument_list|()
operator|.
name|loadProperties
argument_list|(
name|name
lambda|->
name|name
operator|.
name|startsWith
argument_list|(
literal|"camel."
argument_list|)
argument_list|)
decl_stmt|;
comment|// load properties from ENV (override existing)
if|if
condition|(
name|mainConfigurationProperties
operator|.
name|isAutoConfigurationEnvironmentVariablesEnabled
argument_list|()
condition|)
block|{
name|Properties
name|propENV
init|=
name|loadEnvironmentVariablesAsProperties
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"camel.component.properties."
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propENV
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|prop
operator|.
name|putAll
argument_list|(
name|propENV
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Properties from OS environment variables:"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|propENV
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"    {}={}"
argument_list|,
name|key
argument_list|,
name|propENV
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|contextProperties
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|hystrixProperties
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|resilience4jProperties
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|restProperties
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|prop
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"camel.context."
argument_list|)
condition|)
block|{
comment|// grab the value
name|String
name|value
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|option
init|=
name|key
operator|.
name|substring
argument_list|(
literal|14
argument_list|)
decl_stmt|;
name|validateOptionAndValue
argument_list|(
name|key
argument_list|,
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|contextProperties
operator|.
name|put
argument_list|(
name|optionKey
argument_list|(
name|option
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"camel.hystrix."
argument_list|)
condition|)
block|{
comment|// grab the value
name|String
name|value
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|option
init|=
name|key
operator|.
name|substring
argument_list|(
literal|14
argument_list|)
decl_stmt|;
name|validateOptionAndValue
argument_list|(
name|key
argument_list|,
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|hystrixProperties
operator|.
name|put
argument_list|(
name|optionKey
argument_list|(
name|option
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"camel.resilience4j."
argument_list|)
condition|)
block|{
comment|// grab the value
name|String
name|value
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|option
init|=
name|key
operator|.
name|substring
argument_list|(
literal|19
argument_list|)
decl_stmt|;
name|validateOptionAndValue
argument_list|(
name|key
argument_list|,
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|resilience4jProperties
operator|.
name|put
argument_list|(
name|optionKey
argument_list|(
name|option
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"camel.rest."
argument_list|)
condition|)
block|{
comment|// grab the value
name|String
name|value
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|option
init|=
name|key
operator|.
name|substring
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|validateOptionAndValue
argument_list|(
name|key
argument_list|,
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|restProperties
operator|.
name|put
argument_list|(
name|optionKey
argument_list|(
name|option
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|contextProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Auto-configuring CamelContext from loaded properties: {}"
argument_list|,
name|contextProperties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|setPropertiesOnTarget
argument_list|(
name|camelContext
argument_list|,
name|camelContext
argument_list|,
name|contextProperties
argument_list|,
literal|"camel.context."
argument_list|,
name|mainConfigurationProperties
operator|.
name|isAutoConfigurationFailFast
argument_list|()
argument_list|,
literal|true
argument_list|,
name|autoConfiguredProperties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hystrixProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Auto-configuring Hystrix Circuit Breaker EIP from loaded properties: {}"
argument_list|,
name|hystrixProperties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ModelCamelContext
name|model
init|=
name|camelContext
operator|.
name|adapt
argument_list|(
name|ModelCamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|HystrixConfigurationDefinition
name|hystrix
init|=
name|model
operator|.
name|getHystrixConfiguration
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|hystrix
operator|==
literal|null
condition|)
block|{
name|hystrix
operator|=
operator|new
name|HystrixConfigurationDefinition
argument_list|()
expr_stmt|;
name|model
operator|.
name|setHystrixConfiguration
argument_list|(
name|hystrix
argument_list|)
expr_stmt|;
block|}
name|setPropertiesOnTarget
argument_list|(
name|camelContext
argument_list|,
name|hystrix
argument_list|,
name|hystrixProperties
argument_list|,
literal|"camel.hystrix."
argument_list|,
name|mainConfigurationProperties
operator|.
name|isAutoConfigurationFailFast
argument_list|()
argument_list|,
literal|true
argument_list|,
name|autoConfiguredProperties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|resilience4jProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Auto-configuring Resilience4j Circuit Breaker EIP from loaded properties: {}"
argument_list|,
name|resilience4jProperties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ModelCamelContext
name|model
init|=
name|camelContext
operator|.
name|adapt
argument_list|(
name|ModelCamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Resilience4jConfigurationDefinition
name|resilience4j
init|=
name|model
operator|.
name|getResilience4jConfiguration
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|resilience4j
operator|==
literal|null
condition|)
block|{
name|resilience4j
operator|=
operator|new
name|Resilience4jConfigurationDefinition
argument_list|()
expr_stmt|;
name|model
operator|.
name|setResilience4jConfiguration
argument_list|(
name|resilience4j
argument_list|)
expr_stmt|;
block|}
name|setPropertiesOnTarget
argument_list|(
name|camelContext
argument_list|,
name|resilience4j
argument_list|,
name|resilience4jProperties
argument_list|,
literal|"camel.resilience4j."
argument_list|,
name|mainConfigurationProperties
operator|.
name|isAutoConfigurationFailFast
argument_list|()
argument_list|,
literal|true
argument_list|,
name|autoConfiguredProperties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|restProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Auto-configuring Rest DSL from loaded properties: {}"
argument_list|,
name|restProperties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ModelCamelContext
name|model
init|=
name|camelContext
operator|.
name|adapt
argument_list|(
name|ModelCamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|RestConfiguration
name|rest
init|=
name|model
operator|.
name|getRestConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|rest
operator|==
literal|null
condition|)
block|{
name|rest
operator|=
operator|new
name|RestConfiguration
argument_list|()
expr_stmt|;
name|model
operator|.
name|setRestConfiguration
argument_list|(
name|rest
argument_list|)
expr_stmt|;
block|}
name|setPropertiesOnTarget
argument_list|(
name|camelContext
argument_list|,
name|rest
argument_list|,
name|restProperties
argument_list|,
literal|"camel.rest."
argument_list|,
name|mainConfigurationProperties
operator|.
name|isAutoConfigurationFailFast
argument_list|()
argument_list|,
literal|true
argument_list|,
name|autoConfiguredProperties
argument_list|)
expr_stmt|;
block|}
comment|// log which options was not set
if|if
condition|(
operator|!
name|contextProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|contextProperties
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Property not auto-configured: camel.context.{}={} on bean: {}"
argument_list|,
name|k
argument_list|,
name|v
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hystrixProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ModelCamelContext
name|model
init|=
name|camelContext
operator|.
name|adapt
argument_list|(
name|ModelCamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|HystrixConfigurationDefinition
name|hystrix
init|=
name|model
operator|.
name|getHystrixConfiguration
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|hystrixProperties
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Property not auto-configured: camel.hystrix.{}={} on bean: {}"
argument_list|,
name|k
argument_list|,
name|v
argument_list|,
name|hystrix
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|resilience4jProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ModelCamelContext
name|model
init|=
name|camelContext
operator|.
name|adapt
argument_list|(
name|ModelCamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Resilience4jConfigurationDefinition
name|resilience4j
init|=
name|model
operator|.
name|getResilience4jConfiguration
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|resilience4jProperties
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Property not auto-configured: camel.resilience4j.{}={} on bean: {}"
argument_list|,
name|k
argument_list|,
name|v
argument_list|,
name|resilience4j
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|restProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ModelCamelContext
name|model
init|=
name|camelContext
operator|.
name|adapt
argument_list|(
name|ModelCamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|RestConfiguration
name|rest
init|=
name|model
operator|.
name|getRestConfiguration
argument_list|()
decl_stmt|;
name|restProperties
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Property not auto-configured: camel.rest.{}={} on bean: {}"
argument_list|,
name|k
argument_list|,
name|v
argument_list|,
name|rest
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|autoConfigurationPropertiesComponent (CamelContext camelContext, Map<String, String> autoConfiguredProperties)
specifier|protected
name|void
name|autoConfigurationPropertiesComponent
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|autoConfiguredProperties
parameter_list|)
throws|throws
name|Exception
block|{
comment|// load properties
name|Properties
name|prop
init|=
name|camelContext
operator|.
name|getPropertiesComponent
argument_list|()
operator|.
name|loadProperties
argument_list|(
name|name
lambda|->
name|name
operator|.
name|startsWith
argument_list|(
literal|"camel."
argument_list|)
argument_list|)
decl_stmt|;
comment|// load properties from ENV (override existing)
if|if
condition|(
name|mainConfigurationProperties
operator|.
name|isAutoConfigurationEnvironmentVariablesEnabled
argument_list|()
condition|)
block|{
name|Properties
name|propENV
init|=
name|loadEnvironmentVariablesAsProperties
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"camel.component.properties."
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propENV
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|prop
operator|.
name|putAll
argument_list|(
name|propENV
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|prop
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"camel.component.properties."
argument_list|)
condition|)
block|{
name|int
name|dot
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|,
literal|26
argument_list|)
decl_stmt|;
name|String
name|option
init|=
name|dot
operator|==
operator|-
literal|1
condition|?
literal|""
else|:
name|key
operator|.
name|substring
argument_list|(
name|dot
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|key
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|validateOptionAndValue
argument_list|(
name|key
argument_list|,
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|optionKey
argument_list|(
name|option
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Auto-configuring properties component from loaded properties: {}"
argument_list|,
name|properties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|setPropertiesOnTarget
argument_list|(
name|camelContext
argument_list|,
name|camelContext
operator|.
name|getPropertiesComponent
argument_list|()
argument_list|,
name|properties
argument_list|,
literal|"camel.component.properties."
argument_list|,
name|mainConfigurationProperties
operator|.
name|isAutoConfigurationFailFast
argument_list|()
argument_list|,
literal|true
argument_list|,
name|autoConfiguredProperties
argument_list|)
expr_stmt|;
block|}
comment|// log which options was not set
if|if
condition|(
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|properties
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Property not auto-configured: camel.component.properties.{}={} on object: {}"
argument_list|,
name|k
argument_list|,
name|v
argument_list|,
name|camelContext
operator|.
name|getPropertiesComponent
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|autoConfigurationMainConfiguration (CamelContext camelContext, MainConfigurationProperties config, Map<String, String> autoConfiguredProperties)
specifier|protected
name|void
name|autoConfigurationMainConfiguration
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|MainConfigurationProperties
name|config
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|autoConfiguredProperties
parameter_list|)
throws|throws
name|Exception
block|{
comment|// load properties
name|Properties
name|prop
init|=
name|camelContext
operator|.
name|getPropertiesComponent
argument_list|()
operator|.
name|loadProperties
argument_list|(
name|name
lambda|->
name|name
operator|.
name|startsWith
argument_list|(
literal|"camel."
argument_list|)
argument_list|)
decl_stmt|;
comment|// load properties from ENV (override existing)
if|if
condition|(
name|mainConfigurationProperties
operator|.
name|isAutoConfigurationEnvironmentVariablesEnabled
argument_list|()
condition|)
block|{
name|Properties
name|propENV
init|=
name|loadEnvironmentVariablesAsProperties
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"camel.main."
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propENV
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|prop
operator|.
name|putAll
argument_list|(
name|propENV
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|prop
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"camel.main."
argument_list|)
condition|)
block|{
comment|// grab the value
name|String
name|value
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|option
init|=
name|key
operator|.
name|substring
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|validateOptionAndValue
argument_list|(
name|key
argument_list|,
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|optionKey
argument_list|(
name|option
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Auto-configuring main from loaded properties: {}"
argument_list|,
name|properties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|setPropertiesOnTarget
argument_list|(
name|camelContext
argument_list|,
name|config
argument_list|,
name|properties
argument_list|,
literal|"camel.main."
argument_list|,
name|mainConfigurationProperties
operator|.
name|isAutoConfigurationFailFast
argument_list|()
argument_list|,
literal|true
argument_list|,
name|autoConfiguredProperties
argument_list|)
expr_stmt|;
block|}
comment|// log which options was not set
if|if
condition|(
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|properties
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Property not auto-configured: camel.main.{}={} on bean: {}"
argument_list|,
name|k
argument_list|,
name|v
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|autoConfigurationFromProperties (CamelContext camelContext, Map<String, String> autoConfiguredProperties)
specifier|protected
name|void
name|autoConfigurationFromProperties
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|autoConfiguredProperties
parameter_list|)
throws|throws
name|Exception
block|{
comment|// load optional META-INF/services/org/apache/camel/autowire.properties
name|Properties
name|prop
init|=
operator|new
name|OrderedProperties
argument_list|()
decl_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
name|camelContext
operator|.
name|getClassResolver
argument_list|()
operator|.
name|loadResourceAsStream
argument_list|(
literal|"/META-INF/services/org/apache/camel/autowire.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|prop
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|prop
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Autowired enabled from classpath: META-INF/services/org/apache/camel/autowire.properties with {} properties"
argument_list|,
name|prop
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Properties from classpath: META-INF/services/org/apache/camel/autowire.properties:"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|prop
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"    {}={}"
argument_list|,
name|key
argument_list|,
name|prop
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore as this file is optional
block|}
comment|// load properties from properties component (override existing)
name|Properties
name|propPC
init|=
name|camelContext
operator|.
name|getPropertiesComponent
argument_list|()
operator|.
name|loadProperties
argument_list|(
name|name
lambda|->
name|name
operator|.
name|startsWith
argument_list|(
literal|"camel."
argument_list|)
argument_list|)
decl_stmt|;
name|prop
operator|.
name|putAll
argument_list|(
name|propPC
argument_list|)
expr_stmt|;
comment|// load properties from ENV (override existing)
if|if
condition|(
name|mainConfigurationProperties
operator|.
name|isAutoConfigurationEnvironmentVariablesEnabled
argument_list|()
condition|)
block|{
name|Properties
name|propENV
init|=
name|loadEnvironmentVariablesAsProperties
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"camel.component."
block|,
literal|"camel.dataformat."
block|,
literal|"camel.language."
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propENV
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|prop
operator|.
name|putAll
argument_list|(
name|propENV
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|PropertyOptionKey
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|properties
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|prop
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|computeProperties
argument_list|(
literal|"camel.component."
argument_list|,
name|key
argument_list|,
name|prop
argument_list|,
name|properties
argument_list|,
name|name
lambda|->
block|{
name|Component
name|target
init|=
name|camelContext
operator|.
name|getComponent
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error configuring property: "
operator|+
name|key
operator|+
literal|" because cannot find component with name "
operator|+
name|name
operator|+
literal|". Make sure you have the component on the classpath"
argument_list|)
throw|;
block|}
return|return
name|target
return|;
block|}
argument_list|)
expr_stmt|;
name|computeProperties
argument_list|(
literal|"camel.dataformat."
argument_list|,
name|key
argument_list|,
name|prop
argument_list|,
name|properties
argument_list|,
name|name
lambda|->
block|{
name|DataFormat
name|target
init|=
name|camelContext
operator|.
name|resolveDataFormat
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error configuring property: "
operator|+
name|key
operator|+
literal|" because cannot find dataformat with name "
operator|+
name|name
operator|+
literal|". Make sure you have the dataformat on the classpath"
argument_list|)
throw|;
block|}
return|return
name|target
return|;
block|}
argument_list|)
expr_stmt|;
name|computeProperties
argument_list|(
literal|"camel.language."
argument_list|,
name|key
argument_list|,
name|prop
argument_list|,
name|properties
argument_list|,
name|name
lambda|->
block|{
name|Language
name|target
decl_stmt|;
try|try
block|{
name|target
operator|=
name|camelContext
operator|.
name|resolveLanguage
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchLanguageException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error configuring property: "
operator|+
name|key
operator|+
literal|" because cannot find language with name "
operator|+
name|name
operator|+
literal|". Make sure you have the language on the classpath"
argument_list|)
throw|;
block|}
return|return
name|target
return|;
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|long
name|total
init|=
name|properties
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|Map
operator|::
name|size
argument_list|)
operator|.
name|sum
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Auto-configuring {} components/dataformat/languages from loaded properties: {}"
argument_list|,
name|properties
operator|.
name|size
argument_list|()
argument_list|,
name|total
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|PropertyOptionKey
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|setPropertiesOnTarget
argument_list|(
name|camelContext
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getInstance
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getOptionPrefix
argument_list|()
argument_list|,
name|mainConfigurationProperties
operator|.
name|isAutoConfigurationFailFast
argument_list|()
argument_list|,
literal|true
argument_list|,
name|autoConfiguredProperties
argument_list|)
expr_stmt|;
block|}
comment|// log which options was not set
if|if
condition|(
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|PropertyOptionKey
name|pok
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
name|properties
operator|.
name|get
argument_list|(
name|pok
argument_list|)
decl_stmt|;
name|values
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|String
name|stringValue
init|=
name|v
operator|!=
literal|null
condition|?
name|v
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Property ({}={}) not auto-configured with name: {} on bean: {} with value: {}"
argument_list|,
name|pok
operator|.
name|getOptionPrefix
argument_list|()
operator|+
literal|"."
operator|+
name|k
argument_list|,
name|stringValue
argument_list|,
name|k
argument_list|,
name|pok
operator|.
name|getInstance
argument_list|()
argument_list|,
name|stringValue
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|autowireConfigurationFromRegistry (CamelContext camelContext, boolean bindNullOnly, boolean deepNesting)
specifier|protected
name|void
name|autowireConfigurationFromRegistry
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|boolean
name|bindNullOnly
parameter_list|,
name|boolean
name|deepNesting
parameter_list|)
throws|throws
name|Exception
block|{
name|camelContext
operator|.
name|addLifecycleStrategy
argument_list|(
operator|new
name|LifecycleStrategySupport
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onComponentAdd
parameter_list|(
name|String
name|name
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
name|PropertyBindingSupport
operator|.
name|autowireSingletonPropertiesFromRegistry
argument_list|(
name|camelContext
argument_list|,
name|component
argument_list|,
name|bindNullOnly
argument_list|,
name|deepNesting
argument_list|,
parameter_list|(
name|obj
parameter_list|,
name|propertyName
parameter_list|,
name|type
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Autowired property: {} on component: {} as exactly one instance of type: {} found in the registry"
argument_list|,
name|propertyName
argument_list|,
name|component
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|validateOptionAndValue (String key, String option, String value)
specifier|protected
specifier|static
name|void
name|validateOptionAndValue
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|option
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|option
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error configuring property: "
operator|+
name|key
operator|+
literal|" because option is empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error configuring property: "
operator|+
name|key
operator|+
literal|" because value is empty"
argument_list|)
throw|;
block|}
block|}
comment|/**      * @deprecated use {@link #addRoutesBuilder(RoutesBuilder)}      */
annotation|@
name|Deprecated
DECL|method|addRouteBuilder (RoutesBuilder routeBuilder)
specifier|public
name|void
name|addRouteBuilder
parameter_list|(
name|RoutesBuilder
name|routeBuilder
parameter_list|)
block|{
name|getRoutesBuilders
argument_list|()
operator|.
name|add
argument_list|(
name|routeBuilder
argument_list|)
expr_stmt|;
block|}
DECL|method|addRoutesBuilder (RoutesBuilder routeBuilder)
specifier|public
name|void
name|addRoutesBuilder
parameter_list|(
name|RoutesBuilder
name|routeBuilder
parameter_list|)
block|{
name|getRoutesBuilders
argument_list|()
operator|.
name|add
argument_list|(
name|routeBuilder
argument_list|)
expr_stmt|;
block|}
DECL|method|addRouteBuilder (Class... routeBuilder)
specifier|public
name|void
name|addRouteBuilder
parameter_list|(
name|Class
modifier|...
name|routeBuilder
parameter_list|)
block|{
name|String
name|existing
init|=
name|routeBuilderClasses
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
name|existing
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|routeBuilder
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Class
name|clazz
range|:
name|routeBuilder
control|)
block|{
if|if
condition|(
operator|!
name|existing
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|existing
operator|=
name|existing
operator|+
literal|","
expr_stmt|;
block|}
name|existing
operator|=
name|existing
operator|+
name|clazz
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
name|setRouteBuilderClasses
argument_list|(
name|existing
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a {@link MainListener} to receive callbacks when the main is started or stopping      *      * @param listener the listener      */
DECL|method|addMainListener (MainListener listener)
specifier|public
name|void
name|addMainListener
parameter_list|(
name|MainListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes the {@link MainListener}      *      * @param listener the listener      */
DECL|method|removeMainListener (MainListener listener)
specifier|public
name|void
name|removeMainListener
parameter_list|(
name|MainListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|class|PropertyOptionKey
specifier|private
specifier|static
specifier|final
class|class
name|PropertyOptionKey
block|{
DECL|field|instance
specifier|private
specifier|final
name|Object
name|instance
decl_stmt|;
DECL|field|optionPrefix
specifier|private
specifier|final
name|String
name|optionPrefix
decl_stmt|;
DECL|method|PropertyOptionKey (Object instance, String optionPrefix)
specifier|private
name|PropertyOptionKey
parameter_list|(
name|Object
name|instance
parameter_list|,
name|String
name|optionPrefix
parameter_list|)
block|{
name|this
operator|.
name|instance
operator|=
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|instance
argument_list|,
literal|"instance"
argument_list|)
expr_stmt|;
name|this
operator|.
name|optionPrefix
operator|=
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|optionPrefix
argument_list|,
literal|"optionPrefix"
argument_list|)
expr_stmt|;
block|}
DECL|method|getInstance ()
specifier|public
name|Object
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
DECL|method|getOptionPrefix ()
specifier|public
name|String
name|getOptionPrefix
parameter_list|()
block|{
return|return
name|optionPrefix
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|PropertyOptionKey
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PropertyOptionKey
name|key
init|=
operator|(
name|PropertyOptionKey
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|instance
argument_list|,
name|key
operator|.
name|instance
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|optionPrefix
argument_list|,
name|key
operator|.
name|optionPrefix
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|instance
argument_list|,
name|optionPrefix
argument_list|)
return|;
block|}
block|}
DECL|method|computeProperties (String keyPrefix, String key, Properties prop, Map<PropertyOptionKey, Map<String, Object>> properties, Function<String, Object> supplier)
specifier|public
specifier|static
name|void
name|computeProperties
parameter_list|(
name|String
name|keyPrefix
parameter_list|,
name|String
name|key
parameter_list|,
name|Properties
name|prop
parameter_list|,
name|Map
argument_list|<
name|PropertyOptionKey
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|properties
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|supplier
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|keyPrefix
argument_list|)
condition|)
block|{
comment|// grab name
specifier|final
name|int
name|dot
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|,
name|keyPrefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|dot
operator|==
operator|-
literal|1
condition|?
name|key
operator|.
name|substring
argument_list|(
name|keyPrefix
operator|.
name|length
argument_list|()
argument_list|)
else|:
name|key
operator|.
name|substring
argument_list|(
name|keyPrefix
operator|.
name|length
argument_list|()
argument_list|,
name|dot
argument_list|)
decl_stmt|;
comment|// enabled is a virtual property
if|if
condition|(
literal|"enabled"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// skip properties as its already keyPrefix earlier
if|if
condition|(
literal|"properties"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// determine if the service is enabled or not by taking into account two options:
comment|//
comment|//   1. ${keyPrefix}.enabled = true|false
comment|//   2. ${keyPrefix}.${name}.enabled = true|false
comment|//
comment|// The option [2] has the higher priority so as example:
comment|//
comment|//   camel.component.enabled = false
comment|//   camel.component.seda.enabled = true
comment|//
comment|// enables auto configuration of the seda component only
if|if
condition|(
operator|!
name|isServiceEnabled
argument_list|(
name|keyPrefix
argument_list|,
name|name
argument_list|,
name|prop
argument_list|)
condition|)
block|{
return|return;
block|}
name|Object
name|target
init|=
name|supplier
operator|.
name|apply
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
name|dot
operator|==
operator|-
literal|1
condition|?
literal|""
else|:
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dot
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|option
init|=
name|dot
operator|==
operator|-
literal|1
condition|?
literal|""
else|:
name|key
operator|.
name|substring
argument_list|(
name|dot
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|prop
operator|.
name|getProperty
argument_list|(
name|key
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|// enabled is a virtual property
if|if
condition|(
literal|"enabled"
operator|.
name|equalsIgnoreCase
argument_list|(
name|option
argument_list|)
condition|)
block|{
return|return;
block|}
name|validateOptionAndValue
argument_list|(
name|key
argument_list|,
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|PropertyOptionKey
name|pok
init|=
operator|new
name|PropertyOptionKey
argument_list|(
name|target
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
name|properties
operator|.
name|computeIfAbsent
argument_list|(
name|pok
argument_list|,
name|k
lambda|->
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
comment|// we ignore case for property keys (so we should store them in canonical style
name|values
operator|.
name|put
argument_list|(
name|optionKey
argument_list|(
name|option
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isServiceEnabled (String prefix, String name, Properties properties)
specifier|public
specifier|static
name|boolean
name|isServiceEnabled
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|name
parameter_list|,
name|Properties
name|properties
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|prefix
argument_list|,
literal|"prefix"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|name
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|properties
argument_list|,
literal|"properties"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|prefix
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|prefix
operator|+
literal|"."
expr_stmt|;
block|}
specifier|final
name|String
name|group
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|prefix
operator|+
literal|"enabled"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|item
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|prefix
operator|+
name|name
operator|+
literal|".enabled"
argument_list|,
name|group
argument_list|)
decl_stmt|;
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|item
argument_list|)
return|;
block|}
block|}
end_class

end_unit

